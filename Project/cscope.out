cscope 15 $HOME\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Project"               0001789977
	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\AppTask.cpp

9 
	~"lib.h
"

12 
	~"A�Task.h
"

15 
S�s�Task
 
sTask
[ 
NUM_OF_SENSOR_PORTS
 ];

16 
M��Task
 
mTask
[ 
NUM_OF_MOTOR_PORTS
 ];

17 
S�voTask
 
�rvoTask
[ 
NUM_OF_SERVO_PORTS
 ];

18 
Dig��
 
���1
;

19 
Dig��
 
���2
;

20 
Mڙ�
 
mڙ�
;

28 
cORBlo�l
 
	gA�Task
::
�b
;

29 
BYTE
 
	gA�Task
::
Mڙ�Ev�t
 = 0;

32 
	gA�Task
::
	$A�Task
�
Rtos
 &
�osIn
)

34 : 
Rtos
::
	$Task
�
�osIn
, 10000 )

37 
mڙ�
.
	`��r
();

38 
	}
}

41 
	gA�Task
::~
	$A�Task
()

43 
	}
}

46 
A�Task
::
	$upd�e
( )

48 
�b
.
funcP�_c�figM��
 = 
c�figM��
;

49 
�b
.
funcP�_�tM��
 = 
�tM��
;

50 
�b
.
funcP�_g�M��
 = 
g�M��
;

51 
�b
.
funcP�_�tMod�S�vo
 = 
�tMod�S�vo
;

52 
�b
.
funcP�_c�figS�s�
 = 
c�figS�s�
;

53 
�b
.
funcP�_g�S�s�
 = 
g�S�s�
;

54 
�b
.
funcP�_g�S�s�V�ueExt
 = 
g�S�s�V�ueExt
;

55 
�b
.
funcP�_g�S�s�Dig��
 = 
g�S�s�Dig��
;

56 
�b
.
funcP�_�tMڙ�Text
 = 
�tMڙ�Text
;

57 
�b
.
funcP�_g�Mڙ�Key
 = 
g�Mڙ�Key
;

58 
�b
.
funcP�_g�Time
 = 
g�Time
;

59 
�b
.
funcP�_wa�
 = 
wa�
;

60 
�b
.
funcP�_��rMem�y
 = 
��rMem�y
;

61 
�b
.
funcP�_�tMem�y
 = 
�tMem�y
;

62 
�b
.
funcP�_g�Mem�y
 = 
g�Mem�y
;

64 
�b
.
�r
 = 
this
;

69 #i�(
BOARD_MAIN
 =�00 && 
BOARD_SUB
 == 22)

71 *
addr
 = (*)0x8020000;

73 #�i�(
BOARD_MAIN
 =�00 && 
BOARD_SUB
 == 30)

75 *
addr
 = (*)0x8020000;

77 #�i�(
BOARD_MAIN
 =�01 && 
BOARD_SUB
 == 00)

79 *
addr
 = (*)0x8020000;

90 (*
func
)(
BYTE
 
��
, 
cORBlo�l
 &
�r
��((*)(BYTE, cORBlo��&))(*
addr
);

102 
	`func
�
P�am��
, 
�b
 );

104 
	`��
();

105 
	}
}

123 
	gA�Task
::
	$S��
�
BYTE
 
��
 )

125 
P�am��
 = 
��
;

126 
	`��t
();

127 
	}
}

133 
	gA�Task
::
	$c�figM��
(* 
�r
, 
BYTE
 
id
, 
WORD
 
t
, BYTE 
a
, BYTE 
Kp
, BYTE 
Ki
)

135 if�
id
 < 
NUM_OF_MOTOR_PORTS
)

136 
mTask
[
id
].
	`c�fig
�
t
,
a
,
Kp
,
Ki
 );

137 
	}
}

140 
	gA�Task
::
	$�tM��
(* 
�r
, 
BYTE
 
id
, BYTE 
mode
, 
��d
, 
pos
)

142 if�
id
 < 
NUM_OF_MOTOR_PORTS
)

143 
mTask
[
id
].
	`�t
�
mode
, 
��d
, 
pos
 );

144 
	}
}

147 
	gORB
::
M��
 
A�Task
::
	$g�M��
(*
�r
, 
BYTE
 
id
)

149 
ORB
::
M��
 
m��R��t
;

150 if�
id
 < 
NUM_OF_MOTOR_PORTS
 )

152 
mTask
[
id
].
	`g�
�
m��R��t
 );

154 (
m��R��t
);

155 
	}
}

158 
	gA�Task
::
	$�tMod�S�vo
(*
�r
, 
BYTE
 
id
,BYTE 
��d
, BYTE 
w�k�
)

160 if�
id
 < 
NUM_OF_SERVO_PORTS
 )

162 
�rvoTask
[
id
].
	`�t
�
��d
, 
w�k�
 );

164 
	}
}

167 
	gA�Task
::
	$c�figS�s�
(* 
�r
, 
BYTE
 
id
, BYTE 
ty�
, BYTE 
mode
, 
WORD
 
�ti�
 )

169 if�
id
 < 
NUM_OF_SENSOR_PORTS
)

170 
sTask
[
id
].
	`c�fig
�
ty�
, 
mode
, 
�ti�
 );

171 
	}
}

174 
	gORB
::
S�s�
 
A�Task
::
	$g�S�s�
(*
�r
, 
BYTE
 
id
)

176 
ORB
::
S�s�
 
�ns�R��t
;

177 if�
id
 < 
NUM_OF_SENSOR_PORTS
 )

179 
sTask
[
id
].
	`g�
�
�ns�R��t
 );

181 (
�ns�R��t
);

182 
	}
}

185 
WORD
 
	gA�Task
::
	$g�S�s�V�ueExt
(*
�r
, 
BYTE
 
id
, BYTE 
ch
)

187 if�
id
 < 
NUM_OF_SENSOR_PORTS
 )

189  
ch
 )

191 0: �
sTask
[
id
].
�ns�
->
cڋxt
.
adc1
.
	`g�Raw
()>>4 ); ;

192 1: �
sTask
[
id
].
�ns�
->
cڋxt
.
adc2
.
	`g�Raw
()>>4 ); ;

193 2: �
sTask
[
id
].
�ns�
->
cڋxt
.
dig��A
.
	`g�
() ); ;

194 3: �
sTask
[
id
].
�ns�
->
cڋxt
.
dig��B
.
	`g�
() ); ;

198 
	}
}

201 
BYTE
 
	gA�Task
::
	$g�S�s�Dig��
(*
�r
, 
BYTE
 
id
)

203 
id
 )

205 0: �
���1
.
	`g�
() ); ;

206 1: �
���2
.
	`g�
() ); ;

209 
	}
}

212 
	gA�Task
::
	$�tMڙ�Text
(*
�r
, 
BYTE
 
l�e
,cڡ *
f�m�
, 
va_li�
 
va
)

214 
mڙ�
.
	`��tf
(
l�e
, 
f�m�
,
va
);

215 
	}
}

218 
	gA�Task
::
	$g�Mڙ�Key
(*
�r
 )

220 �
Mڙ�Ev�t
 );

221 
	}
}

224 
DWORD
 
	gA�Task
::
	$g�Time
(*
�r
)

226 �
Rtos_Mcu
::
	`g�SysTime
() );

227 
	}
}

230 
	gA�Task
::
	$wa�
(*
�r
, 
DWORD
 
time
)

232 
A�Task
 *
t
 = (A�Task *)
�r
;

233 
DWORD
 
timeToGo
 = 
Rtos_Mcu
::
	`g�SysTime
()+
time
;

236 
t
->
	`�u�
();

237 }  
Rtos_Mcu
::
	`g�SysTime
(�< 
timeToGo
);

238 
	}
}

241 
	gA�Task
::
	$��rMem�y
(*
�r
)

243 
mem1
.
	`�a�
();

244 
	}
}

247 
	gA�Task
::
	$�tMem�y
(*
�r
, 
DWORD
 
addr
, 
BYTE
 *
d�a
, DWORD 
size
 )

249 
mem1
.
	`u�ock
();

250  
DWORD
 
i
=0;i<
size
;i++)

251 
mem1
.
	`wr�e
(
addr
++,
d�a
[
i
]);

252 
mem1
.
	`lock
();

253 
	}
}

256 
	gA�Task
::
	$g�Mem�y
(*
�r
, 
DWORD
 
addr
, 
BYTE
 *
d�a
, DWORD 
size
 )

258  
DWORD
 
i
=0;i<
size
;i++)

259 
d�a
[
i
] = 
mem1
.
	`�ad
(
addr
++);

260 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\AppTask.h

9 #i�de�
_APP_TASK_H


10 
	#_APP_TASK_H


	)

13 
	~"M��Task.h
"

14 
	~"S�voTask.h
"

15 
	~"S�s�Task.h
"

17 
	~"ORBlo�l.h
"

18 
	~"M��Task.h
"

19 
	~"S�s�Task.h
"

21 
	~"Mڙ�.h
"

24 
Mem�y_F�sh
 
mem1
;

33 �as�
	cA�Task
 : 
public
 
Rtos
::
Task


35 
public
:

37 
BYTE
 
P�am��
;

39 
BYTE
 
	mMڙ�Ev�t
;

40 
cORBlo�l
 
	m�b
;

42 
	mpublic
:

44 
A�Task
(
Rtos
 &
�osIn
);

47 
	mv�tu�
 ~
A�Task
();

50 
v�tu�
 
upd�e
( );

59 
S��
�
BYTE
 
��
 );

61 
	mpublic
:

63 
c�figM��
(* 
�r
, 
BYTE
 
id
, 
WORD
 
t
, BYTE 
a
, BYTE 
Kp
, BYTE 
Ki
);

66 
�tM��
(* 
�r
, 
BYTE
 
id
, BYTE 
mode
, 
��d
, 
pos
);

69 
	mORB
::
M��
 
g�M��
(*
�r
, 
BYTE
 
id
);

72 
�tMod�S�vo
(*
�r
, 
BYTE
 
id
,BYTE 
��d
, BYTE 
w�k�
);

75 
c�figS�s�
(* 
�r
, 
BYTE
 
id
, BYTE 
ty�
, BYTE 
mode
, 
WORD
 
�ti�
 );

78 
	mORB
::
S�s�
 
g�S�s�
(*
�r
, 
BYTE
 
id
);

81 
WORD
 
g�S�s�V�ueExt
(*
�r
, 
BYTE
 
id
, BYTE 
ch
);

84 
BYTE
 
g�S�s�Dig��
(*
�r
, BYTE 
id
);

87 
�tMڙ�Text
(*
�r
, 
BYTE
 
l�e
,cڡ *
f�m�
, 
va_li�
 
va
);

90 
g�Mڙ�Key
(*
�r
 );

93 
DWORD
 
g�Time
(*
�r
);

96 
wa�
(*
�r
, 
DWORD
 
time
);

99 
��rMem�y
(*
�r
);

102 
�tMem�y
(*
�r
, 
DWORD
 
addr
, 
BYTE
 *
d�a
, DWORD 
size
 );

105 
g�Mem�y
(*
�r
, 
DWORD
 
addr
, 
BYTE
 *
d�a
, DWORD 
size
 );

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\BT_RN41.h

9 
	~"Blu�o�h/Blu�o�h.h
"

16 �as�
	cBT_RN41
 : 
public
 
Blu�o�h


18 
public
:

20 
	$BT_RN41
�
cHwUART_Ext
 &
_u�t
 )

21 : 
	$Blu�o�h
(
_u�t
)

26 
bo�
 
	$wa�F�Ackn
(cڡ *
�r
)

28 
BYTE
 
c
;

29 
buf
[8];

30 
BYTE
 
pos
 = 0;

31 
timeout
 = 100000;

33  
pos
 < 7 && 
timeout
-- )

35 
Sy�em
::
	`d�ayMi�oSec
(1);

36 if�
u�t
.
	`g�
(
c
) )

38 if�
	`�rcmp
(
�r
,
buf
) == 0 )

40 �
�ue
 );

42 
buf
[
pos
++] = 
c
;

43 
buf
[
pos
 ] = 0;

46 �
�l�
 );

47 
	}
}

50 
	$c�fig
(cڡ *
�me
)

52 
�r
[32];

53 
	`�r�tf
(
�r
,"SN,%-16.16s\r", 
�me
);

56 
	`�nd
("$$$");

57 if�
	`wa�F�Ackn
("CMD"�=�
�l�
 )

59 
u�t
.
	`�tBaud��
(115200);

60 
	`�nd
("$$$");

61 
	`wa�F�Ackn
("CMD");

63 
	`�nd
("SU,11\r");

64 
	`wa�F�Ackn
("AOK");

65 
	`�nd
("R,1\r");

69 
	`�nd
("$$$");

70 
	`wa�F�Ackn
("CMD");

72 
	`�nd
(
�r
);

73 
	`wa�F�Ackn
("AOK");

74 
	`�nd
("R,1\r");

75 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\BT_RN4678.h

8 
	~"Blu�o�h/Blu�o�h.h
"

15 �as�
	cBT_RN4678
 : 
public
 
Blu�o�h


17 
public
:

19 
	$BT_RN4678
�
cHwUART_Ext
 &
_u�t
,

20 
P�t
::
P�
 &
_r�
,

21 
P�t
::
P�
 &
_wakeup
,

22 
P�t
::
P�
 &
_��us
 )

23 : 
	`Blu�o�h
(
_u�t
), 
	`r�
(
_r�
), 
	`wakeup
(
_wakeup
), 
	$��us
(
_��us
)

25 
r�
.
	`�t
(0);

26 
wakeup
.
	`�t
(1);

28 
r�
.
	`�tMode
 ( 
P�t
::
OutOD
 );

29 
wakeup
.
	`�tMode
�
P�t
::
OutOD
 );

30 
��us
.
	`�tMode
�
P�t
::
In
 );

32 
Sy�em
::
	`d�ayM�liSec
(1);

33 
r�
.
	`�t
(1);

34 
Sy�em
::
	`d�ayM�liSec
(100);

48 
bo�
 
	$wa�F�Ackn
(cڡ *
�r
)

50 
BYTE
 
c
;

51 
buf
[8];

52 
BYTE
 
pos
 = 0;

53 
timeout
 = 100000;

55  
pos
 < 7 && 
timeout
-- )

57 
Sy�em
::
	`d�ayMi�oSec
(1);

58 if�
u�t
.
	`g�
(
c
) )

60 if�
	`�rcmp
(
�r
,
buf
) == 0 )

62 �
�ue
 );

64 
buf
[
pos
++] = 
c
;

65 
buf
[
pos
 ] = 0;

68 �
�l�
 );

69 
	}
}

72 
	$c�fig
(cڡ *
�me
)

74 
�r
[32];

75 
	`�r�tf
(
�r
,"SN,%-16.16s\r", 
�me
);

77 
r�
.
	`�t
(0);

78 
wakeup
.
	`�t
(1);

80 
Sy�em
::
	`d�ayM�liSec
(1);

81 
r�
.
	`�t
(1);

82 
Sy�em
::
	`d�ayM�liSec
(100);

85 
	`�nd
("$$$\r");

86 
	`wa�F�Ackn
("CMD>");

87 
	`�nd
(
�r
);

88 
	`wa�F�Ackn
("AOK");

89 
	`�nd
("SG,2\r");

90 
	`wa�F�Ackn
("AOK");

91 
	`�nd
("S?,1\r");

92 
	`wa�F�Ackn
("AOK");

93 
	`�nd
("SQ,9100\r");

94 
	`wa�F�Ackn
("AOK");

95 
	`�nd
("R,1\r");

96 
	}
}

98 
	g�iv�e
:

100 
P�t
::
P�
 &
r�
;

101 
	gP�t
::
P�
 &
wakeup
;

102 
	gP�t
::
P�
 &
��us
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\Bluetooth.h

9 
	~"UART_Ext.h
"

16 �as�
	cBlu�o�h


18 
	mpublic
:

20 
	$Blu�o�h
�
cHwUART_Ext
 &
_u�t
 )

21 : 
	$u�t
(
_u�t
)

25 
��e�ed
:

27 
v�tu�
 
bo�
 
	$�nd
(cڡ *
�r
)

29 
BYTE
 
c
;

32 
u�t
.
	`g�
(
c
));

34 
u�t
.
	`�t
(
�r
);

35 �
�l�
 );

36 
	}
}

39 
v�tu�
 
bo�
 
wa�F�Ackn
(cڡ *
�r
) = 0;

41 
	gpublic
:

43 
v�tu�
 
c�fig
(cڡ *
�me
) = 0;

45 
	gpublic
:

47 
cHwUART_Ext
 &
u�t
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Control.cpp

9 
	~"lib.h
"

10 
	~"Cڌ�.h
"

13 
M��Task
 
sTask
 [ 
NUM_OF_SENSOR_PORTS
 ];

14 
M��Task
 
mTask
 [ 
NUM_OF_MOTOR_PORTS
 ];

15 
S�voTask
 
�rvoTask
[ 
NUM_OF_SERVO_PORTS
 ];

16 
Mڙ�
 
mڙ�
;

17 
cDevA�logInADC
 
Vcc
;

25 
	gCڌ�
::
	$Cڌ�
�
TaskM�ag�
 &
�skH�d�r
,

26 
U�rI����
 &
ui
 )

28 : 
	`ui
�
ui
 )

29 ,
	`ou�utTim�
�
�skH�d�r
, 1000 )

30 ,
	$VccTim�
 ( 
�skH�d�r
, 10 )

33 
VccF��r
 = 100;

34 
�skH�d�r
.
	`add
(
this
);

35 
	}
}

38 
	gCڌ�
::
	$upd�e
()

41 if�
VccTim�
.
	`timeout
() )

43 
VccF��r
 = 0.05f*()
Vcc
 + 0.95f*VccFilter;

44 
ui
.
	`�tVcc
�
VccF��r
 );

48 if�
ou�utTim�
.
	`timeout
() )

51 if�!
ui
.
	`isA�A�ive
() )

54  
i
=0; i<
NUM_OF_MOTOR_PORTS
; i++ )

56 
mTask
[
i
].
	`�t
( 0, 0, 0 );

60  
i
=0; i<
NUM_OF_SERVO_PORTS
; i++ )

62 
�rvoTask
[
i
].
	`�t
( 0, 0 );

70 
mڙ�
.
	`��r
();

74 
	}
}

77 
	gCڌ�
::
	$�igg�
()

79 
ou�utTim�
.
	`��t
();

80 
	}
}

83 
BYTE
 
	gCڌ�
::
	$g�Vcc
()

85 �
VccF��r
 );

86 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Control.h

9 #i�de�
_CONTROL_H


10 
	#_CONTROL_H


	)

13 
	~"lib.h
"

14 
	~"U�rI����.h
"

15 
	~"ORBlo�l.h
"

16 
	~"M��Task.h
"

17 
	~"S�s�Task.h
"

24 �as�
	cCڌ�
 : 
public
 
TaskM�ag�
::
Task


26 
public
:

28 
Cڌ�
�
TaskM�ag�
 &
�skH�d�r
, 
U�rI����
 &
ui
 );

31 
upd�e
();

34 
�igg�
();

37 
BYTE
 
g�Vcc
();

39 
	m�iv�e
:

41 
U�rI����
 &
ui
;

43 
	mTaskM�ag�
::
TimeOut
 
ou�utTim�
;

44 
	mTaskM�ag�
::
TimeOut
 
VccTim�
;

46 
	mVccF��r
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Monitor.cpp

9 
	~"lib.h
"

12 
	~"Mڙ�.h
"

20 
	gMڙ�
::
	$Mڙ�
()

22 
	}
}

25 
Mڙ�
::
	$��r
()

27 
i
=0;i<4;i++)

28 ::
	`�r�y
(
�xt
[
i
],"");

29 
	}
}

32 
	gMڙ�
::
	$g�NextL�e
(
cMڙ�FromORB
::
D�a
 &
out
)

34 
out
.
l�e
 = (out.line>=3)?0:out.line+1;

35 
	`���y
�
out
.
�xt
,�ext[out.
l�e
],30);

36 
	}
}

39 
	gMڙ�
::
	$��tf
(
BYTE
 
l�e
,cڡ *
f�m�
, 
va_li�
 
va
)

41 if�
l�e
 < 4 )

42 
	`v���tf
�
�xt
[
l�e
], 31, 
f�m�
, 
va
 );

43 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Monitor.h

9 #i�de�
_MONITOR_H


10 
	#_MONITOR_H


	)

13 
	~"lib.h
"

14 
	~"Prݔt�s.h
"

21 �as�
	cMڙ�


23 
	mpublic
:

25 
Mڙ�
();

27 
��r
();

29 
g�NextL�e
(
cMڙ�FromORB
::
D�a
 &
out
);

31 
��tf
(
BYTE
 
l�e
,cڡ *
f�m�
, 
va_li�
 
va
);

33 
	m�iv�e
:

35 
�xt
[4][31];

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Motor.cpp

9 
	~"lib.h
"

10 
	~<m�h.h
>

11 
	~"M��.h
"

14 cڡ 
	ga0
 = 0.05f;

15 cڡ 
	gb0
 = (1.0�- 
a0
);

16 cڡ 
	gmaxPwr
 = 1000.0f;

24 
	gM��
::
	$M��
�
cDevM��
 &
m��In
,

25 
cHwEncod�
 &
�cIn
 )

27 : 
	`m��
�
m��In
 ),

28 
	$�c
 ( 
�cIn
 )

31 
pow�
 = 0;

32 
m�su�dPos
 = 0;

33 
�c
.
	`g�
();

34 
	}
}

37 
	gM��
::
	$upd�e
( )

39 
tics
 = 
�c
.
	`g�
();

41 
���gBuf�r
 >> 
���g
;

42 
c�figBuf�r
 >> 
c�fig
;

44 
m�su�dPos
 +�
tics
;

45 
m�su�dS�ed
 = 
c�fig
.
ticsToR�
*
mov�gAv�age
.
	`g�
�
tics
 );

47  
���g
.
mode
 )

50 
posS�ed
 = 0;

51 
pow�
 = 0;

52 
m��
.
	`run
�
pow�
 );

55 
FREE
:

56 
posS�ed
 = 0;

57 
pow�
 = 
	`RANGE
�
���g
.
��d
, -
maxPwr
, +maxPwr );

58 
m��
.
	`run
�
pow�
 );

61 
BRAKE
:

62 
posS�ed
 = 0;

63 
pow�
 = 0;

64 
m��
.
	`b�ke
();

67 
SPEED
:

68 
posS�ed
 = 0;

69 
	`��dCڌ�
�
���g
.
��d
 );

70 
m��
.
	`run
�
pow�
 );

73 
POSITION
:

74 
	`pos�i�Cڌ�
�
���g
.
��d
, s�t�g.
pos
 );

75 
	`��dCڌ�
�
posS�ed
 );

76 
m��
.
	`run
�
pow�
 );

80 
�p�t
.
pwr
 = 
a0
*
pow�
 + 
b0
*report.pwr;

81 
�p�t
.
��d
 = 
a0
*1000.0*
m�su�dS�ed
 + 
b0
*report.speed;

82 
�p�t
.
pos
 = 
c�fig
.
ticsToR�
*()
m�su�dPos
;

84 
�p�tBuf�r
 << 
�p�t
;

85 
	}
}

88 
	gM��
::
	$��dCڌ�
�
��d
 )

90 
d��
 = 
��d
 - 
m�su�dS�ed
;

92 
pow�
 +�
c�fig
.
Reg�r_Ki
 * 
d��
 + c�fig.
Reg�r_Kp
 * (d�� - 
d��La�
);

93 
pow�
 = 
	`RANGE
�pow�, -
maxPwr
, +maxPwr );

95 
d��La�
 = 
d��
;

96 
	}
}

99 
	gM��
::
	$pos�i�Cڌ�
�
��dLim�
, 
�rg�Pos
 )

101 
�rg�S�ed
 = 0;

102 
di���
 = 
�rg�Pos
 - 
c�fig
.
ticsToR�
*()
m�su�dPos
;

103 
accLo�l
 = 
c�fig
.
acc
*
��dLim�
;

106 
v
 = 
	`sq�f
�0.01*200.0�* 
	`�bs
(
di���
�* 
accLo�l
 );

108 
�rg�S�ed
 = 
	`SIGN
(
di���
�* 
	`MIN
�
v
, ()
	`�bs
(
��dLim�
) );

111 if�
posS�ed
 + 
accLo�l
 < 
�rg�S�ed
 )

113 
posS�ed
 +�
accLo�l
;

115 if�
posS�ed
 - 
accLo�l
 > 
�rg�S�ed
 )

117 
posS�ed
 -�
accLo�l
;

121 
posS�ed
 = 
�rg�S�ed
;

123 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Motor.h

10 #i�de�
_MOTOR_H


11 
	#_MOTOR_H


	)

14 
	~"lib.h
"

15 
	~"Mov�gAv�age.h
"

16 
	~"ORB.h
"

23 �as�
	cM��


25 
	mpublic
:

29 
FREE
 = 0,

30 
	mBRAKE
 = 1,

31 
	mSPEED
 = 2,

32 
	mPOSITION
 = 3

33 } 
	tCڌ�Mode
;

36 �as�
	cS�t�g


38 
	gpublic
:

39 
Cڌ�Mode
 
mode
;

40 
	g��d
;

41 
	gpos
;

45 �as�
	cC�fig


47 
	gpublic
:

48 
ticsToR�
;

49 
	gacc
;

50 
	gReg�r_Kp
;

51 
	gReg�r_Ki
;

54 
	gpublic
:

56 
M��
�
cDevM��
 &
m��
,

57 
cHwEncod�
 &
�cIn
 );

60 
v�tu�
 
upd�e
( );

62 
	g�iv�e
:

64 
��dCڌ�
�
��d
 );

67 
pos�i�Cڌ�
�
��dLim�
, 
pos
 );

69 
	gpublic
:

71 
cSh�edMem
<
ORB
::
M��
 > 
�p�tBuf�r
;

72 
	gcSh�edMem
<
	gS�t�g
 > 
	g���gBuf�r
;

73 
	gcSh�edMem
<
	gC�fig
 > 
	gc�figBuf�r
;

75 
	g�iv�e
:

77 
cDevM��
 &
m��
;

78 
	gcHwEncod�
 &
	g�c
;

80 
	gORB
::
M��
 
�p�t
;

81 
S�t�g
 
	g���g
;

82 
C�fig
 
	gc�fig
;

84 
	gm�su�dS�ed
;

85 
	gm�su�dPos
;

87 
	gpow�
;

88 
	gd��La�
;

89 
	gposS�ed
;

90 
bo�
 
	gisPosC�lRug
;

92 
	gMov�gAv�age
<20> 
	gmov�gAv�age
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MotorTask.cpp

9 
	~"lib.h
"

10 
	~"m�h.h
"

13 
	~"M��Task.h
"

14 
	~"Prݔt�s.h
"

22 
	gM��Task
::
	$M��Task
�
TaskM�ag�
 &
�skH�d�r
,

23 
cDevM��
 &
m��In
,

24 
cHwEncod�
 &
�cod�
 )

26 : 
	$m��
 ( 
m��In
,

27 
�cod�
 )

30 
�skH�d�r
.
	`add
�
this
 );

31 
	}
}

34 
	gM��Task
::
	$upd�e
( )

36 
m��
.
	`upd�e
();

37 
	}
}

40 
	gM��Task
::
	$�t
�
BYTE
 
modeIn
, 
��dIn
, 
posIn
 )

42 
M��
::
S�t�g
 
���g
;

44  
modeIn
 )

47 
���g
.
mode
 = 
M��
::
FREE
;

48 
���g
.
��d
 = 0;

49 
���g
.
pos
 = 0;

52 
cPr�ToORB
::
D�a
::
M��
::
POWER_MODE
:

53 
���g
.
mode
 = 
M��
::
FREE
;

54 
���g
.
��d
 = 
��dIn
;

55 
���g
.
pos
 = 0;

58 
cPr�ToORB
::
D�a
::
M��
::
BRAKE_MODE
:

59 
���g
.
mode
 = 
M��
::
BRAKE
;

60 
���g
.
��d
 = 0;

61 
���g
.
pos
 = 0;

64 
cPr�ToORB
::
D�a
::
M��
::
SPEED_MODE
:

65 
���g
.
mode
 = 
M��
::
SPEED
;

66 
���g
.
��d
 = 0.001*()
��dIn
;

67 
���g
.
pos
 = 0;

70 
cPr�ToORB
::
D�a
::
M��
::
MOVETO_MODE
:

71 
���g
.
mode
 = 
M��
::
POSITION
;

72 
���g
.
��d
 = ::
	`�bs
(0.001*()
��dIn
);

73 
���g
.
pos
 = 
posIn
;

77 
m��
.
���gBuf�r
 << 
���g
;

78 
	}
}

81 
	gM��Task
::
	$c�fig
�
WORD
 
ticsP�R٩i�
,

82 
BYTE
 
ac�˿ti�
,

83 
BYTE
 
Reg�r_Kp
,

84 
BYTE
 
Reg�r_Ki
 )

86 
M��
::
C�fig
 
c�fig
;

88 if�
ticsP�R٩i�
 < 1)

91 
c�fig
.
ticsToR�
 = 100.0 / ()
ticsP�R٩i�
;

92 
c�fig
.
Reg�r_Kp
 = 10.0 *()Regler_Kp;

93 
c�fig
.
Reg�r_Ki
 = 1.0 *()Regler_Ki;

94 
c�fig
.
acc
 = 5.0E-5*()
ac�˿ti�
;

96 
m��
.
c�figBuf�r
 << 
c�fig
;

97 
	}
}

101 
	gM��Task
::
	$g�
�
ORB
::
M��
 &
�p�t
 )

103 
m��
.
�p�tBuf�r
 >> 
�p�t
;

104 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MotorTask.h

9 #i�de�
_MOTOR_TASK_H


10 
	#_MOTOR_TASK_H


	)

13 
	~"M��.h
"

20 �as�
	cM��Task
 : 
public
 
TaskM�ag�
::
Task


22 
public
:

24 
M��Task
�
TaskM�ag�
 &
�skH�d�r
,

25 
cDevM��
 &
m��In
,

26 
cHwEncod�
 &
�cod�
 );

29 
�t
�
BYTE
 
modeIn
,

30 
��dIn
,

31 
posIn
 );

33 
c�fig
�
WORD
 
ticsP�R٩i�
,

34 
BYTE
 
ac�˿ti�
,

35 
BYTE
 
Reg�r_Kp
,

36 
BYTE
 
Reg�r_Ki
 );

39 
g�
�
ORB
::
M��
 &
�p�t
 );

41 
	m�iv�e
:

43 
v�tu�
 
upd�e
( );

45 
	m�iv�e
:

47 
M��
 
m��
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MovingAverage.h

9 #i�de�
_MOVING_AVERAGE_H


10 
	#_MOVING_AVERAGE_H


	)

17 
	g�m��e
 <
	gAVG_SIZE
> c�s�
	cMov�gAv�age


19 
	m�iv�e
:

21 
�kt�
;

22 
	m�dex
;

23 
	msum
;

24 
	m�m�es
[
AVG_SIZE
];

26 
	mpublic
:

28 
	$Mov�gAv�age
( )

30 
�dex
 = 0;

31 
sum
 = 0;

32 
�kt�
 = 1.0/
AVG_SIZE
;

36 
	$g�
(
v�
)

39 if�
�dex
 >�
AVG_SIZE
 )

41 
�dex
 = 0;

43 
sum
 = sum - 
�m�es
[
�dex
];

44 
�m�es
[
�dex
] = 
v�
;

45 
sum
 = sum + 
v�
;

47 
�dex
++;

48  
�kt�
*
sum
;

49 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\PythonTask.cpp

1 
	~"Pyth�Task.h
"

2 
	~"lib.h
"

3 
	~"Rem�e.h
"

5 
	~"pyth�-vm.h
"

8 
Pyth�VM
 
vm
;

9 
Mem�y_F�sh
 
�og�mMem
(11);

11 
	gPyth�Task
::
	$Pyth�Task
�
Rtos
 &
�osIn
)

13 : 
Rtos
::
	$Task
�
�osIn
, 10000 )

14 {
	}
}

16 
	gPyth�Task
::~
	$Pyth�Task
(){

18 
	}
}

20 
Pyth�Task
::
	$upd�e
( ){

21 
vm
.
	`run
(
l�dProg�mL�gth
, 
l�dProg�m
);

22 
	`��
();

23 
	}
}

25 
	gPyth�Task
::
	$S��
�
BYTE
 
��
 ){

26 
	`��t
();

27 
	}
}

29 
	gPyth�Task
::
	$St�
(){

30 
	`��
();

31 
	}
}

34 
	gPyth�Task
::
	$u�rI��ru�
(){

35 
vm
.
	`��Prog�m
();

37 
vm
.
	`isRug
()){}

38 
	}
}

40 
bo�
 
	gPyth�Task
::
	$isRug
() {

41  
vm
.
	`isRug
();

42 
	}
}

44 
u�t8_t
* 
	$l�dProg�m
(
�ngth
) {

45 
u�t8_t
* 
�og�mD�a
 = (u�t8_t*)
	`m�loc
(
�ngth
 * (uint8_t));

46 i�(
�og�mD�a
 =�
nuαr
) {

47  
nuαr
;

50  
DWORD
 
i
=0;i<
�ngth
;i++) {

51 
�og�mD�a
[
i
] = 
�og�mMem
.
	`�ad
(4 + i);

53  
�og�mD�a
;

54 
	}
}

56 
u�t32_t
 
	$l�dProg�mL�gth
() {

57  (
�og�mMem
.
	`�ad
(0) << 24) | (programMem.read(1) << 16) | (programMem.read(2) << 8) | (programMem.read(3));

58 
	}
}

61 * 
	g�m�eUsbPTR
;

63 * 
	$g�Rem�eUsb
(){

64  
�m�eUsbPTR
;

65 
	}
}

67 
	$�tRem�eUsb
(* 
rUsb
){

68 
�m�eUsbPTR
 = 
rUsb
;

69 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\PythonTask.h

2 #i�de�
_PYTHON_TASK_H


3 
	#_PYTHON_TASK_H


	)

5 
	~"py/obj.h
"

6 
	~"py/mph�.h
"

7 
	~"py/ru�ime.h
"

8 
	~"lib.h
"

10 
Mem�y_F�sh
 
�og�mMem
;

12 �as�
	cPyth�Task
 : 
public
 
Rtos
::
Task


14 
public
:

17 
BYTE
 
P�am��
;

19 
BYTE
 *
	m�og�mD�a
;

21 
	mpublic
:

23 
Pyth�Task
(
Rtos
 &
�osIn
);

26 
	mv�tu�
 ~
Pyth�Task
();

29 
v�tu�
 
upd�e
( );

38 
S��
�
BYTE
 
��
 );

40 
St�
();

42 
u�rI��ru�
();

44 
bo�
 
isRug
();

49 
u�t8_t
* 
l�dProg�m
(
�ngth
);

51 
u�t32_t
 
l�dProg�mL�gth
();

53 * 
g�Rem�eUsb
();

55 
�tRem�eUsb
(* 
�m�eUsb
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Remote.cpp

9 
	~"lib.h
"

12 
	~"Rem�e.h
"

13 
	~"Blu�o�h.h
"

16 
Mem�y_F�sh
 
mem0
;

17 
Mem�y_F�sh
 
mem1
;

21 
Blu�o�h
 &
btm
;

23 
S�s�Task
 
sTask
 [ 
NUM_OF_SENSOR_PORTS
 ];

24 
M��Task
 
mTask
 [ 
NUM_OF_MOTOR_PORTS
 ];

25 
S�voTask
 
�rvoTask
[ 
NUM_OF_SERVO_PORTS
 ];

27 
Dig��
 
���1
;

28 
Dig��
 
���2
;

36 
	gRem�e
::
	$Rem�e
�
cISC
 &
�c
,

37 
U�rI����
 &
ui
,

38 
Cڌ�
 &
��
,

39 
S�t�gs
 &
���gs
,

40 
Mڙ�
 &
mڙ�
 )

42 : 
	`�c
 ( 
�c
 )

43 ,
	`ui
 ( 
ui
 )

44 ,
	`��
 ( 
��
 )

45 ,
	`���gs
�
���gs
 )

46 ,
	`mڙ�
 ( 
mڙ�
 )

48 ,
	`c�figIn
 ( 
�c
 )

49 ,
	`��In
 ( 
�c
 )

50 ,
	`��Out
 ( 
�c
 )

51 ,
	`mڙ�In
 ( 
�c
 )

52 ,
	`mڙ�Out
 ( 
�c
 )

53 ,
	`���gsOut
�
�c
 )

54 ,
	`���gsIn
 ( 
�c
 )

56 ,
	`dow��d
 ( 
�c
 )

57 ,
	$��r��0
 ( 
dow��d
, 
mem0
, 
ui
 )

62 
c�figRe�ivedF�g
 = 
�l�
;

63 
ac��F�g
 = 
�ue
;

64 
	}
}

67 
	gRem�e
::
	$upd�e
()

69 
bo�
 
�nd
 = 
�l�
;

71 
�c
.
	`upd�e
();

74 if�
c�figIn
.
	`isNew
() )

76 if�!
ui
.
	`isA�A�ive
() )

78 
c�figRe�ivedF�g
 = 
�ue
;

81  
i
=0; i<
NUM_OF_SENSOR_PORTS
; i++ )

83 
sTask
[
i
].
	`c�fig
�
c�figIn
.
d�a
.
�ns�C�fig
[i].
ty�
,

84 
c�figIn
.
d�a
.
�ns�C�fig
[
i
].
mode
,

85 
c�figIn
.
d�a
.
�ns�C�fig
[
i
].
�ti�
 );

89  
i
=0; i<
NUM_OF_MOTOR_PORTS
; i++ )

91 
mTask
[
i
].
	`c�fig
�
c�figIn
.
d�a
.
m��C�fig
[i].
ticsP�R٩i�
,

92 
c�figIn
.
d�a
.
m��C�fig
[
i
].
ac�˿ti�
,

93 
c�figIn
.
d�a
.
m��C�fig
[
i
].
Reg�r_Kp
,

94 
c�figIn
.
d�a
.
m��C�fig
[
i
].
Reg�r_Ki
 );

101 if�
��In
.
	`isNew
() )

103 if�!
ui
.
	`isA�A�ive
() )

106  
i
=0; i<
NUM_OF_MOTOR_PORTS
; i++ )

108 
mTask
[
i
].
	`�t
�
��In
.
d�a
.
m��
[i].
mmode
,

109 
��In
.
d�a
.
m��
[
i
].
��d
,

110 
��In
.
d�a
.
m��
[
i
].
pos
 );

114  
i
=0; i<
NUM_OF_SERVO_PORTS
; i++ )

116 
�rvoTask
[
i
].
	`�t
�
��In
.
d�a
.
mod�S�vo
[i].
s��d
,

117 
��In
.
d�a
.
mod�S�vo
[
i
].
�os
 );

120 
��
.
	`�igg�
();

123 
�nd
 = 
�ue
;

128 if�
���gsIn
.
	`isNew
() )

130 if�
ac��F�g
 && 
���gsIn
.
d�a
.
comm�d
 & 0x01 )

132 
���gs
.
	`��e
�
���gsIn
.
d�a
 );

133 
btm
.
	`c�fig
�
���gsIn
.
d�a
.
�me
 );

136 if�
ac��F�g
 && 
���gsIn
.
d�a
.
comm�d
 & 0x02 )

138 
mem1
.
	`�a�
();

141 
ac��F�g
 = (
���gsIn
.
d�a
.
comm�d
 =�0 )?
�ue
:
�l�
;

143 
���gs
.
	`g�
(
���gsOut
.
d�a
);

144 
���gsOut
.
	`wr�e
();

149 if�
mڙ�In
.
	`isNew
() )

151 
ui
.
	`�tMڙ�Ev�t
�
mڙ�In
.
d�a
.
keycode
 );

153  
mڙ�In
.
d�a
.
bmode
 )

155 1: 
ui
.
	`��tA�
�
mڙ�In
.
d�a
.
��m��
 ); ;

156 2: 
ui
.
	`��A�
(); ;

159 
mڙ�
.
	`g�NextL�e
�
mڙ�Out
.
d�a
 );

160 
mڙ�Out
.
	`wr�e
();

162 
�nd
 = 
�ue
;

167 if�
�nd
 )

169 
cPr�FromORB
::
D�a
 &
d
 = 
��Out
.
d�a
;

172  
i
=0; i<
NUM_OF_SENSOR_PORTS
; i++ )

174 
BYTE
 
�nExp
 = (
d
.
�ns�
[
i
].
des��t�
>>5)&0x07;

175 
BYTE
 
�ckage
 = (
d
.
�ns�
[
i
].
des��t�
 & 0x1F)+1;

177 if�
�nExp
 > 2 && 
�ckage
 < (1<<(lenExp-2)) )

180 
d
.
�ns�
[
i
].
v�ue
 = 
�p�t
[i].value[1];

181 
d
.
�ns�
[
i
].
des��t�
 = (
�nExp
<<5)|
�ckage
;

185 
sTask
[
i
].
	`g�
�
�p�t
[i] );

187 
d
.
�ns�
[
i
].
v�ue
 = 
�p�t
[i].value[0];

188 
d
.
�ns�
[
i
].
des��t�
 = 
�p�t
[i].
�nExp
<<5;

189 
d
.
�ns�
[
i
].
ty�
 = 
�p�t
[i].type;

190 
d
.
�ns�
[
i
].
�ti�
 = 
�p�t
[i].option;

194 
d
.
dig��
 = (
���1
.
	`g�
() ? 0x01 : 0)

195 |(
���2
.
	`g�
() ? 0x02 : 0);

198  
i
=0; i<
NUM_OF_MOTOR_PORTS
; i++)

200 
ORB
::
M��
 
�p�t
;

201 
mTask
[
i
].
	`g�
�
�p�t
 );

202 
d
.
m��
[
i
].
pwr
 = 
	`RANGE
(()(0.10005f*
�p�t
.pwr),-100,+100);

203 
d
.
m��
[
i
].
��d
 = 1.0005f*
�p�t
.speed;

204 
d
.
m��
[
i
].
pos
 = 
�p�t
.pos;

208 
d
.
Vcc
 = 
��
.
	`g�Vcc
();

211 
d
.
��us
 = (�
ui
.
	`isA�A�ive
() ? 1 : 0 ) << 0 )

212 | (�
c�figRe�ivedF�g
? 1 : 0 ) << 1 );

214 
c�figRe�ivedF�g
 = 
�l�
;

217 
��Out
.
	`wr�e
();

219 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Remote.h

9 #i�de�
_REMOTE_H


10 
	#_REMOTE_H


	)

13 
	~"lib.h
"

14 
	~"Modu�/Dow��d.h
"

15 
	~"Modu�/Rtos/Rtos.h
"

18 
	~"S�t�gs.h
"

19 
	~"U�rI����.h
"

20 
	~"Cڌ�.h
"

21 
	~"ORBlo�l.h
"

22 
	~"M��Task.h
"

23 
	~"S�s�Task.h
"

30 �as�
	cRem�e


32 
	m�iv�e
:

38 �as�
	cDow��dI��f
 : 
public
 
cDow��d
::
I����


40 
public
:

42 
Dow��dI��f
�
cDow��d
 &
dow��d
,

43 
Mem�y
 &
mem
,

44 
U�rI����
 &
ui
 )

46 : 
cDow��d
::
I����
�
dow��d
, 
mem
 )

47 ,
ui
(ui)

52 
v�tu�
 
bo�
 
�S��
()

54 
	mui
.
��A�
();

55 �
	m�ue
 );

59 
v�tu�
 
�R�dy
()

63 
	mU�rI����
 &
	mui
;

66 
	gpublic
:

68 
Rem�e
�
cISC
 &
�c
,

69 
U�rI����
 &
ui
,

70 
Cڌ�
 &
��
,

71 
S�t�gs
 &
���gs
,

72 
Mڙ�
 &
mڙ�
 );

75 
upd�e
();

77 
	g�iv�e
:

79 
cISC
 &
�c
;

80 
	gU�rI����
 &
	gui
;

81 
	gCڌ�
 &
	g��
;

82 
	gS�t�gs
 &
	g���gs
;

83 
	gMڙ�
 &
	gmڙ�
;

85 
	gcISC
::
D�a
<
cC�figToORB
, 0> 
	gc�figIn
;

86 
	gcISC
::
D�a
<
cPr�ToORB
, 1> 
	g��In
;

87 
	gcISC
::
D�a
<
cPr�FromORB
, 2> 
	g��Out
;

88 
	gcISC
::
D�a
<
cMڙ�ToORB
, 3> 
	gmڙ�In
;

89 
	gcISC
::
D�a
<
cMڙ�FromORB
, 4> 
	gmڙ�Out
;

90 
	gcISC
::
D�a
<
cS�t�gsFromORB
, 5> 
	g���gsOut
;

91 
	gcISC
::
D�a
<
cS�t�gsToORB
, 6> 
	g���gsIn
;

93 
cDow��d
 
	gdow��d
;

94 
Dow��dI��f
 
	g��r��0
;

98 
bo�
 
	gc�figRe�ivedF�g
;

100 
	gORB
::
S�s�
 
�p�t
[
NUM_OF_SENSOR_PORTS
];

102 
bo�
 
	gac��F�g
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

11 
	~"S�s�.h
"

19 
	gS�s�
::
Cڋxt
::
	$Cڋxt
�
cDevA�logIn
 &
adc1_In
,

20 
cDevA�logIn
 &
adc2_In
,

21 
P�t
::
P�
 &
dig��A_In
,

22 
P�t
::
P�
 &
dig��B_In
,

23 
P�t
::
P�
 &
dig��C_In
,

24 
P�t
::
P�
 &
dig��D_In
,

25 
P�t
::
P�
 &
dig��H_In
 )

27 : 
	`adc1
(
adc1_In
),

28 
	`adc2
(
adc2_In
),

29 
	`dig��A
(
dig��A_In
),

30 
	`dig��B
(
dig��B_In
),

31 
	`dig��C
(
dig��C_In
),

32 
	`dig��D
(
dig��D_In
),

33 
	$dig��H
(
dig��H_In
)

36 
	}
}

44 
	gS�s�
::
	$S�s�
�
S�s�
::
Cڋxt
 &
cڋxt_In
 )

46 : 
	$cڋxt
�
cڋxt_In
 )

48 
cڋxt
.
dig��H
.
	`�t
();

49 
cڋxt
.
dig��H
.
	`�tMode
�
P�t
::
OutOD
 );

50 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor.h

9 #i�de�
_SENSOR_H


10 
	#_SENSOR_H


	)

13 
	~"Prݔt�s.h
"

14 
	~"ORB.h
"

21 �as�
	cS�s�


23 
	mpublic
:

29 �as�
	cCڋxt


31 
public
:

33 
Cڋxt
�
cDevA�logIn
 &
adc1In
,

34 
cDevA�logIn
 &
adc2In
,

35 
P�t
::
P�
 &
dig��A
,

36 
P�t
::
P�
 &
dig��B
,

37 
P�t
::
P�
 &
dig��C
,

38 
P�t
::
P�
 &
dig��D
,

39 
P�t
::
P�
 &
dig��H
 );

42 
	mpublic
:

44 
cDevA�logIn
 &
adc1
;

45 
	mcDevA�logIn
 &
	madc2
;

46 
	mP�t
::
P�
 &
dig��A
;

47 
	mP�t
::
P�
 &
dig��B
;

48 
	mP�t
::
P�
 &
dig��C
;

49 
	mP�t
::
P�
 &
dig��D
;

50 
	mP�t
::
P�
 &
dig��H
;

53 
	gpublic
:

59 �as�
	cR��t


61 
public
:

63 
ORB
::
S�s�
 
�p
;

66 
��t
�
BYTE
 
_ty�
 )

68 
	g�p
.
	gty�
 = 
_ty�
;

69 
	g�p
.
	g�ti�
 = 0;

70 
	g�p
.
	g�nExp
 = 0;

71 
	g�p
.
	gv�ue
[0] = 0;

72 
	g�p
.
	gv�ue
[1] = 0;

76 
�tV�id
(�{
	g�p
.
	gty�
 |= 0x80;}

77 
�rV�id
(�{
	g�p
.
	gty�
 &= ~0x80;}

80 
	gpublic
:

82 
S�s�
�S�s�::
Cڋxt
 &
cڋxt
 );

85 
v�tu�
 
��t
( ) = 0;

88 
v�tu�
 
��
( ) = 0;

91 
v�tu�
 
upd�e
( ) = 0;

94 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�In
 ) = 0;

96 
	gpublic
:

98 
S�s�
::
R��t
 
�p�t
;

99 
	gS�s�
::
Cڋxt
 &
cڋxt
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\SensorTask.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

13 
	~"S�s�Task.h
"

14 
	~"Prݔt�s.h
"

22 
	gS�s�Task
::
	$S�s�Task
�
Rtos
 &
�osIn
,

23 
S�s�
::
Cڋxt
 &
cڋxt
,

24 
cHwUART_Ext
 &
sIn
,

25 
Tim�
 &
tim
,

26 
cHwExtI�
 &
extI�
 )

28 : 
Rtos
::
	`Task
 ( 
�osIn
, 0x500 ),

29 
	`�ns�A�log
�
cڋxt
 ),

30 
	`�ns�UART
 ( 
cڋxt
, 
sIn
 ),

31 
	`�ns�I2C
 ( 
cڋxt
 ),

32 
	`�ns�TOF
 ( 
cڋxt
, 
tim
, 
extI�
),

33 
	`�ns�Touch
 ( 
cڋxt
 ),

34 
	$�ns�Debug
 ( 
cڋxt
 )

37 
�ns�
 = &
�ns�A�log
;

38 
ty�
 = 
cC�figToORB
::
D�a
::
S�s�C�fig
::
ANALOG
;

39 
mode
 = 0;

40 
�ti�
 = 0;

41 
isNewTy�
 = 
�l�
;

42 
isNewMode
 = 
�l�
;

44 
	`��t
();

45 
	}
}

48 
	gS�s�Task
::
	$upd�e
( )

50 
�ns�
->
	`��t
();

54 if�
isNewTy�
 )

56  
ty�
 )

59 
cC�figToORB
::
D�a
::
S�s�C�fig
::
ANALOG
: 
�ns�
 = &
�ns�A�log
; ;

60 
cC�figToORB
::
D�a
::
S�s�C�fig
::
UART
: 
�ns�
 = &
�ns�UART
; ;

61 
cC�figToORB
::
D�a
::
S�s�C�fig
::
I2C
: 
�ns�
 = &
�ns�I2C
; ;

62 
cC�figToORB
::
D�a
::
S�s�C�fig
::
TOF
: 
�ns�
 = &
�ns�TOF
; ;

63 
cC�figToORB
::
D�a
::
S�s�C�fig
::
TOUCH
: 
�ns�
 = &
�ns�Touch
; ;

64 
cC�figToORB
::
D�a
::
S�s�C�fig
::
DEBUG
: 
�ns�
 = &
�ns�Debug
; ;

66 
�ns�
->
	`��t
();

67 
isNewTy�
 = 
�l�
;

70 if�
isNewMode
 && 
�ns�
->
	`c�figMode
�
mode
, 
�ti�
 ) )

72 
isNewMode
 = 
�l�
;

75 
�ns�
->
	`upd�e
();

77 
�p�tBuf�r
 << 
�ns�
->
�p�t
.
�p
;

79 
	}
}

82 
	gS�s�Task
::
	$c�fig
�
BYTE
 
ty�In
,

83 
BYTE
 
modeIn
,

84 
WORD
 
�ti�In
 )

86 if�
ty�
 !�
ty�In
 )

88 
ty�
 = 
ty�In
;

89 
mode
 = 
modeIn
;

90 
�ti�
 = 
�ti�In
;

91 
isNewTy�
 = 
�ue
;

92 
isNewMode
 = 
�ue
;

94 if�
mode
 !�
modeIn
 || 
�ti�
 !�
�ti�In
)

96 
mode
 = 
modeIn
;

97 
�ti�
 = 
�ti�In
;

98 
isNewMode
 = 
�ue
;

100 
	}
}

103 
	gS�s�Task
::
	$g�
�
ORB
::
S�s�
 &
�p�t
 )

105 
�p�tBuf�r
 >> 
�p�t
;

106 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\SensorTask.h

9 #i�de�
_SENSOR_TASK_H


10 
	#_SENSOR_TASK_H


	)

13 
	~"lib.h
"

14 
	~"Modu�/Rtos/Rtos.h
"

16 
	~"S�s�.h
"

17 
	~"S�s�UART.h
"

18 
	~"S�s�I2C.h
"

19 
	~"S�s�A�log.h
"

20 
	~"S�s�TOF.h
"

21 
	~"S�s�Touch.h
"

22 
	~"S�s�Debug.h
"

29 �as�
	cS�s�Task
 : 
public
 
Rtos
::
Task


31 
public
:

33 
S�s�Task
�
Rtos
 &
�osIn
,

34 
S�s�
::
Cڋxt
 &
cڋxt
,

35 
cHwUART_Ext
 &
sIn
,

36 
Tim�
 &
tim
 ,

37 
cHwExtI�
 &
extI�
);

40 
v�tu�
 
c�fig
�
BYTE
 
ty�
,

41 
BYTE
 
mode
,

42 
WORD
 
�ti�
 = 0 );

45 
v�tu�
 
g�
�
ORB
::
S�s�
 &
�p�t
 );

47 
	m�iv�e
:

49 
v�tu�
 
upd�e
( );

51 
	m�iv�e
:

53 
cSh�edMem
<
ORB
::
S�s�
> 
�p�tBuf�r
;

55 
S�s�A�log
 
	m�ns�A�log
;

56 
S�s�UART
 
	m�ns�UART
;

57 
S�s�I2C
 
	m�ns�I2C
;

58 
S�s�TOF
 
	m�ns�TOF
;

59 
S�s�Touch
 
	m�ns�Touch
;

60 
S�s�Debug
 
	m�ns�Debug
;

62 
	mpublic
:

64 
S�s�
 *
�ns�
;

66 
	m�iv�e
:

68 
BYTE
 
ty�
;

69 
BYTE
 
	mmode
;

70 
WORD
 
	m�ti�
;

71 
BYTE
 
	misNewTy�
;

72 
BYTE
 
	misNewMode
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorAnalog.cpp

9 
	~"lib.h
"

12 
	~"S�s�A�log.h
"

20 
	gS�s�A�log
::
	$S�s�A�log
�
S�s�
::
Cڋxt
 &
cڋxt
 )

22 : 
	$S�s�
�
cڋxt
 )

24 
	}
}

27 
S�s�A�log
::
	$��t
( )

30 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
ANALOG
 );

33 
cڋxt
.
dig��A
.
	`�t
();

34 
cڋxt
.
dig��B
.
	`�t
();

37 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

42 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPU
 );

44 
cڋxt
.
adc1
.
	`�ab�
();

45 
cڋxt
.
adc2
.
	`�ab�
();

47 
	}
}

50 
	gS�s�A�log
::
	$��
( )

52 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

53 
cڋxt
.
dig��A
.
	`�t
();

54 
	}
}

57 
	gS�s�A�log
::
	$upd�e
( )

59 
WORD
 
��og1
 = 
cڋxt
.
adc1
.
	`g�Raw
()>>4;

60 
WORD
 
��og2
 = 
cڋxt
.
adc2
.
	`g�Raw
()>>4;

61 
WORD
 
p�5
 = 
cڋxt
.
dig��A
.
	`g�
();

62 
WORD
 
p�6
 = 
cڋxt
.
dig��B
.
	`g�
();

64 
�p�t
.
�p
.
v�ue
[0] = ((
DWORD
)(
��og1
 & 0x0FFF) )

65 | ((
DWORD
)(
��og2
 & 0x0FFF) <<12)

66 | ((
DWORD
)(
p�6
 & 0x0001) <<24)

67 | ((
DWORD
)(
p�5
 & 0x0001) <<25);

68 
�p�t
.
	`�tV�id
();

70 
	}
}

73 
bo�
 
	gS�s�A�log
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 )

76 
	`�tP�Mode
�
cڋxt
.
dig��C
, 
�ti�
>> 0 );

77 
	`�tP�Mode
�
cڋxt
.
dig��D
, 
�ti�
>> 4 );

78 
	`�tP�Mode
�
cڋxt
.
dig��A
, 
�ti�
>> 8 );

79 
	`�tP�Mode
�
cڋxt
.
dig��B
, 
�ti�
>>12 );

81  
�ue
;

82 
	}
}

85 
	gS�s�A�log
::
	$�tP�Mode
�
P�t
::
P�
 &
p�
, 
BYTE
 
mode
 )

87  
mode
 & 0x07 )

91 2: 
p�
.
	`�tMode
�
P�t
::
In
 ); ;

92 3: 
p�
.
	`�tMode
�
P�t
::
InPU
 ); ;

93 4: 
p�
.
	`�tMode
�
P�t
::
InPD
 ); ;

94 5: 
p�
.
	`�tMode
�
P�t
::
OutOD
); ;

95 6: 
p�
.
	`�tMode
�
P�t
::
OutPU
); ;

96 7: 
p�
.
	`�tMode
�
P�t
::
OutPP
); ;

100 if�(
mode
 & 0x07) >= 2 )

101 
p�
.
	`�t
�
mode
&0x08 );

102 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorAnalog.h

9 #i�de�
_SENSOR_ANALOG_H


10 
	#_SENSOR_ANALOG_H


	)

13 
	~"S�s�.h
"

20 �as�
	cS�s�A�log
 : 
public
 
S�s�


22 
public
:

24 
S�s�A�log
�
S�s�
::
Cڋxt
 &
cڋxt
 );

26 
	m�iv�e
:

28 
v�tu�
 
��t
( );

31 
v�tu�
 
��
( );

34 
v�tu�
 
upd�e
( );

37 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�In
 );

40 
v�tu�
 
BYTE
 
	$g�Cu��tMode
( ) {(0);}

43 
	`�tP�Mode
�
P�t
::
P�
 &
p�
, 
BYTE
 
mode
 );

44 
	}
};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorDebug.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

13 
	~"S�s�Debug.h
"

21 
	gS�s�Debug
::
	$S�s�Debug
�
S�s�
::
Cڋxt
 &
cڋxt
 )

23 : 
	$S�s�
�
cڋxt
 )

25 
mode
 = 0;

26 
	}
}

29 
	gS�s�Debug
::
	$��t
( )

31 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
DEBUG
 );

32 
�t
 = 0;

33 
	}
}

36 
	gS�s�Debug
::
	$��
( )

38 
	}
}

41 
S�s�Debug
::
	$upd�e
( )

43 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
DEBUG
 );

45 
�p�t
.
�p
.
�nExp
 = 
mode
&0x07;

50 
�p�t
.
�p
.
v�ue
[0] = 0xA0000000 | 
�t
++;

51 
�p�t
.
�p
.
v�ue
[1] = 0xB0000000 | 
�t
++;

53 
�p�t
.
	`�tV�id
();

54 
�p�t
.
�p
.
�ti�
 = 
mode
;

56 
	}
}

59 
bo�
 
	gS�s�Debug
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 )

61 
this
->
mode
 = mode;

62 
this
->
�ti�
 = option;

64 �
�ue
 );

65 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorDebug.h

9 #i�de�
_SENSOR_DEBUG_H


10 
	#_SENSOR_DEBUG_H


	)

13 
	~"S�s�.h
"

20 �as�
	cS�s�Debug
 : 
public
 
S�s�


22 
public
:

25 
public
:

27 
BYTE
 
mode
;

28 
WORD
 
	m�ti�
;

29 
BYTE
 
	mbuf
[32];

30 
DWORD
 
	m�t
;

32 
	mpublic
:

34 
S�s�Debug
�
S�s�
::
Cڋxt
 &
cڋxt
);

37 
v�tu�
 
��t
();

40 
v�tu�
 
��
( );

43 
v�tu�
 
upd�e
( );

46 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 );

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

13 
	~"S�s�I2C.h
"

21 
	gS�s�I2C
::
	$S�s�I2C
�
S�s�
::
Cڋxt
 &
cڋxt
 )

23 : 
	`S�s�
�
cڋxt
 ),

24 
	`s�
�
cڋxt
.
dig��A
 ),

25 
	`sda
�
cڋxt
.
dig��B
 ),

27 
	`i2c
�
s�
, 
sda
, 10 ),

30 
	$NXTuɿsch�l
�*
this
 )

33 
���gyP�
 = 
NULL
;

34 
	}
}

37 
	gS�s�I2C
::
	$��t
( )

39 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
I2C
 );

41 
s�
.
	`�t
( );

42 
sda
.
	`�t
( );

43 
s�
.
	`�tMode
�
P�t
::
OutPU
 );

44 
sda
.
	`�tMode
�
P�t
::
OutPU
 );

46 
	}
}

49 
	gS�s�I2C
::
	$��
( )

51 if�
���gyP�
 )

53 
���gyP�
->
	`��
();

55 
s�
.
	`�t
();

56 
sda
.
	`�t
();

58 
s�
.
	`�tMode
�
P�t
::
InPU
 );

59 
sda
.
	`�tMode
�
P�t
::
InPU
 );

60 
	}
}

63 
	gS�s�I2C
::
	$upd�e
( )

65 if�
���gyP�
 )

67 
���gyP�
->
	`upd�e
();

69 
	}
}

72 
bo�
 
	gS�s�I2C
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�In
 )

74  
mode
 )

76 0: 
���gyP�
 = &
NXTuɿsch�l
; ;

77 : 
���gyP�
 = 
NULL
; ;

80 if�
���gyP�
 )

82 
���gyP�
->
	`��t
�
�ti�In
 );

84  
�ue
;

85 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C.h

9 #i�de�
_SENSOR_I2C_H


10 
	#_SENSOR_I2C_H


	)

11 
	~"S�s�.h
"

12 
	~"S�s�I2C/S�s�I2C_NXTuɿsch�l.h
"

19 �as�
	cS�s�I2C
 : 
public
 
S�s�


21 
public
:

23 
S�s�I2C
�
S�s�
::
Cڋxt
 &
cڋxt
 );

25 
	m�iv�e
:

27 
v�tu�
 
��t
( );

30 
v�tu�
 
��
( );

33 
v�tu�
 
upd�e
( );

36 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�In
 );

39 
v�tu�
 
BYTE
 
	$g�Cu��tMode
( ) {(0);}

41 
public
:

43 
P�t
::
P�
 &
s�
;

44 
P�t
::
P�
 &
sda
;

45 
I2Cma��_Emul
 
i2c
;

47 
�iv�e
:

49 
S�s�I2C_S��egy
 *
���gyP�
;

50 
S�s�I2C_NXTuɿsch�l
 
NXTuɿsch�l
;

52 
	}
};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C\SensorI2C_NXTultraschall.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

13 
	~"S�s�I2C_NXTuɿsch�l.h
"

14 
	~"S�s�I2C.h
"

22 
	gS�s�I2C_NXTuɿsch�l
::
	$S�s�I2C_NXTuɿsch�l
�
S�s�I2C
 &
�ns�
 )

24 : 
	`S�s�I2C_S��egy
�
�ns�
 ),

26 
	$us
 ( 
�ns�
.
i2c
, 0x02)

28 
	}
}

31 
	gS�s�I2C_NXTuɿsch�l
::
	$��t
�
BYTE
 
�ti�
 )

36 
�ns�
.
cڋxt
.
dig��D
.
	`�t
( 1 );

37 
�ns�
.
cڋxt
.
dig��D
.
	`�tMode
�
P�t
::
OutPP
);

41 
�ns�
.
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
I2C
 );

42 
	}
}

45 
	gS�s�I2C_NXTuɿsch�l
::
	$��
( )

47 
�ns�
.
cڋxt
.
dig��D
.
	`�tMode
�
P�t
::
In
);

48 
�ns�
.
cڋxt
.
dig��D
.
	`�t
( 0 );

51 
�ns�
.
cڋxt
.
dig��H
.
	`�t
(1);

52 
	}
}

55 
	gS�s�I2C_NXTuɿsch�l
::
	$upd�e
( )

57 
BYTE
 
comm�dS��
;

58 
BYTE
 
v�ue
 = 0;

60 
Rtos
::
TimeOut
 
	`tim�Loc
( 20 );

62 
us
.
	`wr�e
�(
BYTE
)0x41 );

63 
comm�dS��
 = 
us
.
	`�ad
();

64 
tim�Loc
.
	`��t
();

65  !
tim�Loc
.
	`timeout
() );

67 if�
comm�dS��
 == 0x02 )

69 
us
.
	`wr�e
�(
BYTE
)0x42 );

70 
v�ue
 = 
us
.
	`�ad
();

71 
tim�Loc
.
	`��t
();

72  !
tim�Loc
.
	`timeout
() );

75 if�!
us
.
	`isE��
(�&& 
comm�dS��
 == 0x02 )

77 
�ns�
.
�p�t
.
�p
.
v�ue
[0] = value;

78 
�ns�
.
�p�t
.
	`�tV�id
();

83 
�ns�
.
�p�t
.
�p
.
v�ue
[0] = 255;

84 
�ns�
.
�p�t
.
	`�rV�id
();

86 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C\SensorI2C_NXTultraschall.h

9 #i�de�
_SENSOR_I2C_NXT_ULTRASCHALL_H


10 
	#_SENSOR_I2C_NXT_ULTRASCHALL_H


	)

13 
	~"S�s�I2C_S��egy.h
"

20 �as�
	cS�s�I2C_NXTuɿsch�l
 : 
public
 
S�s�I2C_S��egy


22 
public
:

24 
S�s�I2C_NXTuɿsch�l
�
S�s�I2C
 &
�ns�In
 );

26 
	m�iv�e
:

28 
v�tu�
 
��t
�
BYTE
 
�ti�
 );

31 
v�tu�
 
��
( );

34 
v�tu�
 
upd�e
( );

37 
	mI2Cma��
::
Devi�
 
us
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C_Strategy.h

9 #i�de�
_SENSOR_I2C_STRATEGY_H


10 
	#_SENSOR_I2C_STRATEGY_H


	)

13 
�ass
 
	gS�s�I2C
;

20 �as�
	cS�s�I2C_S��egy


22 
	mpublic
:

24 
	$S�s�I2C_S��egy
�
S�s�I2C
 &
�ns�
 )

26 : 
	$�ns�
�
�ns�
 )

32 
v�tu�
 
	`��t
�
BYTE
 
�ti�
 ) = 0;

35 
v�tu�
 
	`��
( ) = 0;

38 
v�tu�
 
	`upd�e
( ) = 0;

40 
��e�ed
:

42 
S�s�I2C
 &
�ns�
;

43 
	}
};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTOF.cpp

9 
	~"lib.h
"

10 
	~"S�s�TOF.h
"

13 #i�(
sy�em_PCLK_TIM
 == 84000000)

15 
	#TIME_PER_TIC
 (100.0/84.0)

23 
S�s�TOF
::
ExtI�H�d�r
::
	`ExtI�H�d�r
�
cHwExtI�
 &
extI�
,

	)

24 
	gS�s�TOF
 &
	g�ns�
 )

25 : 
	$�ns�
�
�ns�
 )

27 
extI�
.
	`add
(
this
);

28 
	}
}

31 
	gS�s�TOF
::
ExtI�H�d�r
::
	$upd�e
()

33 if�
�ns�
.
isE�b�
 )

36 if�
�ns�
.
isS��ed
 )

39 
�ns�
.
�t
 = 
TIM10
->
CNT
;

40 
�ns�
.
isS��ed
 = 
�l�
;

41 
�ns�
.
extI�
.
	`�tEdge
�
cHwExtI�
::
FALLING
);

45 
�ns�
.
�su�
 = 
TIME_PER_TIC
*�
TIM10
->
CNT
 - s�s�.
�t
 );

46 
�ns�
.
extI�
.
	`�tEdge
�
cHwExtI�
::
NONE
);

50 
	}
}

53 
	gS�s�TOF
::
Tim�H�d�r
::
	$Tim�H�d�r
�
S�s�TOF
 &
�ns�
 )

54 : 
	$�ns�
�
�ns�
 )

56 
�ns�
.
tim
.
	`add
(
this
);

57 
	}
}

60 
	gS�s�TOF
::
Tim�H�d�r
::
	$upd�e
()

62 if�
�ns�
.
isE�b�
 )

64 
Sy�em
::
	`di�b�I��ru�
();

65 if(
�ns�
.
isS��ed
 )

67 
�ns�
.
�su�
 = 30000;

68 
�ns�
.
isS��ed
 = 
�l�
;

69 
�ns�
.
extI�
.
	`�tEdge
(
cHwExtI�
::
NONE
);

73 
�ns�
.
cڋxt
.
dig��B
.
	`�t
(1);

74 
�ns�
.
cڋxt
.
dig��B
.
	`�tMode
(
P�t
::
OutPU
);

76 
�ns�
.
cڋxt
.
dig��C
.
	`�t
(0);

78 
Sy�em
::
	`d�ayMi�oSec
(10);

80 
�ns�
.
cڋxt
.
dig��C
.
	`�t
(0);

81 
�ns�
.
cڋxt
.
dig��B
.
	`�tMode
(
P�t
::
In
);

85 
�ns�
.
extI�
.
	`�tEdge
(
cHwExtI�
::
RISING
);

86 
�ns�
.
isS��ed
 = 
�ue
;

87 
Sy�em
::
	`�ab�I��ru�
();

90 
	}
}

98 
	gS�s�TOF
::
	$S�s�TOF
�
S�s�
::
Cڋxt
 &
cڋxt
,

99 
Tim�
 &
tim
,

100 
cHwExtI�
 &
extI�
 )

102 : 
	`S�s�
 ( 
cڋxt
 ),

103 
	`tim
 ( 
tim
 ),

104 
	`extI�
 ( 
extI�
 ),

105 
	`tH�d�r
�*
this
 ),

106 
	$eH�d�r
�
extI�
, *
this
 )

109 
isE�b�
 = 
�l�
;

110 
isS��ed
 = 
�l�
;

111 
	}
}

114 
	gS�s�TOF
::
	$��t
( )

116 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
TOF
 );

118 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
In
 );

119 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
In
 );

123 
cڋxt
.
dig��C
.
	`�tMode
�
P�t
::
OutPP
 );

125 
cڋxt
.
dig��A
.
	`�t
( 0 );

126 
cڋxt
.
dig��B
.
	`�t
( 0 );

127 
cڋxt
.
dig��C
.
	`�t
( 0 );

129 
isE�b�
 = 
�ue
;

131 
extI�
.
	`�ab�
();

132 
	}
}

135 
	gS�s�TOF
::
	$��
( )

137 
isE�b�
 = 
�l�
;

138 
extI�
.
	`di�b�
();

140 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

141 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPU
 );

144 
cڋxt
.
dig��C
.
	`�tMode
�
P�t
::
In
 );

146 
cڋxt
.
dig��A
.
	`�t
();

147 
cڋxt
.
dig��B
.
	`�t
();

148 
	}
}

151 
	gS�s�TOF
::
	$upd�e
( )

153 
�p�t
.
�p
.
v�ue
[0] = 
�su�
;

154 
�p�t
.
	`�tV�id
();

155 
	}
}

158 
bo�
 
	gS�s�TOF
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 )

160 
cڋxt
.
dig��A
.
	`�t
�
mode
 );

161  
�ue
;

162 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTOF.h

9 #i�de�
_SENSOR_TOF_H


10 
	#_SENSOR_TOF_H


	)

13 
	~"S�s�.h
"

20 �as�
	cS�s�TOF
 : 
public
 
S�s�


22 
�iv�e
:

24 �as�
	cTim�H�d�r
 : 
public
 
Tim�
::
Task


26 
public
:

27 
Tim�H�d�r
�
S�s�TOF
 &
�ns�
 );

28 
	m�iv�e
:

29 
upd�e
();

30 
	m�iv�e
:

31 
S�s�TOF
 &
�ns�
;

34 
	g�iv�e
:

36 �as�
	cExtI�H�d�r
 : 
public
 
cHwExtI�
::
Task


38 
public
:

39 
ExtI�H�d�r
�
cHwExtI�
 &
extI�
, 
S�s�TOF
 &
�ns�
 );

40 
	g�iv�e
:

41 
upd�e
();

42 
	g�iv�e
:

43 
S�s�TOF
 &
�ns�
;

46 
	gpublic
:

48 
S�s�TOF
�
S�s�
::
Cڋxt
 &
cڋxt
,

49 
Tim�
 &
tim
,

50 
cHwExtI�
 &
extI�
 );

52 
	g�iv�e
:

54 
v�tu�
 
��t
( );

57 
v�tu�
 
��
( );

60 
v�tu�
 
upd�e
( );

63 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 );

66 
v�tu�
 
BYTE
 
	$g�Cu��tMode
��{(0);
	}
}

69 
	gTim�
 &
	gtim
;

70 
	gcHwExtI�
 &
	gextI�
;

72 
Tim�H�d�r
 
	gtH�d�r
;

73 
ExtI�H�d�r
 
	geH�d�r
;

75 
	g�iv�e
:

77 
BYTE
 
isE�b�
;

78 
DWORD
 
	g�t
;

79 
BYTE
 
	gisS��ed
;

80 
DWORD
 
	g�su�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTouch.cpp

9 
	~"lib.h
"

12 
	~"S�s�Touch.h
"

47 
	gS�s�Touch
::
	$S�s�Touch
�
S�s�
::
Cڋxt
 &
cڋxt
 )

49 : 
	$S�s�
�
cڋxt
 )

52 
	}
}

55 
S�s�Touch
::
	$��t
( )

57 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
TOUCH
 );

58 
�p�t
.
	`�tV�id
();

60 
cڋxt
.
adc1
.
	`�ab�
();

61 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

62 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPD
 );

63 
	}
}

66 
	gS�s�Touch
::
	$��
( )

68 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

69 
cڋxt
.
dig��A
.
	`�t
();

70 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPU
 );

71 
cڋxt
.
dig��B
.
	`�t
();

72 
	}
}

75 
	gS�s�Touch
::
	$upd�e
( )

77 if�
cڋxt
.
dig��A
.
	`g�
() )

79 if�
cڋxt
.
adc1
.
	`g�Raw
() < 0x8000 )

80 
�p�t
.
�p
.
v�ue
[0] = 1;

82 
�p�t
.
�p
.
v�ue
[0] = 0;

86 
�p�t
.
�p
.
v�ue
[0] = 
cڋxt
.
dig��B
.
	`g�
();

88 
	}
}

91 
bo�
 
	gS�s�Touch
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 )

93  
�ue
;

94 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTouch.h

9 #i�de�
_SENSOR_TOUCH_H


10 
	#_SENSOR_TOUCH_H


	)

13 
	~"S�s�.h
"

20 �as�
	cS�s�Touch
 : 
public
 
S�s�


22 
public
:

24 
S�s�Touch
�
S�s�
::
Cڋxt
 &
cڋxt
 );

26 
	m�iv�e
:

28 
v�tu�
 
��t
( );

31 
v�tu�
 
��
( );

34 
v�tu�
 
upd�e
( );

37 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�In
 );

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorUART.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

11 
	~"S�s�UART.h
"

14 
	#SYS_SYNC
 0x00

	)

15 
	#SYS_NACK
 0x02

	)

16 
	#SYS_ACK
 0x04

	)

18 
	#CMD_ACK_REQ
 0x04

	)

20 
	#CMD_SELECT
 0x43

	)

21 
	#CMD_TYPE
 0x40

	)

22 
	#CMD_MODES
 0x49

	)

23 
	#CMD_SPEED
 0x52

	)

24 
	#CMD_WRITE
 0x44

	)

26 
	#INFO_MSG
 0x80

	)

27 
	#INFO_MASK
 0xC0

	)

28 
	#INFO_LLL
 0x38

	)

29 
	#INFO_MMM
 0x07

	)

30 
	#INFO_NAME
 0x00

	)

31 
	#INFO_RAW
 0x01

	)

32 
	#INFO_PCT
 0x02

	)

33 
	#INFO_SI
 0x03

	)

34 
	#INFO_SYM
 0x04

	)

35 
	#INFO_FOR
 0x80

	)

37 
	#DATA_MASK
 0xC0

	)

45 
	gS�s�UART
::
	$S�s�UART
�
S�s�
::
Cڋxt
 &
cڋxt
,

46 
cHwUART_Ext
 &
sIn
 )

48 : 
	`S�s�
�
cڋxt
 ),

49 
	$u�t
(
sIn
)

51 
cu��tMode
 = 0;

52 
	}
}

55 
	gS�s�UART
::
	$��t
( )

57 
�p�t
.
	`��t
�
cC�figToORB
::
D�a
::
S�s�C�fig
::
UART
 );

59 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

60 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPU
 );

62 
u�t
.
	`c���ToP�t
();

64 
��e
 = 0;

65 
sk�_IR_E��
 = 0;

67 
	`�tBaud��
( 2400 );

69 
	`��t
();

70 
	}
}

73 
	gS�s�UART
::
	$��
( )

75 
	`��t
();

77 
cڋxt
.
dig��A
.
	`�tMode
�
P�t
::
InPU
 );

78 
cڋxt
.
dig��B
.
	`�tMode
�
P�t
::
InPU
 );

79 
cڋxt
.
dig��A
.
	`�t
();

80 
cڋxt
.
dig��B
.
	`�t
();

81 
	}
}

84 
	gS�s�UART
::
	$upd�e
( )

86 
BYTE
 
c
;

87 
BYTE
 
id�t
;

88 
WORD
 
msg
;

89 
WORD
 
cmd
;

90 
BYTE
 
�n
;

91 
BYTE
 
�nExp
;

92 
bo�
 
ok
 = 
�ue
;

94 
c
 = 
	`�xtSam�e
();

96 if�
sk�_IR_E��
 && sk�_IR_E�� !�
c
 )

99 
sk�_IR_E��
 = 0;

101 
�nExp
 = (
c
>>3) & 0x07;

102 
�n
 = 1<< 
�nExp
;

104  
��e
 )

108 
�rC�
 = 0;

109 
�p�t
.
	`�rV�id
();

111 if�
c
 =�
CMD_TYPE
 )

113 if�
	`�ad
(0xff^
c
, 1) )

115 
�ns�Ty�
 = 
buf
[0];

116 
��e
 = 1;

122 
msg
 = 
c
 & 0xC0;

123 
id�t
 = 0;

125 
msg
)

128 
cmd
 = (
WORD
)
c
<<8;

131 
cmd
 = (
WORD
)
c
<<8;

134 
id�t
 = 
	`�xtSam�e
();

135 
cmd
 = 
msg
<<8;

136 
cmd
 |�
id�t
;

139 
cmd
 = 
msg
<<8;

142 
cmd
 = 0;

143 
��e
=1;

146  
cmd
 )

149 
	`�ndBy�
(
SYS_ACK
);

150 
	`�tBaud��
�
p
.
��d
 );

152 
	`�ndBy�
(
SYS_NACK
);

153 
��e
=2;

157 
	`�ad
(0xff^
c
, 1);

161 
	`�ad
(0xff^
c
, 2);

165 
ok
=
	`�ad
(0xff^
c
, 4);

166 
p
.
��d
 = (
DWORD
)
buf
[0]

167 | ((
DWORD
)
buf
[1] << 8)

168 | ((
DWORD
)
buf
[2] << 16)

169 | ((
DWORD
)
buf
[3] << 24);

173 
	`�ad
(0xff^
c
^
id�t
, 
�n
);

177 
	`�ad
(0xff^
c
^
id�t
, 8);

181 
	`�ad
(0xff^
c
^
id�t
, 8);

185 
	`�ad
(0xff^
c
^
id�t
, 
�n
);

186 if�
�ns�Ty�
 == 33 )

188 
sk�_IR_E��
 = 0x90 | (
c
 & 0x07);

193 
	`�ad
(0xff^
c
^
id�t
, 8);

197 
	`�ad
(0xff^
c
^
id�t
, 4);

201 
�rC�
++;

206 if�(
c
 & 0xC0) == 0xC0 )

208 if�
�n
 <= 8)

210 
ok
=
	`�ad
(0xff^
c
, 
�n
);

215 if�
�ns�Ty�
 =�29 && 
	`g�Mode
(
c
)==4 && 
buf
[7] == 2)

217 
ok
 = 
�ue
;

221 if(
ok
 )

223 
�rC�
 = 0;

224 
	`�ndBy�
(
SYS_NACK
);

226 
�p�t
.
�p
.
�nExp
 =�enExp;

228 
�p�t
.
�p
.
v�ue
[0] = (
DWORD
)
buf
[0]

229 | ((
DWORD
)
buf
[1] << 8)

230 | ((
DWORD
)
buf
[2] << 16)

231 | ((
DWORD
)
buf
[3] << 24);

233 if�
�n
 > 4)

235 
�p�t
.
�p
.
v�ue
[1] = (
DWORD
)
buf
[4]

236 | ((
DWORD
)
buf
[5] << 8)

237 | ((
DWORD
)
buf
[6] << 16)

238 | ((
DWORD
)
buf
[7] << 24);

241 
�p�t
.
	`�tV�id
();

242 
�p�t
.
�p
.
�ti�
 = 
	`g�Mode
(
c
) & 0x07;

244 if�
	`g�Mode
(
c
�!�
cu��tMode
 )

246 
	`�ndMode
�
cu��tMode
 );

253 
�rC�
++;

258 if�!
ok
 )

259 
�rC�
++;

260 if�
�rC�
 >10 )

262 
��e
 = 0;

263 
sk�_IR_E��
 = 0;

264 
	`�tBaud��
( 2400 );

266 
	}
}

269 
	gS�s�UART
::
	$��t
( )

271 
Prݔt�s
 
p
;

272 
this
->
p
 =�;

273 
	}
}

276 
bo�
 
	gS�s�UART
::
	$c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 )

278 
cu��tMode
 = 
mode
;

279 
this
->
�ti�
 = option;

281 �
�ue
 );

282 
	}
}

285 
bo�
 
	gS�s�UART
::
	$�ndMode
�
BYTE
 
mode
 )

287 
BYTE
 
chk
 = 0xf�^ 
CMD_SELECT
;

288 
chk
 ^�
cu��tMode
;

289 
u�t
.
	`�t
(
CMD_SELECT
);

290 
u�t
.
	`�t
(
cu��tMode
);

291 
u�t
.
	`�t
(
chk
);

293 
BYTE
 
cmd
 = 
	`�xtSam�e
();

294 
	`�ndBy�
(
SYS_NACK
);

295  
�l�
;

296 
	}
}

299 
BYTE
 
	gS�s�UART
::
	$�xtSam�e
()

301 
BYTE
 
�
 = 0;

303 
Rtos
::
TimeOut
 
	`u�tTimeout
( 500 );

305 
u�tTimeout
.
	`��t
();

307 !
u�tTimeout
.
	`timeout
())

309 if�
u�t
.
	`g�
(
�
) )

311  
�
;

315 
	}
}

318 
bo�
 
	gS�s�UART
::
	$�ad
�
BYTE
 
check
, BYTE 
�n
 )

320 
�n
 = 
	`MIN
��n, (
BYTE
)32 );

321  
BYTE
 
i
=0;i<
�n
;i++)

323 
buf
[
i
] = 
	`�xtSam�e
();

324 
check
 ^�
buf
[
i
];

326  
BYTE
 
i
=
�n
;i<32;i++)

328 
buf
[
i
] = 0;

331 if�
	`�xtSam�e
(�!�
check
 )

333 �
�l�
 );

335 �
�ue
 );

336 
	}
}

339 
	gS�s�UART
::
	$�ndBy�
�
BYTE
 
msg
 )

341 
u�t
.
	`�t
�
msg
 );

342 
	}
}

345 
	gS�s�UART
::
	$�tBaud��
�
��
 )

347 
Rtos
::
TimeOut
 
	`tim�Loc
( 10 );

349  !
tim�Loc
.
	`timeout
() ) ;

351 
u�t
.
	`�tBaud��
(
��
);

352 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorUART.h

9 #i�de�
_SENSOR_UART_H


10 
	#_SENSOR_UART_H


	)

13 
	~"UART_Ext.h
"

14 
	~"S�s�.h
"

22 �as�
	cS�s�UART
 : 
public
 
S�s�


24 
�iv�e
:

30 �as�
	cPrݔt�s


32 
public
:

34 
Prݔt�s
()

36 
ty�
 = 0;

37 
	mnumOfModes
 = 0;

38 
	mmodesInV�w
 = 0;

39 
	m��d
 = 2400;

42 
	mpublic
:

44 
BYTE
 
ty�
;

45 
BYTE
 
	mnumOfModes
;

46 
BYTE
 
	mmodesInV�w
;

47 
DWORD
 
	m��d
;

50 
	g�iv�e
:

52 
cHwUART_Ext
 &
u�t
;

53 
BYTE
 
	gbuf
[32];

54 
Prݔt�s
 
	gp
;

55 
	gcu��tMode
;

56 
	gcu��tCmd
;

57 
BYTE
 
	g�ti�
;

58 
BYTE
 
	g��e
;

59 
BYTE
 
	g�ns�Ty�
;

60 
BYTE
 
	gsk�_IR_E��
;

61 
	g�rC�
;

63 
	gpublic
:

65 
S�s�UART
�
S�s�
::
Cڋxt
 &
cڋxt
,

66 
cHwUART_Ext
 &
sIn
 );

68 
	g�iv�e
:

70 
v�tu�
 
��t
();

73 
v�tu�
 
��
( );

76 
v�tu�
 
upd�e
( );

78 
	g�iv�e
:

80 
BYTE
 
	$g�L�gth
�
BYTE
 
c
 )

82 �1<<((
c
>>3) & 0x07) );

83 
	}
}

86 
BYTE
 
	$g�Mode
�
BYTE
 
c
 )

88 �
c
 & 0x07 );

89 
	}
}

92 
bo�
 
�ndMode
�
BYTE
 
mode
 );

95 
v�tu�
 
bo�
 
c�figMode
�
BYTE
 
mode
, 
WORD
 
�ti�
 );

98 
BYTE
 
�xtSam�e
();

101 
bo�
 
�ad
(
BYTE
 
check
, BYTE 
�n
);

104 
�ndBy�
(
BYTE
 
msg
);

107 
�tBaud��
(
��
);

110 
v�tu�
 
��t
();

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\ServoTask.cpp

9 
	~"lib.h
"

10 
	~"S�voTask.h
"

18 
	gS�voTask
::
	$S�voTask
�
TaskM�ag�
 &
�skH�d�r
,

19 
cDevA�logOutPWM
 &
pwmIn
 )

22 
	`pwm
 ( 
pwmIn
 ),

23 
	$tim�
 ( 
�skH�d�r
, 25 )

26 
v�id
 = 
�l�
;

27 
rug
 = 
�l�
;

28 
posD��
 = 0;

29 
posS�l
 = 0;

30 
pos
 = 0;

31 
pwm
.
	`�t
( 0 );

32 
v�id
 = 
�ue
;

34 
�skH�d�r
.
	`add
�
this
 );

35 
	}
}

38 
	gS�voTask
::
	$�t
�
BYTE
 
��dIn
, BYTE 
posIn
 )

41 
v�id
 = 
�l�
;

42 
posD��
 = (
��dIn
 < 100)?()speedIn*0.0025:1.0;

43 
posS�l
 = ()
posIn
*0.01 + 1.0;

44 
v�id
 = 
�ue
;

45 
	}
}

48 
	gS�voTask
::
S�voTask
::
	$upd�e
( )

50 if�
v�id
 && 
tim�
.
	`timeout
() )

52 if�
posD��
 != 0 )

54 if�!
rug
 )

56 
pos
 = 
posS�l
;

57 
pwm
.
	`�t
�
pos
 );

58 
rug
 = 
�ue
;

60 if�
pos
 < 
posS�l
 )

62 
pos
 = 
	`MIN
�po�+ 
posD��
, 
posS�l
 );

63 
pwm
.
	`�t
�
pos
 );

65 if�
pos
 > 
posS�l
 )

67 
pos
 = 
	`MAX
�po�- 
posD��
, 
posS�l
 );

68 
pwm
.
	`�t
�
pos
 );

73 if�
rug
 )

75 
pwm
.
	`�t
( 0 );

76 
rug
 = 
�l�
;

80 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\ServoTask.h

9 #i�de�
_SERVO_TASK_H


10 
	#_SERVO_TASK_H


	)

13 
	~"lib.h
"

20 �as�
	cS�voTask
: 
public
 
TaskM�ag�
::
Task


22 
public
:

24 
S�voTask
�
TaskM�ag�
 &
�skH�d�r
,

25 
cDevA�logOutPWM
 &
pwmIn
 );

31 
v�tu�
 
�t
�
BYTE
 
��dIn
, BYTE 
posIn
 );

33 
	m�iv�e
:

35 
v�tu�
 
upd�e
( );

37 
	m�iv�e
:

39 
cDevA�logOutPWM
 &
pwm
;

40 
	mTaskM�ag�
::
TimeOut
 
tim�
;

42 
	mpos
;

43 
	mposD��
;

44 
	mposS�l
;

45 
bo�
 
	mrug
;

46 vީ��
bo�
 
	mv�id
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Settings.cpp

9 
	~"lib.h
"

10 
	~"S�t�gs.h
"

18 
	gS�t�gs
::
	$S�t�gs
�
Mem�y
 &
_mem
 )

19 : 
	$mem
(
_mem
)

21 
	}
}

24 
BYTE
 
S�t�gs
::
	$g�VccLev�Low
( )

26 �
mem
.
d�a
.
VCC_low
 );

27 
	}
}

30 
BYTE
 
	gS�t�gs
::
	$g�VccLev�OK
( )

32 �
mem
.
d�a
.
VCC_ok
 );

33 
	}
}

36 
	gS�t�gs
::
	$g�
�
cS�t�gsFromORB
::
D�a
 &
out
 )

38 
	`���y
�
out
.
�me
, 
mem
.
d�a
.name, 20 );

39 
out
.
VCC_ok
 = 
mem
.
d�a
.VCC_ok;

40 
out
.
VCC_low
 = 
mem
.
d�a
.VCC_low;

41 
	}
}

44 
	gS�t�gs
::
	$��e
�
cS�t�gsToORB
::
D�a
 &
�
 )

46 
	`���y
�
mem
.
d�a
.
�me
, 
�
.name, 20 );

47 
mem
.
d�a
.
VCC_ok
 = 
�
.VCC_ok;

48 
mem
.
d�a
.
VCC_low
 = 
�
.VCC_low;

49 
mem
.
	`��e
();

50 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Settings.h

9 #i�de�
_SETTINGS_H


10 
	#_SETTINGS_H


	)

13 
	~"lib.h
"

14 
	~"Prݔt�s.h
"

21 �as�
	cS�t�gs


23 
	mpublic
:

25 
S�t�gs
�
Mem�y
 &
mem
 );

28 
g�
�
cS�t�gsFromORB
::
D�a
 &
out
);

31 
BYTE
 
g�VccLev�Low
( );

34 
BYTE
 
g�VccLev�OK
( );

37 
��e
�
cS�t�gsToORB
::
D�a
 &
�
);

39 
	m�iv�e
:

41 
cDevMem�yF�sh
<
cS�t�gsToORB
::
D�a
> 
mem
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UART_Ext.h

9 #i�de�
_HW_UART_EXT_H


10 
	#_HW_UART_EXT_H


	)

13 
	~"H�dw�e/Comm�/U�t/U�t.h
"

16 #i��
sy�em_PCLK_UART
 != 42000000 )

25 �as�
	ccHwUART_Ext
 : 
public
 
U�t_Mcu


27 
public
:

29 
	$cHwUART_Ext
�
USART_Id
 
id
,

30 
DWORD
 
baud
,

31 
BYTE
 
mode
,

32 
WORD
 
sizeRxBuf
,

33 
WORD
 
sizeTxBuf
 )

35 : 
U�t_Mcu
::
	$U�t_Mcu
�
id
, 
baud
, 
mode
, 
sizeRxBuf
, 
sizeTxBuf
 )

38 
u��Id
 = 
id
;

59 
	$c���ToP�t
()

62 
BYTE
 
dummy
;

63  
	`g�
�
dummy
 ) );

65  
u��Id
 )

71 
USART_1
:

72 
P�C�fig
::
	`�t
�P�C�fig::
USART1_RX
 );

73 
P�C�fig
::
	`�t
�P�C�fig::
USART1_TX
 );

76 
USART_2
:

77 
P�C�fig
::
	`�t
�P�C�fig::
USART2_RX
 );

78 
P�C�fig
::
	`�t
�P�C�fig::
USART2_TX
 );

81 
USART_3
:

82 
P�C�fig
::
	`�t
�P�C�fig::
USART3_RX
 );

83 
P�C�fig
::
	`�t
�P�C�fig::
USART3_TX
 );

86 
UART_4
:

87 
P�C�fig
::
	`�t
�P�C�fig::
UART4_RX
 );

88 
P�C�fig
::
	`�t
�P�C�fig::
UART4_TX
 );

91 
UART_5
:

92 
P�C�fig
::
	`�t
�P�C�fig::
UART5_RX
 );

93 
P�C�fig
::
	`�t
�P�C�fig::
UART5_TX
 );

96 
USART_6
:

97 
P�C�fig
::
	`�t
�P�C�fig::
USART6_RX
 );

98 
P�C�fig
::
	`�t
�P�C�fig::
USART6_TX
 );

101 
	}
}

103 
	g�iv�e
:

105 
USART_Id
 
u��Id
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UserInterface.cpp

9 
	~"lib.h
"

10 
	~"U�rI����.h
"

13 
Dig��Indi�t�
 
�dU�1
;

14 
Dig��Indi�t�
 
�dU�2
;

17 
Dig��Bu��
 
b�
;

18 
Dig��Bu��
 
b�A�
;

20 
Dig��Indi�t�
 
pwrIndi�t�
;

28 
	gU�rI����
::
	$U�rI����
�
A�Task
 &
�p
,

29 
Pyth�Task
 &
pyth�Task
,

30 
S�t�gs
 &
���gs
 )

32 : 
	`���gs
(
���gs
)

33 , 
	`�p
 ( 
�p
 )

34 , 
	$pyth�Task
�
pyth�Task
 )

37 
	}
}

40 
	gU�rI����
::
	$upd�e
()

42 
Dig��Bu��
::
A�i�
 
a�i�1
 = 
b�
 .
	`g�A�i�
();

43 
Dig��Bu��
::
A�i�
 
a�i�2
 = 
b�A�
.
	`g�A�i�
();

45  
a�i�1
 =�
Dig��Bu��
::
NONE
 ? 
a�i�2
 :�ction1 )

47 
Dig��Bu��
::
SHORT
:

48 if�
�p
.
	`isRug
(��
	`��A�
();

49 
	`��tA�
(0);

52 
Dig��Bu��
::
LONG
:

53 if�
�p
.
	`isRug
(��
	`��A�
();

54 
	`��tA�
(1);

58 if�!
�p
.
	`isRug
() )

60 
�dU�1
.
	`�r
();

61 
�dU�2
.
	`�r
();

63 
	}
}

66 
	gU�rI����
::
	$��tA�
�
BYTE
 
��m
 )

68 if�!
�p
.
	`isRug
())

70 if�
��m
 )

71 
�dU�2
.
	`�t
();

73 
�dU�1
.
	`�t
();

74 
�p
.
	`S��
(
��m
);

76 
	}
}

79 
	gU�rI����
::
	$��A�
()

81 if�
�p
.
	`isRug
())

82 
�p
.
	`��
();

83 
	}
}

86 
bo�
 
	gU�rI����
::
	$isA�A�ive
()

88 �
�p
.
	`isRug
(�|| 
pyth�Task
.isRunning() );

89 
	}
}

92 
	gU�rI����
::
	$�tMڙ�Ev�t
�
BYTE
 
ev�t
 )

94 
�p
.
Mڙ�Ev�t
 = 
ev�t
;

95 
	}
}

98 
	gU�rI����
::
	$�tVcc
�
BYTE
 
Vcc
 )

101 i��
Vcc
 > 
���gs
.
	`g�VccLev�OK
(��{ 
pwrIndi�t�
.
	`�tBrigh�ess
�20);�wrIndi�t�.
	`bl�k
(1000, 90); }

102 if�
Vcc
 > 
���gs
.
	`g�VccLev�Low
(��{ 
pwrIndi�t�
.
	`�tBrigh�ess
�50);�wrIndi�t�.
	`bl�k
(1000, 50); }

103 { 
pwrIndi�t�
.
	`�tBrigh�ess
(100);�wrIndi�t�.
	`bl�k
( 200, 50); }

105 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UserInterface.h

9 #i�de�
_USER_INTERFACE_H


10 
	#_USER_INTERFACE_H


	)

13 
	~"lib.h
"

14 
	~"S�t�gs.h
"

15 
	~"A�Task.h
"

16 
	~"Pyth�Task.h
"

23 �as�
	cU�rI����


25 
	mpublic
:

27 
U�rI����
�
A�Task
 &
�p
,

28 
Pyth�Task
 &
pyth�Vm
,

29 
S�t�gs
 &
���gs
 );

32 
upd�e
();

35 
��tA�
�
BYTE
 
��m
 );

38 
��A�
();

41 
bo�
 
isA�A�ive
();

44 
�tMڙ�Ev�t
�
BYTE
 
ev�t
 );

47 
�tVcc
�
BYTE
 
Vcc
 );

49 
	m�iv�e
:

51 
S�t�gs
 &
���gs
;

52 
	mA�Task
 &
	m�p
;

53 
	mPyth�Task
 &
	mpyth�Task
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\config.h

10 
	~"des��t�.�p
"

13 #i�(
BOARD_MAIN
 =�0 && 
BOARD_SUB
 == 22)

15 
	~"c�fig_B�rd_00_22.h
"

17 #�i�(
BOARD_MAIN
 =�0 && 
BOARD_SUB
 == 30)

19 
	~"c�fig_B�rd_00_30.h
"

21 #�i�(
BOARD_MAIN
 =�1 && 
BOARD_SUB
 == 0)

23 
	~"c�fig_B�rd_01_00.h
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\lib.cpp

11 
	~"EmbSysLib.�p
"

12 
	~"lib.h
"

15 
	~"Modu�/Rtos/Rtos.�p
"

16 
	~"Modu�/Dow��d.�p
"

17 
	~"Modu�/ISC.�p
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\lib.h

11 #i�de�
_LIB_LOC_H


12 
	#_LIB_LOC_H


	)

17 
	~"EmbSysLib.h
"

18 
	~"Modu�/Rtos/Rtos.h
"

21 
us�g
 
�me�a�
 
	gEmbSysLib
::
Hw
;

22 
us�g
 
�me�a�
 
	gEmbSysLib
::
Dev
;

23 
us�g
 
�me�a�
 
	gEmbSysLib
::
C�l
;

24 
us�g
 
�me�a�
 
	gEmbSysLib
::
Mod
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\main.cpp

9 
	~"lib.h
"

10 
	~"Modu�/Rtos/Rtos.h
"

11 
	~"Modu�/ISC.h
"

12 
	~"Modu�/USB/USBdevi�Sim�eIO.h
"

13 
	~"Modu�/Dow��d.h
"

14 
	~"c�fig.h
"

16 
	~"Prݔt�s.h
"

17 
	~"M��Task.h
"

18 
	~"S�voTask.h
"

19 
	~"S�s�Task.h
"

20 
	~"S�t�gs.h
"

21 
	~"Mڙ�.h
"

22 
	~"U�rI����.h
"

23 
	~"Rem�e.h
"

24 
	~"Pyth�Task.h
"

28 
Rtos
 
�os
�
NUM_OF_SENSOR_PORTS
+1+1+1, 200 );

30 
	gS�s�
::
Cڋxt
 
sCڋxt
[ 
NUM_OF_SENSOR_PORTS
 ]

31 �{ 
S�s�
::
Cڋxt
�
adc1
, 
adc21
, 
dig��A_1
, 
dig��B_1
, 
dig��C_1
, 
dig��D_1
, 
dig��H_1
 ),

32 
S�s�
::
Cڋxt
�
adc2
, 
adc22
, 
dig��A_2
, 
dig��B_2
, 
dig��C_2
, 
dig��D_2
, 
dig��H_2
 ),

33 
S�s�
::
Cڋxt
�
adc3
, 
adc23
, 
dig��A_3
, 
dig��B_3
, 
dig��C_3
, 
dig��D_3
, 
dig��H_3
 ),

34 
S�s�
::
Cڋxt
�
adc4
, 
adc24
, 
dig��A_4
, 
dig��B_4
, 
dig��C_4
, 
dig��D_4
, 
dig��H_4
 ) };

36 
S�s�Task
 
	gsTask
[ 
NUM_OF_SENSOR_PORTS
 ]

37 �{ 
S�s�Task
�
�os
, 
sCڋxt
[0], 
u�t1
, 
tim10
, 
extI�1
 ),

38 
S�s�Task
�
�os
, 
sCڋxt
[1], 
u�t2
, 
tim10
, 
extI�2
 ),

39 
S�s�Task
�
�os
, 
sCڋxt
[2], 
u�t3
, 
tim10
, 
extI�3
 ),

40 
S�s�Task
�
�os
, 
sCڋxt
[3], 
u�t4
, 
tim10
, 
extI�4
 ) };

42 
M��Task
 
	gmTask
[ 
NUM_OF_MOTOR_PORTS
 ]

43 �{ 
M��Task
�
�skM�ag�
, 
m�1
, 
�c_A
 ),

44 
M��Task
�
�skM�ag�
, 
m�2
, 
�c_B
 ),

45 
M��Task
�
�skM�ag�
, 
m�3
, 
�c_C
 ),

46 
M��Task
�
�skM�ag�
, 
m�4
, 
�c_D
 ) };

48 
S�voTask
 
	g�rvoTask
[ 
NUM_OF_SERVO_PORTS
 ]

49 �{ 
S�voTask
�
�skM�ag�
, 
pwm_Mod�lS�vo1
 ),

50 
S�voTask
�
�skM�ag�
, 
pwm_Mod�lS�vo2
 ) };

52 
Mڙ�
 
	gmڙ�
;

54 
S�t�gs
 
���gs
�
mem2
 );

57 
cISC_UART
 
�cBT
 ( 
bt
 );

58 
cISC_USBdevi�
 
�cUSB
�
usb
, 0 );

61 
A�Task
 
�p
 ( 
�os
 );

62 
Pyth�Task
 
pyth�Vm
 ( 
�os
 );

63 
U�rI����
 
ui
 ( 
�p
, 
pyth�Vm
, 
���gs
 );

64 
Cڌ�
 
��
 ( 
�skM�ag�
, 
ui
 );

65 
Rem�e
 
�m�eBT
 ( 
�cBT
, 
ui
, 
��
, 
���gs
, 
mڙ�
 );

66 
Rem�e
 
�m�eUSB
�
�cUSB
, 
ui
, 
��
, 
���gs
, 
mڙ�
 );

70 
	$��t
(
BYTE
 
l�e
, cڡ *
f�m�
, ...) {

71 
va_li�
 
�gs
;

72 
	`va_��t
(
�gs
, 
f�m�
);

73 
A�Task
::
	`�tMڙ�Text
(
nuαr
, 
l�e
, 
f�m�
, 
�gs
);

75 
	`va_�d
(
�gs
);

76 
	}
}

78 
	$ma�
( )

89 
usb
.
	`��t
();

90 
Sy�em
::
	`d�ayM�liSec
(100);

91 
	`�tRem�eUsb
(&
�m�eUSB
);

98 
�m�eUSB
.
	`upd�e
();

104 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\startup.S

1 
	~"��tup_�m32f407xx.S
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\moduledefs.h

3 
cڡ 
_mp_obj_modu�_t
 
mp_modu�___ma�__
;

4 #unde�
MODULE_DEF___MAIN__


5 
	#MODULE_DEF___MAIN__
 { 
	`MP_ROM_QSTR
(
MP_QSTR___ma�__
), 
	`MP_ROM_PTR
(&
mp_modu�___ma�__
�},

	)

7 
cڡ 
_mp_obj_modu�_t
 
mp_modu�_bu�t�s
;

8 #unde�
MODULE_DEF_BUILTINS


9 
	#MODULE_DEF_BUILTINS
 { 
	`MP_ROM_QSTR
(
MP_QSTR_bu�t�s
), 
	`MP_ROM_PTR
(&
mp_modu�_bu�t�s
�},

	)

11 
cڡ 
_mp_obj_modu�_t
 
devi�s_modu�
;

12 #unde�
MODULE_DEF_DEVICES


13 
	#MODULE_DEF_DEVICES
 { 
	`MP_ROM_QSTR
(
MP_QSTR_devi�s
), 
	`MP_ROM_PTR
(&
devi�s_modu�
�},

	)

15 
cڡ 
_mp_obj_modu�_t
 
mp_modu�_gc
;

16 #unde�
MODULE_DEF_GC


17 
	#MODULE_DEF_GC
 { 
	`MP_ROM_QSTR
(
MP_QSTR_gc
), 
	`MP_ROM_PTR
(&
mp_modu�_gc
�},

	)

19 
cڡ 
_mp_obj_modu�_t
 
mem�y_modu�
;

20 #unde�
MODULE_DEF_MEMORY


21 
	#MODULE_DEF_MEMORY
 { 
	`MP_ROM_QSTR
(
MP_QSTR_mem�y
), 
	`MP_ROM_PTR
(&
mem�y_modu�
�},

	)

23 
cڡ 
_mp_obj_modu�_t
 
mڙ�_modu�
;

24 #unde�
MODULE_DEF_MONITOR


25 
	#MODULE_DEF_MONITOR
 { 
	`MP_ROM_QSTR
(
MP_QSTR_mڙ�
), 
	`MP_ROM_PTR
(&
mڙ�_modu�
�},

	)

27 
cڡ 
_mp_obj_modu�_t
 
time_modu�
;

28 #unde�
MODULE_DEF_TIME


29 
	#MODULE_DEF_TIME
 { 
	`MP_ROM_QSTR
(
MP_QSTR_time
), 
	`MP_ROM_PTR
(&
time_modu�
�},

	)

32 
	#MICROPY_REGISTERED_MODULES
 \

33 
MODULE_DEF_BUILTINS
 \

34 
MODULE_DEF_DEVICES
 \

35 
MODULE_DEF_GC
 \

36 
MODULE_DEF_MEMORY
 \

37 
MODULE_DEF_MONITOR
 \

38 
MODULE_DEF_TIME
 \

39 
MODULE_DEF___MAIN__
 \

41 

	)

42 
	#MICROPY_REGISTERED_EXTENSIBLE_MODULES
 \

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\mpversion.h

2 
	#MICROPY_GIT_TAG
 "v1.24.0-�ev�w.216.gcc25�7db"

	)

3 
	#MICROPY_GIT_HASH
 "cc25�7db"

	)

4 
	#MICROPY_BUILD_DATE
 "2024-09-16"

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.collected.h

1 
	$Q
(
A1
)

3 
	$Q
(
A2
)

5 
	$Q
(
A3
)

7 
	$Q
(
A4
)

9 
	$Q
(
A5
)

11 
	$Q
(
A6
)

13 
	$Q
(
A7
)

15 
	$Q
(
A8
)

17 
	$Q
(
A�log
)

19 
	$Q
(
Ar�hm�icE��
)

21 
	$Q
(
Ar�hm�icE��
)

23 
	$Q
(
As��i�E��
)

25 
	$Q
(
As��i�E��
)

27 
	$Q
(
As��i�E��
)

29 
	$Q
(
A�ribu�E��
)

31 
	$Q
(
A�ribu�E��
)

33 
	$Q
(
B1
)

35 
	$Q
(
B10
)

37 
	$Q
(
B11
)

39 
	$Q
(
B12
)

41 
	$Q
(
B2
)

43 
	$Q
(
B3
)

45 
	$Q
(
B4
)

47 
	$Q
(
B5
)

49 
	$Q
(
B6
)

51 
	$Q
(
B7
)

53 
	$Q
(
B8
)

55 
	$Q
(
B9
)

57 
	$Q
(
BRAKE_MODE
)

59 
	$Q
(
Ba�Ex��i�
)

61 
	$Q
(
Ba�Ex��i�
)

63 
	$Q
(
C1
)

65 
	$Q
(
EOFE��
)

67 
	$Q
(
EOFE��
)

69 
	$Q
(
EΝsis
)

71 
	$Q
(
EΝsis
)

73 
	$Q
(
Ex��i�
)

75 
	$Q
(
Ex��i�
)

77 
	$Q
(
FORWARD
)

79 
	$Q
(
G����Ex�
)

81 
	$Q
(
G����Ex�
)

83 
	$Q
(
I2C
)

85 
	$Q
(
Imp�tE��
)

87 
	$Q
(
Imp�tE��
)

89 
	$Q
(
Ind��ti�E��
)

91 
	$Q
(
Ind��ti�E��
)

93 
	$Q
(
IndexE��
)

95 
	$Q
(
IndexE��
)

97 
	$Q
(
KeyE��
)

99 
	$Q
(
KeyE��
)

101 
	$Q
(
Key_Cڡ�ts
)

103 
	$Q
(
Keyb�rdI��ru�
)

105 
	$Q
(
Keyb�rdI��ru�
)

107 
	$Q
(
LookupE��
)

109 
	$Q
(
LookupE��
)

111 
	$Q
(
M1
)

113 
	$Q
(
M2
)

115 
	$Q
(
M3
)

117 
	$Q
(
M4
)

119 
	$Q
(
MOVETO_MODE
)

121 
	$Q
(
Mem�yE��
)

123 
	$Q
(
Mem�yE��
)

125 
	$Q
(
NO_KEY
)

127 
	$Q
(
NameE��
)

129 
	$Q
(
NameE��
)

131 
	$Q
(
N�eTy�
)

133 
	$Q
(
N�Im�em��dE��
)

135 
	$Q
(
N�Im�em��dE��
)

137 
	$Q
(
OSE��
)

139 
	$Q
(
OSE��
)

141 
	$Q
(
Ov��owE��
)

143 
	$Q
(
Ov��owE��
)

145 
	$Q
(
POWER_MODE
)

147 
	$Q
(
REVERSE
)

149 
	$Q
(
Ru�imeE��
)

151 
	$Q
(
Ru�imeE��
)

153 
	$Q
(
S1
)

155 
	$Q
(
S1
)

157 
	$Q
(
S2
)

159 
	$Q
(
S2
)

161 
	$Q
(
S3
)

163 
	$Q
(
S4
)

165 
	$Q
(
SPEED_MODE
)

167 
	$Q
(
St�I��ti�
)

169 
	$Q
(
St�I��ti�
)

171 
	$Q
(
Sy�axE��
)

173 
	$Q
(
Sy�axE��
)

175 
	$Q
(
Sy�emEx�
)

177 
	$Q
(
Sy�emEx�
)

179 
	$Q
(
TOF
)

181 
	$Q
(
Touch
)

183 
	$Q
(
Ty�E��
)

185 
	$Q
(
Ty�E��
)

187 
	$Q
(
UART
)

189 
	$Q
(
V�ueE��
)

191 
	$Q
(
V�ueE��
)

193 
	$Q
(
Z�oDivisi�E��
)

195 
	$Q
(
Z�oDivisi�E��
)

197 
	$Q
(
_0x0a_
)

199 
	$Q
(
__add__
)

201 
	$Q
(
__bo�__
)

203 
	$Q
(
__bu�d_�ass__
)

205 
	$Q
(
__��__
)

207 
	$Q
(
__�ass__
)

209 
	$Q
(
__�ass__
)

211 
	$Q
(
__�ass__
)

213 
	$Q
(
__�ass__
)

215 
	$Q
(
__�ass__
)

217 
	$Q
(
__com�ex__
)

219 
	$Q
(
__cڏ�s__
)

221 
	$Q
(
__d��em__
)

223 
	$Q
(
__d��em__
)

225 
	$Q
(
__��r__
)

227 
	$Q
(
__eq__
)

229 
	$Q
(
__eq__
)

231 
	$Q
(
__ex�__
)

233 
	$Q
(
__��t__
)

235 
	$Q
(
__ge__
)

237 
	$Q
(
__g���__
)

239 
	$Q
(
__g���__
)

241 
	$Q
(
__g��em__
)

243 
	$Q
(
__g��em__
)

245 
	$Q
(
__g��em__
)

247 
	$Q
(
__g��em__
)

249 
	$Q
(
__gt__
)

251 
	$Q
(
__hash__
)

253 
	$Q
(
__�dd__
)

255 
	$Q
(
__imp�t__
)

257 
	$Q
(
__��__
)

259 
	$Q
(
__��__
)

261 
	$Q
(
__��__
)

263 
	$Q
(
__��__
)

265 
	$Q
(
__��__
)

267 
	$Q
(
__�t__
)

269 
	$Q
(
__isub__
)

271 
	$Q
(
__��__
)

273 
	$Q
(
__�__
)

275 
	$Q
(
__�n__
)

277 
	$Q
(
__�__
)

279 
	$Q
(
__ma�__
)

281 
	$Q
(
__ma�__
)

283 
	$Q
(
__modu�__
)

285 
	$Q
(
__�me__
)

287 
	$Q
(
__�me__
)

289 
	$Q
(
__�me__
)

291 
	$Q
(
__�me__
)

293 
	$Q
(
__�me__
)

295 
	$Q
(
__�me__
)

297 
	$Q
(
__�me__
)

299 
	$Q
(
__�me__
)

301 
	$Q
(
__�me__
)

303 
	$Q
(
__�me__
)

305 
	$Q
(
__�me__
)

307 
	$Q
(
__�__
)

309 
	$Q
(
__�w__
)

311 
	$Q
(
__�w__
)

313 
	$Q
(
__�xt__
)

315 
	$Q
(
__�xt__
)

317 
	$Q
(
__�xt__
)

319 
	$Q
(
__�xt__
)

321 
	$Q
(
__qu��me__
)

323 
	$Q
(
__��_��t__
)

325 
	$Q
(
__��_��t__
)

327 
	$Q
(
__��__
)

329 
	$Q
(
__��__
)

331 
	$Q
(
__�t�em__
)

333 
	$Q
(
__�t�em__
)

335 
	$Q
(
__�r__
)

337 
	$Q
(
__sub__
)

339 
	$Q
(
__�a�back__
)

341 
	$Q
(
_b��_ݒ__c��__hash_b_b��_�o�_
)

343 
	$Q
(
_b��_ݒ__c��__hash_o_b��_�o�_
)

345 
	$Q
(
_b��_ݒ__c��__hash_x_b��_�o�_
)

347 
	$Q
(
_�_di�comp_gt_
)

349 
	$Q
(
_�_di�comp_gt_
)

351 
	$Q
(
_�_g�ex�_gt_
)

353 
	$Q
(
_�_g�ex�_gt_
)

355 
	$Q
(
_�_�mbda_gt_
)

357 
	$Q
(
_�_�mbda_gt_
)

359 
	$Q
(
_�_li�comp_gt_
)

361 
	$Q
(
_�_li�comp_gt_
)

363 
	$Q
(
_�_modu�_gt_
)

365 
	$Q
(
_�_modu�_gt_
)

367 
	$Q
(
_�_�tcomp_gt_
)

369 
	$Q
(
_�_�tcomp_gt_
)

371 
	$Q
(
_�_�r�g_gt_
)

373 
	$Q
(
_�a�_
)

375 
	$Q
(
_��_
)

377 
	$Q
(
_��_
)

379 
	$Q
(
abs
)

381 
	$Q
(
acc
)

383 
	$Q
(
acc
)

385 
	$Q
(
�l
)

387 
	$Q
(
�g�
)

389 
	$Q
(
�y
)

391 
	$Q
(
��nd
)

393 
	$Q
(
�gs
)

395 
	$Q
(
b�
)

397 
	$Q
(
bo�
)

399 
	$Q
(
bo�
)

401 
	$Q
(
bound_m�hod
)

403 
	$Q
(
b�ke
)

405 
	$Q
(
bu�t�s
)

407 
	$Q
(
bu�t�s
)

409 
	$Q
(
bu��
)

411 
	$Q
(
bu��
)

413 
	$Q
(
by�code
)

415 
	$Q
(
by�s
)

417 
	$Q
(
by�s
)

419 
	$Q
(
��ab�
)

421 
	$Q
(
chr
)

423 
	$Q
(
�assm�hod
)

425 
	$Q
(
�assm�hod
)

427 
	$Q
(
��r
)

429 
	$Q
(
��r
)

431 
	$Q
(
��rMem�y
)

433 
	$Q
(
�o�
)

435 
	$Q
(
�o�
)

437 
	$Q
(
�osu�
)

439 
	$Q
(
c���
)

441 
	$Q
(
com�ex
)

443 
	$Q
(
com�ex
)

445 
	$Q
(
c�fig
)

447 
	$Q
(
c�fig
)

449 
	$Q
(
c�y
)

451 
	$Q
(
c�y
)

453 
	$Q
(
cou�
)

455 
	$Q
(
cou�
)

457 
	$Q
(
devi�s
)

459 
	$Q
(
devi�s
)

461 
	$Q
(
di�
)

463 
	$Q
(
di�
)

465 
	$Q
(
di�_v�w
)

467 
	$Q
(
d�
)

469 
	$Q
(
d�e�i�
)

471 
	$Q
(
d�e�i�
)

473 
	$Q
(
di�b�
)

475 
	$Q
(
divmod
)

477 
	$Q
(
�ab�
)

479 
	$Q
(
�d
)

481 
	$Q
(
�dsw�h
)

483 
	$Q
(
��o
)

485 
	$Q
(
ev�
)

487 
	$Q
(
exec
)

489 
	$Q
(
ex�
)

491 
	$Q
(
ex�nd
)

493 
	$Q
(
f�d
)

495 
	$Q
()

497 
	$Q
()

499 
	$Q
(
f�m�
)

501 
	$Q
(
�om_by�s
)

503 
	$Q
(
fun�i�
)

505 
	$Q
(
fun�i�
)

507 
	$Q
(
fun�i�
)

509 
	$Q
(
fun�i�
)

511 
	$Q
(
fun�i�
)

513 
	$Q
(
fun�i�
)

515 
	$Q
(
fun�i�
)

517 
	$Q
(
gc
)

519 
	$Q
(
gc
)

521 
	$Q
(
g����
)

523 
	$Q
(
g����
)

525 
	$Q
(
g�
)

527 
	$Q
(
g�
)

529 
	$Q
(
g�
)

531 
	$Q
(
g�
)

533 
	$Q
(
g�Dig��
)

535 
	$Q
(
g�Key
)

537 
	$Q
(
g�Mem�y
)

539 
	$Q
(
g�Pos�i�
)

541 
	$Q
(
g�Pow�
)

543 
	$Q
(
g�S�ed
)

545 
	$Q
(
g�Time
)

547 
	$Q
(
g�V�ueExt
)

549 
	$Q
(
g���
)

551 
	$Q
(
glob�s
)

553 
	$Q
(
ha��r
)

555 
	$Q
(
hash
)

557 
	$Q
(
hex
)

559 
	$Q
(
id
)

561 
	$Q
(
id
)

563 
	$Q
(
imag
)

565 
	$Q
(
�dex
)

567 
	$Q
(
�dex
)

569 
	$Q
(
�dex
)

571 
	$Q
(
���
)

573 
	$Q
()

575 
	$Q
()

577 
	$Q
(
i��ha
)

579 
	$Q
(
isdig�
)

581 
	$Q
(
i��b�d
)

583 
	$Q
(
is����
)

585 
	$Q
(
i�ow�
)

587 
	$Q
(
is�a�
)

589 
	$Q
(
issub�ass
)

591 
	$Q
(
isu��
)

593 
	$Q
(
�ems
)

595 
	$Q
(
��
)

597 
	$Q
(
����
)

599 
	$Q
(
����
)

601 
	$Q
(
����
)

603 
	$Q
(
����
)

605 
	$Q
(
jo�
)

607 
	$Q
(
key
)

609 
	$Q
(
keys
)

611 
	$Q
(
keys
)

613 
	$Q
(
keys
)

615 
	$Q
(
ki
)

617 
	$Q
(
ki
)

619 
	$Q
(
kp
)

621 
	$Q
(
kp
)

623 
	$Q
(
�n
)

625 
	$Q
(
li�
)

627 
	$Q
(
li�
)

629 
	$Q
(
l��e
)

631 
	$Q
(
l��e
)

633 
	$Q
(
lo�ls
)

635 
	$Q
(
low�
)

637 
	$Q
(
l�r�
)

639 
	$Q
(
m�
)

641 
	$Q
(
m�
)

643 
	$Q
(
mem_�loc
)

645 
	$Q
(
mem_�
)

647 
	$Q
(
mem_off�t
)

649 
	$Q
(
mem_off�t
)

651 
	$Q
(
mem�y
)

653 
	$Q
(
mem�y
)

655 
	$Q
(
mi��yth�
)

657 
	$Q
(
mode
)

659 
	$Q
(
mode
)

661 
	$Q
(
mode
)

663 
	$Q
(
modu�
)

665 
	$Q
(
mڙ�
)

667 
	$Q
(
mڙ�
)

669 
	$Q
(
mڙ�_keys
)

671 
	$Q
(
m��
)

673 
	$Q
(
m��
)

675 
	$Q
(
�xt
)

677 
	$Q
(
obje�
)

679 
	$Q
(
obje�
)

681 
	$Q
(
o�
)

683 
	$Q
(
�d
)

685 
	$Q
(
p�
)

687 
	$Q
(
p�
)

689 
	$Q
(
pݙem
)

691 
	$Q
(
p�t
)

693 
	$Q
(
p�t
)

695 
	$Q
(
p�t
)

697 
	$Q
(
pos�i�
)

699 
	$Q
(
pow
)

701 
	$Q
(
��t
)

703 
	$Q
(
�nge
)

705 
	$Q
(
�nge
)

707 
	$Q
(
�nge
)

709 
	$Q
(
��
)

711 
	$Q
(
�move
)

713 
	$Q
(
��a�
)

715 
	$Q
(
��
)

717 
	$Q
(
�v��
)

719 
	$Q
(
�v��
)

721 
	$Q
(
rf�d
)

723 
	$Q
(
r�dex
)

725 
	$Q
(
round
)

727 
	$Q
(
r�l�
)

729 
	$Q
(
r�r�
)

731 
	$Q
(
�nd
)

733 
	$Q
(
�nd
)

735 
	$Q
(
�ns�
)

737 
	$Q
(
�ns�
)

739 
	$Q
(
�p
)

741 
	$Q
(
�rvo
)

743 
	$Q
(
�rvo
)

745 
	$Q
(
�t
)

747 
	$Q
(
�t
)

749 
	$Q
(
�tMem�y
)

751 
	$Q
(
�tText
)

753 
	$Q
(
���r
)

755 
	$Q
(
�tde�u�
)

757 
	$Q
(
s�t
)

759 
	$Q
(
s܋d
)

761 
	$Q
(
��d
)

763 
	$Q
(
��d
)

765 
	$Q
(
�l�
)

767 
	$Q
(
��tsw�h
)

769 
	$Q
(
��icm�hod
)

771 
	$Q
(
��icm�hod
)

773 
	$Q
(
�r
)

775 
	$Q
(
�r
)

777 
	$Q
(
�r�
)

779 
	$Q
(
sum
)

781 
	$Q
(
su�r
)

783 
	$Q
(
su�r
)

785 
	$Q
(
su�r
)

787 
	$Q
(
throw
)

789 
	$Q
(
throw
)

791 
	$Q
(
ticks
)

793 
	$Q
(
ticks
)

795 
	$Q
(
time
)

797 
	$Q
(
time
)

799 
	$Q
(
to_by�s
)

801 
	$Q
(
tu�e
)

803 
	$Q
(
tu�e
)

805 
	$Q
(
ty�
)

807 
	$Q
(
ty�
)

809 
	$Q
(
ty�
)

811 
	$Q
(
ty�
)

813 
	$Q
(
upd�e
)

815 
	$Q
(
u��
)

817 
	$Q
(
v�ue
)

819 
	$Q
(
v�ues
)

821 
	$Q
(
wa�
)

823 
	$Q
(
z�
)

825 
	`Q
(
z�
)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.generated.h

3 
QDEF0
(
MP_QSTRnu�
, 0, 0, "")

4 
QDEF0
(
MP_QSTR_
, 5381, 0, "")

5 
QDEF0
(
MP_QSTR___d�__
, 36730, 7, "__dir__")

6 
QDEF0
(
MP_QSTR__0x0a_
, 46511, 1, "\x0a")

7 
QDEF0
(
MP_QSTR__�a�_
, 46469, 1, " ")

8 
QDEF0
(
MP_QSTR__��_
, 46479, 1, "*")

9 
QDEF0
(
MP_QSTR__�ash_
, 46474, 1, "/")

10 
QDEF0
(
MP_QSTR__�_modu�_gt_
, 38077, 8, "<module>")

11 
QDEF0
(
MP_QSTR__
, 46586, 1, "_")

12 
QDEF0
(
MP_QSTR___��__
, 63911, 8, "__call__")

13 
QDEF0
(
MP_QSTR___�ass__
, 50475, 9, "__class__")

14 
QDEF0
(
MP_QSTR___d��em__
, 13821, 11, "__delitem__")

15 
QDEF0
(
MP_QSTR___��r__
, 47725, 9, "__enter__")

16 
QDEF0
(
MP_QSTR___ex�__
, 63557, 8, "__exit__")

17 
QDEF0
(
MP_QSTR___g���__
, 63552, 11, "__getattr__")

18 
QDEF0
(
MP_QSTR___g��em__
, 14630, 11, "__getitem__")

19 
QDEF0
(
MP_QSTR___hash__
, 51447, 8, "__hash__")

20 
QDEF0
(
MP_QSTR___��__
, 42335, 8, "__init__")

21 
QDEF0
(
MP_QSTR___�t__
, 6934, 7, "__int__")

22 
QDEF0
(
MP_QSTR___��__
, 13007, 8, "__iter__")

23 
QDEF0
(
MP_QSTR___�n__
, 45282, 7, "__len__")

24 
QDEF0
(
MP_QSTR___ma�__
, 5006, 8, "__main__")

25 
QDEF0
(
MP_QSTR___modu�__
, 12543, 10, "__module__")

26 
QDEF0
(
MP_QSTR___�me__
, 14562, 8, "__name__")

27 
QDEF0
(
MP_QSTR___�w__
, 5497, 7, "__new__")

28 
QDEF0
(
MP_QSTR___�xt__
, 29442, 8, "__next__")

29 
QDEF0
(
MP_QSTR___qu��me__
, 107, 12, "__qualname__")

30 
QDEF0
(
MP_QSTR___��__
, 2832, 8, "__repr__")

31 
QDEF0
(
MP_QSTR___�t�em__
, 15922, 11, "__setitem__")

32 
QDEF0
(
MP_QSTR___�r__
, 52688, 7, "__str__")

33 
QDEF0
(
MP_QSTR_Ar�hm�icE��
, 35885, 15, "ArithmeticError")

34 
QDEF0
(
MP_QSTR_As��i�E��
, 23191, 14, "AssertionError")

35 
QDEF0
(
MP_QSTR_A�ribu�E��
, 56865, 14, "AttributeError")

36 
QDEF0
(
MP_QSTR_Ba�Ex��i�
, 37383, 13, "BaseException")

37 
QDEF0
(
MP_QSTR_EOFE��
, 49041, 8, "EOFError")

38 
QDEF0
(
MP_QSTR_EΝsis
, 57584, 8, "Ellipsis")

39 
QDEF0
(
MP_QSTR_Ex��i�
, 10738, 9, "Exception")

40 
QDEF0
(
MP_QSTR_G����Ex�
, 25110, 13, "GeneratorExit")

41 
QDEF0
(
MP_QSTR_Imp�tE��
, 39968, 11, "ImportError")

42 
QDEF0
(
MP_QSTR_Ind��ti�E��
, 8284, 16, "IndentationError")

43 
QDEF0
(
MP_QSTR_IndexE��
, 44419, 10, "IndexError")

44 
QDEF0
(
MP_QSTR_KeyE��
, 234, 8, "KeyError")

45 
QDEF0
(
MP_QSTR_Keyb�rdI��ru�
, 58031, 17, "KeyboardInterrupt")

46 
QDEF0
(
MP_QSTR_LookupE��
, 27135, 11, "LookupError")

47 
QDEF0
(
MP_QSTR_Mem�yE��
, 33756, 11, "MemoryError")

48 
QDEF0
(
MP_QSTR_NameE��
, 11706, 9, "NameError")

49 
QDEF0
(
MP_QSTR_N�eTy�
, 26647, 8, "NoneType")

50 
QDEF0
(
MP_QSTR_N�Im�em��dE��
, 39110, 19, "NotImplementedError")

51 
QDEF0
(
MP_QSTR_OSE��
, 26017, 7, "OSError")

52 
QDEF0
(
MP_QSTR_Ov��owE��
, 57729, 13, "OverflowError")

53 
QDEF0
(
MP_QSTR_Ru�imeE��
, 61793, 12, "RuntimeError")

54 
QDEF0
(
MP_QSTR_St�I��ti�
, 7402, 13, "StopIteration")

55 
QDEF0
(
MP_QSTR_Sy�axE��
, 36756, 11, "SyntaxError")

56 
QDEF0
(
MP_QSTR_Sy�emEx�
, 65312, 10, "SystemExit")

57 
QDEF0
(
MP_QSTR_Ty�E��
, 38437, 9, "TypeError")

58 
QDEF0
(
MP_QSTR_V�ueE��
, 34710, 10, "ValueError")

59 
QDEF0
(
MP_QSTR_Z�oDivisi�E��
, 10166, 17, "ZeroDivisionError")

60 
QDEF0
(
MP_QSTR_abs
, 12949, 3, "abs")

61 
QDEF0
(
MP_QSTR_�l
, 13124, 3, "all")

62 
QDEF0
(
MP_QSTR_�y
, 13075, 3, "any")

63 
QDEF0
(
MP_QSTR_��nd
, 38763, 6, "append")

64 
QDEF0
(
MP_QSTR_�gs
, 50882, 4, "args")

65 
QDEF0
(
MP_QSTR_bo�
, 15595, 4, "bool")

66 
QDEF0
(
MP_QSTR_bu�t�s
, 12791, 8, "builtins")

67 
QDEF0
(
MP_QSTR_by���y
, 41846, 9, "bytearray")

68 
QDEF0
(
MP_QSTR_by�code
, 32034, 8, "bytecode")

69 
QDEF0
(
MP_QSTR_by�s
, 45660, 5, "bytes")

70 
QDEF0
(
MP_QSTR_��ab�
, 28685, 8, "callable")

71 
QDEF0
(
MP_QSTR_chr
, 19676, 3, "chr")

72 
QDEF0
(
MP_QSTR_�assm�hod
, 36020, 11, "classmethod")

73 
QDEF0
(
MP_QSTR_��r
, 41084, 5, "clear")

74 
QDEF0
(
MP_QSTR_�o�
, 26419, 5, "close")

75 
QDEF0
(
MP_QSTR_cڡ
, 65472, 5, "const")

76 
QDEF0
(
MP_QSTR_c�y
, 56288, 4, "copy")

77 
QDEF0
(
MP_QSTR_cou�
, 19878, 5, "count")

78 
QDEF0
(
MP_QSTR_di�
, 64575, 4, "dict")

79 
QDEF0
(
MP_QSTR_d�
, 7930, 3, "dir")

80 
QDEF0
(
MP_QSTR_divmod
, 1208, 6, "divmod")

81 
QDEF0
(
MP_QSTR_�d
, 8970, 3, "end")

82 
QDEF0
(
MP_QSTR_�dsw�h
, 41755, 8, "endswith")

83 
QDEF0
(
MP_QSTR_ev�
, 42651, 4, "eval")

84 
QDEF0
(
MP_QSTR_exec
, 49182, 4, "exec")

85 
QDEF0
(
MP_QSTR_ex�nd
, 59491, 6, "extend")

86 
QDEF0
(
MP_QSTR_f�d
, 13312, 4, "find")

87 
QDEF0
(
MP_QSTR_f�m�
, 13094, 6, "format")

88 
QDEF0
(
MP_QSTR_�om_by�s
, 29749, 10, "from_bytes")

89 
QDEF0
(
MP_QSTR_g�
, 15155, 3, "get")

90 
QDEF0
(
MP_QSTR_g���
, 6080, 7, "getattr")

91 
QDEF0
(
MP_QSTR_glob�s
, 18845, 7, "globals")

92 
QDEF0
(
MP_QSTR_ha��r
, 45196, 7, "hasattr")

93 
QDEF0
(
MP_QSTR_hash
, 28855, 4, "hash")

94 
QDEF0
(
MP_QSTR_id
, 28456, 2, "id")

95 
QDEF0
(
MP_QSTR_�dex
, 10363, 5, "index")

96 
QDEF0
(
MP_QSTR_���
, 21522, 6, "insert")

97 
QDEF0
(
MP_QSTR_�t
, 21270, 3, "int")

98 
QDEF0
(
MP_QSTR_i��ha
, 14315, 7, "isalpha")

99 
QDEF0
(
MP_QSTR_isdig�
, 39592, 7, "isdigit")

100 
QDEF0
(
MP_QSTR_is����
, 48822, 10, "isinstance")

101 
QDEF0
(
MP_QSTR_i�ow�
, 33020, 7, "islower")

102 
QDEF0
(
MP_QSTR_is�a�
, 63579, 7, "isspace")

103 
QDEF0
(
MP_QSTR_issub�ass
, 32693, 10, "issubclass")

104 
QDEF0
(
MP_QSTR_isu��
, 42973, 7, "isupper")

105 
QDEF0
(
MP_QSTR_�ems
, 21475, 5, "items")

106 
QDEF0
(
MP_QSTR_��
, 8591, 4, "iter")

107 
QDEF0
(
MP_QSTR_jo�
, 23719, 4, "join")

108 
QDEF0
(
MP_QSTR_key
, 27954, 3, "key")

109 
QDEF0
(
MP_QSTR_keys
, 4865, 4, "keys")

110 
QDEF0
(
MP_QSTR_�n
, 16482, 3, "len")

111 
QDEF0
(
MP_QSTR_li�
, 7463, 4, "list")

112 
QDEF0
(
MP_QSTR_l��e
, 27273, 6, "little")

113 
QDEF0
(
MP_QSTR_lo�ls
, 41275, 6, "locals")

114 
QDEF0
(
MP_QSTR_low�
, 52166, 5, "lower")

115 
QDEF0
(
MP_QSTR_l�r�
, 47589, 6, "lstrip")

116 
QDEF0
(
MP_QSTR_ma�
, 47054, 4, "main")

117 
QDEF0
(
MP_QSTR_m�
, 17337, 3, "map")

118 
QDEF0
(
MP_QSTR_mi��yth�
, 31755, 11, "micropython")

119 
QDEF0
(
MP_QSTR_�xt
, 34882, 4, "next")

120 
QDEF0
(
MP_QSTR_obje�
, 36240, 6, "object")

121 
QDEF0
(
MP_QSTR_ݒ
, 15057, 4, "open")

122 
QDEF0
(
MP_QSTR_�d
, 24092, 3, "ord")

123 
QDEF0
(
MP_QSTR_p�
, 29482, 3, "pop")

124 
QDEF0
(
MP_QSTR_pݙem
, 11455, 7, "popitem")

125 
QDEF0
(
MP_QSTR_pow
, 29485, 3, "pow")

126 
QDEF0
(
MP_QSTR_��t
, 50772, 5, "print")

127 
QDEF0
(
MP_QSTR_�nge
, 24090, 5, "range")

128 
QDEF0
(
MP_QSTR_�ad
, 63927, 4, "read")

129 
QDEF0
(
MP_QSTR_�ad�to
, 48971, 8, "readinto")

130 
QDEF0
(
MP_QSTR_�adl�e
, 6649, 8, "readline")

131 
QDEF0
(
MP_QSTR_�move
, 35427, 6, "remove")

132 
QDEF0
(
MP_QSTR_��a�
, 9545, 7, "replace")

133 
QDEF0
(
MP_QSTR_��
, 63440, 4, "repr")

134 
QDEF0
(
MP_QSTR_�v��
, 10789, 7, "reverse")

135 
QDEF0
(
MP_QSTR_rf�d
, 40146, 5, "rfind")

136 
QDEF0
(
MP_QSTR_r�dex
, 11241, 6, "rindex")

137 
QDEF0
(
MP_QSTR_round
, 9703, 5, "round")

138 
QDEF0
(
MP_QSTR_r�l�
, 165, 6, "rsplit")

139 
QDEF0
(
MP_QSTR_r�r�
, 38203, 6, "rstrip")

140 
QDEF0
(
MP_QSTR_�lf
, 30585, 4, "self")

141 
QDEF0
(
MP_QSTR_�nd
, 30393, 4, "send")

142 
QDEF0
(
MP_QSTR_�p
, 36643, 3, "sep")

143 
QDEF0
(
MP_QSTR_�t
, 36647, 3, "set")

144 
QDEF0
(
MP_QSTR_���r
, 43220, 7, "setattr")

145 
QDEF0
(
MP_QSTR_�tde�u�
, 41836, 10, "setdefault")

146 
QDEF0
(
MP_QSTR_s�t
, 40383, 4, "sort")

147 
QDEF0
(
MP_QSTR_s܋d
, 5470, 6, "sorted")

148 
QDEF0
(
MP_QSTR_�l�
, 13239, 5, "split")

149 
QDEF0
(
MP_QSTR_��t
, 61317, 5, "start")

150 
QDEF0
(
MP_QSTR_��tsw�h
, 59508, 10, "startswith")

151 
QDEF0
(
MP_QSTR_��icm�hod
, 44898, 12, "staticmethod")

152 
QDEF0
(
MP_QSTR_��
, 13911, 4, "step")

153 
QDEF0
(
MP_QSTR_��
, 13981, 4, "stop")

154 
QDEF0
(
MP_QSTR_�r
, 36176, 3, "str")

155 
QDEF0
(
MP_QSTR_�r�
, 7721, 5, "strip")

156 
QDEF0
(
MP_QSTR_sum
, 36142, 3, "sum")

157 
QDEF0
(
MP_QSTR_su�r
, 45764, 5, "super")

158 
QDEF0
(
MP_QSTR_throw
, 17587, 5, "throw")

159 
QDEF0
(
MP_QSTR_to_by�s
, 16088, 8, "to_bytes")

160 
QDEF0
(
MP_QSTR_tu�e
, 16893, 5, "tuple")

161 
QDEF0
(
MP_QSTR_ty�
, 32669, 4, "type")

162 
QDEF0
(
MP_QSTR_upd�e
, 30388, 6, "update")

163 
QDEF0
(
MP_QSTR_u��
, 37927, 5, "upper")

164 
QDEF0
(
MP_QSTR_utf_hyph�_8
, 33463, 5, "utf-8")

165 
QDEF0
(
MP_QSTR_v�ue
, 13390, 5, "value")

166 
QDEF0
(
MP_QSTR_v�ues
, 48765, 6, "values")

167 
QDEF0
(
MP_QSTR_wr�e
, 43160, 5, "write")

168 
QDEF0
(
MP_QSTR_z�
, 44262, 3, "zip")

169 
QDEF0
(
MP_QSTR__�_di�comp_gt_
, 36300, 10, "<dictcomp>")

170 
QDEF0
(
MP_QSTR__�_g�ex�_gt_
, 27188, 9, "<genexpr>")

171 
QDEF0
(
MP_QSTR__�_�mbda_gt_
, 35968, 8, "<lambda>")

172 
QDEF0
(
MP_QSTR__�_li�comp_gt_
, 5588, 10, "<listcomp>")

173 
QDEF0
(
MP_QSTR__�_�tcomp_gt_
, 20820, 9, "<setcomp>")

174 
QDEF1
(
MP_QSTR__�_�d�_gt_
, 25571, 7, "<stdin>")

175 
QDEF1
(
MP_QSTR__�_�r�g_gt_
, 21330, 8, "<string>")

176 
QDEF1
(
MP_QSTR_A1
, 29269, 2, "A1")

177 
QDEF1
(
MP_QSTR_A2
, 29270, 2, "A2")

178 
QDEF1
(
MP_QSTR_A3
, 29271, 2, "A3")

179 
QDEF1
(
MP_QSTR_A4
, 29264, 2, "A4")

180 
QDEF1
(
MP_QSTR_A5
, 29265, 2, "A5")

181 
QDEF1
(
MP_QSTR_A6
, 29266, 2, "A6")

182 
QDEF1
(
MP_QSTR_A7
, 29267, 2, "A7")

183 
QDEF1
(
MP_QSTR_A8
, 29276, 2, "A8")

184 
QDEF1
(
MP_QSTR_A�log
, 60111, 6, "Analog")

185 
QDEF1
(
MP_QSTR_B1
, 29430, 2, "B1")

186 
QDEF1
(
MP_QSTR_B10
, 53638, 3, "B10")

187 
QDEF1
(
MP_QSTR_B11
, 53639, 3, "B11")

188 
QDEF1
(
MP_QSTR_B12
, 53636, 3, "B12")

189 
QDEF1
(
MP_QSTR_B2
, 29429, 2, "B2")

190 
QDEF1
(
MP_QSTR_B3
, 29428, 2, "B3")

191 
QDEF1
(
MP_QSTR_B4
, 29427, 2, "B4")

192 
QDEF1
(
MP_QSTR_B5
, 29426, 2, "B5")

193 
QDEF1
(
MP_QSTR_B6
, 29425, 2, "B6")

194 
QDEF1
(
MP_QSTR_B7
, 29424, 2, "B7")

195 
QDEF1
(
MP_QSTR_B8
, 29439, 2, "B8")

196 
QDEF1
(
MP_QSTR_B9
, 29438, 2, "B9")

197 
QDEF1
(
MP_QSTR_BRAKE_MODE
, 4518, 10, "BRAKE_MODE")

198 
QDEF1
(
MP_QSTR_C1
, 29335, 2, "C1")

199 
QDEF1
(
MP_QSTR_FORWARD
, 64894, 7, "FORWARD")

200 
QDEF1
(
MP_QSTR_I2C
, 57181, 3, "I2C")

201 
QDEF1
(
MP_QSTR_Key_Cڡ�ts
, 48256, 13, "Key_Constants")

202 
QDEF1
(
MP_QSTR_M1
, 29401, 2, "M1")

203 
QDEF1
(
MP_QSTR_M2
, 29402, 2, "M2")

204 
QDEF1
(
MP_QSTR_M3
, 29403, 2, "M3")

205 
QDEF1
(
MP_QSTR_M4
, 29404, 2, "M4")

206 
QDEF1
(
MP_QSTR_MOVETO_MODE
, 9587, 11, "MOVETO_MODE")

207 
QDEF1
(
MP_QSTR_NO_KEY
, 58252, 6, "NO_KEY")

208 
QDEF1
(
MP_QSTR_POWER_MODE
, 31046, 10, "POWER_MODE")

209 
QDEF1
(
MP_QSTR_REVERSE
, 23941, 7, "REVERSE")

210 
QDEF1
(
MP_QSTR_S1
, 29831, 2, "S1")

211 
QDEF1
(
MP_QSTR_S2
, 29828, 2, "S2")

212 
QDEF1
(
MP_QSTR_S3
, 29829, 2, "S3")

213 
QDEF1
(
MP_QSTR_S4
, 29826, 2, "S4")

214 
QDEF1
(
MP_QSTR_SPEED_MODE
, 5118, 10, "SPEED_MODE")

215 
QDEF1
(
MP_QSTR_TOF
, 88, 3, "TOF")

216 
QDEF1
(
MP_QSTR_Touch
, 18080, 5, "Touch")

217 
QDEF1
(
MP_QSTR_UART
, 6583, 4, "UART")

218 
QDEF0
(
MP_QSTR___add__
, 33476, 7, "__add__")

219 
QDEF0
(
MP_QSTR___bo�__
, 25899, 8, "__bool__")

220 
QDEF1
(
MP_QSTR___bu�d_�ass__
, 34882, 15, "__build_class__")

221 
QDEF0
(
MP_QSTR___com�ex__
, 58053, 11, "__complex__")

222 
QDEF0
(
MP_QSTR___cڏ�s__
, 24518, 12, "__contains__")

223 
QDEF0
(
MP_QSTR___eq__
, 15985, 6, "__eq__")

224 
QDEF0
(
MP_QSTR___��t__
, 28725, 9, "__float__")

225 
QDEF0
(
MP_QSTR___ge__
, 18087, 6, "__ge__")

226 
QDEF0
(
MP_QSTR___gt__
, 33462, 6, "__gt__")

227 
QDEF0
(
MP_QSTR___�dd__
, 19053, 8, "__iadd__")

228 
QDEF1
(
MP_QSTR___imp�t__
, 15928, 10, "__import__")

229 
QDEF0
(
MP_QSTR___isub__
, 30728, 8, "__isub__")

230 
QDEF0
(
MP_QSTR___�__
, 5068, 6, "__le__")

231 
QDEF0
(
MP_QSTR___�__
, 26717, 6, "__lt__")

232 
QDEF0
(
MP_QSTR___�__
, 2830, 6, "__ne__")

233 
QDEF1
(
MP_QSTR___��_��t__
, 47872, 14, "__repl_print__")

234 
QDEF0
(
MP_QSTR___sub__
, 2337, 7, "__sub__")

235 
QDEF1
(
MP_QSTR___�a�back__
, 53071, 13, "__traceback__")

236 
QDEF1
(
MP_QSTR_acc
, 13156, 3, "acc")

237 
QDEF1
(
MP_QSTR_�g�
, 11396, 5, "angle")

238 
QDEF1
(
MP_QSTR_b�
, 18656, 3, "bin")

239 
QDEF1
(
MP_QSTR_bound_m�hod
, 41623, 12, "bound_method")

240 
QDEF1
(
MP_QSTR_b�ke
, 60346, 5, "brake")

241 
QDEF1
(
MP_QSTR_bu��
, 24819, 6, "button")

242 
QDEF1
(
MP_QSTR_��rMem�y
, 65117, 11, "clearMemory")

243 
QDEF1
(
MP_QSTR_�osu�
, 51828, 7, "closure")

244 
QDEF1
(
MP_QSTR_c���
, 26011, 7, "collect")

245 
QDEF1
(
MP_QSTR_com�ex
, 40389, 7, "complex")

246 
QDEF1
(
MP_QSTR_c�fig
, 41551, 6, "config")

247 
QDEF1
(
MP_QSTR_devi�s
, 64174, 7, "devices")

248 
QDEF1
(
MP_QSTR_di�_v�w
, 43309, 9, "dict_view")

249 
QDEF1
(
MP_QSTR_d�e�i�
, 29728, 9, "direction")

250 
QDEF1
(
MP_QSTR_di�b�
, 30353, 7, "disable")

251 
QDEF1
(
MP_QSTR_�ab�
, 56836, 6, "enable")

252 
QDEF1
(
MP_QSTR_��o
, 4545, 5, "errno")

253 
QDEF1
(
MP_QSTR_ex�
, 48773, 4, "exit")

254 
QDEF1
(
MP_QSTR_��t
, 17461, 5, "float")

255 
QDEF1
(
MP_QSTR_fun�i�
, 551, 8, "function")

256 
QDEF1
(
MP_QSTR_gc
, 28257, 2, "gc")

257 
QDEF1
(
MP_QSTR_g����
, 50070, 9, "generator")

258 
QDEF1
(
MP_QSTR_g�Dig��
, 17385, 10, "getDigital")

259 
QDEF1
(
MP_QSTR_g�Key
, 29732, 6, "getKey")

260 
QDEF1
(
MP_QSTR_g�Mem�y
, 36946, 9, "getMemory")

261 
QDEF1
(
MP_QSTR_g�Pos�i�
, 62794, 11, "getPosition")

262 
QDEF1
(
MP_QSTR_g�Pow�
, 2892, 8, "getPower")

263 
QDEF1
(
MP_QSTR_g�S�ed
, 19572, 8, "getSpeed")

264 
QDEF1
(
MP_QSTR_g�Time
, 53542, 7, "getTime")

265 
QDEF1
(
MP_QSTR_g�V�ueExt
, 53777, 11, "getValueExt")

266 
QDEF1
(
MP_QSTR_hex
, 20592, 3, "hex")

267 
QDEF1
(
MP_QSTR_imag
, 46919, 4, "imag")

268 
QDEF1
(
MP_QSTR_i��b�d
, 58778, 9, "isenabled")

269 
QDEF1
(
MP_QSTR_����
, 48711, 8, "iterator")

270 
QDEF1
(
MP_QSTR_ki
, 28647, 2, "ki")

271 
QDEF1
(
MP_QSTR_kp
, 28670, 2, "kp")

272 
QDEF1
(
MP_QSTR_maximum_�a�_�cursi�_�a�_d�th_�a�_ex�eded
, 7795, 32, "maximum�ecursion depth�xceeded")

273 
QDEF1
(
MP_QSTR_mem_�loc
, 11090, 9, "mem_alloc")

274 
QDEF1
(
MP_QSTR_mem_�
, 25291, 8, "mem_free")

275 
QDEF1
(
MP_QSTR_mem_off�t
, 38834, 10, "mem_offset")

276 
QDEF1
(
MP_QSTR_mem�y
, 7556, 6, "memory")

277 
QDEF1
(
MP_QSTR_mode
, 49190, 4, "mode")

278 
QDEF1
(
MP_QSTR_modu�
, 39359, 6, "module")

279 
QDEF1
(
MP_QSTR_mڙ�
, 36649, 7, "monitor")

280 
QDEF1
(
MP_QSTR_mڙ�_keys
, 15634, 12, "monitor_keys")

281 
QDEF1
(
MP_QSTR_m��
, 2510, 5, "motor")

282 
QDEF1
(
MP_QSTR_o�
, 23805, 3, "oct")

283 
QDEF1
(
MP_QSTR_p�t
, 55388, 4, "port")

284 
QDEF1
(
MP_QSTR_pos�i�
, 1052, 8, "position")

285 
QDEF1
(
MP_QSTR_��
, 63935, 4, "real")

286 
QDEF1
(
MP_QSTR_�ns�
, 52307, 6, "sensor")

287 
QDEF1
(
MP_QSTR_�rvo
, 55928, 5, "servo")

288 
QDEF1
(
MP_QSTR_�tMem�y
, 19782, 9, "setMemory")

289 
QDEF1
(
MP_QSTR_�tText
, 6106, 7, "setText")

290 
QDEF1
(
MP_QSTR_sim�e_�ns�
, 18530, 13, "simple_sensor")

291 
QDEF1
(
MP_QSTR_��d
, 3938, 5, "speed")

292 
QDEF1
(
MP_QSTR_ticks
, 2115, 5, "ticks")

293 
QDEF1
(
MP_QSTR_time
, 49648, 4, "time")

294 
QDEF1
(
MP_QSTR_wa�
, 21902, 4, "wait")

295 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_b_b��_�o�_
, 14168, 5, "{:#b}")

296 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_o_b��_�o�_
, 14325, 5, "{:#o}")

297 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_x_b��_�o�_
, 14850, 5, "{:#x}")

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.preprocessed.h

47 #�agm�
�ck
(
push
,
_CRT_PACKING
)

51 
__bu�t�_va_li�
 
	t__gnuc_va_li�
;

58 
__gnuc_va_li�
 
	tva_li�
;

60 #�agm�
�ck
(
p�
)

63 
__��ibu�__
((
__cde�__
)�
__debugb�ak
();

64 
__�l�e__
 
__��ibu�__
((
__�ways_�l�e__
,
__gnu_�l�e__
)�__��ibu�__((
__cde�__
)�
	$__debugb�ak
()

66 
__asm__
 
	`__vީ�e__
("int {$}3":);

67 
	}
}

72 cڡ *
__m�gw_g�_�t_�fo
 ();

78 #�agm�
�ck
(
push
,
_CRT_PACKING
)

80 
__ex�nsi�__
 
	tsize_t
;

82 
__ex�nsi�__
 
	tssize_t
;

89 
size_t
 
	trsize_t
;

91 
__ex�nsi�__
 
	t���_t
;

93 
__ex�nsi�__
 
	tu���_t
;

95 
__ex�nsi�__
 
	t�rdiff_t
;

97 
	twch�_t
;

105 
	tw�t_t
;

106 
	tw�y�_t
;

112 
	t��o_t
;

117 
	t__time32_t
;

122 
__ex�nsi�__
 
	t__time64_t
;

124 
__time64_t
 
	ttime_t
;

126 
	gth�adlo�˚fo�ru�
;

127 
	gth�admbc�fo�ru�
;

128 
th�adlo�˚fo�ru�
 *
	t�h�adloc�fo
;

129 
th�admbc�fo�ru�
 *
	t�h�admbc�fo
;

130 
	g__lc_time_d�a
;

132 
	slo�˚fo_�ru�
 {

133 
�h�adloc�fo
 
	mloc�fo
;

134 
�h�admbc�fo
 
	mmbc�fo
;

135 } 
	t_lo��_t�ru�
,*
	t_lo��_t
;

139 
	s�gLC_ID
 {

140 
	mwL�guage
;

141 
	mwCou�ry
;

142 
	mwCodePage
;

143 } 
	tLC_ID
,*
	tLPLC_ID
;

148 
	sth�adlo�˚fo�ru�
 {

149 
	m�fcou�
;

150 
	mlc_cod�age
;

151 
	mlc_c�ϋ_�
;

152 
	mlc_h�d�
[6];

153 
LC_ID
 
	mlc_id
[6];

155 *
	mlo��
;

156 
wch�_t
 *
	mwlo��
;

157 *
	m�fcou�
;

158 *
	mw�fcou�
;

159 } 
	mlc_��g�y
[6];

160 
	mlc_�ike
;

161 
	mmb_cur_max
;

162 *
	mlc�v_��_�fcou�
;

163 *
	mlc�v_num_�fcou�
;

164 *
	mlc�v_m�_�fcou�
;

165 
lc�v
 *
	mlc�v
;

166 *
	m�y�1_�fcou�
;

167 *
	m�y�1
;

168 cڡ *
	mp�y�
;

169 cڡ *
	mp�m�
;

170 cڡ *
	mpcum�
;

171 
__lc_time_d�a
 *
	mlc_time_cu�
;

172 } 
	tth�adloc�fo
;

180 #�agm�
�ck
(
p�
)

188 
__��ibu�__
 ((
__d�imp�t__
)�
*__��ibu�__((
__cde�__
)�
_��o
();

190 
��o_t
 
__��ibu�__
((
__cde�__
)�
_�t_��o
(
_V�ue
);

191 
��o_t
 
__��ibu�__
((
__cde�__
)�
_g�_��o
(*
_V�ue
);

194 
__��ibu�__
 ((
__d�imp�t__
)�
__��ibu�__((
__cde�__
)�
__th�adid
();

196 
__��ibu�__
 ((
__d�imp�t__
)�
u���_t
 __��ibu�__((
__cde�__
)�
__th�adh�d�
();

201 sig�d 
	t�t8_t
;

202 
	tu�t8_t
;

203 
	t�t16_t
;

204 
	tu�t16_t
;

205 
	t�t32_t
;

206 
	tu�t32_t
;

207 
__ex�nsi�__
 
	t�t64_t
;

208 
__ex�nsi�__
 
	tu�t64_t
;

211 sig�d 
	t�t_�a�8_t
;

212 
	tu�t_�a�8_t
;

213 
	t�t_�a�16_t
;

214 
	tu�t_�a�16_t
;

215 
	t�t_�a�32_t
;

216 
	tu�t_�a�32_t
;

217 
__ex�nsi�__
 
	t�t_�a�64_t
;

218 
__ex�nsi�__
 
	tu�t_�a�64_t
;

224 sig�d 
	t�t_�8_t
;

225 
	tu�t_�8_t
;

226 
	t�t_�16_t
;

227 
	tu�t_�16_t
;

228 
	t�t_�32_t
;

229 
	tu�t_�32_t
;

230 
__ex�nsi�__
 
	t�t_�64_t
;

231 
__ex�nsi�__
 
	tu�t_�64_t
;

234 
__ex�nsi�__
 
	t�tmax_t
;

235 
__ex�nsi�__
 
	tu�tmax_t
;

243 
���_t
 
	tmp_�t_t
;

244 
u���_t
 
	tmp_u�t_t
;

245 
	tmp_off_t
;

253 #�agm�
�ck
(
push
,
_CRT_PACKING
)

257 
	s_h�p�fo
 {

258 *
	m_��ry
;

259 
size_t
 
	m_size
;

260 
	m_u��ag
;

261 } 
	t_HEAPINFO
;

264 

_amblksiz
;

269 *
__��ibu�__
((
__cde�__
)�
��oc
(
size_t
 
_NumOfE�m�ts
,size_�
_SizeOfE�m�ts
);

270 
__��ibu�__
((
__cde�__
)�
�
(*
_Mem�y
);

271 *
__��ibu�__
((
__cde�__
)�
m�loc
(
size_t
 
_Size
);

272 *
__��ibu�__
((
__cde�__
)�
��loc
(*
_Mem�y
,
size_t
 
_NewSize
);

273 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_���oc
(*
_Mem�y
,
size_t
 
_Cou�
,size_�
_Size
);

276 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_�ig�d_�
(*
_Mem�y
);

277 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_m�loc
(
size_t
 
_Size
,size_�
_Alignm�t
);

280 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_off�t_m�loc
(
size_t
 
_Size
,size_�
_Alignm�t
,size_�
_Off�t
);

281 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_��loc
(*
_Mem�y
,
size_t
 
_Size
,size_�
_Alignm�t
);

282 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_���oc
(*
_Mem�y
,
size_t
 
_Cou�
,size_�
_Size
,size_�
_Alignm�t
);

283 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_off�t_��loc
(*
_Mem�y
,
size_t
 
_Size
,size_�
_Alignm�t
,size_�
_Off�t
);

284 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_�ig�d_off�t_���oc
(*
_Mem�y
,
size_t
 
_Cou�
,size_�
_Size
,size_�
_Alignm�t
,size_�
_Off�t
);

296 * 
__m�gw_�ig�d_m�loc
 (
size_t
 
_Size
, size_�
_Alignm�t
);

297 
__m�gw_�ig�d_�
 (*
_Mem�y
);

298 * 
__m�gw_�ig�d_off�t_��loc
 (*
_Mem�y
, 
size_t
 
_Size
, size_�
_Alignm�t
, size_�
_Off�t
);

299 * 
__m�gw_�ig�d_��loc
 (*
_Mem�y
, 
size_t
 
_Size
, size_�
_Off�t
);

303 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_��t�ko�w
 ();

304 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_�t_m�loc_�t_max_wa�
(
_NewV�ue
);

306 
__��ibu�__
 ((
__d�imp�t__
)�*__��ibu�__((
__cde�__
)�
_ex�nd
(*
_Mem�y
,
size_t
 
_NewSize
);

307 
__��ibu�__
 ((
__d�imp�t__
)�
size_t
 __��ibu�__((
__cde�__
)�
_msize
(*
_Mem�y
);

314 
__��ibu�__
 ((
__d�imp�t__
)�
size_t
 __��ibu�__((
__cde�__
)�
_g�_sbh_th�sh�d
();

315 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_�t_sbh_th�sh�d
(
size_t
 
_NewV�ue
);

316 
__��ibu�__
 ((
__d�imp�t__
)�
��o_t
 __��ibu�__((
__cde�__
)�
_�t_amblksiz
(
size_t
 
_V�ue
);

317 
__��ibu�__
 ((
__d�imp�t__
)�
��o_t
 __��ibu�__((
__cde�__
)�
_g�_amblksiz
(
size_t
 *
_V�ue
);

318 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_h��dd
(*
_Mem�y
,
size_t
 
_Size
);

319 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_h�pchk
();

320 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_h�pm�
();

321 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_h�p�t
(
_F�l
);

322 
__��ibu�__
 ((
__d�imp�t__
)�__��ibu�__((
__cde�__
)�
_h�pw�k
(
_HEAPINFO
 *
_E�ryInfo
);

323 
__��ibu�__
 ((
__d�imp�t__
)�
size_t
 __��ibu�__((
__cde�__
)�
_h�pu�d
(size_�*
_U�d
,size_�*
_Comm�
);

324 
__��ibu�__
 ((
__d�imp�t__
)�
���_t
 __��ibu�__((
__cde�__
)�
_g�_h�p_h�d�
();

326 
__�l�e
 *
	$_M�kA�o�S
(*
_P�
,
_M�k�
) {

327 if(
_P�
) {

328 *((*)
_P�
��
_M�k�
;

329 
_P�
 = (*)_Ptr + 16;

331  
_P�
;

332 
	}
}

334 
__�l�e
 
__��ibu�__
((
__cde�__
)�
	$_�a
(*
_Mem�y
) {

335 
_M�k�
;

336 if(
_Mem�y
) {

337 
_Mem�y
 = (*)_Memory - 16;

338 
_M�k�
 = *(*)
_Mem�y
;

339 if(
_M�k�
==0xDDDD) {

340 
	`�
(
_Mem�y
);

348 
	}
}

350 #�agm�
�ck
(
p�
)

357 
	tmp_��t_t
;

364 
QCFG
(
BYTES_IN_LEN
, (1))

365 
QCFG
(
BYTES_IN_HASH
, (0))

367 
	$Q
()

368 
	$Q
(*)

369 
	$Q
(
_
)

370 
	`Q
(/)

372 
	`Q
({:#o
	}
})

373 
Q
({:#x})

375 
Q
({:#b})

376 
	$Q
( )

377 
	`Q
(\
n
)

378 
	$Q
(
maximum
 
�cursi�
 
d�th
 
ex�eded
)

379 
	`Q
(<
modu�
>)

380 
	`Q
(<
�mbda
>)

381 
	`Q
(<
li�comp
>)

382 
	`Q
(<
di�comp
>)

383 
	`Q
(<
�tcomp
>)

384 
	`Q
(<
g�ex�
>)

385 
	`Q
(<
�r�g
>)

386 
	`Q
(<
�d�
>)

387 
	`Q
(
utf
-8)

389 
	$Q
(
sim�e_�ns�
)

390 
	$Q
(
A1
)

392 
	$Q
(
A2
)

394 
	$Q
(
A3
)

396 
	$Q
(
A4
)

398 
	$Q
(
A5
)

400 
	$Q
(
A6
)

402 
	$Q
(
A7
)

404 
	$Q
(
A8
)

406 
	$Q
(
A�log
)

408 
	$Q
(
Ar�hm�icE��
)

410 
	$Q
(
Ar�hm�icE��
)

412 
	$Q
(
As��i�E��
)

414 
	$Q
(
As��i�E��
)

416 
	$Q
(
As��i�E��
)

418 
	$Q
(
A�ribu�E��
)

420 
	$Q
(
A�ribu�E��
)

422 
	$Q
(
B1
)

424 
	$Q
(
B10
)

426 
	$Q
(
B11
)

428 
	$Q
(
B12
)

430 
	$Q
(
B2
)

432 
	$Q
(
B3
)

434 
	$Q
(
B4
)

436 
	$Q
(
B5
)

438 
	$Q
(
B6
)

440 
	$Q
(
B7
)

442 
	$Q
(
B8
)

444 
	$Q
(
B9
)

446 
	$Q
(
BRAKE_MODE
)

448 
	$Q
(
Ba�Ex��i�
)

450 
	$Q
(
Ba�Ex��i�
)

452 
	$Q
(
C1
)

454 
	$Q
(
EOFE��
)

456 
	$Q
(
EOFE��
)

458 
	$Q
(
EΝsis
)

460 
	$Q
(
EΝsis
)

462 
	$Q
(
Ex��i�
)

464 
	$Q
(
Ex��i�
)

466 
	$Q
(
FORWARD
)

468 
	$Q
(
G����Ex�
)

470 
	$Q
(
G����Ex�
)

472 
	$Q
(
I2C
)

474 
	$Q
(
Imp�tE��
)

476 
	$Q
(
Imp�tE��
)

478 
	$Q
(
Ind��ti�E��
)

480 
	$Q
(
Ind��ti�E��
)

482 
	$Q
(
IndexE��
)

484 
	$Q
(
IndexE��
)

486 
	$Q
(
KeyE��
)

488 
	$Q
(
KeyE��
)

490 
	$Q
(
Key_Cڡ�ts
)

492 
	$Q
(
Keyb�rdI��ru�
)

494 
	$Q
(
Keyb�rdI��ru�
)

496 
	$Q
(
LookupE��
)

498 
	$Q
(
LookupE��
)

500 
	$Q
(
M1
)

502 
	$Q
(
M2
)

504 
	$Q
(
M3
)

506 
	$Q
(
M4
)

508 
	$Q
(
MOVETO_MODE
)

510 
	$Q
(
Mem�yE��
)

512 
	$Q
(
Mem�yE��
)

514 
	$Q
(
NO_KEY
)

516 
	$Q
(
NameE��
)

518 
	$Q
(
NameE��
)

520 
	$Q
(
N�eTy�
)

522 
	$Q
(
N�Im�em��dE��
)

524 
	$Q
(
N�Im�em��dE��
)

526 
	$Q
(
OSE��
)

528 
	$Q
(
OSE��
)

530 
	$Q
(
Ov��owE��
)

532 
	$Q
(
Ov��owE��
)

534 
	$Q
(
POWER_MODE
)

536 
	$Q
(
REVERSE
)

538 
	$Q
(
Ru�imeE��
)

540 
	$Q
(
Ru�imeE��
)

542 
	$Q
(
S1
)

544 
	$Q
(
S1
)

546 
	$Q
(
S2
)

548 
	$Q
(
S2
)

550 
	$Q
(
S3
)

552 
	$Q
(
S4
)

554 
	$Q
(
SPEED_MODE
)

556 
	$Q
(
St�I��ti�
)

558 
	$Q
(
St�I��ti�
)

560 
	$Q
(
Sy�axE��
)

562 
	$Q
(
Sy�axE��
)

564 
	$Q
(
Sy�emEx�
)

566 
	$Q
(
Sy�emEx�
)

568 
	$Q
(
TOF
)

570 
	$Q
(
Touch
)

572 
	$Q
(
Ty�E��
)

574 
	$Q
(
Ty�E��
)

576 
	$Q
(
UART
)

578 
	$Q
(
V�ueE��
)

580 
	$Q
(
V�ueE��
)

582 
	$Q
(
Z�oDivisi�E��
)

584 
	$Q
(
Z�oDivisi�E��
)

586 
	$Q
(
_0x0a_
)

588 
	$Q
(
__add__
)

590 
	$Q
(
__bo�__
)

592 
	$Q
(
__bu�d_�ass__
)

594 
	$Q
(
__��__
)

596 
	$Q
(
__�ass__
)

598 
	$Q
(
__�ass__
)

600 
	$Q
(
__�ass__
)

602 
	$Q
(
__�ass__
)

604 
	$Q
(
__�ass__
)

606 
	$Q
(
__com�ex__
)

608 
	$Q
(
__cڏ�s__
)

610 
	$Q
(
__d��em__
)

612 
	$Q
(
__d��em__
)

614 
	$Q
(
__��r__
)

616 
	$Q
(
__eq__
)

618 
	$Q
(
__eq__
)

620 
	$Q
(
__ex�__
)

622 
	$Q
(
__��t__
)

624 
	$Q
(
__ge__
)

626 
	$Q
(
__g���__
)

628 
	$Q
(
__g���__
)

630 
	$Q
(
__g��em__
)

632 
	$Q
(
__g��em__
)

634 
	$Q
(
__g��em__
)

636 
	$Q
(
__g��em__
)

638 
	$Q
(
__gt__
)

640 
	$Q
(
__hash__
)

642 
	$Q
(
__�dd__
)

644 
	$Q
(
__imp�t__
)

646 
	$Q
(
__��__
)

648 
	$Q
(
__��__
)

650 
	$Q
(
__��__
)

652 
	$Q
(
__��__
)

654 
	$Q
(
__��__
)

656 
	$Q
(
__�t__
)

658 
	$Q
(
__isub__
)

660 
	$Q
(
__��__
)

662 
	$Q
(
__�__
)

664 
	$Q
(
__�n__
)

666 
	$Q
(
__�__
)

668 
	$Q
(
__ma�__
)

670 
	$Q
(
__ma�__
)

672 
	$Q
(
__modu�__
)

674 
	$Q
(
__�me__
)

676 
	$Q
(
__�me__
)

678 
	$Q
(
__�me__
)

680 
	$Q
(
__�me__
)

682 
	$Q
(
__�me__
)

684 
	$Q
(
__�me__
)

686 
	$Q
(
__�me__
)

688 
	$Q
(
__�me__
)

690 
	$Q
(
__�me__
)

692 
	$Q
(
__�me__
)

694 
	$Q
(
__�me__
)

696 
	$Q
(
__�__
)

698 
	$Q
(
__�w__
)

700 
	$Q
(
__�w__
)

702 
	$Q
(
__�xt__
)

704 
	$Q
(
__�xt__
)

706 
	$Q
(
__�xt__
)

708 
	$Q
(
__�xt__
)

710 
	$Q
(
__qu��me__
)

712 
	$Q
(
__��_��t__
)

714 
	$Q
(
__��_��t__
)

716 
	$Q
(
__��__
)

718 
	$Q
(
__��__
)

720 
	$Q
(
__�t�em__
)

722 
	$Q
(
__�t�em__
)

724 
	$Q
(
__�r__
)

726 
	$Q
(
__sub__
)

728 
	$Q
(
__�a�back__
)

730 
	$Q
(
_b��_ݒ__c��__hash_b_b��_�o�_
)

732 
	$Q
(
_b��_ݒ__c��__hash_o_b��_�o�_
)

734 
	$Q
(
_b��_ݒ__c��__hash_x_b��_�o�_
)

736 
	$Q
(
_�_di�comp_gt_
)

738 
	$Q
(
_�_di�comp_gt_
)

740 
	$Q
(
_�_g�ex�_gt_
)

742 
	$Q
(
_�_g�ex�_gt_
)

744 
	$Q
(
_�_�mbda_gt_
)

746 
	$Q
(
_�_�mbda_gt_
)

748 
	$Q
(
_�_li�comp_gt_
)

750 
	$Q
(
_�_li�comp_gt_
)

752 
	$Q
(
_�_modu�_gt_
)

754 
	$Q
(
_�_modu�_gt_
)

756 
	$Q
(
_�_�tcomp_gt_
)

758 
	$Q
(
_�_�tcomp_gt_
)

760 
	$Q
(
_�_�r�g_gt_
)

762 
	$Q
(
_�a�_
)

764 
	$Q
(
_��_
)

766 
	$Q
(
_��_
)

768 
	$Q
(
abs
)

770 
	$Q
(
acc
)

772 
	$Q
(
acc
)

774 
	$Q
(
�l
)

776 
	$Q
(
�g�
)

778 
	$Q
(
�y
)

780 
	$Q
(
��nd
)

782 
	$Q
(
�gs
)

784 
	$Q
(
b�
)

786 
	$Q
(
bo�
)

788 
	$Q
(
bo�
)

790 
	$Q
(
bound_m�hod
)

792 
	$Q
(
b�ke
)

794 
	$Q
(
bu�t�s
)

796 
	$Q
(
bu�t�s
)

798 
	$Q
(
bu��
)

800 
	$Q
(
bu��
)

802 
	$Q
(
by�code
)

804 
	$Q
(
by�s
)

806 
	$Q
(
by�s
)

808 
	$Q
(
��ab�
)

810 
	$Q
(
chr
)

812 
	$Q
(
�assm�hod
)

814 
	$Q
(
�assm�hod
)

816 
	$Q
(
��r
)

818 
	$Q
(
��r
)

820 
	$Q
(
��rMem�y
)

822 
	$Q
(
�o�
)

824 
	$Q
(
�o�
)

826 
	$Q
(
�osu�
)

828 
	$Q
(
c���
)

830 
	$Q
(
com�ex
)

832 
	$Q
(
com�ex
)

834 
	$Q
(
c�fig
)

836 
	$Q
(
c�fig
)

838 
	$Q
(
c�y
)

840 
	$Q
(
c�y
)

842 
	$Q
(
cou�
)

844 
	$Q
(
cou�
)

846 
	$Q
(
devi�s
)

848 
	$Q
(
devi�s
)

850 
	$Q
(
di�
)

852 
	$Q
(
di�
)

854 
	$Q
(
di�_v�w
)

856 
	$Q
(
d�
)

858 
	$Q
(
d�e�i�
)

860 
	$Q
(
d�e�i�
)

862 
	$Q
(
di�b�
)

864 
	$Q
(
divmod
)

866 
	$Q
(
�ab�
)

868 
	$Q
(
�d
)

870 
	$Q
(
�dsw�h
)

872 
	$Q
(
��o
)

874 
	$Q
(
ev�
)

876 
	$Q
(
exec
)

878 
	$Q
(
ex�
)

880 
	$Q
(
ex�nd
)

882 
	$Q
(
f�d
)

884 
	$Q
()

886 
	$Q
()

888 
	$Q
(
f�m�
)

890 
	$Q
(
�om_by�s
)

892 
	$Q
(
fun�i�
)

894 
	$Q
(
fun�i�
)

896 
	$Q
(
fun�i�
)

898 
	$Q
(
fun�i�
)

900 
	$Q
(
fun�i�
)

902 
	$Q
(
fun�i�
)

904 
	$Q
(
fun�i�
)

906 
	$Q
(
gc
)

908 
	$Q
(
gc
)

910 
	$Q
(
g����
)

912 
	$Q
(
g����
)

914 
	$Q
(
g�
)

916 
	$Q
(
g�
)

918 
	$Q
(
g�
)

920 
	$Q
(
g�
)

922 
	$Q
(
g�Dig��
)

924 
	$Q
(
g�Key
)

926 
	$Q
(
g�Mem�y
)

928 
	$Q
(
g�Pos�i�
)

930 
	$Q
(
g�Pow�
)

932 
	$Q
(
g�S�ed
)

934 
	$Q
(
g�Time
)

936 
	$Q
(
g�V�ueExt
)

938 
	$Q
(
g���
)

940 
	$Q
(
glob�s
)

942 
	$Q
(
ha��r
)

944 
	$Q
(
hash
)

946 
	$Q
(
hex
)

948 
	$Q
(
id
)

950 
	$Q
(
id
)

952 
	$Q
(
imag
)

954 
	$Q
(
�dex
)

956 
	$Q
(
�dex
)

958 
	$Q
(
�dex
)

960 
	$Q
(
���
)

962 
	$Q
()

964 
	$Q
()

966 
	$Q
(
i��ha
)

968 
	$Q
(
isdig�
)

970 
	$Q
(
i��b�d
)

972 
	$Q
(
is����
)

974 
	$Q
(
i�ow�
)

976 
	$Q
(
is�a�
)

978 
	$Q
(
issub�ass
)

980 
	$Q
(
isu��
)

982 
	$Q
(
�ems
)

984 
	$Q
(
��
)

986 
	$Q
(
����
)

988 
	$Q
(
����
)

990 
	$Q
(
����
)

992 
	$Q
(
����
)

994 
	$Q
(
jo�
)

996 
	$Q
(
key
)

998 
	$Q
(
keys
)

1000 
	$Q
(
keys
)

1002 
	$Q
(
keys
)

1004 
	$Q
(
ki
)

1006 
	$Q
(
ki
)

1008 
	$Q
(
kp
)

1010 
	$Q
(
kp
)

1012 
	$Q
(
�n
)

1014 
	$Q
(
li�
)

1016 
	$Q
(
li�
)

1018 
	$Q
(
l��e
)

1020 
	$Q
(
l��e
)

1022 
	$Q
(
lo�ls
)

1024 
	$Q
(
low�
)

1026 
	$Q
(
l�r�
)

1028 
	$Q
(
m�
)

1030 
	$Q
(
m�
)

1032 
	$Q
(
mem_�loc
)

1034 
	$Q
(
mem_�
)

1036 
	$Q
(
mem_off�t
)

1038 
	$Q
(
mem_off�t
)

1040 
	$Q
(
mem�y
)

1042 
	$Q
(
mem�y
)

1044 
	$Q
(
mi��yth�
)

1046 
	$Q
(
mode
)

1048 
	$Q
(
mode
)

1050 
	$Q
(
mode
)

1052 
	$Q
(
modu�
)

1054 
	$Q
(
mڙ�
)

1056 
	$Q
(
mڙ�
)

1058 
	$Q
(
mڙ�_keys
)

1060 
	$Q
(
m��
)

1062 
	$Q
(
m��
)

1064 
	$Q
(
�xt
)

1066 
	$Q
(
obje�
)

1068 
	$Q
(
obje�
)

1070 
	$Q
(
o�
)

1072 
	$Q
(
�d
)

1074 
	$Q
(
p�
)

1076 
	$Q
(
p�
)

1078 
	$Q
(
pݙem
)

1080 
	$Q
(
p�t
)

1082 
	$Q
(
p�t
)

1084 
	$Q
(
p�t
)

1086 
	$Q
(
pos�i�
)

1088 
	$Q
(
pow
)

1090 
	$Q
(
��t
)

1092 
	$Q
(
�nge
)

1094 
	$Q
(
�nge
)

1096 
	$Q
(
�nge
)

1098 
	$Q
(
��
)

1100 
	$Q
(
�move
)

1102 
	$Q
(
��a�
)

1104 
	$Q
(
��
)

1106 
	$Q
(
�v��
)

1108 
	$Q
(
�v��
)

1110 
	$Q
(
rf�d
)

1112 
	$Q
(
r�dex
)

1114 
	$Q
(
round
)

1116 
	$Q
(
r�l�
)

1118 
	$Q
(
r�r�
)

1120 
	$Q
(
�nd
)

1122 
	$Q
(
�nd
)

1124 
	$Q
(
�ns�
)

1126 
	$Q
(
�ns�
)

1128 
	$Q
(
�p
)

1130 
	$Q
(
�rvo
)

1132 
	$Q
(
�rvo
)

1134 
	$Q
(
�t
)

1136 
	$Q
(
�t
)

1138 
	$Q
(
�tMem�y
)

1140 
	$Q
(
�tText
)

1142 
	$Q
(
���r
)

1144 
	$Q
(
�tde�u�
)

1146 
	$Q
(
s�t
)

1148 
	$Q
(
s܋d
)

1150 
	$Q
(
��d
)

1152 
	$Q
(
��d
)

1154 
	$Q
(
�l�
)

1156 
	$Q
(
��tsw�h
)

1158 
	$Q
(
��icm�hod
)

1160 
	$Q
(
��icm�hod
)

1162 
	$Q
(
�r
)

1164 
	$Q
(
�r
)

1166 
	$Q
(
�r�
)

1168 
	$Q
(
sum
)

1170 
	$Q
(
su�r
)

1172 
	$Q
(
su�r
)

1174 
	$Q
(
su�r
)

1176 
	$Q
(
throw
)

1178 
	$Q
(
throw
)

1180 
	$Q
(
ticks
)

1182 
	$Q
(
ticks
)

1184 
	$Q
(
time
)

1186 
	$Q
(
time
)

1188 
	$Q
(
to_by�s
)

1190 
	$Q
(
tu�e
)

1192 
	$Q
(
tu�e
)

1194 
	$Q
(
ty�
)

1196 
	$Q
(
ty�
)

1198 
	$Q
(
ty�
)

1200 
	$Q
(
ty�
)

1202 
	$Q
(
upd�e
)

1204 
	$Q
(
u��
)

1206 
	$Q
(
v�ue
)

1208 
	$Q
(
v�ues
)

1210 
	$Q
(
wa�
)

1212 
	$Q
(
z�
)

1214 
	`Q
(
z�
)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\root_pointers.h

3 
	gdevi�s_���li�d
;

4 
	gmem�y_���li�d
;

5 
	gtime_���li�d
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\extmod\modplatform.h

26 #i�de�
MICROPY_INCLUDED_MODPLATFORM_H


27 
	#MICROPY_INCLUDED_MODPLATFORM_H


	)

29 
	~"py/misc.h
"

30 
	~"py/mpc�fig.h
"

38 #i�
def�ed
(
__ARM_ARCH
)

39 
	#MICROPY_PLATFORM_ARCH
 "�m"

	)

40 #�i�
def�ed
(
__x86_64__
�|| def�ed(
_M_X64
)

41 
	#MICROPY_PLATFORM_ARCH
 "x86_64"

	)

42 #�i�
def�ed
(
__i386__
�|| def�ed(
_M_IX86
)

43 
	#MICROPY_PLATFORM_ARCH
 "x86"

	)

44 #�i�
def�ed
(
__x�n�__
)

45 
	#MICROPY_PLATFORM_ARCH
 "x�n�"

	)

46 #�i�
def�ed
(
__riscv
)

47 
	#MICROPY_PLATFORM_ARCH
 "riscv"

	)

49 
	#MICROPY_PLATFORM_ARCH
 ""

	)

52 #i�
def�ed
(
__GNUC__
)

53 
	#MICROPY_PLATFORM_COMPILER
 \

55 
	`MP_STRINGIFY
(
__GNUC__
) "." \

56 
	`MP_STRINGIFY
(
__GNUC_MINOR__
) "." \

57 
	`MP_STRINGIFY
(
__GNUC_PATCHLEVEL__
)

	)

58 #�i�
def�ed
(
__ARMCC_VERSION
)

59 
	#MICROPY_PLATFORM_COMPILER
 \

61 
	`MP_STRINGIFY
((
__ARMCC_VERSION
 / 1000000)) "." \

62 
	`MP_STRINGIFY
((
__ARMCC_VERSION
 / 10000 % 100)) "." \

63 
	`MP_STRINGIFY
((
__ARMCC_VERSION
 % 10000))

	)

64 #�i�
def�ed
(
_MSC_VER
)

65 #i�
def�ed
(
_WIN64
)

66 
	#MICROPY_PLATFORM_COMPILER_BITS
 "64 b�"

	)

67 #�i�
def�ed
(
_M_IX86
)

68 
	#MICROPY_PLATFORM_COMPILER_BITS
 "32 b�"

	)

70 
	#MICROPY_PLATFORM_COMPILER_BITS
 ""

	)

72 
	#MICROPY_PLATFORM_COMPILER
 \

73 "MSC v." 
	`MP_STRINGIFY
(
_MSC_VER
�" " 
MICROPY_PLATFORM_COMPILER_BITS


	)

75 
	#MICROPY_PLATFORM_COMPILER
 ""

	)

78 #i�
def�ed
(
__GLIBC__
)

79 
	#MICROPY_PLATFORM_LIBC_LIB
 "glibc"

	)

80 
	#MICROPY_PLATFORM_LIBC_VER
 \

81 
	`MP_STRINGIFY
(
__GLIBC__
) "." \

82 
	`MP_STRINGIFY
(
__GLIBC_MINOR__
)

	)

83 #�i�
def�ed
(
__NEWLIB__
)

84 
	#MICROPY_PLATFORM_LIBC_LIB
 "�wlib"

	)

85 
	#MICROPY_PLATFORM_LIBC_VER
 
_NEWLIB_VERSION


	)

86 #�i�
def�ed
(
_PICOLIBC__
)

87 
	#MICROPY_PLATFORM_LIBC_LIB
 "pic�ibc"

	)

88 
	#MICROPY_PLATFORM_LIBC_VER
 
_PICOLIBC_VERSION


	)

90 
	#MICROPY_PLATFORM_LIBC_LIB
 ""

	)

91 
	#MICROPY_PLATFORM_LIBC_VER
 ""

	)

94 #i�
def�ed
(
__l�ux
)

95 
	#MICROPY_PLATFORM_SYSTEM
 "L�ux"

	)

96 #�i�
def�ed
(
__unix__
)

97 
	#MICROPY_PLATFORM_SYSTEM
 "Unix"

	)

98 #�i�
def�ed
(
__CYGWIN__
)

99 
	#MICROPY_PLATFORM_SYSTEM
 "Cygw�"

	)

100 #�i�
def�ed
(
_WIN32
)

101 
	#MICROPY_PLATFORM_SYSTEM
 "W�dows"

	)

103 
	#MICROPY_PLATFORM_SYSTEM
 "Mi�oPyth�"

	)

106 #i�de�
MICROPY_PLATFORM_VERSION


107 
	#MICROPY_PLATFORM_VERSION
 ""

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\moduledefs.h

3 
cڡ 
_mp_obj_modu�_t
 
mp_modu�___ma�__
;

4 #unde�
MODULE_DEF___MAIN__


5 
	#MODULE_DEF___MAIN__
 { 
	`MP_ROM_QSTR
(
MP_QSTR___ma�__
), 
	`MP_ROM_PTR
(&
mp_modu�___ma�__
�},

	)

7 
cڡ 
_mp_obj_modu�_t
 
mp_modu�_bu�t�s
;

8 #unde�
MODULE_DEF_BUILTINS


9 
	#MODULE_DEF_BUILTINS
 { 
	`MP_ROM_QSTR
(
MP_QSTR_bu�t�s
), 
	`MP_ROM_PTR
(&
mp_modu�_bu�t�s
�},

	)

11 
cڡ 
_mp_obj_modu�_t
 
devi�s_modu�
;

12 #unde�
MODULE_DEF_DEVICES


13 
	#MODULE_DEF_DEVICES
 { 
	`MP_ROM_QSTR
(
MP_QSTR_devi�s
), 
	`MP_ROM_PTR
(&
devi�s_modu�
�},

	)

15 
cڡ 
_mp_obj_modu�_t
 
mp_modu�_gc
;

16 #unde�
MODULE_DEF_GC


17 
	#MODULE_DEF_GC
 { 
	`MP_ROM_QSTR
(
MP_QSTR_gc
), 
	`MP_ROM_PTR
(&
mp_modu�_gc
�},

	)

19 
cڡ 
_mp_obj_modu�_t
 
mem�y_modu�
;

20 #unde�
MODULE_DEF_MEMORY


21 
	#MODULE_DEF_MEMORY
 { 
	`MP_ROM_QSTR
(
MP_QSTR_mem�y
), 
	`MP_ROM_PTR
(&
mem�y_modu�
�},

	)

23 
cڡ 
_mp_obj_modu�_t
 
mڙ�_modu�
;

24 #unde�
MODULE_DEF_MONITOR


25 
	#MODULE_DEF_MONITOR
 { 
	`MP_ROM_QSTR
(
MP_QSTR_mڙ�
), 
	`MP_ROM_PTR
(&
mڙ�_modu�
�},

	)

27 
cڡ 
_mp_obj_modu�_t
 
time_modu�
;

28 #unde�
MODULE_DEF_TIME


29 
	#MODULE_DEF_TIME
 { 
	`MP_ROM_QSTR
(
MP_QSTR_time
), 
	`MP_ROM_PTR
(&
time_modu�
�},

	)

32 
	#MICROPY_REGISTERED_MODULES
 \

33 
MODULE_DEF_BUILTINS
 \

34 
MODULE_DEF_DEVICES
 \

35 
MODULE_DEF_GC
 \

36 
MODULE_DEF_MEMORY
 \

37 
MODULE_DEF_MONITOR
 \

38 
MODULE_DEF_TIME
 \

39 
MODULE_DEF___MAIN__
 \

41 

	)

42 
	#MICROPY_REGISTERED_EXTENSIBLE_MODULES
 \

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\mpversion.h

2 
	#MICROPY_GIT_TAG
 "v1.24.0-�ev�w.216.gcc25�7db"

	)

3 
	#MICROPY_GIT_HASH
 "cc25�7db"

	)

4 
	#MICROPY_BUILD_DATE
 "2024-09-16"

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\qstrdefs.generated.h

3 
QDEF0
(
MP_QSTRnu�
, 0, 0, "")

4 
QDEF0
(
MP_QSTR_
, 5381, 0, "")

5 
QDEF0
(
MP_QSTR___d�__
, 36730, 7, "__dir__")

6 
QDEF0
(
MP_QSTR__0x0a_
, 46511, 1, "\x0a")

7 
QDEF0
(
MP_QSTR__�a�_
, 46469, 1, " ")

8 
QDEF0
(
MP_QSTR__��_
, 46479, 1, "*")

9 
QDEF0
(
MP_QSTR__�ash_
, 46474, 1, "/")

10 
QDEF0
(
MP_QSTR__�_modu�_gt_
, 38077, 8, "<module>")

11 
QDEF0
(
MP_QSTR__
, 46586, 1, "_")

12 
QDEF0
(
MP_QSTR___��__
, 63911, 8, "__call__")

13 
QDEF0
(
MP_QSTR___�ass__
, 50475, 9, "__class__")

14 
QDEF0
(
MP_QSTR___d��em__
, 13821, 11, "__delitem__")

15 
QDEF0
(
MP_QSTR___��r__
, 47725, 9, "__enter__")

16 
QDEF0
(
MP_QSTR___ex�__
, 63557, 8, "__exit__")

17 
QDEF0
(
MP_QSTR___g���__
, 63552, 11, "__getattr__")

18 
QDEF0
(
MP_QSTR___g��em__
, 14630, 11, "__getitem__")

19 
QDEF0
(
MP_QSTR___hash__
, 51447, 8, "__hash__")

20 
QDEF0
(
MP_QSTR___��__
, 42335, 8, "__init__")

21 
QDEF0
(
MP_QSTR___�t__
, 6934, 7, "__int__")

22 
QDEF0
(
MP_QSTR___��__
, 13007, 8, "__iter__")

23 
QDEF0
(
MP_QSTR___�n__
, 45282, 7, "__len__")

24 
QDEF0
(
MP_QSTR___ma�__
, 5006, 8, "__main__")

25 
QDEF0
(
MP_QSTR___modu�__
, 12543, 10, "__module__")

26 
QDEF0
(
MP_QSTR___�me__
, 14562, 8, "__name__")

27 
QDEF0
(
MP_QSTR___�w__
, 5497, 7, "__new__")

28 
QDEF0
(
MP_QSTR___�xt__
, 29442, 8, "__next__")

29 
QDEF0
(
MP_QSTR___qu��me__
, 107, 12, "__qualname__")

30 
QDEF0
(
MP_QSTR___��__
, 2832, 8, "__repr__")

31 
QDEF0
(
MP_QSTR___�t�em__
, 15922, 11, "__setitem__")

32 
QDEF0
(
MP_QSTR___�r__
, 52688, 7, "__str__")

33 
QDEF0
(
MP_QSTR_Ar�hm�icE��
, 35885, 15, "ArithmeticError")

34 
QDEF0
(
MP_QSTR_As��i�E��
, 23191, 14, "AssertionError")

35 
QDEF0
(
MP_QSTR_A�ribu�E��
, 56865, 14, "AttributeError")

36 
QDEF0
(
MP_QSTR_Ba�Ex��i�
, 37383, 13, "BaseException")

37 
QDEF0
(
MP_QSTR_EOFE��
, 49041, 8, "EOFError")

38 
QDEF0
(
MP_QSTR_EΝsis
, 57584, 8, "Ellipsis")

39 
QDEF0
(
MP_QSTR_Ex��i�
, 10738, 9, "Exception")

40 
QDEF0
(
MP_QSTR_G����Ex�
, 25110, 13, "GeneratorExit")

41 
QDEF0
(
MP_QSTR_Imp�tE��
, 39968, 11, "ImportError")

42 
QDEF0
(
MP_QSTR_Ind��ti�E��
, 8284, 16, "IndentationError")

43 
QDEF0
(
MP_QSTR_IndexE��
, 44419, 10, "IndexError")

44 
QDEF0
(
MP_QSTR_KeyE��
, 234, 8, "KeyError")

45 
QDEF0
(
MP_QSTR_Keyb�rdI��ru�
, 58031, 17, "KeyboardInterrupt")

46 
QDEF0
(
MP_QSTR_LookupE��
, 27135, 11, "LookupError")

47 
QDEF0
(
MP_QSTR_Mem�yE��
, 33756, 11, "MemoryError")

48 
QDEF0
(
MP_QSTR_NameE��
, 11706, 9, "NameError")

49 
QDEF0
(
MP_QSTR_N�eTy�
, 26647, 8, "NoneType")

50 
QDEF0
(
MP_QSTR_N�Im�em��dE��
, 39110, 19, "NotImplementedError")

51 
QDEF0
(
MP_QSTR_OSE��
, 26017, 7, "OSError")

52 
QDEF0
(
MP_QSTR_Ov��owE��
, 57729, 13, "OverflowError")

53 
QDEF0
(
MP_QSTR_Ru�imeE��
, 61793, 12, "RuntimeError")

54 
QDEF0
(
MP_QSTR_St�I��ti�
, 7402, 13, "StopIteration")

55 
QDEF0
(
MP_QSTR_Sy�axE��
, 36756, 11, "SyntaxError")

56 
QDEF0
(
MP_QSTR_Sy�emEx�
, 65312, 10, "SystemExit")

57 
QDEF0
(
MP_QSTR_Ty�E��
, 38437, 9, "TypeError")

58 
QDEF0
(
MP_QSTR_V�ueE��
, 34710, 10, "ValueError")

59 
QDEF0
(
MP_QSTR_Z�oDivisi�E��
, 10166, 17, "ZeroDivisionError")

60 
QDEF0
(
MP_QSTR_abs
, 12949, 3, "abs")

61 
QDEF0
(
MP_QSTR_�l
, 13124, 3, "all")

62 
QDEF0
(
MP_QSTR_�y
, 13075, 3, "any")

63 
QDEF0
(
MP_QSTR_��nd
, 38763, 6, "append")

64 
QDEF0
(
MP_QSTR_�gs
, 50882, 4, "args")

65 
QDEF0
(
MP_QSTR_bo�
, 15595, 4, "bool")

66 
QDEF0
(
MP_QSTR_bu�t�s
, 12791, 8, "builtins")

67 
QDEF0
(
MP_QSTR_by���y
, 41846, 9, "bytearray")

68 
QDEF0
(
MP_QSTR_by�code
, 32034, 8, "bytecode")

69 
QDEF0
(
MP_QSTR_by�s
, 45660, 5, "bytes")

70 
QDEF0
(
MP_QSTR_��ab�
, 28685, 8, "callable")

71 
QDEF0
(
MP_QSTR_chr
, 19676, 3, "chr")

72 
QDEF0
(
MP_QSTR_�assm�hod
, 36020, 11, "classmethod")

73 
QDEF0
(
MP_QSTR_��r
, 41084, 5, "clear")

74 
QDEF0
(
MP_QSTR_�o�
, 26419, 5, "close")

75 
QDEF0
(
MP_QSTR_cڡ
, 65472, 5, "const")

76 
QDEF0
(
MP_QSTR_c�y
, 56288, 4, "copy")

77 
QDEF0
(
MP_QSTR_cou�
, 19878, 5, "count")

78 
QDEF0
(
MP_QSTR_di�
, 64575, 4, "dict")

79 
QDEF0
(
MP_QSTR_d�
, 7930, 3, "dir")

80 
QDEF0
(
MP_QSTR_divmod
, 1208, 6, "divmod")

81 
QDEF0
(
MP_QSTR_�d
, 8970, 3, "end")

82 
QDEF0
(
MP_QSTR_�dsw�h
, 41755, 8, "endswith")

83 
QDEF0
(
MP_QSTR_ev�
, 42651, 4, "eval")

84 
QDEF0
(
MP_QSTR_exec
, 49182, 4, "exec")

85 
QDEF0
(
MP_QSTR_ex�nd
, 59491, 6, "extend")

86 
QDEF0
(
MP_QSTR_f�d
, 13312, 4, "find")

87 
QDEF0
(
MP_QSTR_f�m�
, 13094, 6, "format")

88 
QDEF0
(
MP_QSTR_�om_by�s
, 29749, 10, "from_bytes")

89 
QDEF0
(
MP_QSTR_g�
, 15155, 3, "get")

90 
QDEF0
(
MP_QSTR_g���
, 6080, 7, "getattr")

91 
QDEF0
(
MP_QSTR_glob�s
, 18845, 7, "globals")

92 
QDEF0
(
MP_QSTR_ha��r
, 45196, 7, "hasattr")

93 
QDEF0
(
MP_QSTR_hash
, 28855, 4, "hash")

94 
QDEF0
(
MP_QSTR_id
, 28456, 2, "id")

95 
QDEF0
(
MP_QSTR_�dex
, 10363, 5, "index")

96 
QDEF0
(
MP_QSTR_���
, 21522, 6, "insert")

97 
QDEF0
(
MP_QSTR_�t
, 21270, 3, "int")

98 
QDEF0
(
MP_QSTR_i��ha
, 14315, 7, "isalpha")

99 
QDEF0
(
MP_QSTR_isdig�
, 39592, 7, "isdigit")

100 
QDEF0
(
MP_QSTR_is����
, 48822, 10, "isinstance")

101 
QDEF0
(
MP_QSTR_i�ow�
, 33020, 7, "islower")

102 
QDEF0
(
MP_QSTR_is�a�
, 63579, 7, "isspace")

103 
QDEF0
(
MP_QSTR_issub�ass
, 32693, 10, "issubclass")

104 
QDEF0
(
MP_QSTR_isu��
, 42973, 7, "isupper")

105 
QDEF0
(
MP_QSTR_�ems
, 21475, 5, "items")

106 
QDEF0
(
MP_QSTR_��
, 8591, 4, "iter")

107 
QDEF0
(
MP_QSTR_jo�
, 23719, 4, "join")

108 
QDEF0
(
MP_QSTR_key
, 27954, 3, "key")

109 
QDEF0
(
MP_QSTR_keys
, 4865, 4, "keys")

110 
QDEF0
(
MP_QSTR_�n
, 16482, 3, "len")

111 
QDEF0
(
MP_QSTR_li�
, 7463, 4, "list")

112 
QDEF0
(
MP_QSTR_l��e
, 27273, 6, "little")

113 
QDEF0
(
MP_QSTR_lo�ls
, 41275, 6, "locals")

114 
QDEF0
(
MP_QSTR_low�
, 52166, 5, "lower")

115 
QDEF0
(
MP_QSTR_l�r�
, 47589, 6, "lstrip")

116 
QDEF0
(
MP_QSTR_ma�
, 47054, 4, "main")

117 
QDEF0
(
MP_QSTR_m�
, 17337, 3, "map")

118 
QDEF0
(
MP_QSTR_mi��yth�
, 31755, 11, "micropython")

119 
QDEF0
(
MP_QSTR_�xt
, 34882, 4, "next")

120 
QDEF0
(
MP_QSTR_obje�
, 36240, 6, "object")

121 
QDEF0
(
MP_QSTR_ݒ
, 15057, 4, "open")

122 
QDEF0
(
MP_QSTR_�d
, 24092, 3, "ord")

123 
QDEF0
(
MP_QSTR_p�
, 29482, 3, "pop")

124 
QDEF0
(
MP_QSTR_pݙem
, 11455, 7, "popitem")

125 
QDEF0
(
MP_QSTR_pow
, 29485, 3, "pow")

126 
QDEF0
(
MP_QSTR_��t
, 50772, 5, "print")

127 
QDEF0
(
MP_QSTR_�nge
, 24090, 5, "range")

128 
QDEF0
(
MP_QSTR_�ad
, 63927, 4, "read")

129 
QDEF0
(
MP_QSTR_�ad�to
, 48971, 8, "readinto")

130 
QDEF0
(
MP_QSTR_�adl�e
, 6649, 8, "readline")

131 
QDEF0
(
MP_QSTR_�move
, 35427, 6, "remove")

132 
QDEF0
(
MP_QSTR_��a�
, 9545, 7, "replace")

133 
QDEF0
(
MP_QSTR_��
, 63440, 4, "repr")

134 
QDEF0
(
MP_QSTR_�v��
, 10789, 7, "reverse")

135 
QDEF0
(
MP_QSTR_rf�d
, 40146, 5, "rfind")

136 
QDEF0
(
MP_QSTR_r�dex
, 11241, 6, "rindex")

137 
QDEF0
(
MP_QSTR_round
, 9703, 5, "round")

138 
QDEF0
(
MP_QSTR_r�l�
, 165, 6, "rsplit")

139 
QDEF0
(
MP_QSTR_r�r�
, 38203, 6, "rstrip")

140 
QDEF0
(
MP_QSTR_�lf
, 30585, 4, "self")

141 
QDEF0
(
MP_QSTR_�nd
, 30393, 4, "send")

142 
QDEF0
(
MP_QSTR_�p
, 36643, 3, "sep")

143 
QDEF0
(
MP_QSTR_�t
, 36647, 3, "set")

144 
QDEF0
(
MP_QSTR_���r
, 43220, 7, "setattr")

145 
QDEF0
(
MP_QSTR_�tde�u�
, 41836, 10, "setdefault")

146 
QDEF0
(
MP_QSTR_s�t
, 40383, 4, "sort")

147 
QDEF0
(
MP_QSTR_s܋d
, 5470, 6, "sorted")

148 
QDEF0
(
MP_QSTR_�l�
, 13239, 5, "split")

149 
QDEF0
(
MP_QSTR_��t
, 61317, 5, "start")

150 
QDEF0
(
MP_QSTR_��tsw�h
, 59508, 10, "startswith")

151 
QDEF0
(
MP_QSTR_��icm�hod
, 44898, 12, "staticmethod")

152 
QDEF0
(
MP_QSTR_��
, 13911, 4, "step")

153 
QDEF0
(
MP_QSTR_��
, 13981, 4, "stop")

154 
QDEF0
(
MP_QSTR_�r
, 36176, 3, "str")

155 
QDEF0
(
MP_QSTR_�r�
, 7721, 5, "strip")

156 
QDEF0
(
MP_QSTR_sum
, 36142, 3, "sum")

157 
QDEF0
(
MP_QSTR_su�r
, 45764, 5, "super")

158 
QDEF0
(
MP_QSTR_throw
, 17587, 5, "throw")

159 
QDEF0
(
MP_QSTR_to_by�s
, 16088, 8, "to_bytes")

160 
QDEF0
(
MP_QSTR_tu�e
, 16893, 5, "tuple")

161 
QDEF0
(
MP_QSTR_ty�
, 32669, 4, "type")

162 
QDEF0
(
MP_QSTR_upd�e
, 30388, 6, "update")

163 
QDEF0
(
MP_QSTR_u��
, 37927, 5, "upper")

164 
QDEF0
(
MP_QSTR_utf_hyph�_8
, 33463, 5, "utf-8")

165 
QDEF0
(
MP_QSTR_v�ue
, 13390, 5, "value")

166 
QDEF0
(
MP_QSTR_v�ues
, 48765, 6, "values")

167 
QDEF0
(
MP_QSTR_wr�e
, 43160, 5, "write")

168 
QDEF0
(
MP_QSTR_z�
, 44262, 3, "zip")

169 
QDEF0
(
MP_QSTR__�_di�comp_gt_
, 36300, 10, "<dictcomp>")

170 
QDEF0
(
MP_QSTR__�_g�ex�_gt_
, 27188, 9, "<genexpr>")

171 
QDEF0
(
MP_QSTR__�_�mbda_gt_
, 35968, 8, "<lambda>")

172 
QDEF0
(
MP_QSTR__�_li�comp_gt_
, 5588, 10, "<listcomp>")

173 
QDEF0
(
MP_QSTR__�_�tcomp_gt_
, 20820, 9, "<setcomp>")

174 
QDEF1
(
MP_QSTR__�_�d�_gt_
, 25571, 7, "<stdin>")

175 
QDEF1
(
MP_QSTR__�_�r�g_gt_
, 21330, 8, "<string>")

176 
QDEF1
(
MP_QSTR_A1
, 29269, 2, "A1")

177 
QDEF1
(
MP_QSTR_A2
, 29270, 2, "A2")

178 
QDEF1
(
MP_QSTR_A3
, 29271, 2, "A3")

179 
QDEF1
(
MP_QSTR_A4
, 29264, 2, "A4")

180 
QDEF1
(
MP_QSTR_A5
, 29265, 2, "A5")

181 
QDEF1
(
MP_QSTR_A6
, 29266, 2, "A6")

182 
QDEF1
(
MP_QSTR_A7
, 29267, 2, "A7")

183 
QDEF1
(
MP_QSTR_A8
, 29276, 2, "A8")

184 
QDEF1
(
MP_QSTR_A�log
, 60111, 6, "Analog")

185 
QDEF1
(
MP_QSTR_B1
, 29430, 2, "B1")

186 
QDEF1
(
MP_QSTR_B10
, 53638, 3, "B10")

187 
QDEF1
(
MP_QSTR_B11
, 53639, 3, "B11")

188 
QDEF1
(
MP_QSTR_B12
, 53636, 3, "B12")

189 
QDEF1
(
MP_QSTR_B2
, 29429, 2, "B2")

190 
QDEF1
(
MP_QSTR_B3
, 29428, 2, "B3")

191 
QDEF1
(
MP_QSTR_B4
, 29427, 2, "B4")

192 
QDEF1
(
MP_QSTR_B5
, 29426, 2, "B5")

193 
QDEF1
(
MP_QSTR_B6
, 29425, 2, "B6")

194 
QDEF1
(
MP_QSTR_B7
, 29424, 2, "B7")

195 
QDEF1
(
MP_QSTR_B8
, 29439, 2, "B8")

196 
QDEF1
(
MP_QSTR_B9
, 29438, 2, "B9")

197 
QDEF1
(
MP_QSTR_BRAKE_MODE
, 4518, 10, "BRAKE_MODE")

198 
QDEF1
(
MP_QSTR_C1
, 29335, 2, "C1")

199 
QDEF1
(
MP_QSTR_FORWARD
, 64894, 7, "FORWARD")

200 
QDEF1
(
MP_QSTR_I2C
, 57181, 3, "I2C")

201 
QDEF1
(
MP_QSTR_Key_Cڡ�ts
, 48256, 13, "Key_Constants")

202 
QDEF1
(
MP_QSTR_M1
, 29401, 2, "M1")

203 
QDEF1
(
MP_QSTR_M2
, 29402, 2, "M2")

204 
QDEF1
(
MP_QSTR_M3
, 29403, 2, "M3")

205 
QDEF1
(
MP_QSTR_M4
, 29404, 2, "M4")

206 
QDEF1
(
MP_QSTR_MOVETO_MODE
, 9587, 11, "MOVETO_MODE")

207 
QDEF1
(
MP_QSTR_NO_KEY
, 58252, 6, "NO_KEY")

208 
QDEF1
(
MP_QSTR_POWER_MODE
, 31046, 10, "POWER_MODE")

209 
QDEF1
(
MP_QSTR_REVERSE
, 23941, 7, "REVERSE")

210 
QDEF1
(
MP_QSTR_S1
, 29831, 2, "S1")

211 
QDEF1
(
MP_QSTR_S2
, 29828, 2, "S2")

212 
QDEF1
(
MP_QSTR_S3
, 29829, 2, "S3")

213 
QDEF1
(
MP_QSTR_S4
, 29826, 2, "S4")

214 
QDEF1
(
MP_QSTR_SPEED_MODE
, 5118, 10, "SPEED_MODE")

215 
QDEF1
(
MP_QSTR_TOF
, 88, 3, "TOF")

216 
QDEF1
(
MP_QSTR_Touch
, 18080, 5, "Touch")

217 
QDEF1
(
MP_QSTR_UART
, 6583, 4, "UART")

218 
QDEF0
(
MP_QSTR___add__
, 33476, 7, "__add__")

219 
QDEF0
(
MP_QSTR___bo�__
, 25899, 8, "__bool__")

220 
QDEF1
(
MP_QSTR___bu�d_�ass__
, 34882, 15, "__build_class__")

221 
QDEF0
(
MP_QSTR___com�ex__
, 58053, 11, "__complex__")

222 
QDEF0
(
MP_QSTR___cڏ�s__
, 24518, 12, "__contains__")

223 
QDEF0
(
MP_QSTR___eq__
, 15985, 6, "__eq__")

224 
QDEF0
(
MP_QSTR___��t__
, 28725, 9, "__float__")

225 
QDEF0
(
MP_QSTR___ge__
, 18087, 6, "__ge__")

226 
QDEF0
(
MP_QSTR___gt__
, 33462, 6, "__gt__")

227 
QDEF0
(
MP_QSTR___�dd__
, 19053, 8, "__iadd__")

228 
QDEF1
(
MP_QSTR___imp�t__
, 15928, 10, "__import__")

229 
QDEF0
(
MP_QSTR___isub__
, 30728, 8, "__isub__")

230 
QDEF0
(
MP_QSTR___�__
, 5068, 6, "__le__")

231 
QDEF0
(
MP_QSTR___�__
, 26717, 6, "__lt__")

232 
QDEF0
(
MP_QSTR___�__
, 2830, 6, "__ne__")

233 
QDEF1
(
MP_QSTR___��_��t__
, 47872, 14, "__repl_print__")

234 
QDEF0
(
MP_QSTR___sub__
, 2337, 7, "__sub__")

235 
QDEF1
(
MP_QSTR___�a�back__
, 53071, 13, "__traceback__")

236 
QDEF1
(
MP_QSTR_acc
, 13156, 3, "acc")

237 
QDEF1
(
MP_QSTR_�g�
, 11396, 5, "angle")

238 
QDEF1
(
MP_QSTR_b�
, 18656, 3, "bin")

239 
QDEF1
(
MP_QSTR_bound_m�hod
, 41623, 12, "bound_method")

240 
QDEF1
(
MP_QSTR_b�ke
, 60346, 5, "brake")

241 
QDEF1
(
MP_QSTR_bu��
, 24819, 6, "button")

242 
QDEF1
(
MP_QSTR_��rMem�y
, 65117, 11, "clearMemory")

243 
QDEF1
(
MP_QSTR_�osu�
, 51828, 7, "closure")

244 
QDEF1
(
MP_QSTR_c���
, 26011, 7, "collect")

245 
QDEF1
(
MP_QSTR_com�ex
, 40389, 7, "complex")

246 
QDEF1
(
MP_QSTR_c�fig
, 41551, 6, "config")

247 
QDEF1
(
MP_QSTR_devi�s
, 64174, 7, "devices")

248 
QDEF1
(
MP_QSTR_di�_v�w
, 43309, 9, "dict_view")

249 
QDEF1
(
MP_QSTR_d�e�i�
, 29728, 9, "direction")

250 
QDEF1
(
MP_QSTR_di�b�
, 30353, 7, "disable")

251 
QDEF1
(
MP_QSTR_�ab�
, 56836, 6, "enable")

252 
QDEF1
(
MP_QSTR_��o
, 4545, 5, "errno")

253 
QDEF1
(
MP_QSTR_ex�
, 48773, 4, "exit")

254 
QDEF1
(
MP_QSTR_��t
, 17461, 5, "float")

255 
QDEF1
(
MP_QSTR_fun�i�
, 551, 8, "function")

256 
QDEF1
(
MP_QSTR_gc
, 28257, 2, "gc")

257 
QDEF1
(
MP_QSTR_g����
, 50070, 9, "generator")

258 
QDEF1
(
MP_QSTR_g�Dig��
, 17385, 10, "getDigital")

259 
QDEF1
(
MP_QSTR_g�Key
, 29732, 6, "getKey")

260 
QDEF1
(
MP_QSTR_g�Mem�y
, 36946, 9, "getMemory")

261 
QDEF1
(
MP_QSTR_g�Pos�i�
, 62794, 11, "getPosition")

262 
QDEF1
(
MP_QSTR_g�Pow�
, 2892, 8, "getPower")

263 
QDEF1
(
MP_QSTR_g�S�ed
, 19572, 8, "getSpeed")

264 
QDEF1
(
MP_QSTR_g�Time
, 53542, 7, "getTime")

265 
QDEF1
(
MP_QSTR_g�V�ueExt
, 53777, 11, "getValueExt")

266 
QDEF1
(
MP_QSTR_hex
, 20592, 3, "hex")

267 
QDEF1
(
MP_QSTR_imag
, 46919, 4, "imag")

268 
QDEF1
(
MP_QSTR_i��b�d
, 58778, 9, "isenabled")

269 
QDEF1
(
MP_QSTR_����
, 48711, 8, "iterator")

270 
QDEF1
(
MP_QSTR_ki
, 28647, 2, "ki")

271 
QDEF1
(
MP_QSTR_kp
, 28670, 2, "kp")

272 
QDEF1
(
MP_QSTR_maximum_�a�_�cursi�_�a�_d�th_�a�_ex�eded
, 7795, 32, "maximum�ecursion depth�xceeded")

273 
QDEF1
(
MP_QSTR_mem_�loc
, 11090, 9, "mem_alloc")

274 
QDEF1
(
MP_QSTR_mem_�
, 25291, 8, "mem_free")

275 
QDEF1
(
MP_QSTR_mem_off�t
, 38834, 10, "mem_offset")

276 
QDEF1
(
MP_QSTR_mem�y
, 7556, 6, "memory")

277 
QDEF1
(
MP_QSTR_mode
, 49190, 4, "mode")

278 
QDEF1
(
MP_QSTR_modu�
, 39359, 6, "module")

279 
QDEF1
(
MP_QSTR_mڙ�
, 36649, 7, "monitor")

280 
QDEF1
(
MP_QSTR_mڙ�_keys
, 15634, 12, "monitor_keys")

281 
QDEF1
(
MP_QSTR_m��
, 2510, 5, "motor")

282 
QDEF1
(
MP_QSTR_o�
, 23805, 3, "oct")

283 
QDEF1
(
MP_QSTR_p�t
, 55388, 4, "port")

284 
QDEF1
(
MP_QSTR_pos�i�
, 1052, 8, "position")

285 
QDEF1
(
MP_QSTR_��
, 63935, 4, "real")

286 
QDEF1
(
MP_QSTR_�ns�
, 52307, 6, "sensor")

287 
QDEF1
(
MP_QSTR_�rvo
, 55928, 5, "servo")

288 
QDEF1
(
MP_QSTR_�tMem�y
, 19782, 9, "setMemory")

289 
QDEF1
(
MP_QSTR_�tText
, 6106, 7, "setText")

290 
QDEF1
(
MP_QSTR_sim�e_�ns�
, 18530, 13, "simple_sensor")

291 
QDEF1
(
MP_QSTR_��d
, 3938, 5, "speed")

292 
QDEF1
(
MP_QSTR_ticks
, 2115, 5, "ticks")

293 
QDEF1
(
MP_QSTR_time
, 49648, 4, "time")

294 
QDEF1
(
MP_QSTR_wa�
, 21902, 4, "wait")

295 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_b_b��_�o�_
, 14168, 5, "{:#b}")

296 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_o_b��_�o�_
, 14325, 5, "{:#o}")

297 
QDEF1
(
MP_QSTR__b��_ݒ__c��__hash_x_b��_�o�_
, 14850, 5, "{:#x}")

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\root_pointers.h

3 
	gdevi�s_���li�d
;

4 
	gmem�y_���li�d
;

5 
	gtime_���li�d
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\embed_util.c

27 
	~<�r�g.h
>

28 
	~"py/comp�e.h
"

29 
	~"py/gc.h
"

30 
	~"py/�rsi��tcode.h
"

31 
	~"py/ru�ime.h
"

32 
	~"py/�ack��.h
"

33 
	~"sh�ed/ru�ime/gch��r.h
"

34 
	~"p�t/mi��yth�_embed.h
"

37 
	$mp_embed_��
(*
gc_h�p
, 
size_t
 
gc_h�p_size
, *
�ack_t�
) {

38 
	`mp_�ack_�t_t�
(
�ack_t�
);

39 
	`gc_��
(
gc_h�p
, (
u�t8_t
 *)gc_h��+ 
gc_h�p_size
);

40 
	`mp_��
();

41 
	}
}

43 #i�
MICROPY_ENABLE_COMPILER


45 
	$mp_embed_exec_�r
(cڡ *
�c
) {

46 
�r_buf_t
 
�r
;

47 i�(
	`�r_push
(&
�r
) == 0) {

49 
mp_�x�_t
 *
�x
 = 
	`mp_�x�_�w_�om_�r_�n
(
MP_QSTR__�_�d�_gt_
, 
�c
, 
	`���
(src), 0);

50 
q�r
 
sour�_�me
 = 
�x
->source_name;

51 
mp_�r�_��_t
 
�r�_��
 = 
	`mp_�r�
(
�x
, 
MP_PARSE_FILE_INPUT
);

52 
mp_obj_t
 
modu�_fun
 = 
	`mp_comp�e
(&
�r�_��
, 
sour�_�me
, 
�ue
);

53 
	`mp_��_fun�i�_0
(
modu�_fun
);

54 
	`�r_p�
();

57 
	`mp_obj_��t_ex��i�
(&
mp_��_��t
, (
mp_obj_t
)
�r
.
�t_v�
);

59 
	}
}

62 #i�
MICROPY_PERSISTENT_CODE_LOAD


63 
	$mp_embed_exec_mpy
(cڡ 
u�t8_t
 *
mpy
, 
size_t
 
�n
) {

64 
�r_buf_t
 
�r
;

65 i�(
	`�r_push
(&
�r
) == 0) {

67 
mp_modu�_cڋxt_t
 *
�x
 = 
	`m_�w_obj
(mp_module_context_t);

68 
�x
->
modu�
.
glob�s
 = 
	`mp_glob�s_g�
();

69 
mp_comp�ed_modu�_t
 
cm
;

70 
cm
.
cڋxt
 = 
�x
;

71 
	`mp_�w_code_l�d_mem
(
mpy
, 
�n
, &
cm
);

72 
mp_obj_t
 
f
 = 
	`mp_make_fun�i�_�om_��o_fun
(
cm
.
rc
, 
�x
, 
MP_OBJ_NULL
);

73 
	`mp_��_fun�i�_0
(
f
);

74 
	`�r_p�
();

77 
	`mp_obj_��t_ex��i�
(&
mp_��_��t
, (
mp_obj_t
)
�r
.
�t_v�
);

79 
	}
}

83 
	$mp_embed_de��
() {

84 
	`mp_de��
();

85 
	}
}

87 #i�
MICROPY_ENABLE_GC


89 
	$gc_c���
() {

90 
	`gc_c���_��t
();

91 
	`gc_h��r_c���_�gs_�d_�ack
();

92 
	`gc_c���_�d
();

93 
	}
}

97 
	$�r_jump_�
(*
v�
) {

100 
	}
}

102 #i�de�
NDEBUG


104 
	$__as��_func
(cڡ *
f�e
, 
l�e
, cڡ *
func
, cڡ *
ex�
) {

107 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\micropython_embed.h

26 #i�de�
MICROPY_INCLUDED_MICROPYTHON_EMBED_H


27 
	#MICROPY_INCLUDED_MICROPYTHON_EMBED_H


	)

29 
	~<�ddef.h
>

30 
	~<�d�t.h
>

32 
mp_embed_��
(*
gc_h�p
, 
size_t
 
gc_h�p_size
, *
�ack_t�
);

33 
mp_embed_de��
();

36 
mp_embed_exec_�r
(cڡ *
�c
);

39 
mp_embed_exec_mpy
(cڡ 
u�t8_t
 *
mpy
, 
size_t
 
�n
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mpconfigport_common.h

27 
	~<�d�t.h
>

31 
���_t
 
	tmp_�t_t
;

32 
u���_t
 
	tmp_u�t_t
;

33 
	tmp_off_t
;

36 #i�
def�ed
(
__F�eBSD__
�|| def�ed(
__N�BSD__
)

37 
	~<�dlib.h
>

38 #�i�
def�ed
(
_WIN32
)

39 
	~<m�loc.h
>

41 
	~<�lo�.h
>

44 
	#MICROPY_MPHALPORT_H
 "p�t/mph�p�t.h"

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mphalport.c

27 
	~<�dio.h
>

28 
	~"py/mph�.h
"

29 #ifde�
ORB_ENABLE_MONITOR_STD_OUT


30 
	~"Mڙ�_C_I����.h
"

34 
	$mp_h�_�dout_tx_��_cooked
(cڡ *
�r
, 
size_t
 
�n
) {

35 #ifde�
ORB_ENABLE_MONITOR_STD_OUT


36 
	`�tMڙ�Text
(
�r
, ()
�n
);

38 
	`��tf
("%.*s", ()
�n
, 
�r
);

40 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mphalport.h

2 
	#mp_h�_p�_obj_t


	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\argcheck.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

32 
	$mp_�g_check_num_sig
(
size_t
 
n_�gs
, size_�
n_kw
, 
u�t32_t
 
sig
) {

36 
bo�
 
�kes_kw
 = 
sig
 & 1;

37 
size_t
 
n_�gs_m�
 = 
sig
 >> 17;

38 
size_t
 
n_�gs_max
 = (
sig
 >> 1) & 0xffff;

40 i�(
n_kw
 && !
�kes_kw
) {

41 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


42 
	`mp_�g_�r�_�r�_mism�ch
();

44 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("function doesn't�ake keyword�rguments"));

48 i�(
n_�gs_m�
 =�
n_�gs_max
) {

49 i�(
n_�gs
 !�
n_�gs_m�
) {

50 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


51 
	`mp_�g_�r�_�r�_mism�ch
();

53 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

54 
	`MP_ERROR_TEXT
("function�akes %d�ositional�rguments but %d were given"),

55 
n_�gs_m�
, 
n_�gs
);

59 i�(
n_�gs
 < 
n_�gs_m�
) {

60 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


61 
	`mp_�g_�r�_�r�_mism�ch
();

63 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

64 
	`MP_ERROR_TEXT
("function missing %d�equired�ositional�rguments"),

65 
n_�gs_m�
 - 
n_�gs
);

67 } i�(
n_�gs
 > 
n_�gs_max
) {

68 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


69 
	`mp_�g_�r�_�r�_mism�ch
();

71 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

72 
	`MP_ERROR_TEXT
("function�xpected�t most %d�rguments, got %d"),

73 
n_�gs_max
, 
n_�gs
);

77 
	}
}

79 
	$mp_�g_�r�_�l
(
size_t
 
n_pos
, cڡ 
mp_obj_t
 *
pos
, 
mp_m�_t
 *
kws
, size_�
n_�lowed
, cڡ 
mp_�g_t
 *
�lowed
, 
mp_�g_v�_t
 *
out_v�s
) {

80 
size_t
 
pos_found
 = 0, 
kws_found
 = 0;

81 
size_t
 
i
 = 0; i < 
n_�lowed
; i++) {

82 
mp_obj_t
 
giv�_�g
;

83 i�(
i
 < 
n_pos
) {

84 i�(
�lowed
[
i
].
�ags
 & 
MP_ARG_KW_ONLY
) {

85 
ex�a_pos�iڮ
;

87 
pos_found
++;

88 
giv�_�g
 = 
pos
[
i
];

90 
mp_m�_�em_t
 *
kw
 = 
	`mp_m�_lookup
(
kws
, 
	`MP_OBJ_NEW_QSTR
(
�lowed
[
i
].
q�
), 
MP_MAP_LOOKUP
);

91 i�(
kw
 =�
NULL
) {

92 i�(
�lowed
[
i
].
�ags
 & 
MP_ARG_REQUIRED
) {

93 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


94 
	`mp_�g_�r�_�r�_mism�ch
();

96 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
, 
	`MP_ERROR_TEXT
("'%q'�rgum���qu�ed"), 
�lowed
[
i
].
q�
);

99 
out_v�s
[
i
] = 
�lowed
[i].
defv�
;

102 
kws_found
++;

103 
giv�_�g
 = 
kw
->
v�ue
;

106 i�((
�lowed
[
i
].
�ags
 & 
MP_ARG_KIND_MASK
�=�
MP_ARG_BOOL
) {

107 
out_v�s
[
i
].
u_bo�
 = 
	`mp_obj_is_�ue
(
giv�_�g
);

108 } i�((
�lowed
[
i
].
�ags
 & 
MP_ARG_KIND_MASK
�=�
MP_ARG_INT
) {

109 
out_v�s
[
i
].
u_�t
 = 
	`mp_obj_g�_�t
(
giv�_�g
);

111 
	`as��
((
�lowed
[
i
].
�ags
 & 
MP_ARG_KIND_MASK
�=�
MP_ARG_OBJ
);

112 
out_v�s
[
i
].
u_obj
 = 
giv�_�g
;

115 i�(
pos_found
 < 
n_pos
) {

116 
ex�a_pos�iڮ
:

117 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


118 
	`mp_�g_�r�_�r�_mism�ch
();

121 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("extra�ositional�rguments given"));

124 i�(
kws_found
 < 
kws
->
u�d
) {

125 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


126 
	`mp_�g_�r�_�r�_mism�ch
();

129 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("extra keyword�rguments given"));

132 
	}
}

134 
	$mp_�g_�r�_�l_kw_��y
(
size_t
 
n_pos
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
, size_�
n_�lowed
, cڡ 
mp_�g_t
 *
�lowed
, 
mp_�g_v�_t
 *
out_v�s
) {

135 
mp_m�_t
 
kw_�gs
;

136 
	`mp_m�_��_fixed_�b�
(&
kw_�gs
, 
n_kw
, 
�gs
 + 
n_pos
);

137 
	`mp_�g_�r�_�l
(
n_pos
, 
�gs
, &
kw_�gs
, 
n_�lowed
, 
�lowed
, 
out_v�s
);

138 
	}
}

140 
NORETURN
 
	$mp_�g_�r�_�r�_mism�ch
() {

141 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("argument�um/types mismatch"));

142 
	}
}

144 #i�
MICROPY_CPYTHON_COMPAT


145 
NORETURN
 
	$mp_�g_�r�_unim�_kw
() {

146 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("keyword�rgument(s)�ot implemented - use�ormal�rgs instead"));

147 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmarm.c

28 
	~<�dio.h
>

29 
	~<as��.h
>

30 
	~<�r�g.h
>

32 
	~"py/mpc�fig.h
"

35 #i�
MICROPY_EMIT_ARM


37 
	~"py/asm�m.h
"

39 
	#SIGNED_FIT24
(
x
�(((x�& 0xff800000�=�0�|| (((x�& 0xff000000�=�0xff000000)

	)

42 
	$em�
(
asm_�m_t
 *
as
, 
u�t
 
�
) {

43 
u�t8_t
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 4);

44 i�(
c
 !�
NULL
) {

45 *(
u�t32_t
 *)
c
 = 
�
;

47 
	}
}

50 
	$em�_�
(
asm_�m_t
 *
as
, 
u�t
 
�
) {

51 
	`em�
(
as
, 
�
 | 
ASM_ARM_CC_AL
);

52 
	}
}

55 
u�t
 
	$asm_�m_�_push
(
u�t
 
�gli�
) {

57  0x92d0000 | (
�gli�
 & 0xFFFF);

58 
	}
}

60 
u�t
 
	$asm_�m_�_p�
(
u�t
 
�gli�
) {

62  0x8bd0000 | (
�gli�
 & 0xFFFF);

63 
	}
}

65 
u�t
 
	$asm_�m_�_mov_�g
(
u�t
 
rd
, u��
�
) {

67  0x1a00000 | (
rd
 << 12�| 
�
;

68 
	}
}

70 
u�t
 
	$asm_�m_�_mov_imm
(
u�t
 
rd
, u��
imm
) {

72  0x3a00000 | (
rd
 << 12�| 
imm
;

73 
	}
}

75 
u�t
 
	$asm_�m_�_mvn_imm
(
u�t
 
rd
, u��
imm
) {

77  0x3e00000 | (
rd
 << 12�| 
imm
;

78 
	}
}

80 
u�t
 
	$asm_�m_�_mvn_�g
(
u�t
 
rd
, u��
rm
) {

82  0x1e00000 | (
rd
 << 12�| 
rm
;

83 
	}
}

85 
u�t
 
	$asm_�m_�_add_imm
(
u�t
 
rd
, u��
�
, u��
imm
) {

87  0x2800000 | (
�
 << 16�| (
rd
 << 12�| (
imm
 & 0xFF);

88 
	}
}

90 
u�t
 
	$asm_�m_�_add_�g
(
u�t
 
rd
, u��
�
, u��
rm
) {

92  0x0800000 | (
�
 << 16�| (
rd
 << 12�| 
rm
;

93 
	}
}

95 
u�t
 
	$asm_�m_�_sub_imm
(
u�t
 
rd
, u��
�
, u��
imm
) {

97  0x2400000 | (
�
 << 16�| (
rd
 << 12�| (
imm
 & 0xFF);

98 
	}
}

100 
u�t
 
	$asm_�m_�_sub_�g
(
u�t
 
rd
, u��
�
, u��
rm
) {

102  0x0400000 | (
�
 << 16�| (
rd
 << 12�| 
rm
;

103 
	}
}

105 
u�t
 
	$asm_�m_�_rsb_imm
(
u�t
 
rd
, u��
�
, u��
imm
) {

107  0x2600000 | (
�
 << 16�| (
rd
 << 12�| (
imm
 & 0xFF);

108 
	}
}

110 
u�t
 
	$asm_�m_�_mul_�g
(
u�t
 
rd
, u��
rm
, u��
rs
) {

112 
	`as��
(
rd
 !�
rm
);

113  0x0000090 | (
rd
 << 16�| (
rs
 << 8�| 
rm
;

114 
	}
}

116 
u�t
 
	$asm_�m_�_�d_�g
(
u�t
 
rd
, u��
�
, u��
rm
) {

118  0x0000000 | (
�
 << 16�| (
rd
 << 12�| 
rm
;

119 
	}
}

121 
u�t
 
	$asm_�m_�_e�_�g
(
u�t
 
rd
, u��
�
, u��
rm
) {

123  0x0200000 | (
�
 << 16�| (
rd
 << 12�| 
rm
;

124 
	}
}

126 
u�t
 
	$asm_�m_�_�r_�g
(
u�t
 
rd
, u��
�
, u��
rm
) {

128  0x1800000 | (
�
 << 16�| (
rd
 << 12�| 
rm
;

129 
	}
}

131 
	$asm_�m_bk�
(
asm_�m_t
 *
as
) {

133 
	`em�_�
(
as
, 0x1200070);

134 
	}
}

147 
	$asm_�m_��y
(
asm_�m_t
 *
as
, 
num_lo�ls
) {

148 
	`as��
(
num_lo�ls
 >= 0);

150 
as
->
�ack_adju�
 = 0;

151 
as
->
push_�gli�
 = 1 << 
ASM_ARM_REG_R1


152 | 1 << 
ASM_ARM_REG_R2


153 | 1 << 
ASM_ARM_REG_R3


154 | 1 << 
ASM_ARM_REG_R4


155 | 1 << 
ASM_ARM_REG_R5


156 | 1 << 
ASM_ARM_REG_R6


157 | 1 << 
ASM_ARM_REG_R7


158 | 1 << 
ASM_ARM_REG_R8
;

161 i�(
num_lo�ls
 > 3) {

162 
as
->
�ack_adju�
 = 
num_lo�ls
 * 4;

164 i�(
num_lo�ls
 & 1) {

165 
as
->
�ack_adju�
 += 4;

169 
	`em�_�
(
as
, 
	`asm_�m_�_push
�s->
push_�gli�
 | 1 << 
ASM_ARM_REG_LR
));

170 i�(
as
->
�ack_adju�
 > 0) {

171 
	`em�_�
(
as
, 
	`asm_�m_�_sub_imm
(
ASM_ARM_REG_SP
, ASM_ARM_REG_SP,�s->
�ack_adju�
));

173 
	}
}

175 
	$asm_�m_ex�
(
asm_�m_t
 *
as
) {

176 i�(
as
->
�ack_adju�
 > 0) {

177 
	`em�_�
(
as
, 
	`asm_�m_�_add_imm
(
ASM_ARM_REG_SP
, ASM_ARM_REG_SP,�s->
�ack_adju�
));

180 
	`em�_�
(
as
, 
	`asm_�m_�_p�
�s->
push_�gli�
 | (1 << 
ASM_ARM_REG_PC
)));

181 
	}
}

183 
	$asm_�m_push
(
asm_�m_t
 *
as
, 
u�t
 
�gli�
) {

184 
	`em�_�
(
as
, 
	`asm_�m_�_push
(
�gli�
));

185 
	}
}

187 
	$asm_�m_p�
(
asm_�m_t
 *
as
, 
u�t
 
�gli�
) {

188 
	`em�_�
(
as
, 
	`asm_�m_�_p�
(
�gli�
));

189 
	}
}

191 
	$asm_�m_mov_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

192 
	`em�_�
(
as
, 
	`asm_�m_�_mov_�g
(
�g_de�
, 
�g_�c
));

193 
	}
}

195 
size_t
 
	$asm_�m_mov_�g_i32
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
) {

197 
	`em�_�
(
as
, 0x59f0000 | (
rd
 << 12));

198 
	`em�_�
(
as
, 0xa000000);

199 
size_t
 
loc
 = 
	`mp_asm_ba�_g�_code_pos
(&
as
->
ba�
);

200 
	`em�
(
as
, 
imm
);

201  
loc
;

202 
	}
}

204 
	$asm_�m_mov_�g_i32_�timi�d
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
) {

206 i�((
imm
 & 0xFF) == imm) {

207 
	`em�_�
(
as
, 
	`asm_�m_�_mov_imm
(
rd
, 
imm
));

208 } i�(
imm
 < 0 && imm >= -256) {

210 
	`em�_�
(
as
, 
	`asm_�m_�_mvn_imm
(
rd
, ~
imm
));

212 
	`asm_�m_mov_�g_i32
(
as
, 
rd
, 
imm
);

214 
	}
}

216 
	$asm_�m_mov_lo�l_�g
(
asm_�m_t
 *
as
, 
lo�l_num
, 
u�t
 
rd
) {

218 
	`em�_�
(
as
, 0x58d0000 | (
rd
 << 12�| (
lo�l_num
 << 2));

219 
	}
}

221 
	$asm_�m_mov_�g_lo�l
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
lo�l_num
) {

223 
	`em�_�
(
as
, 0x59d0000 | (
rd
 << 12�| (
lo�l_num
 << 2));

224 
	}
}

226 
	$asm_�m_cmp_�g_i8
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
) {

228 
	`em�_�
(
as
, 0x3500000 | (
rd
 << 16�| (
imm
 & 0xFF));

229 
	}
}

231 
	$asm_�m_cmp_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
) {

233 
	`em�_�
(
as
, 0x1500000 | (
rd
 << 16�| 
�
);

234 
	}
}

236 
	$asm_�m_�tcc_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
c�d
) {

237 
	`em�
(
as
, 
	`asm_�m_�_mov_imm
(
rd
, 1�| 
c�d
);

238 
	`em�
(
as
, 
	`asm_�m_�_mov_imm
(
rd
, 0�| (
c�d
 ^ (1 << 28)));

239 
	}
}

241 
	$asm_�m_mvn_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
) {

244 
	`em�_�
(
as
, 
	`asm_�m_�_mvn_�g
(
rd
, 
rm
));

245 
	}
}

247 
	$asm_�m_add_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
) {

249 
	`em�_�
(
as
, 
	`asm_�m_�_add_�g
(
rd
, 
�
, 
rm
));

250 
	}
}

252 
	$asm_�m_rsb_�g_�g_imm
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
imm
) {

255 
	`em�_�
(
as
, 
	`asm_�m_�_rsb_imm
(
rd
, 
�
, 
imm
));

256 
	}
}

258 
	$asm_�m_sub_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
) {

260 
	`em�_�
(
as
, 
	`asm_�m_�_sub_�g
(
rd
, 
�
, 
rm
));

261 
	}
}

263 
	$asm_�m_mul_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
, u��
rm
) {

266 
	`em�_�
(
as
, 
	`asm_�m_�_mul_�g
(
rd
, 
rm
, 
rs
));

267 
	}
}

269 
	$asm_�m_�d_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
) {

271 
	`em�_�
(
as
, 
	`asm_�m_�_�d_�g
(
rd
, 
�
, 
rm
));

272 
	}
}

274 
	$asm_�m_e�_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
) {

276 
	`em�_�
(
as
, 
	`asm_�m_�_e�_�g
(
rd
, 
�
, 
rm
));

277 
	}
}

279 
	$asm_�m_�r_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
) {

281 
	`em�_�
(
as
, 
	`asm_�m_�_�r_�g
(
rd
, 
�
, 
rm
));

282 
	}
}

284 
	$asm_�m_mov_�g_lo�l_addr
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
lo�l_num
) {

286 
	`em�_�
(
as
, 
	`asm_�m_�_add_imm
(
rd
, 
ASM_ARM_REG_SP
, 
lo�l_num
 << 2));

287 
	}
}

289 
	$asm_�m_mov_�g_p��
(
asm_�m_t
 *
as
, 
u�t
 
�g_de�
, u��
�b�
) {

290 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

291 
mp_u�t_t
 
de�
 = 
as
->
ba�
.
�b�_off�ts
[
�b�
];

292 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

293 
�l
 -= 12 + 8;

296 
	`em�_�
(
as
, 0x59f0000 | (
�g_de�
 << 12));

297 
	`em�_�
(
as
, 0xa000000);

298 
	`em�
(
as
, 
�l
);

301 
	`asm_�m_add_�g_�g_�g
(
as
, 
�g_de�
,�eg_de�, 
ASM_ARM_REG_PC
);

302 
	}
}

304 
	$asm_�m_l�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
) {

306 
	`em�_�
(
as
, 0x1a00010 | (
rd
 << 12�| (
rs
 << 8) |�d);

307 
	}
}

309 
	$asm_�m_l�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
) {

311 
	`em�_�
(
as
, 0x1a00030 | (
rd
 << 12�| (
rs
 << 8) |�d);

312 
	}
}

314 
	$asm_�m_a�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
) {

316 
	`em�_�
(
as
, 0x1a00050 | (
rd
 << 12�| (
rs
 << 8) |�d);

317 
	}
}

319 
	$asm_�m_ldr_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
by�_off�t
) {

321 
	`em�_�
(
as
, 0x5900000 | (
�
 << 16�| (
rd
 << 12�| 
by�_off�t
);

322 
	}
}

324 
	$asm_�m_ldrh_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
) {

326 
	`em�_�
(
as
, 0x1d000b0 | (
�
 << 16�| (
rd
 << 12));

327 
	}
}

329 
	$asm_�m_ldrh_�g_�g_off�t
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
by�_off�t
) {

331 
	`em�_�
(
as
, 0x1f000b0 | (
�
 << 16�| (
rd
 << 12�| ((
by�_off�t
 & 0xf0) << 4) | (byte_offset & 0xf));

332 
	}
}

334 
	$asm_�m_ldrb_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
) {

336 
	`em�_�
(
as
, 0x5d00000 | (
�
 << 16�| (
rd
 << 12));

337 
	}
}

339 
	$asm_�m_�r_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
by�_off�t
) {

341 
	`em�_�
(
as
, 0x5800000 | (
rm
 << 16�| (
rd
 << 12�| 
by�_off�t
);

342 
	}
}

344 
	$asm_�m_�rh_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
) {

346 
	`em�_�
(
as
, 0x1c000b0 | (
rm
 << 16�| (
rd
 << 12));

347 
	}
}

349 
	$asm_�m_�rb_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
) {

351 
	`em�_�
(
as
, 0x5c00000 | (
rm
 << 16�| (
rd
 << 12));

352 
	}
}

354 
	$asm_�m_�r_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
) {

356 
	`em�_�
(
as
, 0x7800100 | (
rm
 << 16�| (
rd
 << 12�| 
�
);

357 
	}
}

359 
	$asm_�m_�rh_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
) {

361 
	`em�_�
(
as
, 0x1a00080 | (
ASM_ARM_REG_R8
 << 12�| 
�
);

362 
	`em�_�
(
as
, 0x18000b0 | (
rm
 << 16�| (
rd
 << 12�| 
ASM_ARM_REG_R8
);

363 
	}
}

365 
	$asm_�m_�rb_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
) {

367 
	`em�_�
(
as
, 0x7c00000 | (
rm
 << 16�| (
rd
 << 12�| 
�
);

368 
	}
}

370 
	$asm_�m_bcc_�b�
(
asm_�m_t
 *
as
, 
c�d
, 
u�t
 
�b�
) {

371 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

372 
mp_u�t_t
 
de�
 = 
as
->
ba�
.
�b�_off�ts
[
�b�
];

373 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

374 
�l
 -= 8;

375 
�l
 >>= 2;

377 i�(
	`SIGNED_FIT24
(
�l
)) {

378 
	`em�
(
as
, 
c�d
 | 0xa000000 | (
�l
 & 0xffffff));

380 
	`��tf
("asm_arm_bcc: branch does�ot fit in 24 bits\n");

382 
	}
}

384 
	$asm_�m_b_�b�
(
asm_�m_t
 *
as
, 
u�t
 
�b�
) {

385 
	`asm_�m_bcc_�b�
(
as
, 
ASM_ARM_CC_AL
, 
�b�
);

386 
	}
}

388 
	$asm_�m_bl_�d
(
asm_�m_t
 *
as
, 
u�t
 
fun_id
, u��
�g_�mp
) {

390 
	`as��
(
fun_id
 < (0x1000 / 4));

391 
	`em�_�
(
as
, 
	`asm_�m_�_mov_�g
(
ASM_ARM_REG_LR
, 
ASM_ARM_REG_PC
));

392 
	`em�_�
(
as
, 0x597f000 | (
fun_id
 << 2));

393 
	}
}

395 
	$asm_�m_bx_�g
(
asm_�m_t
 *
as
, 
u�t
 
�g_�c
) {

396 
	`em�_�
(
as
, 0x012fff10 | 
�g_�c
);

397 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmarm.h

27 #i�de�
MICROPY_INCLUDED_PY_ASMARM_H


28 
	#MICROPY_INCLUDED_PY_ASMARM_H


	)

30 
	~"py/misc.h
"

31 
	~"py/asmba�.h
"

33 
	#ASM_ARM_REG_R0
 (0)

	)

34 
	#ASM_ARM_REG_R1
 (1)

	)

35 
	#ASM_ARM_REG_R2
 (2)

	)

36 
	#ASM_ARM_REG_R3
 (3)

	)

37 
	#ASM_ARM_REG_R4
 (4)

	)

38 
	#ASM_ARM_REG_R5
 (5)

	)

39 
	#ASM_ARM_REG_R6
 (6)

	)

40 
	#ASM_ARM_REG_R7
 (7)

	)

41 
	#ASM_ARM_REG_R8
 (8)

	)

42 
	#ASM_ARM_REG_R9
 (9)

	)

43 
	#ASM_ARM_REG_R10
 (10)

	)

44 
	#ASM_ARM_REG_R11
 (11)

	)

45 
	#ASM_ARM_REG_R12
 (12)

	)

46 
	#ASM_ARM_REG_R13
 (13)

	)

47 
	#ASM_ARM_REG_R14
 (14)

	)

48 
	#ASM_ARM_REG_R15
 (15)

	)

49 
	#ASM_ARM_REG_SP
 (
ASM_ARM_REG_R13
)

	)

50 
	#ASM_ARM_REG_LR
 (
ASM_ARM_REG_R14
)

	)

51 
	#ASM_ARM_REG_PC
 (
ASM_ARM_REG_R15
)

	)

53 
	#ASM_ARM_CC_EQ
 (0x0 << 28)

	)

54 
	#ASM_ARM_CC_NE
 (0x1 << 28)

	)

55 
	#ASM_ARM_CC_CS
 (0x2 << 28)

	)

56 
	#ASM_ARM_CC_CC
 (0x3 << 28)

	)

57 
	#ASM_ARM_CC_MI
 (0x4 << 28)

	)

58 
	#ASM_ARM_CC_PL
 (0x5 << 28)

	)

59 
	#ASM_ARM_CC_VS
 (0x6 << 28)

	)

60 
	#ASM_ARM_CC_VC
 (0x7 << 28)

	)

61 
	#ASM_ARM_CC_HI
 (0x8 << 28)

	)

62 
	#ASM_ARM_CC_LS
 (0x9 << 28)

	)

63 
	#ASM_ARM_CC_GE
 (0x�<< 28)

	)

64 
	#ASM_ARM_CC_LT
 (0xb << 28)

	)

65 
	#ASM_ARM_CC_GT
 (0x�<< 28)

	)

66 
	#ASM_ARM_CC_LE
 (0xd << 28)

	)

67 
	#ASM_ARM_CC_AL
 (0x�<< 28)

	)

69 
	s_asm_�m_t
 {

70 
mp_asm_ba�_t
 
	mba�
;

71 
u�t
 
	mpush_�gli�
;

72 
u�t
 
	m�ack_adju�
;

73 } 
	tasm_�m_t
;

75 
�l�e
 
	$asm_�m_�d_�ss
(
asm_�m_t
 *
as
) {

76 ()
as
;

77 
	}
}

79 
asm_�m_��y
(
asm_�m_t
 *
as
, 
num_lo�ls
);

80 
asm_�m_ex�
(
asm_�m_t
 *
as
);

82 
asm_�m_bk�
(
asm_�m_t
 *
as
);

85 
asm_�m_mov_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
);

86 
size_t
 
asm_�m_mov_�g_i32
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
);

87 
asm_�m_mov_�g_i32_�timi�d
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
);

88 
asm_�m_mov_lo�l_�g
(
asm_�m_t
 *
as
, 
lo�l_num
, 
u�t
 
rd
);

89 
asm_�m_mov_�g_lo�l
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
lo�l_num
);

90 
asm_�m_�tcc_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
c�d
);

93 
asm_�m_cmp_�g_i8
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
imm
);

94 
asm_�m_cmp_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
);

97 
asm_�m_mvn_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
);

98 
asm_�m_add_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

99 
asm_�m_sub_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

100 
asm_�m_rsb_�g_�g_imm
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
imm
);

101 
asm_�m_mul_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

102 
asm_�m_�d_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

103 
asm_�m_e�_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

104 
asm_�m_�r_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
rm
);

105 
asm_�m_mov_�g_lo�l_addr
(
asm_�m_t
 *
as
, 
u�t
 
rd
, 
lo�l_num
);

106 
asm_�m_mov_�g_p��
(
asm_�m_t
 *
as
, 
u�t
 
�g_de�
, u��
�b�
);

107 
asm_�m_l�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
);

108 
asm_�m_l�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
);

109 
asm_�m_a�_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rs
);

112 
asm_�m_ldr_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
by�_off�t
);

113 
asm_�m_ldrh_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
);

114 
asm_�m_ldrh_�g_�g_off�t
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
, u��
by�_off�t
);

115 
asm_�m_ldrb_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
�
);

116 
asm_�m_�r_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
by�_off�t
);

117 
asm_�m_�rh_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
);

118 
asm_�m_�rb_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
);

120 
asm_�m_�r_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
);

121 
asm_�m_�rh_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
);

122 
asm_�m_�rb_�g_�g_�g
(
asm_�m_t
 *
as
, 
u�t
 
rd
, u��
rm
, u��
�
);

125 
asm_�m_push
(
asm_�m_t
 *
as
, 
u�t
 
�gli�
);

126 
asm_�m_p�
(
asm_�m_t
 *
as
, 
u�t
 
�gli�
);

129 
asm_�m_bcc_�b�
(
asm_�m_t
 *
as
, 
c�d
, 
u�t
 
�b�
);

130 
asm_�m_b_�b�
(
asm_�m_t
 *
as
, 
u�t
 
�b�
);

131 
asm_�m_bl_�d
(
asm_�m_t
 *
as
, 
u�t
 
fun_id
, u��
�g_�mp
);

132 
asm_�m_bx_�g
(
asm_�m_t
 *
as
, 
u�t
 
�g_�c
);

135 
	#ASM_ARM_REG_FUN_TABLE
 
ASM_ARM_REG_R7


	)

137 #i�
GENERIC_ASM_API


142 
	#ASM_WORD_SIZE
 (4)

	)

144 
	#REG_RET
 
ASM_ARM_REG_R0


	)

145 
	#REG_ARG_1
 
ASM_ARM_REG_R0


	)

146 
	#REG_ARG_2
 
ASM_ARM_REG_R1


	)

147 
	#REG_ARG_3
 
ASM_ARM_REG_R2


	)

148 
	#REG_ARG_4
 
ASM_ARM_REG_R3


	)

150 
	#REG_TEMP0
 
ASM_ARM_REG_R0


	)

151 
	#REG_TEMP1
 
ASM_ARM_REG_R1


	)

152 
	#REG_TEMP2
 
ASM_ARM_REG_R2


	)

154 
	#REG_LOCAL_1
 
ASM_ARM_REG_R4


	)

155 
	#REG_LOCAL_2
 
ASM_ARM_REG_R5


	)

156 
	#REG_LOCAL_3
 
ASM_ARM_REG_R6


	)

157 
	#REG_LOCAL_NUM
 (3)

	)

160 
	#REG_FUN_TABLE
 
ASM_ARM_REG_FUN_TABLE


	)

162 
	#ASM_T
 
asm_�m_t


	)

163 
	#ASM_END_PASS
 
asm_�m_�d_�ss


	)

164 
	#ASM_ENTRY
 
asm_�m_��y


	)

165 
	#ASM_EXIT
 
asm_�m_ex�


	)

167 
	#ASM_JUMP
 
asm_�m_b_�b�


	)

168 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

170 
	`asm_�m_cmp_�g_i8
(
as
, 
�g
, 0); \

171 
	`asm_�m_bcc_�b�
(
as
, 
ASM_ARM_CC_EQ
, 
�b�
); \

172 } 0)

	)

173 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

175 
	`asm_�m_cmp_�g_i8
(
as
, 
�g
, 0); \

176 
	`asm_�m_bcc_�b�
(
as
, 
ASM_ARM_CC_NE
, 
�b�
); \

177 } 0)

	)

178 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

180 
	`asm_�m_cmp_�g_�g
(
as
, 
�g1
, 
�g2
); \

181 
	`asm_�m_bcc_�b�
(
as
, 
ASM_ARM_CC_EQ
, 
�b�
); \

182 } 0)

	)

183 
	#ASM_JUMP_REG
(
as
, 
�g
�
	`asm_�m_bx_�g
(�s), (�g))

	)

184 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_�m_bl_�d
�s, idx, 
ASM_ARM_REG_R3
)

	)

186 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g_�c
�
	`asm_�m_mov_lo�l_�g
(�s), (lo�l_num), (�g_�c))

	)

187 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
�
	`asm_�m_mov_�g_i32_�timi�d
(�s), (�g_de�), (imm))

	)

188 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_�m_mov_�g_lo�l
(�s), (�g_de�), (lo�l_num))

	)

189 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_mov_�g_�g
(�s), (�g_de�), (�g_�c))

	)

190 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_�m_mov_�g_lo�l_addr
(�s), (�g_de�), (lo�l_num))

	)

191 
	#ASM_MOV_REG_PCREL
(
as
, 
�g_de�
, 
�b�
�
	`asm_�m_mov_�g_p��
(�s), (�g_de�), (�b�))

	)

193 
	#ASM_NOT_REG
(
as
, 
�g_de�
�
	`asm_�m_mvn_�g_�g
(�s), (�g_de�), (�g_de�))

	)

194 
	#ASM_NEG_REG
(
as
, 
�g_de�
�
	`asm_�m_rsb_�g_�g_imm
(�s), (�g_de�), (�g_de�), 0)

	)

195 
	#ASM_LSL_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_�m_l�_�g_�g
(�s), (�g_de�), (�g_shi�))

	)

196 
	#ASM_LSR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_�m_l�_�g_�g
(�s), (�g_de�), (�g_shi�))

	)

197 
	#ASM_ASR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_�m_a�_�g_�g
(�s), (�g_de�), (�g_shi�))

	)

198 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_�r_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

199 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_e�_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

200 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_�d_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

201 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_add_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

202 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_sub_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

203 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_�m_mul_�g_�g_�g
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

205 
	#ASM_LOAD_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_�m_ldr_�g_�g
(�s), (�g_de�), (�g_ba�), 0)

	)

206 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_�m_ldr_�g_�g
(�s), (�g_de�), (�g_ba�), 4 * (w�d_off�t))

	)

207 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_�m_ldrb_�g_�g
(�s), (�g_de�), (�g_ba�))

	)

208 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_�m_ldrh_�g_�g
(�s), (�g_de�), (�g_ba�))

	)

209 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
�
	`asm_�m_ldrh_�g_�g_off�t
(�s), (�g_de�), (�g_ba�), 2 * (u�t16_off�t))

	)

210 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_�m_ldr_�g_�g
(�s), (�g_de�), (�g_ba�), 0)

	)

212 
	#ASM_STORE_REG_REG
(
as
, 
�g_v�ue
, 
�g_ba�
�
	`asm_�m_�r_�g_�g
(�s), (�g_v�ue), (�g_ba�), 0)

	)

213 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_�m_�r_�g_�g
(�s), (�g_de�), (�g_ba�), 4 * (w�d_off�t))

	)

214 
	#ASM_STORE8_REG_REG
(
as
, 
�g_v�ue
, 
�g_ba�
�
	`asm_�m_�rb_�g_�g
(�s), (�g_v�ue), (�g_ba�))

	)

215 
	#ASM_STORE16_REG_REG
(
as
, 
�g_v�ue
, 
�g_ba�
�
	`asm_�m_�rh_�g_�g
(�s), (�g_v�ue), (�g_ba�))

	)

216 
	#ASM_STORE32_REG_REG
(
as
, 
�g_v�ue
, 
�g_ba�
�
	`asm_�m_�r_�g_�g
(�s), (�g_v�ue), (�g_ba�), 0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmbase.c

27 
	~<as��.h
>

28 
	~<�r�g.h
>

30 
	~"py/obj.h
"

31 
	~"py/misc.h
"

32 
	~"py/asmba�.h
"

33 
	~"py/�rsi��tcode.h
"

35 #i�
MICROPY_EMIT_MACHINE_CODE


37 
	$mp_asm_ba�_��
(
mp_asm_ba�_t
 *
as
, 
size_t
 
max_num_�b�s
) {

38 
as
->
max_num_�b�s
 = max_num_labels;

39 
as
->
�b�_off�ts
 = 
	`m_�w
(
size_t
, 
max_num_�b�s
);

40 
	}
}

42 
	$mp_asm_ba�_de��
(
mp_asm_ba�_t
 *
as
, 
bo�
 
�_code
) {

43 i�(
�_code
) {

44 
	`MP_PLAT_FREE_EXEC
(
as
->
code_ba�
,�s->
code_size
);

46 
	`m_d�
(
size_t
, 
as
->
�b�_off�ts
,�s->
max_num_�b�s
);

47 
	}
}

49 
	$mp_asm_ba�_��t_�ss
(
mp_asm_ba�_t
 *
as
, 
�ss
) {

50 i�(
�ss
 < 
MP_ASM_PASS_EMIT
) {

52 
	`mem�t
(
as
->
�b�_off�ts
, -1,�s->
max_num_�b�s
 * (
size_t
));

55 
	`MP_PLAT_ALLOC_EXEC
(
as
->
code_off�t
, (**)&as->
code_ba�
, &as->
code_size
);

56 
	`as��
(
as
->
code_ba�
 !�
NULL
);

58 
as
->
�ss
 =�ass;

59 
as
->
su��ss
 = 
�l�
;

60 
as
->
code_off�t
 = 0;

61 
	}
}

67 
u�t8_t
 *
	$mp_asm_ba�_g�_cur_to_wr�e_by�s
(*
as_�
, 
size_t
 
num_by�s_to_wr�e
) {

68 
mp_asm_ba�_t
 *
as
 = 
as_�
;

69 
u�t8_t
 *
c
 = 
NULL
;

70 i�(
as
->
su��ss
) {

71  
c
;

73 i�(
as
->
�ss
 =�
MP_ASM_PASS_EMIT
) {

74 
	`as��
(
as
->
code_off�t
 + 
num_by�s_to_wr�e
 <�as->
code_size
);

75 
c
 = 
as
->
code_ba�
 +�s->
code_off�t
;

77 
as
->
code_off�t
 +�
num_by�s_to_wr�e
;

78  
c
;

79 
	}
}

81 
	$mp_asm_ba�_�b�_assign
(
mp_asm_ba�_t
 *
as
, 
size_t
 
�b�
) {

82 
	`as��
(
�b�
 < 
as
->
max_num_�b�s
);

86 
as
->
su��ss
 = 
�l�
;

88 i�(
as
->
�ss
 < 
MP_ASM_PASS_EMIT
) {

90 
	`as��
(
as
->
�b�_off�ts
[
�b�
] =�(
size_t
)-1);

91 
as
->
�b�_off�ts
[
�b�
] =�s->
code_off�t
;

94 
	`as��
(
as
->
�b�_off�ts
[
�b�
] =�as->
code_off�t
);

95 #i�
MICROPY_DYNAMIC_COMPILER
 && 
MICROPY_EMIT_NATIVE_DEBUG


96 i�(
mp_dy�mic_comp��
.
�tive_�ch
 =�
MP_NATIVE_ARCH_DEBUG
) {

97 
	`mp_��tf
(
MICROPY_EMIT_NATIVE_DEBUG_PRINTER
, "�b��ab�_%u)\n", ()
�b�
);

101 
	}
}

104 
	$mp_asm_ba�_�ign
(
mp_asm_ba�_t
 *
as
, 
�ign
) {

105 
as
->
code_off�t
 = (as->code_off��+ 
�ign
 - 1) & (~(align - 1));

106 
	}
}

109 
	$mp_asm_ba�_d�a
(
mp_asm_ba�_t
 *
as
, 
by�size
, 
u���_t
 
v�
) {

110 
u�t8_t
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(
as
, 
by�size
);

111 i�(
c
 !�
NULL
) {

112 
i
 = 0; i < 
by�size
; i++) {

113 *
c
++ = 
v�
;

114 
v�
 >>= 8;

117 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmbase.h

26 #i�de�
MICROPY_INCLUDED_PY_ASMBASE_H


27 
	#MICROPY_INCLUDED_PY_ASMBASE_H


	)

29 
	~<�d�t.h
>

30 
	~<�ddef.h
>

31 
	~<�dbo�.h
>

33 
	#MP_ASM_PASS_COMPUTE
 (1)

	)

34 
	#MP_ASM_PASS_EMIT
 (2)

	)

36 
	s_mp_asm_ba�_t
 {

37 
u�t8_t
 
	m�ss
;

41 
bo�
 
	msu��ss
;

43 
size_t
 
	mcode_off�t
;

44 
size_t
 
	mcode_size
;

45 
u�t8_t
 *
	mcode_ba�
;

47 
size_t
 
	mmax_num_�b�s
;

48 
size_t
 *
	m�b�_off�ts
;

49 } 
	tmp_asm_ba�_t
;

51 
mp_asm_ba�_��
(
mp_asm_ba�_t
 *
as
, 
size_t
 
max_num_�b�s
);

52 
mp_asm_ba�_de��
(
mp_asm_ba�_t
 *
as
, 
bo�
 
�_code
);

53 
mp_asm_ba�_��t_�ss
(
mp_asm_ba�_t
 *
as
, 
�ss
);

54 
u�t8_t
 *
mp_asm_ba�_g�_cur_to_wr�e_by�s
(*
as
, 
size_t
 
num_by�s_to_wr�e
);

55 
mp_asm_ba�_�b�_assign
(
mp_asm_ba�_t
 *
as
, 
size_t
 
�b�
);

56 
mp_asm_ba�_�ign
(
mp_asm_ba�_t
 *
as
, 
�ign
);

57 
mp_asm_ba�_d�a
(
mp_asm_ba�_t
 *
as
, 
by�size
, 
u���_t
 
v�
);

59 
�l�e
 
	$mp_asm_ba�_su��ss_code
(
mp_asm_ba�_t
 *
as
) {

60 
as
->
su��ss
 = 
�ue
;

61 
	}
}

63 
�l�e
 
size_t
 
	$mp_asm_ba�_g�_code_pos
(
mp_asm_ba�_t
 *
as
) {

64  
as
->
code_off�t
;

65 
	}
}

67 
�l�e
 
size_t
 
	$mp_asm_ba�_g�_code_size
(
mp_asm_ba�_t
 *
as
) {

68  
as
->
code_size
;

69 
	}
}

71 
�l�e
 *
	$mp_asm_ba�_g�_code
(
mp_asm_ba�_t
 *
as
) {

72 #i�
	`def�ed
(
MP_PLAT_COMMIT_EXEC
)

73  
	`MP_PLAT_COMMIT_EXEC
(
as
->
code_ba�
,�s->
code_size
, 
NULL
);

75  
as
->
code_ba�
;

77 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmrv32.c

27 
	~<�dio.h
>

28 
	~<�dlib.h
>

29 
	~<�r�g.h
>

31 
	~"py/em�.h
"

32 
	~"py/mpc�fig.h
"

35 #i�
MICROPY_EMIT_RV32


37 
	~"py/asmrv32.h
"

39 #i�
MICROPY_DEBUG_VERBOSE


40 
	#DEBUG_PRINT
 (1)

	)

41 
	#DEBUG_��tf
 
DEBUG_��tf


	)

43 
	#DEBUG_��tf
(...�()0

	)

46 #i�de�
MP_POPCOUNT


47 #ifde�
_MSC_VER


48 
	~<���.h
>

49 
	#MP_POPCOUNT
 
__p��t


	)

51 #i�
def�ed
 
__has_bu�t�


52 #i�
__has_bu�t�
(
__bu�t�_p�cou�
)

53 
	#MP_POPCOUNT
 
__bu�t�_p�cou�


	)

56 
u�t32_t
 
	$��back_p�cou�
(
u�t32_t
 
v�ue
) {

57 
v�ue
 = value - ((value >> 1) & 0x55555555);

58 
v�ue
 = (value & 0x33333333) + ((value >> 2) & 0x33333333);

59 
v�ue
 = (value + (value >> 4)) & 0x0F0F0F0F;

60  
v�ue
 * 0x01010101;

61 
	}
}

62 
	#MP_POPCOUNT
 
��back_p�cou�


	)

67 
	#INTERNAL_TEMPORARY
 
ASM_RV32_REG_S0


	)

68 
	#AVAILABLE_REGISTERS_COUNT
 32

	)

70 
	#IS_IN_C_REGISTER_WINDOW
(
�gi��_numb�
) \

71 (((
�gi��_numb�
�>�
ASM_RV32_REG_X8
�&& (�egi��_numb��<�
ASM_RV32_REG_X15
))

	)

72 
	#MAP_IN_C_REGISTER_WINDOW
(
�gi��_numb�
) \

73 ((
�gi��_numb�
�- 
ASM_RV32_REG_X8
)

	)

75 
	#FIT_UNSIGNED
(
v�ue
, 
b�s
�(((v�ue�& ~((1U << (b�s)�- 1)�=�0)

	)

76 
	#FIT_SIGNED
(
v�ue
, 
b�s
) \

77 ((((
v�ue
�& ~((1U << ((
b�s
) - 1)) - 1)) == 0) || \

78 (((
v�ue
�& ~((1U << ((
b�s
�- 1)�- 1)�=�~((1U << ((b�s�- 1)�- 1)))

	)

82 
	$asm_rv32_em�_w�d_�code
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
w�d
) {

83 
u�t8_t
 *
curs�
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
��e
->
ba�
, (
u�t32_t
));

84 i�(
curs�
 =�
NULL
) {

88 #i�
MP_ENDIANNESS_LITTLE


89 
curs�
[0] = 
w�d
 & 0xFF;

90 
curs�
[1] = (
w�d
 >> 8) & 0xFF;

91 
curs�
[2] = (
w�d
 >> 16) & 0xFF;

92 
curs�
[3] = (
w�d
 >> 24) & 0xFF;

94 
curs�
[0] = (
w�d
 >> 24) & 0xFF;

95 
curs�
[1] = (
w�d
 >> 16) & 0xFF;

96 
curs�
[2] = (
w�d
 >> 8) & 0xFF;

97 
curs�
[3] = 
w�d
 & 0xFF;

99 
	}
}

101 
	$asm_rv32_em�_h�fw�d_�code
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
w�d
) {

102 
u�t8_t
 *
curs�
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
��e
->
ba�
, (
u�t16_t
));

103 i�(
curs�
 =�
NULL
) {

107 #i�
MP_ENDIANNESS_LITTLE


108 
curs�
[0] = 
w�d
 & 0xFF;

109 
curs�
[1] = (
w�d
 >> 8) & 0xFF;

111 
curs�
[0] = (
w�d
 >> 8) & 0xFF;

112 
curs�
[1] = 
w�d
 & 0xFF;

114 
	}
}

118 
	$�l�_immed��
(
mp_�t_t
 
immed��
, 
mp_u�t_t
 *
u��
, mp_u�t_�*
low�
) {

119 
	`as��
(
u��
 !�
NULL
 && "Upper�ointer is NULL.");

120 
	`as��
(
low�
 !�
NULL
 && "Lower�ointer is NULL.");

122 
mp_u�t_t
 
unsig�d_immed��
 = *((mp_u�t_�*)&
immed��
);

123 *
u��
 = 
unsig�d_immed��
 & 0xFFFFF000;

124 *
low�
 = 
unsig�d_immed��
 & 0x00000FFF;

127 i�((*
low�
 & 0x800) != 0) {

128 *
u��
 += 0x1000;

129 *
low�
 -= 0x1000;

131 
	}
}

133 
	$l�d_u��_immed��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
immed��
) {

138 i�(
	`FIT_SIGNED
(
immed��
, 17) && ((immediate >> 12) != 0)) {

139 
	`asm_rv32_�code_�ui
(
��e
, 
rd
, 
immed��
);

141 
	`asm_rv32_�code_lui
(
��e
, 
rd
, 
immed��
);

143 
	}
}

145 
	$l�d_low�_immed��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
immed��
) {

150 i�(
immed��
 == 0) {

158 i�(
	`FIT_SIGNED
(
immed��
, 6)) {

159 
	`asm_rv32_�code_�ddi
(
��e
, 
rd
, 
immed��
);

161 
	`asm_rv32_�code_addi
(
��e
, 
rd
,�d, 
immed��
);

163 
	}
}

165 
	$l�d_fu�_immed��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

166 
mp_u�t_t
 
u��
 = 0;

167 
mp_u�t_t
 
low�
 = 0;

168 
	`�l�_immed��
(
immed��
, &
u��
, &
low�
);

178 
	`l�d_u��_immed��
(
��e
, 
rd
, 
u��
);

179 
	`l�d_low�_immed��
(
��e
, 
rd
, 
low�
);

180 
	}
}

182 
	$asm_rv32_em�_�timi�d_l�d_immed��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

183 i�(
	`FIT_SIGNED
(
immed��
, 6)) {

185 
	`asm_rv32_�code_�i
(
��e
, 
rd
, 
immed��
);

189 i�(
	`FIT_SIGNED
(
immed��
, 12)) {

191 
	`asm_rv32_�code_addi
(
��e
, 
rd
, 
ASM_RV32_REG_ZERO
, 
immed��
);

195 
	`l�d_fu�_immed��
(
��e
, 
rd
, 
immed��
);

196 
	}
}

201 
	$em�_�gi��s_��e
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�gi��s_mask
) {

202 
mp_u�t_t
 
off�t
 = 0;

203 
mp_u�t_t
 
�gi��_�dex
 = 0;�egi��_�dex < 
AVAILABLE_REGISTERS_COUNT
;�egister_index++) {

204 i�(
�gi��s_mask
 & (1U << 
�gi��_�dex
)) {

205 
	`as��
(
	`FIT_UNSIGNED
(
off�t
 >> 2, 6) && "Registers save stack offset out of�ange.");

207 
	`asm_rv32_�code_csw�
(
��e
, 
�gi��_�dex
, 
off�t
);

208 
off�t
 +�(
u�t32_t
);

211 
	}
}

213 
	$em�_�gi��s_l�d
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�gi��s_mask
) {

214 
mp_u�t_t
 
off�t
 = 0;

215 
mp_u�t_t
 
�gi��_�dex
 = 0;�egi��_�dex < 
AVAILABLE_REGISTERS_COUNT
;�egister_index++) {

216 i�(
�gi��s_mask
 & (1U << 
�gi��_�dex
)) {

217 
	`as��
(
	`FIT_UNSIGNED
(
off�t
 >> 2, 6) && "Registers�oad stack offset out of�ange.");

219 
	`asm_rv32_�code_�w�
(
��e
, 
�gi��_�dex
, 
off�t
);

220 
off�t
 +�(
u�t32_t
);

223 
	}
}

225 
	$adju�_�ack
(
asm_rv32_t
 *
��e
, 
mp_�t_t
 
�ack_size
) {

226 i�(
�ack_size
 == 0) {

230 i�(
	`FIT_SIGNED
(
�ack_size
, 6)) {

232 
	`asm_rv32_�code_�ddi
(
��e
, 
ASM_RV32_REG_SP
, 
�ack_size
);

236 i�(
	`FIT_SIGNED
(
�ack_size
, 12)) {

238 
	`asm_rv32_�code_addi
(
��e
, 
ASM_RV32_REG_SP
, ASM_RV32_REG_SP, 
�ack_size
);

244 
	`l�d_fu�_immed��
(
��e
, 
REG_TEMP0
, 
�ack_size
);

245 
	`asm_rv32_�code_�dd
(
��e
, 
ASM_RV32_REG_SP
, 
REG_TEMP0
);

246 
	}
}

251 
	$em�_fun�i�_��ogue
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�gi��s
) {

252 
mp_u�t_t
 
�gi��s_cou�
 = 
	`MP_POPCOUNT
(
�gi��s
);

253 
��e
->
�ack_size
 = (
�gi��s_cou�
 + s��->
lo�ls_cou�
�* (
u�t32_t
);

254 
mp_u�t_t
 
�d_�ved_�gi��s_mask
 = 
��e
->
�ved_�gi��s_mask
;

256 
	`adju�_�ack
(
��e
, -��e->
�ack_size
);

258 
	`em�_�gi��s_��e
(
��e
, 
�gi��s
);

259 
��e
->
lo�ls_�ack_off�t
 = 
�gi��s_cou�
 * (
u�t32_t
);

260 
��e
->
�ved_�gi��s_mask
 = 
�d_�ved_�gi��s_mask
;

261 
	}
}

264 
	$em�_fun�i�_��ogue
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�gi��s
) {

265 
mp_u�t_t
 
�d_�ved_�gi��s_mask
 = 
��e
->
�ved_�gi��s_mask
;

267 
	`em�_�gi��s_l�d
(
��e
, 
�gi��s
);

269 
	`adju�_�ack
(
��e
, s��->
�ack_size
);

270 
��e
->
�ved_�gi��s_mask
 = 
�d_�ved_�gi��s_mask
;

271 
	}
}

275 
	$asm_rv32_��y
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
lo�ls
) {

276 
��e
->
�ved_�gi��s_mask
 |�(1U << 
REG_FUN_TABLE
�| (1U << 
REG_LOCAL_1
) | \

277 (1U << 
REG_LOCAL_2
�| (1U << 
REG_LOCAL_3
�| (1U << 
INTERNAL_TEMPORARY
);

278 
��e
->
lo�ls_cou�
 = 
lo�ls
;

279 
	`em�_fun�i�_��ogue
(
��e
, s��->
�ved_�gi��s_mask
);

280 
	}
}

282 
	$asm_rv32_ex�
(
asm_rv32_t
 *
��e
) {

283 
	`em�_fun�i�_��ogue
(
��e
, s��->
�ved_�gi��s_mask
);

285 
	`asm_rv32_�code_cjr
(
��e
, 
ASM_RV32_REG_RA
);

286 
	}
}

288 
	$asm_rv32_�d_�ss
(
asm_rv32_t
 *
��e
) {

289 ()
��e
;

290 
	}
}

292 
	$asm_rv32_em�_��_�d
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�dex
) {

293 
mp_u�t_t
 
off�t
 = 
�dex
 * 
ASM_WORD_SIZE
;

294 
��e
->
�ved_�gi��s_mask
 |�(1U << 
ASM_RV32_REG_RA
);

296 i�(
	`IS_IN_C_REGISTER_WINDOW
(
REG_FUN_TABLE
�&& IS_IN_C_REGISTER_WINDOW(
INTERNAL_TEMPORARY
�&& 
	`FIT_SIGNED
(
off�t
, 7)) {

299 
	`asm_rv32_�code_�w
(
��e
, 
	`MAP_IN_C_REGISTER_WINDOW
(
INTERNAL_TEMPORARY
), MAP_IN_C_REGISTER_WINDOW(
REG_FUN_TABLE
), 
off�t
);

300 
	`asm_rv32_�code_cj�r
(
��e
, 
INTERNAL_TEMPORARY
);

304 i�(
	`FIT_UNSIGNED
(
off�t
, 11)) {

307 
	`asm_rv32_�code_lw
(
��e
, 
INTERNAL_TEMPORARY
, 
REG_FUN_TABLE
, 
off�t
);

308 
	`asm_rv32_�code_cj�r
(
��e
, 
INTERNAL_TEMPORARY
);

312 
mp_u�t_t
 
u��
 = 0;

313 
mp_u�t_t
 
low�
 = 0;

314 
	`�l�_immed��
(
off�t
, &
u��
, &
low�
);

322 
	`l�d_u��_immed��
(
��e
, 
INTERNAL_TEMPORARY
, 
u��
);

323 
	`asm_rv32_�code_�dd
(
��e
, 
INTERNAL_TEMPORARY
, 
REG_FUN_TABLE
);

324 
	`asm_rv32_�code_lw
(
��e
, 
INTERNAL_TEMPORARY
, INTERNAL_TEMPORARY, 
low�
);

325 
	`asm_rv32_�code_cj�r
(
��e
, 
INTERNAL_TEMPORARY
);

326 
	}
}

328 
	$asm_rv32_em�_jump_if_�g_eq
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
�b�
) {

329 
�rdiff_t
 
di���m�t
 = (�rdiff_t)(
��e
->
ba�
.
�b�_off�ts
[
�b�
] - s��->ba�.
code_off�t
);

332 i�(
	`FIT_SIGNED
(
di���m�t
, 13)) {

334 
	`asm_rv32_�code_beq
(
��e
, 
rs1
, 
rs2
, 
di���m�t
);

339 
di���m�t
 -�
ASM_WORD_SIZE
;

341 
mp_u�t_t
 
u��
 = 0;

342 
mp_u�t_t
 
low�
 = 0;

343 
	`�l�_immed��
(
di���m�t
, &
u��
, &
low�
);

351 
	`asm_rv32_�code_b�
(
��e
, 
rs1
, 
rs2
, 12);

352 
	`asm_rv32_�code_au�c
(
��e
, 
INTERNAL_TEMPORARY
, 
u��
);

353 
	`asm_rv32_�code_j�r
(
��e
, 
ASM_RV32_REG_ZERO
, 
INTERNAL_TEMPORARY
, 
low�
);

354 
	}
}

356 
	$asm_rv32_em�_jump_if_�g_n�z�o
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
, mp_u�t_�
�b�
) {

357 
�rdiff_t
 
di���m�t
 = (�rdiff_t)(
��e
->
ba�
.
�b�_off�ts
[
�b�
] - s��->ba�.
code_off�t
);

359 i�(
	`FIT_SIGNED
(
di���m�t
, 9�&& 
	`IS_IN_C_REGISTER_WINDOW
(
rs
)) {

361 
	`asm_rv32_�code_cb�z
(
��e
, 
	`MAP_IN_C_REGISTER_WINDOW
(
rs
), 
di���m�t
);

366 i�(
	`FIT_SIGNED
(
di���m�t
, 13)) {

368 
	`asm_rv32_�code_b�
(
��e
, 
rs
, 
ASM_RV32_REG_ZERO
, 
di���m�t
);

373 
di���m�t
 -�
	`IS_IN_C_REGISTER_WINDOW
(
rs
�? 
ASM_HALFWORD_SIZE
 : 
ASM_WORD_SIZE
;

375 
mp_u�t_t
 
u��
 = 0;

376 
mp_u�t_t
 
low�
 = 0;

377 
	`�l�_immed��
(
di���m�t
, &
u��
, &
low�
);

391 i�(
	`IS_IN_C_REGISTER_WINDOW
(
rs
)) {

392 
	`asm_rv32_�code_cbeqz
(
��e
, 
	`MAP_IN_C_REGISTER_WINDOW
(
rs
), 10);

394 
	`asm_rv32_�code_beq
(
��e
, 
rs
, 
ASM_RV32_REG_ZERO
, 12);

396 
	`asm_rv32_�code_au�c
(
��e
, 
INTERNAL_TEMPORARY
, 
u��
);

397 
	`asm_rv32_�code_j�r
(
��e
, 
ASM_RV32_REG_ZERO
, 
INTERNAL_TEMPORARY
, 
low�
);

398 
	}
}

400 
	$asm_rv32_em�_mov_lo�l_�g
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
lo�l
, mp_u�t_�
rs
) {

401 
mp_u�t_t
 
off�t
 = 
��e
->
lo�ls_�ack_off�t
 + (
lo�l
 * 
ASM_WORD_SIZE
);

403 i�(
	`FIT_UNSIGNED
(
off�t
 >> 2, 6)) {

405 
	`asm_rv32_�code_csw�
(
��e
, 
rs
, 
off�t
);

409 i�(
	`FIT_UNSIGNED
(
off�t
, 11)) {

411 
	`asm_rv32_�code_sw
(
��e
, 
rs
, 
ASM_RV32_REG_SP
, 
off�t
);

415 
mp_u�t_t
 
u��
 = 0;

416 
mp_u�t_t
 
low�
 = 0;

417 
	`�l�_immed��
(
off�t
, &
u��
, &
low�
);

424 
	`l�d_u��_immed��
(
��e
, 
INTERNAL_TEMPORARY
, 
u��
);

425 
	`asm_rv32_�code_�dd
(
��e
, 
INTERNAL_TEMPORARY
, 
ASM_RV32_REG_SP
);

426 
	`asm_rv32_�code_sw
(
��e
, 
rs
, 
INTERNAL_TEMPORARY
, 
low�
);

427 
	}
}

429 
	$asm_rv32_em�_mov_�g_lo�l
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
lo�l
) {

430 
mp_u�t_t
 
off�t
 = 
��e
->
lo�ls_�ack_off�t
 + (
lo�l
 * 
ASM_WORD_SIZE
);

432 i�(
	`FIT_UNSIGNED
(
off�t
 >> 2, 6)) {

434 
	`asm_rv32_�code_�w�
(
��e
, 
rd
, 
off�t
);

438 i�(
	`FIT_UNSIGNED
(
off�t
, 11)) {

440 
	`asm_rv32_�code_lw
(
��e
, 
rd
, 
ASM_RV32_REG_SP
, 
off�t
);

444 
mp_u�t_t
 
u��
 = 0;

445 
mp_u�t_t
 
low�
 = 0;

446 
	`�l�_immed��
(
off�t
, &
u��
, &
low�
);

451 
	`l�d_u��_immed��
(
��e
, 
rd
, 
u��
);

452 
	`asm_rv32_�code_�dd
(
��e
, 
rd
, 
ASM_RV32_REG_SP
);

453 
	`asm_rv32_�code_lw
(
��e
, 
rd
,�d, 
low�
);

454 
	}
}

456 
	$asm_rv32_em�_mov_�g_lo�l_addr
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
lo�l
) {

457 
mp_u�t_t
 
off�t
 = 
��e
->
lo�ls_�ack_off�t
 + (
lo�l
 * 
ASM_WORD_SIZE
);

459 i�(
	`FIT_UNSIGNED
(
off�t
, 10�&& off��!�0 && 
	`IS_IN_C_REGISTER_WINDOW
(
rd
)) {

461 
	`asm_rv32_�code_�ddi4�n
(
��e
, 
	`MAP_IN_C_REGISTER_WINDOW
(
rd
), 
off�t
);

465 i�(
	`FIT_UNSIGNED
(
off�t
, 11)) {

467 
	`asm_rv32_�code_addi
(
��e
, 
rd
, 
ASM_RV32_REG_SP
, 
off�t
);

473 
	`l�d_fu�_immed��
(
��e
, 
rd
, 
off�t
);

474 
	`asm_rv32_�code_�dd
(
��e
, 
rd
, 
ASM_RV32_REG_SP
);

475 
	}
}

477 
	$asm_rv32_em�_l�d_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

478 
mp_�t_t
 
s��d_off�t
 = 
off�t
 * (
ASM_WORD_SIZE
);

480 i�(
	`IS_IN_C_REGISTER_WINDOW
(
rd
�&& IS_IN_C_REGISTER_WINDOW(
rs
�&& 
	`FIT_SIGNED
(
off�t
, 7)) {

482 
	`asm_rv32_�code_�w
(
��e
, 
	`MAP_IN_C_REGISTER_WINDOW
(
rd
), MAP_IN_C_REGISTER_WINDOW(
rs
), 
s��d_off�t
);

486 i�(
	`FIT_SIGNED
(
s��d_off�t
, 12)) {

488 
	`asm_rv32_�code_lw
(
��e
, 
rd
, 
rs
, 
s��d_off�t
);

492 
mp_u�t_t
 
u��
 = 0;

493 
mp_u�t_t
 
low�
 = 0;

494 
	`�l�_immed��
(
s��d_off�t
, &
u��
, &
low�
);

499 
	`l�d_u��_immed��
(
��e
, 
rd
, 
u��
);

500 
	`asm_rv32_�code_�dd
(
��e
, 
rd
, 
rs
);

501 
	`asm_rv32_�code_lw
(
��e
, 
rd
,�d, 
low�
);

502 
	}
}

504 
	$asm_rv32_em�_jump
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�b�
) {

505 
�rdiff_t
 
di���m�t
 = (�rdiff_t)(
��e
->
ba�
.
�b�_off�ts
[
�b�
] - s��->ba�.
code_off�t
);

508 i�(
	`FIT_SIGNED
(
di���m�t
, 13)) {

510 
	`asm_rv32_�code_cj
(
��e
, 
di���m�t
);

514 
mp_u�t_t
 
u��
 = 0;

515 
mp_u�t_t
 
low�
 = 0;

516 
	`�l�_immed��
(
di���m�t
, &
u��
, &
low�
);

522 
	`asm_rv32_�code_au�c
(
��e
, 
INTERNAL_TEMPORARY
, 
u��
);

523 
	`asm_rv32_�code_j�r
(
��e
, 
ASM_RV32_REG_ZERO
, 
INTERNAL_TEMPORARY
, 
low�
);

524 
	}
}

526 
	$asm_rv32_em�_��e_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

527 
mp_�t_t
 
s��d_off�t
 = 
off�t
 * 
ASM_WORD_SIZE
;

529 i�(
	`FIT_SIGNED
(
s��d_off�t
, 12)) {

531 
	`asm_rv32_�code_sw
(
��e
, 
rd
, 
rs
, 
s��d_off�t
);

535 
mp_u�t_t
 
u��
 = 0;

536 
mp_u�t_t
 
low�
 = 0;

537 
	`�l�_immed��
(
s��d_off�t
, &
u��
, &
low�
);

542 
	`l�d_u��_immed��
(
��e
, 
rd
, 
u��
);

543 
	`asm_rv32_�code_�dd
(
��e
, 
rd
, 
rs
);

544 
	`asm_rv32_�code_sw
(
��e
, 
rd
,�d, 
low�
);

545 
	}
}

547 
	$asm_rv32_em�_mov_�g_p��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
�b�
) {

548 
�rdiff_t
 
di���m�t
 = (�rdiff_t)(
��e
->
ba�
.
�b�_off�ts
[
�b�
] - s��->ba�.
code_off�t
);

549 
mp_u�t_t
 
u��
 = 0;

550 
mp_u�t_t
 
low�
 = 0;

551 
	`�l�_immed��
(
di���m�t
, &
u��
, &
low�
);

560 
	`asm_rv32_�code_au�c
(
��e
, 
rd
, 
u��
);

561 
	`asm_rv32_�code_addi
(
��e
, 
rd
,�d, 
low�
);

562 
	}
}

564 
	$asm_rv32_em�_l�d16_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

565 
mp_�t_t
 
s��d_off�t
 = 
off�t
 * (
u�t16_t
);

567 i�(
	`FIT_SIGNED
(
s��d_off�t
, 12)) {

569 
	`asm_rv32_�code_lhu
(
��e
, 
rd
, 
rs
, 
s��d_off�t
);

573 
mp_u�t_t
 
u��
 = 0;

574 
mp_u�t_t
 
low�
 = 0;

575 
	`�l�_immed��
(
s��d_off�t
, &
u��
, &
low�
);

580 
	`l�d_u��_immed��
(
��e
, 
rd
, 
u��
);

581 
	`asm_rv32_�code_�dd
(
��e
, 
rd
, 
rs
);

582 
	`asm_rv32_�code_lhu
(
��e
, 
rd
,�d, 
low�
);

583 
	}
}

585 
	$asm_rv32_em�_�timi�d_x�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
) {

586 i�(
rs
 =�
rd
) {

588 
	`asm_rv32_�code_�i
(
��e
, 
rd
, 0);

593 
	`asm_rv32_�code_x�
(
��e
, 
rd
,�d, 
rs
);

594 
	}
}

596 
	$asm_rv32_m�a_com�ris�_eq
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
) {

601 
	`asm_rv32_�code_�i
(
��e
, 
rd
, 1);

602 
	`asm_rv32_�code_beq
(
��e
, 
rs1
, 
rs2
, 6);

603 
	`asm_rv32_�code_�i
(
��e
, 
rd
, 0);

604 
	}
}

606 
	$asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
) {

609 
	`asm_rv32_�code_sub
(
��e
, 
rd
, 
rs1
, 
rs2
);

610 
	`asm_rv32_�code_�tu
(
��e
, 
rd
, 
ASM_RV32_REG_ZERO
,�d);

611 
	}
}

613 
	$asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
, 
bo�
 
unsig�d_com�ris�
) {

615 i�(
unsig�d_com�ris�
) {

616 
	`asm_rv32_�code_�tu
(
��e
, 
rd
, 
rs1
, 
rs2
);

618 
	`asm_rv32_�code_�t
(
��e
, 
rd
, 
rs1
, 
rs2
);

620 
	}
}

622 
	$asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
, 
bo�
 
unsig�d_com�ris�
) {

627 
	`asm_rv32_�code_�i
(
��e
, 
rd
, 1);

628 
	`asm_rv32_�code_beq
(
��e
, 
rs1
, 
rs2
, 8);

629 i�(
unsig�d_com�ris�
) {

630 
	`asm_rv32_�code_�tu
(
��e
, 
rd
, 
rs1
, 
rs2
);

632 
	`asm_rv32_�code_�t
(
��e
, 
rd
, 
rs1
, 
rs2
);

634 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmrv32.h

27 #i�de�
MICROPY_INCLUDED_PY_ASMRV32_H


28 
	#MICROPY_INCLUDED_PY_ASMRV32_H


	)

30 
	~<as��.h
>

32 
	~"py/asmba�.h
"

33 
	~"py/em�.h
"

34 
	~"py/misc.h
"

35 
	~"py/�rsi��tcode.h
"

37 
	#ASM_RV32_REG_X0
 (0)

38 
	#ASM_RV32_REG_X1
 (1)

39 
	#ASM_RV32_REG_X2
 (2)

40 
	#ASM_RV32_REG_X3
 (3)

41 
	#ASM_RV32_REG_X4
 (4)

42 
	#ASM_RV32_REG_X5
 (5)

43 
	#ASM_RV32_REG_X6
 (6)

44 
	#ASM_RV32_REG_X7
 (7)

45 
	#ASM_RV32_REG_X8
 (8)

46 
	#ASM_RV32_REG_X9
 (9)

47 
	#ASM_RV32_REG_X10
 (10)

48 
	#ASM_RV32_REG_X11
 (11)

49 
	#ASM_RV32_REG_X12
 (12)

50 
	#ASM_RV32_REG_X13
 (13)

51 
	#ASM_RV32_REG_X14
 (14)

52 
	#ASM_RV32_REG_X15
 (15)

53 
	#ASM_RV32_REG_X16
 (16)

54 
	#ASM_RV32_REG_X17
 (17)

55 
	#ASM_RV32_REG_X18
 (18)

56 
	#ASM_RV32_REG_X19
 (19)

57 
	#ASM_RV32_REG_X20
 (20)

58 
	#ASM_RV32_REG_X21
 (21)

59 
	#ASM_RV32_REG_X22
 (22)

60 
	#ASM_RV32_REG_X23
 (23)

61 
	#ASM_RV32_REG_X24
 (24)

62 
	#ASM_RV32_REG_X25
 (25)

63 
	#ASM_RV32_REG_X26
 (26)

64 
	#ASM_RV32_REG_X27
 (27)

65 
	#ASM_RV32_REG_X28
 (28)

66 
	#ASM_RV32_REG_X29
 (29)

67 
	#ASM_RV32_REG_X30
 (30)

68 
	#ASM_RV32_REG_X31
 (31)

69 

	)

72 
	#ASM_RV32_REG_ZERO
 (
ASM_RV32_REG_X0
)

	)

73 
	#ASM_RV32_REG_RA
 (
ASM_RV32_REG_X1
)

	)

74 
	#ASM_RV32_REG_SP
 (
ASM_RV32_REG_X2
)

	)

75 
	#ASM_RV32_REG_GP
 (
ASM_RV32_REG_X3
)

	)

76 
	#ASM_RV32_REG_TP
 (
ASM_RV32_REG_X4
)

	)

77 
	#ASM_RV32_REG_T0
 (
ASM_RV32_REG_X5
)

	)

78 
	#ASM_RV32_REG_T1
 (
ASM_RV32_REG_X6
)

	)

79 
	#ASM_RV32_REG_T2
 (
ASM_RV32_REG_X7
)

	)

80 
	#ASM_RV32_REG_A0
 (
ASM_RV32_REG_X10
)

	)

81 
	#ASM_RV32_REG_A1
 (
ASM_RV32_REG_X11
)

	)

82 
	#ASM_RV32_REG_A2
 (
ASM_RV32_REG_X12
)

	)

83 
	#ASM_RV32_REG_A3
 (
ASM_RV32_REG_X13
)

	)

84 
	#ASM_RV32_REG_A4
 (
ASM_RV32_REG_X14
)

	)

85 
	#ASM_RV32_REG_A5
 (
ASM_RV32_REG_X15
)

	)

86 
	#ASM_RV32_REG_A6
 (
ASM_RV32_REG_X16
)

	)

87 
	#ASM_RV32_REG_A7
 (
ASM_RV32_REG_X17
)

	)

88 
	#ASM_RV32_REG_T3
 (
ASM_RV32_REG_X28
)

	)

89 
	#ASM_RV32_REG_T4
 (
ASM_RV32_REG_X29
)

	)

90 
	#ASM_RV32_REG_T5
 (
ASM_RV32_REG_X30
)

	)

91 
	#ASM_RV32_REG_T6
 (
ASM_RV32_REG_X31
)

	)

92 
	#ASM_RV32_REG_FP
 (
ASM_RV32_REG_X8
)

	)

93 
	#ASM_RV32_REG_S0
 (
ASM_RV32_REG_X8
)

	)

94 
	#ASM_RV32_REG_S1
 (
ASM_RV32_REG_X9
)

	)

95 
	#ASM_RV32_REG_S2
 (
ASM_RV32_REG_X18
)

	)

96 
	#ASM_RV32_REG_S3
 (
ASM_RV32_REG_X19
)

	)

97 
	#ASM_RV32_REG_S4
 (
ASM_RV32_REG_X20
)

	)

98 
	#ASM_RV32_REG_S5
 (
ASM_RV32_REG_X21
)

	)

99 
	#ASM_RV32_REG_S6
 (
ASM_RV32_REG_X22
)

	)

100 
	#ASM_RV32_REG_S7
 (
ASM_RV32_REG_X23
)

	)

101 
	#ASM_RV32_REG_S8
 (
ASM_RV32_REG_X24
)

	)

102 
	#ASM_RV32_REG_S9
 (
ASM_RV32_REG_X25
)

	)

103 
	#ASM_RV32_REG_S10
 (
ASM_RV32_REG_X26
)

	)

104 
	#ASM_RV32_REG_S11
 (
ASM_RV32_REG_X27
)

	)

106 
	s_asm_rv32_t
 {

108 
mp_asm_ba�_t
 
	mba�
;

110 
mp_u�t_t
 
	m�ved_�gi��s_mask
;

112 
mp_u�t_t
 
	mlo�ls_cou�
;

114 
mp_u�t_t
 
	m�ack_size
;

116 
mp_u�t_t
 
	mlo�ls_�ack_off�t
;

117 } 
	tasm_rv32_t
;

119 
asm_rv32_��y
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
lo�ls
);

120 
asm_rv32_ex�
(
asm_rv32_t
 *
��e
);

121 
asm_rv32_�d_�ss
(
asm_rv32_t
 *
��e
);

125 
	#RV32_ENCODE_TYPE_B
(
�
, 
�3
, 
rs1
, 
rs2
, 
imm
) \

126 ((
�
 & 0x7F�| ((
�3
 & 0x07�<< 12�| ((
imm
 & 0x800) >> 4) | \

127 ((
imm
 & 0x1E�<< 7�| ((
rs1
 & 0x1F�<< 15�| ((
rs2
 & 0x1F) << 20) | \

128 ((
imm
 & 0x7E0�<< 20�| ((imm & 0x1000�<< 19))

	)

130 
	#RV32_ENCODE_TYPE_I
(
�
, 
�3
, 
rd
, 
rs
, 
imm
) \

131 ((
�
 & 0x7F�| ((
rd
 & 0x1F�<< 7�| ((
�3
 & 0x07) << 12) | \

132 ((
rs
 & 0x1F�<< 15�| ((
imm
 & 0xFFF�<< 20))

	)

134 
	#RV32_ENCODE_TYPE_J
(
�
, 
rd
, 
imm
) \

135 ((
�
 & 0x7F�| ((
rd
 & 0x1F�<< 7�| (
imm
 & 0xFF000) | \

136 ((
imm
 & 0x800�<< 9�| ((imm & 0x7FE�<< 20�| ((imm & 0x100000�<< 11))

	)

138 
	#RV32_ENCODE_TYPE_R
(
�
, 
�3
, 
�7
, 
rd
, 
rs1
, 
rs2
) \

139 ((
�
 & 0x7F�| ((
rd
 & 0x1F�<< 7�| ((
�3
 & 0x07) << 12) | \

140 ((
rs1
 & 0x1F�<< 15�| ((
rs2
 & 0x1F�<< 20�| ((
�7
 & 0x7F�<< 25))

	)

142 
	#RV32_ENCODE_TYPE_S
(
�
, 
�3
, 
rs1
, 
rs2
, 
imm
) \

143 ((
�
 & 0x7F�| ((
imm
 & 0x1F�<< 7�| ((
�3
 & 0x07) << 12) | \

144 ((
rs1
 & 0x1F�<< 15�| ((
rs2
 & 0x1F�<< 20�| ((
imm
 & 0xFE0�<< 20))

	)

146 
	#RV32_ENCODE_TYPE_U
(
�
, 
rd
, 
imm
) \

147 ((
�
 & 0x7F�| ((
rd
 & 0x1F�<< 7�| (
imm
 & 0xFFFFF000))

	)

149 
	#RV32_ENCODE_TYPE_CB
(
�
, 
�3
, 
rs
, 
imm
) \

150 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
rs
 & 0x07) << 7) | \

151 (((
imm
) & 0x100) << 4) | (((imm) & 0xC0) >> 1) | (((imm) & 0x20) >> 3) | \

152 (((
imm
�& 0x18�<< 7�| (((imm�& 0x06�<< 2))

	)

154 
	#RV32_ENCODE_TYPE_CI
(
�
, 
�3
, 
rd
, 
imm
) \

155 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
rd
 & 0x1F) << 7) | \

156 (((
imm
�& 0x20�<< 7�| (((imm�& 0x1F�<< 2))

	)

158 
	#RV32_ENCODE_TYPE_CIW
(
�
, 
�3
, 
rd
, 
imm
) \

159 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
rd
 & 0x07) << 2) | \

160 ((
imm
 & 0x3C0) << 1) | ((imm & 0x30) << 7) | \

161 ((
imm
 & 0x08�<< 2�| ((imm & 0x04�<< 4))

	)

163 
	#RV32_ENCODE_TYPE_CJ
(
�
, 
�3
, 
imm
) \

164 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
imm
 & 0x0E) << 2) | \

165 ((
imm
 & 0x300) << 1) | ((imm & 0x800) << 1) | ((imm & 0x400) >> 2) | \

166 ((
imm
 & 0x80) >> 1) | ((imm & 0x40) << 1) | ((imm & 0x20) >> 3) | \

167 ((
imm
 & 0x10�<< 7))

	)

169 
	#RV32_ENCODE_TYPE_CL
(
�
, 
�3
, 
rd
, 
rs
, 
imm
) \

170 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
rd
 & 0x07) << 2) | \

171 ((
rs
 & 0x07�<< 7�| ((
imm
 & 0x40) >> 1) | ((imm & 0x38) << 7) | \

172 ((
imm
 & 0x04�<< 4))

	)

174 
	#RV32_ENCODE_TYPE_CR
(
�
, 
�4
, 
rs1
, 
rs2
) \

175 ((
�
 & 0x03�| ((
rs2
 & 0x1F�<< 2�| ((
rs1
 & 0x1F�<< 7�| ((
�4
 & 0x0F�<< 12))

	)

177 
	#RV32_ENCODE_TYPE_CSS
(
�
, 
�3
, 
rs
, 
imm
) \

178 ((
�
 & 0x03�| ((
�3
 & 0x07�<< 13�| ((
rs
 & 0x1F�<< 2�| ((
imm
�& 0x3F�<< 7)

	)

180 
asm_rv32_em�_w�d_�code
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�code
);

181 
asm_rv32_em�_h�fw�d_�code
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�code
);

184 
�l�e
 
	$asm_rv32_�code_add
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

186 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x00, 0x00, 
rd
, 
rs1
, 
rs2
));

187 
	}
}

190 
�l�e
 
	$asm_rv32_�code_addi
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
immed��
) {

192 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x13, 0x00, 
rd
, 
rs
, 
immed��
));

193 
	}
}

196 
�l�e
 
	$asm_rv32_�code_�d
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

198 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x07, 0x00, 
rd
, 
rs1
, 
rs2
));

199 
	}
}

202 
�l�e
 
	$asm_rv32_�code_au�c
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
off�t
) {

204 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_U
(0x17, 
rd
, 
off�t
));

205 
	}
}

208 
�l�e
 
	$asm_rv32_�code_beq
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, 
mp_�t_t
 
off�t
) {

210 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_B
(0x63, 0x00, 
rs1
, 
rs2
, 
off�t
));

211 
	}
}

214 
�l�e
 
	$asm_rv32_�code_b�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, 
mp_�t_t
 
off�t
) {

216 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_B
(0x63, 0x01, 
rs1
, 
rs2
, 
off�t
));

217 
	}
}

220 
�l�e
 
	$asm_rv32_�code_�dd
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
) {

222 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CR
(0x02, 0x09, 
rd
, 
rs
));

223 
	}
}

226 
�l�e
 
	$asm_rv32_�code_�ddi
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

228 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CI
(0x01, 0x00, 
rd
, 
immed��
));

229 
	}
}

232 
�l�e
 
	$asm_rv32_�code_�ddi4�n
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
immed��
) {

234 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CIW
(0x00, 0x00, 
rd
, 
immed��
));

235 
	}
}

238 
�l�e
 
	$asm_rv32_�code_cbeqz
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
, 
mp_�t_t
 
off�t
) {

240 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CB
(0x01, 0x06, 
rs
, 
off�t
));

241 
	}
}

244 
�l�e
 
	$asm_rv32_�code_cb�z
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
, 
mp_�t_t
 
off�t
) {

246 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CB
(0x01, 0x07, 
rs
, 
off�t
));

247 
	}
}

250 
�l�e
 
	$asm_rv32_�code_cj
(
asm_rv32_t
 *
��e
, 
mp_�t_t
 
off�t
) {

252 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CJ
(0x01, 0x05, 
off�t
));

253 
	}
}

256 
�l�e
 
	$asm_rv32_�code_cj�r
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
) {

258 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CR
(0x02, 0x09, 
rs
, 0));

259 
	}
}

262 
�l�e
 
	$asm_rv32_�code_cjr
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
) {

264 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CR
(0x02, 0x08, 
rs
, 0));

265 
	}
}

268 
�l�e
 
	$asm_rv32_�code_�i
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

270 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CI
(0x01, 0x02, 
rd
, 
immed��
));

271 
	}
}

274 
�l�e
 
	$asm_rv32_�code_�ui
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

276 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CI
(0x01, 0x03, 
rd
, 
immed��
 >> 12));

277 
	}
}

280 
�l�e
 
	$asm_rv32_�code_�w
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

282 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CL
(0x00, 0x02, 
rd
, 
rs
, 
off�t
));

283 
	}
}

286 
�l�e
 
	$asm_rv32_�code_�w�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
off�t
) {

288 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CI
(0x02, 0x02, 
rd
, ((
off�t
 & 0xC0) >> 6) | (offset & 0x3C)));

289 
	}
}

292 
�l�e
 
	$asm_rv32_�code_cmv
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
) {

294 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CR
(0x02, 0x08, 
rd
, 
rs
));

295 
	}
}

298 
�l�e
 
	$asm_rv32_�code_csw�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
, mp_u�t_�
off�t
) {

300 
	`asm_rv32_em�_h�fw�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_CSS
(0x02, 0x06, 
rs
, ((
off�t
 & 0xC0) >> 6) | (offset & 0x3C)));

301 
	}
}

304 
�l�e
 
	$asm_rv32_�code_j�r
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

306 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x67, 0x00, 
rd
, 
rs
, 
off�t
));

307 
	}
}

310 
�l�e
 
	$asm_rv32_�code_lbu
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

312 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x03, 0x04, 
rd
, 
rs
, 
off�t
));

313 
	}
}

316 
�l�e
 
	$asm_rv32_�code_lhu
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

318 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x03, 0x05, 
rd
, 
rs
, 
off�t
));

319 
	}
}

322 
�l�e
 
	$asm_rv32_�code_lui
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
) {

324 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_U
(0x37, 
rd
, 
immed��
));

325 
	}
}

328 
�l�e
 
	$asm_rv32_�code_lw
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
) {

330 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x03, 0x02, 
rd
, 
rs
, 
off�t
));

331 
	}
}

334 
�l�e
 
	$asm_rv32m_�code_mul
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

336 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x00, 0x01, 
rd
, 
rs1
, 
rs2
));

337 
	}
}

340 
�l�e
 
	$asm_rv32_�code_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

342 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x06, 0x00, 
rd
, 
rs1
, 
rs2
));

343 
	}
}

346 
�l�e
 
	$asm_rv32_�code_�l
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

348 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x01, 0x00, 
rd
, 
rs1
, 
rs2
));

349 
	}
}

352 
�l�e
 
	$asm_rv32_�code_�li
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, mp_u�t_�
immed��
) {

354 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x13, 0x01, 
rd
, 
rs
, 
immed��
 & 0x1F));

355 
	}
}

358 
�l�e
 
	$asm_rv32_�code_�l
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

360 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x05, 0x00, 
rd
, 
rs1
, 
rs2
));

361 
	}
}

364 
�l�e
 
	$asm_rv32_�code_�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

366 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x02, 0x00, 
rd
, 
rs1
, 
rs2
));

367 
	}
}

370 
�l�e
 
	$asm_rv32_�code_�tu
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

372 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x03, 0x00, 
rd
, 
rs1
, 
rs2
));

373 
	}
}

376 
�l�e
 
	$asm_rv32_�code_�a
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

378 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x05, 0x20, 
rd
, 
rs1
, 
rs2
));

379 
	}
}

382 
�l�e
 
	$asm_rv32_�code_sub
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

384 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x00, 0x20, 
rd
, 
rs1
, 
rs2
));

385 
	}
}

388 
�l�e
 
	$asm_rv32_�code_sb
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs2
, mp_u�t_�
rs1
, 
mp_�t_t
 
off�t
) {

390 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_S
(0x23, 0x00, 
rs1
, 
rs2
, 
off�t
));

391 
	}
}

394 
�l�e
 
	$asm_rv32_�code_sh
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs2
, mp_u�t_�
rs1
, 
mp_�t_t
 
off�t
) {

396 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_S
(0x23, 0x01, 
rs1
, 
rs2
, 
off�t
));

397 
	}
}

400 
�l�e
 
	$asm_rv32_�code_sw
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs2
, mp_u�t_�
rs1
, 
mp_�t_t
 
off�t
) {

402 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_S
(0x23, 0x02, 
rs1
, 
rs2
, 
off�t
));

403 
	}
}

406 
�l�e
 
	$asm_rv32_�code_x�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs1
, mp_u�t_�
rs2
) {

408 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_R
(0x33, 0x04, 0x00, 
rd
, 
rs1
, 
rs2
));

409 
	}
}

412 
�l�e
 
	$asm_rv32_�code_x�i
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
immed��
) {

414 
	`asm_rv32_em�_w�d_�code
(
��e
, 
	`RV32_ENCODE_TYPE_I
(0x13, 0x04, 
rd
, 
rs
, 
immed��
));

415 
	}
}

417 
	#ASM_WORD_SIZE
 (4)

	)

418 
	#ASM_HALFWORD_SIZE
 (2)

	)

420 
	#REG_RET
 
ASM_RV32_REG_A0


	)

421 
	#REG_ARG_1
 
ASM_RV32_REG_A0


	)

422 
	#REG_ARG_2
 
ASM_RV32_REG_A1


	)

423 
	#REG_ARG_3
 
ASM_RV32_REG_A2


	)

424 
	#REG_ARG_4
 
ASM_RV32_REG_A3


	)

425 
	#REG_TEMP0
 
ASM_RV32_REG_T1


	)

426 
	#REG_TEMP1
 
ASM_RV32_REG_T2


	)

427 
	#REG_TEMP2
 
ASM_RV32_REG_T3


	)

428 
	#REG_FUN_TABLE
 
ASM_RV32_REG_S1


	)

429 
	#REG_LOCAL_1
 
ASM_RV32_REG_S3


	)

430 
	#REG_LOCAL_2
 
ASM_RV32_REG_S4


	)

431 
	#REG_LOCAL_3
 
ASM_RV32_REG_S5


	)

433 
asm_rv32_m�a_com�ris�_eq
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
);

434 
asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
);

435 
asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
, 
bo�
 
unsig�d_com�ris�
);

436 
asm_rv32_m�a_com�ris�_�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
rd
, 
bo�
 
unsig�d_com�ris�
);

438 #ifde�
GENERIC_ASM_API


440 
asm_rv32_em�_��_�d
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�dex
);

441 
asm_rv32_em�_jump
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
�b�
);

442 
asm_rv32_em�_jump_if_�g_eq
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs1
, mp_u�t_�
rs2
, mp_u�t_�
�b�
);

443 
asm_rv32_em�_jump_if_�g_n�z�o
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rs
, mp_u�t_�
�b�
);

444 
asm_rv32_em�_l�d16_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
);

445 
asm_rv32_em�_l�d_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
, 
mp_�t_t
 
off�t
);

446 
asm_rv32_em�_mov_lo�l_�g
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
lo�l
, mp_u�t_�
rs
);

447 
asm_rv32_em�_mov_�g_lo�l
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
lo�l
);

448 
asm_rv32_em�_mov_�g_lo�l_addr
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
lo�l
);

449 
asm_rv32_em�_mov_�g_p��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
�b�
);

450 
asm_rv32_em�_�timi�d_l�d_immed��
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, 
mp_�t_t
 
immed��
);

451 
asm_rv32_em�_�timi�d_x�
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
rd
, mp_u�t_�
rs
);

452 
asm_rv32_em�_��e_�g_�g_off�t
(
asm_rv32_t
 *
��e
, 
mp_u�t_t
 
sour�
, mp_u�t_�
ba�
, 
mp_�t_t
 
off�t
);

454 
	#ASM_T
 
asm_rv32_t


	)

455 
	#ASM_ENTRY
(
��e
, 
�b�s
�
	`asm_rv32_��y
(��e,�ab�s)

	)

456 
	#ASM_EXIT
(
��e
�
	`asm_rv32_ex�
(��e)

	)

457 
	#ASM_END_PASS
(
��e
�
	`asm_rv32_�d_�ss
(��e)

	)

459 
	#ASM_ADD_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�dd
(��e,�d,�s)

	)

460 
	#ASM_AND_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�d
(��e,�d,�s,�d)

	)

461 
	#ASM_ASR_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�a
(��e,�d,�d,�s)

	)

462 
	#ASM_CALL_IND
(
��e
, 
�dex
�
	`asm_rv32_em�_��_�d
(��e, index)

	)

463 
	#ASM_JUMP
(
��e
, 
�b�
�
	`asm_rv32_em�_jump
(��e,�ab�)

	)

464 
	#ASM_JUMP_IF_REG_EQ
(
��e
, 
rs1
, 
rs2
, 
�b�
�
	`asm_rv32_em�_jump_if_�g_eq
(��e,�s1,�s2,�ab�)

	)

465 
	#ASM_JUMP_IF_REG_NONZERO
(
��e
, 
rs
, 
�b�
, 
bo�_��
�
	`asm_rv32_em�_jump_if_�g_n�z�o
(��e,�s,�ab�)

	)

466 
	#ASM_JUMP_IF_REG_ZERO
(
��e
, 
rs
, 
�b�
, 
bo�_��
�
	`asm_rv32_em�_jump_if_�g_eq
(��e,�s, 
ASM_RV32_REG_ZERO
,�ab�)

	)

467 
	#ASM_JUMP_REG
(
��e
, 
rs
�
	`asm_rv32_�code_cjr
(��e,�s)

	)

468 
	#ASM_LOAD16_REG_REG_OFFSET
(
��e
, 
rd
, 
rs
, 
off�t
�
	`asm_rv32_em�_l�d16_�g_�g_off�t
(��e,�d,�s, off�t)

	)

469 
	#ASM_LOAD16_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_lhu
(��e,�d,�s, 0)

	)

470 
	#ASM_LOAD32_REG_REG
(
��e
, 
rd
, 
rs
�
	`ASM_LOAD_REG_REG_OFFSET
(��e,�d,�s, 0)

	)

471 
	#ASM_LOAD8_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_lbu
(��e,�d,�s, 0)

	)

472 
	#ASM_LOAD_REG_REG_OFFSET
(
��e
, 
rd
, 
rs
, 
off�t
�
	`asm_rv32_em�_l�d_�g_�g_off�t
(��e,�d,�s, off�t)

	)

473 
	#ASM_LOAD_REG_REG
(
��e
, 
rd
, 
rs
�
	`ASM_LOAD32_REG_REG
(��e,�d,�s)

	)

474 
	#ASM_LSL_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�l
(��e,�d,�d,�s)

	)

475 
	#ASM_LSR_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�l
(��e,�d,�d,�s)

	)

476 
	#ASM_MOV_LOCAL_REG
(
��e
, 
lo�l
, 
rs
�
	`asm_rv32_em�_mov_lo�l_�g
(��e,�o�l,�s)

	)

477 
	#ASM_MOV_REG_IMM
(
��e
, 
rd
, 
imm
�
	`asm_rv32_em�_�timi�d_l�d_immed��
(��e,�d, imm)

	)

478 
	#ASM_MOV_REG_LOCAL_ADDR
(
��e
, 
rd
, 
lo�l
�
	`asm_rv32_em�_mov_�g_lo�l_addr
(��e,�d,�o�l)

	)

479 
	#ASM_MOV_REG_LOCAL
(
��e
, 
rd
, 
lo�l
�
	`asm_rv32_em�_mov_�g_lo�l
(��e,�d,�o�l)

	)

480 
	#ASM_MOV_REG_PCREL
(
��e
, 
rd
, 
�b�
�
	`asm_rv32_em�_mov_�g_p��
(��e,�d,�ab�)

	)

481 
	#ASM_MOV_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_cmv
(��e,�d,�s)

	)

482 
	#ASM_MUL_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32m_�code_mul
(��e,�d,�d,�s)

	)

483 
	#ASM_NEG_REG
(
��e
, 
rd
�
	`asm_rv32_�code_sub
(��e,�d, 
ASM_RV32_REG_ZERO
,�d)

	)

484 
	#ASM_NOT_REG
(
��e
, 
rd
�
	`asm_rv32_�code_x�i
(��e,�d,�d, -1)

	)

485 
	#ASM_OR_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_�
(��e,�d,�d,�s)

	)

486 
	#ASM_STORE16_REG_REG
(
��e
, 
rs1
, 
rs2
�
	`asm_rv32_�code_sh
(��e,�s1,�s2, 0)

	)

487 
	#ASM_STORE32_REG_REG
(
��e
, 
rs1
, 
rs2
�
	`ASM_STORE_REG_REG_OFFSET
(��e,�s1,�s2, 0)

	)

488 
	#ASM_STORE8_REG_REG
(
��e
, 
rs1
, 
rs2
�
	`asm_rv32_�code_sb
(��e,�s1,�s2, 0)

	)

489 
	#ASM_STORE_REG_REG_OFFSET
(
��e
, 
rd
, 
rs
, 
off�t
�
	`asm_rv32_em�_��e_�g_�g_off�t
(��e,�d,�s, off�t)

	)

490 
	#ASM_STORE_REG_REG
(
��e
, 
rs1
, 
rs2
�
	`ASM_STORE32_REG_REG
(��e,�s1,�s2)

	)

491 
	#ASM_SUB_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_�code_sub
(��e,�d,�d,�s)

	)

492 
	#ASM_XOR_REG_REG
(
��e
, 
rd
, 
rs
�
	`asm_rv32_em�_�timi�d_x�
(��e,�d,�s)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmthumb.c

27 
	~<�dio.h
>

28 
	~<as��.h
>

29 
	~<�r�g.h
>

31 
	~"py/mpc�fig.h
"

34 #i�
MICROPY_EMIT_THUMB
 || 
MICROPY_EMIT_INLINE_THUMB


36 
	~"py/mp��e.h
"

37 
	~"py/asmthumb.h
"

38 
	~"py/misc.h
"

40 
	#UNSIGNED_FIT5
(
x
�((
u�t32_t
)(x�< 32)

	)

41 
	#UNSIGNED_FIT7
(
x
�((
u�t32_t
)(x�< 128)

	)

42 
	#UNSIGNED_FIT8
(
x
�(((x�& 0xffffff00�=�0)

	)

43 
	#UNSIGNED_FIT16
(
x
�(((x�& 0xffff0000�=�0)

	)

44 
	#SIGNED_FIT8
(
x
�(((x�& 0xffffff80�=�0�|| (((x�& 0xffffff80�=�0xffffff80)

	)

45 
	#SIGNED_FIT9
(
x
�(((x�& 0xffffff00�=�0�|| (((x�& 0xffffff00�=�0xffffff00)

	)

46 
	#SIGNED_FIT12
(
x
�(((x�& 0xfffff800�=�0�|| (((x�& 0xfffff800�=�0xfffff800)

	)

47 
	#SIGNED_FIT23
(
x
�(((x�& 0xffc00000�=�0�|| (((x�& 0xffc00000�=�0xffc00000)

	)

50 
	#OP_ADD_W_RRI_HI
(
�g_�c
�(0xf200 | (�g_�c))

	)

51 
	#OP_ADD_W_RRI_LO
(
�g_de�
, 
imm11
�((imm11 << 4 & 0x7000�|�eg_de� << 8 | (imm11 & 0xff))

	)

52 
	#OP_SUB_W_RRI_HI
(
�g_�c
�(0xf2a0 | (�g_�c))

	)

53 
	#OP_SUB_W_RRI_LO
(
�g_de�
, 
imm11
�((imm11 << 4 & 0x7000�|�eg_de� << 8 | (imm11 & 0xff))

	)

55 
	#OP_LDR_W_HI
(
�g_ba�
�(0xf8d0 | (�g_ba�))

	)

56 
	#OP_LDR_W_LO
(
�g_de�
, 
imm12
�(�eg_de��<< 12 | (imm12))

	)

58 
	#OP_LDRH_W_HI
(
�g_ba�
�(0xf8b0 | (�g_ba�))

	)

59 
	#OP_LDRH_W_LO
(
�g_de�
, 
imm12
�(�eg_de��<< 12 | (imm12))

	)

61 
�l�e
 
by�
 *
	$asm_thumb_g�_cur_to_wr�e_by�s
(
asm_thumb_t
 *
as
, 
n
) {

62  
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 
n
);

63 
	}
}

88 
	#OP_PUSH_RLIST
(
��i�
�(0xb400 | (��i�))

	)

89 
	#OP_PUSH_RLIST_LR
(
��i�
�(0xb400 | 0x0100 | (��i�))

	)

90 
	#OP_POP_RLIST
(
��i�
�(0xbc00 | (��i�))

	)

91 
	#OP_POP_RLIST_PC
(
��i�
�(0xbc00 | 0x0100 | (��i�))

	)

94 
	#OP_ADD_SP
(
num_w�ds
�(0xb000 | (num_w�ds))

	)

95 
	#OP_SUB_SP
(
num_w�ds
�(0xb080 | (num_w�ds))

	)

108 
	$asm_thumb_��y
(
asm_thumb_t
 *
as
, 
num_lo�ls
) {

109 
	`as��
(
num_lo�ls
 >= 0);

113 #i�
MICROPY_DYNAMIC_COMPILER
 || 
MICROPY_EMIT_ARM
 || (
	`def�ed
(
__�m__
�&& !def�ed(
__thumb2__
�&& !def�ed(
__thumb__
))

114 #i�
MICROPY_DYNAMIC_COMPILER


115 i�(
mp_dy�mic_comp��
.
�tive_�ch
 =�
MP_NATIVE_ARCH_ARMV6
)

118 
	`asm_thumb_�32
(
as
, 0x4010, 0xe92d);

119 
	`asm_thumb_�32
(
as
, 0xe009, 0xe28f);

120 
	`asm_thumb_�32
(
as
, 0xff3e, 0xe12f);

121 
	`asm_thumb_�32
(
as
, 0x4010, 0xe8bd);

122 
	`asm_thumb_�32
(
as
, 0xff1e, 0xe12f);

131 
u�t
 
�gli�
;

132 
u�t
 
�ack_adju�
;

134 
num_lo�ls
) {

136 
�gli�
 = 0xf2;

137 
�ack_adju�
 = 0;

141 
�gli�
 = 0xf2;

142 
�ack_adju�
 = 0;

146 
�gli�
 = 0xfe;

147 
�ack_adju�
 = 0;

151 
�gli�
 = 0xfe;

152 
�ack_adju�
 = 0;

156 
�gli�
 = 0xfe;

157 
�ack_adju�
 = ((
num_lo�ls
 - 3) + 1) & (~1);

160 
	`asm_thumb_�16
(
as
, 
	`OP_PUSH_RLIST_LR
(
�gli�
));

161 i�(
�ack_adju�
 > 0) {

162 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

163 i�(
	`UNSIGNED_FIT7
(
�ack_adju�
)) {

164 
	`asm_thumb_�16
(
as
, 
	`OP_SUB_SP
(
�ack_adju�
));

166 
	`asm_thumb_�32
(
as
, 
	`OP_SUB_W_RRI_HI
(
ASM_THUMB_REG_SP
), 
	`OP_SUB_W_RRI_LO
(ASM_THUMB_REG_SP, 
�ack_adju�
 * 4));

169 
adj
 = 
�ack_adju�
;

171 !
	`UNSIGNED_FIT7
(
adj
)) {

172 
	`asm_thumb_�16
(
as
, 
	`OP_SUB_SP
(127));

173 
adj
 -= 127;

175 
	`asm_thumb_�16
(
as
, 
	`OP_SUB_SP
(
adj
));

178 
as
->
push_�gli�
 = 
�gli�
;

179 
as
->
�ack_adju�
 = stack_adjust;

180 
	}
}

182 
	$asm_thumb_ex�
(
asm_thumb_t
 *
as
) {

183 i�(
as
->
�ack_adju�
 > 0) {

184 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

185 i�(
	`UNSIGNED_FIT7
(
as
->
�ack_adju�
)) {

186 
	`asm_thumb_�16
(
as
, 
	`OP_ADD_SP
�s->
�ack_adju�
));

188 
	`asm_thumb_�32
(
as
, 
	`OP_ADD_W_RRI_HI
(
ASM_THUMB_REG_SP
), 
	`OP_ADD_W_RRI_LO
(ASM_THUMB_REG_SP,�s->
�ack_adju�
 * 4));

191 
adj
 = 
as
->
�ack_adju�
;

193 !
	`UNSIGNED_FIT7
(
adj
)) {

194 
	`asm_thumb_�16
(
as
, 
	`OP_ADD_SP
(127));

195 
adj
 -= 127;

197 
	`asm_thumb_�16
(
as
, 
	`OP_ADD_SP
(
adj
));

200 
	`asm_thumb_�16
(
as
, 
	`OP_POP_RLIST_PC
�s->
push_�gli�
));

201 
	}
}

203 
mp_u�t_t
 
	$g�_�b�_de�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
) {

204 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

205  
as
->
ba�
.
�b�_off�ts
[
�b�
];

206 
	}
}

208 
	$asm_thumb_�16
(
asm_thumb_t
 *
as
, 
u�t
 
�
) {

209 
by�
 *
c
 = 
	`asm_thumb_g�_cur_to_wr�e_by�s
(
as
, 2);

210 i�(
c
 !�
NULL
) {

212 
c
[0] = 
�
;

213 
c
[1] = 
�
 >> 8;

215 
	}
}

217 
	$asm_thumb_�32
(
asm_thumb_t
 *
as
, 
u�t
 
�1
, u��
�2
) {

218 
by�
 *
c
 = 
	`asm_thumb_g�_cur_to_wr�e_by�s
(
as
, 4);

219 i�(
c
 !�
NULL
) {

221 
c
[0] = 
�1
;

222 
c
[1] = 
�1
 >> 8;

223 
c
[2] = 
�2
;

224 
c
[3] = 
�2
 >> 8;

226 
	}
}

228 
	#OP_FORMAT_4
(
�
, 
�o_de�
, 
�o_�c
�((��| (�lo_�c�<< 3�| (�o_de�))

	)

230 
	$asm_thumb_f�m�_4
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_�c
) {

231 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

232 
	`as��
(
�o_�c
 < 
ASM_THUMB_REG_R8
);

233 
	`asm_thumb_�16
(
as
, 
	`OP_FORMAT_4
(
�
, 
�o_de�
, 
�o_�c
));

234 
	}
}

236 
	$asm_thumb_mov_�g_�g
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

237 
u�t
 
�_lo
;

238 i�(
�g_�c
 < 8) {

239 
�_lo
 = 
�g_�c
 << 3;

241 
�_lo
 = 0x40 | ((
�g_�c
 - 8) << 3);

243 i�(
�g_de�
 < 8) {

244 
�_lo
 |�
�g_de�
;

246 
�_lo
 |�0x80 | (
�g_de�
 - 8);

249 
	`asm_thumb_�16
(
as
, 0x4600 | 
�_lo
);

250 
	}
}

253 
	$asm_thumb_mov_�g_i16
(
asm_thumb_t
 *
as
, 
u�t
 
mov_�
, u��
�g_de�
, 
i16_�c
) {

254 
	`as��
(
�g_de�
 < 
ASM_THUMB_REG_R15
);

256 
	`asm_thumb_�32
(
as
, 
mov_�
 | ((
i16_�c
 >> 1�& 0x0400�| ((i16_��>> 12�& 0xf), ((i16_��<< 4�& 0x7000�| (
�g_de�
 << 8) | (i16_src & 0xff));

257 
	}
}

259 
	$asm_thumb_mov_�o_i16
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, 
i16_�c
) {

260 
	`asm_thumb_mov_�o_i8
(
as
, 
�o_de�
, (
i16_�c
 >> 8) & 0xff);

261 
	`asm_thumb_l�_�o_�o_i5
(
as
, 
�o_de�
,�lo_dest, 8);

262 
	`asm_thumb_add_�o_i8
(
as
, 
�o_de�
, 
i16_�c
 & 0xff);

263 
	}
}

265 
	#OP_B_N
(
by�_off�t
�(0xe000 | (((by�_off�t�>> 1�& 0x07ff))

	)

267 
bo�
 
	$asm_thumb_b_n_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
) {

268 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

269 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

270 
�l
 -= 4;

271 
	`asm_thumb_�16
(
as
, 
	`OP_B_N
(
�l
));

272  
as
->
ba�
.
�ss
 !�
MP_ASM_PASS_EMIT
 || 
	`SIGNED_FIT12
(
�l
);

273 
	}
}

275 
	#OP_BCC_N
(
c�d
, 
by�_off�t
�(0xd000 | ((c�d�<< 8�| (((by�_off�t�>> 1�& 0x00ff))

	)

278 
	#OP_BCC_W_HI
(
c�d
, 
by�_off�t
�(0xf000 | ((c�d�<< 6�| (((by�_off�t�>> 10�& 0x0400�| (((by�_off�t�>> 14�& 0x003f))

	)

279 
	#OP_BCC_W_LO
(
by�_off�t
�(0x8000 | ((by�_off�t�& 0x2000�| (((by�_off�t�>> 1�& 0x0fff))

	)

281 
bo�
 
	$asm_thumb_bcc_nw_�b�
(
asm_thumb_t
 *
as
, 
c�d
, 
u�t
 
�b�
, 
bo�
 
wide
) {

282 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

283 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

284 
�l
 -= 4;

285 i�(!
wide
) {

286 
	`asm_thumb_�16
(
as
, 
	`OP_BCC_N
(
c�d
, 
�l
));

287  
as
->
ba�
.
�ss
 !�
MP_ASM_PASS_EMIT
 || 
	`SIGNED_FIT9
(
�l
);

288 } i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

289 
	`asm_thumb_�32
(
as
, 
	`OP_BCC_W_HI
(
c�d
, 
�l
), 
	`OP_BCC_W_LO
(rel));

290  
�ue
;

293  
�l�
;

295 
	}
}

297 
	#OP_BL_HI
(
by�_off�t
�(0xf000 | (((by�_off�t�>> 12�& 0x07ff))

	)

298 
	#OP_BL_LO
(
by�_off�t
�(0xf800 | (((by�_off�t�>> 1�& 0x07ff))

	)

300 
bo�
 
	$asm_thumb_bl_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
) {

301 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

302 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

303 
�l
 -= 4;

304 
	`asm_thumb_�32
(
as
, 
	`OP_BL_HI
(
�l
), 
	`OP_BL_LO
(rel));

305  
as
->
ba�
.
�ss
 !�
MP_ASM_PASS_EMIT
 || 
	`SIGNED_FIT23
(
�l
);

306 
	}
}

308 
size_t
 
	$asm_thumb_mov_�g_i32
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, 
mp_u�t_t
 
i32
) {

312 
size_t
 
loc
 = 
	`mp_asm_ba�_g�_code_pos
(&
as
->
ba�
);

314 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

315 
	`asm_thumb_mov_�g_i16
(
as
, 
ASM_THUMB_OP_MOVW
, 
�g_de�
, 
i32
);

316 
	`asm_thumb_mov_�g_i16
(
as
, 
ASM_THUMB_OP_MOVT
, 
�g_de�
, 
i32
 >> 16);

319 
	`as��
(
�g_de�
 < 
ASM_THUMB_REG_R8
);

322 
	`as��
(!
as
->
ba�
.
code_ba�
 || !(3u & (
u���_t
)as->base.code_base));

330 i�(
as
->
ba�
.
code_off�t
 & 2u) {

331 
	`asm_thumb_�16
(
as
, 
ASM_THUMB_OP_NOP
);

333 
	`asm_thumb_ldr_�o_p��_i8
(
as
, 
�g_de�
, 0);

334 
	`asm_thumb_�16
(
as
, 
	`OP_B_N
(2));

335 
	`asm_thumb_�16
(
as
, 
i32
 & 0xffff);

336 
	`asm_thumb_�16
(
as
, 
i32
 >> 16);

339  
loc
;

340 
	}
}

342 
	$asm_thumb_mov_�g_i32_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, 
i32
) {

343 i�(
�g_de�
 < 8 && 
	`UNSIGNED_FIT8
(
i32
)) {

344 
	`asm_thumb_mov_�o_i8
(
as
, 
�g_de�
, 
i32
);

345 } i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

346 i�(
	`UNSIGNED_FIT16
(
i32
)) {

347 
	`asm_thumb_mov_�g_i16
(
as
, 
ASM_THUMB_OP_MOVW
, 
�g_de�
, 
i32
);

349 
	`asm_thumb_mov_�g_i32
(
as
, 
�g_de�
, 
i32
);

352 
u�t
 
�o_de�
 = 
�g_de�
;

353 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

355 
bo�
 
�g�e
 = 
i32
 < 0 && ((i32 + i32) & 0xffffffffu);

356 i�(
�g�e
) {

357 
i32
 = -i32;

360 
u�t
 
�z
 = 
	`mp_�z
(
i32
);

361 
u�t
 
�z
 = 
i32
 ? 
	`mp_�z
(i32) : 0;

362 
	`as��
(
�z
 + 
�z
 <= 32);

363 i�(
�z
 + 
�z
 >= 24) {

364 
	`asm_thumb_mov_�o_i8
(
as
, 
�o_de�
, (
i32
 >> 
�z
) & 0xff);

365 
	`asm_thumb_l�_�o_�o_i5
(
as
, 
�o_de�
,�lo_de�, 
�z
);

366 } i�(
	`UNSIGNED_FIT16
(
i32
)) {

367 
	`asm_thumb_mov_�o_i16
(
as
, 
�o_de�
, 
i32
);

369 i�(
�g�e
) {

371 
�g�e
 = 
�l�
;

372 
i32
 = -i32;

374 
	`asm_thumb_mov_�g_i32
(
as
, 
�o_de�
, 
i32
);

376 i�(
�g�e
) {

377 
	`asm_thumb_�g_�o_�o
(
as
, 
�o_de�
,�lo_dest);

380 
	}
}

382 
	#OP_STR_TO_SP_OFFSET
(
�o_de�
, 
w�d_off�t
�(0x9000 | (�lo_de��<< 8�| ((w�d_off�t�& 0x00ff))

	)

383 
	#OP_LDR_FROM_SP_OFFSET
(
�o_de�
, 
w�d_off�t
�(0x9800 | (�lo_de��<< 8�| ((w�d_off�t�& 0x00ff))

	)

385 
	$asm_thumb_mov_lo�l_check
(
asm_thumb_t
 *
as
, 
w�d_off�t
) {

386 i�(
as
->
ba�
.
�ss
 >�
MP_ASM_PASS_EMIT
) {

387 
	`as��
(
w�d_off�t
 >= 0);

388 i�(!
	`UNSIGNED_FIT8
(
w�d_off�t
)) {

389 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("too many�ocals for�ative method"));

392 
	}
}

394 
	$asm_thumb_mov_lo�l_�g
(
asm_thumb_t
 *
as
, 
lo�l_num
, 
u�t
 
�o_�c
) {

395 
	`as��
(
�o_�c
 < 
ASM_THUMB_REG_R8
);

396 
w�d_off�t
 = 
lo�l_num
;

397 
	`asm_thumb_mov_lo�l_check
(
as
, 
w�d_off�t
);

398 
	`asm_thumb_�16
(
as
, 
	`OP_STR_TO_SP_OFFSET
(
�o_�c
, 
w�d_off�t
));

399 
	}
}

401 
	$asm_thumb_mov_�g_lo�l
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, 
lo�l_num
) {

402 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

403 
w�d_off�t
 = 
lo�l_num
;

404 
	`asm_thumb_mov_lo�l_check
(
as
, 
w�d_off�t
);

405 
	`asm_thumb_�16
(
as
, 
	`OP_LDR_FROM_SP_OFFSET
(
�o_de�
, 
w�d_off�t
));

406 
	}
}

408 
	#OP_ADD_REG_SP_OFFSET
(
�o_de�
, 
w�d_off�t
�(0xa800 | (�lo_de��<< 8�| ((w�d_off�t�& 0x00ff))

	)

410 
	$asm_thumb_mov_�g_lo�l_addr
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, 
lo�l_num
) {

411 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

412 
w�d_off�t
 = 
lo�l_num
;

413 
	`as��
(
as
->
ba�
.
�ss
 < 
MP_ASM_PASS_EMIT
 || 
w�d_off�t
 >= 0);

414 
	`asm_thumb_�16
(
as
, 
	`OP_ADD_REG_SP_OFFSET
(
�o_de�
, 
w�d_off�t
));

415 
	}
}

417 
	$asm_thumb_mov_�g_p��
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�b�
) {

418 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

419 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

420 
�l
 |= 1;

421 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

422 
�l
 -= 6 + 4;

423 
	`asm_thumb_mov_�g_i16
(
as
, 
ASM_THUMB_OP_MOVW
, 
�o_de�
, 
�l
);

424 
	`asm_thumb_sxth_�o_�o
(
as
, 
�o_de�
,�lo_dest);

426 
�l
 -= 8 + 4;

428 
	`asm_thumb_mov_�o_i16
(
as
, 
�o_de�
, 
�l
);

430 
	`asm_thumb_sxth_�o_�o
(
as
, 
�o_de�
,�lo_dest);

432 
	`asm_thumb_add_�g_�g
(
as
, 
�o_de�
, 
ASM_THUMB_REG_R15
);

433 
	}
}

436 
�l�e
 
	$asm_thumb_ldr_�g_�g_i12
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
) {

437 
	`asm_thumb_�32
(
as
, 
	`OP_LDR_W_HI
(
�g_ba�
), 
	`OP_LDR_W_LO
(
�g_de�
, 
w�d_off�t
 * 4));

438 
	}
}

441 
	$asm_thumb_add_�g_�g_off�t
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
off�t
, u��
off�t_shi�
) {

442 i�(
�g_de�
 < 
ASM_THUMB_REG_R8
 && 
�g_ba�
 < ASM_THUMB_REG_R8) {

443 i�(
off�t
 << 
off�t_shi�
 < 256) {

444 i�(
�g_de�
 !�
�g_ba�
) {

445 
	`asm_thumb_mov_�g_�g
(
as
, 
�g_de�
, 
�g_ba�
);

447 
	`asm_thumb_add_�o_i8
(
as
, 
�g_de�
, 
off�t
 << 
off�t_shi�
);

448 } i�(
	`UNSIGNED_FIT8
(
off�t
�&& 
�g_de�
 !�
�g_ba�
) {

449 
	`asm_thumb_mov_�o_i8
(
as
, 
�g_de�
, 
off�t
);

450 
	`asm_thumb_l�_�o_�o_i5
(
as
, 
�g_de�
,�eg_de�, 
off�t_shi�
);

451 
	`asm_thumb_add_�o_�o_�o
(
as
, 
�g_de�
,�eg_de�, 
�g_ba�
);

452 } i�(
�g_de�
 !�
�g_ba�
) {

453 
	`asm_thumb_mov_�o_i16
(
as
, 
�g_de�
, 
off�t
 << 
off�t_shi�
);

454 
	`asm_thumb_add_�o_�o_�o
(
as
, 
�g_de�
,�eg_dest,�eg_dest);

456 
u�t
 
�g_�h�
 = 
�g_de�
 ^ 7;

457 
	`asm_thumb_�16
(
as
, 
	`OP_PUSH_RLIST
((1 << 
�g_�h�
)));

458 
	`asm_thumb_mov_�o_i16
(
as
, 
�g_�h�
, 
off�t
 << 
off�t_shi�
);

459 
	`asm_thumb_add_�o_�o_�o
(
as
, 
�g_de�
,�eg_de�, 
�g_�h�
);

460 
	`asm_thumb_�16
(
as
, 
	`OP_POP_RLIST
((1 << 
�g_�h�
)));

463 
	`as��
(0);

465 
	}
}

467 
	$asm_thumb_ldr_�g_�g_i12_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
) {

468 i�(
�g_de�
 < 
ASM_THUMB_REG_R8
 && 
�g_ba�
 < ASM_THUMB_REG_R8 && 
	`UNSIGNED_FIT5
(
w�d_off�t
)) {

469 
	`asm_thumb_ldr_�o_�o_i5
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
);

470 } i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

471 
	`asm_thumb_ldr_�g_�g_i12
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
);

473 
	`asm_thumb_add_�g_�g_off�t
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
 - 31, 2);

474 
	`asm_thumb_ldr_�o_�o_i5
(
as
, 
�g_de�
,�eg_dest, 31);

476 
	}
}

479 
�l�e
 
	$asm_thumb_ldrh_�g_�g_i12
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
u�t16_off�t
) {

480 
	`asm_thumb_�32
(
as
, 
	`OP_LDRH_W_HI
(
�g_ba�
), 
	`OP_LDRH_W_LO
(
�g_de�
, 
u�t16_off�t
 * 2));

481 
	}
}

483 
	$asm_thumb_ldrh_�g_�g_i12_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
u�t16_off�t
) {

484 i�(
�g_de�
 < 
ASM_THUMB_REG_R8
 && 
�g_ba�
 < ASM_THUMB_REG_R8 && 
	`UNSIGNED_FIT5
(
u�t16_off�t
)) {

485 
	`asm_thumb_ldrh_�o_�o_i5
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
);

486 } i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

487 
	`asm_thumb_ldrh_�g_�g_i12
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
);

489 
	`asm_thumb_add_�g_�g_off�t
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
 - 31, 1);

490 
	`asm_thumb_ldrh_�o_�o_i5
(
as
, 
�g_de�
,�eg_dest, 31);

492 
	}
}

495 
	#OP_BW_HI
(
by�_off�t
�(0xf000 | (((by�_off�t�>> 12�& 0x07ff))

	)

496 
	#OP_BW_LO
(
by�_off�t
�(0xb800 | (((by�_off�t�>> 1�& 0x07ff))

	)

498 
	$asm_thumb_b_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
) {

499 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

500 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

501 
�l
 -= 4;

503 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 <= -4) {

506 i�(
	`SIGNED_FIT12
(
�l
)) {

507 
	`asm_thumb_�16
(
as
, 
	`OP_B_N
(
�l
));

514 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

515 
	`asm_thumb_�32
(
as
, 
	`OP_BW_HI
(
�l
), 
	`OP_BW_LO
(rel));

517 i�(
	`SIGNED_FIT12
(
�l
)) {

519 
	`asm_thumb_�16
(
as
, 
	`OP_B_N
(
�l
));

521 
	`asm_thumb_�16
(
as
, 
ASM_THUMB_OP_NOP
);

522 i�(
de�
 !�(
mp_u�t_t
)-1) {

524 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("native method�oo big"));

528 
	}
}

530 
	$asm_thumb_bcc_�b�
(
asm_thumb_t
 *
as
, 
c�d
, 
u�t
 
�b�
) {

531 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

532 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

533 
�l
 -= 4;

535 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 <= -4) {

538 i�(
	`SIGNED_FIT9
(
�l
)) {

539 
	`asm_thumb_�16
(
as
, 
	`OP_BCC_N
(
c�d
, 
�l
));

546 i�(
	`asm_thumb_�low_�mv7m
(
as
)) {

547 
	`asm_thumb_�32
(
as
, 
	`OP_BCC_W_HI
(
c�d
, 
�l
), 
	`OP_BCC_W_LO
(rel));

550 
	`asm_thumb_�16
(
as
, 
	`OP_BCC_N
(
c�d
 ^ 1, 0));

551 
	`asm_thumb_b_�b�
(
as
, 
�b�
);

553 
	}
}

555 
	$asm_thumb_bcc_�l9
(
asm_thumb_t
 *
as
, 
c�d
, 
�l
) {

556 
�l
 -= 4;

557 
	`as��
(
	`SIGNED_FIT9
(
�l
));

558 
	`asm_thumb_�16
(
as
, 
	`OP_BCC_N
(
c�d
, 
�l
));

559 
	}
}

561 
	$asm_thumb_b_�l12
(
asm_thumb_t
 *
as
, 
�l
) {

562 
�l
 -= 4;

563 
	`as��
(
	`SIGNED_FIT12
(
�l
));

564 
	`asm_thumb_�16
(
as
, 
	`OP_B_N
(
�l
));

565 
	}
}

567 
	#OP_BLX
(
�g
�(0x4780 | (�eg�<< 3))

	)

568 
	#OP_SVC
(
�g
�(0xdf00 | (�g))

	)

570 
	$asm_thumb_bl_�d
(
asm_thumb_t
 *
as
, 
u�t
 
fun_id
, u��
�g_�mp
) {

572 
	`asm_thumb_ldr_�g_�g_i12_�timi�d
(
as
, 
�g_�mp
, 
ASM_THUMB_REG_FUN_TABLE
, 
fun_id
);

573 
	`asm_thumb_�16
(
as
, 
	`OP_BLX
(
�g_�mp
));

574 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmthumb.h

26 #i�de�
MICROPY_INCLUDED_PY_ASMTHUMB_H


27 
	#MICROPY_INCLUDED_PY_ASMTHUMB_H


	)

29 
	~<as��.h
>

30 
	~"py/misc.h
"

31 
	~"py/asmba�.h
"

32 
	~"py/�rsi��tcode.h
"

34 
	#ASM_THUMB_REG_R0
 (0)

	)

35 
	#ASM_THUMB_REG_R1
 (1)

	)

36 
	#ASM_THUMB_REG_R2
 (2)

	)

37 
	#ASM_THUMB_REG_R3
 (3)

	)

38 
	#ASM_THUMB_REG_R4
 (4)

	)

39 
	#ASM_THUMB_REG_R5
 (5)

	)

40 
	#ASM_THUMB_REG_R6
 (6)

	)

41 
	#ASM_THUMB_REG_R7
 (7)

	)

42 
	#ASM_THUMB_REG_R8
 (8)

	)

43 
	#ASM_THUMB_REG_R9
 (9)

	)

44 
	#ASM_THUMB_REG_R10
 (10)

	)

45 
	#ASM_THUMB_REG_R11
 (11)

	)

46 
	#ASM_THUMB_REG_R12
 (12)

	)

47 
	#ASM_THUMB_REG_R13
 (13)

	)

48 
	#ASM_THUMB_REG_R14
 (14)

	)

49 
	#ASM_THUMB_REG_R15
 (15)

	)

50 
	#ASM_THUMB_REG_SP
 (
ASM_THUMB_REG_R13
)

	)

51 
	#ASM_THUMB_REG_LR
 (
REG_R14
)

	)

53 
	#ASM_THUMB_CC_EQ
 (0x0)

	)

54 
	#ASM_THUMB_CC_NE
 (0x1)

	)

55 
	#ASM_THUMB_CC_CS
 (0x2)

	)

56 
	#ASM_THUMB_CC_CC
 (0x3)

	)

57 
	#ASM_THUMB_CC_MI
 (0x4)

	)

58 
	#ASM_THUMB_CC_PL
 (0x5)

	)

59 
	#ASM_THUMB_CC_VS
 (0x6)

	)

60 
	#ASM_THUMB_CC_VC
 (0x7)

	)

61 
	#ASM_THUMB_CC_HI
 (0x8)

	)

62 
	#ASM_THUMB_CC_LS
 (0x9)

	)

63 
	#ASM_THUMB_CC_GE
 (0xa)

	)

64 
	#ASM_THUMB_CC_LT
 (0xb)

	)

65 
	#ASM_THUMB_CC_GT
 (0xc)

	)

66 
	#ASM_THUMB_CC_LE
 (0xd)

	)

68 
	s_asm_thumb_t
 {

69 
mp_asm_ba�_t
 
	mba�
;

70 
u�t32_t
 
	mpush_�gli�
;

71 
u�t32_t
 
	m�ack_adju�
;

72 } 
	tasm_thumb_t
;

74 #i�
MICROPY_DYNAMIC_COMPILER


76 
�l�e
 
bo�
 
	$asm_thumb_�low_�mv7m
(
asm_thumb_t
 *
as
) {

77  
MP_NATIVE_ARCH_ARMV7M
 <�
mp_dy�mic_comp��
.
�tive_�ch


78 && 
mp_dy�mic_comp��
.
�tive_�ch
 <�
MP_NATIVE_ARCH_ARMV7EMDP
;

79 
	}
}

83 
�l�e
 
bo�
 
	$asm_thumb_�low_�mv7m
(
asm_thumb_t
 *
as
) {

84  
MICROPY_EMIT_THUMB_ARMV7M
;

85 
	}
}

89 
�l�e
 
	$asm_thumb_�d_�ss
(
asm_thumb_t
 *
as
) {

90 ()
as
;

91 
	}
}

93 
asm_thumb_��y
(
asm_thumb_t
 *
as
, 
num_lo�ls
);

94 
asm_thumb_ex�
(
asm_thumb_t
 *
as
);

99 
	#ASM_THUMB_OP_IT
 (0xbf00)

	)

100 
	#ASM_THUMB_OP_ITE_EQ
 (0xbf0c)

	)

101 
	#ASM_THUMB_OP_ITE_NE
 (0xbf14)

	)

102 
	#ASM_THUMB_OP_ITE_CS
 (0xbf2c)

	)

103 
	#ASM_THUMB_OP_ITE_CC
 (0xbf34)

	)

104 
	#ASM_THUMB_OP_ITE_MI
 (0xbf4c)

	)

105 
	#ASM_THUMB_OP_ITE_PL
 (0xbf54)

	)

106 
	#ASM_THUMB_OP_ITE_VS
 (0xbf6c)

	)

107 
	#ASM_THUMB_OP_ITE_VC
 (0xbf74)

	)

108 
	#ASM_THUMB_OP_ITE_HI
 (0xbf8c)

	)

109 
	#ASM_THUMB_OP_ITE_LS
 (0xbf94)

	)

110 
	#ASM_THUMB_OP_ITE_GE
 (0xb�c)

	)

111 
	#ASM_THUMB_OP_ITE_LT
 (0xbfb4)

	)

112 
	#ASM_THUMB_OP_ITE_GT
 (0xbfcc)

	)

113 
	#ASM_THUMB_OP_ITE_LE
 (0xbfd4)

	)

115 
	#ASM_THUMB_OP_NOP
 (0xbf00)

	)

116 
	#ASM_THUMB_OP_WFI
 (0xbf30)

	)

117 
	#ASM_THUMB_OP_CPSID_I
 (0xb672)

118 
	#ASM_THUMB_OP_CPSIE_I
 (0xb662)

119 

	)

120 
asm_thumb_�16
(
asm_thumb_t
 *
as
, 
u�t
 
�
);

121 
asm_thumb_�32
(
asm_thumb_t
 *
as
, 
u�t
 
�1
, u��
�2
);

123 
�l�e
 
	$asm_thumb_�_cc
(
asm_thumb_t
 *
as
, 
u�t
 
cc
, u��
mask
) {

124 
	`asm_thumb_�16
(
as
, 
ASM_THUMB_OP_IT
 | (
cc
 << 4�| 
mask
);

125 
	}
}

129 
	#ASM_THUMB_FORMAT_1_LSL
 (0x0000)

	)

130 
	#ASM_THUMB_FORMAT_1_LSR
 (0x0800)

	)

131 
	#ASM_THUMB_FORMAT_1_ASR
 (0x1000)

	)

133 
	#ASM_THUMB_FORMAT_1_ENCODE
(
�
, 
�o_de�
, 
�o_�c
, 
off�t
) \

134 ((
�
�| ((
off�t
�<< 6�| ((
�o_�c
�<< 3�| (
�o_de�
))

	)

136 
�l�e
 
	$asm_thumb_f�m�_1
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_�c
, u��
off�t
) {

137 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

138 
	`as��
(
�o_�c
 < 
ASM_THUMB_REG_R8
);

139 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_1_ENCODE
(
�
, 
�o_de�
, 
�o_�c
, 
off�t
));

140 
	}
}

144 
	#ASM_THUMB_FORMAT_2_ADD
 (0x1800)

	)

145 
	#ASM_THUMB_FORMAT_2_SUB
 (0x1a00)

	)

146 
	#ASM_THUMB_FORMAT_2_REG_OPERAND
 (0x0000)

	)

147 
	#ASM_THUMB_FORMAT_2_IMM_OPERAND
 (0x0400)

	)

149 
	#ASM_THUMB_FORMAT_2_ENCODE
(
�
, 
�o_de�
, 
�o_�c
, 
�c_b
) \

150 ((
�
�| ((
�c_b
�<< 6�| ((
�o_�c
�<< 3�| (
�o_de�
))

	)

152 
�l�e
 
	$asm_thumb_f�m�_2
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_�c
, 
�c_b
) {

153 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

154 
	`as��
(
�o_�c
 < 
ASM_THUMB_REG_R8
);

155 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_2_ENCODE
(
�
, 
�o_de�
, 
�o_�c
, 
�c_b
));

156 
	}
}

158 
�l�e
 
	$asm_thumb_add_�o_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c_a
, u��
�o_�c_b
) {

159 
	`asm_thumb_f�m�_2
(
as
, 
ASM_THUMB_FORMAT_2_ADD
 | 
ASM_THUMB_FORMAT_2_REG_OPERAND
, 
�o_de�
, 
�o_�c_a
, 
�o_�c_b
);

160 
	}
}

161 
�l�e
 
	$asm_thumb_add_�o_�o_i3
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c_a
, 
i3_�c
) {

162 
	`asm_thumb_f�m�_2
(
as
, 
ASM_THUMB_FORMAT_2_ADD
 | 
ASM_THUMB_FORMAT_2_IMM_OPERAND
, 
�o_de�
, 
�o_�c_a
, 
i3_�c
);

163 
	}
}

164 
�l�e
 
	$asm_thumb_sub_�o_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c_a
, u��
�o_�c_b
) {

165 
	`asm_thumb_f�m�_2
(
as
, 
ASM_THUMB_FORMAT_2_SUB
 | 
ASM_THUMB_FORMAT_2_REG_OPERAND
, 
�o_de�
, 
�o_�c_a
, 
�o_�c_b
);

166 
	}
}

167 
�l�e
 
	$asm_thumb_sub_�o_�o_i3
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c_a
, 
i3_�c
) {

168 
	`asm_thumb_f�m�_2
(
as
, 
ASM_THUMB_FORMAT_2_SUB
 | 
ASM_THUMB_FORMAT_2_IMM_OPERAND
, 
�o_de�
, 
�o_�c_a
, 
i3_�c
);

169 
	}
}

174 
	#ASM_THUMB_FORMAT_3_MOV
 (0x2000)

	)

175 
	#ASM_THUMB_FORMAT_3_CMP
 (0x2800)

	)

176 
	#ASM_THUMB_FORMAT_3_ADD
 (0x3000)

	)

177 
	#ASM_THUMB_FORMAT_3_SUB
 (0x3800)

	)

178 
	#ASM_THUMB_FORMAT_3_LDR
 (0x4800)

	)

180 
	#ASM_THUMB_FORMAT_3_ENCODE
(
�
, 
�o
, 
i8
�((��| (�lo�<< 8�| (i8))

	)

182 
�l�e
 
	$asm_thumb_f�m�_3
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o
, 
i8
) {

183 
	`as��
(
�o
 < 
ASM_THUMB_REG_R8
);

184 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_3_ENCODE
(
�
, 
�o
, 
i8
));

185 
	}
}

187 
�l�e
 
	$asm_thumb_mov_�o_i8
(
asm_thumb_t
 *
as
, 
u�t
 
�o
, 
i8
) {

188 
	`asm_thumb_f�m�_3
(
as
, 
ASM_THUMB_FORMAT_3_MOV
, 
�o
, 
i8
);

189 
	}
}

190 
�l�e
 
	$asm_thumb_cmp_�o_i8
(
asm_thumb_t
 *
as
, 
u�t
 
�o
, 
i8
) {

191 
	`asm_thumb_f�m�_3
(
as
, 
ASM_THUMB_FORMAT_3_CMP
, 
�o
, 
i8
);

192 
	}
}

193 
�l�e
 
	$asm_thumb_add_�o_i8
(
asm_thumb_t
 *
as
, 
u�t
 
�o
, 
i8
) {

194 
	`asm_thumb_f�m�_3
(
as
, 
ASM_THUMB_FORMAT_3_ADD
, 
�o
, 
i8
);

195 
	}
}

196 
�l�e
 
	$asm_thumb_sub_�o_i8
(
asm_thumb_t
 *
as
, 
u�t
 
�o
, 
i8
) {

197 
	`asm_thumb_f�m�_3
(
as
, 
ASM_THUMB_FORMAT_3_SUB
, 
�o
, 
i8
);

198 
	}
}

199 
�l�e
 
	$asm_thumb_ldr_�o_p��_i8
(
asm_thumb_t
 *
as
, 
u�t
 
�o
, u��
i8
) {

200 
	`asm_thumb_f�m�_3
(
as
, 
ASM_THUMB_FORMAT_3_LDR
, 
�o
, 
i8
);

201 
	}
}

205 
	#ASM_THUMB_FORMAT_4_AND
 (0x4000)

	)

206 
	#ASM_THUMB_FORMAT_4_EOR
 (0x4040)

	)

207 
	#ASM_THUMB_FORMAT_4_LSL
 (0x4080)

	)

208 
	#ASM_THUMB_FORMAT_4_LSR
 (0x40c0)

	)

209 
	#ASM_THUMB_FORMAT_4_ASR
 (0x4100)

	)

210 
	#ASM_THUMB_FORMAT_4_ADC
 (0x4140)

	)

211 
	#ASM_THUMB_FORMAT_4_SBC
 (0x4180)

	)

212 
	#ASM_THUMB_FORMAT_4_ROR
 (0x41c0)

	)

213 
	#ASM_THUMB_FORMAT_4_TST
 (0x4200)

	)

214 
	#ASM_THUMB_FORMAT_4_NEG
 (0x4240)

	)

215 
	#ASM_THUMB_FORMAT_4_CMP
 (0x4280)

	)

216 
	#ASM_THUMB_FORMAT_4_CMN
 (0x42c0)

	)

217 
	#ASM_THUMB_FORMAT_4_ORR
 (0x4300)

	)

218 
	#ASM_THUMB_FORMAT_4_MUL
 (0x4340)

	)

219 
	#ASM_THUMB_FORMAT_4_BIC
 (0x4380)

	)

220 
	#ASM_THUMB_FORMAT_4_MVN
 (0x43c0)

	)

222 
asm_thumb_f�m�_4
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_�c
);

224 
�l�e
 
	$asm_thumb_cmp_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
) {

225 
	`asm_thumb_f�m�_4
(
as
, 
ASM_THUMB_FORMAT_4_CMP
, 
�o_de�
, 
�o_�c
);

226 
	}
}

227 
�l�e
 
	$asm_thumb_mvn_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
) {

228 
	`asm_thumb_f�m�_4
(
as
, 
ASM_THUMB_FORMAT_4_MVN
, 
�o_de�
, 
�o_�c
);

229 
	}
}

230 
�l�e
 
	$asm_thumb_�g_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
) {

231 
	`asm_thumb_f�m�_4
(
as
, 
ASM_THUMB_FORMAT_4_NEG
, 
�o_de�
, 
�o_�c
);

232 
	}
}

237 
	#ASM_THUMB_FORMAT_5_ADD
 (0x4400)

	)

238 
	#ASM_THUMB_FORMAT_5_BX
 (0x4700)

	)

240 
	#ASM_THUMB_FORMAT_5_ENCODE
(
�
, 
r_de�
, 
r_�c
) \

241 ((
�
�| ((
r_de�
�<< 4 & 0x0080�| ((
r_�c
�<< 3�| (�_de��& 0x0007))

	)

243 
�l�e
 
	$asm_thumb_f�m�_5
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
r_de�
, u��
r_�c
) {

244 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_5_ENCODE
(
�
, 
r_de�
, 
r_�c
));

245 
	}
}

247 
�l�e
 
	$asm_thumb_add_�g_�g
(
asm_thumb_t
 *
as
, 
u�t
 
r_de�
, u��
r_�c
) {

248 
	`asm_thumb_f�m�_5
(
as
, 
ASM_THUMB_FORMAT_5_ADD
, 
r_de�
, 
r_�c
);

249 
	}
}

250 
�l�e
 
	$asm_thumb_bx_�g
(
asm_thumb_t
 *
as
, 
u�t
 
r_�c
) {

251 
	`asm_thumb_f�m�_5
(
as
, 
ASM_THUMB_FORMAT_5_BX
, 0, 
r_�c
);

252 
	}
}

261 
	#ASM_THUMB_FORMAT_9_STR
 (0x6000)

	)

262 
	#ASM_THUMB_FORMAT_9_LDR
 (0x6800)

	)

263 
	#ASM_THUMB_FORMAT_9_WORD_TRANSFER
 (0x0000)

	)

264 
	#ASM_THUMB_FORMAT_9_BYTE_TRANSFER
 (0x1000)

	)

266 
	#ASM_THUMB_FORMAT_10_STRH
 (0x8000)

	)

267 
	#ASM_THUMB_FORMAT_10_LDRH
 (0x8800)

	)

269 
	#ASM_THUMB_FORMAT_9_10_ENCODE
(
�
, 
�o_de�
, 
�o_ba�
, 
off�t
) \

270 ((
�
�| (((
off�t
�<< 6�& 0x07c0�| ((
�o_ba�
�<< 3�| (
�o_de�
))

	)

272 
�l�e
 
	$asm_thumb_f�m�_9_10
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_ba�
, u��
off�t
) {

273 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_9_10_ENCODE
(
�
, 
�o_de�
, 
�o_ba�
, 
off�t
));

274 
	}
}

276 
�l�e
 
	$asm_thumb_�r_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_�c
, u��
�o_ba�
, u��
w�d_off�t
) {

277 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_9_STR
 | 
ASM_THUMB_FORMAT_9_WORD_TRANSFER
, 
�o_�c
, 
�o_ba�
, 
w�d_off�t
);

278 
	}
}

279 
�l�e
 
	$asm_thumb_�rb_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_�c
, u��
�o_ba�
, u��
by�_off�t
) {

280 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_9_STR
 | 
ASM_THUMB_FORMAT_9_BYTE_TRANSFER
, 
�o_�c
, 
�o_ba�
, 
by�_off�t
);

281 
	}
}

282 
�l�e
 
	$asm_thumb_�rh_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_�c
, u��
�o_ba�
, u��
u�t16_off�t
) {

283 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_10_STRH
, 
�o_�c
, 
�o_ba�
, 
u�t16_off�t
);

284 
	}
}

285 
�l�e
 
	$asm_thumb_ldr_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_ba�
, u��
w�d_off�t
) {

286 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_9_LDR
 | 
ASM_THUMB_FORMAT_9_WORD_TRANSFER
, 
�o_de�
, 
�o_ba�
, 
w�d_off�t
);

287 
	}
}

288 
�l�e
 
	$asm_thumb_ldrb_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_ba�
, u��
by�_off�t
) {

289 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_9_LDR
 | 
ASM_THUMB_FORMAT_9_BYTE_TRANSFER
, 
�o_de�
, 
�o_ba�
, 
by�_off�t
);

290 
	}
}

291 
�l�e
 
	$asm_thumb_ldrh_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_ba�
, u��
u�t16_off�t
) {

292 
	`asm_thumb_f�m�_9_10
(
as
, 
ASM_THUMB_FORMAT_10_LDRH
, 
�o_de�
, 
�o_ba�
, 
u�t16_off�t
);

293 
	}
}

294 
�l�e
 
	$asm_thumb_l�_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
, u��
shi�
) {

295 
	`asm_thumb_f�m�_1
(
as
, 
ASM_THUMB_FORMAT_1_LSL
, 
�o_de�
, 
�o_�c
, 
shi�
);

296 
	}
}

297 
�l�e
 
	$asm_thumb_a�_�o_�o_i5
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
, u��
shi�
) {

298 
	`asm_thumb_f�m�_1
(
as
, 
ASM_THUMB_FORMAT_1_ASR
, 
�o_de�
, 
�o_�c
, 
shi�
);

299 
	}
}

303 
	#ASM_THUMB_FORMAT_11_ENCODE
(
�
, 
�o_de�
, 
�o_�c
) \

304 ((
�
�| ((
�o_�c
�<< 3�| (
�o_de�
))

	)

306 
	#ASM_THUMB_FORMAT_11_SXTH
 (0xb200)

	)

307 
	#ASM_THUMB_FORMAT_11_SXTB
 (0xb240)

	)

308 
	#ASM_THUMB_FORMAT_11_UXTH
 (0xb280)

	)

309 
	#ASM_THUMB_FORMAT_11_UXTB
 (0xb2c0)

	)

311 
�l�e
 
	$asm_thumb_f�m�_11
(
asm_thumb_t
 *
as
, 
u�t
 
�
, u��
�o_de�
, u��
�o_�c
) {

312 
	`as��
(
�o_de�
 < 
ASM_THUMB_REG_R8
);

313 
	`as��
(
�o_�c
 < 
ASM_THUMB_REG_R8
);

314 
	`asm_thumb_�16
(
as
, 
	`ASM_THUMB_FORMAT_11_ENCODE
(
�
, 
�o_de�
, 
�o_�c
));

315 
	}
}

317 
�l�e
 
	$asm_thumb_sxth_�o_�o
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�o_�c
) {

318 
	`asm_thumb_f�m�_11
(
as
, 
ASM_THUMB_FORMAT_11_SXTH
, 
�o_de�
, 
�o_�c
);

319 
	}
}

323 
	#ASM_THUMB_OP_MOVW
 (0xf240)

	)

324 
	#ASM_THUMB_OP_MOVT
 (0xf2c0)

	)

326 
asm_thumb_mov_�g_�g
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
);

327 
asm_thumb_mov_�g_i16
(
asm_thumb_t
 *
as
, 
u�t
 
mov_�
, u��
�g_de�
, 
i16_�c
);

330 
bo�
 
asm_thumb_b_n_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
);

331 
bo�
 
asm_thumb_bcc_nw_�b�
(
asm_thumb_t
 *
as
, 
c�d
, 
u�t
 
�b�
, bo� 
wide
);

332 
bo�
 
asm_thumb_bl_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
);

334 
size_t
 
asm_thumb_mov_�g_i32
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, 
mp_u�t_t
 
i32_�c
);

335 
asm_thumb_mov_�g_i32_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, 
i32_�c
);

336 
asm_thumb_mov_lo�l_�g
(
asm_thumb_t
 *
as
, 
lo�l_num_de�
, 
u�t
 
�o_�c
);

337 
asm_thumb_mov_�g_lo�l
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, 
lo�l_num
);

338 
asm_thumb_mov_�g_lo�l_addr
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, 
lo�l_num
);

339 
asm_thumb_mov_�g_p��
(
asm_thumb_t
 *
as
, 
u�t
 
�o_de�
, u��
�b�
);

341 
asm_thumb_ldr_�g_�g_i12_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
);

342 
asm_thumb_ldrh_�g_�g_i12_�timi�d
(
asm_thumb_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
u�t16_off�t
);

344 
asm_thumb_b_�b�
(
asm_thumb_t
 *
as
, 
u�t
 
�b�
);

345 
asm_thumb_bcc_�b�
(
asm_thumb_t
 *
as
, 
cc
, 
u�t
 
�b�
);

346 
asm_thumb_bl_�d
(
asm_thumb_t
 *
as
, 
u�t
 
fun_id
, u��
�g_�mp
);

347 
asm_thumb_bcc_�l9
(
asm_thumb_t
 *
as
, 
cc
, 
�l
);

348 
asm_thumb_b_�l12
(
asm_thumb_t
 *
as
, 
�l
);

351 
	#ASM_THUMB_REG_FUN_TABLE
 
ASM_THUMB_REG_R7


	)

353 #i�
GENERIC_ASM_API


358 
	#ASM_WORD_SIZE
 (4)

	)

360 
	#REG_RET
 
ASM_THUMB_REG_R0


	)

361 
	#REG_ARG_1
 
ASM_THUMB_REG_R0


	)

362 
	#REG_ARG_2
 
ASM_THUMB_REG_R1


	)

363 
	#REG_ARG_3
 
ASM_THUMB_REG_R2


	)

364 
	#REG_ARG_4
 
ASM_THUMB_REG_R3


	)

367 
	#REG_TEMP0
 
ASM_THUMB_REG_R0


	)

368 
	#REG_TEMP1
 
ASM_THUMB_REG_R1


	)

369 
	#REG_TEMP2
 
ASM_THUMB_REG_R2


	)

371 
	#REG_LOCAL_1
 
ASM_THUMB_REG_R4


	)

372 
	#REG_LOCAL_2
 
ASM_THUMB_REG_R5


	)

373 
	#REG_LOCAL_3
 
ASM_THUMB_REG_R6


	)

374 
	#REG_LOCAL_NUM
 (3)

	)

376 
	#REG_FUN_TABLE
 
ASM_THUMB_REG_FUN_TABLE


	)

378 
	#ASM_T
 
asm_thumb_t


	)

379 
	#ASM_END_PASS
 
asm_thumb_�d_�ss


	)

380 
	#ASM_ENTRY
 
asm_thumb_��y


	)

381 
	#ASM_EXIT
 
asm_thumb_ex�


	)

383 
	#ASM_JUMP
 
asm_thumb_b_�b�


	)

384 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

386 
	`asm_thumb_cmp_�o_i8
(
as
, 
�g
, 0); \

387 
	`asm_thumb_bcc_�b�
(
as
, 
ASM_THUMB_CC_EQ
, 
�b�
); \

388 } 0)

	)

389 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

391 
	`asm_thumb_cmp_�o_i8
(
as
, 
�g
, 0); \

392 
	`asm_thumb_bcc_�b�
(
as
, 
ASM_THUMB_CC_NE
, 
�b�
); \

393 } 0)

	)

394 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

396 
	`asm_thumb_cmp_�o_�o
(
as
, 
�g1
, 
�g2
); \

397 
	`asm_thumb_bcc_�b�
(
as
, 
ASM_THUMB_CC_EQ
, 
�b�
); \

398 } 0)

	)

399 
	#ASM_JUMP_REG
(
as
, 
�g
�
	`asm_thumb_bx_�g
(�s), (�g))

	)

400 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_thumb_bl_�d
�s, idx, 
ASM_THUMB_REG_R3
)

	)

402 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g
�
	`asm_thumb_mov_lo�l_�g
(�s), (lo�l_num), (�g))

	)

403 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
�
	`asm_thumb_mov_�g_i32_�timi�d
(�s), (�g_de�), (imm))

	)

404 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_thumb_mov_�g_lo�l
(�s), (�g_de�), (lo�l_num))

	)

405 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_mov_�g_�g
(�s), (�g_de�), (�g_�c))

	)

406 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_thumb_mov_�g_lo�l_addr
(�s), (�g_de�), (lo�l_num))

	)

407 
	#ASM_MOV_REG_PCREL
(
as
, 
�o_de�
, 
�b�
�
	`asm_thumb_mov_�g_p��
(�s), (�o_de�), (�b�))

	)

409 
	#ASM_NOT_REG
(
as
, 
�g_de�
�
	`asm_thumb_mvn_�o_�o
(�s), (�g_de�), (�g_de�))

	)

410 
	#ASM_NEG_REG
(
as
, 
�g_de�
�
	`asm_thumb_�g_�o_�o
(�s), (�g_de�), (�g_de�))

	)

411 
	#ASM_LSL_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_LSL
, (�g_de�), (�g_shi�))

	)

412 
	#ASM_LSR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_LSR
, (�g_de�), (�g_shi�))

	)

413 
	#ASM_ASR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_ASR
, (�g_de�), (�g_shi�))

	)

414 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_ORR
, (�g_de�), (�g_�c))

	)

415 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_EOR
, (�g_de�), (�g_�c))

	)

416 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_AND
, (�g_de�), (�g_�c))

	)

417 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_add_�o_�o_�o
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

418 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_sub_�o_�o_�o
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

419 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_thumb_f�m�_4
(�s), 
ASM_THUMB_FORMAT_4_MUL
, (�g_de�), (�g_�c))

	)

421 
	#ASM_LOAD_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_thumb_ldr_�o_�o_i5
(�s), (�g_de�), (�g_ba�), 0)

	)

422 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_thumb_ldr_�g_�g_i12_�timi�d
(�s), (�g_de�), (�g_ba�), (w�d_off�t))

	)

423 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_thumb_ldrb_�o_�o_i5
(�s), (�g_de�), (�g_ba�), 0)

	)

424 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_thumb_ldrh_�o_�o_i5
(�s), (�g_de�), (�g_ba�), 0)

	)

425 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
�
	`asm_thumb_ldrh_�g_�g_i12_�timi�d
(�s), (�g_de�), (�g_ba�), (u�t16_off�t))

	)

426 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_thumb_ldr_�o_�o_i5
(�s), (�g_de�), (�g_ba�), 0)

	)

428 
	#ASM_STORE_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_thumb_�r_�o_�o_i5
(�s), (�g_�c), (�g_ba�), 0)

	)

429 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
�
	`asm_thumb_�r_�o_�o_i5
(�s), (�g_�c), (�g_ba�), (w�d_off�t))

	)

430 
	#ASM_STORE8_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_thumb_�rb_�o_�o_i5
(�s), (�g_�c), (�g_ba�), 0)

	)

431 
	#ASM_STORE16_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_thumb_�rh_�o_�o_i5
(�s), (�g_�c), (�g_ba�), 0)

	)

432 
	#ASM_STORE32_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_thumb_�r_�o_�o_i5
(�s), (�g_�c), (�g_ba�), 0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx64.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<as��.h
>

30 
	~<�r�g.h
>

32 
	~"py/mpc�fig.h
"

35 #i�
MICROPY_EMIT_X64


37 
	~"py/asmx64.h
"

40 
	#WORD_SIZE
 (8)

	)

42 
	#OPCODE_NOP
 (0x90)

	)

43 
	#OPCODE_PUSH_R64
 (0x50�

	)

44 
	#OPCODE_PUSH_I64
 (0x68)

	)

45 
	#OPCODE_PUSH_M64
 (0xff�

	)

46 
	#OPCODE_POP_R64
 (0x58�

	)

47 
	#OPCODE_RET
 (0xc3)

	)

48 
	#OPCODE_MOV_I8_TO_R8
 (0xb0�

	)

49 
	#OPCODE_MOV_I64_TO_R64
 (0xb8�

	)

50 
	#OPCODE_MOV_I32_TO_RM32
 (0xc7)

	)

51 
	#OPCODE_MOV_R8_TO_RM8
 (0x88�

	)

52 
	#OPCODE_MOV_R64_TO_RM64
 (0x89�

	)

53 
	#OPCODE_MOV_RM64_TO_R64
 (0x8b�

	)

54 
	#OPCODE_MOVZX_RM8_TO_R64
 (0xb6�

	)

55 
	#OPCODE_MOVZX_RM16_TO_R64
 (0xb7�

	)

56 
	#OPCODE_LEA_MEM_TO_R64
 (0x8d�

	)

57 
	#OPCODE_NOT_RM64
 (0xf7�

	)

58 
	#OPCODE_NEG_RM64
 (0xf7�

	)

59 
	#OPCODE_AND_R64_TO_RM64
 (0x21�

	)

60 
	#OPCODE_OR_R64_TO_RM64
 (0x09�

	)

61 
	#OPCODE_XOR_R64_TO_RM64
 (0x31�

	)

62 
	#OPCODE_ADD_R64_TO_RM64
 (0x01�

	)

63 
	#OPCODE_ADD_I32_TO_RM32
 (0x81�

	)

64 
	#OPCODE_ADD_I8_TO_RM32
 (0x83�

	)

65 
	#OPCODE_SUB_R64_FROM_RM64
 (0x29)

	)

66 
	#OPCODE_SUB_I32_FROM_RM64
 (0x81�

	)

67 
	#OPCODE_SUB_I8_FROM_RM64
 (0x83�

	)

71 
	#OPCODE_SHL_RM64_CL
 (0xd3�

	)

72 
	#OPCODE_SHR_RM64_CL
 (0xd3�

	)

73 
	#OPCODE_SAR_RM64_CL
 (0xd3�

	)

76 
	#OPCODE_CMP_R64_WITH_RM64
 (0x39�

	)

78 
	#OPCODE_TEST_R8_WITH_RM8
 (0x84�

	)

79 
	#OPCODE_TEST_R64_WITH_RM64
 (0x85�

	)

80 
	#OPCODE_JMP_REL8
 (0xeb)

	)

81 
	#OPCODE_JMP_REL32
 (0xe9)

	)

82 
	#OPCODE_JMP_RM64
 (0xff�

	)

83 
	#OPCODE_JCC_REL8
 (0x70�

	)

84 
	#OPCODE_JCC_REL32_A
 (0x0f)

	)

85 
	#OPCODE_JCC_REL32_B
 (0x80�

	)

86 
	#OPCODE_SETCC_RM8_A
 (0x0f)

	)

87 
	#OPCODE_SETCC_RM8_B
 (0x90�

	)

88 
	#OPCODE_CALL_REL32
 (0xe8)

	)

89 
	#OPCODE_CALL_RM32
 (0xff�

	)

90 
	#OPCODE_LEAVE
 (0xc9)

	)

92 
	#MODRM_R64
(
x
�(((x�& 0x7�<< 3)

	)

93 
	#MODRM_RM_DISP0
 (0x00)

	)

94 
	#MODRM_RM_DISP8
 (0x40)

	)

95 
	#MODRM_RM_DISP32
 (0x80)

	)

96 
	#MODRM_RM_REG
 (0xc0)

	)

97 
	#MODRM_RM_R64
(
x
�((x�& 0x7)

	)

99 
	#OP_SIZE_PREFIX
 (0x66)

	)

101 
	#REX_PREFIX
 (0x40)

	)

102 
	#REX_W
 (0x08)

103 
	#REX_R
 (0x04)

104 
	#REX_X
 (0x02)

105 
	#REX_B
 (0x01)

106 
	#REX_W_FROM_R64
(
r64
�(�64�>> 0 & 0x08)

	)

107 
	#REX_R_FROM_R64
(
r64
�(�64�>> 1 & 0x04)

	)

108 
	#REX_X_FROM_R64
(
r64
�(�64�>> 2 & 0x02)

	)

109 
	#REX_B_FROM_R64
(
r64
�(�64�>> 3 & 0x01)

	)

111 
	#IMM32_L0
(
x
�((x�& 0xff)

	)

112 
	#IMM32_L1
(
x
�(((x�>> 8�& 0xff)

	)

113 
	#IMM32_L2
(
x
�(((x�>> 16�& 0xff)

	)

114 
	#IMM32_L3
(
x
�(((x�>> 24�& 0xff)

	)

115 
	#IMM64_L4
(
x
�(((x�>> 32�& 0xff)

	)

116 
	#IMM64_L5
(
x
�(((x�>> 40�& 0xff)

	)

117 
	#IMM64_L6
(
x
�(((x�>> 48�& 0xff)

	)

118 
	#IMM64_L7
(
x
�(((x�>> 56�& 0xff)

	)

120 
	#UNSIGNED_FIT8
(
x
�(((x�& 0xffffffffffffff00�=�0)

	)

121 
	#UNSIGNED_FIT32
(
x
�(((x�& 0xffffffff00000000�=�0)

	)

122 
	#SIGNED_FIT8
(
x
�(((x�& 0xffffff80�=�0�|| (((x�& 0xffffff80�=�0xffffff80)

	)

124 
�l�e
 
by�
 *
	$asm_x64_g�_cur_to_wr�e_by�s
(
asm_x64_t
 *
as
, 
n
) {

125  
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 
n
);

126 
	}
}

128 
	$asm_x64_wr�e_by�_1
(
asm_x64_t
 *
as
, 
by�
 
b1
) {

129 
by�
 *
c
 = 
	`asm_x64_g�_cur_to_wr�e_by�s
(
as
, 1);

130 i�(
c
 !�
NULL
) {

131 
c
[0] = 
b1
;

133 
	}
}

135 
	$asm_x64_wr�e_by�_2
(
asm_x64_t
 *
as
, 
by�
 
b1
, by� 
b2
) {

136 
by�
 *
c
 = 
	`asm_x64_g�_cur_to_wr�e_by�s
(
as
, 2);

137 i�(
c
 !�
NULL
) {

138 
c
[0] = 
b1
;

139 
c
[1] = 
b2
;

141 
	}
}

143 
	$asm_x64_wr�e_by�_3
(
asm_x64_t
 *
as
, 
by�
 
b1
, by� 
b2
, by� 
b3
) {

144 
by�
 *
c
 = 
	`asm_x64_g�_cur_to_wr�e_by�s
(
as
, 3);

145 i�(
c
 !�
NULL
) {

146 
c
[0] = 
b1
;

147 
c
[1] = 
b2
;

148 
c
[2] = 
b3
;

150 
	}
}

152 
	$asm_x64_wr�e_w�d32
(
asm_x64_t
 *
as
, 
w32
) {

153 
by�
 *
c
 = 
	`asm_x64_g�_cur_to_wr�e_by�s
(
as
, 4);

154 i�(
c
 !�
NULL
) {

155 
c
[0] = 
	`IMM32_L0
(
w32
);

156 
c
[1] = 
	`IMM32_L1
(
w32
);

157 
c
[2] = 
	`IMM32_L2
(
w32
);

158 
c
[3] = 
	`IMM32_L3
(
w32
);

160 
	}
}

162 
	$asm_x64_wr�e_w�d64
(
asm_x64_t
 *
as
, 
�t64_t
 
w64
) {

163 
by�
 *
c
 = 
	`asm_x64_g�_cur_to_wr�e_by�s
(
as
, 8);

164 i�(
c
 !�
NULL
) {

165 
c
[0] = 
	`IMM32_L0
(
w64
);

166 
c
[1] = 
	`IMM32_L1
(
w64
);

167 
c
[2] = 
	`IMM32_L2
(
w64
);

168 
c
[3] = 
	`IMM32_L3
(
w64
);

169 
c
[4] = 
	`IMM64_L4
(
w64
);

170 
c
[5] = 
	`IMM64_L5
(
w64
);

171 
c
[6] = 
	`IMM64_L6
(
w64
);

172 
c
[7] = 
	`IMM64_L7
(
w64
);

174 
	}
}

188 
	$asm_x64_wr�e_r64_di�
(
asm_x64_t
 *
as
, 
r64
, 
di�_r64
, 
di�_off�t
) {

189 
u�t8_t
 
rm_di�
;

190 i�(
di�_off�t
 =�0 && (
di�_r64
 & 7�!�
ASM_X64_REG_RBP
) {

191 
rm_di�
 = 
MODRM_RM_DISP0
;

192 } i�(
	`SIGNED_FIT8
(
di�_off�t
)) {

193 
rm_di�
 = 
MODRM_RM_DISP8
;

195 
rm_di�
 = 
MODRM_RM_DISP32
;

197 
	`asm_x64_wr�e_by�_1
(
as
, 
	`MODRM_R64
(
r64
�| 
rm_di�
 | 
	`MODRM_RM_R64
(
di�_r64
));

198 i�((
di�_r64
 & 7�=�
ASM_X64_REG_RSP
) {

200 
	`asm_x64_wr�e_by�_1
(
as
, 0x24);

202 i�(
rm_di�
 =�
MODRM_RM_DISP8
) {

203 
	`asm_x64_wr�e_by�_1
(
as
, 
	`IMM32_L0
(
di�_off�t
));

204 } i�(
rm_di�
 =�
MODRM_RM_DISP32
) {

205 
	`asm_x64_wr�e_w�d32
(
as
, 
di�_off�t
);

207 
	}
}

209 
	$asm_x64_g��ic_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
, 
�
) {

210 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
�c_r64
�| 
	`REX_B_FROM_R64
(
de�_r64
), 
�
, 
	`MODRM_R64
(�c_r64�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(dest_r64));

211 
	}
}

213 
	$asm_x64_n�
(
asm_x64_t
 *
as
) {

214 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_NOP
);

215 
	}
}

217 
	$asm_x64_push_r64
(
asm_x64_t
 *
as
, 
�c_r64
) {

218 i�(
�c_r64
 < 8) {

219 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_PUSH_R64
 | 
�c_r64
);

221 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_B
, 
OPCODE_PUSH_R64
 | (
�c_r64
 & 7));

223 
	}
}

240 
	$asm_x64_p�_r64
(
asm_x64_t
 *
as
, 
de�_r64
) {

241 i�(
de�_r64
 < 8) {

242 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_POP_R64
 | 
de�_r64
);

244 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_B
, 
OPCODE_POP_R64
 | (
de�_r64
 & 7));

246 
	}
}

248 
	$asm_x64_�t
(
asm_x64_t
 *
as
) {

249 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_RET
);

250 
	}
}

252 
	$asm_x64_mov_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

253 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_MOV_R64_TO_RM64
);

254 
	}
}

256 
	$asm_x64_mov_r8_to_mem8
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
) {

257 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

258 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_MOV_R8_TO_RM8
);

260 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
�c_r64
�| 
	`REX_B_FROM_R64
(
de�_r64
), 
OPCODE_MOV_R8_TO_RM8
);

262 
	`asm_x64_wr�e_r64_di�
(
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

263 
	}
}

265 
	$asm_x64_mov_r16_to_mem16
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
) {

266 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

267 
	`asm_x64_wr�e_by�_2
(
as
, 
OP_SIZE_PREFIX
, 
OPCODE_MOV_R64_TO_RM64
);

269 
	`asm_x64_wr�e_by�_3
(
as
, 
OP_SIZE_PREFIX
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
�c_r64
�| 
	`REX_B_FROM_R64
(
de�_r64
), 
OPCODE_MOV_R64_TO_RM64
);

271 
	`asm_x64_wr�e_r64_di�
(
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

272 
	}
}

274 
	$asm_x64_mov_r32_to_mem32
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
) {

275 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

276 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_MOV_R64_TO_RM64
);

278 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
�c_r64
�| 
	`REX_B_FROM_R64
(
de�_r64
), 
OPCODE_MOV_R64_TO_RM64
);

280 
	`asm_x64_wr�e_r64_di�
(
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

281 
	}
}

283 
	$asm_x64_mov_r64_to_mem64
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
) {

285 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
�c_r64
�| 
	`REX_B_FROM_R64
(
de�_r64
), 
OPCODE_MOV_R64_TO_RM64
);

286 
	`asm_x64_wr�e_r64_di�
(
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

287 
	}
}

289 
	$asm_x64_mov_mem8_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
) {

290 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

291 
	`asm_x64_wr�e_by�_2
(
as
, 0x0f, 
OPCODE_MOVZX_RM8_TO_R64
);

293 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
), 0x0f, 
OPCODE_MOVZX_RM8_TO_R64
);

295 
	`asm_x64_wr�e_r64_di�
(
as
, 
de�_r64
, 
�c_r64
, 
�c_di�
);

296 
	}
}

298 
	$asm_x64_mov_mem16_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
) {

299 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

300 
	`asm_x64_wr�e_by�_2
(
as
, 0x0f, 
OPCODE_MOVZX_RM16_TO_R64
);

302 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
), 0x0f, 
OPCODE_MOVZX_RM16_TO_R64
);

304 
	`asm_x64_wr�e_r64_di�
(
as
, 
de�_r64
, 
�c_r64
, 
�c_di�
);

305 
	}
}

307 
	$asm_x64_mov_mem32_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
) {

308 i�(
�c_r64
 < 8 && 
de�_r64
 < 8) {

309 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_MOV_RM64_TO_R64
);

311 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
), 
OPCODE_MOV_RM64_TO_R64
);

313 
	`asm_x64_wr�e_r64_di�
(
as
, 
de�_r64
, 
�c_r64
, 
�c_di�
);

314 
	}
}

316 
	$asm_x64_mov_mem64_to_r64
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
) {

318 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
), 
OPCODE_MOV_RM64_TO_R64
);

319 
	`asm_x64_wr�e_r64_di�
(
as
, 
de�_r64
, 
�c_r64
, 
�c_di�
);

320 
	}
}

322 
	$asm_x64_�a_di�_to_r64
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
) {

324 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
), 
OPCODE_LEA_MEM_TO_R64
);

325 
	`asm_x64_wr�e_r64_di�
(
as
, 
de�_r64
, 
�c_r64
, 
�c_di�
);

326 
	}
}

335 
size_t
 
	$asm_x64_mov_i32_to_r64
(
asm_x64_t
 *
as
, 
�c_i32
, 
de�_r64
) {

337 i�(
de�_r64
 < 8) {

338 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_MOV_I64_TO_R64
 | 
de�_r64
);

340 
	`asm_x64_wr�e_by�_2
(
as
, 
REX_PREFIX
 | 
REX_B
, 
OPCODE_MOV_I64_TO_R64
 | (
de�_r64
 & 7));

342 
size_t
 
loc
 = 
	`mp_asm_ba�_g�_code_pos
(&
as
->
ba�
);

343 
	`asm_x64_wr�e_w�d32
(
as
, 
�c_i32
);

344  
loc
;

345 
	}
}

347 
	$asm_x64_mov_i64_to_r64
(
asm_x64_t
 *
as
, 
�t64_t
 
�c_i64
, 
de�_r64
) {

350 
	`asm_x64_wr�e_by�_2
(
as
,

351 
REX_PREFIX
 | 
REX_W
 | (
de�_r64
 < 8 ? 0 : 
REX_B
),

352 
OPCODE_MOV_I64_TO_R64
 | (
de�_r64
 & 7));

353 
	`asm_x64_wr�e_w�d64
(
as
, 
�c_i64
);

354 
	}
}

356 
	$asm_x64_mov_i64_to_r64_�timi�d
(
asm_x64_t
 *
as
, 
�t64_t
 
�c_i64
, 
de�_r64
) {

358 i�(
	`UNSIGNED_FIT32
(
�c_i64
)) {

360 
	`asm_x64_mov_i32_to_r64
(
as
, 
�c_i64
 & 0xffffffff, 
de�_r64
);

363 
	`asm_x64_mov_i64_to_r64
(
as
, 
�c_i64
, 
de�_r64
);

365 
	}
}

367 
	$asm_x64_n�_r64
(
asm_x64_t
 *
as
, 
de�_r64
) {

368 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 2, 
OPCODE_NOT_RM64
);

369 
	}
}

371 
	$asm_x64_�g_r64
(
asm_x64_t
 *
as
, 
de�_r64
) {

372 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 3, 
OPCODE_NEG_RM64
);

373 
	}
}

375 
	$asm_x64_�d_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

376 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_AND_R64_TO_RM64
);

377 
	}
}

379 
	$asm_x64_�_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

380 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_OR_R64_TO_RM64
);

381 
	}
}

383 
	$asm_x64_x�_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

384 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_XOR_R64_TO_RM64
);

385 
	}
}

387 
	$asm_x64_shl_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
) {

388 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 4, 
OPCODE_SHL_RM64_CL
);

389 
	}
}

391 
	$asm_x64_shr_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
) {

392 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 5, 
OPCODE_SHR_RM64_CL
);

393 
	}
}

395 
	$asm_x64_�r_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
) {

396 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 7, 
OPCODE_SAR_RM64_CL
);

397 
	}
}

399 
	$asm_x64_add_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

400 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_ADD_R64_TO_RM64
);

401 
	}
}

403 
	$asm_x64_sub_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

404 
	`asm_x64_g��ic_r64_r64
(
as
, 
de�_r64
, 
�c_r64
, 
OPCODE_SUB_R64_FROM_RM64
);

405 
	}
}

407 
	$asm_x64_mul_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
) {

409 
	`asm_x64_wr�e_by�_1
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
de�_r64
�| 
	`REX_B_FROM_R64
(
�c_r64
));

410 
	`asm_x64_wr�e_by�_3
(
as
, 0x0f, 0xaf, 
	`MODRM_R64
(
de�_r64
�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
�c_r64
));

411 
	}
}

427 
	$asm_x64_sub_r64_i32
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_i32
) {

428 
	`as��
(
de�_r64
 < 8);

429 i�(
	`SIGNED_FIT8
(
�c_i32
)) {

431 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
REX_W
, 
OPCODE_SUB_I8_FROM_RM64
, 
	`MODRM_R64
(5�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
de�_r64
));

432 
	`asm_x64_wr�e_by�_1
(
as
, 
�c_i32
 & 0xff);

435 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
REX_W
, 
OPCODE_SUB_I32_FROM_RM64
, 
	`MODRM_R64
(5�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
de�_r64
));

436 
	`asm_x64_wr�e_w�d32
(
as
, 
�c_i32
);

438 
	}
}

457 
	$asm_x64_cmp_r64_w�h_r64
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
) {

458 
	`asm_x64_g��ic_r64_r64
(
as
, 
�c_r64_b
, 
�c_r64_a
, 
OPCODE_CMP_R64_WITH_RM64
);

459 
	}
}

473 
	$asm_x64_��_r8_w�h_r8
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
) {

474 
	`as��
(
�c_r64_a
 < 8);

475 
	`as��
(
�c_r64_b
 < 8);

476 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_TEST_R8_WITH_RM8
, 
	`MODRM_R64
(
�c_r64_a
�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
�c_r64_b
));

477 
	}
}

479 
	$asm_x64_��_r64_w�h_r64
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
) {

480 
	`asm_x64_g��ic_r64_r64
(
as
, 
�c_r64_b
, 
�c_r64_a
, 
OPCODE_TEST_R64_WITH_RM64
);

481 
	}
}

483 
	$asm_x64_�tcc_r8
(
asm_x64_t
 *
as
, 
jcc_ty�
, 
de�_r8
) {

484 
	`as��
(
de�_r8
 < 8);

485 
	`asm_x64_wr�e_by�_3
(
as
, 
OPCODE_SETCC_RM8_A
, 
OPCODE_SETCC_RM8_B
 | 
jcc_ty�
, 
	`MODRM_R64
(0�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
de�_r8
));

486 
	}
}

488 
	$asm_x64_jmp_�g
(
asm_x64_t
 *
as
, 
�c_r64
) {

489 
	`as��
(
�c_r64
 < 8);

490 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_JMP_RM64
, 
	`MODRM_R64
(4�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
�c_r64
));

491 
	}
}

493 
mp_u�t_t
 
	$g�_�b�_de�
(
asm_x64_t
 *
as
, 
mp_u�t_t
 
�b�
) {

494 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

495  
as
->
ba�
.
�b�_off�ts
[
�b�
];

496 
	}
}

498 
	$asm_x64_jmp_�b�
(
asm_x64_t
 *
as
, 
mp_u�t_t
 
�b�
) {

499 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

500 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

501 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 < 0) {

504 
�l
 -= 2;

505 i�(
	`SIGNED_FIT8
(
�l
)) {

506 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_JMP_REL8
, 
�l
 & 0xff);

508 
�l
 += 2;

509 
�rge_jump
;

513 
�rge_jump
:

514 
�l
 -= 5;

515 
	`asm_x64_wr�e_by�_1
(
as
, 
OPCODE_JMP_REL32
);

516 
	`asm_x64_wr�e_w�d32
(
as
, 
�l
);

518 
	}
}

520 
	$asm_x64_jcc_�b�
(
asm_x64_t
 *
as
, 
jcc_ty�
, 
mp_u�t_t
 
�b�
) {

521 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

522 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

523 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 < 0) {

526 
�l
 -= 2;

527 i�(
	`SIGNED_FIT8
(
�l
)) {

528 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_JCC_REL8
 | 
jcc_ty�
, 
�l
 & 0xff);

530 
�l
 += 2;

531 
�rge_jump
;

535 
�rge_jump
:

536 
�l
 -= 6;

537 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_JCC_REL32_A
, 
OPCODE_JCC_REL32_B
 | 
jcc_ty�
);

538 
	`asm_x64_wr�e_w�d32
(
as
, 
�l
);

540 
	}
}

542 
	$asm_x64_��y
(
asm_x64_t
 *
as
, 
num_lo�ls
) {

543 
	`as��
(
num_lo�ls
 >= 0);

544 
	`asm_x64_push_r64
(
as
, 
ASM_X64_REG_RBP
);

545 
	`asm_x64_push_r64
(
as
, 
ASM_X64_REG_RBX
);

546 
	`asm_x64_push_r64
(
as
, 
ASM_X64_REG_R12
);

547 
	`asm_x64_push_r64
(
as
, 
ASM_X64_REG_R13
);

548 
num_lo�ls
 |= 1;

549 
	`asm_x64_sub_r64_i32
(
as
, 
ASM_X64_REG_RSP
, 
num_lo�ls
 * 
WORD_SIZE
);

550 
as
->
num_lo�ls
 =�um_locals;

551 
	}
}

553 
	$asm_x64_ex�
(
asm_x64_t
 *
as
) {

554 
	`asm_x64_sub_r64_i32
(
as
, 
ASM_X64_REG_RSP
, -as->
num_lo�ls
 * 
WORD_SIZE
);

555 
	`asm_x64_p�_r64
(
as
, 
ASM_X64_REG_R13
);

556 
	`asm_x64_p�_r64
(
as
, 
ASM_X64_REG_R12
);

557 
	`asm_x64_p�_r64
(
as
, 
ASM_X64_REG_RBX
);

558 
	`asm_x64_p�_r64
(
as
, 
ASM_X64_REG_RBP
);

559 
	`asm_x64_�t
(
as
);

560 
	}
}

573 
	$asm_x64_lo�l_off�t_�om_r�
(
asm_x64_t
 *
as
, 
lo�l_num
) {

574 ()
as
;

576  
lo�l_num
 * 
WORD_SIZE
;

577 
	}
}

579 
	$asm_x64_mov_lo�l_to_r64
(
asm_x64_t
 *
as
, 
�c_lo�l_num
, 
de�_r64
) {

580 
	`asm_x64_mov_mem64_to_r64
(
as
, 
ASM_X64_REG_RSP
, 
	`asm_x64_lo�l_off�t_�om_r�
�s, 
�c_lo�l_num
), 
de�_r64
);

581 
	}
}

583 
	$asm_x64_mov_r64_to_lo�l
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_lo�l_num
) {

584 
	`asm_x64_mov_r64_to_mem64
(
as
, 
�c_r64
, 
ASM_X64_REG_RSP
, 
	`asm_x64_lo�l_off�t_�om_r�
�s, 
de�_lo�l_num
));

585 
	}
}

587 
	$asm_x64_mov_lo�l_addr_to_r64
(
asm_x64_t
 *
as
, 
lo�l_num
, 
de�_r64
) {

588 
off�t
 = 
	`asm_x64_lo�l_off�t_�om_r�
(
as
, 
lo�l_num
);

589 i�(
off�t
 == 0) {

590 
	`asm_x64_mov_r64_r64
(
as
, 
de�_r64
, 
ASM_X64_REG_RSP
);

592 
	`asm_x64_�a_di�_to_r64
(
as
, 
ASM_X64_REG_RSP
, 
off�t
, 
de�_r64
);

594 
	}
}

596 
	$asm_x64_mov_�g_p��
(
asm_x64_t
 *
as
, 
de�_r64
, 
mp_u�t_t
 
�b�
) {

597 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

598 
mp_�t_t
 
�l
 = 
de�
 - (
as
->
ba�
.
code_off�t
 + 7);

599 
	`asm_x64_wr�e_by�_3
(
as
, 
REX_PREFIX
 | 
REX_W
 | 
	`REX_R_FROM_R64
(
de�_r64
), 
OPCODE_LEA_MEM_TO_R64
, 
	`MODRM_R64
(de�_r64�| 
	`MODRM_RM_R64
(5));

600 
	`asm_x64_wr�e_w�d32
(
as
, 
�l
);

601 
	}
}

636 
	$asm_x64_��_�d
(
asm_x64_t
 *
as
, 
size_t
 
fun_id
, 
�mp_r64
) {

637 
	`as��
(
�mp_r64
 < 8);

638 
	`asm_x64_mov_mem64_to_r64
(
as
, 
ASM_X64_REG_FUN_TABLE
, 
fun_id
 * 
WORD_SIZE
, 
�mp_r64
);

639 
	`asm_x64_wr�e_by�_2
(
as
, 
OPCODE_CALL_RM32
, 
	`MODRM_R64
(2�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R64
(
�mp_r64
));

640 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx64.h

26 #i�de�
MICROPY_INCLUDED_PY_ASMX64_H


27 
	#MICROPY_INCLUDED_PY_ASMX64_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

31 
	~"py/asmba�.h
"

45 
	#ASM_X64_REG_RAX
 (0)

	)

46 
	#ASM_X64_REG_RCX
 (1)

	)

47 
	#ASM_X64_REG_RDX
 (2)

	)

48 
	#ASM_X64_REG_RBX
 (3)

	)

49 
	#ASM_X64_REG_RSP
 (4)

	)

50 
	#ASM_X64_REG_RBP
 (5)

	)

51 
	#ASM_X64_REG_RSI
 (6)

	)

52 
	#ASM_X64_REG_RDI
 (7)

	)

53 
	#ASM_X64_REG_R08
 (8)

	)

54 
	#ASM_X64_REG_R09
 (9)

	)

55 
	#ASM_X64_REG_R10
 (10)

	)

56 
	#ASM_X64_REG_R11
 (11)

	)

57 
	#ASM_X64_REG_R12
 (12)

	)

58 
	#ASM_X64_REG_R13
 (13)

	)

59 
	#ASM_X64_REG_R14
 (14)

	)

60 
	#ASM_X64_REG_R15
 (15)

	)

63 
	#ASM_X64_CC_JB
 (0x2)

64 
	#ASM_X64_CC_JAE
 (0x3)

65 
	#ASM_X64_CC_JZ
 (0x4)

	)

66 
	#ASM_X64_CC_JE
 (0x4)

	)

67 
	#ASM_X64_CC_JNZ
 (0x5)

	)

68 
	#ASM_X64_CC_JNE
 (0x5)

	)

69 
	#ASM_X64_CC_JBE
 (0x6)

70 
	#ASM_X64_CC_JA
 (0x7)

71 
	#ASM_X64_CC_JL
 (0xc)

72 
	#ASM_X64_CC_JGE
 (0xd)

73 
	#ASM_X64_CC_JLE
 (0xe)

74 
	#ASM_X64_CC_JG
 (0xf)

75 

	)

76 
	s_asm_x64_t
 {

77 
mp_asm_ba�_t
 
	mba�
;

78 
	mnum_lo�ls
;

79 } 
	tasm_x64_t
;

81 
�l�e
 
	$asm_x64_�d_�ss
(
asm_x64_t
 *
as
) {

82 ()
as
;

83 
	}
}

85 
asm_x64_n�
(
asm_x64_t
 *
as
);

86 
asm_x64_push_r64
(
asm_x64_t
 *
as
, 
�c_r64
);

87 
asm_x64_p�_r64
(
asm_x64_t
 *
as
, 
de�_r64
);

88 
asm_x64_mov_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

89 
size_t
 
asm_x64_mov_i32_to_r64
(
asm_x64_t
 *
as
, 
�c_i32
, 
de�_r64
);

90 
asm_x64_mov_i64_to_r64
(
asm_x64_t
 *
as
, 
�t64_t
 
�c_i64
, 
de�_r64
);

91 
asm_x64_mov_i64_to_r64_�timi�d
(
asm_x64_t
 *
as
, 
�t64_t
 
�c_i64
, 
de�_r64
);

92 
asm_x64_mov_r8_to_mem8
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

93 
asm_x64_mov_r16_to_mem16
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

94 
asm_x64_mov_r32_to_mem32
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

95 
asm_x64_mov_r64_to_mem64
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_r64
, 
de�_di�
);

96 
asm_x64_mov_mem8_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
);

97 
asm_x64_mov_mem16_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
);

98 
asm_x64_mov_mem32_to_r64zx
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
);

99 
asm_x64_mov_mem64_to_r64
(
asm_x64_t
 *
as
, 
�c_r64
, 
�c_di�
, 
de�_r64
);

100 
asm_x64_n�_r64
(
asm_x64_t
 *
as
, 
de�_r64
);

101 
asm_x64_�g_r64
(
asm_x64_t
 *
as
, 
de�_r64
);

102 
asm_x64_�d_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

103 
asm_x64_�_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

104 
asm_x64_x�_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

105 
asm_x64_shl_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
);

106 
asm_x64_shr_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
);

107 
asm_x64_�r_r64_�
(
asm_x64_t
 *
as
, 
de�_r64
);

108 
asm_x64_add_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

109 
asm_x64_sub_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

110 
asm_x64_mul_r64_r64
(
asm_x64_t
 *
as
, 
de�_r64
, 
�c_r64
);

111 
asm_x64_cmp_r64_w�h_r64
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
);

112 
asm_x64_��_r8_w�h_r8
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
);

113 
asm_x64_��_r64_w�h_r64
(
asm_x64_t
 *
as
, 
�c_r64_a
, 
�c_r64_b
);

114 
asm_x64_�tcc_r8
(
asm_x64_t
 *
as
, 
jcc_ty�
, 
de�_r8
);

115 
asm_x64_jmp_�g
(
asm_x64_t
 *
as
, 
�c_r64
);

116 
asm_x64_jmp_�b�
(
asm_x64_t
 *
as
, 
mp_u�t_t
 
�b�
);

117 
asm_x64_jcc_�b�
(
asm_x64_t
 *
as
, 
jcc_ty�
, 
mp_u�t_t
 
�b�
);

118 
asm_x64_��y
(
asm_x64_t
 *
as
, 
num_lo�ls
);

119 
asm_x64_ex�
(
asm_x64_t
 *
as
);

120 
asm_x64_mov_lo�l_to_r64
(
asm_x64_t
 *
as
, 
�c_lo�l_num
, 
de�_r64
);

121 
asm_x64_mov_r64_to_lo�l
(
asm_x64_t
 *
as
, 
�c_r64
, 
de�_lo�l_num
);

122 
asm_x64_mov_lo�l_addr_to_r64
(
asm_x64_t
 *
as
, 
lo�l_num
, 
de�_r64
);

123 
asm_x64_mov_�g_p��
(
asm_x64_t
 *
as
, 
de�_r64
, 
mp_u�t_t
 
�b�
);

124 
asm_x64_��_�d
(
asm_x64_t
 *
as
, 
size_t
 
fun_id
, 
�mp_r32
);

127 
	#ASM_X64_REG_FUN_TABLE
 
ASM_X64_REG_RBP


	)

129 #i�
GENERIC_ASM_API


134 
	#ASM_WORD_SIZE
 (8)

	)

136 
	#REG_RET
 
ASM_X64_REG_RAX


	)

137 
	#REG_ARG_1
 
ASM_X64_REG_RDI


	)

138 
	#REG_ARG_2
 
ASM_X64_REG_RSI


	)

139 
	#REG_ARG_3
 
ASM_X64_REG_RDX


	)

140 
	#REG_ARG_4
 
ASM_X64_REG_RCX


	)

141 
	#REG_ARG_5
 
ASM_X64_REG_R08


	)

144 
	#REG_TEMP0
 
ASM_X64_REG_RAX


	)

145 
	#REG_TEMP1
 
ASM_X64_REG_RDI


	)

146 
	#REG_TEMP2
 
ASM_X64_REG_RSI


	)

149 
	#REG_LOCAL_1
 
ASM_X64_REG_RBX


	)

150 
	#REG_LOCAL_2
 
ASM_X64_REG_R12


	)

151 
	#REG_LOCAL_3
 
ASM_X64_REG_R13


	)

152 
	#REG_LOCAL_NUM
 (3)

	)

155 
	#REG_FUN_TABLE
 
ASM_X64_REG_FUN_TABLE


	)

157 
	#ASM_T
 
asm_x64_t


	)

158 
	#ASM_END_PASS
 
asm_x64_�d_�ss


	)

159 
	#ASM_ENTRY
 
asm_x64_��y


	)

160 
	#ASM_EXIT
 
asm_x64_ex�


	)

162 
	#ASM_JUMP
 
asm_x64_jmp_�b�


	)

163 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

165 i�(
bo�_��
) { \

166 
	`asm_x64_��_r8_w�h_r8
((
as
), (
�g
), (reg)); \

168 
	`asm_x64_��_r64_w�h_r64
((
as
), (
�g
), (reg)); \

170 
	`asm_x64_jcc_�b�
(
as
, 
ASM_X64_CC_JZ
, 
�b�
); \

171 } 0)

	)

172 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

174 i�(
bo�_��
) { \

175 
	`asm_x64_��_r8_w�h_r8
((
as
), (
�g
), (reg)); \

177 
	`asm_x64_��_r64_w�h_r64
((
as
), (
�g
), (reg)); \

179 
	`asm_x64_jcc_�b�
(
as
, 
ASM_X64_CC_JNZ
, 
�b�
); \

180 } 0)

	)

181 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

183 
	`asm_x64_cmp_r64_w�h_r64
(
as
, 
�g1
, 
�g2
); \

184 
	`asm_x64_jcc_�b�
(
as
, 
ASM_X64_CC_JE
, 
�b�
); \

185 } 0)

	)

186 
	#ASM_JUMP_REG
(
as
, 
�g
�
	`asm_x64_jmp_�g
(�s), (�g))

	)

187 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_x64_��_�d
�s, idx, 
ASM_X64_REG_RAX
)

	)

189 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g_�c
�
	`asm_x64_mov_r64_to_lo�l
(�s), (�g_�c), (lo�l_num))

	)

190 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
�
	`asm_x64_mov_i64_to_r64_�timi�d
(�s), (imm), (�g_de�))

	)

191 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x64_mov_lo�l_to_r64
(�s), (lo�l_num), (�g_de�))

	)

192 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_mov_r64_r64
(�s), (�g_de�), (�g_�c))

	)

193 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x64_mov_lo�l_addr_to_r64
(�s), (lo�l_num), (�g_de�))

	)

194 
	#ASM_MOV_REG_PCREL
(
as
, 
�g_de�
, 
�b�
�
	`asm_x64_mov_�g_p��
(�s), (�g_de�), (�b�))

	)

196 
	#ASM_NOT_REG
(
as
, 
�g
�
	`asm_x64_n�_r64
(�s), (�g))

	)

197 
	#ASM_NEG_REG
(
as
, 
�g
�
	`asm_x64_�g_r64
(�s), (�g))

	)

198 
	#ASM_LSL_REG
(
as
, 
�g
�
	`asm_x64_shl_r64_�
(�s), (�g))

	)

199 
	#ASM_LSR_REG
(
as
, 
�g
�
	`asm_x64_shr_r64_�
(�s), (�g))

	)

200 
	#ASM_ASR_REG
(
as
, 
�g
�
	`asm_x64_�r_r64_�
(�s), (�g))

	)

201 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_�_r64_r64
(�s), (�g_de�), (�g_�c))

	)

202 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_x�_r64_r64
(�s), (�g_de�), (�g_�c))

	)

203 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_�d_r64_r64
(�s), (�g_de�), (�g_�c))

	)

204 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_add_r64_r64
(�s), (�g_de�), (�g_�c))

	)

205 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_sub_r64_r64
(�s), (�g_de�), (�g_�c))

	)

206 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x64_mul_r64_r64
(�s), (�g_de�), (�g_�c))

	)

208 
	#ASM_LOAD_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x64_mov_mem64_to_r64
(�s), (�g_ba�), 0, (�g_de�))

	)

209 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x64_mov_mem64_to_r64
(�s), (�g_ba�), 8 * (w�d_off�t), (�g_de�))

	)

210 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x64_mov_mem8_to_r64zx
(�s), (�g_ba�), 0, (�g_de�))

	)

211 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x64_mov_mem16_to_r64zx
(�s), (�g_ba�), 0, (�g_de�))

	)

212 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
�
	`asm_x64_mov_mem16_to_r64zx
(�s), (�g_ba�), 2 * (u�t16_off�t), (�g_de�))

	)

213 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x64_mov_mem32_to_r64zx
(�s), (�g_ba�), 0, (�g_de�))

	)

215 
	#ASM_STORE_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x64_mov_r64_to_mem64
(�s), (�g_�c), (�g_ba�), 0)

	)

216 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x64_mov_r64_to_mem64
(�s), (�g_�c), (�g_ba�), 8 * (w�d_off�t))

	)

217 
	#ASM_STORE8_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x64_mov_r8_to_mem8
(�s), (�g_�c), (�g_ba�), 0)

	)

218 
	#ASM_STORE16_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x64_mov_r16_to_mem16
(�s), (�g_�c), (�g_ba�), 0)

	)

219 
	#ASM_STORE32_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x64_mov_r32_to_mem32
(�s), (�g_�c), (�g_ba�), 0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx86.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<as��.h
>

30 
	~<�r�g.h
>

32 
	~"py/mpc�fig.h
"

35 #i�
MICROPY_EMIT_X86


37 
	~"py/asmx86.h
"

40 
	#WORD_SIZE
 (4)

	)

42 
	#OPCODE_NOP
 (0x90)

	)

43 
	#OPCODE_PUSH_R32
 (0x50)

	)

46 
	#OPCODE_POP_R32
 (0x58)

	)

47 
	#OPCODE_RET
 (0xc3)

	)

49 
	#OPCODE_MOV_I32_TO_R32
 (0xb8)

	)

51 
	#OPCODE_MOV_R8_TO_RM8
 (0x88�

	)

52 
	#OPCODE_MOV_R32_TO_RM32
 (0x89�

	)

53 
	#OPCODE_MOV_RM32_TO_R32
 (0x8b�

	)

54 
	#OPCODE_MOVZX_RM8_TO_R32
 (0xb6�

	)

55 
	#OPCODE_MOVZX_RM16_TO_R32
 (0xb7�

	)

56 
	#OPCODE_LEA_MEM_TO_R32
 (0x8d�

	)

57 
	#OPCODE_NOT_RM32
 (0xf7�

	)

58 
	#OPCODE_NEG_RM32
 (0xf7�

	)

59 
	#OPCODE_AND_R32_TO_RM32
 (0x21�

	)

60 
	#OPCODE_OR_R32_TO_RM32
 (0x09�

	)

61 
	#OPCODE_XOR_R32_TO_RM32
 (0x31�

	)

62 
	#OPCODE_ADD_R32_TO_RM32
 (0x01)

	)

63 
	#OPCODE_ADD_I32_TO_RM32
 (0x81�

	)

64 
	#OPCODE_ADD_I8_TO_RM32
 (0x83�

	)

65 
	#OPCODE_SUB_R32_FROM_RM32
 (0x29)

	)

66 
	#OPCODE_SUB_I32_FROM_RM32
 (0x81�

	)

67 
	#OPCODE_SUB_I8_FROM_RM32
 (0x83�

	)

71 
	#OPCODE_SHL_RM32_CL
 (0xd3�

	)

72 
	#OPCODE_SHR_RM32_CL
 (0xd3�

	)

73 
	#OPCODE_SAR_RM32_CL
 (0xd3�

	)

76 
	#OPCODE_CMP_R32_WITH_RM32
 (0x39)

	)

78 
	#OPCODE_TEST_R8_WITH_RM8
 (0x84�

	)

79 
	#OPCODE_TEST_R32_WITH_RM32
 (0x85�

	)

80 
	#OPCODE_JMP_REL8
 (0xeb)

	)

81 
	#OPCODE_JMP_REL32
 (0xe9)

	)

82 
	#OPCODE_JMP_RM32
 (0xff�

	)

83 
	#OPCODE_JCC_REL8
 (0x70�

	)

84 
	#OPCODE_JCC_REL32_A
 (0x0f)

	)

85 
	#OPCODE_JCC_REL32_B
 (0x80�

	)

86 
	#OPCODE_SETCC_RM8_A
 (0x0f)

	)

87 
	#OPCODE_SETCC_RM8_B
 (0x90�

	)

88 
	#OPCODE_CALL_REL32
 (0xe8)

	)

89 
	#OPCODE_CALL_RM32
 (0xff�

	)

90 
	#OPCODE_LEAVE
 (0xc9)

	)

92 
	#MODRM_R32
(
x
�((x�<< 3)

	)

93 
	#MODRM_RM_DISP0
 (0x00)

	)

94 
	#MODRM_RM_DISP8
 (0x40)

	)

95 
	#MODRM_RM_DISP32
 (0x80)

	)

96 
	#MODRM_RM_REG
 (0xc0)

	)

97 
	#MODRM_RM_R32
(
x
�(x)

	)

99 
	#OP_SIZE_PREFIX
 (0x66)

	)

101 
	#IMM32_L0
(
x
�((x�& 0xff)

	)

102 
	#IMM32_L1
(
x
�(((x�>> 8�& 0xff)

	)

103 
	#IMM32_L2
(
x
�(((x�>> 16�& 0xff)

	)

104 
	#IMM32_L3
(
x
�(((x�>> 24�& 0xff)

	)

106 
	#SIGNED_FIT8
(
x
�(((x�& 0xffffff80�=�0�|| (((x�& 0xffffff80�=�0xffffff80)

	)

108 
	$asm_x86_wr�e_by�_1
(
asm_x86_t
 *
as
, 
by�
 
b1
) {

109 
by�
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 1);

110 i�(
c
 !�
NULL
) {

111 
c
[0] = 
b1
;

113 
	}
}

115 
	$asm_x86_wr�e_by�_2
(
asm_x86_t
 *
as
, 
by�
 
b1
, by� 
b2
) {

116 
by�
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 2);

117 i�(
c
 !�
NULL
) {

118 
c
[0] = 
b1
;

119 
c
[1] = 
b2
;

121 
	}
}

123 
	$asm_x86_wr�e_by�_3
(
asm_x86_t
 *
as
, 
by�
 
b1
, by� 
b2
, by� 
b3
) {

124 
by�
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 3);

125 i�(
c
 !�
NULL
) {

126 
c
[0] = 
b1
;

127 
c
[1] = 
b2
;

128 
c
[2] = 
b3
;

130 
	}
}

132 
	$asm_x86_wr�e_w�d32
(
asm_x86_t
 *
as
, 
w32
) {

133 
by�
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 4);

134 i�(
c
 !�
NULL
) {

135 
c
[0] = 
	`IMM32_L0
(
w32
);

136 
c
[1] = 
	`IMM32_L1
(
w32
);

137 
c
[2] = 
	`IMM32_L2
(
w32
);

138 
c
[3] = 
	`IMM32_L3
(
w32
);

140 
	}
}

142 
	$asm_x86_wr�e_r32_di�
(
asm_x86_t
 *
as
, 
r32
, 
di�_r32
, 
di�_off�t
) {

143 
u�t8_t
 
rm_di�
;

144 i�(
di�_off�t
 =�0 && 
di�_r32
 !�
ASM_X86_REG_EBP
) {

145 
rm_di�
 = 
MODRM_RM_DISP0
;

146 } i�(
	`SIGNED_FIT8
(
di�_off�t
)) {

147 
rm_di�
 = 
MODRM_RM_DISP8
;

149 
rm_di�
 = 
MODRM_RM_DISP32
;

151 
	`asm_x86_wr�e_by�_1
(
as
, 
	`MODRM_R32
(
r32
�| 
rm_di�
 | 
	`MODRM_RM_R32
(
di�_r32
));

152 i�(
di�_r32
 =�
ASM_X86_REG_ESP
) {

154 
	`asm_x86_wr�e_by�_1
(
as
, 0x24);

156 i�(
rm_di�
 =�
MODRM_RM_DISP8
) {

157 
	`asm_x86_wr�e_by�_1
(
as
, 
	`IMM32_L0
(
di�_off�t
));

158 } i�(
rm_di�
 =�
MODRM_RM_DISP32
) {

159 
	`asm_x86_wr�e_w�d32
(
as
, 
di�_off�t
);

161 
	}
}

163 
	$asm_x86_g��ic_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
, 
�
) {

164 
	`asm_x86_wr�e_by�_2
(
as
, 
�
, 
	`MODRM_R32
(
�c_r32
�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

165 
	}
}

168 
	$asm_x86_n�
(
asm_x86_t
 *
as
) {

169 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_NOP
);

170 
	}
}

173 
	$asm_x86_push_r32
(
asm_x86_t
 *
as
, 
�c_r32
) {

174 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_PUSH_R32
 | 
�c_r32
);

175 
	}
}

178 
	$asm_x86_push_i32
(
asm_x86_t
 *
as
, 
�c_i32
) {

179 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_PUSH_I32
);

180 
	`asm_x86_wr�e_w�d32
(
as
, 
�c_i32
);

181 
	}
}

183 
	$asm_x86_push_di�
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_off�t
) {

184 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_PUSH_M32
);

185 
	`asm_x86_wr�e_r32_di�
(
as
, 6, 
�c_r32
, 
�c_off�t
);

186 
	}
}

189 
	$asm_x86_p�_r32
(
asm_x86_t
 *
as
, 
de�_r32
) {

190 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_POP_R32
 | 
de�_r32
);

191 
	}
}

193 
	$asm_x86_�t
(
asm_x86_t
 *
as
) {

194 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_RET
);

195 
	}
}

197 
	$asm_x86_mov_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

198 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_MOV_R32_TO_RM32
);

199 
	}
}

201 
	$asm_x86_mov_r8_to_mem8
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
) {

202 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_MOV_R8_TO_RM8
);

203 
	`asm_x86_wr�e_r32_di�
(
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

204 
	}
}

206 
	$asm_x86_mov_r16_to_mem16
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
) {

207 
	`asm_x86_wr�e_by�_2
(
as
, 
OP_SIZE_PREFIX
, 
OPCODE_MOV_R32_TO_RM32
);

208 
	`asm_x86_wr�e_r32_di�
(
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

209 
	}
}

211 
	$asm_x86_mov_r32_to_mem32
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
) {

212 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_MOV_R32_TO_RM32
);

213 
	`asm_x86_wr�e_r32_di�
(
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

214 
	}
}

216 
	$asm_x86_mov_mem8_to_r32zx
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
) {

217 
	`asm_x86_wr�e_by�_2
(
as
, 0x0f, 
OPCODE_MOVZX_RM8_TO_R32
);

218 
	`asm_x86_wr�e_r32_di�
(
as
, 
de�_r32
, 
�c_r32
, 
�c_di�
);

219 
	}
}

221 
	$asm_x86_mov_mem16_to_r32zx
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
) {

222 
	`asm_x86_wr�e_by�_2
(
as
, 0x0f, 
OPCODE_MOVZX_RM16_TO_R32
);

223 
	`asm_x86_wr�e_r32_di�
(
as
, 
de�_r32
, 
�c_r32
, 
�c_di�
);

224 
	}
}

226 
	$asm_x86_mov_mem32_to_r32
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
) {

227 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_MOV_RM32_TO_R32
);

228 
	`asm_x86_wr�e_r32_di�
(
as
, 
de�_r32
, 
�c_r32
, 
�c_di�
);

229 
	}
}

231 
	$asm_x86_�a_di�_to_r32
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
) {

232 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_LEA_MEM_TO_R32
);

233 
	`asm_x86_wr�e_r32_di�
(
as
, 
de�_r32
, 
�c_r32
, 
�c_di�
);

234 
	}
}

237 
	$asm_x86_mov_i8_to_r8
(
asm_x86_t
 *
as
, 
�c_i8
, 
de�_r32
) {

238 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_MOV_I8_TO_R8
 | 
de�_r32
, 
�c_i8
);

239 
	}
}

242 
size_t
 
	$asm_x86_mov_i32_to_r32
(
asm_x86_t
 *
as
, 
�t32_t
 
�c_i32
, 
de�_r32
) {

243 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_MOV_I32_TO_R32
 | 
de�_r32
);

244 
size_t
 
loc
 = 
	`mp_asm_ba�_g�_code_pos
(&
as
->
ba�
);

245 
	`asm_x86_wr�e_w�d32
(
as
, 
�c_i32
);

246  
loc
;

247 
	}
}

249 
	$asm_x86_n�_r32
(
asm_x86_t
 *
as
, 
de�_r32
) {

250 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 2, 
OPCODE_NOT_RM32
);

251 
	}
}

253 
	$asm_x86_�g_r32
(
asm_x86_t
 *
as
, 
de�_r32
) {

254 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 3, 
OPCODE_NEG_RM32
);

255 
	}
}

257 
	$asm_x86_�d_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

258 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_AND_R32_TO_RM32
);

259 
	}
}

261 
	$asm_x86_�_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

262 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_OR_R32_TO_RM32
);

263 
	}
}

265 
	$asm_x86_x�_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

266 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_XOR_R32_TO_RM32
);

267 
	}
}

269 
	$asm_x86_shl_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
) {

270 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 4, 
OPCODE_SHL_RM32_CL
);

271 
	}
}

273 
	$asm_x86_shr_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
) {

274 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 5, 
OPCODE_SHR_RM32_CL
);

275 
	}
}

277 
	$asm_x86_�r_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
) {

278 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 7, 
OPCODE_SAR_RM32_CL
);

279 
	}
}

281 
	$asm_x86_add_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

282 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_ADD_R32_TO_RM32
);

283 
	}
}

285 
	$asm_x86_add_i32_to_r32
(
asm_x86_t
 *
as
, 
�c_i32
, 
de�_r32
) {

286 i�(
	`SIGNED_FIT8
(
�c_i32
)) {

287 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_ADD_I8_TO_RM32
, 
	`MODRM_R32
(0�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

288 
	`asm_x86_wr�e_by�_1
(
as
, 
�c_i32
 & 0xff);

290 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_ADD_I32_TO_RM32
, 
	`MODRM_R32
(0�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

291 
	`asm_x86_wr�e_w�d32
(
as
, 
�c_i32
);

293 
	}
}

295 
	$asm_x86_sub_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

296 
	`asm_x86_g��ic_r32_r32
(
as
, 
de�_r32
, 
�c_r32
, 
OPCODE_SUB_R32_FROM_RM32
);

297 
	}
}

299 
	$asm_x86_sub_r32_i32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_i32
) {

300 i�(
	`SIGNED_FIT8
(
�c_i32
)) {

302 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_SUB_I8_FROM_RM32
, 
	`MODRM_R32
(5�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

303 
	`asm_x86_wr�e_by�_1
(
as
, 
�c_i32
 & 0xff);

306 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_SUB_I32_FROM_RM32
, 
	`MODRM_R32
(5�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

307 
	`asm_x86_wr�e_w�d32
(
as
, 
�c_i32
);

309 
	}
}

311 
	$asm_x86_mul_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
) {

313 
	`asm_x86_wr�e_by�_3
(
as
, 0x0f, 0xaf, 
	`MODRM_R32
(
de�_r32
�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�c_r32
));

314 
	}
}

318 
	$asm_x86_shl_r32_by_imm
(
asm_x86_t
 *
as
, 
r32
, 
imm
) {

319 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_SHL_RM32_BY_I8
, 
	`MODRM_R32
(4�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
r32
));

320 
	`asm_x86_wr�e_by�_1
(
as
, 
imm
);

321 
	}
}

323 
	$asm_x86_shr_r32_by_imm
(
asm_x86_t
 *
as
, 
r32
, 
imm
) {

324 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_SHR_RM32_BY_I8
, 
	`MODRM_R32
(5�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
r32
));

325 
	`asm_x86_wr�e_by�_1
(
as
, 
imm
);

326 
	}
}

328 
	$asm_x86_�r_r32_by_imm
(
asm_x86_t
 *
as
, 
r32
, 
imm
) {

329 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_SAR_RM32_BY_I8
, 
	`MODRM_R32
(7�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
r32
));

330 
	`asm_x86_wr�e_by�_1
(
as
, 
imm
);

331 
	}
}

334 
	$asm_x86_cmp_r32_w�h_r32
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
) {

335 
	`asm_x86_g��ic_r32_r32
(
as
, 
�c_r32_b
, 
�c_r32_a
, 
OPCODE_CMP_R32_WITH_RM32
);

336 
	}
}

339 
	$asm_x86_cmp_i32_w�h_r32
(
asm_x86_t
 *
as
, 
�c_i32
, 
�c_r32
) {

340 i�(
	`SIGNED_FIT8
(
�c_i32
)) {

341 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_CMP_I8_WITH_RM32
, 
	`MODRM_R32
(7�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�c_r32
));

342 
	`asm_x86_wr�e_by�_1
(
as
, 
�c_i32
 & 0xff);

344 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_CMP_I32_WITH_RM32
, 
	`MODRM_R32
(7�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�c_r32
));

345 
	`asm_x86_wr�e_w�d32
(
as
, 
�c_i32
);

347 
	}
}

350 
	$asm_x86_��_r8_w�h_r8
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
) {

351 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_TEST_R8_WITH_RM8
, 
	`MODRM_R32
(
�c_r32_a
�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�c_r32_b
));

352 
	}
}

354 
	$asm_x86_��_r32_w�h_r32
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
) {

355 
	`asm_x86_g��ic_r32_r32
(
as
, 
�c_r32_b
, 
�c_r32_a
, 
OPCODE_TEST_R32_WITH_RM32
);

356 
	}
}

358 
	$asm_x86_�tcc_r8
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
jcc_ty�
, 
de�_r8
) {

359 
	`asm_x86_wr�e_by�_3
(
as
, 
OPCODE_SETCC_RM8_A
, 
OPCODE_SETCC_RM8_B
 | 
jcc_ty�
, 
	`MODRM_R32
(0�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r8
));

360 
	}
}

362 
	$asm_x86_jmp_�g
(
asm_x86_t
 *
as
, 
�c_r32
) {

363 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_JMP_RM32
, 
	`MODRM_R32
(4�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�c_r32
));

364 
	}
}

366 
mp_u�t_t
 
	$g�_�b�_de�
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
�b�
) {

367 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

368  
as
->
ba�
.
�b�_off�ts
[
�b�
];

369 
	}
}

371 
	$asm_x86_jmp_�b�
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
�b�
) {

372 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

373 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

374 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 < 0) {

377 
�l
 -= 2;

378 i�(
	`SIGNED_FIT8
(
�l
)) {

379 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_JMP_REL8
, 
�l
 & 0xff);

381 
�l
 += 2;

382 
�rge_jump
;

386 
�rge_jump
:

387 
�l
 -= 5;

388 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_JMP_REL32
);

389 
	`asm_x86_wr�e_w�d32
(
as
, 
�l
);

391 
	}
}

393 
	$asm_x86_jcc_�b�
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
jcc_ty�
, mp_u�t_�
�b�
) {

394 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

395 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

396 i�(
de�
 !�(
mp_u�t_t
)-1 && 
�l
 < 0) {

399 
�l
 -= 2;

400 i�(
	`SIGNED_FIT8
(
�l
)) {

401 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_JCC_REL8
 | 
jcc_ty�
, 
�l
 & 0xff);

403 
�l
 += 2;

404 
�rge_jump
;

408 
�rge_jump
:

409 
�l
 -= 6;

410 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_JCC_REL32_A
, 
OPCODE_JCC_REL32_B
 | 
jcc_ty�
);

411 
	`asm_x86_wr�e_w�d32
(
as
, 
�l
);

413 
	}
}

415 
	$asm_x86_��y
(
asm_x86_t
 *
as
, 
num_lo�ls
) {

416 
	`as��
(
num_lo�ls
 >= 0);

417 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_EBP
);

418 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_EBX
);

419 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_ESI
);

420 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_EDI
);

421 
num_lo�ls
 |= 3;

422 
	`asm_x86_sub_r32_i32
(
as
, 
ASM_X86_REG_ESP
, 
num_lo�ls
 * 
WORD_SIZE
);

423 
as
->
num_lo�ls
 =�um_locals;

424 
	}
}

426 
	$asm_x86_ex�
(
asm_x86_t
 *
as
) {

427 
	`asm_x86_sub_r32_i32
(
as
, 
ASM_X86_REG_ESP
, -as->
num_lo�ls
 * 
WORD_SIZE
);

428 
	`asm_x86_p�_r32
(
as
, 
ASM_X86_REG_EDI
);

429 
	`asm_x86_p�_r32
(
as
, 
ASM_X86_REG_ESI
);

430 
	`asm_x86_p�_r32
(
as
, 
ASM_X86_REG_EBX
);

431 
	`asm_x86_p�_r32
(
as
, 
ASM_X86_REG_EBP
);

432 
	`asm_x86_�t
(
as
);

433 
	}
}

435 
	$asm_x86_�g_off�t_�om_e�
(
asm_x86_t
 *
as
, 
size_t
 
�g_num
) {

437  (
as
->
num_lo�ls
 + 4 + 1 + 
�g_num
�* 
WORD_SIZE
;

438 
	}
}

441 
	$asm_x86_push_�g
(
asm_x86_t
 *
as
, 
�c_�g_num
) {

442 
	`asm_x86_push_di�
(
as
, 
ASM_X86_REG_ESP
, 
	`asm_x86_�g_off�t_�om_e�
�s, 
�c_�g_num
));

443 
	}
}

446 
	$asm_x86_mov_�g_to_r32
(
asm_x86_t
 *
as
, 
�c_�g_num
, 
de�_r32
) {

447 
	`asm_x86_mov_mem32_to_r32
(
as
, 
ASM_X86_REG_ESP
, 
	`asm_x86_�g_off�t_�om_e�
�s, 
�c_�g_num
), 
de�_r32
);

448 
	}
}

451 
	$asm_x86_mov_r32_to_�g
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_�g_num
) {

452 
	`asm_x86_mov_r32_to_mem32
(
as
, 
�c_r32
, 
ASM_X86_REG_ESP
, 
	`asm_x86_�g_off�t_�om_e�
�s, 
de�_�g_num
));

453 
	}
}

467 
	$asm_x86_lo�l_off�t_�om_e�
(
asm_x86_t
 *
as
, 
lo�l_num
) {

468 ()
as
;

470  
lo�l_num
 * 
WORD_SIZE
;

471 
	}
}

473 
	$asm_x86_mov_lo�l_to_r32
(
asm_x86_t
 *
as
, 
�c_lo�l_num
, 
de�_r32
) {

474 
	`asm_x86_mov_mem32_to_r32
(
as
, 
ASM_X86_REG_ESP
, 
	`asm_x86_lo�l_off�t_�om_e�
�s, 
�c_lo�l_num
), 
de�_r32
);

475 
	}
}

477 
	$asm_x86_mov_r32_to_lo�l
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_lo�l_num
) {

478 
	`asm_x86_mov_r32_to_mem32
(
as
, 
�c_r32
, 
ASM_X86_REG_ESP
, 
	`asm_x86_lo�l_off�t_�om_e�
�s, 
de�_lo�l_num
));

479 
	}
}

481 
	$asm_x86_mov_lo�l_addr_to_r32
(
asm_x86_t
 *
as
, 
lo�l_num
, 
de�_r32
) {

482 
off�t
 = 
	`asm_x86_lo�l_off�t_�om_e�
(
as
, 
lo�l_num
);

483 i�(
off�t
 == 0) {

484 
	`asm_x86_mov_r32_r32
(
as
, 
de�_r32
, 
ASM_X86_REG_ESP
);

486 
	`asm_x86_�a_di�_to_r32
(
as
, 
ASM_X86_REG_ESP
, 
off�t
, 
de�_r32
);

488 
	}
}

490 
	$asm_x86_mov_�g_p��
(
asm_x86_t
 *
as
, 
de�_r32
, 
mp_u�t_t
 
�b�
) {

491 
	`asm_x86_wr�e_by�_1
(
as
, 
OPCODE_CALL_REL32
);

492 
	`asm_x86_wr�e_w�d32
(
as
, 0);

493 
mp_u�t_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

494 
mp_�t_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

495 
	`asm_x86_p�_r32
(
as
, 
de�_r32
);

497 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_ADD_I32_TO_RM32
, 
	`MODRM_R32
(0�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
de�_r32
));

498 
	`asm_x86_wr�e_w�d32
(
as
, 
�l
);

499 
	}
}

502 
	$asm_x86_push_lo�l
(
asm_x86_t
 *
as
, 
lo�l_num
) {

503 
	`asm_x86_push_di�
(
as
, 
ASM_X86_REG_ESP
, 
	`asm_x86_lo�l_off�t_�om_e�
�s, 
lo�l_num
));

504 
	}
}

506 
	$asm_x86_push_lo�l_addr
(
asm_x86_t
 *
as
, 
lo�l_num
, 
�mp_r32
) {

507 
	`asm_x86_mov_r32_r32
(
as
, 
�mp_r32
, 
ASM_X86_REG_ESP
);

508 
	`asm_x86_add_i32_to_r32
(
as
, 
	`asm_x86_lo�l_off�t_�om_e�
�s, 
lo�l_num
), 
�mp_r32
);

509 
	`asm_x86_push_r32
(
as
, 
�mp_r32
);

510 
	}
}

513 
	$asm_x86_��_�d
(
asm_x86_t
 *
as
, 
size_t
 
fun_id
, 
mp_u�t_t
 
n_�gs
, 
�mp_r32
) {

514 
	`as��
(
n_�gs
 <= 4);

517 
�ign
 = ((
n_�gs
 + 3) & ~3) -�_args;

518 i�(
�ign
) {

519 
	`asm_x86_sub_r32_i32
(
as
, 
ASM_X86_REG_ESP
, 
�ign
 * 
WORD_SIZE
);

522 i�(
n_�gs
 > 3) {

523 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_ARG_4
);

525 i�(
n_�gs
 > 2) {

526 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_ARG_3
);

528 i�(
n_�gs
 > 1) {

529 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_ARG_2
);

531 i�(
n_�gs
 > 0) {

532 
	`asm_x86_push_r32
(
as
, 
ASM_X86_REG_ARG_1
);

536 
	`asm_x86_mov_mem32_to_r32
(
as
, 
ASM_X86_REG_FUN_TABLE
, 
fun_id
 * 
WORD_SIZE
, 
�mp_r32
);

537 
	`asm_x86_wr�e_by�_2
(
as
, 
OPCODE_CALL_RM32
, 
	`MODRM_R32
(2�| 
MODRM_RM_REG
 | 
	`MODRM_RM_R32
(
�mp_r32
));

540 i�(
n_�gs
 > 0) {

541 
	`asm_x86_add_i32_to_r32
(
as
, (
n_�gs
 + 
�ign
�* 
WORD_SIZE
, 
ASM_X86_REG_ESP
);

543 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx86.h

26 #i�de�
MICROPY_INCLUDED_PY_ASMX86_H


27 
	#MICROPY_INCLUDED_PY_ASMX86_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

31 
	~"py/asmba�.h
"

46 
	#ASM_X86_REG_EAX
 (0)

	)

47 
	#ASM_X86_REG_ECX
 (1)

	)

48 
	#ASM_X86_REG_EDX
 (2)

	)

49 
	#ASM_X86_REG_EBX
 (3)

	)

50 
	#ASM_X86_REG_ESP
 (4)

	)

51 
	#ASM_X86_REG_EBP
 (5)

	)

52 
	#ASM_X86_REG_ESI
 (6)

	)

53 
	#ASM_X86_REG_EDI
 (7)

	)

59 
	#ASM_X86_REG_ARG_1
 
ASM_X86_REG_EAX


	)

60 
	#ASM_X86_REG_ARG_2
 
ASM_X86_REG_ECX


	)

61 
	#ASM_X86_REG_ARG_3
 
ASM_X86_REG_EDX


	)

62 
	#ASM_X86_REG_ARG_4
 
ASM_X86_REG_EBX


	)

65 
	#ASM_X86_CC_JB
 (0x2)

66 
	#ASM_X86_CC_JAE
 (0x3)

67 
	#ASM_X86_CC_JZ
 (0x4)

	)

68 
	#ASM_X86_CC_JE
 (0x4)

	)

69 
	#ASM_X86_CC_JNZ
 (0x5)

	)

70 
	#ASM_X86_CC_JNE
 (0x5)

	)

71 
	#ASM_X86_CC_JBE
 (0x6)

72 
	#ASM_X86_CC_JA
 (0x7)

73 
	#ASM_X86_CC_JL
 (0xc)

74 
	#ASM_X86_CC_JGE
 (0xd)

75 
	#ASM_X86_CC_JLE
 (0xe)

76 
	#ASM_X86_CC_JG
 (0xf)

77 

	)

78 
	s_asm_x86_t
 {

79 
mp_asm_ba�_t
 
	mba�
;

80 
	mnum_lo�ls
;

81 } 
	tasm_x86_t
;

83 
�l�e
 
	$asm_x86_�d_�ss
(
asm_x86_t
 *
as
) {

84 ()
as
;

85 
	}
}

87 
asm_x86_mov_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

88 
size_t
 
asm_x86_mov_i32_to_r32
(
asm_x86_t
 *
as
, 
�t32_t
 
�c_i32
, 
de�_r32
);

89 
asm_x86_mov_r8_to_mem8
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

90 
asm_x86_mov_r16_to_mem16
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

91 
asm_x86_mov_r32_to_mem32
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_r32
, 
de�_di�
);

92 
asm_x86_mov_mem8_to_r32zx
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
);

93 
asm_x86_mov_mem16_to_r32zx
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
);

94 
asm_x86_mov_mem32_to_r32
(
asm_x86_t
 *
as
, 
�c_r32
, 
�c_di�
, 
de�_r32
);

95 
asm_x86_n�_r32
(
asm_x86_t
 *
as
, 
de�_r32
);

96 
asm_x86_�g_r32
(
asm_x86_t
 *
as
, 
de�_r32
);

97 
asm_x86_�d_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

98 
asm_x86_�_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

99 
asm_x86_x�_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

100 
asm_x86_shl_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
);

101 
asm_x86_shr_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
);

102 
asm_x86_�r_r32_�
(
asm_x86_t
 *
as
, 
de�_r32
);

103 
asm_x86_add_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

104 
asm_x86_sub_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

105 
asm_x86_mul_r32_r32
(
asm_x86_t
 *
as
, 
de�_r32
, 
�c_r32
);

106 
asm_x86_cmp_r32_w�h_r32
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
);

107 
asm_x86_��_r8_w�h_r8
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
);

108 
asm_x86_��_r32_w�h_r32
(
asm_x86_t
 *
as
, 
�c_r32_a
, 
�c_r32_b
);

109 
asm_x86_�tcc_r8
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
jcc_ty�
, 
de�_r8
);

110 
asm_x86_jmp_�g
(
asm_x86_t
 *
as
, 
�c_r86
);

111 
asm_x86_jmp_�b�
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
�b�
);

112 
asm_x86_jcc_�b�
(
asm_x86_t
 *
as
, 
mp_u�t_t
 
jcc_ty�
, mp_u�t_�
�b�
);

113 
asm_x86_��y
(
asm_x86_t
 *
as
, 
num_lo�ls
);

114 
asm_x86_ex�
(
asm_x86_t
 *
as
);

115 
asm_x86_mov_�g_to_r32
(
asm_x86_t
 *
as
, 
�c_�g_num
, 
de�_r32
);

116 
asm_x86_mov_lo�l_to_r32
(
asm_x86_t
 *
as
, 
�c_lo�l_num
, 
de�_r32
);

117 
asm_x86_mov_r32_to_lo�l
(
asm_x86_t
 *
as
, 
�c_r32
, 
de�_lo�l_num
);

118 
asm_x86_mov_lo�l_addr_to_r32
(
asm_x86_t
 *
as
, 
lo�l_num
, 
de�_r32
);

119 
asm_x86_mov_�g_p��
(
asm_x86_t
 *
as
, 
de�_r64
, 
mp_u�t_t
 
�b�
);

120 
asm_x86_��_�d
(
asm_x86_t
 *
as
, 
size_t
 
fun_id
, 
mp_u�t_t
 
n_�gs
, 
�mp_r32
);

123 
	#ASM_X86_REG_FUN_TABLE
 
ASM_X86_REG_EBP


	)

125 #i�
GENERIC_ASM_API


130 
	#ASM_WORD_SIZE
 (4)

	)

132 
	#REG_RET
 
ASM_X86_REG_EAX


	)

133 
	#REG_ARG_1
 
ASM_X86_REG_ARG_1


	)

134 
	#REG_ARG_2
 
ASM_X86_REG_ARG_2


	)

135 
	#REG_ARG_3
 
ASM_X86_REG_ARG_3


	)

136 
	#REG_ARG_4
 
ASM_X86_REG_ARG_4


	)

139 
	#REG_TEMP0
 
ASM_X86_REG_EAX


	)

140 
	#REG_TEMP1
 
ASM_X86_REG_ECX


	)

141 
	#REG_TEMP2
 
ASM_X86_REG_EDX


	)

144 
	#REG_LOCAL_1
 
ASM_X86_REG_EBX


	)

145 
	#REG_LOCAL_2
 
ASM_X86_REG_ESI


	)

146 
	#REG_LOCAL_3
 
ASM_X86_REG_EDI


	)

147 
	#REG_LOCAL_NUM
 (3)

	)

150 
	#REG_FUN_TABLE
 
ASM_X86_REG_FUN_TABLE


	)

152 
	#ASM_T
 
asm_x86_t


	)

153 
	#ASM_END_PASS
 
asm_x86_�d_�ss


	)

154 
	#ASM_ENTRY
 
asm_x86_��y


	)

155 
	#ASM_EXIT
 
asm_x86_ex�


	)

157 
	#ASM_JUMP
 
asm_x86_jmp_�b�


	)

158 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

160 i�(
bo�_��
) { \

161 
	`asm_x86_��_r8_w�h_r8
(
as
, 
�g
,�eg); \

163 
	`asm_x86_��_r32_w�h_r32
(
as
, 
�g
,�eg); \

165 
	`asm_x86_jcc_�b�
(
as
, 
ASM_X86_CC_JZ
, 
�b�
); \

166 } 0)

	)

167 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

169 i�(
bo�_��
) { \

170 
	`asm_x86_��_r8_w�h_r8
(
as
, 
�g
,�eg); \

172 
	`asm_x86_��_r32_w�h_r32
(
as
, 
�g
,�eg); \

174 
	`asm_x86_jcc_�b�
(
as
, 
ASM_X86_CC_JNZ
, 
�b�
); \

175 } 0)

	)

176 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

178 
	`asm_x86_cmp_r32_w�h_r32
(
as
, 
�g1
, 
�g2
); \

179 
	`asm_x86_jcc_�b�
(
as
, 
ASM_X86_CC_JE
, 
�b�
); \

180 } 0)

	)

181 
	#ASM_JUMP_REG
(
as
, 
�g
�
	`asm_x86_jmp_�g
(�s), (�g))

	)

182 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_x86_��_�d
�s, idx, 
mp_f_n_�gs
[idx], 
ASM_X86_REG_EAX
)

	)

184 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g_�c
�
	`asm_x86_mov_r32_to_lo�l
(�s), (�g_�c), (lo�l_num))

	)

185 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
�
	`asm_x86_mov_i32_to_r32
(�s), (imm), (�g_de�))

	)

186 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x86_mov_lo�l_to_r32
(�s), (lo�l_num), (�g_de�))

	)

187 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_mov_r32_r32
(�s), (�g_de�), (�g_�c))

	)

188 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x86_mov_lo�l_addr_to_r32
(�s), (lo�l_num), (�g_de�))

	)

189 
	#ASM_MOV_REG_PCREL
(
as
, 
�g_de�
, 
�b�
�
	`asm_x86_mov_�g_p��
(�s), (�g_de�), (�b�))

	)

191 
	#ASM_NOT_REG
(
as
, 
�g
�
	`asm_x86_n�_r32
(�s), (�g))

	)

192 
	#ASM_NEG_REG
(
as
, 
�g
�
	`asm_x86_�g_r32
(�s), (�g))

	)

193 
	#ASM_LSL_REG
(
as
, 
�g
�
	`asm_x86_shl_r32_�
(�s), (�g))

	)

194 
	#ASM_LSR_REG
(
as
, 
�g
�
	`asm_x86_shr_r32_�
(�s), (�g))

	)

195 
	#ASM_ASR_REG
(
as
, 
�g
�
	`asm_x86_�r_r32_�
(�s), (�g))

	)

196 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_�_r32_r32
(�s), (�g_de�), (�g_�c))

	)

197 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_x�_r32_r32
(�s), (�g_de�), (�g_�c))

	)

198 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_�d_r32_r32
(�s), (�g_de�), (�g_�c))

	)

199 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_add_r32_r32
(�s), (�g_de�), (�g_�c))

	)

200 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_sub_r32_r32
(�s), (�g_de�), (�g_�c))

	)

201 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x86_mul_r32_r32
(�s), (�g_de�), (�g_�c))

	)

203 
	#ASM_LOAD_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x86_mov_mem32_to_r32
(�s), (�g_ba�), 0, (�g_de�))

	)

204 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x86_mov_mem32_to_r32
(�s), (�g_ba�), 4 * (w�d_off�t), (�g_de�))

	)

205 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x86_mov_mem8_to_r32zx
(�s), (�g_ba�), 0, (�g_de�))

	)

206 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x86_mov_mem16_to_r32zx
(�s), (�g_ba�), 0, (�g_de�))

	)

207 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
�
	`asm_x86_mov_mem16_to_r32zx
(�s), (�g_ba�), 2 * (u�t16_off�t), (�g_de�))

	)

208 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x86_mov_mem32_to_r32
(�s), (�g_ba�), 0, (�g_de�))

	)

210 
	#ASM_STORE_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x86_mov_r32_to_mem32
(�s), (�g_�c), (�g_ba�), 0)

	)

211 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x86_mov_r32_to_mem32
(�s), (�g_�c), (�g_ba�), 4 * (w�d_off�t))

	)

212 
	#ASM_STORE8_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x86_mov_r8_to_mem8
(�s), (�g_�c), (�g_ba�), 0)

	)

213 
	#ASM_STORE16_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x86_mov_r16_to_mem16
(�s), (�g_�c), (�g_ba�), 0)

	)

214 
	#ASM_STORE32_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x86_mov_r32_to_mem32
(�s), (�g_�c), (�g_ba�), 0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmxtensa.c

27 
	~<�dio.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

33 #i�
MICROPY_EMIT_XTENSA
 || 
MICROPY_EMIT_INLINE_XTENSA
 || 
MICROPY_EMIT_XTENSAWIN


35 
	~"py/asmx�n�.h
"

37 
	#WORD_SIZE
 (4)

	)

38 
	#SIGNED_FIT8
(
x
�((((x�& 0xffffff80�=�0�|| (((x�& 0xffffff80�=�0xffffff80))

	)

39 
	#SIGNED_FIT12
(
x
�((((x�& 0xfffff800�=�0�|| (((x�& 0xfffff800�=�0xfffff800))

	)

41 
	$asm_x�n�_�d_�ss
(
asm_x�n�_t
 *
as
) {

42 
as
->
num_cڡ
 =�s->
cur_cڡ
;

43 
as
->
cur_cڡ
 = 0;

47 i�(
as
->
ba�
.
�ss
 =�
MP_ASM_PASS_EMIT
) {

48 
u�t8_t
 *
d
 = 
as
->
ba�
.
code_ba�
;

49 
	`��tf
("XTENSA ASM:");

50 
i
 = 0; i < ((
as
->
ba�
.
code_size
 + 15) & ~15); ++i) {

51 i�(
i
 % 16 == 0) {

52 
	`��tf
("\n%08x:", (
u�t32_t
)&
d
[
i
]);

54 i�(
i
 % 2 == 0) {

55 
	`��tf
(" ");

57 
	`��tf
("%02x", 
d
[
i
]);

59 
	`��tf
("\n");

62 
	}
}

64 
	$asm_x�n�_��y
(
asm_x�n�_t
 *
as
, 
num_lo�ls
) {

66 
	`asm_x�n�_�_j
(
as
,�s->
num_cڡ
 * 
WORD_SIZE
 + 4 - 4);

67 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 1);

68 
as
->
cڡ_�b�
 = (
u�t32_t
 *)
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&as->
ba�
,�s->
num_cڡ
 * 4);

71 
as
->
�ack_adju�
 = (((
ASM_XTENSA_NUM_REGS_SAVED
 + 
num_lo�ls
�* 
WORD_SIZE
) + 15) & ~15;

72 i�(
	`SIGNED_FIT8
(-
as
->
�ack_adju�
)) {

73 
	`asm_x�n�_�_addi
(
as
, 
ASM_XTENSA_REG_A1
, ASM_XTENSA_REG_A1, -as->
�ack_adju�
);

75 
	`asm_x�n�_�_movi
(
as
, 
ASM_XTENSA_REG_A9
,�s->
�ack_adju�
);

76 
	`asm_x�n�_�_sub
(
as
, 
ASM_XTENSA_REG_A1
, ASM_XTENSA_REG_A1, 
ASM_XTENSA_REG_A9
);

80 
	`asm_x�n�_�_s32i_n
(
as
, 
ASM_XTENSA_REG_A0
, 
ASM_XTENSA_REG_A1
, 0);

81 
i
 = 1; i < 
ASM_XTENSA_NUM_REGS_SAVED
; ++i) {

82 
	`asm_x�n�_�_s32i_n
(
as
, 
ASM_XTENSA_REG_A11
 + 
i
, 
ASM_XTENSA_REG_A1
, i);

84 
	}
}

86 
	$asm_x�n�_ex�
(
asm_x�n�_t
 *
as
) {

88 
i
 = 
ASM_XTENSA_NUM_REGS_SAVED
 - 1; i >= 1; --i) {

89 
	`asm_x�n�_�_l32i_n
(
as
, 
ASM_XTENSA_REG_A11
 + 
i
, 
ASM_XTENSA_REG_A1
, i);

91 
	`asm_x�n�_�_l32i_n
(
as
, 
ASM_XTENSA_REG_A0
, 
ASM_XTENSA_REG_A1
, 0);

94 i�(
	`SIGNED_FIT8
(
as
->
�ack_adju�
)) {

95 
	`asm_x�n�_�_addi
(
as
, 
ASM_XTENSA_REG_A1
, ASM_XTENSA_REG_A1,�s->
�ack_adju�
);

97 
	`asm_x�n�_�_movi
(
as
, 
ASM_XTENSA_REG_A9
,�s->
�ack_adju�
);

98 
	`asm_x�n�_�_add_n
(
as
, 
ASM_XTENSA_REG_A1
, ASM_XTENSA_REG_A1, 
ASM_XTENSA_REG_A9
);

101 
	`asm_x�n�_�_�t_n
(
as
);

102 
	}
}

104 
	$asm_x�n�_��y_w�
(
asm_x�n�_t
 *
as
, 
num_lo�ls
) {

106 
	`asm_x�n�_�_j
(
as
,�s->
num_cڡ
 * 
WORD_SIZE
 + 4 - 4);

107 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 1);

108 
as
->
cڡ_�b�
 = (
u�t32_t
 *)
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&as->
ba�
,�s->
num_cڡ
 * 4);

110 
as
->
�ack_adju�
 = 32 + ((((
ASM_XTENSA_NUM_REGS_SAVED_WIN
 + 
num_lo�ls
�* 
WORD_SIZE
) + 15) & ~15);

111 
	`asm_x�n�_�_��y
(
as
, 
ASM_XTENSA_REG_A1
,�s->
�ack_adju�
);

112 
	`asm_x�n�_�_s32i_n
(
as
, 
ASM_XTENSA_REG_A0
, 
ASM_XTENSA_REG_A1
, 0);

113 
	}
}

115 
	$asm_x�n�_ex�_w�
(
asm_x�n�_t
 *
as
) {

116 
	`asm_x�n�_�_l32i_n
(
as
, 
ASM_XTENSA_REG_A0
, 
ASM_XTENSA_REG_A1
, 0);

117 
	`asm_x�n�_�_�tw_n
(
as
);

118 
	}
}

120 
u�t32_t
 
	$g�_�b�_de�
(
asm_x�n�_t
 *
as
, 
u�t
 
�b�
) {

121 
	`as��
(
�b�
 < 
as
->
ba�
.
max_num_�b�s
);

122  
as
->
ba�
.
�b�_off�ts
[
�b�
];

123 
	}
}

125 
	$asm_x�n�_�16
(
asm_x�n�_t
 *
as
, 
u�t16_t
 
�
) {

126 
u�t8_t
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 2);

127 i�(
c
 !�
NULL
) {

128 
c
[0] = 
�
;

129 
c
[1] = 
�
 >> 8;

131 
	}
}

133 
	$asm_x�n�_�24
(
asm_x�n�_t
 *
as
, 
u�t32_t
 
�
) {

134 
u�t8_t
 *
c
 = 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 3);

135 i�(
c
 !�
NULL
) {

136 
c
[0] = 
�
;

137 
c
[1] = 
�
 >> 8;

138 
c
[2] = 
�
 >> 16;

140 
	}
}

142 
	$asm_x�n�_j_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
�b�
) {

143 
u�t32_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

144 
�t32_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
 - 4;

146 
	`asm_x�n�_�_j
(
as
, 
�l
);

147 
	}
}

149 
	$asm_x�n�_bccz_�g_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g
, u��
�b�
) {

150 
u�t32_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

151 
�t32_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
 - 4;

152 i�(
as
->
ba�
.
�ss
 =�
MP_ASM_PASS_EMIT
 && !
	`SIGNED_FIT12
(
�l
)) {

153 
	`��tf
("ERROR: xtensa bccz out of�ange\n");

155 
	`asm_x�n�_�_bccz
(
as
, 
c�d
, 
�g
, 
�l
);

156 
	}
}

158 
	$asm_x�n�_bcc_�g_�g_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g1
, u��
�g2
, u��
�b�
) {

159 
u�t32_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

160 
�t32_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
 - 4;

161 i�(
as
->
ba�
.
�ss
 =�
MP_ASM_PASS_EMIT
 && !
	`SIGNED_FIT8
(
�l
)) {

162 
	`��tf
("ERROR: xtensa bcc out of�ange\n");

164 
	`asm_x�n�_�_bcc
(
as
, 
c�d
, 
�g1
, 
�g2
, 
�l
);

165 
	}
}

168 
	$asm_x�n�_�tcc_�g_�g_�g
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g_de�
, u��
�g_�c1
, u��
�g_�c2
) {

169 
	`asm_x�n�_�_movi_n
(
as
, 
�g_de�
, 1);

170 
	`asm_x�n�_�_bcc
(
as
, 
c�d
, 
�g_�c1
, 
�g_�c2
, 1);

171 
	`asm_x�n�_�_movi_n
(
as
, 
�g_de�
, 0);

172 
	}
}

174 
size_t
 
	$asm_x�n�_mov_�g_i32
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
u�t32_t
 
i32
) {

176 
u�t32_t
 
cڡ_�b�_off�t
 = (
u�t8_t
 *)
as
->
cڡ_�b�
 -�s->
ba�
.
code_ba�
;

177 
size_t
 
loc
 = 
cڡ_�b�_off�t
 + 
as
->
cur_cڡ
 * 
WORD_SIZE
;

178 
	`asm_x�n�_�_l32r
(
as
, 
�g_de�
,�s->
ba�
.
code_off�t
, 
loc
);

180 i�(
as
->
cڡ_�b�
 !�
NULL
) {

181 
as
->
cڡ_�b�
[as->
cur_cڡ
] = 
i32
;

183 ++
as
->
cur_cڡ
;

184  
loc
;

185 
	}
}

187 
	$asm_x�n�_mov_�g_i32_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
u�t32_t
 
i32
) {

188 i�(-32 <�()
i32
 && ()i32 <= 95) {

189 
	`asm_x�n�_�_movi_n
(
as
, 
�g_de�
, 
i32
);

190 } i�(
	`SIGNED_FIT12
(
i32
)) {

191 
	`asm_x�n�_�_movi
(
as
, 
�g_de�
, 
i32
);

193 
	`asm_x�n�_mov_�g_i32
(
as
, 
�g_de�
, 
i32
);

195 
	}
}

197 
	$asm_x�n�_mov_lo�l_�g
(
asm_x�n�_t
 *
as
, 
lo�l_num
, 
u�t
 
�g_�c
) {

198 
	`asm_x�n�_�_s32i
(
as
, 
�g_�c
, 
ASM_XTENSA_REG_A1
, 
lo�l_num
);

199 
	}
}

201 
	$asm_x�n�_mov_�g_lo�l
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
lo�l_num
) {

202 
	`asm_x�n�_�_l32i
(
as
, 
�g_de�
, 
ASM_XTENSA_REG_A1
, 
lo�l_num
);

203 
	}
}

205 
	$asm_x�n�_mov_�g_lo�l_addr
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
lo�l_num
) {

206 
u�t
 
off
 = 
lo�l_num
 * 
WORD_SIZE
;

207 i�(
	`SIGNED_FIT8
(
off
)) {

208 
	`asm_x�n�_�_addi
(
as
, 
�g_de�
, 
ASM_XTENSA_REG_A1
, 
off
);

210 
	`asm_x�n�_�_movi
(
as
, 
�g_de�
, 
off
);

211 
	`asm_x�n�_�_add_n
(
as
, 
�g_de�
,�eg_de�, 
ASM_XTENSA_REG_A1
);

213 
	}
}

215 
	$asm_x�n�_mov_�g_p��
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�b�
) {

217 
u�t32_t
 
de�
 = 
	`g�_�b�_de�
(
as
, 
�b�
);

218 
�t32_t
 
�l
 = 
de�
 - 
as
->
ba�
.
code_off�t
;

219 
�l
 -= 3 + 3;

220 
	`asm_x�n�_�_movi
(
as
, 
�g_de�
, 
�l
);

228 
u�t32_t
 
off
 = 
as
->
ba�
.
code_off�t
 >> 1 & 1;

229 
u�t32_t
 
�d
 = (5 - 
as
->
ba�
.
code_off�t
) & 3;

230 
	`asm_x�n�_�_��0
(
as
, 
off
);

231 
	`mp_asm_ba�_g�_cur_to_wr�e_by�s
(&
as
->
ba�
, 
�d
);

234 
	`asm_x�n�_�_add_n
(
as
, 
�g_de�
,�eg_de�, 
ASM_XTENSA_REG_A0
);

235 
	}
}

237 
	$asm_x�n�_l32i_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
) {

238 i�(
w�d_off�t
 < 16) {

239 
	`asm_x�n�_�_l32i_n
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
);

240 } i�(
w�d_off�t
 < 256) {

241 
	`asm_x�n�_�_l32i
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
);

243 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("asm overflow"));

245 
	}
}

247 
	$asm_x�n�_s32i_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
w�d_off�t
) {

248 i�(
w�d_off�t
 < 16) {

249 
	`asm_x�n�_�_s32i_n
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
);

250 } i�(
w�d_off�t
 < 256) {

251 
	`asm_x�n�_�_s32i
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
);

253 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("asm overflow"));

255 
	}
}

257 
	$asm_x�n�_��_�d
(
asm_x�n�_t
 *
as
, 
u�t
 
idx
) {

258 
	`asm_x�n�_l32i_�timi�d
(
as
, 
ASM_XTENSA_REG_A0
, 
ASM_XTENSA_REG_FUN_TABLE
, 
idx
);

259 
	`asm_x�n�_�_��x0
(
as
, 
ASM_XTENSA_REG_A0
);

260 
	}
}

262 
	$asm_x�n�_��_�d_w�
(
asm_x�n�_t
 *
as
, 
u�t
 
idx
) {

263 
	`asm_x�n�_l32i_�timi�d
(
as
, 
ASM_XTENSA_REG_A8
, 
ASM_XTENSA_REG_FUN_TABLE_WIN
, 
idx
);

264 
	`asm_x�n�_�_��x8
(
as
, 
ASM_XTENSA_REG_A8
);

265 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmxtensa.h

26 #i�de�
MICROPY_INCLUDED_PY_ASMXTENSA_H


27 
	#MICROPY_INCLUDED_PY_ASMXTENSA_H


	)

29 
	~"py/misc.h
"

30 
	~"py/asmba�.h
"

50 
	#ASM_XTENSA_REG_A0
 (0)

	)

51 
	#ASM_XTENSA_REG_A1
 (1)

	)

52 
	#ASM_XTENSA_REG_A2
 (2)

	)

53 
	#ASM_XTENSA_REG_A3
 (3)

	)

54 
	#ASM_XTENSA_REG_A4
 (4)

	)

55 
	#ASM_XTENSA_REG_A5
 (5)

	)

56 
	#ASM_XTENSA_REG_A6
 (6)

	)

57 
	#ASM_XTENSA_REG_A7
 (7)

	)

58 
	#ASM_XTENSA_REG_A8
 (8)

	)

59 
	#ASM_XTENSA_REG_A9
 (9)

	)

60 
	#ASM_XTENSA_REG_A10
 (10)

	)

61 
	#ASM_XTENSA_REG_A11
 (11)

	)

62 
	#ASM_XTENSA_REG_A12
 (12)

	)

63 
	#ASM_XTENSA_REG_A13
 (13)

	)

64 
	#ASM_XTENSA_REG_A14
 (14)

	)

65 
	#ASM_XTENSA_REG_A15
 (15)

	)

68 
	#ASM_XTENSA_CCZ_EQ
 (0)

	)

69 
	#ASM_XTENSA_CCZ_NE
 (1)

	)

72 
	#ASM_XTENSA_CC_NONE
 (0)

	)

73 
	#ASM_XTENSA_CC_EQ
 (1)

	)

74 
	#ASM_XTENSA_CC_LT
 (2)

	)

75 
	#ASM_XTENSA_CC_LTU
 (3)

	)

76 
	#ASM_XTENSA_CC_ALL
 (4)

	)

77 
	#ASM_XTENSA_CC_BC
 (5)

	)

78 
	#ASM_XTENSA_CC_ANY
 (8)

	)

79 
	#ASM_XTENSA_CC_NE
 (9)

	)

80 
	#ASM_XTENSA_CC_GE
 (10)

	)

81 
	#ASM_XTENSA_CC_GEU
 (11)

	)

82 
	#ASM_XTENSA_CC_NALL
 (12)

	)

83 
	#ASM_XTENSA_CC_BS
 (13)

	)

86 
	#ASM_XTENSA_ENCODE_RRR
(
�0
, 
�1
, 
�2
, 
r
, 
s
, 
t
) \

87 ((((
u�t32_t
)
�2
�<< 20�| (((u�t32_t)
�1
�<< 16�| ((
r
�<< 12�| ((
s
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

88 
	#ASM_XTENSA_ENCODE_RRI4
(
�0
, 
�1
, 
r
, 
s
, 
t
, 
imm4
) \

89 (((
imm4
�<< 20�| ((
�1
�<< 16�| ((
r
�<< 12�| ((
s
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

90 
	#ASM_XTENSA_ENCODE_RRI8
(
�0
, 
r
, 
s
, 
t
, 
imm8
) \

91 ((((
u�t32_t
)
imm8
�<< 16�| ((
r
�<< 12�| ((
s
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

92 
	#ASM_XTENSA_ENCODE_RI16
(
�0
, 
t
, 
imm16
) \

93 (((
imm16
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

94 
	#ASM_XTENSA_ENCODE_RSR
(
�0
, 
�1
, 
�2
, 
rs
, 
t
) \

95 (((
�2
�<< 20�| ((
�1
�<< 16�| ((
rs
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

96 
	#ASM_XTENSA_ENCODE_CALL
(
�0
, 
n
, 
off�t
) \

97 (((
off�t
�<< 6�| ((
n
�<< 4�| (
�0
))

	)

98 
	#ASM_XTENSA_ENCODE_CALLX
(
�0
, 
�1
, 
�2
, 
r
, 
s
, 
m
, 
n
) \

99 ((((
u�t32_t
)
�2
�<< 20�| (((u�t32_t)
�1
�<< 16�| ((
r
�<< 12�| ((
s
�<< 8�| ((
m
�<< 6�| ((
n
�<< 4�| (
�0
))

	)

100 
	#ASM_XTENSA_ENCODE_BRI8
(
�0
, 
r
, 
s
, 
m
, 
n
, 
imm8
) \

101 (((
imm8
�<< 16�| ((
r
�<< 12�| ((
s
�<< 8�| ((
m
�<< 6�| ((
n
�<< 4�| (
�0
))

	)

102 
	#ASM_XTENSA_ENCODE_BRI12
(
�0
, 
s
, 
m
, 
n
, 
imm12
) \

103 (((
imm12
�<< 12�| ((
s
�<< 8�| ((
m
�<< 6�| ((
n
�<< 4�| (
�0
))

	)

104 
	#ASM_XTENSA_ENCODE_RRRN
(
�0
, 
r
, 
s
, 
t
) \

105 (((
r
�<< 12�| ((
s
�<< 8�| ((
t
�<< 4�| (
�0
))

	)

106 
	#ASM_XTENSA_ENCODE_RI7
(
�0
, 
s
, 
imm7
) \

107 ((((
imm7
�& 0xf�<< 12�| ((
s
�<< 8�| ((imm7�& 0x70�| (
�0
))

	)

110 
	#ASM_XTENSA_NUM_REGS_SAVED
 (5)

	)

111 
	#ASM_XTENSA_NUM_REGS_SAVED_WIN
 (1)

	)

113 
	s_asm_x�n�_t
 {

114 
mp_asm_ba�_t
 
	mba�
;

115 
u�t32_t
 
	mcur_cڡ
;

116 
u�t32_t
 
	mnum_cڡ
;

117 
u�t32_t
 *
	mcڡ_�b�
;

118 
u�t32_t
 
	m�ack_adju�
;

119 } 
	tasm_x�n�_t
;

121 
asm_x�n�_�d_�ss
(
asm_x�n�_t
 *
as
);

123 
asm_x�n�_��y
(
asm_x�n�_t
 *
as
, 
num_lo�ls
);

124 
asm_x�n�_ex�
(
asm_x�n�_t
 *
as
);

126 
asm_x�n�_��y_w�
(
asm_x�n�_t
 *
as
, 
num_lo�ls
);

127 
asm_x�n�_ex�_w�
(
asm_x�n�_t
 *
as
);

129 
asm_x�n�_�16
(
asm_x�n�_t
 *
as
, 
u�t16_t
 
�
);

130 
asm_x�n�_�24
(
asm_x�n�_t
 *
as
, 
u�t32_t
 
�
);

134 
�l�e
 
	$asm_x�n�_�_��y
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, 
�t32_t
 
num_by�s
) {

135 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_BRI12
(6, 
�g_�c
, 0, 3, (
num_by�s
 / 8) & 0xfff));

136 
	}
}

138 
�l�e
 
	$asm_x�n�_�_add_n
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

139 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(10, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

140 
	}
}

142 
�l�e
 
	$asm_x�n�_�_addi
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
, 
imm8
) {

143 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 12, 
�g_�c
, 
�g_de�
, 
imm8
 & 0xff));

144 
	}
}

146 
�l�e
 
	$asm_x�n�_�_�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

147 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 1, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

148 
	}
}

150 
�l�e
 
	$asm_x�n�_�_bcc
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g_�c1
, u��
�g_�c2
, 
�t32_t
 
�l8
) {

151 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(7, 
c�d
, 
�g_�c1
, 
�g_�c2
, 
�l8
 & 0xff));

152 
	}
}

154 
�l�e
 
	$asm_x�n�_�_bccz
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g_�c
, 
�t32_t
 
�l12
) {

155 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_BRI12
(6, 
�g_�c
, 
c�d
, 1, 
�l12
 & 0xfff));

156 
	}
}

158 
�l�e
 
	$asm_x�n�_�_��0
(
asm_x�n�_t
 *
as
, 
�t32_t
 
�l18
) {

159 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_CALL
(5, 0, 
�l18
 & 0x3ffff));

160 
	}
}

162 
�l�e
 
	$asm_x�n�_�_��x0
(
asm_x�n�_t
 *
as
, 
u�t
 
�g
) {

163 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_CALLX
(0, 0, 0, 0, 
�g
, 3, 0));

164 
	}
}

166 
�l�e
 
	$asm_x�n�_�_��x8
(
asm_x�n�_t
 *
as
, 
u�t
 
�g
) {

167 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_CALLX
(0, 0, 0, 0, 
�g
, 3, 2));

168 
	}
}

170 
�l�e
 
	$asm_x�n�_�_j
(
asm_x�n�_t
 *
as
, 
�t32_t
 
�l18
) {

171 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_CALL
(6, 0, 
�l18
 & 0x3ffff));

172 
	}
}

174 
�l�e
 
	$asm_x�n�_�_jx
(
asm_x�n�_t
 *
as
, 
u�t
 
�g
) {

175 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_CALLX
(0, 0, 0, 0, 
�g
, 2, 2));

176 
	}
}

178 
�l�e
 
	$asm_x�n�_�_l8ui
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
by�_off�t
) {

179 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 0, 
�g_ba�
, 
�g_de�
, 
by�_off�t
 & 0xff));

180 
	}
}

182 
�l�e
 
	$asm_x�n�_�_l16ui
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
h�f_w�d_off�t
) {

183 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 1, 
�g_ba�
, 
�g_de�
, 
h�f_w�d_off�t
 & 0xff));

184 
	}
}

186 
�l�e
 
	$asm_x�n�_�_l32i
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
) {

187 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 2, 
�g_ba�
, 
�g_de�
, 
w�d_off�t
 & 0xff));

188 
	}
}

190 
�l�e
 
	$asm_x�n�_�_l32i_n
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
) {

191 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(8, 
w�d_off�t
 & 0xf, 
�g_ba�
, 
�g_de�
));

192 
	}
}

194 
�l�e
 
	$asm_x�n�_�_l32r
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
u�t32_t
 
�_off
, u�t32_�
de�_off
) {

195 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RI16
(1, 
�g_de�
, ((
de�_off
 - ((
�_off
 + 3) & ~3)) >> 2) & 0xffff));

196 
	}
}

198 
�l�e
 
	$asm_x�n�_�_mov_n
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

199 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(13, 0, 
�g_�c
, 
�g_de�
));

200 
	}
}

202 
�l�e
 
	$asm_x�n�_�_movi
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
�t32_t
 
imm12
) {

203 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 10, (
imm12
 >> 8�& 0xf, 
�g_de�
, imm12 & 0xff));

204 
	}
}

207 
�l�e
 
	$asm_x�n�_�_movi_n
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
imm7
) {

208 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RI7
(12, 
�g_de�
, 
imm7
));

209 
	}
}

211 
�l�e
 
	$asm_x�n�_�_mu�
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

212 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 2, 8, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

213 
	}
}

215 
�l�e
 
	$asm_x�n�_�_�g
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

216 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 6, 
�g_de�
, 0, 
�g_�c
));

217 
	}
}

219 
�l�e
 
	$asm_x�n�_�_�
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

220 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 2, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

221 
	}
}

223 
�l�e
 
	$asm_x�n�_�_�t_n
(
asm_x�n�_t
 *
as
) {

224 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(13, 15, 0, 0));

225 
	}
}

227 
�l�e
 
	$asm_x�n�_�_�tw_n
(
asm_x�n�_t
 *
as
) {

228 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(13, 15, 0, 1));

229 
	}
}

231 
�l�e
 
	$asm_x�n�_�_s8i
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
by�_off�t
) {

232 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 4, 
�g_ba�
, 
�g_�c
, 
by�_off�t
 & 0xff));

233 
	}
}

235 
�l�e
 
	$asm_x�n�_�_s16i
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
h�f_w�d_off�t
) {

236 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 5, 
�g_ba�
, 
�g_�c
, 
h�f_w�d_off�t
 & 0xff));

237 
	}
}

239 
�l�e
 
	$asm_x�n�_�_s32i
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
w�d_off�t
) {

240 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(2, 6, 
�g_ba�
, 
�g_�c
, 
w�d_off�t
 & 0xff));

241 
	}
}

243 
�l�e
 
	$asm_x�n�_�_s32i_n
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
w�d_off�t
) {

244 
	`asm_x�n�_�16
(
as
, 
	`ASM_XTENSA_ENCODE_RRRN
(9, 
w�d_off�t
 & 0xf, 
�g_ba�
, 
�g_�c
));

245 
	}
}

247 
�l�e
 
	$asm_x�n�_�_�l
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

248 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 1, 10, 
�g_de�
, 
�g_�c
, 0));

249 
	}
}

251 
�l�e
 
	$asm_x�n�_�_�l
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

252 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 1, 9, 
�g_de�
, 0, 
�g_�c
));

253 
	}
}

255 
�l�e
 
	$asm_x�n�_�_�a
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c
) {

256 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 1, 11, 
�g_de�
, 0, 
�g_�c
));

257 
	}
}

259 
�l�e
 
	$asm_x�n�_�_s�
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
) {

260 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 4, 1, 
�g_�c
, 0));

261 
	}
}

263 
�l�e
 
	$asm_x�n�_�_s�
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
) {

264 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 4, 0, 
�g_�c
, 0));

265 
	}
}

267 
�l�e
 
	$asm_x�n�_�_sub
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

268 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 12, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

269 
	}
}

271 
�l�e
 
	$asm_x�n�_�_x�
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_�c_a
, u��
�g_�c_b
) {

272 
	`asm_x�n�_�24
(
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 0, 3, 
�g_de�
, 
�g_�c_a
, 
�g_�c_b
));

273 
	}
}

276 
asm_x�n�_j_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
�b�
);

277 
asm_x�n�_bccz_�g_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g
, u��
�b�
);

278 
asm_x�n�_bcc_�g_�g_�b�
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g1
, u��
�g2
, u��
�b�
);

279 
asm_x�n�_�tcc_�g_�g_�g
(
asm_x�n�_t
 *
as
, 
u�t
 
c�d
, u��
�g_de�
, u��
�g_�c1
, u��
�g_�c2
);

280 
size_t
 
asm_x�n�_mov_�g_i32
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
u�t32_t
 
i32
);

281 
asm_x�n�_mov_�g_i32_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
u�t32_t
 
i32
);

282 
asm_x�n�_mov_lo�l_�g
(
asm_x�n�_t
 *
as
, 
lo�l_num
, 
u�t
 
�g_�c
);

283 
asm_x�n�_mov_�g_lo�l
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
lo�l_num
);

284 
asm_x�n�_mov_�g_lo�l_addr
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, 
lo�l_num
);

285 
asm_x�n�_mov_�g_p��
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�b�
);

286 
asm_x�n�_l32i_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_de�
, u��
�g_ba�
, u��
w�d_off�t
);

287 
asm_x�n�_s32i_�timi�d
(
asm_x�n�_t
 *
as
, 
u�t
 
�g_�c
, u��
�g_ba�
, u��
w�d_off�t
);

288 
asm_x�n�_��_�d
(
asm_x�n�_t
 *
as
, 
u�t
 
idx
);

289 
asm_x�n�_��_�d_w�
(
asm_x�n�_t
 *
as
, 
u�t
 
idx
);

292 
	#ASM_XTENSA_REG_FUN_TABLE
 
ASM_XTENSA_REG_A15


	)

293 
	#ASM_XTENSA_REG_FUN_TABLE_WIN
 
ASM_XTENSA_REG_A7


	)

295 #i�
GENERIC_ASM_API


300 
	#ASM_WORD_SIZE
 (4)

	)

302 #i�!
GENERIC_ASM_API_WIN


305 
	#REG_RET
 
ASM_XTENSA_REG_A2


	)

306 
	#REG_ARG_1
 
ASM_XTENSA_REG_A2


	)

307 
	#REG_ARG_2
 
ASM_XTENSA_REG_A3


	)

308 
	#REG_ARG_3
 
ASM_XTENSA_REG_A4


	)

309 
	#REG_ARG_4
 
ASM_XTENSA_REG_A5


	)

310 
	#REG_ARG_5
 
ASM_XTENSA_REG_A6


	)

312 
	#REG_TEMP0
 
ASM_XTENSA_REG_A2


	)

313 
	#REG_TEMP1
 
ASM_XTENSA_REG_A3


	)

314 
	#REG_TEMP2
 
ASM_XTENSA_REG_A4


	)

316 
	#REG_LOCAL_1
 
ASM_XTENSA_REG_A12


	)

317 
	#REG_LOCAL_2
 
ASM_XTENSA_REG_A13


	)

318 
	#REG_LOCAL_3
 
ASM_XTENSA_REG_A14


	)

319 
	#REG_LOCAL_NUM
 (3)

	)

321 
	#ASM_NUM_REGS_SAVED
 
ASM_XTENSA_NUM_REGS_SAVED


	)

322 
	#REG_FUN_TABLE
 
ASM_XTENSA_REG_FUN_TABLE


	)

324 
	#ASM_ENTRY
(
as
, 
�o�l
�
	`asm_x�n�_��y
(�s), (�o�l))

	)

325 
	#ASM_EXIT
(
as
�
	`asm_x�n�_ex�
(�s))

	)

326 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_x�n�_��_�d
(�s), (idx))

	)

331 
	#REG_PARENT_RET
 
ASM_XTENSA_REG_A2


	)

332 
	#REG_PARENT_ARG_1
 
ASM_XTENSA_REG_A2


	)

333 
	#REG_PARENT_ARG_2
 
ASM_XTENSA_REG_A3


	)

334 
	#REG_PARENT_ARG_3
 
ASM_XTENSA_REG_A4


	)

335 
	#REG_PARENT_ARG_4
 
ASM_XTENSA_REG_A5


	)

336 
	#REG_RET
 
ASM_XTENSA_REG_A10


	)

337 
	#REG_ARG_1
 
ASM_XTENSA_REG_A10


	)

338 
	#REG_ARG_2
 
ASM_XTENSA_REG_A11


	)

339 
	#REG_ARG_3
 
ASM_XTENSA_REG_A12


	)

340 
	#REG_ARG_4
 
ASM_XTENSA_REG_A13


	)

342 
	#REG_TEMP0
 
ASM_XTENSA_REG_A10


	)

343 
	#REG_TEMP1
 
ASM_XTENSA_REG_A11


	)

344 
	#REG_TEMP2
 
ASM_XTENSA_REG_A12


	)

346 
	#REG_LOCAL_1
 
ASM_XTENSA_REG_A4


	)

347 
	#REG_LOCAL_2
 
ASM_XTENSA_REG_A5


	)

348 
	#REG_LOCAL_3
 
ASM_XTENSA_REG_A6


	)

349 
	#REG_LOCAL_NUM
 (3)

	)

351 
	#ASM_NUM_REGS_SAVED
 
ASM_XTENSA_NUM_REGS_SAVED_WIN


	)

352 
	#REG_FUN_TABLE
 
ASM_XTENSA_REG_FUN_TABLE_WIN


	)

354 
	#ASM_ENTRY
(
as
, 
�o�l
�
	`asm_x�n�_��y_w�
(�s), (�o�l))

	)

355 
	#ASM_EXIT
(
as
�
	`asm_x�n�_ex�_w�
(�s))

	)

356 
	#ASM_CALL_IND
(
as
, 
idx
�
	`asm_x�n�_��_�d_w�
(�s), (idx))

	)

360 
	#ASM_T
 
asm_x�n�_t


	)

361 
	#ASM_END_PASS
 
asm_x�n�_�d_�ss


	)

363 
	#ASM_JUMP
 
asm_x�n�_j_�b�


	)

364 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

365 
	`asm_x�n�_bccz_�g_�b�
(
as
, 
ASM_XTENSA_CCZ_EQ
, 
�g
, 
�b�
)

	)

366 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

367 
	`asm_x�n�_bccz_�g_�b�
(
as
, 
ASM_XTENSA_CCZ_NE
, 
�g
, 
�b�
)

	)

368 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

369 
	`asm_x�n�_bcc_�g_�g_�b�
(
as
, 
ASM_XTENSA_CC_EQ
, 
�g1
, 
�g2
, 
�b�
)

	)

370 
	#ASM_JUMP_REG
(
as
, 
�g
�
	`asm_x�n�_�_jx
(�s), (�g))

	)

372 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g_�c
�
	`asm_x�n�_mov_lo�l_�g
(�s), 
ASM_NUM_REGS_SAVED
 + (lo�l_num), (�g_�c))

	)

373 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
�
	`asm_x�n�_mov_�g_i32_�timi�d
(�s), (�g_de�), (imm))

	)

374 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x�n�_mov_�g_lo�l
(�s), (�g_de�), 
ASM_NUM_REGS_SAVED
 + (lo�l_num))

	)

375 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_mov_n
(�s), (�g_de�), (�g_�c))

	)

376 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
�
	`asm_x�n�_mov_�g_lo�l_addr
(�s), (�g_de�), 
ASM_NUM_REGS_SAVED
 + (lo�l_num))

	)

377 
	#ASM_MOV_REG_PCREL
(
as
, 
�g_de�
, 
�b�
�
	`asm_x�n�_mov_�g_p��
(�s), (�g_de�), (�b�))

	)

379 
	#ASM_NEG_REG
(
as
, 
�g_de�
�
	`asm_x�n�_�_�g
(�s), (�g_de�), (�g_de�))

	)

380 
	#ASM_LSL_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
) \

382 
	`asm_x�n�_�_s�
((
as
), (
�g_shi�
)); \

383 
	`asm_x�n�_�_�l
((
as
), (
�g_de�
), (reg_dest)); \

384 } 0)

	)

385 
	#ASM_LSR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
) \

387 
	`asm_x�n�_�_s�
((
as
), (
�g_shi�
)); \

388 
	`asm_x�n�_�_�l
((
as
), (
�g_de�
), (reg_dest)); \

389 } 0)

	)

390 
	#ASM_ASR_REG_REG
(
as
, 
�g_de�
, 
�g_shi�
) \

392 
	`asm_x�n�_�_s�
((
as
), (
�g_shi�
)); \

393 
	`asm_x�n�_�_�a
((
as
), (
�g_de�
), (reg_dest)); \

394 } 0)

	)

395 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_�
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

396 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_x�
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

397 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_�d
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

398 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_add_n
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

399 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_sub
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

400 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
�
	`asm_x�n�_�_mu�
(�s), (�g_de�), (�g_de�), (�g_�c))

	)

402 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x�n�_l32i_�timi�d
(�s), (�g_de�), (�g_ba�), (w�d_off�t))

	)

403 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x�n�_�_l8ui
(�s), (�g_de�), (�g_ba�), 0)

	)

404 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x�n�_�_l16ui
(�s), (�g_de�), (�g_ba�), 0)

	)

405 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
�
	`asm_x�n�_�_l16ui
(�s), (�g_de�), (�g_ba�), (u�t16_off�t))

	)

406 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
�
	`asm_x�n�_�_l32i_n
(�s), (�g_de�), (�g_ba�), 0)

	)

408 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
�
	`asm_x�n�_s32i_�timi�d
(�s), (�g_de�), (�g_ba�), (w�d_off�t))

	)

409 
	#ASM_STORE8_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x�n�_�_s8i
(�s), (�g_�c), (�g_ba�), 0)

	)

410 
	#ASM_STORE16_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x�n�_�_s16i
(�s), (�g_�c), (�g_ba�), 0)

	)

411 
	#ASM_STORE32_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
�
	`asm_x�n�_�_s32i_n
(�s), (�g_�c), (�g_ba�), 0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc.c

28 
	~<�dbo�.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/bc0.h
"

33 
	~"py/bc.h
"

34 
	~"py/objfun.h
"

36 #i�
MICROPY_DEBUG_VERBOSE


37 
	#DEBUG_PRINT
 (1)

	)

39 
	#DEBUG_PRINT
 (0)

	)

40 
	#DEBUG_��tf
(...�()0

	)

43 
	$mp_�code_u�t
(*
�v
, 
mp_�code_u�t_�lo�t�_t
 
�lo�t�
, 
mp_u�t_t
 
v�
) {

45 
by�
 
buf
[
MP_ENCODE_UINT_MAX_BYTES
];

46 
by�
 *
p
 = 
buf
 + (buf);

49 *--
p
 = 
v�
 & 0x7f;

50 
v�
 >>= 7;

51 } 
v�
 != 0);

52 
by�
 *
c
 = 
	`�lo�t�
(
�v
, 
buf
 + (buf�- 
p
);

53 i�(
c
 !�
NULL
) {

54 
p
 !�
buf
 + (buf) - 1) {

55 *
c
++ = *
p
++ | 0x80;

57 *
c
 = *
p
;

59 
	}
}

61 
mp_u�t_t
 
	$mp_decode_u�t
(cڡ 
by�
 **
�r
) {

62 
mp_u�t_t
 
unum
 = 0;

63 
by�
 
v�
;

64 cڡ 
by�
 *
p
 = *
�r
;

66 
v�
 = *
p
++;

67 
unum
 = (unum << 7�| (
v�
 & 0x7f);

68 } (
v�
 & 0x80) != 0);

69 *
�r
 = 
p
;

70  
unum
;

71 
	}
}

79 
mp_u�t_t
 
	$mp_decode_u�t_v�ue
(cڡ 
by�
 *
�r
) {

80  
	`mp_decode_u�t
(&
�r
);

81 
	}
}

85 cڡ 
by�
 *
	$mp_decode_u�t_sk�
(cڡ 
by�
 *
�r
) {

86 (*
�r
++) & 0x80) {

88  
�r
;

89 
	}
}

91 
NORETURN
 
	$fun_pos_�gs_mism�ch
(
mp_obj_fun_bc_t
 *
f
, 
size_t
 
ex��ed
, size_�
giv�
) {

92 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


94 ()
f
;

95 ()
ex��ed
;

96 ()
giv�
;

97 
	`mp_�g_�r�_�r�_mism�ch
();

98 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NORMAL


99 ()
f
;

100 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

101 
	`MP_ERROR_TEXT
("fun�iځake�%d�os�iڮ�rgum�t�bu�%d w��giv�"), 
ex��ed
, 
giv�
);

102 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


103 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

104 
	`MP_ERROR_TEXT
("%q()�akes %d�ositional�rguments but %d were given"),

105 
	`mp_obj_fun_g�_�me
(
	`MP_OBJ_FROM_PTR
(
f
)), 
ex��ed
, 
giv�
);

107 
	}
}

109 #i�
DEBUG_PRINT


110 
	$dump_�gs
(cڡ 
mp_obj_t
 *
a
, 
size_t
 
sz
) {

111 
	`DEBUG_��tf
("%p: ", 
a
);

112 
size_t
 
i
 = 0; i < 
sz
; i++) {

113 
	`DEBUG_��tf
("%�", 
a
[
i
]);

115 
	`DEBUG_��tf
("\n");

116 
	}
}

118 
	#dump_�gs
(...�()0

	)

127 
	$mp_�tup_code_��e_h��r
(
mp_code_��e_t
 *
code_��e
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

132 
mp_obj_fun_bc_t
 *
�lf
 = 
code_��e
->
fun_bc
;

135 
size_t
 
n_��e
 = 
code_��e
->n_state;

138 
size_t
 
n_��e_unu�d
, 
n_exc_�ack_unu�d
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_pos_�gs
;

139 
	`MP_BC_PRELUDE_SIG_DECODE_INTO
(
code_��e
->
�
, 
n_��e_unu�d
, 
n_exc_�ack_unu�d
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_pos_�gs
);

140 
	`MP_BC_PRELUDE_SIZE_DECODE
(
code_��e
->
�
);

141 ()
n_��e_unu�d
;

142 ()
n_exc_�ack_unu�d
;

144 
mp_obj_t
 *
code_��e_��e
 = 
code_��e
->
�
 + 1;

145 
code_��e
->
exc_�_idx
 = 0;

148 
	`mem�t
(
code_��e_��e
, 0, 
n_��e
 * (*
code_��e
->
��e
));

150 cڡ 
mp_obj_t
 *
kw�gs
 = 
�gs
 + 
n_�gs
;

153 
mp_obj_t
 *
v�_pos_kw_�gs
 = &
code_��e_��e
[
n_��e
 - 1 - 
n_pos_�gs
 - 
n_kw�ly_�gs
];

157 i�(
n_�gs
 > 
n_pos_�gs
) {

159 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARARGS
) == 0) {

160 
	`fun_pos_�gs_mism�ch
(
�lf
, 
n_pos_�gs
, 
n_�gs
);

163 *
v�_pos_kw_�gs
-- = 
	`mp_obj_�w_tu�e
(
n_�gs
 - 
n_pos_�gs
, 
�gs
 +�_pos_args);

164 
n_�gs
 = 
n_pos_�gs
;

166 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARARGS
) != 0) {

167 
	`DEBUG_��tf
("passing�mpty�uple�s *args\n");

168 *
v�_pos_kw_�gs
-- = 
mp_cڡ_em�y_tu�e
;

172 i�(
n_kw
 =�0 && (
sc�e_�ags
 & 
MP_SCOPE_FLAG_DEFKWARGS
) == 0) {

173 i�(
n_�gs
 >�(
size_t
)(
n_pos_�gs
 - 
n_def_pos_�gs
)) {

175 
size_t
 
i
 = 
n_�gs
; i < 
n_pos_�gs
; i++) {

176 
code_��e_��e
[
n_��e
 - 1 - 
i
] = 
�lf
->
ex�a_�gs
[�- (
n_pos_�gs
 - 
n_def_pos_�gs
)];

179 
	`fun_pos_�gs_mism�ch
(
�lf
, 
n_pos_�gs
 - 
n_def_pos_�gs
, 
n_�gs
);

185 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

186 
code_��e_��e
[
n_��e
 - 1 - 
i
] = 
�gs
[i];

191 i�(
n_kw
 !�0 || (
sc�e_�ags
 & 
MP_SCOPE_FLAG_DEFKWARGS
) != 0) {

192 
	`DEBUG_��tf
("Initial�rgs: ");

193 
	`dump_�gs
(
code_��e_��e
 + 
n_��e
 - 
n_pos_�gs
 - 
n_kw�ly_�gs
,�_pos_args +�_kwonly_args);

195 
mp_obj_t
 
di�
 = 
MP_OBJ_NULL
;

196 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARKEYWORDS
) != 0) {

197 
di�
 = 
	`mp_obj_�w_di�
(
n_kw
);

198 *
v�_pos_kw_�gs
 = 
di�
;

201 
size_t
 
i
 = 0; i < 
n_kw
; i++) {

203 
mp_obj_t
 
w��d_�g_�me
 = 
kw�gs
[2 * 
i
];

206 cڡ 
u�t8_t
 *
�g_�mes
 = 
code_��e
->
�
;

207 
�g_�mes
 = 
	`mp_decode_u�t_sk�
(arg_names);

209 
size_t
 
j
 = 0; j < 
n_pos_�gs
 + 
n_kw�ly_�gs
; j++) {

210 
q�r
 
�g_q�r
 = 
	`mp_decode_u�t
(&
�g_�mes
);

211 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


212 
�g_q�r
 = 
�lf
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[arg_qstr];

214 i�(
w��d_�g_�me
 =�
	`MP_OBJ_NEW_QSTR
(
�g_q�r
)) {

215 i�(
code_��e_��e
[
n_��e
 - 1 - 
j
] !�
MP_OBJ_NULL
) {

216 
�r�_muɝ�
:

217 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

218 
	`MP_ERROR_TEXT
("fun�i� g� muɝ� v�ue�f܇rgum��'%q'"), 
	`MP_OBJ_QSTR_VALUE
(
w��d_�g_�me
));

220 
code_��e_��e
[
n_��e
 - 1 - 
j
] = 
kw�gs
[2 * 
i
 + 1];

221 
c�t�ue2
;

225 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARKEYWORDS
) == 0) {

226 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


227 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("unexpected keyword�rgument"));

229 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

230 
	`MP_ERROR_TEXT
("u�x��ed keyw�d�rgum��'%q'"), 
	`MP_OBJ_QSTR_VALUE
(
w��d_�g_�me
));

233 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
	`mp_obj_di�_g�_m�
(
di�
), 
w��d_�g_�me
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

234 i�(
�em
->
v�ue
 =�
MP_OBJ_NULL
) {

235 
�em
->
v�ue
 = 
kw�gs
[2 * 
i
 + 1];

237 
�r�_muɝ�
;

239 
c�t�ue2
:;

242 
	`DEBUG_��tf
("Args with kws flattened: ");

243 
	`dump_�gs
(
code_��e_��e
 + 
n_��e
 - 
n_pos_�gs
 - 
n_kw�ly_�gs
,�_pos_args +�_kwonly_args);

246 
mp_obj_t
 *
d
 = &
code_��e_��e
[
n_��e
 - 
n_pos_�gs
];

247 
mp_obj_t
 *
s
 = &
�lf
->
ex�a_�gs
[
n_def_pos_�gs
 - 1];

248 
size_t
 
i
 = 
n_def_pos_�gs
; i > 0; i--, 
d
++, 
s
--) {

249 i�(*
d
 =�
MP_OBJ_NULL
) {

250 *
d
 = *
s
;

254 
	`DEBUG_��tf
("Args�fter filling default�ositional: ");

255 
	`dump_�gs
(
code_��e_��e
 + 
n_��e
 - 
n_pos_�gs
 - 
n_kw�ly_�gs
,�_pos_args +�_kwonly_args);

258 
d
 < &
code_��e_��e
[
n_��e
]) {

259 i�(*
d
++ =�
MP_OBJ_NULL
) {

260 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

261 
	`MP_ERROR_TEXT
("fun�i� miss�g�equ�ed�os�iڮ�rgum��#%d"), &
code_��e_��e
[
n_��e
] - 
d
);

267 cڡ 
u�t8_t
 *
�g_�mes
 = 
	`mp_decode_u�t_sk�
(
code_��e
->
�
);

268 
size_t
 
i
 = 0; i < 
n_pos_�gs
; i++) {

269 
�g_�mes
 = 
	`mp_decode_u�t_sk�
(arg_names);

271 
size_t
 
i
 = 0; i < 
n_kw�ly_�gs
; i++) {

272 
q�r
 
�g_q�r
 = 
	`mp_decode_u�t
(&
�g_�mes
);

273 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


274 
�g_q�r
 = 
�lf
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[arg_qstr];

276 i�(
code_��e_��e
[
n_��e
 - 1 - 
n_pos_�gs
 - 
i
] =�
MP_OBJ_NULL
) {

277 
mp_m�_�em_t
 *
�em
 = 
NULL
;

278 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_DEFKWARGS
) != 0) {

279 
�em
 = 
	`mp_m�_lookup
(&((
mp_obj_di�_t
 *)
	`MP_OBJ_TO_PTR
(
�lf
->
ex�a_�gs
[
n_def_pos_�gs
]))->
m�
, 
	`MP_OBJ_NEW_QSTR
(
�g_q�r
), 
MP_MAP_LOOKUP
);

281 i�(
�em
 !�
NULL
) {

282 
code_��e_��e
[
n_��e
 - 1 - 
n_pos_�gs
 - 
i
] = 
�em
->
v�ue
;

284 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

285 
	`MP_ERROR_TEXT
("fun�i� miss�g�equ�ed keyw�d�rgum��'%q'"), 
�g_q�r
);

292 i�(
n_kw�ly_�gs
 != 0) {

293 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("function missing keyword-only�rgument"));

295 i�((
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARKEYWORDS
) != 0) {

296 *
v�_pos_kw_�gs
 = 
	`mp_obj_�w_di�
(0);

301 cڡ 
u�t8_t
 *
�
 = 
code_��e
->� + 
n_�fo
;

304 ; 
n_��
; --n_cell) {

305 
size_t
 
lo�l_num
 = *
�
++;

306 
code_��e_��e
[
n_��e
 - 1 - 
lo�l_num
] =

307 
	`mp_obj_�w_��
(
code_��e_��e
[
n_��e
 - 1 - 
lo�l_num
]);

311 
code_��e
->
�
 = ip;

313 
	`DEBUG_��tf
("C�l�g:�_pos_�gs=%d,�_kw�ly_�gs=%d\n", 
n_pos_�gs
, 
n_kw�ly_�gs
);

314 
	`dump_�gs
(
code_��e_��e
 + 
n_��e
 - 
n_pos_�gs
 - 
n_kw�ly_�gs
,�_pos_args +�_kwonly_args);

315 
	`dump_�gs
(
code_��e_��e
, 
n_��e
);

316 
	}
}

322 
	$mp_�tup_code_��e
(
mp_code_��e_t
 *
code_��e
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

323 
code_��e
->
�
 = code_��e->
fun_bc
->
by�code
;

324 
code_��e
->
�
 = &code_��e->
��e
[0] - 1;

325 #i�
MICROPY_STACKLESS


326 
code_��e
->
�ev
 = 
NULL
;

328 #i�
MICROPY_PY_SYS_SETTRACE


329 
code_��e
->
�ev_��e
 = 
NULL
;

330 
code_��e
->
�ame
 = 
NULL
;

332 
	`mp_�tup_code_��e_h��r
(
code_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

333 
	}
}

335 #i�
MICROPY_EMIT_NATIVE


340 
	$mp_�tup_code_��e_�tive
(
mp_code_��e_�tive_t
 *
code_��e
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

341 
code_��e
->
�
 = 
	`mp_obj_fun_�tive_g�_��ude_�r
(code_��e->
fun_bc
);

342 
code_��e
->
�
 = &code_��e->
��e
[0] - 1;

343 
	`mp_�tup_code_��e_h��r
((
mp_code_��e_t
 *)
code_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

344 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc.h

27 #i�de�
MICROPY_INCLUDED_PY_BC_H


28 
	#MICROPY_INCLUDED_PY_BC_H


	)

30 
	~"py/ru�ime.h
"

70 
	#MP_ENCODE_UINT_MAX_BYTES
 ((
MP_BYTES_PER_OBJ_WORD
 * 8 + 6�/ 7)

	)

72 
	#MP_BC_PRELUDE_SIG_ENCODE
(
S
, 
E
, 
sc�e
, 
out_by�
, 
out_�v
) \

75 
size_t
 
F
 = 
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_ALL_SIG
; \

76 
size_t
 
A
 = 
sc�e
->
num_pos_�gs
; \

77 
size_t
 
K
 = 
sc�e
->
num_kw�ly_�gs
; \

78 
size_t
 
D
 = 
sc�e
->
num_def_pos_�gs
; \

81 
S
 -= 1; \

85 
u�t8_t
 
z
 = (
S
 & 0xf�<< 3 | (
E
 & 1�<< 2 | (
A
 & 3); \

86 
S
 >>= 4; \

87 
E
 >>= 1; \

88 
A
 >>= 2; \

89 
S
 | 
E
 | 
F
 | 
A
 | 
K
 | 
D
) { \

90 
	`out_by�
(
out_�v
, 0x80 | 
z
); \

92 
z
 = (
F
 & 1�<< 6 | (
S
 & 3�<< 4 | (
K
 & 1) << 3 \

93 | (
A
 & 1�<< 2 | (
E
 & 1�<< 1 | (
D
 & 1); \

94 
S
 >>= 2; \

95 
E
 >>= 1; \

96 
F
 >>= 1; \

97 
A
 >>= 1; \

98 
K
 >>= 1; \

99 
D
 >>= 1; \

101 
	`out_by�
(
out_�v
, 
z
); \

102 } 0)

	)

104 
	#MP_BC_PRELUDE_SIG_DECODE_INTO
(
�
, 
S
, 
E
, 
F
, 
A
, 
K
, 
D
) \

106 
u�t8_t
 
z
 = *(
�
)++; \

108 
S
 = (
z
 >> 3) & 0xf; \

109 
E
 = (
z
 >> 2) & 0x1; \

110 
F
 = 0; \

111 
A
 = 
z
 & 0x3; \

112 
K
 = 0; \

113 
D
 = 0; \

114 
n
 = 0; 
z
 & 0x80; ++n) { \

115 
z
 = *(
�
)++; \

117 
S
 |�(
z
 & 0x30�<< (2 * 
n
); \

118 
E
 |�(
z
 & 0x02�<< 
n
; \

119 
F
 |�((
z
 & 0x40�>> 6�<< 
n
; \

120 
A
 |�(
z
 & 0x4�<< 
n
; \

121 
K
 |�((
z
 & 0x08�>> 3�<< 
n
; \

122 
D
 |�(
z
 & 0x1�<< 
n
; \

124 
S
 += 1; \

125 } 0)

	)

127 
	#MP_BC_PRELUDE_SIG_DECODE
(
�
) \

128 
size_t
 
n_��e
, 
n_exc_�ack
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_pos_�gs
; \

129 
	`MP_BC_PRELUDE_SIG_DECODE_INTO
(
�
, 
n_��e
, 
n_exc_�ack
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_pos_�gs
); \

130 ()
n_��e
; ()
n_exc_�ack
; ()
sc�e_�ags
; \

131 ()
n_pos_�gs
; ()
n_kw�ly_�gs
; ()
n_def_pos_�gs


	)

133 
	#MP_BC_PRELUDE_SIZE_ENCODE
(
I
, 
C
, 
out_by�
, 
out_�v
) \

136 
u�t8_t
 
z
 = 0; \

138 
z
 = (
I
 & 0x3f�<< 1 | (
C
 & 1); \

139 
C
 >>= 1; \

140 
I
 >>= 6; \

141 i�(
C
 | 
I
) { \

142 
z
 |= 0x80; \

144 
	`out_by�
(
out_�v
, 
z
); \

145 } 
C
 | 
I
); \

146 } 0)

	)

148 
	#MP_BC_PRELUDE_SIZE_DECODE_INTO
(
�
, 
I
, 
C
) \

150 
u�t8_t
 
z
; \

151 
C
 = 0; \

152 
I
 = 0; \

153 
n
 = 0;; ++n) { \

154 
z
 = *(
�
)++; \

156 
C
 |�(
z
 & 1�<< 
n
; \

157 
I
 |�((
z
 & 0x7e�>> 1�<< (6 * 
n
); \

158 i�(!(
z
 & 0x80)) { \

162 } 0)

	)

164 
	#MP_BC_PRELUDE_SIZE_DECODE
(
�
) \

165 
size_t
 
n_�fo
, 
n_��
; \

166 
	`MP_BC_PRELUDE_SIZE_DECODE_INTO
(
�
, 
n_�fo
, 
n_��
); \

167 ()
n_�fo
; ()
n_��


	)

170 
	#MP_CODE_STATE_EXC_SP_IDX_SENTINEL
 ((
u�t16_t
)-1)

	)

173 
	#MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
�(�xc_��+ 1 - (exc_�ack))

	)

174 
	#MP_CODE_STATE_EXC_SP_IDX_TO_PTR
(
exc_�ack
, 
exc_�_idx
�(�xc_�ack�+ (exc_�_idx�- 1)

	)

176 
	s_mp_by�code_��ude_t
 {

177 
u�t
 
	mn_��e
;

178 
u�t
 
	mn_exc_�ack
;

179 
u�t
 
	msc�e_�ags
;

180 
u�t
 
	mn_pos_�gs
;

181 
u�t
 
	mn_kw�ly_�gs
;

182 
u�t
 
	mn_def_pos_�gs
;

183 
q�r
 
	mq�r_block_�me_idx
;

184 cڡ 
by�
 *
	ml�e_�fo
;

185 cڡ 
by�
 *
	ml�e_�fo_t�
;

186 cڡ 
by�
 *
	m�codes
;

187 } 
	tmp_by�code_��ude_t
;

190 
	s_mp_exc_�ack_t
 {

191 cڡ 
by�
 *
	mh�d�r
;

194 
mp_obj_t
 *
	mv�_�
;

196 
mp_obj_ba�_t
 *
	m�ev_exc
;

197 } 
	tmp_exc_�ack_t
;

200 
	s_mp_modu�_cڡ�ts_t
 {

201 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


202 
q�r_sh�t_t
 *
	mq�r_�b�
;

204 
q�r
 
	msour�_f�e
;

206 
mp_obj_t
 *
	mobj_�b�
;

207 } 
	tmp_modu�_cڡ�ts_t
;

210 
	s_mp_modu�_cڋxt_t
 {

211 
mp_obj_modu�_t
 
	mmodu�
;

212 
mp_modu�_cڡ�ts_t
 
	mcڡ�ts
;

213 } 
	tmp_modu�_cڋxt_t
;

216 
	s_mp_comp�ed_modu�_t
 {

217 
mp_modu�_cڋxt_t
 *
	mcڋxt
;

218 cڡ 
_mp_�w_code_t
 *
	mrc
;

219 #i�
MICROPY_PERSISTENT_CODE_SAVE


220 
bo�
 
	mhas_�tive
;

221 
size_t
 
	mn_q�r
;

222 
size_t
 
	mn_obj
;

224 } 
	tmp_comp�ed_modu�_t
;

227 
	s_mp_�oz�_modu�_t
 {

228 cڡ 
mp_modu�_cڡ�ts_t
 
	mcڡ�ts
;

229 cڡ *
	m��o_fun
;

230 } 
	tmp_�oz�_modu�_t
;

233 
	s_mp_code_��e_t
 {

238 
_mp_obj_fun_bc_t
 *
	mfun_bc
;

239 cڡ 
by�
 *
	m�
;

240 
mp_obj_t
 *
	m�
;

241 
u�t16_t
 
	mn_��e
;

242 
u�t16_t
 
	mexc_�_idx
;

243 
mp_obj_di�_t
 *
	m�d_glob�s
;

244 #i�
MICROPY_STACKLESS


245 
_mp_code_��e_t
 *
	m�ev
;

247 #i�
MICROPY_PY_SYS_SETTRACE


248 
_mp_code_��e_t
 *
	m�ev_��e
;

249 
_mp_obj_�ame_t
 *
	m�ame
;

252 
mp_obj_t
 
	m��e
[0];

255 } 
	tmp_code_��e_t
;

258 
	s_mp_code_��e_�tive_t
 {

259 
_mp_obj_fun_bc_t
 *
	mfun_bc
;

260 cڡ 
by�
 *
	m�
;

261 
mp_obj_t
 *
	m�
;

262 
u�t16_t
 
	mn_��e
;

263 
u�t16_t
 
	mexc_�_idx
;

264 
mp_obj_di�_t
 *
	m�d_glob�s
;

265 
mp_obj_t
 
	m��e
[0];

266 } 
	tmp_code_��e_�tive_t
;

269 
	gu�t8_t
 *(*
	tmp_�code_u�t_�lo�t�_t
)(*
	t�v
, 
	tsize_t
 
	tnby�s
);

271 
mp_�code_u�t
(*
�v
, 
mp_�code_u�t_�lo�t�_t
 
�lo�t�
, 
mp_u�t_t
 
v�
);

272 
mp_u�t_t
 
mp_decode_u�t
(cڡ 
by�
 **
�r
);

273 
mp_u�t_t
 
mp_decode_u�t_v�ue
(cڡ 
by�
 *
�r
);

274 cڡ 
by�
 *
mp_decode_u�t_sk�
(cڡ by� *
�r
);

276 
mp_vm_�tu�_k�d_t
 
mp_execu�_by�code
(
mp_code_��e_t
 *
code_��e
,

277 #i�de�
__�lu�lus


280 
mp_obj_t
 
�je�_exc
);

281 
mp_code_��e_t
 *
mp_obj_fun_bc_���e_code��e
(
mp_obj_t
 
func
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

282 
mp_�tup_code_��e
(
mp_code_��e_t
 *
code_��e
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
);

283 
mp_�tup_code_��e_�tive
(
mp_code_��e_�tive_t
 *
code_��e
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
);

284 
mp_by�code_��t
(cڡ 
mp_��t_t
 *
��t
, cڡ 
_mp_�w_code_t
 *
rc
, 
size_t
 
fun_d�a_�n
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
);

285 
mp_by�code_��t2
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�
, 
size_t
 
�n
, 
_mp_�w_code_t
 *cڡ *
ch�d_�b�
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
);

286 cڡ 
by�
 *
mp_by�code_��t_�r
(cڡ 
mp_��t_t
 *
��t
, cڡ by� *
�_��t
, cڡ by� *
�
, 
_mp_�w_code_t
 *cڡ *
ch�d_�b�
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
);

287 
	#mp_by�code_��t_��
(
��t
, 
code
, 
x_�b�
�
	`mp_by�code_��t2
�r�t, code, 1, x_�b�)

	)

290 
	#MP_TAGPTR_PTR
(
x
�((*)((
u���_t
)(x�& ~((u���_t)3)))

	)

291 
	#MP_TAGPTR_TAG0
(
x
�((
u���_t
)(x�& 1)

	)

292 
	#MP_TAGPTR_TAG1
(
x
�((
u���_t
)(x�& 2)

	)

293 
	#MP_TAGPTR_MAKE
(
�r
, 
�g
�((*)((
u���_t
)Ռ�| (�g)))

	)

295 
�l�e
 
	$mp_modu�_cڋxt_�loc_�b�s
(
mp_modu�_cڋxt_t
 *
cڋxt
, 
size_t
 
n_q�r
, size_�
n_obj
) {

296 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


297 
size_t
 
nq
 = (
n_q�r
 * (
q�r_sh�t_t
�+ (
mp_u�t_t
) - 1) / (mp_uint_t);

298 
size_t
 
no
 = 
n_obj
;

299 
mp_u�t_t
 *
mem
 = 
	`m_�w
(mp_u�t_t, 
nq
 + 
no
);

300 
cڋxt
->
cڡ�ts
.
q�r_�b�
 = (
q�r_sh�t_t
 *)
mem
;

301 
cڋxt
->
cڡ�ts
.
obj_�b�
 = (
mp_obj_t
 *)(
mem
 + 
nq
);

303 i�(
n_obj
 == 0) {

304 
cڋxt
->
cڡ�ts
.
obj_�b�
 = 
NULL
;

306 
cڋxt
->
cڡ�ts
.
obj_�b�
 = 
	`m_�w
(
mp_obj_t
, 
n_obj
);

309 
	}
}

311 
�l�e
 
size_t
 
	$mp_by�code_g�_sour�_l�e
(cڡ 
by�
 *
l�e_�fo
, cڡ by� *
l�e_�fo_t�
, 
size_t
 
bc_off�t
) {

312 
size_t
 
sour�_l�e
 = 1;

313 
l�e_�fo
 < 
l�e_�fo_t�
) {

314 
size_t
 
c
 = *
l�e_�fo
;

315 
size_t
 
b
, 
l
;

316 i�((
c
 & 0x80) == 0) {

318 
b
 = 
c
 & 0x1f;

319 
l
 = 
c
 >> 5;

320 
l�e_�fo
 += 1;

323 
b
 = 
c
 & 0xf;

324 
l
 = ((
c
 << 4�& 0x700�| 
l�e_�fo
[1];

325 
l�e_�fo
 += 2;

327 i�(
bc_off�t
 >�
b
) {

328 
bc_off�t
 -�
b
;

329 
sour�_l�e
 +�
l
;

335  
sour�_l�e
;

336 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc0.h

26 #i�de�
MICROPY_INCLUDED_PY_BC0_H


27 
	#MICROPY_INCLUDED_PY_BC0_H


	)

43 
	#MP_BC_MASK_FORMAT
 (0xf0)

	)

44 
	#MP_BC_MASK_EXTRA_BYTE
 (0x9e)

	)

46 
	#MP_BC_FORMAT_BYTE
 (0)

	)

47 
	#MP_BC_FORMAT_QSTR
 (1)

	)

48 
	#MP_BC_FORMAT_VAR_UINT
 (2)

	)

49 
	#MP_BC_FORMAT_OFFSET
 (3)

	)

52 
	#MP_BC_FORMAT
(
�
�((0x000003a4 >> (2 * ((��>> 4))�& 3)

	)

55 
	#MP_BC_BASE_RESERVED
 (0x00)

56 
	#MP_BC_BASE_QSTR_O
 (0x10)

57 
	#MP_BC_BASE_VINT_E
 (0x20)

58 
	#MP_BC_BASE_VINT_O
 (0x30)

59 
	#MP_BC_BASE_JUMP_E
 (0x40)

60 
	#MP_BC_BASE_BYTE_O
 (0x50)

61 
	#MP_BC_BASE_BYTE_E
 (0x60)

62 
	#MP_BC_LOAD_CONST_SMALL_INT_MULTI
 (0x70)

66 
	#MP_BC_LOAD_FAST_MULTI
 (0xb0)

67 
	#MP_BC_STORE_FAST_MULTI
 (0xc0)

68 
	#MP_BC_UNARY_OP_MULTI
 (0xd0)

69 
	#MP_BC_BINARY_OP_MULTI
 (0xd7)

72 

	)

73 
	#MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM
 (64)

	)

74 
	#MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
 (16)

	)

75 
	#MP_BC_LOAD_FAST_MULTI_NUM
 (16)

	)

76 
	#MP_BC_STORE_FAST_MULTI_NUM
 (16)

	)

77 
	#MP_BC_UNARY_OP_MULTI_NUM
 (
MP_UNARY_OP_NUM_BYTECODE
)

	)

78 
	#MP_BC_BINARY_OP_MULTI_NUM
 (
MP_BINARY_OP_NUM_BYTECODE
)

	)

80 
	#MP_BC_LOAD_CONST_FALSE
 (
MP_BC_BASE_BYTE_O
 + 0x00)

	)

81 
	#MP_BC_LOAD_CONST_NONE
 (
MP_BC_BASE_BYTE_O
 + 0x01)

	)

82 
	#MP_BC_LOAD_CONST_TRUE
 (
MP_BC_BASE_BYTE_O
 + 0x02)

	)

83 
	#MP_BC_LOAD_CONST_SMALL_INT
 (
MP_BC_BASE_VINT_E
 + 0x02)

84 
	#MP_BC_LOAD_CONST_STRING
 (
MP_BC_BASE_QSTR_O
 + 0x00)

85 
	#MP_BC_LOAD_CONST_OBJ
 (
MP_BC_BASE_VINT_E
 + 0x03)

86 
	#MP_BC_LOAD_NULL
 (
MP_BC_BASE_BYTE_O
 + 0x03)

	)

88 
	#MP_BC_LOAD_FAST_N
 (
MP_BC_BASE_VINT_E
 + 0x04)

89 
	#MP_BC_LOAD_DEREF
 (
MP_BC_BASE_VINT_E
 + 0x05)

90 
	#MP_BC_LOAD_NAME
 (
MP_BC_BASE_QSTR_O
 + 0x01)

91 
	#MP_BC_LOAD_GLOBAL
 (
MP_BC_BASE_QSTR_O
 + 0x02)

92 
	#MP_BC_LOAD_ATTR
 (
MP_BC_BASE_QSTR_O
 + 0x03)

93 
	#MP_BC_LOAD_METHOD
 (
MP_BC_BASE_QSTR_O
 + 0x04)

94 
	#MP_BC_LOAD_SUPER_METHOD
 (
MP_BC_BASE_QSTR_O
 + 0x05)

95 
	#MP_BC_LOAD_BUILD_CLASS
 (
MP_BC_BASE_BYTE_O
 + 0x04)

	)

96 
	#MP_BC_LOAD_SUBSCR
 (
MP_BC_BASE_BYTE_O
 + 0x05)

	)

98 
	#MP_BC_STORE_FAST_N
 (
MP_BC_BASE_VINT_E
 + 0x06)

99 
	#MP_BC_STORE_DEREF
 (
MP_BC_BASE_VINT_E
 + 0x07)

100 
	#MP_BC_STORE_NAME
 (
MP_BC_BASE_QSTR_O
 + 0x06)

101 
	#MP_BC_STORE_GLOBAL
 (
MP_BC_BASE_QSTR_O
 + 0x07)

102 
	#MP_BC_STORE_ATTR
 (
MP_BC_BASE_QSTR_O
 + 0x08)

103 
	#MP_BC_STORE_SUBSCR
 (
MP_BC_BASE_BYTE_O
 + 0x06)

	)

105 
	#MP_BC_DELETE_FAST
 (
MP_BC_BASE_VINT_E
 + 0x08)

106 
	#MP_BC_DELETE_DEREF
 (
MP_BC_BASE_VINT_E
 + 0x09)

107 
	#MP_BC_DELETE_NAME
 (
MP_BC_BASE_QSTR_O
 + 0x09)

108 
	#MP_BC_DELETE_GLOBAL
 (
MP_BC_BASE_QSTR_O
 + 0x0a)

109 

	)

110 
	#MP_BC_DUP_TOP
 (
MP_BC_BASE_BYTE_O
 + 0x07)

	)

111 
	#MP_BC_DUP_TOP_TWO
 (
MP_BC_BASE_BYTE_O
 + 0x08)

	)

112 
	#MP_BC_POP_TOP
 (
MP_BC_BASE_BYTE_O
 + 0x09)

	)

113 
	#MP_BC_ROT_TWO
 (
MP_BC_BASE_BYTE_O
 + 0x0a)

	)

114 
	#MP_BC_ROT_THREE
 (
MP_BC_BASE_BYTE_O
 + 0x0b)

	)

116 
	#MP_BC_UNWIND_JUMP
 (
MP_BC_BASE_JUMP_E
 + 0x00)

117 
	#MP_BC_JUMP
 (
MP_BC_BASE_JUMP_E
 + 0x02)

118 
	#MP_BC_POP_JUMP_IF_TRUE
 (
MP_BC_BASE_JUMP_E
 + 0x03)

119 
	#MP_BC_POP_JUMP_IF_FALSE
 (
MP_BC_BASE_JUMP_E
 + 0x04)

120 
	#MP_BC_JUMP_IF_TRUE_OR_POP
 (
MP_BC_BASE_JUMP_E
 + 0x05)

121 
	#MP_BC_JUMP_IF_FALSE_OR_POP
 (
MP_BC_BASE_JUMP_E
 + 0x06)

122 
	#MP_BC_SETUP_WITH
 (
MP_BC_BASE_JUMP_E
 + 0x07)

123 
	#MP_BC_SETUP_EXCEPT
 (
MP_BC_BASE_JUMP_E
 + 0x08)

124 
	#MP_BC_SETUP_FINALLY
 (
MP_BC_BASE_JUMP_E
 + 0x09)

125 
	#MP_BC_POP_EXCEPT_JUMP
 (
MP_BC_BASE_JUMP_E
 + 0x0a)

126 
	#MP_BC_FOR_ITER
 (
MP_BC_BASE_JUMP_E
 + 0x0b)

127 
	#MP_BC_WITH_CLEANUP
 (
MP_BC_BASE_BYTE_O
 + 0x0c)

	)

128 
	#MP_BC_END_FINALLY
 (
MP_BC_BASE_BYTE_O
 + 0x0d)

	)

129 
	#MP_BC_GET_ITER
 (
MP_BC_BASE_BYTE_O
 + 0x0e)

	)

130 
	#MP_BC_GET_ITER_STACK
 (
MP_BC_BASE_BYTE_O
 + 0x0f)

	)

132 
	#MP_BC_BUILD_TUPLE
 (
MP_BC_BASE_VINT_E
 + 0x0a)

133 
	#MP_BC_BUILD_LIST
 (
MP_BC_BASE_VINT_E
 + 0x0b)

134 
	#MP_BC_BUILD_MAP
 (
MP_BC_BASE_VINT_E
 + 0x0c)

135 
	#MP_BC_STORE_MAP
 (
MP_BC_BASE_BYTE_E
 + 0x02)

	)

136 
	#MP_BC_BUILD_SET
 (
MP_BC_BASE_VINT_E
 + 0x0d)

137 
	#MP_BC_BUILD_SLICE
 (
MP_BC_BASE_VINT_E
 + 0x0e)

138 
	#MP_BC_STORE_COMP
 (
MP_BC_BASE_VINT_E
 + 0x0f)

139 
	#MP_BC_UNPACK_SEQUENCE
 (
MP_BC_BASE_VINT_O
 + 0x00)

140 
	#MP_BC_UNPACK_EX
 (
MP_BC_BASE_VINT_O
 + 0x01)

141 

	)

142 
	#MP_BC_RETURN_VALUE
 (
MP_BC_BASE_BYTE_E
 + 0x03)

	)

143 
	#MP_BC_RAISE_LAST
 (
MP_BC_BASE_BYTE_E
 + 0x04)

	)

144 
	#MP_BC_RAISE_OBJ
 (
MP_BC_BASE_BYTE_E
 + 0x05)

	)

145 
	#MP_BC_RAISE_FROM
 (
MP_BC_BASE_BYTE_E
 + 0x06)

	)

146 
	#MP_BC_YIELD_VALUE
 (
MP_BC_BASE_BYTE_E
 + 0x07)

	)

147 
	#MP_BC_YIELD_FROM
 (
MP_BC_BASE_BYTE_E
 + 0x08)

	)

149 
	#MP_BC_MAKE_FUNCTION
 (
MP_BC_BASE_VINT_O
 + 0x02)

150 
	#MP_BC_MAKE_FUNCTION_DEFARGS
 (
MP_BC_BASE_VINT_O
 + 0x03)

151 
	#MP_BC_MAKE_CLOSURE
 (
MP_BC_BASE_VINT_E
 + 0x00)

152 
	#MP_BC_MAKE_CLOSURE_DEFARGS
 (
MP_BC_BASE_VINT_E
 + 0x01)

153 
	#MP_BC_CALL_FUNCTION
 (
MP_BC_BASE_VINT_O
 + 0x04)

154 
	#MP_BC_CALL_FUNCTION_VAR_KW
 (
MP_BC_BASE_VINT_O
 + 0x05)

155 
	#MP_BC_CALL_METHOD
 (
MP_BC_BASE_VINT_O
 + 0x06)

156 
	#MP_BC_CALL_METHOD_VAR_KW
 (
MP_BC_BASE_VINT_O
 + 0x07)

157 

	)

158 
	#MP_BC_IMPORT_NAME
 (
MP_BC_BASE_QSTR_O
 + 0x0b)

159 
	#MP_BC_IMPORT_FROM
 (
MP_BC_BASE_QSTR_O
 + 0x0c)

160 
	#MP_BC_IMPORT_STAR
 (
MP_BC_BASE_BYTE_E
 + 0x09)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\binary.c

28 
	~<�d�t.h
>

29 
	~<�dlib.h
>

30 
	~<�ddef.h
>

31 
	~<�r�g.h
>

32 
	~<as��.h
>

34 
	~"py/b��y.h
"

35 
	~"py/sm�l�t.h
"

36 
	~"py/obj�t.h
"

37 
	~"py/ru�ime.h
"

41 #i�de�
�ignof


42 
	#�ignof
(
ty�
�
	`off�tof
(�ru� { 
c
;�y� 
t
; },�)

	)

45 
size_t
 
	$mp_b��y_g�_size
(
�ru�_ty�
, 
v�_ty�
, 
size_t
 *
�lign
) {

46 
size_t
 
size
 = 0;

47 
�ign
 = 1;

48 
�ru�_ty�
) {

51 
v�_ty�
) {

54 
size
 = 1;

58 
size
 = 2;

62 
size
 = 4;

66 
size
 = 4;

70 
size
 = 8;

75 
size
 = (*);

78 
size
 = 2;

81 
size
 = 4;

84 
size
 = 8;

96 
v�_ty�
) {

97 
BYTEARRAY_TYPECODE
:

100 
�ign
 = 
size
 = 1;

104 
�ign
 = 
	`�ignof
();

105 
size
 = ();

109 
�ign
 = 
	`�ignof
();

110 
size
 = ();

114 
�ign
 = 
	`�ignof
();

115 
size
 = ();

119 
�ign
 = 
	`�ignof
();

120 
size
 = ();

125 
�ign
 = 
	`�ignof
(*);

126 
size
 = (*);

129 
�ign
 = 2;

130 
size
 = 2;

133 
�ign
 = 
	`�ignof
();

134 
size
 = ();

137 
�ign
 = 
	`�ignof
();

138 
size
 = ();

144 i�(
size
 == 0) {

145 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("bad�ypecode"));

148 i�(
�lign
 !�
NULL
) {

149 *
�lign
 = 
�ign
;

151  
size
;

152 
	}
}

154 #i�
MICROPY_PY_BUILTINS_FLOAT
 && 
MICROPY_FLOAT_USE_NATIVE_FLT16


156 
�l�e
 
	$mp_decode_h�f_��t
(
u�t16_t
 
hf
) {

158 
u�t16_t
 
i
;

159 
_Fl�t16
 
f
;

160 } 
�u
 = { .
i
 = 
hf
 };

161  
�u
.
f
;

162 
	}
}

164 
�l�e
 
u�t16_t
 
	$mp_�code_h�f_��t
(
x
) {

166 
u�t16_t
 
i
;

167 
_Fl�t16
 
f
;

168 } 
�_�
 = { .
f
 = (
_Fl�t16
)
x
 };

169  
�_�
.
i
;

170 
	}
}

172 #�i�
MICROPY_PY_BUILTINS_FLOAT


174 
	$mp_decode_h�f_��t
(
u�t16_t
 
hf
) {

176 
u�t32_t
 
i
;

177 
f
;

178 } 
�u
;

180 
u�t16_t
 
m
 = 
hf
 & 0x3ff;

181 
e
 = (
hf
 >> 10) & 0x1f;

182 i�(
e
 == 0x1f) {

184 
e
 = 0xff;

185 } i�(
e
) {

187 
e
 += 127 - 15;

188 } i�(
m
) {

190 
e
 = 127 - 15;

191 !(
m
 & 0x400)) {

192 
m
 <<= 1;

193 --
e
;

195 
m
 -= 0x400;

196 ++
e
;

199 
�u
.
i
 = ((
hf
 & 0x8000�<< 16�| (
e
 << 23�| (
m
 << 13);

200  
�u
.
f
;

201 
	}
}

203 
u�t16_t
 
	$mp_�code_h�f_��t
(
x
) {

205 
u�t32_t
 
i
;

206 
f
;

207 } 
�u
 = { .
f
 = 
x
 };

209 
u�t16_t
 
m
 = (
�u
.
i
 >> 13) & 0x3ff;

210 i�(
�u
.
i
 & (1 << 12)) {

212 ++
m
;

214 
e
 = (
�u
.
i
 >> 23) & 0xff;

216 i�(
e
 == 0xff) {

218 
e
 = 0x1f;

219 } i�(
e
 != 0) {

220 
e
 -= 127 - 15;

221 i�(
e
 < 0) {

223 i�(
e
 >= -11) {

224 
m
 = (m | 0x400�>> -
e
;

225 i�(
m
 & 1) {

226 
m
 = (m >> 1) + 1;

228 
m
 >>= 1;

231 
m
 = 0;

233 
e
 = 0;

234 } i�(
e
 > 0x3f) {

236 
e
 = 0x1f;

237 
m
 = 0;

241 
u�t16_t
 
b�s
 = ((
�u
.
i
 >> 16�& 0x8000�| (
e
 << 10�| 
m
;

242  
b�s
;

243 
	}
}

247 
mp_obj_t
 
	$mp_b��y_g�_v�_��y
(
ty�code
, *
p
, 
size_t
 
�dex
) {

248 
mp_�t_t
 
v�
 = 0;

249 
ty�code
) {

251 
v�
 = ((sig�d *)
p
)[
�dex
];

253 
BYTEARRAY_TYPECODE
:

255 
v�
 = ((*)
p
)[
�dex
];

258 
v�
 = ((*)
p
)[
�dex
];

261 
v�
 = ((*)
p
)[
�dex
];

264  
	`mp_obj_�w_�t
(((*)
p
)[
�dex
]);

266  
	`mp_obj_�w_�t_�om_u�t
(((*)
p
)[
�dex
]);

268  
	`mp_obj_�w_�t
(((*)
p
)[
�dex
]);

270  
	`mp_obj_�w_�t_�om_u�t
(((*)
p
)[
�dex
]);

271 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


273  
	`mp_obj_�w_�t_�om_�
(((*)
p
)[
�dex
]);

275  
	`mp_obj_�w_�t_�om_u�
(((*)
p
)[
�dex
]);

277 #i�
MICROPY_PY_BUILTINS_FLOAT


279  
	`mp_obj_�w_��t_�om_f
(((*)
p
)[
�dex
]);

281  
	`mp_obj_�w_��t_�om_d
(((*)
p
)[
�dex
]);

285  ((
mp_obj_t
 *)
p
)[
�dex
];

288  
	`mp_obj_�w_�t
((
mp_�t_t
)(
u���_t
)((**)
p
)[
�dex
]);

290  
	`MP_OBJ_NEW_SMALL_INT
(
v�
);

291 
	}
}

296 
	$mp_b��y_g�_�t
(
size_t
 
size
, 
bo�
 
is_sig�d
, bo� 
big_�d�n
, cڡ 
by�
 *
�c
) {

297 
d��
;

298 i�(!
big_�d�n
) {

299 
d��
 = -1;

300 
�c
 +�
size
 - 1;

302 
d��
 = 1;

305 
v�
 = 0;

306 i�(
is_sig�d
 && *
�c
 & 0x80) {

307 
v�
 = -1;

309 
u�t
 
i
 = 0; i < 
size
; i++) {

310 
v�
 <<= 8;

311 
v�
 |�*
�c
;

312 
�c
 +�
d��
;

315  
v�
;

316 
	}
}

318 
	#is_sig�d
(
ty�code
��y�cod�> 'Z')

	)

319 
mp_obj_t
 
	$mp_b��y_g�_v�
(
�ru�_ty�
, 
v�_ty�
, 
by�
 *
p_ba�
, by� **
�r
) {

320 
by�
 *
p
 = *
�r
;

321 
size_t
 
�ign
;

323 
size_t
 
size
 = 
	`mp_b��y_g�_size
(
�ru�_ty�
, 
v�_ty�
, &
�ign
);

324 i�(
�ru�_ty�
 == '@') {

326 
p
 = 
p_ba�
 + (
u���_t
)
	`MP_ALIGN
� -�_ba�, 
�ign
);

327 #i�
MP_ENDIANNESS_LITTLE


328 
�ru�_ty�
 = '<';

330 
�ru�_ty�
 = '>';

333 *
�r
 = 
p
 + 
size
;

335 
v�
 = 
	`mp_b��y_g�_�t
(
size
, 
	`is_sig�d
(
v�_ty�
), (
�ru�_ty�
 =�'>'), 
p
);

337 i�(
v�_ty�
 == 'O') {

338  (
mp_obj_t
)(
mp_u�t_t
)
v�
;

339 } i�(
v�_ty�
 == 'S') {

340 cڡ *
s_v�
 = (cڡ *)(
u���_t
)(
mp_u�t_t
)
v�
;

341  
	`mp_obj_�w_�r_�om_c�r
(
s_v�
);

342 #i�
MICROPY_PY_BUILTINS_FLOAT


343 } i�(
v�_ty�
 == 'e') {

344  
	`mp_obj_�w_��t_�om_f
(
	`mp_decode_h�f_��t
(
v�
));

345 } i�(
v�_ty�
 == 'f') {

347 
u�t32_t
 
i
;

348 
f
;

349 } 
�u
 = {
v�
};

350  
	`mp_obj_�w_��t_�om_f
(
�u
.
f
);

351 } i�(
v�_ty�
 == 'd') {

353 
u�t64_t
 
i
;

354 
f
;

355 } 
�u
 = {
v�
};

356  
	`mp_obj_�w_��t_�om_d
(
�u
.
f
);

358 } i�(
	`is_sig�d
(
v�_ty�
)) {

359 i�(()
MP_SMALL_INT_MIN
 <�
v�
 && v� <�()
MP_SMALL_INT_MAX
) {

360  
	`mp_obj_�w_�t
((
mp_�t_t
)
v�
);

362  
	`mp_obj_�w_�t_�om_�
(
v�
);

365 i�(()
v�
 <�()
MP_SMALL_INT_MAX
) {

366  
	`mp_obj_�w_�t_�om_u�t
((
mp_u�t_t
)
v�
);

368  
	`mp_obj_�w_�t_�om_u�
(
v�
);

371 
	}
}

373 
	$mp_b��y_�t_�t
(
size_t
 
v�_sz
, 
bo�
 
big_�d�n
, 
by�
 *
de�
, 
mp_u�t_t
 
v�
) {

374 i�(
MP_ENDIANNESS_LITTLE
 && !
big_�d�n
) {

375 
	`mem�y
(
de�
, &
v�
, 
v�_sz
);

376 } i�(
MP_ENDIANNESS_BIG
 && 
big_�d�n
) {

378 
	`mem�y
(
de�
, (
by�
 *)&
v�
 + (
mp_u�t_t
�- 
v�_sz
, val_sz);

380 cڡ 
by�
 *
�c
;

381 i�(
MP_ENDIANNESS_LITTLE
) {

382 
�c
 = (cڡ 
by�
 *)&
v�
 + 
v�_sz
;

384 
�c
 = (cڡ 
by�
 *)&
v�
 + (
mp_u�t_t
);

386 
v�_sz
--) {

387 *
de�
++ = *--
�c
;

390 
	}
}

392 
	$mp_b��y_�t_v�
(
�ru�_ty�
, 
v�_ty�
, 
mp_obj_t
 
v�_�
, 
by�
 *
p_ba�
, by� **
�r
) {

393 
by�
 *
p
 = *
�r
;

394 
size_t
 
�ign
;

396 
size_t
 
size
 = 
	`mp_b��y_g�_size
(
�ru�_ty�
, 
v�_ty�
, &
�ign
);

397 i�(
�ru�_ty�
 == '@') {

399 
p
 = 
p_ba�
 + (
u���_t
)
	`MP_ALIGN
� -�_ba�, 
�ign
);

400 i�(
MP_ENDIANNESS_LITTLE
) {

401 
�ru�_ty�
 = '<';

403 
�ru�_ty�
 = '>';

406 *
�r
 = 
p
 + 
size
;

408 
mp_u�t_t
 
v�
;

409 
v�_ty�
) {

411 
v�
 = (
mp_u�t_t
)
v�_�
;

413 #i�
MICROPY_PY_BUILTINS_FLOAT


415 
v�
 = 
	`mp_�code_h�f_��t
(
	`mp_obj_g�_��t_to_f
(
v�_�
));

419 
u�t32_t
 
i
;

420 
f
;

421 } 
�_�
;

422 
�_�
.
f
 = 
	`mp_obj_g�_��t_to_f
(
v�_�
);

423 
v�
 = 
�_�
.
i
;

428 
u�t64_t
 
i64
;

429 
u�t32_t
 
i32
[2];

430 
f
;

431 } 
�_dp
;

432 
�_dp
.
f
 = 
	`mp_obj_g�_��t_to_d
(
v�_�
);

433 i�(
MP_BYTES_PER_OBJ_WORD
 == 8) {

434 
v�
 = 
�_dp
.
i64
;

436 
be
 = 
�ru�_ty�
 == '>';

437 
	`mp_b��y_�t_�t
((
u�t32_t
), 
be
, 
p
, 
�_dp
.
i32
[
MP_ENDIANNESS_BIG
 ^ be]);

438 
p
 +�(
u�t32_t
);

439 
v�
 = 
�_dp
.
i32
[
MP_ENDIANNESS_LITTLE
 ^ 
be
];

445 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


446 i�(
	`mp_obj_is_exa�_ty�
(
v�_�
, &
mp_ty�_�t
)) {

447 
	`mp_obj_�t_to_by�s_im�
(
v�_�
, 
�ru�_ty�
 =�'>', 
size
, 
p
);

452 
v�
 = 
	`mp_obj_g�_�t
(
v�_�
);

454 i�(
MP_BYTES_PER_OBJ_WORD
 < 8 && 
size
 > (
v�
)) {

455 
c
 = (
mp_�t_t
)
v�
 < 0 ? 0xff : 0x00;

456 
	`mem�t
(
p
, 
c
, 
size
);

457 i�(
�ru�_ty�
 == '>') {

458 
p
 +�
size
 - (
v�
);

464 
	`mp_b��y_�t_�t
(
	`MIN
((
size_t
)
size
, (
v�
)), 
�ru�_ty�
 =�'>', 
p
, val);

465 
	}
}

467 
	$mp_b��y_�t_v�_��y
(
ty�code
, *
p
, 
size_t
 
�dex
, 
mp_obj_t
 
v�_�
) {

468 
ty�code
) {

469 #i�
MICROPY_PY_BUILTINS_FLOAT


471 ((*)
p
)[
�dex
] = 
	`mp_obj_g�_��t_to_f
(
v�_�
);

474 ((*)
p
)[
�dex
] = 
	`mp_obj_g�_��t_to_d
(
v�_�
);

479 ((
mp_obj_t
 *)
p
)[
�dex
] = 
v�_�
;

482 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


483 i�(
	`mp_obj_is_exa�_ty�
(
v�_�
, &
mp_ty�_�t
)) {

484 
size_t
 
size
 = 
	`mp_b��y_g�_size
('@', 
ty�code
, 
NULL
);

485 
	`mp_obj_�t_to_by�s_im�
(
v�_�
, 
MP_ENDIANNESS_BIG
,

486 
size
, (
u�t8_t
 *)
p
 + 
�dex
 * size);

490 
	`mp_b��y_�t_v�_��y_�om_�t
(
ty�code
, 
p
, 
�dex
, 
	`mp_obj_g�_�t
(
v�_�
));

492 
	}
}

494 
	$mp_b��y_�t_v�_��y_�om_�t
(
ty�code
, *
p
, 
size_t
 
�dex
, 
mp_�t_t
 
v�
) {

495 
ty�code
) {

497 ((sig�d *)
p
)[
�dex
] = 
v�
;

499 
BYTEARRAY_TYPECODE
:

501 ((*)
p
)[
�dex
] = 
v�
;

504 ((*)
p
)[
�dex
] = 
v�
;

507 ((*)
p
)[
�dex
] = 
v�
;

510 ((*)
p
)[
�dex
] = 
v�
;

513 ((*)
p
)[
�dex
] = 
v�
;

516 ((*)
p
)[
�dex
] = 
v�
;

519 ((*)
p
)[
�dex
] = 
v�
;

521 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


523 ((*)
p
)[
�dex
] = 
v�
;

526 ((*)
p
)[
�dex
] = 
v�
;

529 #i�
MICROPY_PY_BUILTINS_FLOAT


531 ((*)
p
)[
�dex
] = ()
v�
;

534 ((*)
p
)[
�dex
] = ()
v�
;

539 ((**)
p
)[
�dex
] = (*)(
u���_t
)
v�
;

542 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\binary.h

27 #i�de�
MICROPY_INCLUDED_PY_BINARY_H


28 
	#MICROPY_INCLUDED_PY_BINARY_H


	)

30 
	~"py/obj.h
"

35 
	#BYTEARRAY_TYPECODE
 1

	)

37 
size_t
 
mp_b��y_g�_size
(
�ru�_ty�
, 
v�_ty�
, size_�*
�lign
);

38 
mp_obj_t
 
mp_b��y_g�_v�_��y
(
ty�code
, *
p
, 
size_t
 
�dex
);

39 
mp_b��y_�t_v�_��y
(
ty�code
, *
p
, 
size_t
 
�dex
, 
mp_obj_t
 
v�_�
);

40 
mp_b��y_�t_v�_��y_�om_�t
(
ty�code
, *
p
, 
size_t
 
�dex
, 
mp_�t_t
 
v�
);

41 
mp_obj_t
 
mp_b��y_g�_v�
(
�ru�_ty�
, 
v�_ty�
, 
by�
 *
p_ba�
, by� **
�r
);

42 
mp_b��y_�t_v�
(
�ru�_ty�
, 
v�_ty�
, 
mp_obj_t
 
v�_�
, 
by�
 *
p_ba�
, by� **
�r
);

43 
mp_b��y_g�_�t
(
size_t
 
size
, 
bo�
 
is_sig�d
, bo� 
big_�d�n
, cڡ 
by�
 *
�c
);

44 
mp_b��y_�t_�t
(
size_t
 
v�_sz
, 
bo�
 
big_�d�n
, 
by�
 *
de�
, 
mp_u�t_t
 
v�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtin.h

26 #i�de�
MICROPY_INCLUDED_PY_BUILTIN_H


27 
	#MICROPY_INCLUDED_PY_BUILTIN_H


	)

29 
	~"py/obj.h
"

32 
	mMP_IMPORT_STAT_NO_EXIST
,

33 
	mMP_IMPORT_STAT_DIR
,

34 
	mMP_IMPORT_STAT_FILE
,

35 } 
	tmp_imp�t_��_t
;

37 #i�
MICROPY_VFS


41 
	#mp_bu�t�_ݒ_obj
 
mp_vfs_ݒ_obj


	)

43 
mp_imp�t_��_t
 
mp_vfs_imp�t_��
(cڡ *
�th
);

44 
mp_obj_t
 
mp_vfs_ݒ
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, 
mp_m�_t
 *
kw�gs
);

46 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_vfs_ݒ_obj
);

48 
�l�e
 
mp_imp�t_��_t
 
	$mp_imp�t_��
(cڡ *
�th
) {

49  
	`mp_vfs_imp�t_��
(
�th
);

50 
	}
}

52 
�l�e
 
mp_obj_t
 
	$mp_bu�t�_ݒ
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

53  
	`mp_vfs_ݒ
(
n_�gs
, 
�gs
, 
kw�gs
);

54 
	}
}

59 
mp_imp�t_��_t
 
mp_imp�t_��
(cڡ *
�th
);

60 
mp_obj_t
 
mp_bu�t�_ݒ
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, 
mp_m�_t
 *
kw�gs
);

63 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_bu�t�_ݒ_obj
);

68 #i�de�
mp_bu�t�___imp�t__


69 
	#mp_bu�t�___imp�t__
 
mp_bu�t�___imp�t___de�u�


	)

71 
mp_obj_t
 
mp_bu�t�___imp�t__
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

72 
mp_obj_t
 
mp_bu�t�___imp�t___de�u�
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

74 
mp_obj_t
 
mp_mi��yth�_mem_�fo
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

76 
MP_DECLARE_CONST_FUN_OBJ_VAR
(
mp_bu�t�___bu�d_�ass___obj
);

77 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�___imp�t___obj
);

78 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�___��_��t___obj
);

79 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_abs_obj
);

80 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_�l_obj
);

81 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_�y_obj
);

82 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_b�_obj
);

83 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_��ab�_obj
);

84 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_comp�e_obj
);

85 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_chr_obj
);

86 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_bu�t�_d���_obj
);

87 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_d�_obj
);

88 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_bu�t�_divmod_obj
);

89 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_ev�_obj
);

90 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_exec_obj
);

91 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_execf�e_obj
);

92 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_g���_obj
);

93 
MP_DECLARE_CONST_FUN_OBJ_3
(
mp_bu�t�_���r_obj
);

94 
MP_DECLARE_CONST_FUN_OBJ_0
(
mp_bu�t�_glob�s_obj
);

95 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_bu�t�_ha��r_obj
);

96 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_hash_obj
);

97 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_h�p_obj
);

98 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_hex_obj
);

99 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_id_obj
);

100 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_bu�t�_is����_obj
);

101 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_bu�t�_issub�ass_obj
);

102 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_��_obj
);

103 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_�n_obj
);

104 
MP_DECLARE_CONST_FUN_OBJ_0
(
mp_bu�t�_lo�ls_obj
);

105 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_bu�t�_max_obj
);

106 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_bu�t�_m�_obj
);

107 #i�
MICROPY_PY_BUILTINS_NEXT2


108 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_�xt_obj
);

110 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_�xt_obj
);

112 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_o�_obj
);

113 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_�d_obj
);

114 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_pow_obj
);

115 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_bu�t�_��t_obj
);

116 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_bu�t�_��_obj
);

117 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_round_obj
);

118 
MP_DECLARE_CONST_FUN_OBJ_KW
(
mp_bu�t�_s܋d_obj
);

119 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_sum_obj
);

120 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_�put_obj
);

122 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_�medtu�e_obj
);

124 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_�_cڏ�s_obj
);

125 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_�_g��em_obj
);

126 
MP_DECLARE_CONST_FUN_OBJ_3
(
mp_�_�t�em_obj
);

127 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_�_d��em_obj
);

129 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_sys_ex�_obj
);

132 
cڡ 
mp_obj_di�_t
 
mp_modu�_bu�t�s_glob�s
;

133 
cڡ 
mp_obj_modu�_t
 
mp_modu�___ma�__
;

134 
cڡ 
mp_obj_modu�_t
 
mp_modu�_bu�t�s
;

135 
cڡ 
mp_obj_modu�_t
 
mp_modu�_sys
;

138 
cڡ 
mp_obj_modu�_t
 
mp_modu�_��o
;

139 
cڡ 
mp_obj_modu�_t
 
mp_modu�_u�y�s
;

140 
cڡ 
mp_obj_modu�_t
 
mp_modu�_mach�e
;

142 
cڡ 
MICROPY_PY_BUILTINS_HELP_TEXT
[];

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinevex.c

27 
	~<�d�t.h
>

29 
	~"py/objfun.h
"

30 
	~"py/comp�e.h
"

31 
	~"py/ru�ime.h
"

32 
	~"py/bu�t�.h
"

34 #i�
MICROPY_PY_BUILTINS_COMPILE


36 
	s_mp_obj_code_t
 {

37 
mp_obj_ba�_t
 
	mba�
;

38 
mp_obj_t
 
	mmodu�_fun
;

39 } 
	tmp_obj_code_t
;

41 
MP_DEFINE_CONST_OBJ_TYPE
(

42 
mp_ty�_code
,

43 
MP_QSTR_code
,

44 
MP_TYPE_FLAG_NONE


47 
mp_obj_t
 
	$code_execu�
(
mp_obj_code_t
 *
�lf
, 
mp_obj_di�_t
 *
glob�s
, mp_obj_di�_�*
lo�ls
) {

49 
�r_jump_��back_node_glob�s_lo�ls_t
 
�x
;

50 
�x
.
glob�s
 = 
	`mp_glob�s_g�
();

51 
�x
.
lo�ls
 = 
	`mp_lo�ls_g�
();

54 
	`mp_glob�s_�t
(
glob�s
);

55 
	`mp_lo�ls_�t
(
lo�ls
);

58 
	`�r_push_jump_��back
(&
�x
.
��back
, 
mp_glob�s_lo�ls_�t_�om_�r_jump_��back
);

62 i�(
	`mp_obj_is_ty�
(
�lf
->
modu�_fun
, &
mp_ty�_fun_bc
)

63 #i�
MICROPY_EMIT_NATIVE


64 || 
	`mp_obj_is_ty�
(
�lf
->
modu�_fun
, &
mp_ty�_fun_�tive
)

67 
mp_obj_fun_bc_t
 *
fun_bc
 = 
	`MP_OBJ_TO_PTR
(
�lf
->
modu�_fun
);

68 ((
mp_modu�_cڋxt_t
 *)
fun_bc
->
cڋxt
)->
modu�
.
glob�s
 = globals;

72 
mp_obj_t
 
�t
 = 
	`mp_��_fun�i�_0
(
�lf
->
modu�_fun
);

75 
	`�r_p�_jump_��back
(
�ue
);

78  
�t
;

79 
	}
}

81 
mp_obj_t
 
	$mp_bu�t�_comp�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

82 ()
n_�gs
;

85 
size_t
 
�r_�n
;

86 cڡ *
�r
 = 
	`mp_obj_�r_g�_d�a
(
�gs
[0], &
�r_�n
);

89 
q�r
 
f��ame
 = 
	`mp_obj_�r_g�_q�r
(
�gs
[1]);

92 
mp_�x�_t
 *
�x
 = 
	`mp_�x�_�w_�om_�r_�n
(
f��ame
, 
�r
, 
�r_�n
, 0);

95 
q�r
 
mode
 = 
	`mp_obj_�r_g�_q�r
(
�gs
[2]);

96 
mp_�r�_�put_k�d_t
 
�r�_�put_k�d
;

97 
mode
) {

98 
MP_QSTR_s�g�
:

99 
�r�_�put_k�d
 = 
MP_PARSE_SINGLE_INPUT
;

101 
MP_QSTR_exec
:

102 
�r�_�put_k�d
 = 
MP_PARSE_FILE_INPUT
;

104 
MP_QSTR_ev�
:

105 
�r�_�put_k�d
 = 
MP_PARSE_EVAL_INPUT
;

108 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("bad compile mode"));

111 
mp_obj_code_t
 *
code
 = 
	`mp_obj_m�loc
(mp_obj_code_t, &
mp_ty�_code
);

112 
code
->
modu�_fun
 = 
	`mp_�r�_comp�e_execu�
(
�x
, 
�r�_�put_k�d
, 
NULL
, NULL);

113  
	`MP_OBJ_FROM_PTR
(
code
);

114 
	}
}

115 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_comp�e_obj
, 3, 6, 
mp_bu�t�_comp�e
);

119 #i�
MICROPY_PY_BUILTINS_EVAL_EXEC


121 
mp_obj_t
 
	$ev�_exec_h��r
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_�r�_�put_k�d_t
 
�r�_�put_k�d
) {

123 
mp_obj_di�_t
 *
glob�s
 = 
	`mp_glob�s_g�
();

124 
mp_obj_di�_t
 *
lo�ls
 = 
	`mp_lo�ls_g�
();

125 
size_t
 
i
 = 1; i < 3 && i < 
n_�gs
; ++i) {

126 i�(
�gs
[
i
] !�
mp_cڡ_n�e
) {

127 i�(!
	`mp_obj_is_ty�
(
�gs
[
i
], &
mp_ty�_di�
)) {

128 
	`mp_�i�_Ty�E��
(
NULL
);

130 
lo�ls
 = 
	`MP_OBJ_TO_PTR
(
�gs
[
i
]);

131 i�(
i
 == 1) {

132 
glob�s
 = 
lo�ls
;

137 #i�
MICROPY_PY_BUILTINS_COMPILE


138 i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_code
)) {

139  
	`code_execu�
(
	`MP_OBJ_TO_PTR
(
�gs
[0]), 
glob�s
, 
lo�ls
);

146 
mp_�x�_t
 *
�x
;

147 i�(
MICROPY_PY_BUILTINS_EXECFILE
 && 
�r�_�put_k�d
 =�
MP_PARSE_SINGLE_INPUT
) {

148 
�x
 = 
	`mp_�x�_�w_�om_f�e
(
	`mp_obj_�r_g�_q�r
(
�gs
[0]));

149 
�r�_�put_k�d
 = 
MP_PARSE_FILE_INPUT
;

152 
mp_buf�r_�fo_t
 
buf�fo
;

153 
	`mp_g�_buf�r_�i�
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
);

155 
�x
 = 
	`mp_�x�_�w_�om_�r_�n
(
MP_QSTR__�_�r�g_gt_
, 
buf�fo
.
buf
, buf�fo.
�n
, 0);

158  
	`mp_�r�_comp�e_execu�
(
�x
, 
�r�_�put_k�d
, 
glob�s
, 
lo�ls
);

159 
	}
}

161 
mp_obj_t
 
	$mp_bu�t�_ev�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

162  
	`ev�_exec_h��r
(
n_�gs
, 
�gs
, 
MP_PARSE_EVAL_INPUT
);

163 
	}
}

164 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_ev�_obj
, 1, 3, 
mp_bu�t�_ev�
);

166 
mp_obj_t
 
	$mp_bu�t�_exec
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

167  
	`ev�_exec_h��r
(
n_�gs
, 
�gs
, 
MP_PARSE_FILE_INPUT
);

168 
	}
}

169 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_exec_obj
, 1, 3, 
mp_bu�t�_exec
);

173 #i�
MICROPY_PY_BUILTINS_EXECFILE


174 
mp_obj_t
 
	$mp_bu�t�_execf�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

176  
	`ev�_exec_h��r
(
n_�gs
, 
�gs
, 
MP_PARSE_SINGLE_INPUT
);

177 
	}
}

178 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_execf�e_obj
, 1, 3, 
mp_bu�t�_execf�e
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinhelp.c

27 
	~<�dio.h
>

28 
	~<�r�g.h
>

30 
	~"py/bu�t�.h
"

31 
	~"py/objmodu�.h
"

33 #i�
MICROPY_PY_BUILTINS_HELP


35 cڡ 
	gmp_h�p_de�u�_�xt
[] =

50 
	$mp_h�p_��t_�fo_about_obje�
(
mp_obj_t
 
�me_o
, mp_obj_�
v�ue
) {

51 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, " ");

52 
	`mp_obj_��t
(
�me_o
, 
PRINT_STR
);

53 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, " -- ");

54 
	`mp_obj_��t
(
v�ue
, 
PRINT_STR
);

55 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, "\n");

56 
	}
}

58 #i�
MICROPY_PY_BUILTINS_HELP_MODULES


59 
	$mp_h�p_add_�om_m�
(
mp_obj_t
 
li�
, cڡ 
mp_m�_t
 *
m�
) {

60 
size_t
 
i
 = 0; i < 
m�
->
�loc
; i++) {

61 i�(
	`mp_m�_��_is_f��d
(
m�
, 
i
)) {

62 
	`mp_obj_li�_��nd
(
li�
, 
m�
->
�b�
[
i
].
key
);

65 
	}
}

67 #i�
MICROPY_MODULE_FROZEN


68 
	$mp_h�p_add_�om_�mes
(
mp_obj_t
 
li�
, cڡ *
�me
) {

69 *
�me
) {

70 
size_t
 
�n
 = 
	`���
(
�me
);

72 
	`mp_obj_li�_��nd
(
li�
, 
	`mp_obj_�w_�r
(
�me
, 
�n
 - 3));

73 
�me
 +�
�n
 + 1;

75 
	}
}

78 
	$mp_h�p_��t_modu�s
() {

79 
mp_obj_t
 
li�
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

81 
	`mp_h�p_add_�om_m�
(
li�
, &
mp_bu�t�_modu�_m�
);

82 
	`mp_h�p_add_�om_m�
(
li�
, &
mp_bu�t�_ex�nsib�_modu�_m�
);

84 #i�
MICROPY_MODULE_FROZEN


85 
cڡ 
mp_�oz�_�mes
[];

86 
	`mp_h�p_add_�om_�mes
(
li�
, 
mp_�oz�_�mes
);

90 
	`mp_obj_li�_s�t
(1, &
li�
, (
mp_m�_t
 *)&
mp_cڡ_em�y_m�
);

93 
	#NUM_COLUMNS
 (4)

	)

94 
	#COLUMN_WIDTH
 (18)

	)

95 
size_t
 
�n
;

96 
mp_obj_t
 *
�ems
;

97 
	`mp_obj_li�_g�
(
li�
, &
�n
, &
�ems
);

98 
num_rows
 = (
�n
 + 
NUM_COLUMNS
 - 1) / NUM_COLUMNS;

99 
i
 = 0; i < 
num_rows
; ++i) {

100 
j
 = 
i
;

102 
l
 = 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, 
	`mp_obj_�r_g�_�r
(
�ems
[
j
]));

103 
j
 +�
num_rows
;

104 i�(
j
 >�
�n
) {

107 
g�
 = 
COLUMN_WIDTH
 - 
l
;

108 
g�
 < 1) {

109 
g�
 +�
COLUMN_WIDTH
;

111 
g�
--) {

112 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, " ");

115 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, "\n");

118 #i�
MICROPY_ENABLE_EXTERNAL_IMPORT


120 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, "Plus�ny modules on�he filesystem\n");

122 
	}
}

125 
	$mp_h�p_��t_obj
(cڡ 
mp_obj_t
 
obj
) {

126 #i�
MICROPY_PY_BUILTINS_HELP_MODULES


127 i�(
obj
 =�
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_modu�s
)) {

128 
	`mp_h�p_��t_modu�s
();

133 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
obj
);

136 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, "object ");

137 
	`mp_obj_��t
(
obj
, 
PRINT_STR
);

138 
	`mp_��tf
(
MP_PYTHON_PRINTER
, " i�o�ty� %q\n", 
ty�
->
�me
);

140 
mp_m�_t
 *
m�
 = 
NULL
;

141 i�(
ty�
 =�&
mp_ty�_modu�
) {

142 
m�
 = &
	`mp_obj_modu�_g�_glob�s
(
obj
)->map;

144 i�(
ty�
 =�&
mp_ty�_ty�
) {

145 
ty�
 = 
	`MP_OBJ_TO_PTR
(
obj
);

147 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
lo�ls_di�
)) {

148 
m�
 = &
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
lo�ls_di�
)->map;

151 i�(
m�
 !�
NULL
) {

152 
u�t
 
i
 = 0; i < 
m�
->
�loc
; i++) {

153 
mp_obj_t
 
key
 = 
m�
->
�b�
[
i
].key;

154 i�(
key
 !�
MP_OBJ_NULL
) {

155 
	`mp_h�p_��t_�fo_about_obje�
(
key
, 
m�
->
�b�
[
i
].
v�ue
);

159 
	}
}

161 
mp_obj_t
 
	$mp_bu�t�_h�p
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

162 i�(
n_�gs
 == 0) {

164 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, 
MICROPY_PY_BUILTINS_HELP_TEXT
);

167 
	`mp_h�p_��t_obj
(
�gs
[0]);

170  
mp_cڡ_n�e
;

171 
	}
}

172 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_h�p_obj
, 0, 1, 
mp_bu�t�_h�p
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinimport.c

29 
	~<�dio.h
>

30 
	~<�r�g.h
>

31 
	~<as��.h
>

33 
	~"py/comp�e.h
"

34 
	~"py/objmodu�.h
"

35 
	~"py/�rsi��tcode.h
"

36 
	~"py/ru�ime.h
"

37 
	~"py/bu�t�.h
"

38 
	~"py/�oz�mod.h
"

40 #i�
MICROPY_DEBUG_VERBOSE


41 
	#DEBUG_PRINT
 (1)

	)

42 
	#DEBUG_��tf
 
DEBUG_��tf


	)

44 
	#DEBUG_PRINT
 (0)

	)

45 
	#DEBUG_��tf
(...�()0

	)

48 #i�
MICROPY_ENABLE_EXTERNAL_IMPORT


51 
	#PATH_SEP_CHAR
 "/"

	)

54 
	#MP_FROZEN_PATH_PREFIX
 ".�oz�/"

	)

60 
mp_imp�t_��_t
 
	$��_�th
(
v�r_t
 *
�th
) {

61 cڡ *
�r
 = 
	`v�r_nu�_�rm��ed_�r
(
�th
);

62 #i�
MICROPY_MODULE_FROZEN


64 cڡ 
�oz�_�th_�efix_�n
 = 
	`���
(
MP_FROZEN_PATH_PREFIX
);

65 i�(
	`��cmp
(
�r
, 
MP_FROZEN_PATH_PREFIX
, 
�oz�_�th_�efix_�n
) == 0) {

67  
	`mp_f�d_�oz�_modu�
(
�r
 + 
�oz�_�th_�efix_�n
, 
NULL
, NULL);

70  
	`mp_imp�t_��
(
�r
);

71 
	}
}

78 
mp_imp�t_��_t
 
	$��_f�e_py_�_mpy
(
v�r_t
 *
�th
) {

79 
mp_imp�t_��_t
 
��
 = 
	`��_�th
(
�th
);

80 i�(
��
 =�
MP_IMPORT_STAT_FILE
) {

81  
��
;

84 #i�
MICROPY_PERSISTENT_CODE_LOAD


88 
	`v�r_�s_by�
(
�th
,��h->
�n
 - 2, 'm');

89 
��
 = 
	`��_�th
(
�th
);

90 i�(
��
 =�
MP_IMPORT_STAT_FILE
) {

91  
��
;

95  
MP_IMPORT_STAT_NO_EXIST
;

96 
	}
}

102 
mp_imp�t_��_t
 
	$��_modu�
(
v�r_t
 *
�th
) {

103 
mp_imp�t_��_t
 
��
 = 
	`��_�th
(
�th
);

104 
	`DEBUG_��tf
("�� %s: %d\n", 
	`v�r_�r
(
�th
), 
��
);

105 i�(
��
 =�
MP_IMPORT_STAT_DIR
) {

106  
��
;

110 
	`v�r_add_�r
(
�th
, ".py");

111  
	`��_f�e_py_�_mpy
(
�th
);

112 
	}
}

117 
mp_imp�t_��_t
 
	$��_t�_�v�
(
q�r
 
mod_�me
, 
v�r_t
 *
de�
) {

118 
	`DEBUG_��tf
("��_t�_�v�: '%s'\n", 
	`q�r_�r
(
mod_�me
));

119 #i�
MICROPY_PY_SYS


120 
size_t
 
�th_num
;

121 
mp_obj_t
 *
�th_�ems
;

122 
	`mp_obj_g�_��y
(
mp_sys_�th
, &
�th_num
, &
�th_�ems
);

125 
size_t
 
i
 = 0; i < 
�th_num
; i++) {

126 
	`v�r_��t
(
de�
);

127 
size_t
 
p_�n
;

128 cڡ *
p
 = 
	`mp_obj_�r_g�_d�a
(
�th_�ems
[
i
], &
p_�n
);

129 i�(
p_�n
 > 0) {

131 
	`v�r_add_��
(
de�
, 
p
, 
p_�n
);

132 
	`v�r_add_ch�
(
de�
, 
PATH_SEP_CHAR
[0]);

134 
	`v�r_add_�r
(
de�
, 
	`q�r_�r
(
mod_�me
));

135 
mp_imp�t_��_t
 
��
 = 
	`��_modu�
(
de�
);

136 i�(
��
 !�
MP_IMPORT_STAT_NO_EXIST
) {

137  
��
;

143  
MP_IMPORT_STAT_NO_EXIST
;

148 
	`v�r_add_�r
(
de�
, 
	`q�r_�r
(
mod_�me
));

149  
	`��_modu�
(
de�
);

152 
	}
}

154 #i�
MICROPY_MODULE_FROZEN_STR
 || 
MICROPY_ENABLE_COMPILER


155 
	$do_l�d_�om_�x�
(
mp_modu�_cڋxt_t
 *
cڋxt
, 
mp_�x�_t
 *
�x
) {

156 #i�
MICROPY_PY___FILE__


157 
q�r
 
sour�_�me
 = 
�x
->source_name;

158 
	`mp_��e_��
(
	`MP_OBJ_FROM_PTR
(&
cڋxt
->
modu�
), 
MP_QSTR___f�e__
, 
	`MP_OBJ_NEW_QSTR
(
sour�_�me
));

162 
mp_obj_di�_t
 *
mod_glob�s
 = 
cڋxt
->
modu�
.
glob�s
;

163 
	`mp_�r�_comp�e_execu�
(
�x
, 
MP_PARSE_FILE_INPUT
, 
mod_glob�s
, mod_globals);

164 
	}
}

167 #i�(
MICROPY_HAS_FILE_READER
 && 
MICROPY_PERSISTENT_CODE_LOAD
�|| 
MICROPY_MODULE_FROZEN_MPY


168 
	$do_execu�_��o_fun
(cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, 
mp_��o_fun_t
 
��o_fun
, 
q�r
 
sour�_�me
) {

169 #i�
MICROPY_PY___FILE__


170 
	`mp_��e_��
(
	`MP_OBJ_FROM_PTR
(&
cڋxt
->
modu�
), 
MP_QSTR___f�e__
, 
	`MP_OBJ_NEW_QSTR
(
sour�_�me
));

172 ()
sour�_�me
;

176 
mp_obj_di�_t
 *
mod_glob�s
 = 
cڋxt
->
modu�
.
glob�s
;

179 
�r_jump_��back_node_glob�s_lo�ls_t
 
�x
;

180 
�x
.
glob�s
 = 
	`mp_glob�s_g�
();

181 
�x
.
lo�ls
 = 
	`mp_lo�ls_g�
();

184 
	`mp_glob�s_�t
(
mod_glob�s
);

185 
	`mp_lo�ls_�t
(
mod_glob�s
);

188 
	`�r_push_jump_��back
(&
�x
.
��back
, 
mp_glob�s_lo�ls_�t_�om_�r_jump_��back
);

191 
mp_obj_t
 
modu�_fun
 = 
	`mp_make_fun�i�_�om_��o_fun
(
��o_fun
, 
cڋxt
, 
NULL
);

192 
	`mp_��_fun�i�_0
(
modu�_fun
);

195 
	`�r_p�_jump_��back
(
�ue
);

196 
	}
}

199 
	$do_l�d
(
mp_modu�_cڋxt_t
 *
modu�_obj
, 
v�r_t
 *
f�e
) {

200 #i�
MICROPY_MODULE_FROZEN
 || 
MICROPY_ENABLE_COMPILER
 || (
MICROPY_PERSISTENT_CODE_LOAD
 && 
MICROPY_HAS_FILE_READER
)

201 cڡ *
f�e_�r
 = 
	`v�r_nu�_�rm��ed_�r
(
f�e
);

206 #i�
MICROPY_MODULE_FROZEN


207 *
mod�f
;

208 
�oz�_ty�
;

209 cڡ 
�oz�_�th_�efix_�n
 = 
	`���
(
MP_FROZEN_PATH_PREFIX
);

210 i�(
	`��cmp
(
f�e_�r
, 
MP_FROZEN_PATH_PREFIX
, 
�oz�_�th_�efix_�n
) == 0) {

211 
	`mp_f�d_�oz�_modu�
(
f�e_�r
 + 
�oz�_�th_�efix_�n
, &
�oz�_ty�
, &
mod�f
);

215 #i�
MICROPY_MODULE_FROZEN_STR


216 i�(
�oz�_ty�
 =�
MP_FROZEN_STR
) {

217 
	`do_l�d_�om_�x�
(
modu�_obj
, 
mod�f
);

224 #i�
MICROPY_MODULE_FROZEN_MPY


225 i�(
�oz�_ty�
 =�
MP_FROZEN_MPY
) {

226 cڡ 
mp_�oz�_modu�_t
 *
�oz�
 = 
mod�f
;

227 
modu�_obj
->
cڡ�ts
 = 
�oz�
->constants;

228 #i�
MICROPY_PY___FILE__


229 
q�r
 
�oz�_f�e_q�r
 = 
	`q�r_�om_�r
(
f�e_�r
 + 
�oz�_�th_�efix_�n
);

231 
q�r
 
�oz�_f�e_q�r
 = 
MP_QSTRnu�
;

233 
	`do_execu�_��o_fun
(
modu�_obj
, 
�oz�
->
��o_fun
, 
�oz�_f�e_q�r
);

241 
q�r
 
f�e_q�r
 = 
	`q�r_�om_�r
(
f�e_�r
);

245 #i�
MICROPY_HAS_FILE_READER
 && 
MICROPY_PERSISTENT_CODE_LOAD


246 i�(
f�e_�r
[
f�e
->
�n
 - 3] == 'm') {

247 
mp_comp�ed_modu�_t
 
cm
;

248 
cm
.
cڋxt
 = 
modu�_obj
;

249 
	`mp_�w_code_l�d_f�e
(
f�e_q�r
, &
cm
);

250 
	`do_execu�_��o_fun
(
cm
.
cڋxt
, cm.
rc
, 
f�e_q�r
);

256 #i�
MICROPY_ENABLE_COMPILER


258 
mp_�x�_t
 *
�x
 = 
	`mp_�x�_�w_�om_f�e
(
f�e_q�r
);

259 
	`do_l�d_�om_�x�
(
modu�_obj
, 
�x
);

264 
	`mp_�i�_msg
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("script compilation�ot supported"));

266 
	}
}

270 
	$ev�u�e_��tive_imp�t
(
mp_�t_t
 
�v�
, cڡ **
modu�_�me
, 
size_t
 *
modu�_�me_�n
) {

279 
mp_obj_t
 
cu��t_modu�_�me_obj
 = 
	`mp_obj_di�_g�
(
	`MP_OBJ_FROM_PTR
(
	`mp_glob�s_g�
()), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�me__
));

280 
	`as��
(
cu��t_modu�_�me_obj
 !�
MP_OBJ_NULL
);

282 #i�
MICROPY_MODULE_OVERRIDE_MAIN_IMPORT
 && 
MICROPY_CPYTHON_COMPAT


283 i�(
	`MP_OBJ_QSTR_VALUE
(
cu��t_modu�_�me_obj
�=�
MP_QSTR___ma�__
) {

287 
cu��t_modu�_�me_obj
 = 
	`mp_obj_di�_g�
(
	`MP_OBJ_FROM_PTR
(
	`mp_glob�s_g�
()), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___ma�__
));

292 
bo�
 
is_pkg
 = 
	`mp_m�_lookup
(&
	`mp_glob�s_g�
()->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�th__
), 
MP_MAP_LOOKUP
);

294 #i�
DEBUG_PRINT


295 
	`DEBUG_��tf
("Current module/package: ");

296 
	`mp_obj_��t_h��r
(
MICROPY_DEBUG_PRINTER
, 
cu��t_modu�_�me_obj
, 
PRINT_REPR
);

297 
	`DEBUG_��tf
(", is_�ckage: %d", 
is_pkg
);

298 
	`DEBUG_��tf
("\n");

301 
size_t
 
cu��t_modu�_�me_�n
;

302 cڡ *
cu��t_modu�_�me
 = 
	`mp_obj_�r_g�_d�a
(
cu��t_modu�_�me_obj
, &
cu��t_modu�_�me_�n
);

304 cڡ *
p
 = 
cu��t_modu�_�me
 + 
cu��t_modu�_�me_�n
;

305 i�(
is_pkg
) {

309 --
�v�
;

313 
�v�
 && 
p
 > 
cu��t_modu�_�me
) {

314 i�(*--
p
 == '.') {

315 --
�v�
;

320 i�(
p
 =�
cu��t_modu�_�me
) {

321 
	`mp_�i�_msg
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("can't�erform�elative import"));

327 
u�t
 
�w_modu�_�me_�n
 = (
size_t
)(
p
 - 
cu��t_modu�_�me
�+ 1 + *
modu�_�me_�n
;

328 *
�w_mod
 = 
	`mp_lo�l_�loc
(
�w_modu�_�me_�n
);

329 
	`mem�y
(
�w_mod
, 
cu��t_modu�_�me
, 
p
 - current_module_name);

332 i�(*
modu�_�me_�n
 != 0) {

333 
�w_mod
[
p
 - 
cu��t_modu�_�me
] = '.';

334 
	`mem�y
(
�w_mod
 + (
p
 - 
cu��t_modu�_�me
�+ 1, *
modu�_�me
, *
modu�_�me_�n
);

336 --
�w_modu�_�me_�n
;

340 
q�r
 
�w_mod_q
 = 
	`q�r_�om_��
(
�w_mod
, 
�w_modu�_�me_�n
);

341 
	`mp_lo�l_�
(
�w_mod
);

343 
	`DEBUG_��tf
("Res�ved ba��am�f܄��iv�imp�t: '%s'\n", 
	`q�r_�r
(
�w_mod_q
));

344 *
modu�_�me
 = 
	`q�r_�r
(
�w_mod_q
);

345 *
modu�_�me_�n
 = 
�w_modu�_�me_�n
;

346 
	}
}

348 
	s_�r_jump_��back_node_u�egi��_modu�_t
 {

349 
�r_jump_��back_node_t
 
	m��back
;

350 
q�r
 
	m�me
;

351 } 
	t�r_jump_��back_node_u�egi��_modu�_t
;

353 
	$u�egi��_modu�_�om_�r_jump_��back
(*
�x_�
) {

354 
�r_jump_��back_node_u�egi��_modu�_t
 *
�x
 = 
�x_�
;

355 
mp_m�_t
 *
mp_l�ded_modu�s_m�
 = &
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
).
m�
;

356 
	`mp_m�_lookup
(
mp_l�ded_modu�s_m�
, 
	`MP_OBJ_NEW_QSTR
(
�x
->
�me
), 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

357 
	}
}

366 
mp_obj_t
 
	$�o�ss_imp�t_�_�v�
(
q�r
 
fu�_mod_�me
, q��
�v�_mod_�me
, 
mp_obj_t
 
ou�r_modu�_obj
, 
bo�
 
ov�ride_ma�
) {

368 
mp_m�_�em_t
 *
�em
;

370 #i�
MICROPY_PY_SYS


374 
size_t
 
�th_num
;

375 
mp_obj_t
 *
�th_�ems
;

376 
	`mp_obj_g�_��y
(
mp_sys_�th
, &
�th_num
, &
�th_�ems
);

377 i�(
�th_num
)

380 
�em
 = 
	`mp_m�_lookup
(&
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
).
m�
, 
	`MP_OBJ_NEW_QSTR
(
fu�_mod_�me
), 
MP_MAP_LOOKUP
);

381 i�(
�em
) {

382  
�em
->
v�ue
;

386 
	`VSTR_FIXED
(
�th
, 
MICROPY_ALLOC_PATH_MAX
);

387 
mp_imp�t_��_t
 
��
 = 
MP_IMPORT_STAT_NO_EXIST
;

388 
mp_obj_t
 
modu�_obj
;

390 i�(
ou�r_modu�_obj
 =�
MP_OBJ_NULL
) {

392 
	`DEBUG_��tf
("Searching for�op-level module\n");

397 
modu�_obj
 = 
	`mp_modu�_g�_bu�t�
(
�v�_mod_�me
, 
�l�
);

398 i�(
modu�_obj
 !�
MP_OBJ_NULL
) {

399  
modu�_obj
;

404 
��
 = 
	`��_t�_�v�
(
�v�_mod_�me
, &
�th
);

408 i�(
��
 =�
MP_IMPORT_STAT_NO_EXIST
) {

409 
modu�_obj
 = 
	`mp_modu�_g�_bu�t�
(
�v�_mod_�me
, 
�ue
);

410 i�(
modu�_obj
 !�
MP_OBJ_NULL
) {

411  
modu�_obj
;

415 
	`DEBUG_��tf
("Searching for sub-module\n");

417 #i�
MICROPY_MODULE_BUILTIN_SUBPACKAGES


421 
mp_obj_modu�_t
 *
mod
 = 
	`MP_OBJ_TO_PTR
(
ou�r_modu�_obj
);

422 i�(
mod
->
glob�s
->
m�
.
is_fixed
) {

423 
�em
 = 
	`mp_m�_lookup
(&
mod
->
glob�s
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
�v�_mod_�me
), 
MP_MAP_LOOKUP
);

425 i�(
�em
 && 
	`mp_obj_is_ty�
��m->
v�ue
, &
mp_ty�_modu�
)) {

426  
�em
->
v�ue
;

433 
mp_obj_t
 
de�
[2];

434 
	`mp_l�d_m�hod_maybe
(
ou�r_modu�_obj
, 
MP_QSTR___�th__
, 
de�
);

435 i�(
de�
[0] !�
MP_OBJ_NULL
) {

437 
	`v�r_add_�r
(&
�th
, 
	`mp_obj_�r_g�_�r
(
de�
[0]));

440 
	`v�r_add_ch�
(&
�th
, 
PATH_SEP_CHAR
[0]);

441 
	`v�r_add_�r
(&
�th
, 
	`q�r_�r
(
�v�_mod_�me
));

443 
��
 = 
	`��_modu�
(&
�th
);

449 i�(
��
 =�
MP_IMPORT_STAT_NO_EXIST
) {

451 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


452 
	`mp_�i�_msg
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("module�ot found"));

454 
	`mp_�i�_msg_v�g
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("n�modu˂amed '%q'"), 
fu�_mod_�me
);

459 
	`DEBUG_��tf
("Found��h��l�d: %.*s\n", ()
	`v�r_�n
(&
�th
), 
	`v�r_�r
(&path));

464 
modu�_obj
 = 
	`mp_obj_�w_modu�
(
fu�_mod_�me
);

465 
�r_jump_��back_node_u�egi��_modu�_t
 
�x
;

466 
�x
.
�me
 = 
fu�_mod_�me
;

467 
	`�r_push_jump_��back
(&
�x
.
��back
, 
u�egi��_modu�_�om_�r_jump_��back
);

469 #i�
MICROPY_MODULE_OVERRIDE_MAIN_IMPORT


476 i�(
ov�ride_ma�
 && 
��
 !�
MP_IMPORT_STAT_DIR
) {

477 
mp_obj_modu�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
modu�_obj
);

478 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
o
->
glob�s
), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�me__
), MP_OBJ_NEW_QSTR(
MP_QSTR___ma�__
));

479 #i�
MICROPY_CPYTHON_COMPAT


481 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(&
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
)), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___ma�__
), 
modu�_obj
);

485 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
o
->
glob�s
), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___ma�__
), MP_OBJ_NEW_QSTR(
fu�_mod_�me
));

490 i�(
��
 =�
MP_IMPORT_STAT_DIR
) {

492 
	`DEBUG_��tf
("%.*�i�d�\n", ()
	`v�r_�n
(&
�th
), 
	`v�r_�r
(&path));

498 
	`mp_��e_��
(
modu�_obj
, 
MP_QSTR___�th__
, 
	`mp_obj_�w_�r
(
	`v�r_�r
(&
�th
), 
	`v�r_�n
(&path)));

499 
size_t
 
�ig_�th_�n
 = 
�th
.
�n
;

500 
	`v�r_add_�r
(&
�th
, 
PATH_SEP_CHAR
 "__init__.py");

503 i�(
	`��_f�e_py_�_mpy
(&
�th
�=�
MP_IMPORT_STAT_FILE
) {

504 
	`do_l�d
(
	`MP_OBJ_TO_PTR
(
modu�_obj
), &
�th
);

510 
�th
.
�n
 = 
�ig_�th_�n
;

513 
	`do_l�d
(
	`MP_OBJ_TO_PTR
(
modu�_obj
), &
�th
);

520 i�(
ou�r_modu�_obj
 !�
MP_OBJ_NULL
) {

522 
	`mp_��e_��
(
ou�r_modu�_obj
, 
�v�_mod_�me
, 
modu�_obj
);

525 
	`�r_p�_jump_��back
(
�l�
);

527  
modu�_obj
;

528 
	}
}

530 
mp_obj_t
 
	$mp_bu�t�___imp�t___de�u�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

531 #i�
DEBUG_PRINT


532 
	`DEBUG_��tf
("__import__:\n");

533 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

534 
	`DEBUG_��tf
(" ");

535 
	`mp_obj_��t_h��r
(
MICROPY_DEBUG_PRINTER
, 
�gs
[
i
], 
PRINT_REPR
);

536 
	`DEBUG_��tf
("\n");

545 
mp_obj_t
 
modu�_�me_obj
 = 
�gs
[0];

550 
mp_obj_t
 
�omtu�e
 = 
mp_cڡ_n�e
;

555 
mp_�t_t
 
�v�
 = 0;

556 i�(
n_�gs
 >= 4) {

557 
�omtu�e
 = 
�gs
[3];

558 i�(
n_�gs
 >= 5) {

559 
�v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[4]);

560 i�(
�v�
 < 0) {

561 
	`mp_�i�_V�ueE��
(
NULL
);

566 
size_t
 
modu�_�me_�n
;

567 cڡ *
modu�_�me
 = 
	`mp_obj_�r_g�_d�a
(
modu�_�me_obj
, &
modu�_�me_�n
);

569 i�(
�v�
 != 0) {

572 
	`ev�u�e_��tive_imp�t
(
�v�
, &
modu�_�me
, &
modu�_�me_�n
);

576 i�(
modu�_�me_�n
 == 0) {

577 
	`mp_�i�_V�ueE��
(
NULL
);

580 
	`DEBUG_��tf
("S���g modu� s�rch f� '%s'\n", 
modu�_�me
);

582 
mp_obj_t
 
t�_modu�_obj
 = 
MP_OBJ_NULL
;

583 
mp_obj_t
 
ou�r_modu�_obj
 = 
MP_OBJ_NULL
;

588 
size_t
 
cu��t_compڒt_��t
 = 0;

589 
size_t
 
i
 = 1; i <�
modu�_�me_�n
; i++) {

590 i�(
i
 =�
modu�_�me_�n
 || 
modu�_�me
[i] == '.') {

592 
q�r
 
fu�_mod_�me
 = 
	`q�r_�om_��
(
modu�_�me
, 
i
);

594 
q�r
 
�v�_mod_�me
 = 
	`q�r_�om_��
(
modu�_�me
 + 
cu��t_compڒt_��t
, 
i
 - current_component_start);

596 
	`DEBUG_��tf
("Pro�ss�g modu�: '%s'���v� '%s'\n", 
	`q�r_�r
(
fu�_mod_�me
), q�r_�r(
�v�_mod_�me
));

598 #i�
MICROPY_MODULE_OVERRIDE_MAIN_IMPORT


602 
bo�
 
ov�ride_ma�
 = (
i
 =�
modu�_�me_�n
 && 
�omtu�e
 =�
mp_cڡ_�l�
);

604 
bo�
 
ov�ride_ma�
 = 
�l�
;

608 
mp_obj_t
 
modu�_obj
 = 
	`�o�ss_imp�t_�_�v�
(
fu�_mod_�me
, 
�v�_mod_�me
, 
ou�r_modu�_obj
, 
ov�ride_ma�
);

611 
ou�r_modu�_obj
 = 
modu�_obj
;

612 i�(
t�_modu�_obj
 =�
MP_OBJ_NULL
) {

613 
t�_modu�_obj
 = 
modu�_obj
;

616 
cu��t_compڒt_��t
 = 
i
 + 1;

620 i�(
�omtu�e
 !�
mp_cڡ_n�e
) {

622  
ou�r_modu�_obj
;

625  
t�_modu�_obj
;

627 
	}
}

631 
mp_obj_t
 
	$mp_bu�t�___imp�t___de�u�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

633 i�(
n_�gs
 >�5 && 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[4]) != 0) {

634 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("relative import"));

638 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
).
m�
, 
�gs
[0], 
MP_MAP_LOOKUP
);

639 i�(
�em
) {

640  
�em
->
v�ue
;

644 
q�r
 
modu�_�me_q�r
 = 
	`mp_obj_�r_g�_q�r
(
�gs
[0]);

645 
mp_obj_t
 
modu�_obj
 = 
	`mp_modu�_g�_bu�t�
(
modu�_�me_q�r
, 
�l�
);

646 i�(
modu�_obj
 !�
MP_OBJ_NULL
) {

647  
modu�_obj
;

650 
modu�_obj
 = 
	`mp_modu�_g�_bu�t�
(
modu�_�me_q�r
, 
�ue
);

651 i�(
modu�_obj
 !�
MP_OBJ_NULL
) {

652  
modu�_obj
;

656 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


657 
	`mp_�i�_msg
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("module�ot found"));

659 
	`mp_�i�_msg_v�g
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("n�modu˂amed '%q'"), 
modu�_�me_q�r
);

661 
	}
}

665 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�___imp�t___obj
, 1, 5, 
mp_bu�t�___imp�t__
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\compile.c

27 
	~<�dbo�.h
>

28 
	~<�d�t.h
>

29 
	~<�dio.h
>

30 
	~<�r�g.h
>

31 
	~<as��.h
>

33 
	~"py/sc�e.h
"

34 
	~"py/em�.h
"

35 
	~"py/comp�e.h
"

36 
	~"py/ru�ime.h
"

37 
	~"py/asmba�.h
"

38 
	~"py/�tiveglue.h
"

39 
	~"py/�rsi��tcode.h
"

40 
	~"py/sm�l�t.h
"

42 #i�
MICROPY_ENABLE_COMPILER


44 
	#INVALID_LABEL
 (0xffff)

	)

48 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
PN_
##ru�,

	)

49 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

50 
	~"py/g�mm�.h
"

51 #unde�
DEF_RULE


52 #unde�
DEF_RULE_NC


53 
	mPN_cڡ_obje�
,

55 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

56 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
PN_
##ru�,

	)

57 
	~"py/g�mm�.h
"

58 #unde�
DEF_RULE


59 #unde�
DEF_RULE_NC


60 } 
	t�_k�d_t
;

64 
	#MP_PARSE_NODE_TESTLIST_COMP_HAS_COMP_FOR
(
�s
) \

65 (
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) == 2 && \

66 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[1], 
PN_comp_f�
))

	)

68 
	#NEED_METHOD_TABLE
 
MICROPY_EMIT_NATIVE


	)

70 #i�
NEED_METHOD_TABLE


73 
	#EMIT
(
fun
�(
comp
->
em�_m�hod_�b�
->
	`fun
(comp->
em�
))

	)

74 
	#EMIT_ARG
(
fun
, ...�(
comp
->
em�_m�hod_�b�
->
	`fun
(comp->
em�
, 
__VA_ARGS__
))

	)

75 
	#EMIT_LOAD_FAST
(
q�
, 
lo�l_num
�(
comp
->
em�_m�hod_�b�
->
l�d_id
.
	`lo�l
(comp->
em�
, q�,�o�l_num, 
MP_EMIT_IDOP_LOCAL_FAST
))

	)

76 
	#EMIT_LOAD_GLOBAL
(
q�
�(
comp
->
em�_m�hod_�b�
->
l�d_id
.
	`glob�
(comp->
em�
, q�, 
MP_EMIT_IDOP_GLOBAL_GLOBAL
))

	)

81 
	#EMIT
(
fun
�(
mp_em�_bc_
##
	`fun
(
comp
->
em�
))

	)

82 
	#EMIT_ARG
(
fun
, ...�(
mp_em�_bc_
##
	`fun
(
comp
->
em�
, 
__VA_ARGS__
))

	)

83 
	#EMIT_LOAD_FAST
(
q�
, 
lo�l_num
�(
	`mp_em�_bc_l�d_lo�l
(
comp
->
em�
, q�,�o�l_num, 
MP_EMIT_IDOP_LOCAL_FAST
))

	)

84 
	#EMIT_LOAD_GLOBAL
(
q�
�(
	`mp_em�_bc_l�d_glob�
(
comp
->
em�
, q�, 
MP_EMIT_IDOP_GLOBAL_GLOBAL
))

	)

88 #i�
MICROPY_EMIT_NATIVE
 && 
MICROPY_DYNAMIC_COMPILER


90 
	#NATIVE_EMITTER
(
f
�
em�_�tive_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
]->
em�_
##
	)
f

91 
	#NATIVE_EMITTER_TABLE
 (
em�_�tive_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
])

	)

93 cڡ 
em�_m�hod_�b�_t
 *
	gem�_�tive_�b�
[] = {

94 
NULL
,

95 &
em�_�tive_x86_m�hod_�b�
,

96 &
em�_�tive_x64_m�hod_�b�
,

97 &
em�_�tive_�m_m�hod_�b�
,

98 &
em�_�tive_thumb_m�hod_�b�
,

99 &
em�_�tive_thumb_m�hod_�b�
,

100 &
em�_�tive_thumb_m�hod_�b�
,

101 &
em�_�tive_thumb_m�hod_�b�
,

102 &
em�_�tive_thumb_m�hod_�b�
,

103 &
em�_�tive_x�n�_m�hod_�b�
,

104 &
em�_�tive_x�n�w�_m�hod_�b�
,

105 &
em�_�tive_rv32_m�hod_�b�
,

106 &
em�_�tive_debug_m�hod_�b�
,

109 #�i�
MICROPY_EMIT_NATIVE


111 #i�
MICROPY_EMIT_X64


112 
	#NATIVE_EMITTER
(
f
�
em�_�tive_x64_
##
	)
f

113 #�i�
MICROPY_EMIT_X86


114 
	#NATIVE_EMITTER
(
f
�
em�_�tive_x86_
##
	)
f

115 #�i�
MICROPY_EMIT_THUMB


116 
	#NATIVE_EMITTER
(
f
�
em�_�tive_thumb_
##
	)
f

117 #�i�
MICROPY_EMIT_ARM


118 
	#NATIVE_EMITTER
(
f
�
em�_�tive_�m_
##
	)
f

119 #�i�
MICROPY_EMIT_XTENSA


120 
	#NATIVE_EMITTER
(
f
�
em�_�tive_x�n�_
##
	)
f

121 #�i�
MICROPY_EMIT_XTENSAWIN


122 
	#NATIVE_EMITTER
(
f
�
em�_�tive_x�n�w�_
##
	)
f

123 #�i�
MICROPY_EMIT_RV32


124 
	#NATIVE_EMITTER
(
f
�
em�_�tive_rv32_
##
	)
f

125 #�i�
MICROPY_EMIT_NATIVE_DEBUG


126 
	#NATIVE_EMITTER
(
f
�
em�_�tive_debug_
##
	)
f

130 
	#NATIVE_EMITTER_TABLE
 (&
	`NATIVE_EMITTER
(
m�hod_�b�
))

	)

133 #i�
MICROPY_EMIT_INLINE_ASM
 && 
MICROPY_DYNAMIC_COMPILER


135 
	#ASM_EMITTER
(
f
�
em�_asm_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
]->
asm_
##
	)
f

136 
	#ASM_EMITTER_TABLE
 
em�_asm_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
]

	)

138 cڡ 
em�_�l�e_asm_m�hod_�b�_t
 *
	gem�_asm_�b�
[] = {

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 &
em�_�l�e_thumb_m�hod_�b�
,

143 &
em�_�l�e_thumb_m�hod_�b�
,

144 &
em�_�l�e_thumb_m�hod_�b�
,

145 &
em�_�l�e_thumb_m�hod_�b�
,

146 &
em�_�l�e_thumb_m�hod_�b�
,

147 &
em�_�l�e_thumb_m�hod_�b�
,

148 &
em�_�l�e_x�n�_m�hod_�b�
,

149 
NULL
,

152 #�i�
MICROPY_EMIT_INLINE_ASM


154 #i�
MICROPY_EMIT_INLINE_THUMB


155 
	#ASM_DECORATOR_QSTR
 
MP_QSTR_asm_thumb


	)

156 
	#ASM_EMITTER
(
f
�
em�_�l�e_thumb_
##
	)
f

157 #�i�
MICROPY_EMIT_INLINE_XTENSA


158 
	#ASM_DECORATOR_QSTR
 
MP_QSTR_asm_x�n�


	)

159 
	#ASM_EMITTER
(
f
�
em�_�l�e_x�n�_
##
	)
f

163 
	#ASM_EMITTER_TABLE
 &
	`ASM_EMITTER
(
m�hod_�b�
)

	)

166 
	#EMIT_INLINE_ASM
(
fun
�(
comp
->
em�_�l�e_asm_m�hod_�b�
->
	`fun
(comp->
em�_�l�e_asm
))

	)

167 
	#EMIT_INLINE_ASM_ARG
(
fun
, ...�(
comp
->
em�_�l�e_asm_m�hod_�b�
->
	`fun
(comp->
em�_�l�e_asm
, 
__VA_ARGS__
))

	)

170 
	s_comp��_t
 {

171 
u�t8_t
 
	mis_��
;

172 
u�t8_t
 
	m�ss
;

173 
u�t8_t
 
	mhave_��
;

176 
mp_obj_t
 
	mcomp�e_�r�
;

177 
size_t
 
	mcomp�e_�r�_l�e
;

179 
u�t
 
	m�xt_�b�
;

181 
u�t16_t
 
	mnum_di�_��ms
;

182 
u�t16_t
 
	mnum_de�u�_��ms
;

184 
u�t16_t
 
	mb�ak_�b�
;

185 
u�t16_t
 
	mc�t�ue_�b�
;

186 
u�t16_t
 
	mcur_ex��_�v�
;

187 
u�t16_t
 
	mb�ak_c�t�ue_ex��_�v�
;

189 
sc�e_t
 *
	msc�e_h�d
;

190 
sc�e_t
 *
	msc�e_cur
;

192 
em�_t
 *
	mem�
;

193 #i�
NEED_METHOD_TABLE


194 cڡ 
em�_m�hod_�b�_t
 *
	mem�_m�hod_�b�
;

197 #i�
MICROPY_EMIT_INLINE_ASM


198 
em�_�l�e_asm_t
 *
	mem�_�l�e_asm
;

199 cڡ 
em�_�l�e_asm_m�hod_�b�_t
 *
	mem�_�l�e_asm_m�hod_�b�
;

202 
mp_em�_comm�_t
 
	mem�_comm�
;

203 } 
	tcomp��_t
;

205 #i�
MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT


206 
bo�
 
	gmp_comp�e_�low_t�_�v�_awa�
 = 
�l�
;

213 
	$mp_em�_comm�_��
(
mp_em�_comm�_t
 *
em�
, 
q�r
 
sour�_f�e
) {

214 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


215 
	`mp_m�_��
(&
em�
->
q�r_m�
, 1);

218 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
em�
->
q�r_m�
, 
	`MP_OBJ_NEW_QSTR
(
sour�_f�e
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

219 
�em
->
v�ue
 = 
	`MP_OBJ_NEW_SMALL_INT
(0);

221 
	`mp_obj_li�_��
(&
em�
->
cڡ_obj_li�
, 0);

222 
	}
}

224 
	$mp_em�_comm�_��t_�ss
(
mp_em�_comm�_t
 *
em�
, 
�ss_k�d_t
 
�ss
) {

225 
em�
->
�ss
 =�ass;

226 i�(
�ss
 =�
MP_PASS_CODE_SIZE
) {

227 i�(
em�
->
�_cur_ch�d
 == 0) {

228 
em�
->
ch�d�n
 = 
NULL
;

230 
em�
->
ch�d�n
 = 
	`m_�w0
(
mp_�w_code_t
 *,�m�->
�_cur_ch�d
);

233 
em�
->
�_cur_ch�d
 = 0;

234 
	}
}

236 
	$mp_em�_comm�_p�uϋ_modu�_cڋxt
(
mp_em�_comm�_t
 *
em�
, 
q�r
 
sour�_f�e
, 
mp_modu�_cڋxt_t
 *
cڋxt
) {

237 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


238 
size_t
 
q�r_m�_u�d
 = 
em�
->
q�r_m�
.
u�d
;

239 
	`mp_modu�_cڋxt_�loc_�b�s
(
cڋxt
, 
q�r_m�_u�d
, 
em�
->
cڡ_obj_li�
.
�n
);

240 
size_t
 
i
 = 0; i < 
em�
->
q�r_m�
.
�loc
; ++i) {

241 i�(
	`mp_m�_��_is_f��d
(&
em�
->
q�r_m�
, 
i
)) {

242 
size_t
 
idx
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
em�
->
q�r_m�
.
�b�
[
i
].
v�ue
);

243 
q�r
 
q�
 = 
	`MP_OBJ_QSTR_VALUE
(
em�
->
q�r_m�
.
�b�
[
i
].
key
);

244 
cڋxt
->
cڡ�ts
.
q�r_�b�
[
idx
] = 
q�
;

248 
	`mp_modu�_cڋxt_�loc_�b�s
(
cڋxt
, 0, 
em�
->
cڡ_obj_li�
.
�n
);

249 
cڋxt
->
cڡ�ts
.
sour�_f�e
 = source_file;

252 
size_t
 
i
 = 0; i < 
em�
->
cڡ_obj_li�
.
�n
; ++i) {

253 
cڋxt
->
cڡ�ts
.
obj_�b�
[
i
] = 
em�
->
cڡ_obj_li�
.
�ems
[i];

255 
	}
}

259 
	$comp�e_�r�_�t_l�e
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

261 i�(
comp
->
comp�e_�r�_l�e
 =�0 && 
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

262 
comp
->
comp�e_�r�_l�e
 = ((
mp_�r�_node_�ru�_t
 *)
�
)->
sour�_l�e
;

264 
	}
}

266 
	$comp�e_sy�ax_�r�
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
mp_rom_�r�_�xt_t
 
msg
) {

268 i�(
comp
->
comp�e_�r�
 =�
MP_OBJ_NULL
) {

269 
comp
->
comp�e_�r�
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
, 
msg
);

270 
	`comp�e_�r�_�t_l�e
(
comp
, 
�
);

272 
	}
}

274 
comp�e_�a��_��n_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_�gli�
, 
bo�
 
is_m�hod_��
, 
n_pos�iڮ_ex�a
);

275 
comp�e_com�eh�si�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
sc�e_k�d_t
 
k�d
);

276 
comp�e_�om_b��_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
bo�
 
���_m�
);

277 
comp�e_node
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
);

279 
u�t
 
	$comp_�xt_�b�
(
comp��_t
 *
comp
) {

280  
comp
->
�xt_�b�
++;

281 
	}
}

283 #i�
MICROPY_EMIT_NATIVE


284 
	$��rve_�b�s_f�_�tive
(
comp��_t
 *
comp
, 
n
) {

285 i�(
comp
->
sc�e_cur
->
em�_�ti�s
 !�
MP_EMIT_OPT_BYTECODE
) {

286 
comp
->
�xt_�b�
 +�
n
;

288 
	}
}

290 
	#��rve_�b�s_f�_�tive
(
comp
, 
n
)

	)

293 
	$comp�e_����_ex��_�v�
(
comp��_t
 *
comp
, 
u�t
 
�b�
, 
k�d
) {

294 
	`EMIT_ARG
(
�tup_block
, 
�b�
, 
k�d
);

295 
comp
->
cur_ex��_�v�
 += 1;

296 i�(
comp
->
cur_ex��_�v�
 > comp->
sc�e_cur
->
exc_�ack_size
) {

297 
comp
->
sc�e_cur
->
exc_�ack_size
 = comp->
cur_ex��_�v�
;

299 
	}
}

301 
	$comp�e_de���_ex��_�v�
(
comp��_t
 *
comp
) {

302 
	`as��
(
comp
->
cur_ex��_�v�
 > 0);

303 
comp
->
cur_ex��_�v�
 -= 1;

304 
	`EMIT
(
�d_f��ly
);

305 
	`��rve_�b�s_f�_�tive
(
comp
, 1);

306 
	}
}

308 
sc�e_t
 *
	$sc�e_�w_�d_l�k
(
comp��_t
 *
comp
, 
sc�e_k�d_t
 
k�d
, 
mp_�r�_node_t
 
�
, 
u�t
 
em�_�ti�s
) {

309 
sc�e_t
 *
sc�e
 = 
	`sc�e_�w
(
k�d
, 
�
, 
em�_�ti�s
);

310 
sc�e
->
���
 = 
comp
->
sc�e_cur
;

311 
sc�e
->
�xt
 = 
NULL
;

312 i�(
comp
->
sc�e_h�d
 =�
NULL
) {

313 
comp
->
sc�e_h�d
 = 
sc�e
;

315 
sc�e_t
 *
s
 = 
comp
->
sc�e_h�d
;

316 
s
->
�xt
 !�
NULL
) {

317 
s
 = s->
�xt
;

319 
s
->
�xt
 = 
sc�e
;

321  
sc�e
;

322 
	}
}

324 (*
	t��y_li�_fun_t
)(
	tcomp��_t
 *
	tcomp
, 
	tmp_�r�_node_t
 
	t�
);

326 
	$��y_to_s�g�_�_li�
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
�_k�d_t
 
�_li�_k�d
, 
��y_li�_fun_t
 
f
) {

327 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
�_li�_k�d
)) {

328 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

329 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

330 
i
 = 0; i < 
num_nodes
; i++) {

331 
	`f
(
comp
, 
�s
->
nodes
[
i
]);

333 } i�(!
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

334 
	`f
(
comp
, 
�
);

336 
	}
}

338 
	$comp�e_g��ic_�l_nodes
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

339 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

340 
i
 = 0; i < 
num_nodes
; i++) {

341 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
]);

342 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

344 
	`comp�e_�r�_�t_l�e
(
comp
, 
�s
->
nodes
[
i
]);

348 
	}
}

350 
	$comp�e_l�d_id
(
comp��_t
 *
comp
, 
q�r
 
q�
) {

351 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

352 
	`mp_em�_comm�_g�_id_f�_l�d
(
comp
->
sc�e_cur
, 
q�
);

354 #i�
NEED_METHOD_TABLE


355 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &comp->
em�_m�hod_�b�
->
l�d_id
, comp->
sc�e_cur
, 
q�
);

357 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &
mp_em�_bc_m�hod_�b�_l�d_id_�s
, comp->
sc�e_cur
, 
q�
);

360 
	}
}

362 
	$comp�e_��e_id
(
comp��_t
 *
comp
, 
q�r
 
q�
) {

363 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

364 
	`mp_em�_comm�_g�_id_f�_modifi�ti�
(
comp
->
sc�e_cur
, 
q�
);

366 #i�
NEED_METHOD_TABLE


367 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &comp->
em�_m�hod_�b�
->
��e_id
, comp->
sc�e_cur
, 
q�
);

369 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &
mp_em�_bc_m�hod_�b�_��e_id_�s
, comp->
sc�e_cur
, 
q�
);

372 
	}
}

374 
	$comp�e_d��e_id
(
comp��_t
 *
comp
, 
q�r
 
q�
) {

375 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

376 
	`mp_em�_comm�_g�_id_f�_modifi�ti�
(
comp
->
sc�e_cur
, 
q�
);

378 #i�
NEED_METHOD_TABLE


379 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &comp->
em�_m�hod_�b�
->
d��e_id
, comp->
sc�e_cur
, 
q�
);

381 
	`mp_em�_comm�_id_�
(
comp
->
em�
, &
mp_em�_bc_m�hod_�b�_d��e_id_�s
, comp->
sc�e_cur
, 
q�
);

384 
	}
}

386 
	$comp�e_g��ic_tu�e
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

388 
size_t
 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

389 
size_t
 
i
 = 0; i < 
num_nodes
; i++) {

390 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
]);

392 
	`EMIT_ARG
(
bu�d
, 
num_nodes
, 
MP_EMIT_BUILD_TUPLE
);

393 
	}
}

395 
	$c_if_c�d
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
bo�
 
jump_if
, 
�b�
) {

396 i�(
	`mp_�r�_node_is_cڡ_�l�
(
�
)) {

397 i�(
jump_if
 =�
�l�
) {

398 
	`EMIT_ARG
(
jump
, 
�b�
);

401 } i�(
	`mp_�r�_node_is_cڡ_�ue
(
�
)) {

402 i�(
jump_if
 =�
�ue
) {

403 
	`EMIT_ARG
(
jump
, 
�b�
);

406 } i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

407 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

408 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

409 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_�_��
) {

410 i�(
jump_if
 =�
�l�
) {

411 
�d_�_logic1
:;

412 
u�t
 
�b�2
 = 
	`comp_�xt_�b�
(
comp
);

413 
i
 = 0; i < 
n
 - 1; i++) {

414 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[
i
], !
jump_if
, 
�b�2
);

416 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[
n
 - 1], 
jump_if
, 
�b�
);

417 
	`EMIT_ARG
(
�b�_assign
, 
�b�2
);

419 
�d_�_logic2
:

420 
i
 = 0; i < 
n
; i++) {

421 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[
i
], 
jump_if
, 
�b�
);

425 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_�d_��
) {

426 i�(
jump_if
 =�
�l�
) {

427 
�d_�_logic2
;

429 
�d_�_logic1
;

431 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_n�_��_2
) {

432 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[0], !
jump_if
, 
�b�
);

438 
	`comp�e_node
(
comp
, 
�
);

439 
	`EMIT_ARG
(
p�_jump_if
, 
jump_if
, 
�b�
);

440 
	}
}

442 �um { 
	mASSIGN_STORE
, 
	mASSIGN_AUG_LOAD
, 
	mASSIGN_AUG_STORE
 } 
	tassign_k�d_t
;

443 
c_assign
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
assign_k�d_t
 
k�d
);

445 
	$c_assign_�om_ex�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
assign_k�d_t
 
assign_k�d
) {

446 i�(
assign_k�d
 !�
ASSIGN_AUG_STORE
) {

447 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

450 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1])) {

451 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

452 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�om_ex�_�a��s
) {

453 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s1
);

454 i�(
assign_k�d
 !�
ASSIGN_AUG_STORE
) {

455 
i
 = 0; i < 
n
 - 1; i++) {

456 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[
i
]);

459 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s1
->
nodes
[
n
 - 1]));

460 
�s1
 = (
mp_�r�_node_�ru�_t
 *�ns1->
nodes
[
n
 - 1];

462 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�a��_b�ck�
) {

463 i�(
assign_k�d
 =�
ASSIGN_AUG_STORE
) {

464 
	`EMIT
(
r�_th�e
);

465 
	`EMIT_ARG
(
subs�
, 
MP_EMIT_SUBSCR_STORE
);

467 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[0]);

468 i�(
assign_k�d
 =�
ASSIGN_AUG_LOAD
) {

469 
	`EMIT
(
dup_t�_two
);

470 
	`EMIT_ARG
(
subs�
, 
MP_EMIT_SUBSCR_LOAD
);

472 
	`EMIT_ARG
(
subs�
, 
MP_EMIT_SUBSCR_STORE
);

476 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�a��_�riod
) {

477 
	`as��
(
	`MP_PARSE_NODE_IS_ID
(
�s1
->
nodes
[0]));

478 i�(
assign_k�d
 =�
ASSIGN_AUG_LOAD
) {

479 
	`EMIT
(
dup_t�
);

480 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s1
->
nodes
[0]), 
MP_EMIT_ATTR_LOAD
);

482 i�(
assign_k�d
 =�
ASSIGN_AUG_STORE
) {

483 
	`EMIT
(
r�_two
);

485 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s1
->
nodes
[0]), 
MP_EMIT_ATTR_STORE
);

491 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("can't�ssign�o�xpression"));

492 
	}
}

494 
	$c_assign_tu�e
(
comp��_t
 *
comp
, 
u�t
 
num_��
, 
mp_�r�_node_t
 *
nodes_��
) {

496 
u�t
 
have_��_�dex
 = -1;

497 
u�t
 
i
 = 0; i < 
num_��
; i++) {

498 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
nodes_��
[
i
], 
PN_��_ex�
)) {

499 i�(
have_��_�dex
 =�(
u�t
)-1) {

500 
	`EMIT_ARG
(
u�ack_ex
, 
i
, 
num_��
 - i - 1);

501 
have_��_�dex
 = 
i
;

503 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes_��
[
i
], 
	`MP_ERROR_TEXT
("multiple *x in�ssignment"));

508 i�(
have_��_�dex
 =�(
u�t
)-1) {

509 
	`EMIT_ARG
(
u�ack_�qu��
, 
num_��
);

511 
u�t
 
i
 = 0; i < 
num_��
; i++) {

512 i�(
i
 =�
have_��_�dex
) {

513 
	`c_assign
(
comp
, ((
mp_�r�_node_�ru�_t
 *)
nodes_��
[
i
])->
nodes
[0], 
ASSIGN_STORE
);

515 
	`c_assign
(
comp
, 
nodes_��
[
i
], 
ASSIGN_STORE
);

518 
	}
}

521 
	$c_assign
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
assign_k�d_t
 
assign_k�d
) {

522 
	`as��
(!
	`MP_PARSE_NODE_IS_NULL
(
�
));

523 i�(
	`MP_PARSE_NODE_IS_LEAF
(
�
)) {

524 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

525 
q�r
 
�g
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

526 
assign_k�d
) {

527 
ASSIGN_STORE
:

528 
ASSIGN_AUG_STORE
:

529 
	`comp�e_��e_id
(
comp
, 
�g
);

531 
ASSIGN_AUG_LOAD
:

533 
	`comp�e_l�d_id
(
comp
, 
�g
);

537 
���_assign
;

541 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

542 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
)) {

543 
PN_�om_ex�_n�m�
:

545 
	`c_assign_�om_ex�
(
comp
, 
�s
, 
assign_k�d
);

548 
PN_��li�_��_ex�
:

549 
PN_ex�li�
:

551 i�(
assign_k�d
 !�
ASSIGN_STORE
) {

552 
���_assign
;

554 
	`c_assign_tu�e
(
comp
, 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
),�ns->
nodes
);

557 
PN_�om_��n
:

559 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

561 
���_assign
;

563 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_comp
));

564 i�(
assign_k�d
 !�
ASSIGN_STORE
) {

565 
���_assign
;

567 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

568 
��li�_comp
;

572 
PN_�om_b�ck�
:

574 i�(
assign_k�d
 !�
ASSIGN_STORE
) {

575 
���_assign
;

577 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

579 
	`c_assign_tu�e
(
comp
, 0, 
NULL
);

580 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_comp
)) {

581 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

582 
��li�_comp
;

585 
	`c_assign_tu�e
(
comp
, 1, 
�s
->
nodes
);

590 
���_assign
;

594 
��li�_comp
:

596 i�(
	`MP_PARSE_NODE_TESTLIST_COMP_HAS_COMP_FOR
(
�s
)) {

597 
���_assign
;

599 
	`c_assign_tu�e
(
comp
, 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
),�ns->
nodes
);

604 
���_assign
:

605 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("can't�ssign�o�xpression"));

606 
	}
}

612 
	$�o�_ov�_v��b�s_�c
(
comp��_t
 *
comp
, 
sc�e_t
 *
this_sc�e
, 
n_pos_de�u�s
, 
n_kw_de�u�s
) {

613 
	`as��
(
n_pos_de�u�s
 >= 0);

614 
	`as��
(
n_kw_de�u�s
 >= 0);

617 i�(
n_kw_de�u�s
 > 0) {

618 
this_sc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_DEFKWARGS
;

620 
this_sc�e
->
num_def_pos_�gs
 = 
n_pos_de�u�s
;

622 #i�
MICROPY_EMIT_NATIVE


624 
comp
->
sc�e_cur
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_REFGLOBALS
 | 
MP_SCOPE_FLAG_HASCONSTS
;

629 
n�
 = 0;

630 i�(
comp
->
sc�e_cur
->
k�d
 !�
SCOPE_MODULE
) {

631 
i
 = 0; i < 
comp
->
sc�e_cur
->
id_�fo_�n
; i++) {

632 
id_�fo_t
 *
id
 = &
comp
->
sc�e_cur
->
id_�fo
[
i
];

633 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
 || id->k�d =�
ID_INFO_KIND_FREE
) {

634 
j
 = 0; j < 
this_sc�e
->
id_�fo_�n
; j++) {

635 
id_�fo_t
 *
id2
 = &
this_sc�e
->
id_�fo
[
j
];

636 i�(
id2
->
k�d
 =�
ID_INFO_KIND_FREE
 && 
id
->
q�
 == id2->qst) {

638 
	`EMIT_LOAD_FAST
(
id
->
q�
, id->
lo�l_num
);

639 
n�
 += 1;

647 i�(
n�
 == 0) {

648 
	`EMIT_ARG
(
make_fun�i�
, 
this_sc�e
, 
n_pos_de�u�s
, 
n_kw_de�u�s
);

650 
	`EMIT_ARG
(
make_�osu�
, 
this_sc�e
, 
n�
, 
n_pos_de�u�s
, 
n_kw_de�u�s
);

652 
	}
}

654 
	$comp�e_funcdef_�mbdef_��m
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

656 
�_k�d
;

657 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

658 
�_k�d
 = -1;

660 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�
));

661 
�_k�d
 = 
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�
);

664 i�(
�_k�d
 =�
PN_ty�d�g�i�_��
 ||�n_k�d =�
PN_v��g�i�_��
) {

665 
comp
->
have_��
 = 
�ue
;

675 } i�(
�_k�d
 =�
PN_ty�d�g�i�_dbl_��
 ||�n_k�d =�
PN_v��g�i�_dbl_��
) {

680 
mp_�r�_node_t
 
�_id
;

681 
mp_�r�_node_t
 
�_equ�
;

682 i�(
�_k�d
 == -1) {

685 
�_id
 = 
�
;

686 
�_equ�
 = 
MP_PARSE_NODE_NULL
;

688 } i�(
�_k�d
 =�
PN_ty�d�g�i�_�me
) {

691 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

692 
�_id
 = 
�s
->
nodes
[0];

694 
�_equ�
 = 
�s
->
nodes
[2];

697 
	`as��
(
�_k�d
 =�
PN_v��g�i�_�me
);

700 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

701 
�_id
 = 
�s
->
nodes
[0];

702 
�_equ�
 = 
�s
->
nodes
[1];

705 i�(
	`MP_PARSE_NODE_IS_NULL
(
�_equ�
)) {

709 i�(!
comp
->
have_��
 && comp->
num_de�u�_��ms
 != 0) {

710 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("non-default�rgument follows default�rgument"));

718 i�(
comp
->
have_��
) {

719 
comp
->
num_di�_��ms
 += 1;

721 i�(
comp
->
num_di�_��ms
 == 1) {

724 i�(
comp
->
num_de�u�_��ms
 > 0) {

725 
	`EMIT_ARG
(
bu�d
, 
comp
->
num_de�u�_��ms
, 
MP_EMIT_BUILD_TUPLE
);

727 
	`EMIT
(
l�d_nu�
);

730 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_MAP
);

734 
	`comp�e_node
(
comp
, 
�_equ�
);

735 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�_id
));

736 
	`EMIT
(
��e_m�
);

738 
comp
->
num_de�u�_��ms
 += 1;

739 
	`comp�e_node
(
comp
, 
�_equ�
);

743 
	}
}

745 
	$comp�e_funcdef_�mbdef
(
comp��_t
 *
comp
, 
sc�e_t
 *
sc�e
, 
mp_�r�_node_t
 
�_��ms
, 
�_k�d_t
 
�_li�_k�d
) {

749 
bo�
 
�ig_have_��
 = 
comp
->
have_��
;

750 
u�t16_t
 
�ig_num_di�_��ms
 = 
comp
->
num_di�_��ms
;

751 
u�t16_t
 
�ig_num_de�u�_��ms
 = 
comp
->
num_de�u�_��ms
;

754 
comp
->
have_��
 = 
�l�
;

755 
comp
->
num_di�_��ms
 = 0;

756 
comp
->
num_de�u�_��ms
 = 0;

757 
	`��y_to_s�g�_�_li�
(
comp
, 
�_��ms
, 
�_li�_k�d
, 
comp�e_funcdef_�mbdef_��m
);

759 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

765 i�(
comp
->
num_de�u�_��ms
 > 0 && comp->
num_di�_��ms
 == 0) {

766 
	`EMIT_ARG
(
bu�d
, 
comp
->
num_de�u�_��ms
, 
MP_EMIT_BUILD_TUPLE
);

767 
	`EMIT
(
l�d_nu�
);

771 
	`�o�_ov�_v��b�s_�c
(
comp
, 
sc�e
, comp->
num_de�u�_��ms
, comp->
num_di�_��ms
);

774 
comp
->
have_��
 = 
�ig_have_��
;

775 
comp
->
num_di�_��ms
 = 
�ig_num_di�_��ms
;

776 
comp
->
num_de�u�_��ms
 = 
�ig_num_de�u�_��ms
;

777 
	}
}

781 
q�r
 
	$comp�e_funcdef_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
u�t
 
em�_�ti�s
) {

782 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

784 
sc�e_t
 *
s
 = 
	`sc�e_�w_�d_l�k
(
comp
, 
SCOPE_FUNCTION
, (
mp_�r�_node_t
)
�s
, 
em�_�ti�s
);

786 
�s
->
nodes
[4] = (
mp_�r�_node_t
)
s
;

790 
sc�e_t
 *
fsc�e
 = (sc�e_�*)
�s
->
nodes
[4];

793 
	`comp�e_funcdef_�mbdef
(
comp
, 
fsc�e
, 
�s
->
nodes
[1], 
PN_ty�d�g�i�
);

796  
fsc�e
->
sim�e_�me
;

797 
	}
}

801 
q�r
 
	$comp�e_�assdef_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
u�t
 
em�_�ti�s
) {

802 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

804 
sc�e_t
 *
s
 = 
	`sc�e_�w_�d_l�k
(
comp
, 
SCOPE_CLASS
, (
mp_�r�_node_t
)
�s
, 
em�_�ti�s
);

806 
�s
->
nodes
[3] = (
mp_�r�_node_t
)
s
;

809 
	`EMIT
(
l�d_bu�d_�ass
);

812 
sc�e_t
 *
csc�e
 = (sc�e_�*)
�s
->
nodes
[3];

815 
	`�o�_ov�_v��b�s_�c
(
comp
, 
csc�e
, 0, 0);

818 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
csc�e
->
sim�e_�me
);

822 
mp_�r�_node_t
 
���s
 = 
�s
->
nodes
[1];

823 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
���s
, 
PN_�assdef_2
)) {

824 
���s
 = 
MP_PARSE_NODE_NULL
;

826 
	`comp�e_�a��_��n_h��r
(
comp
, 
���s
, 
�l�
, 2);

829  
csc�e
->
sim�e_�me
;

830 
	}
}

833 
bo�
 
	$comp�e_bu�t_�_decܩ�
(
comp��_t
 *
comp
, 
size_t
 
�me_�n
, 
mp_�r�_node_t
 *
�me_nodes
, 
u�t
 *
em�_�ti�s
) {

834 i�(
	`MP_PARSE_NODE_LEAF_ARG
(
�me_nodes
[0]�!�
MP_QSTR_mi��yth�
) {

835  
�l�
;

838 i�(
�me_�n
 != 2) {

839 
	`comp�e_sy�ax_�r�
(
comp
, 
�me_nodes
[0], 
	`MP_ERROR_TEXT
("invalid micropython decorator"));

840  
�ue
;

843 
q�r
 
��
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�me_nodes
[1]);

844 i�(
��
 =�
MP_QSTR_by�code
) {

845 *
em�_�ti�s
 = 
MP_EMIT_OPT_BYTECODE
;

846 #i�
MICROPY_EMIT_NATIVE


847 } i�(
��
 =�
MP_QSTR_�tive
) {

848 *
em�_�ti�s
 = 
MP_EMIT_OPT_NATIVE_PYTHON
;

849 } i�(
��
 =�
MP_QSTR_v��
) {

850 *
em�_�ti�s
 = 
MP_EMIT_OPT_VIPER
;

852 #i�
MICROPY_EMIT_INLINE_ASM


853 #i�
MICROPY_DYNAMIC_COMPILER


854 } i�(
��
 =�
MP_QSTR_asm_thumb
) {

855 *
em�_�ti�s
 = 
MP_EMIT_OPT_ASM
;

856 } i�(
��
 =�
MP_QSTR_asm_x�n�
) {

857 *
em�_�ti�s
 = 
MP_EMIT_OPT_ASM
;

859 } i�(
��
 =�
ASM_DECORATOR_QSTR
) {

860 *
em�_�ti�s
 = 
MP_EMIT_OPT_ASM
;

864 
	`comp�e_sy�ax_�r�
(
comp
, 
�me_nodes
[1], 
	`MP_ERROR_TEXT
("invalid micropython decorator"));

867 #i�
MICROPY_EMIT_NATIVE
 && 
MICROPY_DYNAMIC_COMPILER


868 i�(*
em�_�ti�s
 =�
MP_EMIT_OPT_NATIVE_PYTHON
 || *em�_�tiڠ=�
MP_EMIT_OPT_VIPER
) {

869 i�(
em�_�tive_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
] =�
NULL
) {

870 
	`comp�e_sy�ax_�r�
(
comp
, 
�me_nodes
[1], 
	`MP_ERROR_TEXT
("invalid�rch"));

872 } i�(*
em�_�ti�s
 =�
MP_EMIT_OPT_ASM
) {

873 i�(
em�_asm_�b�
[
mp_dy�mic_comp��
.
�tive_�ch
] =�
NULL
) {

874 
	`comp�e_sy�ax_�r�
(
comp
, 
�me_nodes
[1], 
	`MP_ERROR_TEXT
("invalid�rch"));

879  
�ue
;

880 
	}
}

882 
	$comp�e_decܩed
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

884 
mp_�r�_node_t
 *
nodes
;

885 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[0], 
PN_decܩ�s
, &nodes);

888 
u�t
 
em�_�ti�s
 = 
comp
->
sc�e_cur
->emit_options;

891 
size_t
 
num_bu�t_�_decܩ�s
 = 0;

892 
size_t
 
i
 = 0; i < 
n
; i++) {

893 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
nodes
[
i
], 
PN_decܩ�
));

894 
mp_�r�_node_�ru�_t
 *
�s_decܩ�
 = (mp_�r�_node_�ru�_�*)
nodes
[
i
];

897 
mp_�r�_node_t
 *
�me_nodes
;

898 
size_t
 
�me_�n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s_decܩ�
->
nodes
[0], 
PN_dًd_�me
, &
�me_nodes
);

901 i�(
	`comp�e_bu�t_�_decܩ�
(
comp
, 
�me_�n
, 
�me_nodes
, &
em�_�ti�s
)) {

903 
num_bu�t_�_decܩ�s
 += 1;

909 
	`comp�e_node
(
comp
, 
�me_nodes
[0]);

910 
size_t
 
j
 = 1; j < 
�me_�n
; j++) {

911 
	`as��
(
	`MP_PARSE_NODE_IS_ID
(
�me_nodes
[
j
]));

912 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�me_nodes
[
j
]), 
MP_EMIT_ATTR_LOAD
);

916 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�s_decܩ�
->
nodes
[1])) {

918 
	`comp�e_node
(
comp
, 
�s_decܩ�
->
nodes
[1]);

924 
mp_�r�_node_�ru�_t
 *
�s_body
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

925 
q�r
 
body_�me
 = 0;

926 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_body
�=�
PN_funcdef
) {

927 
body_�me
 = 
	`comp�e_funcdef_h��r
(
comp
, 
�s_body
, 
em�_�ti�s
);

928 #i�
MICROPY_PY_ASYNC_AWAIT


929 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_body
�=�
PN_async_funcdef
) {

930 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s_body
->
nodes
[0]));

931 
mp_�r�_node_�ru�_t
 *
�s0
 = (mp_�r�_node_�ru�_�*)
�s_body
->
nodes
[0];

932 
body_�me
 = 
	`comp�e_funcdef_h��r
(
comp
, 
�s0
, 
em�_�ti�s
);

933 
sc�e_t
 *
fsc�e
 = (sc�e_�*)
�s0
->
nodes
[4];

934 
fsc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_GENERATOR
;

937 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_body
�=�
PN_�assdef
);

938 
body_�me
 = 
	`comp�e_�assdef_h��r
(
comp
, 
�s_body
, 
em�_�ti�s
);

942 
size_t
 
i
 = 0; i < 
n
 - 
num_bu�t_�_decܩ�s
; i++) {

943 
	`EMIT_ARG
(
��_fun�i�
, 1, 0, 0);

947 
	`comp�e_��e_id
(
comp
, 
body_�me
);

948 
	}
}

950 
	$comp�e_funcdef
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

951 
q�r
 
�ame
 = 
	`comp�e_funcdef_h��r
(
comp
, 
�s
, comp->
sc�e_cur
->
em�_�ti�s
);

953 
	`comp�e_��e_id
(
comp
, 
�ame
);

954 
	}
}

956 
	$c_d�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

957 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

958 
	`comp�e_d��e_id
(
comp
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�
));

959 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_�om_ex�_n�m�
)) {

960 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

962 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

964 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1])) {

965 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

966 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�om_ex�_�a��s
) {

967 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s1
);

968 
i
 = 0; i < 
n
 - 1; i++) {

969 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[
i
]);

971 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s1
->
nodes
[
n
 - 1]));

972 
�s1
 = (
mp_�r�_node_�ru�_t
 *�ns1->
nodes
[
n
 - 1];

974 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�a��_b�ck�
) {

975 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[0]);

976 
	`EMIT_ARG
(
subs�
, 
MP_EMIT_SUBSCR_DELETE
);

977 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_�a��_�riod
) {

978 
	`as��
(
	`MP_PARSE_NODE_IS_ID
(
�s1
->
nodes
[0]));

979 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s1
->
nodes
[0]), 
MP_EMIT_ATTR_DELETE
);

981 
���_d��e
;

984 
���_d��e
;

987 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_�om_��n
)) {

988 
�
 = ((
mp_�r�_node_�ru�_t
 *�n)->
nodes
[0];

989 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

990 
���_d��e
;

992 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_��li�_comp
));

993 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

994 i�(
	`MP_PARSE_NODE_TESTLIST_COMP_HAS_COMP_FOR
(
�s
)) {

995 
���_d��e
;

997 
size_t
 
i
 = 0; i < 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
); ++i) {

998 
	`c_d�_�mt
(
comp
, 
�s
->
nodes
[
i
]);

1003 
���_d��e
;

1008 
���_d��e
:

1009 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�
, 
	`MP_ERROR_TEXT
("can't delete�xpression"));

1010 
	}
}

1012 
	$comp�e_d�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1013 
	`��y_to_s�g�_�_li�
(
comp
, 
�s
->
nodes
[0], 
PN_ex�li�
, 
c_d�_�mt
);

1014 
	}
}

1016 
	$comp�e_b�ak_c�t_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1017 
u�t16_t
 
�b�
;

1018 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_b�ak_�mt
) {

1019 
�b�
 = 
comp
->
b�ak_�b�
;

1021 
�b�
 = 
comp
->
c�t�ue_�b�
;

1023 i�(
�b�
 =�
INVALID_LABEL
) {

1024 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("'break'/'continue' outside�oop"));

1026 
	`as��
(
comp
->
cur_ex��_�v�
 >�comp->
b�ak_c�t�ue_ex��_�v�
);

1027 
	`EMIT_ARG
(
unw�d_jump
, 
�b�
, 
comp
->
cur_ex��_�v�
 - comp->
b�ak_c�t�ue_ex��_�v�
);

1028 
	}
}

1030 
	$comp�e_�tu�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1031 #i�
MICROPY_CPYTHON_COMPAT


1032 i�(
comp
->
sc�e_cur
->
k�d
 !�
SCOPE_FUNCTION
) {

1033 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("'return' outside function"));

1037 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

1039 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1040 } i�(
MICROPY_COMP_RETURN_IF_EXPR


1041 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��_if_ex�
)) {

1043 
mp_�r�_node_�ru�_t
 *
�s_��_if_ex�
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[0];

1044 
mp_�r�_node_�ru�_t
 *
�s_��_if_��
 = (mp_�r�_node_�ru�_�*)
�s_��_if_ex�
->
nodes
[1];

1046 
u�t
 
l_�
 = 
	`comp_�xt_�b�
(
comp
);

1047 
	`c_if_c�d
(
comp
, 
�s_��_if_��
->
nodes
[0], 
�l�
, 
l_�
);

1048 
	`comp�e_node
(
comp
, 
�s_��_if_ex�
->
nodes
[0]);

1049 
	`EMIT
(
�tu�_v�ue
);

1050 
	`EMIT_ARG
(
�b�_assign
, 
l_�
);

1051 
	`comp�e_node
(
comp
, 
�s_��_if_��
->
nodes
[1]);

1053 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1055 
	`EMIT
(
�tu�_v�ue
);

1056 
	}
}

1058 
	$comp�e_y�ld_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1059 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1060 
	`EMIT
(
p�_t�
);

1061 
	}
}

1063 
	$comp�e_�i�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1064 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

1066 
	`EMIT_ARG
(
�i�_v��gs
, 0);

1067 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_�i�_�mt_�g
)) {

1069 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

1070 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1071 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1072 
	`EMIT_ARG
(
�i�_v��gs
, 2);

1075 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1076 
	`EMIT_ARG
(
�i�_v��gs
, 1);

1078 
	}
}

1083 
	$do_imp�t_�me
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
q�r
 *
q_ba�
) {

1084 
bo�
 
is_as
 = 
�l�
;

1085 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_dًd_as_�me
)) {

1086 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

1088 *
q_ba�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[1]);

1089 
�
 = 
�s
->
nodes
[0];

1090 
is_as
 = 
�ue
;

1092 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

1094 *
q_ba�
 = 
MP_QSTR_
;

1095 
	`EMIT_ARG
(
imp�t
, 
MP_QSTR_
, 
MP_EMIT_IMPORT_NAME
);

1096 } i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

1098 
q�r
 
q_fu�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

1099 i�(!
is_as
) {

1100 *
q_ba�
 = 
q_fu�
;

1102 
	`EMIT_ARG
(
imp�t
, 
q_fu�
, 
MP_EMIT_IMPORT_NAME
);

1104 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_dًd_�me
));

1105 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

1108 i�(!
is_as
) {

1109 *
q_ba�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

1111 
size_t
 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

1112 i�(
n
 == 0) {

1115 
MP_UNREACHABLE
;

1117 
size_t
 
�n
 = 
n
 - 1;

1118 
size_t
 
i
 = 0; i < 
n
; i++) {

1119 
�n
 +�
	`q�r_�n
(
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[
i
]));

1121 *
q_�r
 = 
	`mp_lo�l_�loc
(
�n
);

1122 *
�r_de�
 = 
q_�r
;

1123 
size_t
 
i
 = 0; i < 
n
; i++) {

1124 i�(
i
 > 0) {

1125 *
�r_de�
++ = '.';

1127 
size_t
 
�r_�c_�n
;

1128 cڡ 
by�
 *
�r_�c
 = 
	`q�r_d�a
(
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[
i
]), &
�r_�c_�n
);

1129 
	`mem�y
(
�r_de�
, 
�r_�c
, 
�r_�c_�n
);

1130 
�r_de�
 +�
�r_�c_�n
;

1132 
q�r
 
q_fu�
 = 
	`q�r_�om_��
(
q_�r
, 
�n
);

1133 
	`mp_lo�l_�
(
q_�r
);

1134 
	`EMIT_ARG
(
imp�t
, 
q_fu�
, 
MP_EMIT_IMPORT_NAME
);

1135 i�(
is_as
) {

1136 
size_t
 
i
 = 1; i < 
n
; i++) {

1137 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[
i
]), 
MP_EMIT_ATTR_LOAD
);

1142 
	}
}

1144 
	$comp�e_dًd_as_�me
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

1145 
	`EMIT_ARG
(
l�d_cڡ_sm�l_�t
, 0);

1146 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1147 
q�r
 
q_ba�
;

1148 
	`do_imp�t_�me
(
comp
, 
�
, &
q_ba�
);

1149 
	`comp�e_��e_id
(
comp
, 
q_ba�
);

1150 
	}
}

1152 
	$comp�e_imp�t_�me
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1153 
	`��y_to_s�g�_�_li�
(
comp
, 
�s
->
nodes
[0], 
PN_dًd_as_�mes
, 
comp�e_dًd_as_�me
);

1154 
	}
}

1156 
	$comp�e_imp�t_�om
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1157 
mp_�r�_node_t
 
�_imp�t_sour�
 = 
�s
->
nodes
[0];

1160 
u�t
 
imp�t_�v�
 = 0;

1162 
mp_�r�_node_t
 
�_�l
;

1163 i�(
	`MP_PARSE_NODE_IS_TOKEN
(
�_imp�t_sour�
�|| 
	`MP_PARSE_NODE_IS_STRUCT_KIND
�n_imp�t_sour�, 
PN_�e_�_m�e_�riod_�_�l�sis
)) {

1165 
�_�l
 = 
�_imp�t_sour�
;

1166 
�_imp�t_sour�
 = 
MP_PARSE_NODE_NULL
;

1167 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_imp�t_sour�
, 
PN_imp�t_�om_2b
)) {

1169 
mp_�r�_node_�ru�_t
 *
�s_2b
 = (mp_�r�_node_�ru�_�*)
�_imp�t_sour�
;

1170 
�_�l
 = 
�s_2b
->
nodes
[0];

1171 
�_imp�t_sour�
 = 
�s_2b
->
nodes
[1];

1172 
	`as��
(!
	`MP_PARSE_NODE_IS_NULL
(
�_imp�t_sour�
));

1179 
mp_�r�_node_t
 *
nodes
;

1180 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�_�l
, 
PN_�e_�_m�e_�riod_�_�l�sis
, &
nodes
);

1183 
size_t
 
i
 = 0; i < 
n
; i++) {

1184 i�(
	`MP_PARSE_NODE_IS_TOKEN_KIND
(
nodes
[
i
], 
MP_TOKEN_DEL_PERIOD
)) {

1185 
imp�t_�v�
++;

1188 
imp�t_�v�
 += 3;

1193 i�(
	`MP_PARSE_NODE_IS_TOKEN_KIND
(
�s
->
nodes
[1], 
MP_TOKEN_OP_STAR
)) {

1194 #i�
MICROPY_CPYTHON_COMPAT


1195 i�(
comp
->
sc�e_cur
->
k�d
 !�
SCOPE_MODULE
) {

1196 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("import *�ot�t module�evel"));

1201 
	`EMIT_ARG
(
l�d_cڡ_sm�l_�t
, 
imp�t_�v�
);

1204 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
MP_QSTR__��_
);

1205 
	`EMIT_ARG
(
bu�d
, 1, 
MP_EMIT_BUILD_TUPLE
);

1208 
q�r
 
dummy_q
;

1209 
	`do_imp�t_�me
(
comp
, 
�_imp�t_sour�
, &
dummy_q
);

1210 
	`EMIT_ARG
(
imp�t
, 
MP_QSTRnu�
, 
MP_EMIT_IMPORT_STAR
);

1213 
	`EMIT_ARG
(
l�d_cڡ_sm�l_�t
, 
imp�t_�v�
);

1216 
mp_�r�_node_t
 *
�_nodes
;

1217 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[1], 
PN_imp�t_as_�mes
, &
�_nodes
);

1218 
size_t
 
i
 = 0; i < 
n
; i++) {

1219 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_nodes
[
i
], 
PN_imp�t_as_�me
));

1220 
mp_�r�_node_�ru�_t
 *
�s3
 = (mp_�r�_node_�ru�_�*)
�_nodes
[
i
];

1221 
q�r
 
id2
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s3
->
nodes
[0]);

1222 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
id2
);

1224 
	`EMIT_ARG
(
bu�d
, 
n
, 
MP_EMIT_BUILD_TUPLE
);

1227 
q�r
 
dummy_q
;

1228 
	`do_imp�t_�me
(
comp
, 
�_imp�t_sour�
, &
dummy_q
);

1229 
size_t
 
i
 = 0; i < 
n
; i++) {

1230 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_nodes
[
i
], 
PN_imp�t_as_�me
));

1231 
mp_�r�_node_�ru�_t
 *
�s3
 = (mp_�r�_node_�ru�_�*)
�_nodes
[
i
];

1232 
q�r
 
id2
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s3
->
nodes
[0]);

1233 
	`EMIT_ARG
(
imp�t
, 
id2
, 
MP_EMIT_IMPORT_FROM
);

1234 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s3
->
nodes
[1])) {

1235 
	`comp�e_��e_id
(
comp
, 
id2
);

1237 
	`comp�e_��e_id
(
comp
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s3
->
nodes
[1]));

1240 
	`EMIT
(
p�_t�
);

1242 
	}
}

1244 
	$comp�e_de��e_glob�
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
id_�fo_t
 *
id_�fo
) {

1245 i�(
id_�fo
->
k�d
 !�
ID_INFO_KIND_UNDECIDED
 && id_�fo->k�d !�
ID_INFO_KIND_GLOBAL_EXPLICIT
) {

1246 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("identifier�edefined�s global"));

1249 
id_�fo
->
k�d
 = 
ID_INFO_KIND_GLOBAL_EXPLICIT
;

1252 
id_�fo
 = 
	`sc�e_f�d_glob�
(
comp
->
sc�e_cur
, id_�fo->
q�
);

1253 i�(
id_�fo
 !�
NULL
) {

1254 
id_�fo
->
k�d
 = 
ID_INFO_KIND_GLOBAL_EXPLICIT
;

1256 
	}
}

1258 
	$comp�e_de��e_n�lo�l
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
id_�fo_t
 *
id_�fo
) {

1259 i�(
id_�fo
->
k�d
 =�
ID_INFO_KIND_UNDECIDED
) {

1260 
id_�fo
->
k�d
 = 
ID_INFO_KIND_GLOBAL_IMPLICIT
;

1261 
	`sc�e_check_to_�o�_ov�
(
comp
->
sc�e_cur
, 
id_�fo
);

1262 i�(
id_�fo
->
k�d
 =�
ID_INFO_KIND_GLOBAL_IMPLICIT
) {

1263 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("no binding for�onlocal found"));

1265 } i�(
id_�fo
->
k�d
 !�
ID_INFO_KIND_FREE
) {

1266 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("identifier�edefined�s�onlocal"));

1268 
	}
}

1270 
	$comp�e_de��e_glob�_�_n�lo�l
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
id_�fo_t
 *
id_�fo
, 
bo�
 
is_glob�
) {

1271 i�(
is_glob�
) {

1272 
	`comp�e_de��e_glob�
(
comp
, 
�
, 
id_�fo
);

1274 
	`comp�e_de��e_n�lo�l
(
comp
, 
�
, 
id_�fo
);

1276 
	}
}

1278 
	$comp�e_glob�_n�lo�l_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1279 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

1280 
bo�
 
is_glob�
 = 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_glob�_�mt
;

1282 i�(!
is_glob�
 && 
comp
->
sc�e_cur
->
k�d
 =�
SCOPE_MODULE
) {

1283 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("can't declare�onlocal in outer code"));

1287 
mp_�r�_node_t
 *
nodes
;

1288 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[0], 
PN_�me_li�
, &nodes);

1289 
size_t
 
i
 = 0; i < 
n
; i++) {

1290 
q�r
 
q�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
nodes
[
i
]);

1291 
id_�fo_t
 *
id_�fo
 = 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
q�
, 
ID_INFO_KIND_UNDECIDED
);

1292 
	`comp�e_de��e_glob�_�_n�lo�l
(
comp
, (
mp_�r�_node_t
)
�s
, 
id_�fo
, 
is_glob�
);

1295 
	}
}

1297 
	$comp�e_as��_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1299 i�(
	`MP_STATE_VM
(
mp_�timi�_v�ue
) != 0) {

1303 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

1304 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[0], 
�ue
, 
l_�d
);

1305 
	`EMIT_LOAD_GLOBAL
(
MP_QSTR_As��i�E��
);

1306 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[1])) {

1308 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1309 
	`EMIT_ARG
(
��_fun�i�
, 1, 0, 0);

1311 
	`EMIT_ARG
(
�i�_v��gs
, 1);

1312 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

1313 
	}
}

1315 
	$comp�e_if_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1316 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

1319 i�(!
	`mp_�r�_node_is_cڡ_�l�
(
�s
->
nodes
[0])) {

1320 
u�t
 
l_�
 = 
	`comp_�xt_�b�
(
comp
);

1321 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[0], 
�l�
, 
l_�
);

1323 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1326 i�(
	`mp_�r�_node_is_cڡ_�ue
(
�s
->
nodes
[0])) {

1327 
d�e
;

1331 i�(!(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[2]) && MP_PARSE_NODE_IS_NULL(pns->nodes[3]))) {

1333 
	`EMIT_ARG
(
jump
, 
l_�d
);

1336 
	`EMIT_ARG
(
�b�_assign
, 
l_�
);

1340 
mp_�r�_node_t
 *
�_�if
;

1341 
size_t
 
n_�if
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[2], 
PN_if_�mt_�if_li�
, &
�_�if
);

1342 
size_t
 
i
 = 0; i < 
n_�if
; i++) {

1343 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_�if
[
i
], 
PN_if_�mt_�if
));

1344 
mp_�r�_node_�ru�_t
 *
�s_�if
 = (mp_�r�_node_�ru�_�*)
�_�if
[
i
];

1347 i�(!
	`mp_�r�_node_is_cڡ_�l�
(
�s_�if
->
nodes
[0])) {

1348 
u�t
 
l_�
 = 
	`comp_�xt_�b�
(
comp
);

1349 
	`c_if_c�d
(
comp
, 
�s_�if
->
nodes
[0], 
�l�
, 
l_�
);

1351 
	`comp�e_node
(
comp
, 
�s_�if
->
nodes
[1]);

1354 i�(
	`mp_�r�_node_is_cڡ_�ue
(
�s_�if
->
nodes
[0])) {

1355 
d�e
;

1358 
	`EMIT_ARG
(
jump
, 
l_�d
);

1359 
	`EMIT_ARG
(
�b�_assign
, 
l_�
);

1364 
	`comp�e_node
(
comp
, 
�s
->
nodes
[3]);

1366 
d�e
:

1367 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

1368 
	}
}

1370 
	#START_BREAK_CONTINUE_BLOCK
 \

1371 
u�t16_t
 
�d_b�ak_�b�
 = 
comp
->
b�ak_�b�
; \

1372 
u�t16_t
 
�d_c�t�ue_�b�
 = 
comp
->
c�t�ue_�b�
; \

1373 
u�t16_t
 
�d_b�ak_c�t�ue_ex��_�v�
 = 
comp
->
b�ak_c�t�ue_ex��_�v�
; \

1374 
u�t
 
b�ak_�b�
 = 
	`comp_�xt_�b�
(
comp
); \

1375 
u�t
 
c�t�ue_�b�
 = 
	`comp_�xt_�b�
(
comp
); \

1376 
comp
->
b�ak_�b�
 = break_label; \

1377 
comp
->
c�t�ue_�b�
 = continue_label; \

1378 
comp
->
b�ak_c�t�ue_ex��_�v�
 = comp->
cur_ex��_�v�
;

	)

1380 
	#END_BREAK_CONTINUE_BLOCK
 \

1381 
comp
->
b�ak_�b�
 = 
�d_b�ak_�b�
; \

1382 
comp
->
c�t�ue_�b�
 = 
�d_c�t�ue_�b�
; \

1383 
comp
->
b�ak_c�t�ue_ex��_�v�
 = 
�d_b�ak_c�t�ue_ex��_�v�
;

	)

1385 
	$comp�e_wh�e_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1386 
START_BREAK_CONTINUE_BLOCK


1388 i�(!
	`mp_�r�_node_is_cڡ_�l�
(
�s
->
nodes
[0])) {

1389 
u�t
 
t�_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1390 i�(!
	`mp_�r�_node_is_cڡ_�ue
(
�s
->
nodes
[0])) {

1391 
	`EMIT_ARG
(
jump
, 
c�t�ue_�b�
);

1393 
	`EMIT_ARG
(
�b�_assign
, 
t�_�b�
);

1394 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1395 
	`EMIT_ARG
(
�b�_assign
, 
c�t�ue_�b�
);

1396 
	`c_if_c�d
(
comp
, 
�s
->
nodes
[0], 
�ue
, 
t�_�b�
);

1400 
END_BREAK_CONTINUE_BLOCK


1402 
	`comp�e_node
(
comp
, 
�s
->
nodes
[2]);

1404 
	`EMIT_ARG
(
�b�_assign
, 
b�ak_�b�
);

1405 
	}
}

1423 
	$comp�e_f�_�mt_�timi�d_�nge
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_v�
, mp_�r�_node_�
�_��t
, mp_�r�_node_�
�_�d
, mp_�r�_node_�
�_��
, mp_�r�_node_�
�_body
, mp_�r�_node_�
�_��
) {

1424 
START_BREAK_CONTINUE_BLOCK


1426 
u�t
 
t�_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1427 
u�t
 
��y_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1430 
bo�
 
�d_�_�ack
 = !
	`MP_PARSE_NODE_IS_SMALL_INT
(
�_�d
);

1431 i�(
�d_�_�ack
) {

1432 
	`comp�e_node
(
comp
, 
�_�d
);

1436 
	`comp�e_node
(
comp
, 
�_��t
);

1438 
	`EMIT_ARG
(
jump
, 
��y_�b�
);

1439 
	`EMIT_ARG
(
�b�_assign
, 
t�_�b�
);

1442 
	`EMIT
(
dup_t�
);

1443 
	`c_assign
(
comp
, 
�_v�
, 
ASSIGN_STORE
);

1446 
	`comp�e_node
(
comp
, 
�_body
);

1448 
	`EMIT_ARG
(
�b�_assign
, 
c�t�ue_�b�
);

1451 
	`comp�e_node
(
comp
, 
�_��
);

1452 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_INPLACE_ADD
);

1454 
	`EMIT_ARG
(
�b�_assign
, 
��y_�b�
);

1457 i�(
�d_�_�ack
) {

1458 
	`EMIT
(
dup_t�_two
);

1459 
	`EMIT
(
r�_two
);

1461 
	`EMIT
(
dup_t�
);

1462 
	`comp�e_node
(
comp
, 
�_�d
);

1464 
	`as��
(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�_��
));

1465 i�(
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�_��
) >= 0) {

1466 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_LESS
);

1468 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_MORE
);

1470 
	`EMIT_ARG
(
p�_jump_if
, 
�ue
, 
t�_�b�
);

1473 
END_BREAK_CONTINUE_BLOCK


1477 
u�t
 
�d_�b�
 = 0;

1478 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�_��
)) {

1480 
	`EMIT
(
p�_t�
);

1481 i�(
�d_�_�ack
) {

1482 
	`EMIT
(
p�_t�
);

1484 
	`comp�e_node
(
comp
, 
�_��
);

1485 
�d_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1486 
	`EMIT_ARG
(
jump
, 
�d_�b�
);

1487 
	`EMIT_ARG
(
adju�_�ack_size
, 1 + 
�d_�_�ack
);

1490 
	`EMIT_ARG
(
�b�_assign
, 
b�ak_�b�
);

1493 
	`EMIT
(
p�_t�
);

1496 i�(
�d_�_�ack
) {

1497 
	`EMIT
(
p�_t�
);

1500 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�_��
)) {

1501 
	`EMIT_ARG
(
�b�_assign
, 
�d_�b�
);

1503 
	}
}

1505 
	$comp�e_f�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1509 i��
	`MP_PARSE_NODE_IS_ID
(
�s
->
nodes
[0]�&& 
	`MP_PARSE_NODE_IS_STRUCT_KIND
�ns->nodes[1], 
PN_�om_ex�_n�m�
)) {

1510 
mp_�r�_node_�ru�_t
 *
�s_�
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

1511 i�(
	`MP_PARSE_NODE_IS_ID
(
�s_�
->
nodes
[0])

1512 && 
	`MP_PARSE_NODE_LEAF_ARG
(
�s_�
->
nodes
[0]�=�
MP_QSTR_�nge


1513 && 
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�s_�
->
nodes
[1]�=�
PN_�a��_��n
) {

1514 
mp_�r�_node_t
 
�_�nge_�gs
 = ((
mp_�r�_node_�ru�_t
 *)
�s_�
->
nodes
[1])->nodes[0];

1515 
mp_�r�_node_t
 *
�gs
;

1516 
size_t
 
n_�gs
 = 
	`mp_�r�_node_ex�a�_li�
(&
�_�nge_�gs
, 
PN_�gli�
, &
�gs
);

1517 
mp_�r�_node_t
 
�_�nge_��t
;

1518 
mp_�r�_node_t
 
�_�nge_�d
;

1519 
mp_�r�_node_t
 
�_�nge_��
;

1520 
bo�
 
�timize
 = 
�l�
;

1521 i�(1 <�
n_�gs
 &&�_args <= 3) {

1522 
�timize
 = 
�ue
;

1523 i�(
n_�gs
 == 1) {

1524 
�_�nge_��t
 = 
	`mp_�r�_node_�w_sm�l_�t
(0);

1525 
�_�nge_�d
 = 
�gs
[0];

1526 
�_�nge_��
 = 
	`mp_�r�_node_�w_sm�l_�t
(1);

1527 } i�(
n_�gs
 == 2) {

1528 
�_�nge_��t
 = 
�gs
[0];

1529 
�_�nge_�d
 = 
�gs
[1];

1530 
�_�nge_��
 = 
	`mp_�r�_node_�w_sm�l_�t
(1);

1532 
�_�nge_��t
 = 
�gs
[0];

1533 
�_�nge_�d
 = 
�gs
[1];

1534 
�_�nge_��
 = 
�gs
[2];

1536 i�(!
	`MP_PARSE_NODE_IS_SMALL_INT
(
�_�nge_��
)

1537 || 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�_�nge_��
) == 0) {

1538 
�timize
 = 
�l�
;

1542 i�(
�timize
 && 
	`MP_PARSE_NODE_IS_STRUCT
(
�_�nge_��t
)) {

1543 
k
 = 
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�_�nge_��t
);

1544 i�(
k
 =�
PN_�gli�_��
 || k =�
PN_�gli�_dbl_��
 || k =�
PN_�gum�t
) {

1545 
�timize
 = 
�l�
;

1548 i�(
�timize
 && 
	`MP_PARSE_NODE_IS_STRUCT
(
�_�nge_�d
)) {

1549 
k
 = 
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�_�nge_�d
);

1550 i�(
k
 =�
PN_�gli�_��
 || k =�
PN_�gli�_dbl_��
 || k =�
PN_�gum�t
) {

1551 
�timize
 = 
�l�
;

1555 i�(
�timize
) {

1556 
	`comp�e_f�_�mt_�timi�d_�nge
(
comp
, 
�s
->
nodes
[0], 
�_�nge_��t
, 
�_�nge_�d
, 
�_�nge_��
,�ns->nodes[2],�ns->nodes[3]);

1562 
START_BREAK_CONTINUE_BLOCK


1563 
comp
->
b�ak_�b�
 |�
MP_EMIT_BREAK_FROM_FOR
;

1565 
u�t
 
p�_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1567 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1568 
	`EMIT_ARG
(
g�_��
, 
�ue
);

1569 
	`EMIT_ARG
(
�b�_assign
, 
c�t�ue_�b�
);

1570 
	`EMIT_ARG
(
f�_��
, 
p�_�b�
);

1571 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_STORE
);

1572 
	`comp�e_node
(
comp
, 
�s
->
nodes
[2]);

1573 
	`EMIT_ARG
(
jump
, 
c�t�ue_�b�
);

1574 
	`EMIT_ARG
(
�b�_assign
, 
p�_�b�
);

1575 
	`EMIT
(
f�_��_�d
);

1578 
END_BREAK_CONTINUE_BLOCK


1580 
	`comp�e_node
(
comp
, 
�s
->
nodes
[3]);

1582 
	`EMIT_ARG
(
�b�_assign
, 
b�ak_�b�
);

1583 
	}
}

1585 
	$comp�e_�y_ex��
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_body
, 
n_ex��
, mp_�r�_node_�*
�_ex��s
, mp_�r�_node_�
�_��
) {

1587 
u�t
 
l1
 = 
	`comp_�xt_�b�
(
comp
);

1588 
u�t
 
suc�ss_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1590 
	`comp�e_����_ex��_�v�
(
comp
, 
l1
, 
MP_EMIT_SETUP_BLOCK_EXCEPT
);

1592 
	`comp�e_node
(
comp
, 
�_body
);

1593 
	`EMIT_ARG
(
p�_ex��_jump
, 
suc�ss_�b�
, 
�l�
);

1595 
	`EMIT_ARG
(
�b�_assign
, 
l1
);

1596 
	`EMIT
(
��t_ex��_h�d�r
);

1600 
u�t
 
l2
 = 
	`comp_�xt_�b�
(
comp
);

1602 
i
 = 0; i < 
n_ex��
; i++) {

1603 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_ex��s
[
i
], 
PN_�y_�mt_ex��
));

1604 
mp_�r�_node_�ru�_t
 *
�s_ex��
 = (mp_�r�_node_�ru�_�*)
�_ex��s
[
i
];

1606 
q�r
 
q�r_ex��i�_lo�l
 = 0;

1607 
u�t
 
�d_f��ly_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1608 #i�
MICROPY_PY_SYS_SETTRACE


1609 
	`EMIT_ARG
(
�t_sour�_l�e
, 
�s_ex��
->
sour�_l�e
);

1612 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s_ex��
->
nodes
[0])) {

1614 i�(
i
 + 1 !�
n_ex��
) {

1615 
	`comp�e_sy�ax_�r�
(
comp
, 
�_ex��s
[
i
], 
	`MP_ERROR_TEXT
("default 'except' must be�ast"));

1616 
	`comp�e_de���_ex��_�v�
(
comp
);

1621 
mp_�r�_node_t
 
�s_ex��i�_ex�
 = 
�s_ex��
->
nodes
[0];

1622 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�s_ex��i�_ex�
)) {

1623 
mp_�r�_node_�ru�_t
 *
�s3
 = (mp_�r�_node_�ru�_�*)
�s_ex��i�_ex�
;

1624 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s3
�=�
PN_�y_�mt_as_�me
) {

1626 
�s_ex��i�_ex�
 = 
�s3
->
nodes
[0];

1627 
q�r_ex��i�_lo�l
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s3
->
nodes
[1]);

1630 
	`EMIT
(
dup_t�
);

1631 
	`comp�e_node
(
comp
, 
�s_ex��i�_ex�
);

1632 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_EXCEPTION_MATCH
);

1633 
	`EMIT_ARG
(
p�_jump_if
, 
�l�
, 
�d_f��ly_�b�
);

1637 i�(
q�r_ex��i�_lo�l
 == 0) {

1638 
	`EMIT
(
p�_t�
);

1640 
	`comp�e_��e_id
(
comp
, 
q�r_ex��i�_lo�l
);

1652 
u�t
 
l3
 = 0;

1653 i�(
q�r_ex��i�_lo�l
 != 0) {

1654 
l3
 = 
	`comp_�xt_�b�
(
comp
);

1655 
	`comp�e_����_ex��_�v�
(
comp
, 
l3
, 
MP_EMIT_SETUP_BLOCK_FINALLY
);

1657 
	`comp�e_node
(
comp
, 
�s_ex��
->
nodes
[1]);

1658 i�(
q�r_ex��i�_lo�l
 != 0) {

1659 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1660 
	`EMIT_ARG
(
�b�_assign
, 
l3
);

1661 
	`EMIT_ARG
(
adju�_�ack_size
, 1);

1662 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1663 
	`comp�e_��e_id
(
comp
, 
q�r_ex��i�_lo�l
);

1664 
	`comp�e_d��e_id
(
comp
, 
q�r_ex��i�_lo�l
);

1665 
	`EMIT_ARG
(
adju�_�ack_size
, -1);

1666 
	`comp�e_de���_ex��_�v�
(
comp
);

1669 
	`EMIT_ARG
(
p�_ex��_jump
, 
l2
, 
�ue
);

1670 
	`EMIT_ARG
(
�b�_assign
, 
�d_f��ly_�b�
);

1671 
	`EMIT_ARG
(
adju�_�ack_size
, 1);

1674 
	`comp�e_de���_ex��_�v�
(
comp
);

1675 
	`EMIT
(
�d_ex��_h�d�r
);

1677 
	`EMIT_ARG
(
�b�_assign
, 
suc�ss_�b�
);

1678 
	`comp�e_node
(
comp
, 
�_��
);

1679 
	`EMIT_ARG
(
�b�_assign
, 
l2
);

1680 
	}
}

1682 
	$comp�e_�y_f��ly
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_body
, 
n_ex��
, mp_�r�_node_�*
�_ex��
, mp_�r�_node_�
�_��
, mp_�r�_node_�
�_f��ly
) {

1683 
u�t
 
l_f��ly_block
 = 
	`comp_�xt_�b�
(
comp
);

1685 
	`comp�e_����_ex��_�v�
(
comp
, 
l_f��ly_block
, 
MP_EMIT_SETUP_BLOCK_FINALLY
);

1687 i�(
n_ex��
 == 0) {

1688 
	`as��
(
	`MP_PARSE_NODE_IS_NULL
(
�_��
));

1689 
	`EMIT_ARG
(
adju�_�ack_size
, 3);

1690 
	`comp�e_node
(
comp
, 
�_body
);

1691 
	`EMIT_ARG
(
adju�_�ack_size
, -3);

1693 
	`comp�e_�y_ex��
(
comp
, 
�_body
, 
n_ex��
, 
�_ex��
, 
�_��
);

1698 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1703 
	`EMIT_ARG
(
�b�_assign
, 
l_f��ly_block
);

1704 
	`EMIT_ARG
(
adju�_�ack_size
, 1);

1705 
	`comp�e_node
(
comp
, 
�_f��ly
);

1706 
	`EMIT_ARG
(
adju�_�ack_size
, -1);

1708 
	`comp�e_de���_ex��_�v�
(
comp
);

1709 
	}
}

1711 
	$comp�e_�y_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1712 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1]));

1714 
mp_�r�_node_�ru�_t
 *
�s2
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

1715 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
�=�
PN_�y_�mt_f��ly
) {

1717 
	`comp�e_�y_f��ly
(
comp
, 
�s
->
nodes
[0], 0, 
NULL
, 
MP_PARSE_NODE_NULL
, 
�s2
->nodes[0]);

1718 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
�=�
PN_�y_�mt_ex��_�d_m�e
) {

1720 
mp_�r�_node_t
 *
�_ex��s
;

1721 
size_t
 
n_ex��
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s2
->
nodes
[0], 
PN_�y_�mt_ex��_li�
, &
�_ex��s
);

1722 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s2
->
nodes
[2])) {

1724 
	`comp�e_�y_ex��
(
comp
, 
�s
->
nodes
[0], 
n_ex��
, 
�_ex��s
, 
�s2
->nodes[1]);

1727 
	`comp�e_�y_f��ly
(
comp
, 
�s
->
nodes
[0], 
n_ex��
, 
�_ex��s
, 
�s2
->nodes[1], ((
mp_�r�_node_�ru�_t
 *)pns2->nodes[2])->nodes[0]);

1731 
mp_�r�_node_t
 *
�_ex��s
;

1732 
size_t
 
n_ex��
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[1], 
PN_�y_�mt_ex��_li�
, &
�_ex��s
);

1733 
	`comp�e_�y_ex��
(
comp
, 
�s
->
nodes
[0], 
n_ex��
, 
�_ex��s
, 
MP_PARSE_NODE_NULL
);

1736 
	}
}

1738 
	$comp�e_w�h_�mt_h��r
(
comp��_t
 *
comp
, 
size_t
 
n
, 
mp_�r�_node_t
 *
nodes
, mp_�r�_node_�
body
) {

1739 i�(
n
 == 0) {

1741 
	`comp�e_node
(
comp
, 
body
);

1743 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

1744 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
nodes
[0], 
PN_w�h_�em
)) {

1746 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
nodes
[0];

1747 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1748 
	`comp�e_����_ex��_�v�
(
comp
, 
l_�d
, 
MP_EMIT_SETUP_BLOCK_WITH
);

1749 
	`c_assign
(
comp
, 
�s
->
nodes
[1], 
ASSIGN_STORE
);

1752 
	`comp�e_node
(
comp
, 
nodes
[0]);

1753 
	`comp�e_����_ex��_�v�
(
comp
, 
l_�d
, 
MP_EMIT_SETUP_BLOCK_WITH
);

1754 
	`EMIT
(
p�_t�
);

1757 
	`comp�e_w�h_�mt_h��r
(
comp
, 
n
 - 1, 
nodes
 + 1, 
body
);

1759 
	`EMIT_ARG
(
w�h_��nup
, 
l_�d
);

1760 
	`��rve_�b�s_f�_�tive
(
comp
, 3);

1761 
	`comp�e_de���_ex��_�v�
(
comp
);

1763 
	}
}

1765 
	$comp�e_w�h_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1767 
mp_�r�_node_t
 *
nodes
;

1768 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[0], 
PN_w�h_�mt_li�
, &nodes);

1769 
	`as��
(
n
 > 0);

1772 
	`comp�e_w�h_�mt_h��r
(
comp
, 
n
, 
nodes
, 
�s
->nodes[1]);

1773 
	}
}

1775 
	$comp�e_y�ld_�om
(
comp��_t
 *
comp
) {

1776 
	`EMIT_ARG
(
g�_��
, 
�l�
);

1777 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1778 
	`EMIT_ARG
(
y�ld
, 
MP_EMIT_YIELD_FROM
);

1779 
	`��rve_�b�s_f�_�tive
(
comp
, 3);

1780 
	}
}

1782 #i�
MICROPY_PY_ASYNC_AWAIT


1783 
	$comp�e_awa�_obje�_m�hod
(
comp��_t
 *
comp
, 
q�r
 
m�hod
) {

1784 
	`EMIT_ARG
(
l�d_m�hod
, 
m�hod
, 
�l�
);

1785 
	`EMIT_ARG
(
��_m�hod
, 0, 0, 0);

1786 
	`comp�e_y�ld_�om
(
comp
);

1787 
	}
}

1789 
	$comp�e_async_f�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1791 
u�t
 
wh�e_��_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1792 
u�t
 
�y_ex��i�_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1793 
u�t
 
�y_��_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1794 
u�t
 
�y_f��ly_�b�
 = 
	`comp_�xt_�b�
(
comp
);

1799 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

1801 
	`EMIT_ARG
(
l�d_m�hod
, 
MP_QSTR___a��__
, 
�l�
);

1803 
	`EMIT_ARG
(
��_m�hod
, 0, 0, 0);

1806 
START_BREAK_CONTINUE_BLOCK


1808 
	`EMIT_ARG
(
�b�_assign
, 
c�t�ue_�b�
);

1810 
	`comp�e_����_ex��_�v�
(
comp
, 
�y_ex��i�_�b�
, 
MP_EMIT_SETUP_BLOCK_EXCEPT
);

1812 
	`EMIT
(
dup_t�
);

1816 
	`comp�e_awa�_obje�_m�hod
(
comp
, 
MP_QSTR___�ext__
);

1819 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_STORE
);

1821 
	`EMIT_ARG
(
p�_ex��_jump
, 
�y_��_�b�
, 
�l�
);

1823 
	`EMIT_ARG
(
�b�_assign
, 
�y_ex��i�_�b�
);

1824 
	`EMIT
(
��t_ex��_h�d�r
);

1825 
	`EMIT
(
dup_t�
);

1826 
	`EMIT_LOAD_GLOBAL
(
MP_QSTR_St�AsyncI��ti�
);

1827 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_EXCEPTION_MATCH
);

1828 
	`EMIT_ARG
(
p�_jump_if
, 
�l�
, 
�y_f��ly_�b�
);

1829 
	`EMIT
(
p�_t�
);

1830 
	`EMIT_ARG
(
p�_ex��_jump
, 
wh�e_��_�b�
, 
�ue
);

1832 
	`EMIT_ARG
(
�b�_assign
, 
�y_f��ly_�b�
);

1833 
	`EMIT_ARG
(
adju�_�ack_size
, 1);

1834 
	`comp�e_de���_ex��_�v�
(
comp
);

1835 
	`EMIT
(
�d_ex��_h�d�r
);

1839 
	`EMIT_ARG
(
�b�_assign
, 
�y_��_�b�
);

1840 
	`comp�e_node
(
comp
, 
�s
->
nodes
[2]);

1842 
	`EMIT_ARG
(
jump
, 
c�t�ue_�b�
);

1844 
END_BREAK_CONTINUE_BLOCK


1846 
	`EMIT_ARG
(
�b�_assign
, 
wh�e_��_�b�
);

1847 
	`comp�e_node
(
comp
, 
�s
->
nodes
[3]);

1849 
	`EMIT_ARG
(
�b�_assign
, 
b�ak_�b�
);

1852 
	`EMIT
(
p�_t�
);

1854 
	}
}

1856 
	$comp�e_async_w�h_�mt_h��r
(
comp��_t
 *
comp
, 
size_t
 
n
, 
mp_�r�_node_t
 *
nodes
, mp_�r�_node_�
body
) {

1857 i�(
n
 == 0) {

1859 
	`comp�e_node
(
comp
, 
body
);

1861 
u�t
 
l_f��ly_block
 = 
	`comp_�xt_�b�
(
comp
);

1862 
u�t
 
l_�x�_no_exc
 = 
	`comp_�xt_�b�
(
comp
);

1863 
u�t
 
l_�t_unw�d_jump
 = 
	`comp_�xt_�b�
(
comp
);

1864 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

1866 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
nodes
[0], 
PN_w�h_�em
)) {

1868 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
nodes
[0];

1869 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

1870 
	`EMIT
(
dup_t�
);

1871 
	`comp�e_awa�_obje�_m�hod
(
comp
, 
MP_QSTR___���__
);

1872 
	`c_assign
(
comp
, 
�s
->
nodes
[1], 
ASSIGN_STORE
);

1875 
	`comp�e_node
(
comp
, 
nodes
[0]);

1876 
	`EMIT
(
dup_t�
);

1877 
	`comp�e_awa�_obje�_m�hod
(
comp
, 
MP_QSTR___���__
);

1878 
	`EMIT
(
p�_t�
);

1886 
	`comp�e_����_ex��_�v�
(
comp
, 
l_f��ly_block
, 
MP_EMIT_SETUP_BLOCK_FINALLY
);

1889 
	`EMIT_ARG
(
adju�_�ack_size
, 3);

1890 
	`comp�e_async_w�h_�mt_h��r
(
comp
, 
n
 - 1, 
nodes
 + 1, 
body
);

1891 
	`EMIT_ARG
(
adju�_�ack_size
, -3);

1902 
	`EMIT_ARG
(
async_w�h_�tup_f��ly
, 
l_�x�_no_exc
, 
l_f��ly_block
, 
l_�t_unw�d_jump
);

1906 
	`EMIT
(
dup_t�
);

1907 
	`EMIT
(
r�_th�e
);

1908 
	`EMIT
(
r�_two
);

1909 
	`EMIT_ARG
(
l�d_m�hod
, 
MP_QSTR___�x�__
, 
�l�
);

1910 
	`EMIT
(
r�_th�e
);

1911 
	`EMIT
(
r�_th�e
);

1912 
	`EMIT
(
dup_t�
);

1913 #i�
MICROPY_CPYTHON_COMPAT


1914 
	`EMIT_ARG
(
��
, 
MP_QSTR___�ass__
, 
MP_EMIT_ATTR_LOAD
);

1916 
	`comp�e_l�d_id
(
comp
, 
MP_QSTR_ty�
);

1917 
	`EMIT
(
r�_two
);

1918 
	`EMIT_ARG
(
��_fun�i�
, 1, 0, 0);

1920 
	`EMIT
(
r�_two
);

1921 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1923 
	`EMIT_ARG
(
��_m�hod
, 3, 0, 0);

1924 
	`comp�e_y�ld_�om
(
comp
);

1925 
	`EMIT_ARG
(
p�_jump_if
, 
�l�
, 
l_�d
);

1926 
	`EMIT
(
p�_t�
);

1927 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1929 
	`EMIT_ARG
(
jump
, 
l_�d
);

1930 
	`EMIT_ARG
(
adju�_�ack_size
, 2);

1934 
	`EMIT_ARG
(
�b�_assign
, 
l_�t_unw�d_jump
);

1935 
	`EMIT
(
r�_th�e
);

1936 
	`EMIT
(
r�_th�e
);

1937 
	`EMIT_ARG
(
�b�_assign
, 
l_�x�_no_exc
);

1940 
	`EMIT_ARG
(
l�d_m�hod
, 
MP_QSTR___�x�__
, 
�l�
);

1941 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

1942 
	`EMIT
(
dup_t�
);

1943 
	`EMIT
(
dup_t�
);

1944 
	`EMIT_ARG
(
��_m�hod
, 3, 0, 0);

1945 
	`comp�e_y�ld_�om
(
comp
);

1946 
	`EMIT
(
p�_t�
);

1948 
	`EMIT_ARG
(
adju�_�ack_size
, -1);

1955 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

1956 
	`comp�e_de���_ex��_�v�
(
comp
);

1958 
	}
}

1960 
	$comp�e_async_w�h_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1962 
mp_�r�_node_t
 *
nodes
;

1963 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[0], 
PN_w�h_�mt_li�
, &nodes);

1964 
	`as��
(
n
 > 0);

1967 
	`comp�e_async_w�h_�mt_h��r
(
comp
, 
n
, 
nodes
, 
�s
->nodes[1]);

1968 
	}
}

1970 
	$comp�e_async_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

1971 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[0]));

1972 
mp_�r�_node_�ru�_t
 *
�s0
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[0];

1973 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s0
�=�
PN_funcdef
) {

1975 
	`comp�e_funcdef
(
comp
, 
�s0
);

1976 
sc�e_t
 *
fsc�e
 = (sc�e_�*)
�s0
->
nodes
[4];

1977 
fsc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_GENERATOR
;

1980 
sc�e_�ags
 = 
comp
->
sc�e_cur
->scope_flags;

1981 i�(!(
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1982 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s0
,

1983 
	`MP_ERROR_TEXT
("async for/with outside�sync function"));

1987 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s0
�=�
PN_f�_�mt
) {

1989 
	`comp�e_async_f�_�mt
(
comp
, 
�s0
);

1992 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s0
�=�
PN_w�h_�mt
);

1993 
	`comp�e_async_w�h_�mt
(
comp
, 
�s0
);

1996 
	}
}

1999 
	$comp�e_ex�_�mt
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2000 
mp_�r�_node_t
 
�_rhs
 = 
�s
->
nodes
[1];

2001 i�(
	`MP_PARSE_NODE_IS_NULL
(
�_rhs
)) {

2002 i�(
comp
->
is_��
 && comp->
sc�e_cur
->
k�d
 =�
SCOPE_MODULE
) {

2004 
	`comp�e_l�d_id
(
comp
, 
MP_QSTR___��_��t__
);

2005 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2006 
	`EMIT_ARG
(
��_fun�i�
, 1, 0, 0);

2007 
	`EMIT
(
p�_t�
);

2011 i�((
	`MP_PARSE_NODE_IS_LEAF
(
�s
->
nodes
[0]�&& !
	`MP_PARSE_NODE_IS_ID
(pns->nodes[0]))

2012 || 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_cڡ_obje�
)) {

2015 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2016 
	`EMIT
(
p�_t�
);

2019 } i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�_rhs
)) {

2020 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�_rhs
;

2021 
k�d
 = 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
);

2022 i�(
k�d
 =�
PN_��ssign
) {

2024 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s1
->
nodes
[1])) {

2027 i�(
comp
->
sc�e_cur
->
k�d
 =�
SCOPE_FUNCTION
) {

2028 i�(
	`MP_PARSE_NODE_IS_ID
(
�s
->
nodes
[0])) {

2029 
q�r
 
lhs
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2030 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
lhs
, 
ID_INFO_KIND_LOCAL
);

2035 
�_rhs
 = 
�s1
->
nodes
[1];

2036 
�a�_assign
;

2038 } i�(
k�d
 =�
PN_ex�_�mt_augassign
) {

2039 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_AUG_LOAD
);

2040 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[1]);

2041 
	`as��
(
	`MP_PARSE_NODE_IS_TOKEN
(
�s1
->
nodes
[0]));

2042 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s1
->
nodes
[0]);

2043 
mp_b��y_�_t
 
�
 = 
MP_BINARY_OP_INPLACE_OR
 + (
tok
 - 
MP_TOKEN_DEL_PIPE_EQUAL
);

2044 
	`EMIT_ARG
(
b��y_�
, 
�
);

2045 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_AUG_STORE
);

2046 } i�(
k�d
 =�
PN_ex�_�mt_assign_li�
) {

2047 
rhs
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s1
) - 1;

2048 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[
rhs
]);

2050 i�(
rhs
 > 0) {

2051 
	`EMIT
(
dup_t�
);

2053 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_STORE
);

2054 
i
 = 0; i < 
rhs
; i++) {

2055 i�(
i
 + 1 < 
rhs
) {

2056 
	`EMIT
(
dup_t�
);

2058 
	`c_assign
(
comp
, 
�s1
->
nodes
[
i
], 
ASSIGN_STORE
);

2061 
�a�_assign
:

2062 #i�
MICROPY_COMP_DOUBLE_TUPLE_ASSIGN


2063 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_rhs
, 
PN_��li�_��_ex�
)

2064 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_��_ex�
)) {

2065 
mp_�r�_node_�ru�_t
 *
�s0
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[0];

2066 
�s1
 = (
mp_�r�_node_�ru�_t
 *)
�_rhs
;

2067 
u�t32_t
 
n_�s0
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s0
);

2072 i�(
n_�s0
 =�
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s1
)

2073 && (
n_�s0
 == 2

2074 #i�
MICROPY_COMP_TRIPLE_TUPLE_ASSIGN


2075 || 
n_�s0
 == 3

2078 && !
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s0
->
nodes
[0], 
PN_��_ex�
)

2079 && !
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s0
->
nodes
[1], 
PN_��_ex�
)

2080 #i�
MICROPY_COMP_TRIPLE_TUPLE_ASSIGN


2081 && (
n_�s0
 =�2 || !
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s0
->
nodes
[2], 
PN_��_ex�
))

2085 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[0]);

2086 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[1]);

2087 #i�
MICROPY_COMP_TRIPLE_TUPLE_ASSIGN


2088 i�(
n_�s0
 == 3) {

2089 
	`comp�e_node
(
comp
, 
�s1
->
nodes
[2]);

2090 
	`EMIT
(
r�_th�e
);

2093 
	`EMIT
(
r�_two
);

2094 
	`c_assign
(
comp
, 
�s0
->
nodes
[0], 
ASSIGN_STORE
);

2095 
	`c_assign
(
comp
, 
�s0
->
nodes
[1], 
ASSIGN_STORE
);

2096 #i�
MICROPY_COMP_TRIPLE_TUPLE_ASSIGN


2097 i�(
n_�s0
 == 3) {

2098 
	`c_assign
(
comp
, 
�s0
->
nodes
[2], 
ASSIGN_STORE
);

2106 
	`comp�e_node
(
comp
, 
�_rhs
);

2107 
	`c_assign
(
comp
, 
�s
->
nodes
[0], 
ASSIGN_STORE
);

2110 
�a�_assign
;

2112 
	}
}

2114 
	$comp�e_��_if_ex�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2115 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[1], 
PN_��_if_��
));

2116 
mp_�r�_node_�ru�_t
 *
�s_��_if_��
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

2118 
u�t
 
l_�
 = 
	`comp_�xt_�b�
(
comp
);

2119 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

2120 
	`c_if_c�d
(
comp
, 
�s_��_if_��
->
nodes
[0], 
�l�
, 
l_�
);

2121 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2122 
	`EMIT_ARG
(
jump
, 
l_�d
);

2123 
	`EMIT_ARG
(
�b�_assign
, 
l_�
);

2124 
	`EMIT_ARG
(
adju�_�ack_size
, -1);

2125 
	`comp�e_node
(
comp
, 
�s_��_if_��
->
nodes
[1]);

2126 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

2127 
	}
}

2129 
	$comp�e_�mbdef
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2130 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

2132 
sc�e_t
 *
s
 = 
	`sc�e_�w_�d_l�k
(
comp
, 
SCOPE_LAMBDA
, (
mp_�r�_node_t
)
�s
, comp->
sc�e_cur
->
em�_�ti�s
);

2134 
�s
->
nodes
[2] = (
mp_�r�_node_t
)
s
;

2138 
sc�e_t
 *
this_sc�e
 = (sc�e_�*)
�s
->
nodes
[2];

2141 
	`comp�e_funcdef_�mbdef
(
comp
, 
this_sc�e
, 
�s
->
nodes
[0], 
PN_v��g�i�
);

2142 
	}
}

2144 #i�
MICROPY_PY_ASSIGN_EXPR


2145 
	$comp�e_�medex�_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_�me
, mp_�r�_node_�
�_ex�
) {

2146 i�(!
	`MP_PARSE_NODE_IS_ID
(
�_�me
)) {

2147 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�_�me
, 
	`MP_ERROR_TEXT
("can't�ssign�o�xpression"));

2149 
	`comp�e_node
(
comp
, 
�_ex�
);

2150 
	`EMIT
(
dup_t�
);

2152 
q�r
 
�rg�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�_�me
);

2157 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
 && 
	`SCOPE_IS_COMP_LIKE
(comp->
sc�e_cur
->
k�d
)) {

2158 
id_�fo_t
 *
id_�fo_���
 = 
	`mp_em�_comm�_g�_id_f�_modifi�ti�
(
comp
->
sc�e_cur
->
���
, 
�rg�
);

2159 i�(
id_�fo_���
->
k�d
 =�
ID_INFO_KIND_GLOBAL_EXPLICIT
) {

2160 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
�rg�
, 
ID_INFO_KIND_GLOBAL_EXPLICIT
);

2162 
id_�fo_t
 *
id_�fo
 = 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
�rg�
, 
ID_INFO_KIND_UNDECIDED
);

2163 
bo�
 
is_glob�
 = 
comp
->
sc�e_cur
->
���
->��� =�
NULL
;

2164 i�(!
is_glob�
 && 
id_�fo
->
k�d
 =�
ID_INFO_KIND_GLOBAL_IMPLICIT
) {

2167 
id_�fo
->
k�d
 = 
ID_INFO_KIND_UNDECIDED
;

2169 
	`comp�e_de��e_glob�_�_n�lo�l
(
comp
, 
�_�me
, 
id_�fo
, 
is_glob�
);

2174 
	`comp�e_��e_id
(
comp
, 
�rg�
);

2175 
	}
}

2177 
	$comp�e_�medex�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2178 
	`comp�e_�medex�_h��r
(
comp
, 
�s
->
nodes
[0],�ns->nodes[1]);

2179 
	}
}

2182 
	$comp�e_�_�d_��
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2183 
bo�
 
c�d
 = 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_�_��
;

2184 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

2185 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

2186 
i
 = 0; i < 
n
; i += 1) {

2187 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
]);

2188 i�(
i
 + 1 < 
n
) {

2189 
	`EMIT_ARG
(
jump_if_�_p�
, 
c�d
, 
l_�d
);

2192 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

2193 
	}
}

2195 
	$comp�e_n�_��_2
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2196 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2197 
	`EMIT_ARG
(
u�ry_�
, 
MP_UNARY_OP_NOT
);

2198 
	}
}

2200 
	$comp�e_com�ris�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2201 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

2202 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2203 
bo�
 
mu�i
 = (
num_nodes
 > 3);

2204 
u�t
 
l_�
 = 0;

2205 i�(
mu�i
) {

2206 
l_�
 = 
	`comp_�xt_�b�
(
comp
);

2208 
i
 = 1; i + 1 < 
num_nodes
; i += 2) {

2209 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
 + 1]);

2210 i�(
i
 + 2 < 
num_nodes
) {

2211 
	`EMIT
(
dup_t�
);

2212 
	`EMIT
(
r�_th�e
);

2214 i�(
	`MP_PARSE_NODE_IS_TOKEN
(
�s
->
nodes
[
i
])) {

2215 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[
i
]);

2216 
mp_b��y_�_t
 
�
;

2217 i�(
tok
 =�
MP_TOKEN_KW_IN
) {

2218 
�
 = 
MP_BINARY_OP_IN
;

2220 
�
 = 
MP_BINARY_OP_LESS
 + (
tok
 - 
MP_TOKEN_OP_LESS
);

2222 
	`EMIT_ARG
(
b��y_�
, 
�
);

2224 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[
i
]));

2225 
mp_�r�_node_�ru�_t
 *
�s2
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[
i
];

2226 
k�d
 = 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
);

2227 i�(
k�d
 =�
PN_comp_�_n�_�
) {

2228 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_NOT_IN
);

2230 
	`as��
(
k�d
 =�
PN_comp_�_is
);

2231 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s2
->
nodes
[0])) {

2232 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_IS
);

2234 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_IS_NOT
);

2238 i�(
i
 + 2 < 
num_nodes
) {

2239 
	`EMIT_ARG
(
jump_if_�_p�
, 
�l�
, 
l_�
);

2242 i�(
mu�i
) {

2243 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

2244 
	`EMIT_ARG
(
jump
, 
l_�d
);

2245 
	`EMIT_ARG
(
�b�_assign
, 
l_�
);

2246 
	`EMIT_ARG
(
adju�_�ack_size
, 1);

2247 
	`EMIT
(
r�_two
);

2248 
	`EMIT
(
p�_t�
);

2249 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

2251 
	}
}

2253 
	$comp�e_��_ex�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2254 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("*x must be�ssignment�arget"));

2255 
	}
}

2257 
	$comp�e_b��y_�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2258 
	`MP_STATIC_ASSERT
(
MP_BINARY_OP_OR
 + 
PN_x�_ex�
 - 
PN_ex�
 =�
MP_BINARY_OP_XOR
);

2259 
	`MP_STATIC_ASSERT
(
MP_BINARY_OP_OR
 + 
PN_�d_ex�
 - 
PN_ex�
 =�
MP_BINARY_OP_AND
);

2260 
mp_b��y_�_t
 
b��y_�
 = 
MP_BINARY_OP_OR
 + 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�- 
PN_ex�
;

2261 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

2262 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2263 
i
 = 1; i < 
num_nodes
; ++i) {

2264 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
]);

2265 
	`EMIT_ARG
(
b��y_�
, binary_op);

2267 
	}
}

2269 
	$comp�e_�rm
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2270 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

2271 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2272 
i
 = 1; i + 1 < 
num_nodes
; i += 2) {

2273 
	`comp�e_node
(
comp
, 
�s
->
nodes
[
i
 + 1]);

2274 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[
i
]);

2275 
mp_b��y_�_t
 
�
 = 
MP_BINARY_OP_LSHIFT
 + (
tok
 - 
MP_TOKEN_OP_DBL_LESS
);

2276 
	`EMIT_ARG
(
b��y_�
, 
�
);

2278 
	}
}

2280 
	$comp�e_���_2
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2281 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

2282 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2283 
mp_u�ry_�_t
 
�
;

2284 i�(
tok
 =�
MP_TOKEN_OP_TILDE
) {

2285 
�
 = 
MP_UNARY_OP_INVERT
;

2287 
	`as��
(
tok
 =�
MP_TOKEN_OP_PLUS
 ||�ok =�
MP_TOKEN_OP_MINUS
);

2288 
�
 = 
MP_UNARY_OP_POSITIVE
 + (
tok
 - 
MP_TOKEN_OP_PLUS
);

2290 
	`EMIT_ARG
(
u�ry_�
, 
�
);

2291 
	}
}

2293 
	$comp�e_�om_ex�_n�m�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2295 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2298 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[1])) {

2303 
size_t
 
num_�a�
 = 1;

2304 
mp_�r�_node_�ru�_t
 **
�s_�a�
 = (mp_�r�_node_�ru�_�**)&
�s
->
nodes
[1];

2305 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[0]�=�
PN_�om_ex�_�a��s
) {

2306 
num_�a�
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s_�a�
[0]);

2307 
�s_�a�
 = (
mp_�r�_node_�ru�_t
 **)&�s_�a�[0]->
nodes
[0];

2311 
size_t
 
i
 = 0;

2314 i�(
comp
->
sc�e_cur
->
k�d
 =�
SCOPE_FUNCTION


2315 && 
	`MP_PARSE_NODE_IS_ID
(
�s
->
nodes
[0])

2316 && 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]�=�
MP_QSTR_su�r


2317 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[0]�=�
PN_�a��_��n


2318 && 
	`MP_PARSE_NODE_IS_NULL
(
�s_�a�
[0]->
nodes
[0])) {

2322 
	`comp�e_l�d_id
(
comp
, 
MP_QSTR___�ass__
);

2325 
bo�
 
found
 = 
�l�
;

2326 
id_�fo_t
 *
id
 = &
comp
->
sc�e_cur
->
id_�fo
[0];

2327 
size_t
 
n
 = 
comp
->
sc�e_cur
->
id_�fo_�n
;� > 0; --n, ++
id
) {

2328 i�(
id
->
�ags
 & 
ID_FLAG_IS_PARAM
) {

2330 
	`comp�e_l�d_id
(
comp
, 
id
->
q�
);

2331 
found
 = 
�ue
;

2335 i�(!
found
) {

2336 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s_�a�
[0],

2337 
	`MP_ERROR_TEXT
("super() can't find self"));

2341 i�(
num_�a�
 >= 3

2342 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[1]�=�
PN_�a��_�riod


2343 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[2]�=�
PN_�a��_��n
) {

2345 
mp_�r�_node_�ru�_t
 *
�s_�riod
 = 
�s_�a�
[1];

2346 
mp_�r�_node_�ru�_t
 *
�s_��n
 = 
�s_�a�
[2];

2347 
	`EMIT_ARG
(
l�d_m�hod
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s_�riod
->
nodes
[0]), 
�ue
);

2348 
	`comp�e_�a��_��n_h��r
(
comp
, 
�s_��n
->
nodes
[0], 
�ue
, 0);

2349 
i
 = 3;

2352 
	`EMIT_ARG
(
��_fun�i�
, 2, 0, 0);

2353 
i
 = 1;

2356 #i�
MICROPY_COMP_CONST_LITERAL
 && 
MICROPY_PY_COLLECTIONS_ORDEREDDICT


2358 } i�(
	`MP_PARSE_NODE_IS_ID
(
�s
->
nodes
[0])

2359 && 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]�=�
MP_QSTR_Ord�edDi�


2360 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[0]�=�
PN_�a��_��n


2361 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s_�a�
[0]->
nodes
[0], 
PN_�om_b��
)) {

2364 
	`EMIT_ARG
(
��_fun�i�
, 0, 0, 0);

2365 
mp_�r�_node_�ru�_t
 *
�s_di�
 = (mp_�r�_node_�ru�_�*)
�s_�a�
[0]->
nodes
[0];

2366 
	`comp�e_�om_b��_h��r
(
comp
, 
�s_di�
, 
�l�
);

2367 
i
 = 1;

2372 ; 
i
 < 
num_�a�
; i++) {

2373 i�(
i
 + 1 < 
num_�a�


2374 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[
i
]�=�
PN_�a��_�riod


2375 && 
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�a�
[
i
 + 1]�=�
PN_�a��_��n
) {

2377 
mp_�r�_node_�ru�_t
 *
�s_�riod
 = 
�s_�a�
[
i
];

2378 
mp_�r�_node_�ru�_t
 *
�s_��n
 = 
�s_�a�
[
i
 + 1];

2379 
	`EMIT_ARG
(
l�d_m�hod
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s_�riod
->
nodes
[0]), 
�l�
);

2380 
	`comp�e_�a��_��n_h��r
(
comp
, 
�s_��n
->
nodes
[0], 
�ue
, 0);

2381 
i
 += 1;

2384 
	`comp�e_node
(
comp
, (
mp_�r�_node_t
)
�s_�a�
[
i
]);

2387 
	}
}

2389 
	$comp�e_pow�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2390 
	`comp�e_g��ic_�l_nodes
(
comp
, 
�s
);

2391 
	`EMIT_ARG
(
b��y_�
, 
MP_BINARY_OP_POWER
);

2392 
	}
}

2394 
	$comp�e_�a��_��n_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_�gli�
, 
bo�
 
is_m�hod_��
, 
n_pos�iڮ_ex�a
) {

2398 
mp_�r�_node_t
 *
�gs
;

2399 
size_t
 
n_�gs
 = 
	`mp_�r�_node_ex�a�_li�
(&
�_�gli�
, 
PN_�gli�
, &
�gs
);

2405 
n_pos�iڮ
 = 
n_pos�iڮ_ex�a
;

2406 
u�t
 
n_keyw�d
 = 0;

2407 
u�t
 
��_�ags
 = 0;

2408 
mp_u�t_t
 
��_�gs
 = 0;

2409 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

2410 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�gs
[
i
])) {

2411 
mp_�r�_node_�ru�_t
 *
�s_�g
 = (mp_�r�_node_�ru�_�*)
�gs
[
i
];

2412 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�g
�=�
PN_�gli�_��
) {

2413 i�(
��_�ags
 & 
MP_EMIT_STAR_FLAG_DOUBLE
) {

2414 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s_�g
, 
	`MP_ERROR_TEXT
("*�rg�fter **"));

2417 #i�
MICROPY_DYNAMIC_COMPILER


2418 i�(
i
 >�(
size_t
)
mp_dy�mic_comp��
.
sm�l_�t_b�s
 - 1)

2420 i�(
i
 >�
MP_SMALL_INT_BITS
 - 1)

2425 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s_�g
, 
	`MP_ERROR_TEXT
("too many�rgs"));

2428 
��_�ags
 |�
MP_EMIT_STAR_FLAG_SINGLE
;

2429 
��_�gs
 |�(
mp_u�t_t
)1 << 
i
;

2430 
	`comp�e_node
(
comp
, 
�s_�g
->
nodes
[0]);

2431 
n_pos�iڮ
++;

2432 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�g
�=�
PN_�gli�_dbl_��
) {

2433 
��_�ags
 |�
MP_EMIT_STAR_FLAG_DOUBLE
;

2435 
	`EMIT
(
l�d_nu�
);

2436 
	`comp�e_node
(
comp
, 
�s_�g
->
nodes
[0]);

2437 
n_keyw�d
++;

2438 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s_�g
�=�
PN_�gum�t
) {

2439 #i�
MICROPY_PY_ASSIGN_EXPR


2440 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s_�g
->
nodes
[1], 
PN_�gum�t_3
)) {

2441 
	`comp�e_�medex�_h��r
(
comp
, 
�s_�g
->
nodes
[0], ((
mp_�r�_node_�ru�_t
 *)pns_arg->nodes[1])->nodes[0]);

2442 
n_pos�iڮ
++;

2445 i�(!
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s_�g
->
nodes
[1], 
PN_comp_f�
)) {

2446 i�(!
	`MP_PARSE_NODE_IS_ID
(
�s_�g
->
nodes
[0])) {

2447 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s_�g
, 
	`MP_ERROR_TEXT
("LHS of keyword�rg must be�n id"));

2450 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s_�g
->
nodes
[0]));

2451 
	`comp�e_node
(
comp
, 
�s_�g
->
nodes
[1]);

2452 
n_keyw�d
++;

2454 
	`comp�e_com�eh�si�
(
comp
, 
�s_�g
, 
SCOPE_GEN_EXPR
);

2455 
n_pos�iڮ
++;

2458 
n�m�_�gum�t
;

2461 
n�m�_�gum�t
:

2462 i�(
��_�ags
 & 
MP_EMIT_STAR_FLAG_DOUBLE
) {

2463 
	`comp�e_sy�ax_�r�
(
comp
, 
�gs
[
i
], 
	`MP_ERROR_TEXT
("positional�rg�fter **"));

2466 i�(
n_keyw�d
 > 0) {

2467 
	`comp�e_sy�ax_�r�
(
comp
, 
�gs
[
i
], 
	`MP_ERROR_TEXT
("positional�rg�fter keyword�rg"));

2470 
	`comp�e_node
(
comp
, 
�gs
[
i
]);

2471 
n_pos�iڮ
++;

2475 i�(
��_�ags
 != 0) {

2477 
	`EMIT_ARG
(
l�d_cڡ_sm�l_�t
, 
��_�gs
);

2481 i�(
is_m�hod_��
) {

2482 
	`EMIT_ARG
(
��_m�hod
, 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

2484 
	`EMIT_ARG
(
��_fun�i�
, 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

2486 
	}
}

2489 
	$comp�e_com�eh�si�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
sc�e_k�d_t
 
k�d
) {

2490 
	`as��
(
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) == 2);

2491 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[1], 
PN_comp_f�
));

2492 
mp_�r�_node_�ru�_t
 *
�s_comp_f�
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

2494 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

2496 
sc�e_t
 *
s
 = 
	`sc�e_�w_�d_l�k
(
comp
, 
k�d
, (
mp_�r�_node_t
)
�s
, comp->
sc�e_cur
->
em�_�ti�s
);

2498 
�s_comp_f�
->
nodes
[3] = (
mp_�r�_node_t
)
s
;

2502 
sc�e_t
 *
this_sc�e
 = (sc�e_�*)
�s_comp_f�
->
nodes
[3];

2505 
	`�o�_ov�_v��b�s_�c
(
comp
, 
this_sc�e
, 0, 0);

2507 
	`comp�e_node
(
comp
, 
�s_comp_f�
->
nodes
[1]);

2508 i�(
k�d
 =�
SCOPE_GEN_EXPR
) {

2509 
	`EMIT_ARG
(
g�_��
, 
�l�
);

2511 
	`EMIT_ARG
(
��_fun�i�
, 1, 0, 0);

2512 
	}
}

2514 
	$comp�e_�om_��n
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2515 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

2517 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_TUPLE
);

2519 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_comp
));

2520 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

2521 i�(
	`MP_PARSE_NODE_TESTLIST_COMP_HAS_COMP_FOR
(
�s
)) {

2523 
	`comp�e_com�eh�si�
(
comp
, 
�s
, 
SCOPE_GEN_EXPR
);

2526 
	`comp�e_g��ic_tu�e
(
comp
, 
�s
);

2529 
	}
}

2531 
	$comp�e_�om_b�ck�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2532 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

2534 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_LIST
);

2535 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_comp
)) {

2536 
mp_�r�_node_�ru�_t
 *
�s2
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[0];

2537 i�(
	`MP_PARSE_NODE_TESTLIST_COMP_HAS_COMP_FOR
(
�s2
)) {

2539 
	`comp�e_com�eh�si�
(
comp
, 
�s2
, 
SCOPE_LIST_COMP
);

2542 
	`comp�e_g��ic_�l_nodes
(
comp
, 
�s2
);

2543 
	`EMIT_ARG
(
bu�d
, 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s2
), 
MP_EMIT_BUILD_LIST
);

2547 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2548 
	`EMIT_ARG
(
bu�d
, 1, 
MP_EMIT_BUILD_LIST
);

2550 
	}
}

2552 
	$comp�e_�om_b��_h��r
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
, 
bo�
 
���_m�
) {

2553 
mp_�r�_node_t
 
�
 = 
�s
->
nodes
[0];

2554 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

2556 i�(
���_m�
) {

2557 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_MAP
);

2559 } i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

2560 
�s
 = (
mp_�r�_node_�ru�_t
 *)
�
;

2561 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_di�ܣtmak�_�em
) {

2563 i�(
���_m�
) {

2564 
	`EMIT_ARG
(
bu�d
, 1, 
MP_EMIT_BUILD_MAP
);

2566 
	`comp�e_node
(
comp
, 
�
);

2567 
	`EMIT
(
��e_m�
);

2568 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_di�ܣtmak�
) {

2569 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1]));

2570 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

2571 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_di�ܣtmak�_li�
) {

2575 
mp_�r�_node_t
 *
nodes
;

2576 
size_t
 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s1
->
nodes
[0], 
PN_di�ܣtmak�_li�2
, &nodes);

2579 
bo�
 
is_di�
;

2580 i�(!
MICROPY_PY_BUILTINS_SET
 || 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_di�ܣtmak�_�em
)) {

2582 i�(
���_m�
) {

2583 
	`EMIT_ARG
(
bu�d
, 1 + 
n
, 
MP_EMIT_BUILD_MAP
);

2585 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2586 
	`EMIT
(
��e_m�
);

2587 
is_di�
 = 
�ue
;

2590 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2591 
is_di�
 = 
�l�
;

2595 
size_t
 
i
 = 0; i < 
n
; i++) {

2596 
mp_�r�_node_t
 
�_i
 = 
nodes
[
i
];

2597 
bo�
 
is_key_v�ue
 = 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�_i
, 
PN_di�ܣtmak�_�em
);

2598 
	`comp�e_node
(
comp
, 
�_i
);

2599 i�(
is_di�
) {

2600 i�(!
is_key_v�ue
) {

2601 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


2602 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("invalid syntax"));

2604 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("expecting key:value for dict"));

2608 
	`EMIT
(
��e_m�
);

2610 i�(
is_key_v�ue
) {

2611 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


2612 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("invalid syntax"));

2614 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("expecting just� value for set"));

2621 #i�
MICROPY_PY_BUILTINS_SET


2623 i�(!
is_di�
) {

2624 
	`EMIT_ARG
(
bu�d
, 1 + 
n
, 
MP_EMIT_BUILD_SET
);

2628 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_comp_f�
);

2630 i�(!
MICROPY_PY_BUILTINS_SET
 || 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_di�ܣtmak�_�em
)) {

2632 
	`comp�e_com�eh�si�
(
comp
, 
�s
, 
SCOPE_DICT_COMP
);

2635 
	`comp�e_com�eh�si�
(
comp
, 
�s
, 
SCOPE_SET_COMP
);

2640 
�t_w�h_�e_�em�t
;

2644 
�t_w�h_�e_�em�t
:

2645 #i�
MICROPY_PY_BUILTINS_SET


2646 
	`comp�e_node
(
comp
, 
�
);

2647 
	`EMIT_ARG
(
bu�d
, 1, 
MP_EMIT_BUILD_SET
);

2649 
	`as��
(0);

2652 
	}
}

2654 
	$comp�e_�om_b��
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2655 
	`comp�e_�om_b��_h��r
(
comp
, 
�s
, 
�ue
);

2656 
	}
}

2658 
	$comp�e_�a��_��n
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2659 
	`comp�e_�a��_��n_h��r
(
comp
, 
�s
->
nodes
[0], 
�l�
, 0);

2660 
	}
}

2662 
	$comp�e_�a��_b�ck�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2664 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2665 
	`EMIT_ARG
(
subs�
, 
MP_EMIT_SUBSCR_LOAD
);

2666 
	}
}

2668 
	$comp�e_�a��_�riod
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2670 
	`EMIT_ARG
(
��
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]), 
MP_EMIT_ATTR_LOAD
);

2671 
	}
}

2673 #i�
MICROPY_PY_BUILTINS_SLICE


2674 
	$comp�e_subs��t
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2675 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_subs��t_2
) {

2676 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2677 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1]));

2678 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[1];

2681 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

2684 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_subs��t_3
);

2685 
mp_�r�_node_t
 
�
 = 
�s
->
nodes
[0];

2686 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

2688 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

2689 
	`EMIT_ARG
(
bu�d
, 2, 
MP_EMIT_BUILD_SLICE
);

2690 } i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

2691 
�s
 = (
mp_�r�_node_�ru�_t
 *)
�
;

2692 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_subs��t_3c
) {

2693 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

2694 
�
 = 
�s
->
nodes
[0];

2695 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

2697 
	`EMIT_ARG
(
bu�d
, 2, 
MP_EMIT_BUILD_SLICE
);

2700 
	`comp�e_node
(
comp
, 
�
);

2701 
	`EMIT_ARG
(
bu�d
, 3, 
MP_EMIT_BUILD_SLICE
);

2703 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_subs��t_3d
) {

2704 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2705 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1]));

2706 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[1];

2707 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_�i��
);

2708 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

2710 
	`EMIT_ARG
(
bu�d
, 2, 
MP_EMIT_BUILD_SLICE
);

2713 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2714 
	`EMIT_ARG
(
bu�d
, 3, 
MP_EMIT_BUILD_SLICE
);

2718 
	`comp�e_node
(
comp
, 
�
);

2719 
	`EMIT_ARG
(
bu�d
, 2, 
MP_EMIT_BUILD_SLICE
);

2723 
	`comp�e_node
(
comp
, 
�
);

2724 
	`EMIT_ARG
(
bu�d
, 2, 
MP_EMIT_BUILD_SLICE
);

2726 
	}
}

2729 
	$comp�e_di�ܣtmak�_�em
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2731 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

2732 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2733 
	}
}

2735 
	$comp�e_�assdef
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2736 
q�r
 
�ame
 = 
	`comp�e_�assdef_h��r
(
comp
, 
�s
, comp->
sc�e_cur
->
em�_�ti�s
);

2738 
	`comp�e_��e_id
(
comp
, 
�ame
);

2739 
	}
}

2741 
	$comp�e_y�ld_ex�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2742 i�(
comp
->
sc�e_cur
->
k�d
 !�
SCOPE_FUNCTION
 && comp->sc�e_cur->k�d !�
SCOPE_LAMBDA
) {

2743 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("'yield' outside function"));

2746 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

2747 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

2748 
	`EMIT_ARG
(
y�ld
, 
MP_EMIT_YIELD_VALUE
);

2749 
	`��rve_�b�s_f�_�tive
(
comp
, 1);

2750 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_y�ld_�g_�om
)) {

2751 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

2752 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2753 
	`comp�e_y�ld_�om
(
comp
);

2755 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

2756 
	`EMIT_ARG
(
y�ld
, 
MP_EMIT_YIELD_VALUE
);

2757 
	`��rve_�b�s_f�_�tive
(
comp
, 1);

2759 
	}
}

2761 #i�
MICROPY_PY_ASYNC_AWAIT


2762 
	$comp�e_�om_ex�_awa�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2763 i�(
comp
->
sc�e_cur
->
k�d
 !�
SCOPE_FUNCTION
 && comp->sc�e_cur->k�d !�
SCOPE_LAMBDA
) {

2764 #i�
MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT


2765 i�(!
mp_comp�e_�low_t�_�v�_awa�
)

2768 
	`comp�e_sy�ax_�r�
(
comp
, (
mp_�r�_node_t
)
�s
, 
	`MP_ERROR_TEXT
("'await' outside function"));

2772 
	`comp�e_�om_ex�_n�m�
(
comp
, 
�s
);

2773 
	`comp�e_y�ld_�om
(
comp
);

2774 
	}
}

2777 
mp_obj_t
 
	$g�_cڡ_obje�
(
mp_�r�_node_�ru�_t
 *
�s
) {

2778  
	`mp_�r�_node_ex�a�_cڡ_obje�
(
�s
);

2779 
	}
}

2781 
	$comp�e_cڡ_obje�
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s
) {

2782 
	`EMIT_ARG
(
l�d_cڡ_obj
, 
	`g�_cڡ_obje�
(
�s
));

2783 
	}
}

2785 (*
	tcomp�e_fun�i�_t
)(
	tcomp��_t
 *, 
	tmp_�r�_node_�ru�_t
 *);

2786 cڡ 
comp�e_fun�i�_t
 
comp�e_fun�i�
[] = {

2788 
	#c
(
f
�
comp�e_
##
	)
f

2789 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�comp,

	)

2790 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

2791 
	~"py/g�mm�.h
"

2792 #unde�
c


2793 #unde�
DEF_RULE


2794 #unde�
DEF_RULE_NC


2795 
comp�e_cڡ_obje�
,

2796 
	}
};

2798 
	$comp�e_node
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

2799 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

2801 } i�(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
)) {

2802 
mp_�t_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�
);

2803 
	`EMIT_ARG
(
l�d_cڡ_sm�l_�t
, 
�g
);

2804 } i�(
	`MP_PARSE_NODE_IS_LEAF
(
�
)) {

2805 
u���_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

2806 
	`MP_PARSE_NODE_LEAF_KIND
(
�
)) {

2807 
MP_PARSE_NODE_ID
:

2808 
	`comp�e_l�d_id
(
comp
, 
�g
);

2810 
MP_PARSE_NODE_STRING
:

2811 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
�g
);

2813 
MP_PARSE_NODE_TOKEN
:

2815 i�(
�g
 =�
MP_TOKEN_NEWLINE
) {

2820 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
�g
);

2825 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

2826 
	`EMIT_ARG
(
�t_sour�_l�e
, 
�s
->
sour�_l�e
);

2827 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�<�
PN_cڡ_obje�
);

2828 
comp�e_fun�i�_t
 
f
 = 
comp�e_fun�i�
[
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
)];

2829 
	`f
(
comp
, 
�s
);

2831 
	}
}

2833 #i�
MICROPY_EMIT_NATIVE


2834 
	$comp�e_v��_ty�_�n٩i�
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�_�n٩i�
) {

2835 
�tive_ty�
 = 
MP_NATIVE_TYPE_OBJ
;

2836 i�(
	`MP_PARSE_NODE_IS_NULL
(
�_�n٩i�
)) {

2838 } i�(
	`MP_PARSE_NODE_IS_ID
(
�_�n٩i�
)) {

2839 
q�r
 
ty�_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�_�n٩i�
);

2840 
�tive_ty�
 = 
	`mp_�tive_ty�_�om_q�r
(
ty�_�me
);

2841 i�(
�tive_ty�
 < 0) {

2842 
comp
->
comp�e_�r�
 = 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_V��Ty�E��
, 
	`MP_ERROR_TEXT
("unknow�ty� '%q'"), 
ty�_�me
);

2843 
�tive_ty�
 = 0;

2846 
	`comp�e_sy�ax_�r�
(
comp
, 
�_�n٩i�
, 
	`MP_ERROR_TEXT
("annotation must be�n identifier"));

2848  
�tive_ty�
;

2849 
	}
}

2852 
	$comp�e_sc�e_func_�mbda_��m
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
, 
�_k�d_t
 
�_�me
,�n_k�d_�
�_��
,�n_k�d_�
�_dbl_��
) {

2853 ()
�_dbl_��
;

2856 i�((
comp
->
sc�e_cur
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARKEYWORDS
) != 0) {

2857 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("invalid syntax"));

2861 
q�r
 
��m_�me
 = 
MP_QSTRnu�
;

2862 
u�t
 
��m_�ag
 = 
ID_FLAG_IS_PARAM
;

2863 
mp_�r�_node_�ru�_t
 *
�s
 = 
NULL
;

2864 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

2865 
��m_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

2866 i�(
comp
->
have_��
) {

2868 
comp
->
sc�e_cur
->
num_kw�ly_�gs
 += 1;

2871 
comp
->
sc�e_cur
->
num_pos_�gs
 += 1;

2874 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�
));

2875 
�s
 = (
mp_�r�_node_�ru�_t
 *)
�
;

2876 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
�_�me
) {

2878 
��m_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2879 i�(
comp
->
have_��
) {

2881 
comp
->
sc�e_cur
->
num_kw�ly_�gs
 += 1;

2884 
comp
->
sc�e_cur
->
num_pos_�gs
 += 1;

2886 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
�_��
) {

2887 i�(
comp
->
have_��
) {

2889 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("invalid syntax"));

2892 
comp
->
have_��
 = 
�ue
;

2893 
��m_�ag
 = 
ID_FLAG_IS_PARAM
 | 
ID_FLAG_IS_STAR_PARAM
;

2894 i�(
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0])) {

2898 
�s
 = 
NULL
;

2899 } i�(
	`MP_PARSE_NODE_IS_ID
(
�s
->
nodes
[0])) {

2901 
comp
->
sc�e_cur
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_VARARGS
;

2902 
��m_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2903 
�s
 = 
NULL
;

2905 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_t�def
));

2907 
comp
->
sc�e_cur
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_VARARGS
;

2908 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

2909 
��m_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2913 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
�_dbl_��
);

2914 
��m_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]);

2915 
��m_�ag
 = 
ID_FLAG_IS_PARAM
 | 
ID_FLAG_IS_DBL_STAR_PARAM
;

2916 
comp
->
sc�e_cur
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_VARKEYWORDS
;

2920 i�(
��m_�me
 !�
MP_QSTRnu�
) {

2921 
id_�fo_t
 *
id_�fo
 = 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
��m_�me
, 
ID_INFO_KIND_UNDECIDED
);

2922 i�(
id_�fo
->
k�d
 !�
ID_INFO_KIND_UNDECIDED
) {

2923 
	`comp�e_sy�ax_�r�
(
comp
, 
�
, 
	`MP_ERROR_TEXT
("argument�ame�eused"));

2926 
id_�fo
->
k�d
 = 
ID_INFO_KIND_LOCAL
;

2927 
id_�fo
->
�ags
 = 
��m_�ag
;

2929 #i�
MICROPY_EMIT_NATIVE


2930 i�(
comp
->
sc�e_cur
->
em�_�ti�s
 =�
MP_EMIT_OPT_VIPER
 && 
�_�me
 =�
PN_ty�d�g�i�_�me
 && 
�s
 !�
NULL
) {

2931 
id_�fo
->
�ags
 |�
	`comp�e_v��_ty�_�n٩i�
(
comp
, 
�s
->
nodes
[1]�<< 
ID_FLAG_VIPER_TYPE_POS
;

2934 ()
�s
;

2937 
	}
}

2939 
	$comp�e_sc�e_func_��m
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

2940 
	`comp�e_sc�e_func_�mbda_��m
(
comp
, 
�
, 
PN_ty�d�g�i�_�me
, 
PN_ty�d�g�i�_��
, 
PN_ty�d�g�i�_dbl_��
);

2941 
	}
}

2943 
	$comp�e_sc�e_�mbda_��m
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

2944 
	`comp�e_sc�e_func_�mbda_��m
(
comp
, 
�
, 
PN_v��g�i�_�me
, 
PN_v��g�i�_��
, 
PN_v��g�i�_dbl_��
);

2945 
	}
}

2947 
	$comp�e_sc�e_comp_��
(
comp��_t
 *
comp
, 
mp_�r�_node_�ru�_t
 *
�s_comp_f�
, 
mp_�r�_node_t
 
�_��r_ex�
, 
f�_d�th
) {

2948 
u�t
 
l_t�
 = 
	`comp_�xt_�b�
(
comp
);

2949 
u�t
 
l_�d
 = 
	`comp_�xt_�b�
(
comp
);

2950 
	`EMIT_ARG
(
�b�_assign
, 
l_t�
);

2951 
	`EMIT_ARG
(
f�_��
, 
l_�d
);

2952 
	`c_assign
(
comp
, 
�s_comp_f�
->
nodes
[0], 
ASSIGN_STORE
);

2953 
mp_�r�_node_t
 
�_��
 = 
�s_comp_f�
->
nodes
[2];

2955 
��_�cursi�
:

2956 i�(
	`MP_PARSE_NODE_IS_NULL
(
�_��
)) {

2958 
	`comp�e_node
(
comp
, 
�_��r_ex�
);

2959 i�(
comp
->
sc�e_cur
->
k�d
 =�
SCOPE_GEN_EXPR
) {

2960 
	`EMIT_ARG
(
y�ld
, 
MP_EMIT_YIELD_VALUE
);

2961 
	`��rve_�b�s_f�_�tive
(
comp
, 1);

2962 
	`EMIT
(
p�_t�
);

2964 
	`EMIT_ARG
(
��e_comp
, 
comp
->
sc�e_cur
->
k�d
, 4 * 
f�_d�th
 + 5);

2966 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�_��
�=�
PN_comp_if
) {

2968 
mp_�r�_node_�ru�_t
 *
�s_comp_if
 = (mp_�r�_node_�ru�_�*)
�_��
;

2969 
	`c_if_c�d
(
comp
, 
�s_comp_if
->
nodes
[0], 
�l�
, 
l_t�
);

2970 
�_��
 = 
�s_comp_if
->
nodes
[1];

2971 
��_�cursi�
;

2973 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)
�_��
�=�
PN_comp_f�
);

2975 
mp_�r�_node_�ru�_t
 *
�s_comp_f�2
 = (mp_�r�_node_�ru�_�*)
�_��
;

2976 
	`comp�e_node
(
comp
, 
�s_comp_f�2
->
nodes
[1]);

2977 
	`EMIT_ARG
(
g�_��
, 
�ue
);

2978 
	`comp�e_sc�e_comp_��
(
comp
, 
�s_comp_f�2
, 
�_��r_ex�
, 
f�_d�th
 + 1);

2981 
	`EMIT_ARG
(
jump
, 
l_t�
);

2982 
	`EMIT_ARG
(
�b�_assign
, 
l_�d
);

2983 
	`EMIT
(
f�_��_�d
);

2984 
	}
}

2986 
	$check_f�_doc_�r�g
(
comp��_t
 *
comp
, 
mp_�r�_node_t
 
�
) {

2987 #i�
MICROPY_ENABLE_DOC_STRING


2991 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_ex�_�mt
)) {

2993 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_f�e_�put_2
)) {

2995 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

2996 
num_nodes
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

2997 
i
 = 0; i < 
num_nodes
; i++) {

2998 
�
 = 
�s
->
nodes
[
i
];

2999 i�(!(
	`MP_PARSE_NODE_IS_LEAF
(
�
�&& 
	`MP_PARSE_NODE_LEAF_KIND
�n�=�
MP_PARSE_NODE_TOKEN
 && 
	`MP_PARSE_NODE_LEAF_ARG
�n�=�
MP_TOKEN_NEWLINE
)) {

3005 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_su�e_block_�mts
)) {

3007 
�
 = ((
mp_�r�_node_�ru�_t
 *�n)->
nodes
[0];

3013 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_ex�_�mt
)) {

3014 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

3015 i�((
	`MP_PARSE_NODE_IS_LEAF
(
�s
->
nodes
[0])

3016 && 
	`MP_PARSE_NODE_LEAF_KIND
(
�s
->
nodes
[0]�=�
MP_PARSE_NODE_STRING
)

3017 || (
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_cڡ_obje�
)

3018 && 
	`mp_obj_is_�r
(
	`g�_cڡ_obje�
((
mp_�r�_node_�ru�_t
 *)
�s
->
nodes
[0])))) {

3020 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

3022 
	`comp�e_��e_id
(
comp
, 
MP_QSTR___doc__
);

3026 ()
comp
;

3027 ()
�
;

3029 
	}
}

3031 
bo�
 
	$comp�e_sc�e
(
comp��_t
 *
comp
, 
sc�e_t
 *
sc�e
, 
�ss_k�d_t
 
�ss
) {

3032 
comp
->
�ss
 =�ass;

3033 
comp
->
sc�e_cur
 = 
sc�e
;

3034 
comp
->
�xt_�b�
 = 0;

3035 
	`mp_em�_comm�_��t_�ss
(&
comp
->
em�_comm�
, 
�ss
);

3036 
	`EMIT_ARG
(
��t_�ss
, 
�ss
, 
sc�e
);

3037 
	`��rve_�b�s_f�_�tive
(
comp
, 6);

3039 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

3042 
sc�e
->
�ack_size
 = 0;

3043 
sc�e
->
exc_�ack_size
 = 0;

3047 i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
sc�e
->
�
, 
PN_ev�_�put
)) {

3048 
	`as��
(
sc�e
->
k�d
 =�
SCOPE_MODULE
);

3049 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3050 
	`comp�e_node
(
comp
, 
�s
->
nodes
[0]);

3051 
	`EMIT
(
�tu�_v�ue
);

3052 } i�(
sc�e
->
k�d
 =�
SCOPE_MODULE
) {

3053 i�(!
comp
->
is_��
) {

3054 
	`check_f�_doc_�r�g
(
comp
, 
sc�e
->
�
);

3056 
	`comp�e_node
(
comp
, 
sc�e
->
�
);

3057 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

3058 
	`EMIT
(
�tu�_v�ue
);

3059 } i�(
sc�e
->
k�d
 =�
SCOPE_FUNCTION
) {

3060 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
sc�e
->
�
));

3061 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3062 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_funcdef
);

3066 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

3067 
comp
->
have_��
 = 
�l�
;

3068 
	`��y_to_s�g�_�_li�
(
comp
, 
�s
->
nodes
[1], 
PN_ty�d�g�i�
, 
comp�e_sc�e_func_��m
);

3070 #i�
MICROPY_EMIT_NATIVE


3071 i�(
sc�e
->
em�_�ti�s
 =�
MP_EMIT_OPT_VIPER
) {

3073 
sc�e
->
sc�e_�ags
 |�
	`comp�e_v��_ty�_�n٩i�
(
comp
, 
�s
->
nodes
[2]�<< 
MP_SCOPE_FLAG_VIPERRET_POS
;

3078 
	`comp�e_node
(
comp
, 
�s
->
nodes
[3]);

3079 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

3080 
	`EMIT
(
�tu�_v�ue
);

3081 } i�(
sc�e
->
k�d
 =�
SCOPE_LAMBDA
) {

3082 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
sc�e
->
�
));

3083 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3084 
	`as��
(
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) == 3);

3087 
	`EMIT_ARG
(
�t_sour�_l�e
, 
�s
->
sour�_l�e
);

3091 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

3092 
comp
->
have_��
 = 
�l�
;

3093 
	`��y_to_s�g�_�_li�
(
comp
, 
�s
->
nodes
[0], 
PN_v��g�i�
, 
comp�e_sc�e_�mbda_��m
);

3096 
	`comp�e_node
(
comp
, 
�s
->
nodes
[1]);

3099 i�(
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

3100 
	`EMIT
(
p�_t�
);

3101 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

3103 
	`EMIT
(
�tu�_v�ue
);

3104 } i�(
	`SCOPE_IS_COMP_LIKE
(
sc�e
->
k�d
)) {

3107 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
sc�e
->
�
));

3108 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3109 
	`as��
(
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) == 2);

3110 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[1], 
PN_comp_f�
));

3111 
mp_�r�_node_�ru�_t
 *
�s_comp_f�
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

3117 
q�r
 
q�r_�g
 = 
MP_QSTR_
;

3118 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

3119 
	`sc�e_f�d_�_add_id
(
comp
->
sc�e_cur
, 
q�r_�g
, 
ID_INFO_KIND_LOCAL
);

3120 
sc�e
->
num_pos_�gs
 = 1;

3124 
	`EMIT_ARG
(
�t_sour�_l�e
, 
�s
->
sour�_l�e
);

3126 i�(
sc�e
->
k�d
 =�
SCOPE_LIST_COMP
) {

3127 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_LIST
);

3128 } i�(
sc�e
->
k�d
 =�
SCOPE_DICT_COMP
) {

3129 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_MAP
);

3130 #i�
MICROPY_PY_BUILTINS_SET


3131 } i�(
sc�e
->
k�d
 =�
SCOPE_SET_COMP
) {

3132 
	`EMIT_ARG
(
bu�d
, 0, 
MP_EMIT_BUILD_SET
);

3138 i�(
sc�e
->
k�d
 =�
SCOPE_GEN_EXPR
) {

3139 
	`MP_STATIC_ASSERT
(
MP_OBJ_ITER_BUF_NSLOTS
 == 4);

3140 
	`EMIT
(
l�d_nu�
);

3141 
	`comp�e_l�d_id
(
comp
, 
q�r_�g
);

3142 
	`EMIT
(
l�d_nu�
);

3143 
	`EMIT
(
l�d_nu�
);

3145 
	`comp�e_l�d_id
(
comp
, 
q�r_�g
);

3146 
	`EMIT_ARG
(
g�_��
, 
�ue
);

3149 
	`comp�e_sc�e_comp_��
(
comp
, 
�s_comp_f�
, 
�s
->
nodes
[0], 0);

3151 i�(
sc�e
->
k�d
 =�
SCOPE_GEN_EXPR
) {

3152 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

3154 
	`EMIT
(
�tu�_v�ue
);

3156 
	`as��
(
sc�e
->
k�d
 =�
SCOPE_CLASS
);

3157 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
sc�e
->
�
));

3158 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3159 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_�assdef
);

3161 i�(
comp
->
�ss
 =�
MP_PASS_SCOPE
) {

3162 
	`sc�e_f�d_�_add_id
(
sc�e
, 
MP_QSTR___�ass__
, 
ID_INFO_KIND_LOCAL
);

3165 #i�
MICROPY_PY_SYS_SETTRACE


3166 
	`EMIT_ARG
(
�t_sour�_l�e
, 
�s
->
sour�_l�e
);

3168 
	`comp�e_l�d_id
(
comp
, 
MP_QSTR___�me__
);

3169 
	`comp�e_��e_id
(
comp
, 
MP_QSTR___modu�__
);

3170 
	`EMIT_ARG
(
l�d_cڡ_�r
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�s
->
nodes
[0]));

3171 
	`comp�e_��e_id
(
comp
, 
MP_QSTR___qu��me__
);

3173 
	`check_f�_doc_�r�g
(
comp
, 
�s
->
nodes
[2]);

3174 
	`comp�e_node
(
comp
, 
�s
->
nodes
[2]);

3176 
id_�fo_t
 *
id
 = 
	`sc�e_f�d
(
sc�e
, 
MP_QSTR___�ass__
);

3177 
	`as��
(
id
 !�
NULL
);

3178 i�(
id
->
k�d
 =�
ID_INFO_KIND_LOCAL
) {

3179 
	`EMIT_ARG
(
l�d_cڡ_tok
, 
MP_TOKEN_KW_NONE
);

3181 
	`EMIT_LOAD_FAST
(
MP_QSTR___�ass__
, 
id
->
lo�l_num
);

3183 
	`EMIT
(
�tu�_v�ue
);

3186 
bo�
 
�ss_com��e
 = 
	`EMIT
(
�d_�ss
);

3189 
	`as��
(
comp
->
cur_ex��_�v�
 == 0);

3191  
�ss_com��e
;

3192 
	}
}

3194 #i�
MICROPY_EMIT_INLINE_ASM


3196 
	$comp�e_sc�e_�l�e_asm
(
comp��_t
 *
comp
, 
sc�e_t
 *
sc�e
, 
�ss_k�d_t
 
�ss
) {

3197 
comp
->
�ss
 =�ass;

3198 
comp
->
sc�e_cur
 = 
sc�e
;

3199 
comp
->
�xt_�b�
 = 0;

3201 i�(
sc�e
->
k�d
 !�
SCOPE_FUNCTION
) {

3202 
	`comp�e_sy�ax_�r�
(
comp
, 
MP_PARSE_NODE_NULL
, 
	`MP_ERROR_TEXT
("inline�ssembler must be� function"));

3206 i�(
comp
->
�ss
 > 
MP_PASS_SCOPE
) {

3207 
	`EMIT_INLINE_ASM_ARG
(
��t_�ss
, 
comp
->
�ss
, &comp->
comp�e_�r�
);

3211 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
sc�e
->
�
));

3212 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
sc�e
->
�
;

3213 
	`as��
(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_funcdef
);

3218 i�(
comp
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

3219 
mp_�r�_node_t
 *
�_��ms
;

3220 
size_t
 
n_��ms
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s
->
nodes
[1], 
PN_ty�d�g�i�
, &
�_��ms
);

3221 
sc�e
->
num_pos_�gs
 = 
	`EMIT_INLINE_ASM_ARG
(
cou�_��ms
, 
n_��ms
, 
�_��ms
);

3222 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

3223 
�l�e_asm_�r�
;

3228 
mp_u�t_t
 
ty�_sig
 = 
MP_NATIVE_TYPE_INT
;

3229 
mp_�r�_node_t
 
�_�n٩i�
 = 
�s
->
nodes
[2];

3230 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�_�n٩i�
)) {

3232 i�(
	`MP_PARSE_NODE_IS_ID
(
�_�n٩i�
)) {

3233 
q�r
 
�t_ty�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�_�n٩i�
);

3234 
�t_ty�
) {

3235 
MP_QSTR_obje�
:

3236 
ty�_sig
 = 
MP_NATIVE_TYPE_OBJ
;

3238 
MP_QSTR_bo�
:

3239 
ty�_sig
 = 
MP_NATIVE_TYPE_BOOL
;

3241 
MP_QSTR_�t
:

3242 
ty�_sig
 = 
MP_NATIVE_TYPE_INT
;

3244 
MP_QSTR_u�t
:

3245 
ty�_sig
 = 
MP_NATIVE_TYPE_UINT
;

3248 
	`comp�e_sy�ax_�r�
(
comp
, 
�_�n٩i�
, 
	`MP_ERROR_TEXT
("unknown�ype"));

3252 
	`comp�e_sy�ax_�r�
(
comp
, 
�_�n٩i�
, 
	`MP_ERROR_TEXT
("return�nnotation must be�n identifier"));

3256 
mp_�r�_node_t
 
�_body
 = 
�s
->
nodes
[3];

3257 
mp_�r�_node_t
 *
nodes
;

3258 
size_t
 
num
 = 
	`mp_�r�_node_ex�a�_li�
(&
�_body
, 
PN_su�e_block_�mts
, &
nodes
);

3260 
size_t
 
i
 = 0; i < 
num
; i++) {

3261 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
nodes
[
i
]));

3262 
mp_�r�_node_�ru�_t
 *
�s2
 = (mp_�r�_node_�ru�_�*)
nodes
[
i
];

3263 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
�=�
PN_�ss_�mt
) {

3266 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
�!�
PN_ex�_�mt
) {

3268 
n�_�_��ru�i�
:

3269 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("expecting�n�ssembler instruction"));

3274 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s2
->
nodes
[0]));

3275 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�s2
->
nodes
[1])) {

3276 
n�_�_��ru�i�
;

3278 
�s2
 = (
mp_�r�_node_�ru�_t
 *�ns2->
nodes
[0];

3279 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s2
�!�
PN_�om_ex�_n�m�
) {

3280 
n�_�_��ru�i�
;

3282 i�(!
	`MP_PARSE_NODE_IS_ID
(
�s2
->
nodes
[0])) {

3283 
n�_�_��ru�i�
;

3285 i�(!
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s2
->
nodes
[1], 
PN_�a��_��n
)) {

3286 
n�_�_��ru�i�
;

3291 
q�r
 
�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s2
->
nodes
[0]);

3292 
�s2
 = (
mp_�r�_node_�ru�_t
 *�ns2->
nodes
[1];

3293 
mp_�r�_node_t
 *
�_�g
;

3294 
size_t
 
n_�gs
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s2
->
nodes
[0], 
PN_�gli�
, &
�_�g
);

3297 i�(
�
 =�
MP_QSTR_�b�
) {

3298 i�(!(
n_�gs
 =�1 && 
	`MP_PARSE_NODE_IS_ID
(
�_�g
[0]))) {

3299 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("'label'�equires 1�rgument"));

3302 
u�t
 
�b
 = 
	`comp_�xt_�b�
(
comp
);

3303 i�(
�ss
 > 
MP_PASS_SCOPE
) {

3304 i�(!
	`EMIT_INLINE_ASM_ARG
(
�b�
, 
�b
, 
	`MP_PARSE_NODE_LEAF_ARG
(
�_�g
[0]))) {

3305 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("label�edefined"));

3309 } i�(
�
 =�
MP_QSTR_�ign
) {

3310 i�(!(
n_�gs
 =�1 && 
	`MP_PARSE_NODE_IS_SMALL_INT
(
�_�g
[0]))) {

3311 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("'align'�equires 1�rgument"));

3314 i�(
�ss
 > 
MP_PASS_SCOPE
) {

3315 
	`mp_asm_ba�_�ign
((
mp_asm_ba�_t
 *)
comp
->
em�_�l�e_asm
,

3316 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�_�g
[0]));

3318 } i�(
�
 =�
MP_QSTR_d�a
) {

3319 i�(!(
n_�gs
 >�2 && 
	`MP_PARSE_NODE_IS_SMALL_INT
(
�_�g
[0]))) {

3320 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("'data'�equires�t�east 2�rguments"));

3323 i�(
�ss
 > 
MP_PASS_SCOPE
) {

3324 
mp_�t_t
 
by�size
 = 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�_�g
[0]);

3325 
u�t
 
j
 = 1; j < 
n_�gs
; j++) {

3326 
mp_obj_t
 
�t_obj
;

3327 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�_�g
[
j
], &
�t_obj
)) {

3328 
	`comp�e_sy�ax_�r�
(
comp
, 
nodes
[
i
], 
	`MP_ERROR_TEXT
("'data'�equires integer�rguments"));

3331 
	`mp_asm_ba�_d�a
((
mp_asm_ba�_t
 *)
comp
->
em�_�l�e_asm
,

3332 
by�size
, 
	`mp_obj_�t_g�_�un��d
(
�t_obj
));

3336 i�(
�ss
 > 
MP_PASS_SCOPE
) {

3337 
	`EMIT_INLINE_ASM_ARG
(
�
, op, 
n_�gs
, 
�_�g
);

3341 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

3342 
�s
 = 
�s2
;

3343 
�l�e_asm_�r�
;

3347 i�(
comp
->
�ss
 > 
MP_PASS_SCOPE
) {

3348 
	`EMIT_INLINE_ASM_ARG
(
�d_�ss
, 
ty�_sig
);

3350 i�(
comp
->
�ss
 =�
MP_PASS_EMIT
) {

3351 *
f
 = 
	`mp_asm_ba�_g�_code
((
mp_asm_ba�_t
 *)
comp
->
em�_�l�e_asm
);

3352 
	`mp_em�_glue_assign_�tive
(
comp
->
sc�e_cur
->
�w_code
, 
MP_CODE_NATIVE_ASM
,

3353 
f
, 
	`mp_asm_ba�_g�_code_size
((
mp_asm_ba�_t
 *)
comp
->
em�_�l�e_asm
),

3354 
NULL
,

3355 #i�
MICROPY_PERSISTENT_CODE_SAVE


3359 0, 
comp
->
sc�e_cur
->
num_pos_�gs
, 
ty�_sig
);

3363 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

3365 
�l�e_asm_�r�
:

3366 
comp
->
comp�e_�r�_l�e
 = 
�s
->
sour�_l�e
;

3368 
	}
}

3371 
	$sc�e_compu�_th�gs
(
sc�e_t
 *
sc�e
) {

3373 i�(
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARARGS
) {

3374 
id_�fo_t
 *
id_��m
 = 
NULL
;

3375 
i
 = 
sc�e
->
id_�fo_�n
 - 1; i >= 0; i--) {

3376 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
i
];

3377 i�(
id
->
�ags
 & 
ID_FLAG_IS_STAR_PARAM
) {

3378 i�(
id_��m
 !�
NULL
) {

3380 
id_�fo_t
 
�mp
 = *
id_��m
;

3381 *
id_��m
 = *
id
;

3382 *
id
 = 
�mp
;

3385 } i�(
id_��m
 =�
NULL
 && 
id
->
�ags
 =�
ID_FLAG_IS_PARAM
) {

3386 
id_��m
 = 
id
;

3393 
sc�e
->
num_lo�ls
 = 0;

3394 
i
 = 0; i < 
sc�e
->
id_�fo_�n
; i++) {

3395 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
i
];

3396 i�(
sc�e
->
k�d
 =�
SCOPE_CLASS
 && 
id
->
q�
 =�
MP_QSTR___�ass__
) {

3400 i�(
	`SCOPE_IS_FUNC_LIKE
(
sc�e
->
k�d
�&& 
id
->k�d =�
ID_INFO_KIND_GLOBAL_IMPLICIT
) {

3401 
id
->
k�d
 = 
ID_INFO_KIND_GLOBAL_EXPLICIT
;

3403 #i�
MICROPY_EMIT_NATIVE


3404 i�(
id
->
k�d
 =�
ID_INFO_KIND_GLOBAL_EXPLICIT
) {

3406 i�(
sc�e
->
em�_�ti�s
 =�
MP_EMIT_OPT_VIPER


3407 && 
	`mp_�tive_ty�_�om_q�r
(
id
->
q�
�>�
MP_NATIVE_TYPE_INT
) {

3410 
sc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_REFGLOBALS
;

3415 i�(
id
->
k�d
 =�
ID_INFO_KIND_LOCAL
 || (id->
�ags
 & 
ID_FLAG_IS_PARAM
)) {

3416 
id
->
lo�l_num
 = 
sc�e
->
num_lo�ls
++;

3421 
i
 = 0; i < 
sc�e
->
id_�fo_�n
; i++) {

3422 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
i
];

3426 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
 && !(id->
�ags
 & 
ID_FLAG_IS_PARAM
)) {

3427 
id
->
lo�l_num
 = 
sc�e
->
num_lo�ls
;

3428 
sc�e
->
num_lo�ls
 += 1;

3434 i�(
sc�e
->
���
 !�
NULL
) {

3435 
num_�
 = 0;

3436 
i
 = 0; i < 
sc�e
->
���
->
id_�fo_�n
; i++) {

3437 
id_�fo_t
 *
id
 = &
sc�e
->
���
->
id_�fo
[
i
];

3438 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
 || id->k�d =�
ID_INFO_KIND_FREE
) {

3439 
j
 = 0; j < 
sc�e
->
id_�fo_�n
; j++) {

3440 
id_�fo_t
 *
id2
 = &
sc�e
->
id_�fo
[
j
];

3441 i�(
id2
->
k�d
 =�
ID_INFO_KIND_FREE
 && 
id
->
q�
 == id2->qst) {

3442 
	`as��
(!(
id2
->
�ags
 & 
ID_FLAG_IS_PARAM
));

3444 
id2
->
lo�l_num
 = 
num_�
;

3445 
num_�
 += 1;

3451 i�(
num_�
 > 0) {

3452 
i
 = 0; i < 
sc�e
->
id_�fo_�n
; i++) {

3453 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
i
];

3454 i�(
id
->
k�d
 !�
ID_INFO_KIND_FREE
 || (id->
�ags
 & 
ID_FLAG_IS_PARAM
)) {

3455 
id
->
lo�l_num
 +�
num_�
;

3458 
sc�e
->
num_pos_�gs
 +�
num_�
;

3459 
sc�e
->
num_lo�ls
 +�
num_�
;

3462 
	}
}

3464 #i�!
MICROPY_PERSISTENT_CODE_SAVE


3467 
	$mp_comp�e_to_�w_code
(
mp_�r�_��_t
 *
�r�_��
, 
q�r
 
sour�_f�e
, 
bo�
 
is_��
, 
mp_comp�ed_modu�_t
 *
cm
) {

3469 
comp��_t
 
comp_��e
 = {0};

3470 
comp��_t
 *
comp
 = &
comp_��e
;

3472 
comp
->
is_��
 = is_repl;

3473 
comp
->
b�ak_�b�
 = 
INVALID_LABEL
;

3474 
comp
->
c�t�ue_�b�
 = 
INVALID_LABEL
;

3475 
	`mp_em�_comm�_��
(&
comp
->
em�_comm�
, 
sour�_f�e
);

3478 #i�
MICROPY_EMIT_NATIVE


3479 cڡ 
u�t
 
em�_�t
 = 
	`MP_STATE_VM
(
de�u�_em�_�t
);

3481 cڡ 
u�t
 
em�_�t
 = 
MP_EMIT_OPT_NONE
;

3483 
sc�e_t
 *
modu�_sc�e
 = 
	`sc�e_�w_�d_l�k
(
comp
, 
SCOPE_MODULE
, 
�r�_��
->
ro�
, 
em�_�t
);

3486 
em�_t
 *
em�_bc
 = 
	`em�_bc_�w
(&
comp
->
em�_comm�
);

3489 
comp
->
em�
 = 
em�_bc
;

3490 #i�
MICROPY_EMIT_NATIVE


3491 
comp
->
em�_m�hod_�b�
 = &
em�_bc_m�hod_�b�
;

3493 
u�t
 
max_num_�b�s
 = 0;

3494 
sc�e_t
 *
s
 = 
comp
->
sc�e_h�d
; s !�
NULL
 && comp->
comp�e_�r�
 =�
MP_OBJ_NULL
; s = s->
�xt
) {

3495 #i�
MICROPY_EMIT_INLINE_ASM


3496 i�(
s
->
em�_�ti�s
 =�
MP_EMIT_OPT_ASM
) {

3497 
	`comp�e_sc�e_�l�e_asm
(
comp
, 
s
, 
MP_PASS_SCOPE
);

3501 
	`comp�e_sc�e
(
comp
, 
s
, 
MP_PASS_SCOPE
);

3504 
size_t
 
i
 = 0; i < 
s
->
id_�fo_�n
; ++i) {

3505 
id_�fo_t
 *
id
 = &
s
->
id_�fo
[
i
];

3506 i�(
id
->
k�d
 =�
ID_INFO_KIND_GLOBAL_IMPLICIT
) {

3507 
	`sc�e_check_to_�o�_ov�
(
s
, 
id
);

3513 i�(
comp
->
�xt_�b�
 > 
max_num_�b�s
) {

3514 
max_num_�b�s
 = 
comp
->
�xt_�b�
;

3519 
sc�e_t
 *
s
 = 
comp
->
sc�e_h�d
; s !�
NULL
 && comp->
comp�e_�r�
 =�
MP_OBJ_NULL
; s = s->
�xt
) {

3520 
	`sc�e_compu�_th�gs
(
s
);

3524 
	`em�_bc_�t_max_num_�b�s
(
em�_bc
, 
max_num_�b�s
);

3527 #i�
MICROPY_EMIT_NATIVE


3528 
em�_t
 *
em�_�tive
 = 
NULL
;

3530 
sc�e_t
 *
s
 = 
comp
->
sc�e_h�d
; s !�
NULL
 && comp->
comp�e_�r�
 =�
MP_OBJ_NULL
; s = s->
�xt
) {

3531 #i�
MICROPY_EMIT_INLINE_ASM


3532 i�(
s
->
em�_�ti�s
 =�
MP_EMIT_OPT_ASM
) {

3534 i�(
comp
->
em�_�l�e_asm
 =�
NULL
) {

3535 
comp
->
em�_�l�e_asm
 = 
	`ASM_EMITTER
(
�w
)(
max_num_�b�s
);

3537 
comp
->
em�
 = 
NULL
;

3538 
comp
->
em�_�l�e_asm_m�hod_�b�
 = 
ASM_EMITTER_TABLE
;

3539 
	`comp�e_sc�e_�l�e_asm
(
comp
, 
s
, 
MP_PASS_CODE_SIZE
);

3540 #i�
MICROPY_EMIT_INLINE_XTENSA


3544 #i�
MICROPY_DYNAMIC_COMPILER


3545 i�(
mp_dy�mic_comp��
.
�tive_�ch
 =�
MP_NATIVE_ARCH_XTENSA
)

3548 
	`comp�e_sc�e_�l�e_asm
(
comp
, 
s
, 
MP_PASS_CODE_SIZE
);

3551 i�(
comp
->
comp�e_�r�
 =�
MP_OBJ_NULL
) {

3552 
	`comp�e_sc�e_�l�e_asm
(
comp
, 
s
, 
MP_PASS_EMIT
);

3560 
s
->
em�_�ti�s
) {

3562 #i�
MICROPY_EMIT_NATIVE


3563 
MP_EMIT_OPT_NATIVE_PYTHON
:

3564 
MP_EMIT_OPT_VIPER
:

3565 i�(
em�_�tive
 =�
NULL
) {

3566 
em�_�tive
 = 
	`NATIVE_EMITTER
(
�w
)(&
comp
->
em�_comm�
, &comp->
comp�e_�r�
, &comp->
�xt_�b�
, 
max_num_�b�s
);

3568 
comp
->
em�_m�hod_�b�
 = 
NATIVE_EMITTER_TABLE
;

3569 
comp
->
em�
 = 
em�_�tive
;

3574 
comp
->
em�
 = 
em�_bc
;

3575 #i�
MICROPY_EMIT_NATIVE


3576 
comp
->
em�_m�hod_�b�
 = &
em�_bc_m�hod_�b�
;

3582 
	`comp�e_sc�e
(
comp
, 
s
, 
MP_PASS_STACK_SIZE
);

3585 i�(
comp
->
comp�e_�r�
 =�
MP_OBJ_NULL
) {

3586 
	`comp�e_sc�e
(
comp
, 
s
, 
MP_PASS_CODE_SIZE
);

3591 i�(
comp
->
comp�e_�r�
 =�
MP_OBJ_NULL
) {

3592 !
	`comp�e_sc�e
(
comp
, 
s
, 
MP_PASS_EMIT
)) {

3598 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

3601 
	`comp�e_�r�_�t_l�e
(
comp
, comp->
sc�e_cur
->
�
);

3603 
	`mp_obj_ex��i�_add_�a�back
(
comp
->
comp�e_�r�
, 
sour�_f�e
,

3604 
comp
->
comp�e_�r�_l�e
, comp->
sc�e_cur
->
sim�e_�me
);

3608 
cm
->
rc
 = 
modu�_sc�e
->
�w_code
;

3609 #i�
MICROPY_PERSISTENT_CODE_SAVE


3610 
cm
->
has_�tive
 = 
�l�
;

3611 #i�
MICROPY_EMIT_NATIVE


3612 i�(
em�_�tive
 !�
NULL
) {

3613 
cm
->
has_�tive
 = 
�ue
;

3616 #i�
MICROPY_EMIT_INLINE_ASM


3617 i�(
comp
->
em�_�l�e_asm
 !�
NULL
) {

3618 
cm
->
has_�tive
 = 
�ue
;

3621 
cm
->
n_q�r
 = 
comp
->
em�_comm�
.
q�r_m�
.
u�d
;

3622 
cm
->
n_obj
 = 
comp
->
em�_comm�
.
cڡ_obj_li�
.
�n
;

3624 i�(
comp
->
comp�e_�r�
 =�
MP_OBJ_NULL
) {

3625 
	`mp_em�_comm�_p�uϋ_modu�_cڋxt
(&
comp
->
em�_comm�
, 
sour�_f�e
, 
cm
->
cڋxt
);

3627 #i�
MICROPY_DEBUG_PRINTERS


3629 i�(
mp_v�bo�_�ag
 >= 2) {

3630 
sc�e_t
 *
s
 = 
comp
->
sc�e_h�d
; s !�
NULL
; s = s->
�xt
) {

3631 
mp_�w_code_t
 *
rc
 = 
s
->
�w_code
;

3632 i�(
rc
->
k�d
 =�
MP_CODE_BYTECODE
) {

3633 
	`mp_by�code_��t
(&
mp_��_��t
, 
rc
, 
s
->
�w_code_d�a_�n
, &
cm
->
cڋxt
->
cڡ�ts
);

3642 
	`em�_bc_�
(
em�_bc
);

3643 #i�
MICROPY_EMIT_NATIVE


3644 i�(
em�_�tive
 !�
NULL
) {

3645 
	`NATIVE_EMITTER
(
�
)(
em�_�tive
);

3648 #i�
MICROPY_EMIT_INLINE_ASM


3649 i�(
comp
->
em�_�l�e_asm
 !�
NULL
) {

3650 
	`ASM_EMITTER
(
�
)(
comp
->
em�_�l�e_asm
);

3655 
	`mp_�r�_��_��r
(
�r�_��
);

3658 
sc�e_t
 *
s
 = 
modu�_sc�e
; s;) {

3659 
sc�e_t
 *
�xt
 = 
s
->next;

3660 
	`sc�e_�
(
s
);

3661 
s
 = 
�xt
;

3664 i�(
comp
->
comp�e_�r�
 !�
MP_OBJ_NULL
) {

3665 
	`�r_�i�
(
comp
->
comp�e_�r�
);

3667 
	}
}

3669 
mp_obj_t
 
	$mp_comp�e
(
mp_�r�_��_t
 *
�r�_��
, 
q�r
 
sour�_f�e
, 
bo�
 
is_��
) {

3670 
mp_comp�ed_modu�_t
 
cm
;

3671 
cm
.
cڋxt
 = 
	`m_�w_obj
(
mp_modu�_cڋxt_t
);

3672 
cm
.
cڋxt
->
modu�
.
glob�s
 = 
	`mp_glob�s_g�
();

3673 
	`mp_comp�e_to_�w_code
(
�r�_��
, 
sour�_f�e
, 
is_��
, &
cm
);

3675  
	`mp_make_fun�i�_�om_��o_fun
(
cm
.
rc
, cm.
cڋxt
, 
NULL
);

3676 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\compile.h

26 #i�de�
MICROPY_INCLUDED_PY_COMPILE_H


27 
	#MICROPY_INCLUDED_PY_COMPILE_H


	)

29 
	~"py/�x�.h
"

30 
	~"py/�r�.h
"

31 
	~"py/em�glue.h
"

33 #i�
MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT


35 
bo�
 
mp_comp�e_�low_t�_�v�_awa�
;

41 
mp_obj_t
 
mp_comp�e
(
mp_�r�_��_t
 *
�r�_��
, 
q�r
 
sour�_f�e
, 
bo�
 
is_��
);

43 #i�
MICROPY_PERSISTENT_CODE_SAVE


45 
mp_comp�e_to_�w_code
(
mp_�r�_��_t
 *
�r�_��
, 
q�r
 
sour�_f�e
, 
bo�
 
is_��
, 
mp_comp�ed_modu�_t
 *
cm
);

49 
mp_obj_t
 
mp_�r�_comp�e_execu�
(
mp_�x�_t
 *
�x
, 
mp_�r�_�put_k�d_t
 
�r�_�put_k�d
, 
mp_obj_di�_t
 *
glob�s
, mp_obj_di�_�*
lo�ls
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\cstack.c

28 
	~"py/ru�ime.h
"

29 
	~"py/c�ack.h
"

31 
	$mp_c�ack_��_w�h_�_h�e
(
size_t
 
�ack_size
) {

32 #i�
__GNUC__
 >= 13

33 #�agm�
GCC
 
d�gno�ic
 
push


34 #�agm�
GCC
 
d�gno�ic
 
ign�ed
 "-Wdangling-pointer"

36 vީ��
�ack_dummy
;

37 
	`mp_c�ack_��_w�h_t�
((*)&
�ack_dummy
, 
�ack_size
);

38 #i�
__GNUC__
 >= 13

39 #�agm�
GCC
 
d�gno�ic
 
p�


41 
	}
}

43 
mp_u�t_t
 
	$mp_c�ack_u�ge
() {

45 vީ��
�ack_dummy
;

46  
	`MP_STATE_THREAD
(
�ack_t�
�- (*)&
�ack_dummy
;

47 
	}
}

49 #i�
MICROPY_STACK_CHECK


51 
	$mp_c�ack_check
() {

52 i�(
	`mp_c�ack_u�ge
(�>�
	`MP_STATE_THREAD
(
�ack_lim�
)) {

53 
	`mp_�i�_�cursi�_d�th
();

55 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\cstack.h

27 #i�de�
MICROPY_INCLUDED_PY_CSTACK_H


28 
	#MICROPY_INCLUDED_PY_CSTACK_H


	)

30 
	~"py/mp��e.h
"

36 
mp_c�ack_��_w�h_�_h�e
(
size_t
 
�ack_size
);

38 
�l�e
 
	$mp_c�ack_��_w�h_t�
(*
t�
, 
size_t
 
�ack_size
) {

39 
	`MP_STATE_THREAD
(
�ack_t�
��(*)
t�
;

41 #i�
MICROPY_STACK_CHECK


42 
	`as��
(
�ack_size
 > 
MICROPY_STACK_CHECK_MARGIN
);

43 
	`MP_STATE_THREAD
(
�ack_lim�
��
�ack_size
 - 
MICROPY_STACK_CHECK_MARGIN
;

45 ()
�ack_size
;

47 
	}
}

49 
mp_u�t_t
 
mp_c�ack_u�ge
();

51 #i�
MICROPY_STACK_CHECK


53 
mp_c�ack_check
();

57 
�l�e
 
	$mp_c�ack_check
() {

59 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\dynruntime.h

26 #i�de�
MICROPY_INCLUDED_PY_DYNRUNTIME_H


27 
	#MICROPY_INCLUDED_PY_DYNRUNTIME_H


	)

32 
	~"py/b��y.h
"

33 
	~"py/�tiveglue.h
"

34 
	~"py/objfun.h
"

35 
	~"py/obj�r.h
"

36 
	~"py/objty�.h
"

38 #i�!
MICROPY_ENABLE_DYNRUNTIME


42 #unde�
MP_ROM_QSTR


43 #unde�
MP_OBJ_QSTR_VALUE


44 #unde�
MP_OBJ_NEW_QSTR


45 #unde�
mp_cڡ_n�e


46 #unde�
mp_cڡ_�l�


47 #unde�
mp_cڡ_�ue


48 #unde�
mp_cڡ_em�y_by�s


49 #unde�
mp_cڡ_em�y_tu�e


50 #unde�
�r_�i�


55 
	#m_m�loc
(
n
�(
	`m_m�loc_dyn
(�)))

	)

56 
	#m_�
(
�r
�(
	`m_�_dyn
(Ռ)))

	)

57 
	#m_��loc
(
�r
, 
�w_num_by�s
�(
	`m_��loc_dyn
(Ռ), (�w_num_by�s)))

	)

59 
�l�e
 *
	$m_m�loc_dyn
(
size_t
 
n
) {

61  
mp_fun_�b�
.
	`��loc_
(
NULL
, 
n
, 
�l�
);

62 
	}
}

64 
�l�e
 
	$m_�_dyn
(*
�r
) {

65 
mp_fun_�b�
.
	`��loc_
(
�r
, 0, 
�l�
);

66 
	}
}

68 
�l�e
 *
	$m_��loc_dyn
(*
�r
, 
size_t
 
�w_num_by�s
) {

70  
mp_fun_�b�
.
	`��loc_
(
�r
, 
�w_num_by�s
, 
�ue
);

71 
	}
}

76 
	#mp_��_��t
 (*
mp_fun_�b�
.
��_��t
)

	)

77 
	#mp_��tf
(
p
, ...�(
mp_fun_�b�
.
	`��tf_
(�), 
__VA_ARGS__
))

	)

78 
	#mp_v��tf
(
p
, 
fmt
, 
�gs
�(
mp_fun_�b�
.
	`v��tf_
(�), (fmt), (�gs)))

	)

83 
	#MP_OBJ_NEW_QSTR
(
x
�(
mp_fun_�b�
.
	`�tive_to_obj
(x, 
MP_NATIVE_TYPE_QSTR
))

	)

85 
	#mp_ty�_ty�
 (*
mp_fun_�b�
.
ty�_ty�
)

	)

86 
	#mp_ty�_N�eTy�
 (*
	`mp_obj_g�_ty�
(
mp_cڡ_n�e
))

	)

87 
	#mp_ty�_bo�
 (*
	`mp_obj_g�_ty�
(
mp_cڡ_�l�
))

	)

88 
	#mp_ty�_�t
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_�t
)))

	)

89 
	#mp_ty�_�r
 (*
mp_fun_�b�
.
ty�_�r
)

	)

90 
	#mp_ty�_by�s
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_by�s
)))

	)

91 
	#mp_ty�_by���y
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_by���y
)))

	)

92 
	#mp_ty�_tu�e
 (*((
mp_obj_ba�_t
 *)
mp_cڡ_em�y_tu�e
)->
ty�
)

	)

93 
	#mp_ty�_li�
 (*
mp_fun_�b�
.
ty�_li�
)

	)

94 
	#mp_ty�_Ex��i�
 (*
mp_fun_�b�
.
ty�_Ex��i�
)

	)

95 
	#mp_ty�_EOFE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_EOFE��
)))

	)

96 
	#mp_ty�_IndexE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_IndexE��
)))

	)

97 
	#mp_ty�_KeyE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_KeyE��
)))

	)

98 
	#mp_ty�_N�Im�em��dE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_N�Im�em��dE��
)))

	)

99 
	#mp_ty�_Ru�imeE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_Ru�imeE��
)))

	)

100 
	#mp_ty�_Ty�E��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_Ty�E��
)))

	)

101 
	#mp_ty�_V�ueE��
 (*(
mp_obj_ty�_t
 *)(
	`mp_l�d_glob�
(
MP_QSTR_V�ueE��
)))

	)

103 
	#mp_��am_�ad_obj
 (*
mp_fun_�b�
.
��am_�ad_obj
)

	)

104 
	#mp_��am_�ad�to_obj
 (*
mp_fun_�b�
.
��am_�ad�to_obj
)

	)

105 
	#mp_��am_unbuf�d_�adl�e_obj
 (*
mp_fun_�b�
.
��am_unbuf�d_�adl�e_obj
)

	)

106 
	#mp_��am_wr�e_obj
 (*
mp_fun_�b�
.
��am_wr�e_obj
)

	)

108 
	#mp_cڡ_n�e
 ((
mp_obj_t
)
mp_fun_�b�
.
cڡ_n�e
)

	)

109 
	#mp_cڡ_�l�
 ((
mp_obj_t
)
mp_fun_�b�
.
cڡ_�l�
)

	)

110 
	#mp_cڡ_�ue
 ((
mp_obj_t
)
mp_fun_�b�
.
cڡ_�ue
)

	)

111 
	#mp_cڡ_em�y_by�s
 (
	`MP_OBJ_TYPE_GET_SLOT
(&
mp_ty�_by�s
, 
make_�w
)(
NULL
, 0, 0, NULL))

	)

112 
	#mp_cڡ_em�y_tu�e
 (
mp_fun_�b�
.
	`�w_tu�e
(0, 
NULL
))

	)

114 
	#mp_obj_�w_bo�
(
b
�((b�? (
mp_obj_t
)
mp_fun_�b�
.
cڡ_�ue
 : (mp_obj_t)mp_fun_�b�.
cڡ_�l�
)

	)

115 
	#mp_obj_�w_�t
(
i
�(
mp_fun_�b�
.
	`�tive_to_obj
(i, 
MP_NATIVE_TYPE_INT
))

	)

116 
	#mp_obj_�w_�t_�om_u�t
(
i
�(
mp_fun_�b�
.
	`�tive_to_obj
(i, 
MP_NATIVE_TYPE_UINT
))

	)

117 
	#mp_obj_�w_�r
(
d�a
, 
�n
�(
mp_fun_�b�
.
	`obj_�w_�r
((d�a), (�n)))

	)

118 
	#mp_obj_�w_�r_of_ty�
(
t
, 
d
, 
l
�(
	`mp_obj_�w_�r_of_ty�_dyn
(�), (d), (l)))

	)

119 
	#mp_obj_�w_by�s
(
d�a
, 
�n
�(
mp_fun_�b�
.
	`obj_�w_by�s
((d�a), (�n)))

	)

120 
	#mp_obj_�w_by���y_by_�f
(
n
, 
i
�(
mp_fun_�b�
.
	`obj_�w_by���y_by_�f
(�), (i)))

	)

121 
	#mp_obj_�w_tu�e
(
n
, 
�ems
�(
mp_fun_�b�
.
	`�w_tu�e
(�), (�ems)))

	)

122 
	#mp_obj_�w_li�
(
n
, 
�ems
�(
mp_fun_�b�
.
	`�w_li�
(�), (�ems)))

	)

123 
	#mp_obj_�w_di�
(
n
�(
mp_fun_�b�
.
	`�w_di�
(�)))

	)

125 
	#mp_obj_g�_ty�
(
o
�(
mp_fun_�b�
.
	`obj_g�_ty�
((o)))

	)

126 
	#mp_obj_��_to_�tive_ba�
(
o
, 
t
�(
	`mp_obj_��_to_�tive_ba�_dyn
((o), (t)))

	)

127 
	#mp_obj_g�_�t
(
o
�(
mp_fun_�b�
.
	`�tive_�om_obj
(o, 
MP_NATIVE_TYPE_INT
))

	)

128 
	#mp_obj_g�_�t_�un��d
(
o
�(
mp_fun_�b�
.
	`�tive_�om_obj
(o, 
MP_NATIVE_TYPE_UINT
))

	)

129 
	#mp_obj_�r_g�_�r
(
s
�(
	`mp_obj_�r_g�_d�a_dyn
((s), 
NULL
))

	)

130 
	#mp_obj_�r_g�_d�a
(
o
, 
�n
�(
	`mp_obj_�r_g�_d�a_dyn
((o), (�n)))

	)

131 
	#mp_g�_buf�r
(
o
, 
buf�fo
, 
�
�(
mp_fun_�b�
.
	`g�_buf�r
((o), (buf�fo), (�)))

	)

132 
	#mp_g�_buf�r_�i�
(
o
, 
buf�fo
, 
�
�(
mp_fun_�b�
.
	`g�_buf�r
((o), (buf�fo), (��| 
MP_BUFFER_RAISE_IF_UNSUPPORTED
))

	)

133 
	#mp_g�_��am_�i�
(
s
, 
�ags
�(
mp_fun_�b�
.
	`g�_��am_�i�
((s), (�ags)))

	)

134 
	#mp_obj_is_�ue
(
o
�(
mp_fun_�b�
.
	`�tive_�om_obj
(o, 
MP_NATIVE_TYPE_BOOL
))

	)

136 
	#mp_obj_�n
(
o
�(
	`mp_obj_�n_dyn
(o))

	)

137 
	#mp_obj_subs�
(
ba�
, 
�dex
, 
v�
�(
mp_fun_�b�
.
	`obj_subs�
((ba�), (�dex), (v�)))

	)

138 
	#mp_obj_g�_��y
(
o
, 
�n
, 
�ems
�(
	`mp_obj_g�_��y_dyn
((o), (�n), (�ems)))

	)

139 
	#mp_obj_li�_��nd
(
li�
, 
�em
�(
mp_fun_�b�
.
	`li�_��nd
(�i�), (�em)))

	)

140 
	#mp_obj_di�_��e
(
di�
, 
key
, 
v�
�(
mp_fun_�b�
.
	`di�_��e
((di�), (key), (v�)))

	)

142 
	#mp_obj_m�loc_h��r
(
n
, 
t
�(
	`mp_obj_m�loc_h��r_dyn
�,�))

	)

144 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_�r_of_ty�_dyn
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

145 i�(
ty�
 =�&
mp_ty�_�r
) {

146  
	`mp_obj_�w_�r
((cڡ *)
d�a
, 
�n
);

148  
	`mp_obj_�w_by�s
(
d�a
, 
�n
);

150 
	}
}

152 
�l�e
 
mp_obj_t
 
	$mp_obj_��_to_�tive_ba�_dyn
(
mp_obj_t
 
�lf_�
, 
mp_cڡ_obj_t
 
�tive_ty�
) {

153 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

155 i�(
	`MP_OBJ_FROM_PTR
(
�lf_ty�
�=�
�tive_ty�
) {

156  
�lf_�
;

157 } i�(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
�lf_ty�
, 
���
�!�
�tive_ty�
) {

160  
MP_OBJ_NULL
;

162 
mp_obj_����_t
 *
�lf
 = (mp_obj_����_�*)
	`MP_OBJ_TO_PTR
(
�lf_�
);

163  
�lf
->
subobj
[0];

165 
	}
}

167 
�l�e
 *
	$mp_obj_�r_g�_d�a_dyn
(
mp_obj_t
 
o
, 
size_t
 *
l
) {

168 
mp_buf�r_�fo_t
 
buf�fo
;

169 
	`mp_g�_buf�r_�i�
(
o
, &
buf�fo
, 
MP_BUFFER_READ
);

170 i�(
l
 !�
NULL
) {

171 *
l
 = 
buf�fo
.
�n
;

173  
buf�fo
.
buf
;

174 
	}
}

176 
�l�e
 
mp_obj_t
 
	$mp_obj_�n_dyn
(
mp_obj_t
 
o
) {

178  
mp_fun_�b�
.
	`��_fun�i�_n_kw
(mp_fun_�b�.
	`l�d_�me
(
MP_QSTR_�n
), 1, &
o
);

179 
	}
}

181 
�l�e
 *
	$mp_obj_m�loc_h��r_dyn
(
size_t
 
num_by�s
, cڡ 
mp_obj_ty�_t
 *
ty�
) {

182 
mp_obj_ba�_t
 *
ba�
 = (mp_obj_ba�_�*)
	`m_m�loc
(
num_by�s
);

183 
ba�
->
ty�
 =�ype;

184  
ba�
;

185 
	}
}

190 
	#mp_b��y_g�_size
(
�ru�_ty�
, 
v�_ty�
, 
�lign
�(
mp_fun_�b�
.
	`b��y_g�_size
((�ru�_ty�), (v�_ty�), (�lign)))

	)

191 
	#mp_b��y_g�_v�_��y
(
ty�code
, 
p
, 
�dex
�(
mp_fun_�b�
.
	`b��y_g�_v�_��y
(�y�code), (p), (�dex)))

	)

192 
	#mp_b��y_�t_v�_��y
(
ty�code
, 
p
, 
�dex
, 
v�_�
�(
mp_fun_�b�
.
	`b��y_�t_v�_��y
(�y�code), (p), (�dex), (v�_�)))

	)

194 
	#mp_l�d_�me
(
q�
�(
mp_fun_�b�
.
	`l�d_�me
((q�)))

	)

195 
	#mp_l�d_glob�
(
q�
�(
mp_fun_�b�
.
	`l�d_glob�
((q�)))

	)

196 
	#mp_l�d_��
(
ba�
, 
��
�(
mp_fun_�b�
.
	`l�d_��
((ba�), (��)))

	)

197 
	#mp_l�d_m�hod
(
ba�
, 
��
, 
de�
�(
mp_fun_�b�
.
	`l�d_m�hod
((ba�), (��), (de�)))

	)

198 
	#mp_l�d_m�hod_maybe
(
ba�
, 
��
, 
de�
�(
mp_fun_�b�
.
	`l�d_m�hod_maybe
((ba�), (��), (de�)))

	)

199 
	#mp_l�d_su�r_m�hod
(
��
, 
de�
�(
mp_fun_�b�
.
	`l�d_su�r_m�hod
(׉r), (de�)))

	)

200 
	#mp_��e_�me
(
q�
, 
obj
�(
mp_fun_�b�
.
	`��e_�me
((q�), (obj)))

	)

201 
	#mp_��e_glob�
(
q�
, 
obj
�(
mp_fun_�b�
.
	`��e_glob�
((q�), (obj)))

	)

202 
	#mp_��e_��
(
ba�
, 
��
, 
v�
�(
mp_fun_�b�
.
	`��e_��
((ba�), (��), (v�)))

	)

204 
	#mp_u�ry_�
(
�
, 
obj
�(
mp_fun_�b�
.
	`u�ry_�
((�), (obj)))

	)

205 
	#mp_b��y_�
(
�
, 
lhs
, 
rhs
�(
mp_fun_�b�
.
	`b��y_�
((�), (lhs), (rhs)))

	)

207 
	#mp_make_fun�i�_�om_��o_fun
(
rc
, 
cڋxt
, 
def_�gs
) \

208 (
mp_fun_�b�
.
	`make_fun�i�_�om_��o_fun
((
rc
), (
cڋxt
), (
def_�gs
)))

	)

210 
	#mp_��_fun�i�_n_kw
(
fun
, 
n_�gs
, 
n_kw
, 
�gs
) \

211 (
mp_fun_�b�
.
	`��_fun�i�_n_kw
((
fun
), (
n_�gs
�| ((
n_kw
�<< 8), 
�gs
))

	)

213 
	#mp_�g_check_num
(
n_�gs
, 
n_kw
, 
n_�gs_m�
, 
n_�gs_max
, 
�kes_kw
) \

214 (
mp_fun_�b�
.
	`�g_check_num_sig
((
n_�gs
), (
n_kw
), 
	`MP_OBJ_FUN_MAKE_SIG
((
n_�gs_m�
), (
n_�gs_max
), (
�kes_kw
))))

	)

216 
	#mp_�g_�r�_�l
(
n_pos
, 
pos
, 
kws
, 
n_�lowed
, 
�lowed
, 
out_v�s
) \

217 (
mp_fun_�b�
.
	`�g_�r�_�l
((
n_pos
), (
pos
), (
kws
), (
n_�lowed
), (
�lowed
), (
out_v�s
)))

	)

219 
	#mp_�g_�r�_�l_kw_��y
(
n_pos
, 
n_kw
, 
�gs
, 
n_�lowed
, 
�lowed
, 
out_v�s
) \

220 (
mp_fun_�b�
.
	`�g_�r�_�l_kw_��y
((
n_pos
), (
n_kw
), (
�gs
), (
n_�lowed
), (
�lowed
), (
out_v�s
)))

	)

222 
	#MP_DYNRUNTIME_INIT_ENTRY
 \

223 
mp_obj_t
 
�d_glob�s
 = 
mp_fun_�b�
.
	`sw�_glob�s
(
�lf
->
cڋxt
->
modu�
.
glob�s
); \

224 
mp_�w_code_�un��d_t
 
rc
; \

225 
rc
.
��o_fun_�di�t�
[0] = 
MP_PROTO_FUN_INDICATOR_RAW_CODE_0
; \

226 
rc
.
��o_fun_�di�t�
[1] = 
MP_PROTO_FUN_INDICATOR_RAW_CODE_1
; \

227 
rc
.
k�d
 = 
MP_CODE_NATIVE_VIPER
; \

228 
rc
.
is_g����
 = 0; \

229 ()
rc
;

	)

231 
	#MP_DYNRUNTIME_INIT_EXIT
 \

232 
mp_fun_�b�
.
	`sw�_glob�s
(
�d_glob�s
); \

233  
mp_cڡ_n�e
;

	)

235 
	#MP_DYNRUNTIME_MAKE_FUNCTION
(
f
) \

236 (
	`mp_make_fun�i�_�om_��o_fun
((
rc
.
fun_d�a
 = (
f
), (cڡ 
mp_�w_code_t
 *)&rc), 
�lf
->
cڋxt
, 
NULL
))

	)

238 
	#mp_imp�t_�me
(
�me
, 
�omli�
, 
�v�
) \

239 (
mp_fun_�b�
.
	`imp�t_�me
((
�me
), (
�omli�
), (
�v�
)))

	)

240 
	#mp_imp�t_�om
(
modu�
, 
�me
) \

241 (
mp_fun_�b�
.
	`imp�t_�om
((
modu�
), (
�me
)))

	)

242 
	#mp_imp�t_�l
(
modu�
) \

243 (
mp_fun_�b�
.
	`imp�t_�l
((
modu�
))

	)

248 
	#mp_obj_ex��i�_make_�w
 (
	`MP_OBJ_TYPE_GET_SLOT
(&
mp_ty�_Ex��i�
, 
make_�w
))

	)

249 
	#mp_obj_ex��i�_��t
 (
	`MP_OBJ_TYPE_GET_SLOT
(&
mp_ty�_Ex��i�
, 
��t
))

	)

250 
	#mp_obj_ex��i�_��
 (
	`MP_OBJ_TYPE_GET_SLOT
(&
mp_ty�_Ex��i�
, 
��
))

	)

252 
	#mp_obj_�w_ex��i�
(
o
�((
mp_obj_t
)(o))

253 
	#mp_obj_�w_ex��i�_�g1
(
e_ty�
, 
�g
�(
	`mp_obj_�w_ex��i�_�g1_dyn
(�_ty�), (�g)))

	)

255 
	#�r_�i�
(
o
�(
	`mp_�i�_dyn
(o))

	)

256 
	#mp_�i�_ty�_�g
(
ty�
, 
�g
�(
	`mp_�i�_dyn
(
	`mp_obj_�w_ex��i�_�g1_dyn
(�y�), (�g))))

	)

257 
	#mp_�i�_msg
(
ty�
, 
msg
�(
mp_fun_�b�
.
	`�i�_msg
(�y�), (msg)))

	)

258 
	#mp_�i�_OSE��
(
�
�(
	`mp_�i�_OSE��_dyn
�r))

	)

259 
	#mp_�i�_N�Im�em��dE��
(
msg
�(
	`mp_�i�_msg
(&
mp_ty�_N�Im�em��dE��
, (msg)))

	)

260 
	#mp_�i�_Ty�E��
(
msg
�(
	`mp_�i�_msg
(&
mp_ty�_Ty�E��
, (msg)))

	)

261 
	#mp_�i�_V�ueE��
(
msg
�(
	`mp_�i�_msg
(&
mp_ty�_V�ueE��
, (msg)))

	)

263 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_ex��i�_�g1_dyn
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_obj_t
 
�g
) {

264 
mp_obj_t
 
�gs
[1] = { 
�g
 };

265  
	`mp_��_fun�i�_n_kw
(
	`MP_OBJ_FROM_PTR
(
exc_ty�
), 1, 0, &
�gs
[0]);

266 
	}
}

268 
NORETURN
 
�l�e
 
	$mp_�i�_dyn
(
mp_obj_t
 
o
) {

269 
mp_fun_�b�
.
	`�i�
(
o
);

272 
	}
}

274 
�l�e
 
	$mp_�i�_OSE��_dyn
(
�
) {

275 
mp_obj_t
 
�gs
[1] = { 
	`MP_OBJ_NEW_SMALL_INT
(
�
) };

276 
	`�r_�i�
(
	`mp_��_fun�i�_n_kw
(
	`mp_l�d_glob�
(
MP_QSTR_OSE��
), 1, 0, &
�gs
[0]));

277 
	}
}

279 
�l�e
 
	$mp_obj_ex��i�_��
(
mp_obj_fu�_ty�_t
 *
exc
, 
q�r
 
�me
, cڡ 
mp_obj_ty�_t
 *
ba�
) {

280 
exc
->
ba�
.
ty�
 = &
mp_ty�_ty�
;

281 
exc
->
�ags
 = 
MP_TYPE_FLAG_NONE
;

282 
exc
->
�me
 =�ame;

283 
	`MP_OBJ_TYPE_SET_SLOT
(
exc
, 
make_�w
, 
mp_obj_ex��i�_make_�w
, 0);

284 
	`MP_OBJ_TYPE_SET_SLOT
(
exc
, 
��t
, 
mp_obj_ex��i�_��t
, 1);

285 
	`MP_OBJ_TYPE_SET_SLOT
(
exc
, 
��
, 
mp_obj_ex��i�_��
, 2);

286 
	`MP_OBJ_TYPE_SET_SLOT
(
exc
, 
���
, 
ba�
, 3);

287 
	}
}

292 
	#mp_obj_�w_��t_�om_f
(
f
�(
mp_fun_�b�
.
	`obj_�w_��t_�om_f
((f)))

	)

293 
	#mp_obj_�w_��t_�om_d
(
d
�(
mp_fun_�b�
.
	`obj_�w_��t_�om_d
((d)))

	)

294 
	#mp_obj_g�_��t_to_f
(
o
�(
mp_fun_�b�
.
	`obj_g�_��t_to_f
((o)))

	)

295 
	#mp_obj_g�_��t_to_d
(
o
�(
mp_fun_�b�
.
	`obj_g�_��t_to_d
((o)))

	)

297 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


298 
	#mp_obj_�w_��t
(
f
�(
	`mp_obj_�w_��t_�om_f
((f)))

	)

299 
	#mp_obj_g�_��t
(
o
�(
	`mp_obj_g�_��t_to_f
((o)))

	)

300 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


301 
	#mp_obj_�w_��t
(
f
�(
	`mp_obj_�w_��t_�om_d
((f)))

	)

302 
	#mp_obj_g�_��t
(
o
�(
	`mp_obj_g�_��t_to_d
((o)))

	)

309 
�l�e
 
	$mp_obj_g�_��y_dyn
(
mp_obj_t
 
o
, 
size_t
 *
�n
, mp_obj_�**
�ems
) {

310 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o
);

311 i�(
ty�
 =�&
mp_ty�_tu�e
) {

312 
mp_obj_tu�e_t
 *
t
 = 
	`MP_OBJ_TO_PTR
(
o
);

313 *
�n
 = 
t
->len;

314 *
�ems
 = &
t
->items[0];

315 } i�(
ty�
 =�&
mp_ty�_li�
) {

316 
mp_obj_li�_t
 *
l
 = 
	`MP_OBJ_TO_PTR
(
o
);

317 *
�n
 = 
l
->len;

318 *
�ems
 = 
l
->items;

320 
	`mp_�i�_Ty�E��
("expected�uple/list");

322 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emit.h

26 #i�de�
MICROPY_INCLUDED_PY_EMIT_H


27 
	#MICROPY_INCLUDED_PY_EMIT_H


	)

29 
	~"py/�x�.h
"

30 
	~"py/sc�e.h
"

43 
	mMP_PASS_SCOPE
 = 1,

44 
	mMP_PASS_STACK_SIZE
 = 2,

45 
	mMP_PASS_CODE_SIZE
 = 3,

46 
	mMP_PASS_EMIT
 = 4,

47 } 
	t�ss_k�d_t
;

49 
	#MP_EMIT_STAR_FLAG_SINGLE
 (0x01)

	)

50 
	#MP_EMIT_STAR_FLAG_DOUBLE
 (0x02)

	)

52 
	#MP_EMIT_BREAK_FROM_FOR
 (0x8000)

	)

55 
	#MP_EMIT_IDOP_LOCAL_FAST
 (0)

	)

56 
	#MP_EMIT_IDOP_LOCAL_DEREF
 (1)

	)

59 
	#MP_EMIT_IDOP_GLOBAL_NAME
 (0)

	)

60 
	#MP_EMIT_IDOP_GLOBAL_GLOBAL
 (1)

	)

63 
	#MP_EMIT_IMPORT_NAME
 (0)

	)

64 
	#MP_EMIT_IMPORT_FROM
 (1)

	)

65 
	#MP_EMIT_IMPORT_STAR
 (2)

	)

68 
	#MP_EMIT_SUBSCR_LOAD
 (0)

	)

69 
	#MP_EMIT_SUBSCR_STORE
 (1)

	)

70 
	#MP_EMIT_SUBSCR_DELETE
 (2)

	)

73 
	#MP_EMIT_ATTR_LOAD
 (0)

	)

74 
	#MP_EMIT_ATTR_STORE
 (1)

	)

75 
	#MP_EMIT_ATTR_DELETE
 (2)

	)

78 
	#MP_EMIT_SETUP_BLOCK_WITH
 (0)

	)

79 
	#MP_EMIT_SETUP_BLOCK_EXCEPT
 (1)

	)

80 
	#MP_EMIT_SETUP_BLOCK_FINALLY
 (2)

	)

83 
	#MP_EMIT_BUILD_TUPLE
 (0)

	)

84 
	#MP_EMIT_BUILD_LIST
 (1)

	)

85 
	#MP_EMIT_BUILD_MAP
 (2)

	)

86 
	#MP_EMIT_BUILD_SET
 (3)

	)

87 
	#MP_EMIT_BUILD_SLICE
 (4)

	)

90 
	#MP_EMIT_YIELD_VALUE
 (0)

	)

91 
	#MP_EMIT_YIELD_FROM
 (1)

	)

93 
_em�_t
 
	tem�_t
;

95 
	s_mp_em�_comm�_t
 {

96 
�ss_k�d_t
 
	m�ss
;

97 
u�t16_t
 
	m�_cur_ch�d
;

98 
mp_�w_code_t
 **
	mch�d�n
;

99 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


100 
mp_m�_t
 
	mq�r_m�
;

102 
mp_obj_li�_t
 
	mcڡ_obj_li�
;

103 } 
	tmp_em�_comm�_t
;

105 
	s_mp_em�_m�hod_�b�_id_�s_t
 {

106 (*
	mlo�l
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
, 
mp_u�t_t
 
	mlo�l_num
, 
	mk�d
);

107 (*
	mglob�
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
, 
	mk�d
);

108 } 
	tmp_em�_m�hod_�b�_id_�s_t
;

110 
	s_em�_m�hod_�b�_t
 {

111 #i�
MICROPY_DYNAMIC_COMPILER


112 
	mem�_t
 *(*
	mem�_�w
)(
mp_em�_comm�_t
 * 
	mem�_comm�
, 
mp_obj_t
 *
	m�r�_��
, 
u�t
 *
	m�b�_��
, 
mp_u�t_t
 
	mmax_num_�b�s
);

113 (*
	mem�_�
)(
em�_t
 *
	mem�
);

116 (*
	m��t_�ss
)(
em�_t
 *
	mem�
, 
�ss_k�d_t
 
	m�ss
, 
sc�e_t
 *
	msc�e
);

117 
bo�
 (*
�d_�ss
)(
em�_t
 *
	mem�
);

118 (*
	madju�_�ack_size
)(
em�_t
 *
	mem�
, 
mp_�t_t
 
	md��
);

119 (*
	m�t_sour�_l�e
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	ml�e
);

121 
mp_em�_m�hod_�b�_id_�s_t
 
	ml�d_id
;

122 
mp_em�_m�hod_�b�_id_�s_t
 
	m��e_id
;

123 
mp_em�_m�hod_�b�_id_�s_t
 
	md��e_id
;

125 (*
	m�b�_assign
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	ml
);

126 (*
	mimp�t
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
, 
	mk�d
);

127 (*
	ml�d_cڡ_tok
)(
em�_t
 *
	mem�
, 
mp_tok�_k�d_t
 
	mtok
);

128 (*
	ml�d_cڡ_sm�l_�t
)(
em�_t
 *
	mem�
, 
mp_�t_t
 
	m�g
);

129 (*
	ml�d_cڡ_�r
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
);

130 (*
	ml�d_cڡ_obj
)(
em�_t
 *
	mem�
, 
mp_obj_t
 
	mobj
);

131 (*
	ml�d_nu�
)(
em�_t
 *
	mem�
);

132 (*
	ml�d_m�hod
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
, 
bo�
 
	mis_su�r
);

133 (*
	ml�d_bu�d_�ass
)(
em�_t
 *
	mem�
);

134 (*
	msubs�
)(
em�_t
 *
	mem�
, 
	mk�d
);

135 (*
	m��
)(
em�_t
 *
	mem�
, 
q�r
 
	mq�
, 
	mk�d
);

136 (*
	mdup_t�
)(
em�_t
 *
	mem�
);

137 (*
	mdup_t�_two
)(
em�_t
 *
	mem�
);

138 (*
	mp�_t�
)(
em�_t
 *
	mem�
);

139 (*
	mr�_two
)(
em�_t
 *
	mem�
);

140 (*
	mr�_th�e
)(
em�_t
 *
	mem�
);

141 (*
	mjump
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
);

142 (*
	mp�_jump_if
)(
em�_t
 *
	mem�
, 
bo�
 
	mc�d
, 
mp_u�t_t
 
	m�b�
);

143 (*
	mjump_if_�_p�
)(
em�_t
 *
	mem�
, 
bo�
 
	mc�d
, 
mp_u�t_t
 
	m�b�
);

144 (*
	munw�d_jump
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
, mp_u�t_�
	mex��_d�th
);

145 (*
	m�tup_block
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
, 
	mk�d
);

146 (*
	mw�h_��nup
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
);

147 #i�
MICROPY_PY_ASYNC_AWAIT


148 (*
	masync_w�h_�tup_f��ly
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�_�x�_no_exc
, mp_u�t_�
	m�b�_f��ly_block
, mp_u�t_�
	m�b�_�t_unw�d_jump
);

150 (*
	m�d_f��ly
)(
em�_t
 *
	mem�
);

151 (*
	mg�_��
)(
em�_t
 *
	mem�
, 
bo�
 
	mu�_�ack
);

152 (*
	mf�_��
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
);

153 (*
	mf�_��_�d
)(
em�_t
 *
	mem�
);

154 (*
	mp�_ex��_jump
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�
, 
bo�
 
	mw�h�_exc_h�d�r
);

155 (*
	mu�ry_�
)(
em�_t
 *
	mem�
, 
mp_u�ry_�_t
 
	m�
);

156 (*
	mb��y_�
)(
em�_t
 *
	mem�
, 
mp_b��y_�_t
 
	m�
);

157 (*
	mbu�d
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_�gs
, 
	mk�d
);

158 (*
	m��e_m�
)(
em�_t
 *
	mem�
);

159 (*
	m��e_comp
)(
em�_t
 *
	mem�
, 
sc�e_k�d_t
 
	mk�d
, 
mp_u�t_t
 
	m�t_�ack_�dex
);

160 (*
	mu�ack_�qu��
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_�gs
);

161 (*
	mu�ack_ex
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_��
, mp_u�t_�
	mn_right
);

162 (*
	mmake_fun�i�
)(
em�_t
 *
	mem�
, 
sc�e_t
 *
	msc�e
, 
mp_u�t_t
 
	mn_pos_de�u�s
, mp_u�t_�
	mn_kw_de�u�s
);

163 (*
	mmake_�osu�
)(
em�_t
 *
	mem�
, 
sc�e_t
 *
	msc�e
, 
mp_u�t_t
 
	mn_�o�d_ov�
, mp_u�t_�
	mn_pos_de�u�s
, mp_u�t_�
	mn_kw_de�u�s
);

164 (*
	m��_fun�i�
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_pos�iڮ
, mp_u�t_�
	mn_keyw�d
, mp_u�t_�
	m��_�ags
);

165 (*
	m��_m�hod
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_pos�iڮ
, mp_u�t_�
	mn_keyw�d
, mp_u�t_�
	m��_�ags
);

166 (*
	m�tu�_v�ue
)(
em�_t
 *
	mem�
);

167 (*
	m�i�_v��gs
)(
em�_t
 *
	mem�
, 
mp_u�t_t
 
	mn_�gs
);

168 (*
	my�ld
)(
em�_t
 *
	mem�
, 
	mk�d
);

172 (*
	m��t_ex��_h�d�r
)(
em�_t
 *
	mem�
);

173 (*
	m�d_ex��_h�d�r
)(
em�_t
 *
	mem�
);

174 } 
	tem�_m�hod_�b�_t
;

176 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


177 
q�r_sh�t_t
 
mp_em�_comm�_u�_q�r
(
mp_em�_comm�_t
 *
em�
, 
q�r
 
q�
);

179 
�l�e
 
q�r_sh�t_t
 
	$mp_em�_comm�_u�_q�r
(
mp_em�_comm�_t
 *
em�
, 
q�r
 
q�
) {

180  
q�
;

181 
	}
}

184 
size_t
 
mp_em�_comm�_u�_cڡ_obj
(
mp_em�_comm�_t
 *
em�
, 
mp_obj_t
 
cڡ_obj
);

186 
�l�e
 
size_t
 
	$mp_em�_comm�_�loc_cڡ_ch�d
(
mp_em�_comm�_t
 *
em�
, 
mp_�w_code_t
 *
rc
) {

187 i�(
em�
->
�ss
 =�
MP_PASS_EMIT
) {

188 
em�
->
ch�d�n
[em�->
�_cur_ch�d
] = 
rc
;

190  
em�
->
�_cur_ch�d
++;

191 
	}
}

193 
�l�e
 
	$mp_em�_comm�_g�_id_f�_l�d
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

194 
	`sc�e_f�d_�_add_id
(
sc�e
, 
q�
, 
ID_INFO_KIND_GLOBAL_IMPLICIT
);

195 
	}
}

197 
id_�fo_t
 *
mp_em�_comm�_g�_id_f�_modifi�ti�
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
);

198 
mp_em�_comm�_id_�
(
em�_t
 *
em�
, cڡ 
mp_em�_m�hod_�b�_id_�s_t
 *
em�_m�hod_�b�
, 
sc�e_t
 *
sc�e
, 
q�r
 
q�
);

200 
cڡ 
em�_m�hod_�b�_t
 
em�_bc_m�hod_�b�
;

201 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_x64_m�hod_�b�
;

202 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_x86_m�hod_�b�
;

203 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_thumb_m�hod_�b�
;

204 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_�m_m�hod_�b�
;

205 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_x�n�_m�hod_�b�
;

206 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_x�n�w�_m�hod_�b�
;

207 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_rv32_m�hod_�b�
;

208 
cڡ 
em�_m�hod_�b�_t
 
em�_�tive_debug_m�hod_�b�
;

210 
cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
mp_em�_bc_m�hod_�b�_l�d_id_�s
;

211 
cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
mp_em�_bc_m�hod_�b�_��e_id_�s
;

212 
cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
mp_em�_bc_m�hod_�b�_d��e_id_�s
;

214 
em�_t
 *
em�_bc_�w
(
mp_em�_comm�_t
 *
em�_comm�
);

215 
em�_t
 *
em�_�tive_x64_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

216 
em�_t
 *
em�_�tive_x86_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

217 
em�_t
 *
em�_�tive_thumb_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

218 
em�_t
 *
em�_�tive_�m_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

219 
em�_t
 *
em�_�tive_x�n�_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

220 
em�_t
 *
em�_�tive_x�n�w�_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

221 
em�_t
 *
em�_�tive_rv32_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

222 
em�_t
 *
em�_�tive_debug_�w
(
mp_em�_comm�_t
 *
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
);

224 
em�_bc_�t_max_num_�b�s
(
em�_t
 *
em�
, 
mp_u�t_t
 
max_num_�b�s
);

226 
em�_bc_�
(
em�_t
 *
em�
);

227 
em�_�tive_x64_�
(
em�_t
 *
em�
);

228 
em�_�tive_x86_�
(
em�_t
 *
em�
);

229 
em�_�tive_thumb_�
(
em�_t
 *
em�
);

230 
em�_�tive_�m_�
(
em�_t
 *
em�
);

231 
em�_�tive_x�n�_�
(
em�_t
 *
em�
);

232 
em�_�tive_x�n�w�_�
(
em�_t
 *
em�
);

233 
em�_�tive_rv32_�
(
em�_t
 *
em�
);

234 
em�_�tive_debug_�
(
em�_t
 *
em�
);

236 
mp_em�_bc_��t_�ss
(
em�_t
 *
em�
, 
�ss_k�d_t
 
�ss
, 
sc�e_t
 *
sc�e
);

237 
bo�
 
mp_em�_bc_�d_�ss
(
em�_t
 *
em�
);

238 
mp_em�_bc_adju�_�ack_size
(
em�_t
 *
em�
, 
mp_�t_t
 
d��
);

239 
mp_em�_bc_�t_sour�_l�e
(
em�_t
 *
em�
, 
mp_u�t_t
 
l�e
);

241 
mp_em�_bc_l�d_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
);

242 
mp_em�_bc_l�d_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
);

243 
mp_em�_bc_��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
);

244 
mp_em�_bc_��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
);

245 
mp_em�_bc_d��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
);

246 
mp_em�_bc_d��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
);

248 
mp_em�_bc_�b�_assign
(
em�_t
 *
em�
, 
mp_u�t_t
 
l
);

249 
mp_em�_bc_imp�t
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
);

250 
mp_em�_bc_l�d_cڡ_tok
(
em�_t
 *
em�
, 
mp_tok�_k�d_t
 
tok
);

251 
mp_em�_bc_l�d_cڡ_sm�l_�t
(
em�_t
 *
em�
, 
mp_�t_t
 
�g
);

252 
mp_em�_bc_l�d_cڡ_�r
(
em�_t
 *
em�
, 
q�r
 
q�
);

253 
mp_em�_bc_l�d_cڡ_obj
(
em�_t
 *
em�
, 
mp_obj_t
 
obj
);

254 
mp_em�_bc_l�d_nu�
(
em�_t
 *
em�
);

255 
mp_em�_bc_l�d_m�hod
(
em�_t
 *
em�
, 
q�r
 
q�
, 
bo�
 
is_su�r
);

256 
mp_em�_bc_l�d_bu�d_�ass
(
em�_t
 *
em�
);

257 
mp_em�_bc_subs�
(
em�_t
 *
em�
, 
k�d
);

258 
mp_em�_bc_��
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
);

259 
mp_em�_bc_dup_t�
(
em�_t
 *
em�
);

260 
mp_em�_bc_dup_t�_two
(
em�_t
 *
em�
);

261 
mp_em�_bc_p�_t�
(
em�_t
 *
em�
);

262 
mp_em�_bc_r�_two
(
em�_t
 *
em�
);

263 
mp_em�_bc_r�_th�e
(
em�_t
 *
em�
);

264 
mp_em�_bc_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
);

265 
mp_em�_bc_p�_jump_if
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
);

266 
mp_em�_bc_jump_if_�_p�
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
);

267 
mp_em�_bc_unw�d_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, mp_u�t_�
ex��_d�th
);

268 
mp_em�_bc_�tup_block
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
k�d
);

269 
mp_em�_bc_w�h_��nup
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
);

270 #i�
MICROPY_PY_ASYNC_AWAIT


271 
mp_em�_bc_async_w�h_�tup_f��ly
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�_�x�_no_exc
, mp_u�t_�
�b�_f��ly_block
, mp_u�t_�
�b�_�t_unw�d_jump
);

273 
mp_em�_bc_�d_f��ly
(
em�_t
 *
em�
);

274 
mp_em�_bc_g�_��
(
em�_t
 *
em�
, 
bo�
 
u�_�ack
);

275 
mp_em�_bc_f�_��
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
);

276 
mp_em�_bc_f�_��_�d
(
em�_t
 *
em�
);

277 
mp_em�_bc_p�_ex��_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
bo�
 
w�h�_exc_h�d�r
);

278 
mp_em�_bc_u�ry_�
(
em�_t
 *
em�
, 
mp_u�ry_�_t
 
�
);

279 
mp_em�_bc_b��y_�
(
em�_t
 *
em�
, 
mp_b��y_�_t
 
�
);

280 
mp_em�_bc_bu�d
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
, 
k�d
);

281 
mp_em�_bc_��e_m�
(
em�_t
 *
em�
);

282 
mp_em�_bc_��e_comp
(
em�_t
 *
em�
, 
sc�e_k�d_t
 
k�d
, 
mp_u�t_t
 
li�_�ack_�dex
);

283 
mp_em�_bc_u�ack_�qu��
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
);

284 
mp_em�_bc_u�ack_ex
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_��
, mp_u�t_�
n_right
);

285 
mp_em�_bc_make_fun�i�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
);

286 
mp_em�_bc_make_�osu�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_�o�d_ov�
, mp_u�t_�
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
);

287 
mp_em�_bc_��_fun�i�
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
);

288 
mp_em�_bc_��_m�hod
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
);

289 
mp_em�_bc_�tu�_v�ue
(
em�_t
 *
em�
);

290 
mp_em�_bc_�i�_v��gs
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
);

291 
mp_em�_bc_y�ld
(
em�_t
 *
em�
, 
k�d
);

292 
mp_em�_bc_��t_ex��_h�d�r
(
em�_t
 *
em�
);

293 
mp_em�_bc_�d_ex��_h�d�r
(
em�_t
 *
em�
);

295 
_em�_�l�e_asm_t
 
	tem�_�l�e_asm_t
;

297 
	s_em�_�l�e_asm_m�hod_�b�_t
 {

298 #i�
MICROPY_DYNAMIC_COMPILER


299 
	mem�_�l�e_asm_t
 *(*
	masm_�w
)(
mp_u�t_t
 
	mmax_num_�b�s
);

300 (*
	masm_�
)(
em�_�l�e_asm_t
 *
	mem�
);

303 (*
	m��t_�ss
)(
em�_�l�e_asm_t
 *
	mem�
, 
�ss_k�d_t
 
	m�ss
, 
mp_obj_t
 *
	m�r�_��
);

304 (*
	m�d_�ss
)(
em�_�l�e_asm_t
 *
	mem�
, 
mp_u�t_t
 
	mty�_sig
);

305 
mp_u�t_t
 (*
cou�_��ms
)(
em�_�l�e_asm_t
 *
	mem�
, mp_u�t_�
	mn_��ms
, 
mp_�r�_node_t
 *
	m�_��ms
);

306 
bo�
 (*
�b�
)(
em�_�l�e_asm_t
 *
	mem�
, 
mp_u�t_t
 
	m�b�_num
, 
q�r
 
	m�b�_id
);

307 (*
	m�
)(
em�_�l�e_asm_t
 *
	mem�
, 
q�r
 op, 
mp_u�t_t
 
	mn_�gs
, 
mp_�r�_node_t
 *
	m�_�gs
);

308 } 
	tem�_�l�e_asm_m�hod_�b�_t
;

310 
cڡ 
em�_�l�e_asm_m�hod_�b�_t
 
em�_�l�e_thumb_m�hod_�b�
;

311 
cڡ 
em�_�l�e_asm_m�hod_�b�_t
 
em�_�l�e_x�n�_m�hod_�b�
;

313 
em�_�l�e_asm_t
 *
em�_�l�e_thumb_�w
(
mp_u�t_t
 
max_num_�b�s
);

314 
em�_�l�e_asm_t
 *
em�_�l�e_x�n�_�w
(
mp_u�t_t
 
max_num_�b�s
);

316 
em�_�l�e_thumb_�
(
em�_�l�e_asm_t
 *
em�
);

317 
em�_�l�e_x�n�_�
(
em�_�l�e_asm_t
 *
em�
);

319 #i�
MICROPY_WARNINGS


320 
mp_em��r_w�n�g
(
�ss_k�d_t
 
�ss
, cڡ *
msg
);

322 
	#mp_em��r_w�n�g
(
�ss
, 
msg
)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitbc.c

27 
	~<�dbo�.h
>

28 
	~<�d�t.h
>

29 
	~<�dio.h
>

30 
	~<�r�g.h
>

31 
	~<uni�d.h
>

32 
	~<as��.h
>

34 
	~"py/mp��e.h
"

35 
	~"py/sm�l�t.h
"

36 
	~"py/em�.h
"

37 
	~"py/bc0.h
"

39 #i�
MICROPY_ENABLE_COMPILER


41 
	#DUMMY_DATA_SIZE
 (
MP_ENCODE_UINT_MAX_BYTES
)

	)

43 
	s_em�_t
 {

47 
by�
 
	mdummy_d�a
[
DUMMY_DATA_SIZE
];

49 
�ss_k�d_t
 
	m�ss
 : 8;

54 
bo�
 
	msu��ss
;

56 
	m�ack_size
;

58 
mp_em�_comm�_t
 *
	mem�_comm�
;

59 
sc�e_t
 *
	msc�e
;

61 
mp_u�t_t
 
	mϡ_sour�_l�e_off�t
;

62 
mp_u�t_t
 
	mϡ_sour�_l�e
;

64 
size_t
 
	mmax_num_�b�s
;

65 
size_t
 *
	m�b�_off�ts
;

67 
size_t
 
	mcode_�fo_off�t
;

68 
size_t
 
	mcode_�fo_size
;

69 
size_t
 
	mby�code_off�t
;

70 
size_t
 
	mby�code_size
;

71 
by�
 *
	mcode_ba�
;

72 
bo�
 
	mov��ow
;

74 
size_t
 
	mn_�fo
;

75 
size_t
 
	mn_��
;

78 
em�_t
 *
	$em�_bc_�w
(
mp_em�_comm�_t
 *
em�_comm�
) {

79 
em�_t
 *
em�
 = 
	`m_�w0
(emit_t, 1);

80 
em�
->
em�_comm�
 =�mit_common;

81  
em�
;

82 
	}
}

84 
	$em�_bc_�t_max_num_�b�s
(
em�_t
 *
em�
, 
mp_u�t_t
 
max_num_�b�s
) {

85 
em�
->
max_num_�b�s
 = max_num_labels;

86 
em�
->
�b�_off�ts
 = 
	`m_�w
(
size_t
,�m�->
max_num_�b�s
);

87 
	}
}

89 
	$em�_bc_�
(
em�_t
 *
em�
) {

90 
	`m_d�
(
size_t
, 
em�
->
�b�_off�ts
,�m�->
max_num_�b�s
);

91 
	`m_d�_obj
(
em�_t
, 
em�
);

92 
	}
}

95 
u�t8_t
 *
	$em�_g�_cur_to_wr�e_code_�fo
(*
em�_�
, 
size_t
 
num_by�s_to_wr�e
) {

96 
em�_t
 *
em�
 = 
em�_�
;

97 i�(
em�
->
�ss
 < 
MP_PASS_EMIT
) {

98 
em�
->
code_�fo_off�t
 +�
num_by�s_to_wr�e
;

99  
em�
->
dummy_d�a
;

101 
	`as��
(
em�
->
code_�fo_off�t
 + 
num_by�s_to_wr�e
 <�em�->
code_�fo_size
);

102 
by�
 *
c
 = 
em�
->
code_ba�
 +�m�->
code_�fo_off�t
;

103 
em�
->
code_�fo_off�t
 +�
num_by�s_to_wr�e
;

104  
c
;

106 
	}
}

108 
	$em�_wr�e_code_�fo_by�
(
em�_t
 *
em�
, 
by�
 
v�
) {

109 *
	`em�_g�_cur_to_wr�e_code_�fo
(
em�
, 1��
v�
;

110 
	}
}

112 
	$em�_wr�e_code_�fo_q�r
(
em�_t
 *
em�
, 
q�r
 
q�
) {

113 
	`mp_�code_u�t
(
em�
, 
em�_g�_cur_to_wr�e_code_�fo
, 
	`mp_em�_comm�_u�_q�r
�m�->
em�_comm�
, 
q�
));

114 
	}
}

116 #i�
MICROPY_ENABLE_SOURCE_LINE


117 
	$em�_wr�e_code_�fo_by�s_l�es
(
em�_t
 *
em�
, 
mp_u�t_t
 
by�s_to_sk�
, mp_u�t_�
l�es_to_sk�
) {

118 
	`as��
(
by�s_to_sk�
 > 0 || 
l�es_to_sk�
 > 0);

119 
by�s_to_sk�
 > 0 || 
l�es_to_sk�
 > 0) {

120 
mp_u�t_t
 
b
, 
l
;

121 i�(
l�es_to_sk�
 <�6 || 
by�s_to_sk�
 > 0xf) {

123 
b
 = 
	`MIN
(
by�s_to_sk�
, 0x1f);

124 i�(
b
 < 
by�s_to_sk�
) {

126 
l
 = 0;

128 
l
 = 
	`MIN
(
l�es_to_sk�
, 0x3);

130 *
	`em�_g�_cur_to_wr�e_code_�fo
(
em�
, 1��
b
 | (
l
 << 5);

133 
b
 = 
	`MIN
(
by�s_to_sk�
, 0xf);

134 
l
 = 
	`MIN
(
l�es_to_sk�
, 0x7ff);

135 
by�
 *
ci
 = 
	`em�_g�_cur_to_wr�e_code_�fo
(
em�
, 2);

136 
ci
[0] = 0x80 | 
b
 | ((
l
 >> 4) & 0x70);

137 
ci
[1] = 
l
;

139 
by�s_to_sk�
 -�
b
;

140 
l�es_to_sk�
 -�
l
;

142 
	}
}

146 
u�t8_t
 *
	$em�_g�_cur_to_wr�e_by�code
(*
em�_�
, 
size_t
 
num_by�s_to_wr�e
) {

147 
em�_t
 *
em�
 = 
em�_�
;

148 i�(
em�
->
su��ss
) {

149  
em�
->
dummy_d�a
;

151 i�(
em�
->
�ss
 < 
MP_PASS_EMIT
) {

152 
em�
->
by�code_off�t
 +�
num_by�s_to_wr�e
;

153  
em�
->
dummy_d�a
;

155 
	`as��
(
em�
->
by�code_off�t
 + 
num_by�s_to_wr�e
 <�em�->
by�code_size
);

156 
by�
 *
c
 = 
em�
->
code_ba�
 +�m�->
code_�fo_size
 +�m�->
by�code_off�t
;

157 
em�
->
by�code_off�t
 +�
num_by�s_to_wr�e
;

158  
c
;

160 
	}
}

162 
	$em�_wr�e_by�code_�w_by�
(
em�_t
 *
em�
, 
by�
 
b1
) {

163 
by�
 *
c
 = 
	`em�_g�_cur_to_wr�e_by�code
(
em�
, 1);

164 
c
[0] = 
b1
;

165 
	}
}

167 
	$em�_wr�e_by�code_by�
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b1
) {

168 
	`mp_em�_bc_adju�_�ack_size
(
em�
, 
�ack_adj
);

169 
by�
 *
c
 = 
	`em�_g�_cur_to_wr�e_by�code
(
em�
, 1);

170 
c
[0] = 
b1
;

171 
	}
}

174 
	$em�_wr�e_by�code_by�_�t
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b1
, 
mp_�t_t
 
num
) {

175 
	`em�_wr�e_by�code_by�
(
em�
, 
�ack_adj
, 
b1
);

178 
by�
 
buf
[
MP_ENCODE_UINT_MAX_BYTES
];

179 
by�
 *
p
 = 
buf
 + (buf);

182 *--
p
 = 
num
 & 0x7f;

183 
num
 >>= 7;

184 } 
num
 != 0 &&�um != -1);

187 i�(
num
 =�-1 && (*
p
 & 0x40) == 0) {

188 *--
p
 = 0x7f;

189 } i�(
num
 =�0 && (*
p
 & 0x40) != 0) {

190 *--
p
 = 0;

193 
by�
 *
c
 = 
	`em�_g�_cur_to_wr�e_by�code
(
em�
, 
buf
 + (buf�- 
p
);

194 
p
 !�
buf
 + (buf) - 1) {

195 *
c
++ = *
p
++ | 0x80;

197 *
c
 = *
p
;

198 
	}
}

200 
	$em�_wr�e_by�code_by�_u�t
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b
, 
mp_u�t_t
 
v�
) {

201 
	`em�_wr�e_by�code_by�
(
em�
, 
�ack_adj
, 
b
);

202 
	`mp_�code_u�t
(
em�
, 
em�_g�_cur_to_wr�e_by�code
, 
v�
);

203 
	}
}

205 
	$em�_wr�e_by�code_by�_cڡ
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b
, 
mp_u�t_t
 
n
) {

206 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 
�ack_adj
, 
b
, 
n
);

207 
	}
}

209 
	$em�_wr�e_by�code_by�_q�r
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b
, 
q�r
 
q�
) {

210 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 
�ack_adj
, 
b
, 
	`mp_em�_comm�_u�_q�r
�m�->
em�_comm�
, 
q�
));

211 
	}
}

213 
	$em�_wr�e_by�code_by�_obj
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b
, 
mp_obj_t
 
obj
) {

214 
	`em�_wr�e_by�code_by�_cڡ
(
em�
, 
�ack_adj
, 
b
, 
	`mp_em�_comm�_u�_cڡ_obj
�m�->
em�_comm�
, 
obj
));

215 
	}
}

217 
	$em�_wr�e_by�code_by�_ch�d
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b
, 
mp_�w_code_t
 *
rc
) {

218 
	`em�_wr�e_by�code_by�_cڡ
(
em�
, 
�ack_adj
, 
b
,

219 
	`mp_em�_comm�_�loc_cڡ_ch�d
(
em�
->
em�_comm�
, 
rc
));

220 #i�
MICROPY_PY_SYS_SETTRACE


221 
rc
->
l�e_of_def��i�
 = 
em�
->
ϡ_sour�_l�e
;

223 
	}
}

230 
	$em�_wr�e_by�code_by�_�b�
(
em�_t
 *
em�
, 
�ack_adj
, 
by�
 
b1
, 
mp_u�t_t
 
�b�
) {

231 
	`mp_em�_bc_adju�_�ack_size
(
em�
, 
�ack_adj
);

233 i�(
em�
->
su��ss
) {

238 cڡ 
bo�
 
is_sig�d
 = 
b1
 <�
MP_BC_POP_JUMP_IF_FALSE
;

241 
jump_�cod�g_size
 = 1;

242 
ssize_t
 
by�code_off�t
 = 0;

245 i�(
em�
->
�ss
 >�
MP_PASS_CODE_SIZE
) {

247 
by�code_off�t
 = 
em�
->
�b�_off�ts
[
�b�
] -�mit->bytecode_offset - 2;

250 i�((
is_sig�d
 && -64 <�
by�code_off�t
 && bytecode_offset <= 63)

251 || (!
is_sig�d
 && (
size_t
)
by�code_off�t
 <= 127)) {

253 
jump_�cod�g_size
 = 0;

257 
by�code_off�t
 -�
jump_�cod�g_size
;

259 
	`as��
(
is_sig�d
 || 
by�code_off�t
 >= 0);

263 
by�
 *
c
 = 
	`em�_g�_cur_to_wr�e_by�code
(
em�
, 2 + 
jump_�cod�g_size
);

264 
c
[0] = 
b1
;

265 i�(
jump_�cod�g_size
 == 0) {

266 i�(
is_sig�d
) {

267 
by�code_off�t
 += 0x40;

269 
	`as��
(0 <�
by�code_off�t
 && bytecode_offset <= 0x7f);

270 
c
[1] = 
by�code_off�t
;

272 i�(
is_sig�d
) {

273 
by�code_off�t
 += 0x4000;

275 i�(
em�
->
�ss
 =�
MP_PASS_EMIT
 && !(0 <�
by�code_off�t
 && bytecode_offset <= 0x7fff)) {

276 
em�
->
ov��ow
 = 
�ue
;

278 
c
[1] = 0x80 | (
by�code_off�t
 & 0x7f);

279 
c
[2] = 
by�code_off�t
 >> 7;

281 
	}
}

283 
	$mp_em�_bc_��t_�ss
(
em�_t
 *
em�
, 
�ss_k�d_t
 
�ss
, 
sc�e_t
 *
sc�e
) {

284 
em�
->
�ss
 =�ass;

285 
em�
->
�ack_size
 = 0;

286 
em�
->
su��ss
 = 
�l�
;

287 
em�
->
sc�e
 = scope;

288 
em�
->
ϡ_sour�_l�e_off�t
 = 0;

289 
em�
->
ϡ_sour�_l�e
 = 1;

290 
em�
->
by�code_off�t
 = 0;

291 
em�
->
code_�fo_off�t
 = 0;

292 
em�
->
ov��ow
 = 
�l�
;

296 
mp_u�t_t
 
n_��e
 = 
sc�e
->
num_lo�ls
 + sc�e->
�ack_size
;

297 i�(
n_��e
 == 0) {

301 
n_��e
 = 1;

303 #i�
MICROPY_DEBUG_VM_STACK_OVERFLOW


305 
n_��e
 += 1;

308 
size_t
 
n_exc_�ack
 = 
sc�e
->
exc_�ack_size
;

309 
	`MP_BC_PRELUDE_SIG_ENCODE
(
n_��e
, 
n_exc_�ack
, 
sc�e
, 
em�_wr�e_code_�fo_by�
, 
em�
);

313 i�(
em�
->
�ss
 >�
MP_PASS_CODE_SIZE
) {

314 
size_t
 
n_�fo
 = 
em�
->n_info;

315 
size_t
 
n_��
 = 
em�
->n_cell;

316 
	`MP_BC_PRELUDE_SIZE_ENCODE
(
n_�fo
, 
n_��
, 
em�_wr�e_code_�fo_by�
, 
em�
);

319 
em�
->
n_�fo
 =�m�->
code_�fo_off�t
;

322 
	`em�_wr�e_code_�fo_q�r
(
em�
, 
sc�e
->
sim�e_�me
);

336 
i
 = 0; i < 
sc�e
->
num_pos_�gs
 + sc�e->
num_kw�ly_�gs
; i++) {

337 
q�r
 
q�
 = 
MP_QSTR__��_
;

338 
j
 = 0; j < 
sc�e
->
id_�fo_�n
; ++j) {

339 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
j
];

340 i�((
id
->
�ags
 & 
ID_FLAG_IS_PARAM
�&& id->
lo�l_num
 =�
i
) {

341 
q�
 = 
id
->qst;

345 
	`em�_wr�e_code_�fo_q�r
(
em�
, 
q�
);

348 
	}
}

350 
bo�
 
	$mp_em�_bc_�d_�ss
(
em�_t
 *
em�
) {

351 i�(
em�
->
�ss
 =�
MP_PASS_SCOPE
) {

352  
�ue
;

356 
	`as��
(
em�
->
�ack_size
 == 0);

359 
em�
->
n_�fo
 =�m�->
code_�fo_off�t
 -�mit->n_info;

362 
em�
->
n_��
 = 0;

363 
size_t
 
i
 = 0; i < 
em�
->
sc�e
->
id_�fo_�n
; ++i) {

364 
id_�fo_t
 *
id
 = &
em�
->
sc�e
->
id_�fo
[
i
];

365 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
) {

366 
	`as��
(
id
->
lo�l_num
 <= 255);

367 
	`em�_wr�e_code_�fo_by�
(
em�
, 
id
->
lo�l_num
);

368 ++
em�
->
n_��
;

372 i�(
em�
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

374 
em�
->
code_�fo_size
 =�m�->
code_�fo_off�t
;

375 
em�
->
by�code_size
 =�m�->
by�code_off�t
;

376 
em�
->
code_ba�
 = 
	`m_�w0
(
by�
,�m�->
code_�fo_size
 +�m�->
by�code_size
);

378 } i�(
em�
->
�ss
 =�
MP_PASS_EMIT
) {

380 
	`as��
(
em�
->
code_�fo_off�t
 <�em�->
code_�fo_size
);

381 
	`as��
(
em�
->
by�code_off�t
 <�em�->
by�code_size
);

383 i�(
em�
->
code_�fo_off�t
 !�em�->
code_�fo_size


384 || 
em�
->
by�code_off�t
 !�em�->
by�code_size
) {

387 
em�
->
code_�fo_size
 =�m�->
code_�fo_off�t
;

388 
em�
->
by�code_size
 =�m�->
by�code_off�t
;

389  
�l�
;

392 i�(
em�
->
ov��ow
) {

393 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("bytecode overflow"));

396 #i�
MICROPY_PERSISTENT_CODE_SAVE
 || 
MICROPY_DEBUG_PRINTERS


397 
size_t
 
by�code_�n
 = 
em�
->
code_�fo_size
 +�m�->
by�code_size
;

398 #i�
MICROPY_DEBUG_PRINTERS


399 
em�
->
sc�e
->
�w_code_d�a_�n
 = 
by�code_�n
;

404 
	`mp_em�_glue_assign_by�code
(
em�
->
sc�e
->
�w_code
,�m�->
code_ba�
,

405 
em�
->
em�_comm�
->
ch�d�n
,

406 #i�
MICROPY_PERSISTENT_CODE_SAVE


407 
by�code_�n
,

408 
em�
->
em�_comm�
->
�_cur_ch�d
,

410 
em�
->
sc�e
->
sc�e_�ags
);

413  
�ue
;

414 
	}
}

416 
	$mp_em�_bc_adju�_�ack_size
(
em�_t
 *
em�
, 
mp_�t_t
 
d��
) {

417 i�(
em�
->
�ss
 =�
MP_PASS_SCOPE
) {

420 
	`as��
((
mp_�t_t
)
em�
->
�ack_size
 + 
d��
 >= 0);

421 
em�
->
�ack_size
 +�
d��
;

422 i�(
em�
->
�ack_size
 >�m�->
sc�e
->stack_size) {

423 
em�
->
sc�e
->
�ack_size
 =�mit->stack_size;

425 
	}
}

427 
	$mp_em�_bc_�t_sour�_l�e
(
em�_t
 *
em�
, 
mp_u�t_t
 
sour�_l�e
) {

428 #i�
MICROPY_ENABLE_SOURCE_LINE


429 i�(
	`MP_STATE_VM
(
mp_�timi�_v�ue
) >= 3) {

433 i�(
sour�_l�e
 > 
em�
->
ϡ_sour�_l�e
) {

434 
mp_u�t_t
 
by�s_to_sk�
 = 
em�
->
by�code_off�t
 -�m�->
ϡ_sour�_l�e_off�t
;

435 
mp_u�t_t
 
l�es_to_sk�
 = 
sour�_l�e
 - 
em�
->
ϡ_sour�_l�e
;

436 
	`em�_wr�e_code_�fo_by�s_l�es
(
em�
, 
by�s_to_sk�
, 
l�es_to_sk�
);

437 
em�
->
ϡ_sour�_l�e_off�t
 =�m�->
by�code_off�t
;

438 
em�
->
ϡ_sour�_l�e
 = 
sour�_l�e
;

441 ()
em�
;

442 ()
sour�_l�e
;

444 
	}
}

446 
	$mp_em�_bc_�b�_assign
(
em�_t
 *
em�
, 
mp_u�t_t
 
l
) {

449 
em�
->
su��ss
 = 
�l�
;

451 i�(
em�
->
�ss
 =�
MP_PASS_SCOPE
) {

459 
	`as��
(
l
 < 
em�
->
max_num_�b�s
);

460 
	`as��
(
em�
->
�ss
 =�
MP_PASS_STACK_SIZE
 ||�m�->
by�code_off�t
 <�em�->
�b�_off�ts
[
l
]);

463 
em�
->
�b�_off�ts
[
l
] =�m�->
by�code_off�t
;

464 
	}
}

466 
	$mp_em�_bc_imp�t
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

467 
	`MP_STATIC_ASSERT
(
MP_BC_IMPORT_NAME
 + 
MP_EMIT_IMPORT_NAME
 == MP_BC_IMPORT_NAME);

468 
	`MP_STATIC_ASSERT
(
MP_BC_IMPORT_NAME
 + 
MP_EMIT_IMPORT_FROM
 =�
MP_BC_IMPORT_FROM
);

469 
�ack_adj
 = 
k�d
 =�
MP_EMIT_IMPORT_FROM
 ? 1 : -1;

470 i�(
k�d
 =�
MP_EMIT_IMPORT_STAR
) {

471 
	`em�_wr�e_by�code_by�
(
em�
, 
�ack_adj
, 
MP_BC_IMPORT_STAR
);

473 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 
�ack_adj
, 
MP_BC_IMPORT_NAME
 + 
k�d
, 
q�
);

475 
	}
}

477 
	$mp_em�_bc_l�d_cڡ_tok
(
em�_t
 *
em�
, 
mp_tok�_k�d_t
 
tok
) {

478 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_CONST_FALSE
 + (
MP_TOKEN_KW_NONE
 - 
MP_TOKEN_KW_FALSE
�=�
MP_BC_LOAD_CONST_NONE
);

479 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_CONST_FALSE
 + (
MP_TOKEN_KW_TRUE
 - 
MP_TOKEN_KW_FALSE
�=�
MP_BC_LOAD_CONST_TRUE
);

480 i�(
tok
 =�
MP_TOKEN_ELLIPSIS
) {

481 
	`em�_wr�e_by�code_by�_obj
(
em�
, 1, 
MP_BC_LOAD_CONST_OBJ
, 
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�l�sis_obj
));

483 
	`em�_wr�e_by�code_by�
(
em�
, 1, 
MP_BC_LOAD_CONST_FALSE
 + (
tok
 - 
MP_TOKEN_KW_FALSE
));

485 
	}
}

487 
	$mp_em�_bc_l�d_cڡ_sm�l_�t
(
em�_t
 *
em�
, 
mp_�t_t
 
�g
) {

488 
	`as��
(
	`MP_SMALL_INT_FITS
(
�g
));

489 i�(-
MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
 <�
�g


490 && 
�g
 < 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM
 - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
) {

491 
	`em�_wr�e_by�code_by�
(
em�
, 1,

492 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 + 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
 + 
�g
);

494 
	`em�_wr�e_by�code_by�_�t
(
em�
, 1, 
MP_BC_LOAD_CONST_SMALL_INT
, 
�g
);

496 
	}
}

498 
	$mp_em�_bc_l�d_cڡ_�r
(
em�_t
 *
em�
, 
q�r
 
q�
) {

499 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 1, 
MP_BC_LOAD_CONST_STRING
, 
q�
);

500 
	}
}

502 
	$mp_em�_bc_l�d_cڡ_obj
(
em�_t
 *
em�
, 
mp_obj_t
 
obj
) {

503 
	`em�_wr�e_by�code_by�_obj
(
em�
, 1, 
MP_BC_LOAD_CONST_OBJ
, 
obj
);

504 
	}
}

506 
	$mp_em�_bc_l�d_nu�
(
em�_t
 *
em�
) {

507 
	`em�_wr�e_by�code_by�
(
em�
, 1, 
MP_BC_LOAD_NULL
);

508 
	}
}

510 
	$mp_em�_bc_l�d_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

511 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_FAST_N
 + 
MP_EMIT_IDOP_LOCAL_FAST
 == MP_BC_LOAD_FAST_N);

512 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_FAST_N
 + 
MP_EMIT_IDOP_LOCAL_DEREF
 =�
MP_BC_LOAD_DEREF
);

513 ()
q�
;

514 i�(
k�d
 =�
MP_EMIT_IDOP_LOCAL_FAST
 && 
lo�l_num
 <= 15) {

515 
	`em�_wr�e_by�code_by�
(
em�
, 1, 
MP_BC_LOAD_FAST_MULTI
 + 
lo�l_num
);

517 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 1, 
MP_BC_LOAD_FAST_N
 + 
k�d
, 
lo�l_num
);

519 
	}
}

521 
	$mp_em�_bc_l�d_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

522 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_BC_LOAD_NAME);

523 
	`MP_STATIC_ASSERT
(
MP_BC_LOAD_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_BC_LOAD_GLOBAL
);

524 ()
q�
;

525 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 1, 
MP_BC_LOAD_NAME
 + 
k�d
, 
q�
);

526 
	}
}

528 
	$mp_em�_bc_l�d_m�hod
(
em�_t
 *
em�
, 
q�r
 
q�
, 
bo�
 
is_su�r
) {

529 
�ack_adj
 = 1 - 2 * 
is_su�r
;

530 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 
�ack_adj
, 
is_su�r
 ? 
MP_BC_LOAD_SUPER_METHOD
 : 
MP_BC_LOAD_METHOD
, 
q�
);

531 
	}
}

533 
	$mp_em�_bc_l�d_bu�d_�ass
(
em�_t
 *
em�
) {

534 
	`em�_wr�e_by�code_by�
(
em�
, 1, 
MP_BC_LOAD_BUILD_CLASS
);

535 
	}
}

537 
	$mp_em�_bc_subs�
(
em�_t
 *
em�
, 
k�d
) {

538 i�(
k�d
 =�
MP_EMIT_SUBSCR_LOAD
) {

539 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_LOAD_SUBSCR
);

541 i�(
k�d
 =�
MP_EMIT_SUBSCR_DELETE
) {

542 
	`mp_em�_bc_l�d_nu�
(
em�
);

543 
	`mp_em�_bc_r�_th�e
(
em�
);

545 
	`em�_wr�e_by�code_by�
(
em�
, -3, 
MP_BC_STORE_SUBSCR
);

547 
	}
}

549 
	$mp_em�_bc_��
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

550 i�(
k�d
 =�
MP_EMIT_ATTR_LOAD
) {

551 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 0, 
MP_BC_LOAD_ATTR
, 
q�
);

553 i�(
k�d
 =�
MP_EMIT_ATTR_DELETE
) {

554 
	`mp_em�_bc_l�d_nu�
(
em�
);

555 
	`mp_em�_bc_r�_two
(
em�
);

557 
	`em�_wr�e_by�code_by�_q�r
(
em�
, -2, 
MP_BC_STORE_ATTR
, 
q�
);

559 
	}
}

561 
	$mp_em�_bc_��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

562 
	`MP_STATIC_ASSERT
(
MP_BC_STORE_FAST_N
 + 
MP_EMIT_IDOP_LOCAL_FAST
 == MP_BC_STORE_FAST_N);

563 
	`MP_STATIC_ASSERT
(
MP_BC_STORE_FAST_N
 + 
MP_EMIT_IDOP_LOCAL_DEREF
 =�
MP_BC_STORE_DEREF
);

564 ()
q�
;

565 i�(
k�d
 =�
MP_EMIT_IDOP_LOCAL_FAST
 && 
lo�l_num
 <= 15) {

566 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_STORE_FAST_MULTI
 + 
lo�l_num
);

568 
	`em�_wr�e_by�code_by�_u�t
(
em�
, -1, 
MP_BC_STORE_FAST_N
 + 
k�d
, 
lo�l_num
);

570 
	}
}

572 
	$mp_em�_bc_��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

573 
	`MP_STATIC_ASSERT
(
MP_BC_STORE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_BC_STORE_NAME);

574 
	`MP_STATIC_ASSERT
(
MP_BC_STORE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_BC_STORE_GLOBAL
);

575 
	`em�_wr�e_by�code_by�_q�r
(
em�
, -1, 
MP_BC_STORE_NAME
 + 
k�d
, 
q�
);

576 
	}
}

578 
	$mp_em�_bc_d��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

579 
	`MP_STATIC_ASSERT
(
MP_BC_DELETE_FAST
 + 
MP_EMIT_IDOP_LOCAL_FAST
 == MP_BC_DELETE_FAST);

580 
	`MP_STATIC_ASSERT
(
MP_BC_DELETE_FAST
 + 
MP_EMIT_IDOP_LOCAL_DEREF
 =�
MP_BC_DELETE_DEREF
);

581 ()
q�
;

582 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 0, 
MP_BC_DELETE_FAST
 + 
k�d
, 
lo�l_num
);

583 
	}
}

585 
	$mp_em�_bc_d��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

586 
	`MP_STATIC_ASSERT
(
MP_BC_DELETE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_BC_DELETE_NAME);

587 
	`MP_STATIC_ASSERT
(
MP_BC_DELETE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_BC_DELETE_GLOBAL
);

588 
	`em�_wr�e_by�code_by�_q�r
(
em�
, 0, 
MP_BC_DELETE_NAME
 + 
k�d
, 
q�
);

589 
	}
}

591 
	$mp_em�_bc_dup_t�
(
em�_t
 *
em�
) {

592 
	`em�_wr�e_by�code_by�
(
em�
, 1, 
MP_BC_DUP_TOP
);

593 
	}
}

595 
	$mp_em�_bc_dup_t�_two
(
em�_t
 *
em�
) {

596 
	`em�_wr�e_by�code_by�
(
em�
, 2, 
MP_BC_DUP_TOP_TWO
);

597 
	}
}

599 
	$mp_em�_bc_p�_t�
(
em�_t
 *
em�
) {

600 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_POP_TOP
);

601 
	}
}

603 
	$mp_em�_bc_r�_two
(
em�_t
 *
em�
) {

604 
	`em�_wr�e_by�code_by�
(
em�
, 0, 
MP_BC_ROT_TWO
);

605 
	}
}

607 
	$mp_em�_bc_r�_th�e
(
em�_t
 *
em�
) {

608 
	`em�_wr�e_by�code_by�
(
em�
, 0, 
MP_BC_ROT_THREE
);

609 
	}
}

611 
	$mp_em�_bc_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

612 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 0, 
MP_BC_JUMP
, 
�b�
);

613 
em�
->
su��ss
 = 
�ue
;

614 
	}
}

616 
	$mp_em�_bc_p�_jump_if
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
) {

617 i�(
c�d
) {

618 
	`em�_wr�e_by�code_by�_�b�
(
em�
, -1, 
MP_BC_POP_JUMP_IF_TRUE
, 
�b�
);

620 
	`em�_wr�e_by�code_by�_�b�
(
em�
, -1, 
MP_BC_POP_JUMP_IF_FALSE
, 
�b�
);

622 
	}
}

624 
	$mp_em�_bc_jump_if_�_p�
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
) {

625 i�(
c�d
) {

626 
	`em�_wr�e_by�code_by�_�b�
(
em�
, -1, 
MP_BC_JUMP_IF_TRUE_OR_POP
, 
�b�
);

628 
	`em�_wr�e_by�code_by�_�b�
(
em�
, -1, 
MP_BC_JUMP_IF_FALSE_OR_POP
, 
�b�
);

630 
	}
}

632 
	$mp_em�_bc_unw�d_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, mp_u�t_�
ex��_d�th
) {

633 i�(
ex��_d�th
 == 0) {

634 i�(
�b�
 & 
MP_EMIT_BREAK_FROM_FOR
) {

636 
	`em�_wr�e_by�code_�w_by�
(
em�
, 
MP_BC_POP_TOP
);

638 
size_t
 
i
 = 0; i < 
MP_OBJ_ITER_BUF_NSLOTS
 - 1; ++i) {

639 
	`em�_wr�e_by�code_�w_by�
(
em�
, 
MP_BC_POP_TOP
);

642 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 0, 
MP_BC_JUMP
, 
�b�
 & ~
MP_EMIT_BREAK_FROM_FOR
);

644 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 0, 
MP_BC_UNWIND_JUMP
, 
�b�
 & ~
MP_EMIT_BREAK_FROM_FOR
);

645 
	`em�_wr�e_by�code_�w_by�
(
em�
, ((
�b�
 & 
MP_EMIT_BREAK_FROM_FOR
�? 0x80 : 0�| 
ex��_d�th
);

647 
em�
->
su��ss
 = 
�ue
;

648 
	}
}

650 
	$mp_em�_bc_�tup_block
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
k�d
) {

651 
	`MP_STATIC_ASSERT
(
MP_BC_SETUP_WITH
 + 
MP_EMIT_SETUP_BLOCK_WITH
 == MP_BC_SETUP_WITH);

652 
	`MP_STATIC_ASSERT
(
MP_BC_SETUP_WITH
 + 
MP_EMIT_SETUP_BLOCK_EXCEPT
 =�
MP_BC_SETUP_EXCEPT
);

653 
	`MP_STATIC_ASSERT
(
MP_BC_SETUP_WITH
 + 
MP_EMIT_SETUP_BLOCK_FINALLY
 =�
MP_BC_SETUP_FINALLY
);

656 
�ack_adj
 = 
k�d
 =�
MP_EMIT_SETUP_BLOCK_WITH
 ? 2 : 0;

657 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 
�ack_adj
, 
MP_BC_SETUP_WITH
 + 
k�d
, 
�b�
);

658 
	}
}

660 
	$mp_em�_bc_w�h_��nup
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

661 
	`mp_em�_bc_l�d_cڡ_tok
(
em�
, 
MP_TOKEN_KW_NONE
);

662 
	`mp_em�_bc_�b�_assign
(
em�
, 
�b�
);

664 
	`em�_wr�e_by�code_by�
(
em�
, 2, 
MP_BC_WITH_CLEANUP
);

666 
	`mp_em�_bc_adju�_�ack_size
(
em�
, -4);

667 
	}
}

669 #i�
MICROPY_PY_ASYNC_AWAIT


670 
	$mp_em�_bc_async_w�h_�tup_f��ly
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�_�x�_no_exc
, mp_u�t_�
�b�_f��ly_block
, mp_u�t_�
�b�_�t_unw�d_jump
) {

675 
	`mp_em�_bc_l�d_cڡ_tok
(
em�
, 
MP_TOKEN_KW_NONE
);

676 
	`mp_em�_bc_r�_two
(
em�
);

677 
	`mp_em�_bc_jump
(
em�
, 
�b�_�x�_no_exc
);

680 
	`mp_em�_bc_�b�_assign
(
em�
, 
�b�_f��ly_block
);

683 
	`mp_em�_bc_dup_t�
(
em�
);

684 
	`mp_em�_bc_l�d_glob�
(
em�
, 
MP_QSTR_Ba�Ex��i�
, 
MP_EMIT_IDOP_GLOBAL_GLOBAL
);

685 
	`mp_em�_bc_b��y_�
(
em�
, 
MP_BINARY_OP_EXCEPTION_MATCH
);

686 
	`mp_em�_bc_p�_jump_if
(
em�
, 
�l�
, 
�b�_�t_unw�d_jump
);

687 
	}
}

690 
	$mp_em�_bc_�d_f��ly
(
em�_t
 *
em�
) {

691 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_END_FINALLY
);

692 
	}
}

694 
	$mp_em�_bc_g�_��
(
em�_t
 *
em�
, 
bo�
 
u�_�ack
) {

695 
�ack_adj
 = 
u�_�ack
 ? 
MP_OBJ_ITER_BUF_NSLOTS
 - 1 : 0;

696 
	`em�_wr�e_by�code_by�
(
em�
, 
�ack_adj
, 
u�_�ack
 ? 
MP_BC_GET_ITER_STACK
 : 
MP_BC_GET_ITER
);

697 
	}
}

699 
	$mp_em�_bc_f�_��
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

700 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 1, 
MP_BC_FOR_ITER
, 
�b�
);

701 
	}
}

703 
	$mp_em�_bc_f�_��_�d
(
em�_t
 *
em�
) {

704 
	`mp_em�_bc_adju�_�ack_size
(
em�
, -
MP_OBJ_ITER_BUF_NSLOTS
);

705 
	}
}

707 
	$mp_em�_bc_p�_ex��_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
bo�
 
w�h�_exc_h�d�r
) {

708 ()
w�h�_exc_h�d�r
;

709 
	`em�_wr�e_by�code_by�_�b�
(
em�
, 0, 
MP_BC_POP_EXCEPT_JUMP
, 
�b�
);

710 
em�
->
su��ss
 = 
�ue
;

711 
	}
}

713 
	$mp_em�_bc_u�ry_�
(
em�_t
 *
em�
, 
mp_u�ry_�_t
 
�
) {

714 
	`em�_wr�e_by�code_by�
(
em�
, 0, 
MP_BC_UNARY_OP_MULTI
 + 
�
);

715 
	}
}

717 
	$mp_em�_bc_b��y_�
(
em�_t
 *
em�
, 
mp_b��y_�_t
 
�
) {

718 
bo�
 
�v�t
 = 
�l�
;

719 i�(
�
 =�
MP_BINARY_OP_NOT_IN
) {

720 
�v�t
 = 
�ue
;

721 
�
 = 
MP_BINARY_OP_IN
;

722 } i�(
�
 =�
MP_BINARY_OP_IS_NOT
) {

723 
�v�t
 = 
�ue
;

724 
�
 = 
MP_BINARY_OP_IS
;

726 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_BINARY_OP_MULTI
 + 
�
);

727 i�(
�v�t
) {

728 
	`em�_wr�e_by�code_by�
(
em�
, 0, 
MP_BC_UNARY_OP_MULTI
 + 
MP_UNARY_OP_NOT
);

730 
	}
}

732 
	$mp_em�_bc_bu�d
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
, 
k�d
) {

733 
	`MP_STATIC_ASSERT
(
MP_BC_BUILD_TUPLE
 + 
MP_EMIT_BUILD_TUPLE
 == MP_BC_BUILD_TUPLE);

734 
	`MP_STATIC_ASSERT
(
MP_BC_BUILD_TUPLE
 + 
MP_EMIT_BUILD_LIST
 =�
MP_BC_BUILD_LIST
);

735 
	`MP_STATIC_ASSERT
(
MP_BC_BUILD_TUPLE
 + 
MP_EMIT_BUILD_MAP
 =�
MP_BC_BUILD_MAP
);

736 
	`MP_STATIC_ASSERT
(
MP_BC_BUILD_TUPLE
 + 
MP_EMIT_BUILD_SET
 =�
MP_BC_BUILD_SET
);

737 
	`MP_STATIC_ASSERT
(
MP_BC_BUILD_TUPLE
 + 
MP_EMIT_BUILD_SLICE
 =�
MP_BC_BUILD_SLICE
);

738 
�ack_adj
 = 
k�d
 =�
MP_EMIT_BUILD_MAP
 ? 1 : 1 - 
n_�gs
;

739 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 
�ack_adj
, 
MP_BC_BUILD_TUPLE
 + 
k�d
, 
n_�gs
);

740 
	}
}

742 
	$mp_em�_bc_��e_m�
(
em�_t
 *
em�
) {

743 
	`em�_wr�e_by�code_by�
(
em�
, -2, 
MP_BC_STORE_MAP
);

744 
	}
}

746 
	$mp_em�_bc_��e_comp
(
em�_t
 *
em�
, 
sc�e_k�d_t
 
k�d
, 
mp_u�t_t
 
c���i�_�ack_�dex
) {

747 
t
;

748 
n
;

749 i�(
k�d
 =�
SCOPE_LIST_COMP
) {

750 
n
 = 0;

751 
t
 = 0;

752 } i�(!
MICROPY_PY_BUILTINS_SET
 || 
k�d
 =�
SCOPE_DICT_COMP
) {

753 
n
 = 1;

754 
t
 = 1;

755 } i�(
MICROPY_PY_BUILTINS_SET
) {

756 
n
 = 0;

757 
t
 = 2;

760 
	`em�_wr�e_by�code_by�_u�t
(
em�
, -1 - 
n
, 
MP_BC_STORE_COMP
, ((
c���i�_�ack_�dex
 +��<< 2�| 
t
);

761 
	}
}

763 
	$mp_em�_bc_u�ack_�qu��
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
) {

764 
	`em�_wr�e_by�code_by�_u�t
(
em�
, -1 + 
n_�gs
, 
MP_BC_UNPACK_SEQUENCE
,�_args);

765 
	}
}

767 
	$mp_em�_bc_u�ack_ex
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_��
, mp_u�t_�
n_right
) {

768 
	`em�_wr�e_by�code_by�_u�t
(
em�
, -1 + 
n_��
 + 
n_right
 + 1, 
MP_BC_UNPACK_EX
,�_left | (n_right << 8));

769 
	}
}

771 
	$mp_em�_bc_make_fun�i�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
) {

772 i�(
n_pos_de�u�s
 =�0 && 
n_kw_de�u�s
 == 0) {

773 
	`em�_wr�e_by�code_by�_ch�d
(
em�
, 1, 
MP_BC_MAKE_FUNCTION
, 
sc�e
->
�w_code
);

775 
	`em�_wr�e_by�code_by�_ch�d
(
em�
, -1, 
MP_BC_MAKE_FUNCTION_DEFARGS
, 
sc�e
->
�w_code
);

777 
	}
}

779 
	$mp_em�_bc_make_�osu�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_�o�d_ov�
, mp_u�t_�
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
) {

780 i�(
n_pos_de�u�s
 =�0 && 
n_kw_de�u�s
 == 0) {

781 
�ack_adj
 = -
n_�o�d_ov�
 + 1;

782 
	`em�_wr�e_by�code_by�_ch�d
(
em�
, 
�ack_adj
, 
MP_BC_MAKE_CLOSURE
, 
sc�e
->
�w_code
);

783 
	`em�_wr�e_by�code_�w_by�
(
em�
, 
n_�o�d_ov�
);

785 
	`as��
(
n_�o�d_ov�
 <= 255);

786 
�ack_adj
 = -2 - (
mp_�t_t
)
n_�o�d_ov�
 + 1;

787 
	`em�_wr�e_by�code_by�_ch�d
(
em�
, 
�ack_adj
, 
MP_BC_MAKE_CLOSURE_DEFARGS
, 
sc�e
->
�w_code
);

788 
	`em�_wr�e_by�code_�w_by�
(
em�
, 
n_�o�d_ov�
);

790 
	}
}

792 
	$em�_bc_��_fun�i�_m�hod_h��r
(
em�_t
 *
em�
, 
�ack_adj
, 
mp_u�t_t
 
by�code_ba�
, mp_u�t_�
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
) {

793 i�(
��_�ags
) {

796 
�ack_adj
 -�()
n_pos�iڮ
 + 2 * ()
n_keyw�d
 + 1;

797 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 
�ack_adj
, 
by�code_ba�
 + 1, (
n_keyw�d
 << 8�| 
n_pos�iڮ
);

799 
�ack_adj
 -�()
n_pos�iڮ
 + 2 * ()
n_keyw�d
;

800 
	`em�_wr�e_by�code_by�_u�t
(
em�
, 
�ack_adj
, 
by�code_ba�
, (
n_keyw�d
 << 8�| 
n_pos�iڮ
);

802 
	}
}

804 
	$mp_em�_bc_��_fun�i�
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
) {

805 
	`em�_bc_��_fun�i�_m�hod_h��r
(
em�
, 0, 
MP_BC_CALL_FUNCTION
, 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

806 
	}
}

808 
	$mp_em�_bc_��_m�hod
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
) {

809 
	`em�_bc_��_fun�i�_m�hod_h��r
(
em�
, -1, 
MP_BC_CALL_METHOD
, 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

810 
	}
}

812 
	$mp_em�_bc_�tu�_v�ue
(
em�_t
 *
em�
) {

813 
	`em�_wr�e_by�code_by�
(
em�
, -1, 
MP_BC_RETURN_VALUE
);

814 
em�
->
su��ss
 = 
�ue
;

815 
	}
}

817 
	$mp_em�_bc_�i�_v��gs
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
) {

818 
	`MP_STATIC_ASSERT
(
MP_BC_RAISE_LAST
 + 1 =�
MP_BC_RAISE_OBJ
);

819 
	`MP_STATIC_ASSERT
(
MP_BC_RAISE_LAST
 + 2 =�
MP_BC_RAISE_FROM
);

820 
	`as��
(
n_�gs
 <= 2);

821 
	`em�_wr�e_by�code_by�
(
em�
, -
n_�gs
, 
MP_BC_RAISE_LAST
 +�_args);

822 
em�
->
su��ss
 = 
�ue
;

823 
	}
}

825 
	$mp_em�_bc_y�ld
(
em�_t
 *
em�
, 
k�d
) {

826 
	`MP_STATIC_ASSERT
(
MP_BC_YIELD_VALUE
 + 1 =�
MP_BC_YIELD_FROM
);

827 
	`em�_wr�e_by�code_by�
(
em�
, -
k�d
, 
MP_BC_YIELD_VALUE
 + kind);

828 
em�
->
sc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_GENERATOR
;

829 
	}
}

831 
	$mp_em�_bc_��t_ex��_h�d�r
(
em�_t
 *
em�
) {

832 
	`mp_em�_bc_adju�_�ack_size
(
em�
, 4);

833 
	}
}

835 
	$mp_em�_bc_�d_ex��_h�d�r
(
em�_t
 *
em�
) {

836 
	`mp_em�_bc_adju�_�ack_size
(
em�
, -3);

837 
	}
}

839 #i�
MICROPY_EMIT_NATIVE


840 cڡ 
em�_m�hod_�b�_t
 
	gem�_bc_m�hod_�b�
 = {

841 #i�
MICROPY_DYNAMIC_COMPILER


842 
NULL
,

843 
NULL
,

846 
mp_em�_bc_��t_�ss
,

847 
mp_em�_bc_�d_�ss
,

848 
mp_em�_bc_adju�_�ack_size
,

849 
mp_em�_bc_�t_sour�_l�e
,

852 
mp_em�_bc_l�d_lo�l
,

853 
mp_em�_bc_l�d_glob�
,

856 
mp_em�_bc_��e_lo�l
,

857 
mp_em�_bc_��e_glob�
,

860 
mp_em�_bc_d��e_lo�l
,

861 
mp_em�_bc_d��e_glob�
,

864 
mp_em�_bc_�b�_assign
,

865 
mp_em�_bc_imp�t
,

866 
mp_em�_bc_l�d_cڡ_tok
,

867 
mp_em�_bc_l�d_cڡ_sm�l_�t
,

868 
mp_em�_bc_l�d_cڡ_�r
,

869 
mp_em�_bc_l�d_cڡ_obj
,

870 
mp_em�_bc_l�d_nu�
,

871 
mp_em�_bc_l�d_m�hod
,

872 
mp_em�_bc_l�d_bu�d_�ass
,

873 
mp_em�_bc_subs�
,

874 
mp_em�_bc_��
,

875 
mp_em�_bc_dup_t�
,

876 
mp_em�_bc_dup_t�_two
,

877 
mp_em�_bc_p�_t�
,

878 
mp_em�_bc_r�_two
,

879 
mp_em�_bc_r�_th�e
,

880 
mp_em�_bc_jump
,

881 
mp_em�_bc_p�_jump_if
,

882 
mp_em�_bc_jump_if_�_p�
,

883 
mp_em�_bc_unw�d_jump
,

884 
mp_em�_bc_�tup_block
,

885 
mp_em�_bc_w�h_��nup
,

886 #i�
MICROPY_PY_ASYNC_AWAIT


887 
mp_em�_bc_async_w�h_�tup_f��ly
,

889 
mp_em�_bc_�d_f��ly
,

890 
mp_em�_bc_g�_��
,

891 
mp_em�_bc_f�_��
,

892 
mp_em�_bc_f�_��_�d
,

893 
mp_em�_bc_p�_ex��_jump
,

894 
mp_em�_bc_u�ry_�
,

895 
mp_em�_bc_b��y_�
,

896 
mp_em�_bc_bu�d
,

897 
mp_em�_bc_��e_m�
,

898 
mp_em�_bc_��e_comp
,

899 
mp_em�_bc_u�ack_�qu��
,

900 
mp_em�_bc_u�ack_ex
,

901 
mp_em�_bc_make_fun�i�
,

902 
mp_em�_bc_make_�osu�
,

903 
mp_em�_bc_��_fun�i�
,

904 
mp_em�_bc_��_m�hod
,

905 
mp_em�_bc_�tu�_v�ue
,

906 
mp_em�_bc_�i�_v��gs
,

907 
mp_em�_bc_y�ld
,

909 
mp_em�_bc_��t_ex��_h�d�r
,

910 
mp_em�_bc_�d_ex��_h�d�r
,

913 cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
	gmp_em�_bc_m�hod_�b�_l�d_id_�s
 = {

914 
mp_em�_bc_l�d_lo�l
,

915 
mp_em�_bc_l�d_glob�
,

918 cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
	gmp_em�_bc_m�hod_�b�_��e_id_�s
 = {

919 
mp_em�_bc_��e_lo�l
,

920 
mp_em�_bc_��e_glob�
,

923 cڡ 
mp_em�_m�hod_�b�_id_�s_t
 
	gmp_em�_bc_m�hod_�b�_d��e_id_�s
 = {

924 
mp_em�_bc_d��e_lo�l
,

925 
mp_em�_bc_d��e_glob�
,

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitcommon.c

27 
	~<as��.h
>

29 
	~"py/em�.h
"

30 
	~"py/�tiveglue.h
"

32 #i�
MICROPY_ENABLE_COMPILER


34 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


35 
q�r_sh�t_t
 
	$mp_em�_comm�_u�_q�r
(
mp_em�_comm�_t
 *
em�
, 
q�r
 
q�
) {

36 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
em�
->
q�r_m�
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

37 i�(
�em
->
v�ue
 =�
MP_OBJ_NULL
) {

38 
�em
->
v�ue
 = 
	`MP_OBJ_NEW_SMALL_INT
(
em�
->
q�r_m�
.
u�d
 - 1);

40  
	`MP_OBJ_SMALL_INT_VALUE
(
�em
->
v�ue
);

41 
	}
}

46 
bo�
 
	$�ri�ly_equ�
(
mp_obj_t
 
a
, mp_obj_�
b
) {

47 i�(
a
 =�
b
) {

48  
�ue
;

51 #i�
MICROPY_EMIT_NATIVE


52 i�(
a
 =�
	`MP_OBJ_FROM_PTR
(&
mp_fun_�b�
�|| 
b
 == MP_OBJ_FROM_PTR(&mp_fun_table)) {

53  
�l�
;

57 cڡ 
mp_obj_ty�_t
 *
a_ty�
 = 
	`mp_obj_g�_ty�
(
a
);

58 cڡ 
mp_obj_ty�_t
 *
b_ty�
 = 
	`mp_obj_g�_ty�
(
b
);

59 i�(
a_ty�
 !�
b_ty�
) {

60  
�l�
;

62 i�(
a_ty�
 =�&
mp_ty�_tu�e
) {

63 
mp_obj_tu�e_t
 *
a_tu�e
 = 
	`MP_OBJ_TO_PTR
(
a
);

64 
mp_obj_tu�e_t
 *
b_tu�e
 = 
	`MP_OBJ_TO_PTR
(
b
);

65 i�(
a_tu�e
->
�n
 !�
b_tu�e
->len) {

66  
�l�
;

68 
size_t
 
i
 = 0; i < 
a_tu�e
->
�n
; ++i) {

69 i�(!
	`�ri�ly_equ�
(
a_tu�e
->
�ems
[
i
], 
b_tu�e
->items[i])) {

70  
�l�
;

73  
�ue
;

75  
	`mp_obj_equ�
(
a
, 
b
);

77 
	}
}

79 
size_t
 
	$mp_em�_comm�_u�_cڡ_obj
(
mp_em�_comm�_t
 *
em�
, 
mp_obj_t
 
cڡ_obj
) {

80 
size_t
 
i
 = 0; i < 
em�
->
cڡ_obj_li�
.
�n
; ++i) {

81 i�(
	`�ri�ly_equ�
(
em�
->
cڡ_obj_li�
.
�ems
[
i
], 
cڡ_obj
)) {

82  
i
;

85 
	`mp_obj_li�_��nd
(
	`MP_OBJ_FROM_PTR
(&
em�
->
cڡ_obj_li�
), 
cڡ_obj
);

86  
em�
->
cڡ_obj_li�
.
�n
 - 1;

87 
	}
}

89 
id_�fo_t
 *
	$mp_em�_comm�_g�_id_f�_modifi�ti�
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

91 
id_�fo_t
 *
id
 = 
	`sc�e_f�d_�_add_id
(
sc�e
, 
q�
, 
ID_INFO_KIND_GLOBAL_IMPLICIT
);

92 i�(
id
->
k�d
 =�
ID_INFO_KIND_GLOBAL_IMPLICIT
) {

93 i�(
	`SCOPE_IS_FUNC_LIKE
(
sc�e
->
k�d
)) {

95 
id
->
k�d
 = 
ID_INFO_KIND_LOCAL
;

98 
id
->
k�d
 = 
ID_INFO_KIND_GLOBAL_IMPLICIT_ASSIGNED
;

101  
id
;

102 
	}
}

104 
	$mp_em�_comm�_id_�
(
em�_t
 *
em�
, cڡ 
mp_em�_m�hod_�b�_id_�s_t
 *
em�_m�hod_�b�
, 
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

107 
id_�fo_t
 *
id
 = 
	`sc�e_f�d
(
sc�e
, 
q�
);

108 
	`as��
(
id
 !�
NULL
);

111 i�(
id
->
k�d
 =�
ID_INFO_KIND_GLOBAL_IMPLICIT
 || id->k�d =�
ID_INFO_KIND_GLOBAL_IMPLICIT_ASSIGNED
) {

112 
em�_m�hod_�b�
->
	`glob�
(
em�
, 
q�
, 
MP_EMIT_IDOP_GLOBAL_NAME
);

113 } i�(
id
->
k�d
 =�
ID_INFO_KIND_GLOBAL_EXPLICIT
) {

114 
em�_m�hod_�b�
->
	`glob�
(
em�
, 
q�
, 
MP_EMIT_IDOP_GLOBAL_GLOBAL
);

115 } i�(
id
->
k�d
 =�
ID_INFO_KIND_LOCAL
) {

116 
em�_m�hod_�b�
->
	`lo�l
(
em�
, 
q�
, 
id
->
lo�l_num
, 
MP_EMIT_IDOP_LOCAL_FAST
);

118 
	`as��
(
id
->
k�d
 =�
ID_INFO_KIND_CELL
 || id->k�d =�
ID_INFO_KIND_FREE
);

119 
em�_m�hod_�b�
->
	`lo�l
(
em�
, 
q�
, 
id
->
lo�l_num
, 
MP_EMIT_IDOP_LOCAL_DEREF
);

121 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitglue.c

29 
	~<�d�t.h
>

30 
	~<�dio.h
>

31 
	~<�r�g.h
>

32 
	~<as��.h
>

34 
	~"py/em�glue.h
"

35 
	~"py/ru�ime0.h
"

36 
	~"py/bc.h
"

37 
	~"py/objfun.h
"

38 
	~"py/�of�e.h
"

40 #i�
MICROPY_DEBUG_VERBOSE


41 
	#DEBUG_PRINT
 (1)

	)

42 
	#WRITE_CODE
 (1)

	)

43 
	#DEBUG_��tf
 
DEBUG_��tf


	)

44 
	#DEBUG_OP_��tf
(...�
	`DEBUG_��tf
(
__VA_ARGS__
)

	)

46 
	#DEBUG_��tf
(...�()0

	)

47 
	#DEBUG_OP_��tf
(...�()0

	)

50 #i�
MICROPY_DEBUG_PRINTERS


51 
mp_u�t_t
 
	gmp_v�bo�_�ag
 = 0;

54 
mp_�w_code_t
 *
	$mp_em�_glue_�w_�w_code
() {

55 
mp_�w_code_t
 *
rc
 = 
	`m_�w0
(mp_raw_code_t, 1);

56 
rc
->
k�d
 = 
MP_CODE_RESERVED
;

57 #i�
MICROPY_PY_SYS_SETTRACE


58 
rc
->
l�e_of_def��i�
 = 0;

60  
rc
;

61 
	}
}

63 
mp_em�_glue_assign_by�code
(
mp_�w_code_t
 *
rc
, cڡ 
by�
 *
code
,

64 
mp_�w_code_t
 **
ch�d�n
,

65 #i�
MICROPY_PERSISTENT_CODE_SAVE


66 
size_t
 
�n
,

67 
u�t16_t
 
n_ch�d�n
,

69 
u�t16_t
 
sc�e_�ags
) {

71 
	grc
->
	gk�d
 = 
MP_CODE_BYTECODE
;

72 
	grc
->
	gis_g����
 = (
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) != 0;

73 
	grc
->
	gfun_d�a
 = 
code
;

74 
	grc
->
	gch�d�n
 = 
ch�d�n
;

76 #i�
MICROPY_PERSISTENT_CODE_SAVE


77 
	grc
->
	gfun_d�a_�n
 = 
�n
;

78 
	grc
->
	gn_ch�d�n
 = 
n_ch�d�n
;

81 #i�
MICROPY_PY_SYS_SETTRACE


82 
mp_by�code_��ude_t
 *
	g��ude
 = &
rc
->
��ude
;

83 
mp_�of_ex�a�_��ude
(
code
, 
��ude
);

86 #i�
DEBUG_PRINT


87 #i�!
MICROPY_PERSISTENT_CODE_SAVE


88 cڡ 
size_t
 
	g�n
 = 0;

90 
DEBUG_��tf
("assig�by� code: code=%��n=" 
UINT_FMT
 " f�gs=%x\n", 
code
, 
�n
, (
u�t
)
sc�e_�ags
);

94 #i�
MICROPY_EMIT_MACHINE_CODE


95 
mp_em�_glue_assign_�tive
(
mp_�w_code_t
 *
rc
, 
mp_�w_code_k�d_t
 
k�d
, cڡ *
fun_d�a
, 
mp_u�t_t
 
fun_�n
,

96 
mp_�w_code_t
 **
ch�d�n
,

97 #i�
MICROPY_PERSISTENT_CODE_SAVE


98 
u�t16_t
 
n_ch�d�n
,

99 
u�t16_t
 
��ude_off�t
,

101 
u�t16_t
 
sc�e_�ags
, 
u�t32_t
 
asm_n_pos_�gs
, u�t32_�
asm_ty�_sig


104 
as��
(
k�d
 =�
MP_CODE_NATIVE_PY
 || k�d =�
MP_CODE_NATIVE_VIPER
 || k�d =�
MP_CODE_NATIVE_ASM
);

109 #i�
MICROPY_EMIT_THUMB
 || 
MICROPY_EMIT_INLINE_THUMB


110 #i�
__ICACHE_PRESENT
 == 1

112 
MP_HAL_CLEAN_DCACHE
(
fun_d�a
, 
fun_�n
);

114 
SCB_Inv�id�eICache
();

116 #�i�
MICROPY_EMIT_ARM


117 #i�(
def�ed
(
__l�ux__
�&& def�ed(
__GNUC__
)�|| 
__ARM_ARCH
 == 7

118 
__bu�t�___��r_�che
((*)
fun_d�a
, (
u�t8_t
 *)fun_d��+ 
fun_�n
);

119 #�i�
def�ed
(
__�m__
)

121 
asm
 volatile (

131 
	grc
->
	gk�d
 = 
k�d
;

132 
	grc
->
	gis_g����
 = (
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) != 0;

133 
	grc
->
	gfun_d�a
 = 
fun_d�a
;

135 #i�
MICROPY_PERSISTENT_CODE_SAVE


136 
	grc
->
	gfun_d�a_�n
 = 
fun_�n
;

138 
	grc
->
	gch�d�n
 = 
ch�d�n
;

140 #i�
MICROPY_PERSISTENT_CODE_SAVE


141 
	grc
->
	gn_ch�d�n
 = 
n_ch�d�n
;

142 
	grc
->
	g��ude_off�t
 = 
��ude_off�t
;

145 #i�
MICROPY_EMIT_INLINE_ASM


147 
	grc
->
	gasm_n_pos_�gs
 = 
asm_n_pos_�gs
;

148 
	grc
->
	gasm_ty�_sig
 = 
asm_ty�_sig
;

151 #i�
DEBUG_PRINT


152 
DEBUG_��tf
("assig��tive: k�d=%d fun=%��n=" 
UINT_FMT
 " f�gs=%x\n", 
k�d
, 
fun_d�a
, 
fun_�n
, (
u�t
)
sc�e_�ags
);

153 
mp_u�t_t
 
	gi
 = 0; i < 
	gfun_�n
; i++) {

154 i�(
	gi
 > 0 && i % 16 == 0) {

155 
DEBUG_��tf
("\n");

157 
DEBUG_��tf
(" %02x", ((cڡ 
by�
 *)
fun_d�a
)[
i
]);

159 
DEBUG_��tf
("\n");

161 #i�
WRITE_CODE


162 
FILE
 *
	g�_wr�e_code
 = 
fݒ
("out-code", "wb");

163 
fwr�e
(
fun_d�a
, 
fun_�n
, 1, 
�_wr�e_code
);

164 
f�o�
(
�_wr�e_code
);

167 ()
	gfun_�n
;

172 
mp_obj_t
 
	$mp_make_fun�i�_�om_��o_fun
(
mp_��o_fun_t
 
��o_fun
, cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, cڡ 
mp_obj_t
 *
def_�gs
) {

173 
	`DEBUG_OP_��tf
("make_fun�i�_�om_��o_fu�%p\n", 
��o_fun
);

174 
	`as��
(
��o_fun
 !�
NULL
);

177 
	`as��
(
def_�gs
 =�
NULL
 || def_�gs[0] =�
MP_OBJ_NULL
 || 
	`mp_obj_is_ty�
(def_�gs[0], &
mp_ty�_tu�e
));

180 
	`as��
(
def_�gs
 =�
NULL
 || def_�gs[1] =�
MP_OBJ_NULL
 || 
	`mp_obj_is_ty�
(def_�gs[1], &
mp_ty�_di�
));

182 #i�
MICROPY_MODULE_FROZEN_MPY


183 i�(
	`mp_��o_fun_is_by�code
(
��o_fun
)) {

184 cڡ 
u�t8_t
 *
bc
 = 
��o_fun
;

185 
mp_obj_t
 
fun
 = 
	`mp_obj_�w_fun_bc
(
def_�gs
, 
bc
, 
cڋxt
, 
NULL
);

186 
	`MP_BC_PRELUDE_SIG_DECODE
(
bc
);

187 i�(
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

188 ((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
fun
))->
ty�
 = &
mp_ty�_g�_w�p
;

190  
fun
;

195 cڡ 
mp_�w_code_t
 *
rc
 = 
��o_fun
;

198 
mp_obj_t
 
fun
;

199 
rc
->
k�d
) {

200 #i�
MICROPY_EMIT_NATIVE


201 
MP_CODE_NATIVE_PY
:

202 
fun
 = 
	`mp_obj_�w_fun_�tive
(
def_�gs
, 
rc
->
fun_d�a
, 
cڋxt
,�c->
ch�d�n
);

204 i�(
rc
->
is_g����
) {

205 ((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
fun
))->
ty�
 = &
mp_ty�_�tive_g�_w�p
;

208 
MP_CODE_NATIVE_VIPER
:

209 
fun
 = 
	`mp_obj_�w_fun_v��
(
rc
->
fun_d�a
, 
cڋxt
,�c->
ch�d�n
);

212 #i�
MICROPY_EMIT_INLINE_ASM


213 
MP_CODE_NATIVE_ASM
:

214 
fun
 = 
	`mp_obj_�w_fun_asm
(
rc
->
asm_n_pos_�gs
,�c->
fun_d�a
,�c->
asm_ty�_sig
);

219 
	`as��
(
rc
->
k�d
 =�
MP_CODE_BYTECODE
);

220 
fun
 = 
	`mp_obj_�w_fun_bc
(
def_�gs
, 
rc
->
fun_d�a
, 
cڋxt
,�c->
ch�d�n
);

222 i�(
rc
->
is_g����
) {

223 ((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
fun
))->
ty�
 = &
mp_ty�_g�_w�p
;

226 #i�
MICROPY_PY_SYS_SETTRACE


227 
mp_obj_fun_bc_t
 *
�lf_fun
 = (mp_obj_fun_bc_�*)
	`MP_OBJ_TO_PTR
(
fun
);

228 
�lf_fun
->
rc
 =�c;

234  
fun
;

235 
	}
}

237 
mp_obj_t
 
	$mp_make_�osu�_�om_��o_fun
(
mp_��o_fun_t
 
��o_fun
, cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, 
mp_u�t_t
 
n_�o�d_ov�
, cڡ 
mp_obj_t
 *
�gs
) {

238 
	`DEBUG_OP_��tf
("make_�osu�_�om_��o_fu�%�" 
UINT_FMT
 " %p\n", 
��o_fun
, 
n_�o�d_ov�
, 
�gs
);

240 
mp_obj_t
 
ffun
;

241 i�(
n_�o�d_ov�
 & 0x100) {

243 
ffun
 = 
	`mp_make_fun�i�_�om_��o_fun
(
��o_fun
, 
cڋxt
, 
�gs
);

246 
ffun
 = 
	`mp_make_fun�i�_�om_��o_fun
(
��o_fun
, 
cڋxt
, 
NULL
);

249  
	`mp_obj_�w_�osu�
(
ffun
, 
n_�o�d_ov�
 & 0xff, 
�gs
 + ((n_closed_over >> 7) & 2));

250 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitglue.h

26 #i�de�
MICROPY_INCLUDED_PY_EMITGLUE_H


27 
	#MICROPY_INCLUDED_PY_EMITGLUE_H


	)

29 
	~"py/obj.h
"

30 
	~"py/bc.h
"

36 
	#MP_PROTO_FUN_INDICATOR_RAW_CODE_0
 (0)

	)

37 
	#MP_PROTO_FUN_INDICATOR_RAW_CODE_1
 (0)

	)

41 
	mMP_EMIT_OPT_NONE
,

42 
	mMP_EMIT_OPT_BYTECODE
,

43 
	mMP_EMIT_OPT_NATIVE_PYTHON
,

44 
	mMP_EMIT_OPT_VIPER
,

45 
	mMP_EMIT_OPT_ASM
,

49 
	mMP_CODE_UNUSED
,

50 
	mMP_CODE_RESERVED
,

51 
	mMP_CODE_BYTECODE
,

52 
	mMP_CODE_NATIVE_PY
,

53 
	mMP_CODE_NATIVE_VIPER
,

54 
	mMP_CODE_NATIVE_ASM
,

55 } 
	tmp_�w_code_k�d_t
;

60 cڡ *
	tmp_��o_fun_t
;

65 
�l�e
 
bo�
 
	$mp_��o_fun_is_by�code
(
mp_��o_fun_t
 
��o_fun
) {

66 cڡ 
u�t8_t
 *
h�d�
 = (cڡ u�t8_�*)
��o_fun
;

67  (
h�d�
[0] | (h�d�[1] << 8)�!�(
MP_PROTO_FUN_INDICATOR_RAW_CODE_0
 | (
MP_PROTO_FUN_INDICATOR_RAW_CODE_1
 << 8));

68 
	}
}

74 
	s_mp_�w_code_t
 {

75 
u�t8_t
 
	m��o_fun_�di�t�
[2];

76 
u�t8_t
 
	mk�d
;

77 
bo�
 
	mis_g����
;

78 cڡ *
	mfun_d�a
;

79 
_mp_�w_code_t
 **
	mch�d�n
;

80 #i�
MICROPY_PERSISTENT_CODE_SAVE


81 
u�t32_t
 
	mfun_d�a_�n
;

82 
u�t16_t
 
	mn_ch�d�n
;

83 #i�
MICROPY_EMIT_MACHINE_CODE


84 
u�t16_t
 
	m��ude_off�t
;

86 #i�
MICROPY_PY_SYS_SETTRACE


91 
u�t32_t
 
	ml�e_of_def��i�
;

92 
mp_by�code_��ude_t
 
	m��ude
;

95 #i�
MICROPY_EMIT_INLINE_ASM


96 
u�t32_t
 
	masm_n_pos_�gs
 : 8;

97 
u�t32_t
 
	masm_ty�_sig
 : 24;

99 } 
	tmp_�w_code_t
;

104 
	s_mp_�w_code_�un��d_t
 {

105 
u�t8_t
 
	m��o_fun_�di�t�
[2];

106 
u�t8_t
 
	mk�d
;

107 
bo�
 
	mis_g����
;

108 cڡ *
	mfun_d�a
;

109 
_mp_�w_code_t
 **
	mch�d�n
;

110 #i�
MICROPY_PERSISTENT_CODE_SAVE


111 
u�t32_t
 
	mfun_d�a_�n
;

112 
u�t16_t
 
	mn_ch�d�n
;

113 #i�
MICROPY_EMIT_MACHINE_CODE


114 
u�t16_t
 
	m��ude_off�t
;

116 #i�
MICROPY_PY_SYS_SETTRACE


117 
u�t32_t
 
	ml�e_of_def��i�
;

118 
mp_by�code_��ude_t
 
	m��ude
;

121 } 
	tmp_�w_code_�un��d_t
;

123 
mp_�w_code_t
 *
mp_em�_glue_�w_�w_code
();

125 
mp_em�_glue_assign_by�code
(
mp_�w_code_t
 *
rc
, cڡ 
by�
 *
code
,

126 
mp_�w_code_t
 **
ch�d�n
,

127 #i�
MICROPY_PERSISTENT_CODE_SAVE


128 
size_t
 
�n
,

129 
u�t16_t
 
n_ch�d�n
,

131 
u�t16_t
 
sc�e_�ags
);

133 
mp_em�_glue_assign_�tive
(
mp_�w_code_t
 *
rc
, 
mp_�w_code_k�d_t
 
k�d
, cڡ *
fun_d�a
, 
mp_u�t_t
 
fun_�n
,

134 
mp_�w_code_t
 **
ch�d�n
,

135 #i�
MICROPY_PERSISTENT_CODE_SAVE


136 
u�t16_t
 
n_ch�d�n
,

137 
u�t16_t
 
��ude_off�t
,

139 
u�t16_t
 
sc�e_�ags
, 
u�t32_t
 
asm_n_pos_�gs
, u�t32_�
asm_ty�_sig
);

141 
mp_obj_t
 
mp_make_fun�i�_�om_��o_fun
(
mp_��o_fun_t
 
��o_fun
, cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, cڡ mp_obj_�*
def_�gs
);

142 
mp_obj_t
 
mp_make_�osu�_�om_��o_fun
(
mp_��o_fun_t
 
��o_fun
, cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, 
mp_u�t_t
 
n_�o�d_ov�
, cڡ mp_obj_�*
�gs
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitinlinethumb.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<�d�g.h
>

31 
	~<as��.h
>

33 
	~"py/em�.h
"

34 
	~"py/asmthumb.h
"

36 #i�
MICROPY_EMIT_INLINE_THUMB


40 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
PN_
##ru�,

	)

41 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

42 
	~"py/g�mm�.h
"

43 #unde�
DEF_RULE


44 #unde�
DEF_RULE_NC


45 
	mPN_cڡ_obje�
,

47 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

48 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
PN_
##ru�,

	)

49 
	~"py/g�mm�.h
"

50 #unde�
DEF_RULE


51 #unde�
DEF_RULE_NC


52 } 
	t�_k�d_t
;

54 
	s_em�_�l�e_asm_t
 {

55 
asm_thumb_t
 
	mas
;

56 
u�t16_t
 
	m�ss
;

57 
mp_obj_t
 *
	m�r�_��
;

58 
mp_u�t_t
 
	mmax_num_�b�s
;

59 
q�r
 *
	m�b�_lookup
;

62 #i�
MICROPY_DYNAMIC_COMPILER


64 
�l�e
 
bo�
 
	$em�_�l�e_thumb_�low_��t
(
em�_�l�e_asm_t
 *
em�
) {

65  
MP_NATIVE_ARCH_ARMV7EMSP
 <�
mp_dy�mic_comp��
.
�tive_�ch


66 && 
mp_dy�mic_comp��
.
�tive_�ch
 <�
MP_NATIVE_ARCH_ARMV7EMDP
;

67 
	}
}

71 
�l�e
 
bo�
 
	$em�_�l�e_thumb_�low_��t
(
em�_�l�e_asm_t
 *
em�
) {

72  
MICROPY_EMIT_INLINE_THUMB_FLOAT
;

73 
	}
}

77 
	$em�_�l�e_thumb_�r�_msg
(
em�_�l�e_asm_t
 *
em�
, 
mp_rom_�r�_�xt_t
 
msg
) {

78 *
em�
->
�r�_��
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
, 
msg
);

79 
	}
}

81 
	$em�_�l�e_thumb_�r�_exc
(
em�_�l�e_asm_t
 *
em�
, 
mp_obj_t
 
exc
) {

82 *
em�
->
�r�_��
 = 
exc
;

83 
	}
}

85 
em�_�l�e_asm_t
 *
	$em�_�l�e_thumb_�w
(
mp_u�t_t
 
max_num_�b�s
) {

86 
em�_�l�e_asm_t
 *
em�
 = 
	`m_�w_obj
(emit_inline_asm_t);

87 
	`mem�t
(&
em�
->
as
, 0, (emit->as));

88 
	`mp_asm_ba�_��
(&
em�
->
as
.
ba�
, 
max_num_�b�s
);

89 
em�
->
max_num_�b�s
 = max_num_labels;

90 
em�
->
�b�_lookup
 = 
	`m_�w
(
q�r
, 
max_num_�b�s
);

91  
em�
;

92 
	}
}

94 
	$em�_�l�e_thumb_�
(
em�_�l�e_asm_t
 *
em�
) {

95 
	`m_d�
(
q�r
, 
em�
->
�b�_lookup
,�m�->
max_num_�b�s
);

96 
	`mp_asm_ba�_de��
(&
em�
->
as
.
ba�
, 
�l�
);

97 
	`m_d�_obj
(
em�_�l�e_asm_t
, 
em�
);

98 
	}
}

100 
	$em�_�l�e_thumb_��t_�ss
(
em�_�l�e_asm_t
 *
em�
, 
�ss_k�d_t
 
�ss
, 
mp_obj_t
 *
�r�_��
) {

101 
em�
->
�ss
 =�ass;

102 
em�
->
�r�_��
 =�rror_slot;

103 i�(
em�
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

104 
	`mem�t
(
em�
->
�b�_lookup
, 0,�m�->
max_num_�b�s
 * (
q�r
));

106 
	`mp_asm_ba�_��t_�ss
(&
em�
->
as
.
ba�
, 
�ss
 =�
MP_PASS_EMIT
 ? 
MP_ASM_PASS_EMIT
 : 
MP_ASM_PASS_COMPUTE
);

107 
	`asm_thumb_��y
(&
em�
->
as
, 0);

108 
	}
}

110 
	$em�_�l�e_thumb_�d_�ss
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
ty�_sig
) {

111 
	`asm_thumb_ex�
(&
em�
->
as
);

112 
	`asm_thumb_�d_�ss
(&
em�
->
as
);

113 
	}
}

115 
mp_u�t_t
 
	$em�_�l�e_thumb_cou�_��ms
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
n_��ms
, 
mp_�r�_node_t
 *
�_��ms
) {

116 i�(
n_��ms
 > 4) {

117 
	`em�_�l�e_thumb_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("can only have up�o 4�arameters�o Thumb�ssembly"));

120 
mp_u�t_t
 
i
 = 0; i < 
n_��ms
; i++) {

121 i�(!
	`MP_PARSE_NODE_IS_ID
(
�_��ms
[
i
])) {

122 
	`em�_�l�e_thumb_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("parameters must be�egisters in sequence�0�o�3"));

125 cڡ *
p
 = 
	`q�r_�r
(
	`MP_PARSE_NODE_LEAF_ARG
(
�_��ms
[
i
]));

126 i�(!(
	`���
(
p
�=�2 &&�[0] =�'r' && (
mp_u�t_t
�[1] =�'0' + 
i
)) {

127 
	`em�_�l�e_thumb_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("parameters must be�egisters in sequence�0�o�3"));

131  
n_��ms
;

132 
	}
}

134 
bo�
 
	$em�_�l�e_thumb_�b�
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
�b�_num
, 
q�r
 
�b�_id
) {

135 
	`as��
(
�b�_num
 < 
em�
->
max_num_�b�s
);

136 i�(
em�
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

138 
u�t
 
i
 = 0; i < 
em�
->
max_num_�b�s
; i++) {

139 i�(
em�
->
�b�_lookup
[
i
] =�
�b�_id
) {

140  
�l�
;

144 
em�
->
�b�_lookup
[
�b�_num
] = 
�b�_id
;

145 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
.
ba�
, 
�b�_num
);

146  
�ue
;

147 
	}
}

149 
	s_�g_�me_t
 { 
by�
 
	m�g
;

150 
by�
 
	m�me
[3];

151 } 
	t�g_�me_t
;

152 cڡ 
�g_�me_t
 
	g�g_�me_�b�
[] = {

176 
	#MAX_SPECIAL_REGISTER_NAME_LENGTH
 7

	)

177 
	s_�ec�l_�g_�me_t
 { 
by�
 
	m�g
;

178 
	m�me
[
MAX_SPECIAL_REGISTER_NAME_LENGTH
 + 1];

179 } 
	t�ec�l_�g_�me_t
;

180 cڡ 
�ec�l_�g_�me_t
 
	g�ec�l_�g_�me_�b�
[] = {

187 cڡ *
	$g�_�g_�r
(
mp_�r�_node_t
 
�
) {

188 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

189 
q�r
 
q�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

190  
	`q�r_�r
(
q�
);

194 
	}
}

196 
mp_u�t_t
 
	$g�_�g_�g
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
, 
mp_u�t_t
 
max_�g
) {

197 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�
);

198 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
�g_�me_�b�
); i++) {

199 cڡ 
�g_�me_t
 *
r
 = &
�g_�me_�b�
[
i
];

200 i�(
�g_�r
[0] =�
r
->
�me
[0]

201 && 
�g_�r
[1] =�
r
->
�me
[1]

202 && 
�g_�r
[2] =�
r
->
�me
[2]

203 && (
�g_�r
[2] == '\0' ||�eg_str[3] == '\0')) {

204 i�(
r
->
�g
 > 
max_�g
) {

205 
	`em�_�l�e_thumb_�r�_exc
(
em�
,

206 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

207 
	`MP_ERROR_TEXT
("'%s'�x���� mo��%d"), 
�
, 
max_�g
));

210  
r
->
�g
;

214 
	`em�_�l�e_thumb_�r�_exc
(
em�
,

215 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

216 
	`MP_ERROR_TEXT
("'%s'�x�����gi��"), 
�
));

218 
	}
}

220 
mp_u�t_t
 
	$g�_�g_�ec�l_�g
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

221 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�
);

222 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
�ec�l_�g_�me_�b�
); i++) {

223 cڡ 
�ec�l_�g_�me_t
 *
r
 = &
�ec�l_�g_�me_�b�
[
i
];

224 i�(
	`�rcmp
(
r
->
�me
, 
�g_�r
) == 0) {

225  
r
->
�g
;

228 
	`em�_�l�e_thumb_�r�_exc
(
em�
,

229 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

230 
	`MP_ERROR_TEXT
("'%s'�x�����ec�Ȼgi��"), 
�
));

232 
	}
}

234 
mp_u�t_t
 
	$g�_�g_v�g
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

235 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�
);

236 i�(
�g_�r
[0] == 's' &&�eg_str[1] != '\0') {

237 
mp_u�t_t
 
�gno
 = 0;

238 ++
�g_�r
; *reg_str; ++reg_str) {

239 
mp_u�t_t
 
v
 = *
�g_�r
;

240 i�(!('0' <�
v
 && v <= '9')) {

241 
m�f�med
;

243 
�gno
 = 10 *�egn�+ 
v
 - '0';

245 i�(
�gno
 > 31) {

246 
	`em�_�l�e_thumb_�r�_exc
(
em�
,

247 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

248 
	`MP_ERROR_TEXT
("'%s'�x���� mo��%d"), 
�
, 31));

251  
�gno
;

254 
m�f�med
:

255 
	`em�_�l�e_thumb_�r�_exc
(
em�
,

256 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

257 
	`MP_ERROR_TEXT
("'%s'�x���� FPU�egi��"), 
�
));

259 
	}
}

261 
mp_u�t_t
 
	$g�_�g_�gli�
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

264 i�(!
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_�om_b��
)) {

265 
bad_�g
;

268 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

269 
	`as��
(
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) == 1);

270 
�
 = 
�s
->
nodes
[0];

272 
mp_u�t_t
 
�gli�
 = 0;

274 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

276 
�gli�
 |�1 << 
	`g�_�g_�g
(
em�
, 
�
, 
�
, 15);

277 } i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

278 
�s
 = (
mp_�r�_node_�ru�_t
 *)
�
;

279 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
PN_di�ܣtmak�
) {

280 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�s
->
nodes
[1]));

281 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�s
->
nodes
[1];

282 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s1
�=�
PN_di�ܣtmak�_li�
) {

286 
�gli�
 |�1 << 
	`g�_�g_�g
(
em�
, 
�
, 
�s
->
nodes
[0], 15);

289 
mp_�r�_node_t
 *
nodes
;

290 
n
 = 
	`mp_�r�_node_ex�a�_li�
(&
�s1
->
nodes
[0], 
PN_di�ܣtmak�_li�2
, &nodes);

293 
i
 = 0; i < 
n
; i++) {

294 
�gli�
 |�1 << 
	`g�_�g_�g
(
em�
, 
�
, 
nodes
[
i
], 15);

297 
bad_�g
;

300 
bad_�g
;

303 
bad_�g
;

306  
�gli�
;

308 
bad_�g
:

309 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x���{r0,�1, ...}"), 
�
));

311 
	}
}

313 
u�t32_t
 
	$g�_�g_i
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
, 
u�t32_t
 
f�_mask
) {

314 
mp_obj_t
 
o
;

315 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
o
)) {

316 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x���� i�eg�"), 
�
));

319 
u�t32_t
 
i
 = 
	`mp_obj_g�_�t_�un��d
(
o
);

320 i�((
i
 & (~
f�_mask
)) != 0) {

321 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s' i�eg� 0x%x dۢ'�f� i�mask 0x%x"), 
�
, 
i
, 
f�_mask
));

324  
i
;

325 
	}
}

327 
bo�
 
	$g�_�g_addr
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
, mp_�r�_node_�*
�_ba�
, mp_�r�_node_�*
�_off�t
) {

328 i�(!
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
PN_�om_b�ck�
)) {

329 
bad_�g
;

331 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

332 i�(!
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�s
->
nodes
[0], 
PN_��li�_comp
)) {

333 
bad_�g
;

335 
�s
 = (
mp_�r�_node_�ru�_t
 *�ns->
nodes
[0];

336 i�(
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
) != 2) {

337 
bad_�g
;

340 *
�_ba�
 = 
�s
->
nodes
[0];

341 *
�_off�t
 = 
�s
->
nodes
[1];

342  
�ue
;

344 
bad_�g
:

345 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x�����dd�s�o�th�f�m [a, b]"), 
�
));

346  
�l�
;

347 
	}
}

349 
	$g�_�g_�b�
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

350 i�(!
	`MP_PARSE_NODE_IS_ID
(
�
)) {

351 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x�����b�"), 
�
));

354 
q�r
 
�b�_q�r
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

355 
u�t
 
i
 = 0; i < 
em�
->
max_num_�b�s
; i++) {

356 i�(
em�
->
�b�_lookup
[
i
] =�
�b�_q�r
) {

357  
i
;

361 i�(
em�
->
�ss
 =�
MP_PASS_EMIT
) {

362 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("�b� '%q'�� def�ed"), 
�b�_q�r
));

365 
	}
}

367 
	s_cc_�me_t
 { 
by�
 
	mcc
;

368 
by�
 
	m�me
[2];

369 } 
	tcc_�me_t
;

370 cڡ 
cc_�me_t
 
	gcc_�me_�b�
[] = {

371 { 
ASM_THUMB_CC_EQ
, "eq" },

372 { 
ASM_THUMB_CC_NE
, "ne" },

373 { 
ASM_THUMB_CC_CS
, "cs" },

374 { 
ASM_THUMB_CC_CC
, "cc" },

375 { 
ASM_THUMB_CC_MI
, "mi" },

376 { 
ASM_THUMB_CC_PL
, "pl" },

377 { 
ASM_THUMB_CC_VS
, "vs" },

378 { 
ASM_THUMB_CC_VC
, "vc" },

379 { 
ASM_THUMB_CC_HI
, "hi" },

380 { 
ASM_THUMB_CC_LS
, "ls" },

381 { 
ASM_THUMB_CC_GE
, "ge" },

382 { 
ASM_THUMB_CC_LT
, "lt" },

383 { 
ASM_THUMB_CC_GT
, "gt" },

384 { 
ASM_THUMB_CC_LE
, "le" },

387 
	s_f�m�_4_�_t
 { 
by�
 
	m�
;

388 
	m�me
[3];

389 } 
	tf�m�_4_�_t
;

390 
	#X
(
x
) (((x) >> 4) & 0xff)

391 cڡ 
f�m�_4_�_t
 
f�m�_4_�_�b�
[] = {

	)

392 { 
X
(
ASM_THUMB_FORMAT_4_EOR
), "eor" },

393 { 
X
(
ASM_THUMB_FORMAT_4_LSL
), "lsl" },

394 { 
X
(
ASM_THUMB_FORMAT_4_LSR
), "lsr" },

395 { 
X
(
ASM_THUMB_FORMAT_4_ASR
), "asr" },

396 { 
X
(
ASM_THUMB_FORMAT_4_ADC
), "adc" },

397 { 
X
(
ASM_THUMB_FORMAT_4_SBC
), "sbc" },

398 { 
X
(
ASM_THUMB_FORMAT_4_ROR
), "ror" },

399 { 
X
(
ASM_THUMB_FORMAT_4_TST
), "tst" },

400 { 
X
(
ASM_THUMB_FORMAT_4_NEG
), "neg" },

401 { 
X
(
ASM_THUMB_FORMAT_4_CMP
), "cmp" },

402 { 
X
(
ASM_THUMB_FORMAT_4_CMN
), "cmn" },

403 { 
X
(
ASM_THUMB_FORMAT_4_ORR
), "orr" },

404 { 
X
(
ASM_THUMB_FORMAT_4_MUL
), "mul" },

405 { 
X
(
ASM_THUMB_FORMAT_4_BIC
), "bic" },

406 { 
X
(
ASM_THUMB_FORMAT_4_MVN
), "mvn" },

408 #unde�
X


411 
	s_f�m�_9_10_�_t
 { 
u�t16_t
 
	m�
;

412 
u�t16_t
 
	m�me
;

413 } 
	tf�m�_9_10_�_t
;

414 
	#X
(
x
�(x)

	)

415 cڡ 
f�m�_9_10_�_t
 
	gf�m�_9_10_�_�b�
[] = {

416 { 
X
(
ASM_THUMB_FORMAT_9_LDR
 | 
ASM_THUMB_FORMAT_9_WORD_TRANSFER
), 
MP_QSTR_ldr
 },

417 { 
X
(
ASM_THUMB_FORMAT_9_LDR
 | 
ASM_THUMB_FORMAT_9_BYTE_TRANSFER
), 
MP_QSTR_ldrb
 },

418 { 
X
(
ASM_THUMB_FORMAT_10_LDRH
), 
MP_QSTR_ldrh
 },

419 { 
X
(
ASM_THUMB_FORMAT_9_STR
 | 
ASM_THUMB_FORMAT_9_WORD_TRANSFER
), 
MP_QSTR_�r
 },

420 { 
X
(
ASM_THUMB_FORMAT_9_STR
 | 
ASM_THUMB_FORMAT_9_BYTE_TRANSFER
), 
MP_QSTR_�rb
 },

421 { 
X
(
ASM_THUMB_FORMAT_10_STRH
), 
MP_QSTR_�rh
 },

423 #unde�
X


426 
	s_f�m�_v�_�_t
 {

427 
by�
 
	m�
;

428 
	m�me
[3];

429 } 
	tf�m�_v�_�_t
;

430 cڡ 
f�m�_v�_�_t
 
	gf�m�_v�_�_�b�
[] = {

438 
	#ARMV7M
 
	`asm_thumb_�low_�mv7m
(&
em�
->
as
)

	)

440 
	$em�_�l�e_thumb_�
(
em�_�l�e_asm_t
 *
em�
, 
q�r
 
�
, 
mp_u�t_t
 
n_�gs
, 
mp_�r�_node_t
 *
�_�gs
) {

451 
size_t
 
�_�n
;

452 cڡ *
�_�r
 = (cڡ *)
	`q�r_d�a
(
�
, &
�_�n
);

454 i�(
	`em�_�l�e_thumb_�low_��t
(
em�
�&& 
�_�r
[0] == 'v') {

456 i�(
n_�gs
 == 2) {

457 
mp_u�t_t
 
�_code
 = 0x0ac0, 
�_code_hi
;

458 i�(
�
 =�
MP_QSTR_vcmp
) {

459 
�_code_hi
 = 0xeeb4;

460 
�_v�_tw�rgs
:;

461 
mp_u�t_t
 
vd
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

462 
mp_u�t_t
 
vm
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

463 
	`asm_thumb_�32
(&
em�
->
as
,

464 
�_code_hi
 | ((
vd
 & 1) << 6),

465 
�_code
 | ((
vd
 & 0x1e�<< 11�| ((
vm
 & 1) << 5) | (vm & 0x1e) >> 1);

466 } i�(
�
 =�
MP_QSTR_vsq�
) {

467 
�_code_hi
 = 0xeeb1;

468 
�_v�_tw�rgs
;

469 } i�(
�
 =�
MP_QSTR_v�g
) {

470 
�_code_hi
 = 0xeeb1;

471 
�_code
 = 0x0a40;

472 
�_v�_tw�rgs
;

473 } i�(
�
 =�
MP_QSTR_vcvt_f32_s32
) {

474 
�_code_hi
 = 0xeeb8;

475 
�_v�_tw�rgs
;

476 } i�(
�
 =�
MP_QSTR_vcvt_s32_f32
) {

477 
�_code_hi
 = 0xeebd;

478 
�_v�_tw�rgs
;

479 } i�(
�
 =�
MP_QSTR_vmrs
) {

480 
mp_u�t_t
 
�g_de�
;

481 cڡ *
�g_�r0
 = 
	`g�_�g_�r
(
�_�gs
[0]);

482 i�(
	`�rcmp
(
�g_�r0
, "APSR_nzcv") == 0) {

483 
�g_de�
 = 15;

485 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

487 cڡ *
�g_�r1
 = 
	`g�_�g_�r
(
�_�gs
[1]);

488 i�(
	`�rcmp
(
�g_�r1
, "FPSCR") == 0) {

490 
	`asm_thumb_�32
(&
em�
->
as
, 0x�f1, 0x0a10 | (
�g_de�
 << 12));

492 
unknown_�
;

494 } i�(
�
 =�
MP_QSTR_vmov
) {

495 
�_code_hi
 = 0xee00;

496 
mp_u�t_t
 
r_�m
, 
vm
;

497 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�_�gs
[0]);

498 i�(
�g_�r
[0] == 'r') {

499 
r_�m
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

500 
vm
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

501 
�_code_hi
 |= 0x10;

503 
vm
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

504 
r_�m
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 15);

506 
	`asm_thumb_�32
(&
em�
->
as
,

507 
�_code_hi
 | ((
vm
 & 0x1e) >> 1),

508 0x0a10 | (
r_�m
 << 12�| ((
vm
 & 1) << 7));

509 } i�(
�
 =�
MP_QSTR_vldr
) {

510 
�_code_hi
 = 0xed90;

511 
�_vldr_v�r
:;

512 
mp_u�t_t
 
vd
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

513 
mp_�r�_node_t
 
�_ba�
, 
�_off�t
;

514 i�(
	`g�_�g_addr
(
em�
, 
�_�r
, 
�_�gs
[1], &
�_ba�
, &
�_off�t
)) {

515 
mp_u�t_t
 
�o_ba�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_ba�
, 7);

516 
mp_u�t_t
 
i8
;

517 
i8
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0x3fc) >> 2;

518 
	`asm_thumb_�32
(&
em�
->
as
,

519 
�_code_hi
 | 
�o_ba�
 | ((
vd
 & 1) << 6),

520 0x0a00 | ((
vd
 & 0x1e�<< 11�| 
i8
);

522 } i�(
�
 =�
MP_QSTR_v�r
) {

523 
�_code_hi
 = 0xed80;

524 
�_vldr_v�r
;

526 
unknown_�
;

528 } i�(
n_�gs
 == 3) {

530 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
f�m�_v�_�_�b�
); i++) {

531 i�(
	`��cmp
(
�_�r
 + 1, 
f�m�_v�_�_�b�
[
i
].
�me
, 3) == 0 && op_str[4] == '\0') {

532 
mp_u�t_t
 
�_code_hi
 = 0x�00 | (
f�m�_v�_�_�b�
[
i
].
�
 & 0xf0);

533 
mp_u�t_t
 
�_code
 = 0x0a00 | ((
f�m�_v�_�_�b�
[
i
].
�
 & 0x0f) << 4);

534 
mp_u�t_t
 
vd
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

535 
mp_u�t_t
 
vn
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

536 
mp_u�t_t
 
vm
 = 
	`g�_�g_v�g
(
em�
, 
�_�r
, 
�_�gs
[2]);

537 
	`asm_thumb_�32
(&
em�
->
as
,

538 
�_code_hi
 | ((
vd
 & 1�<< 6�| (
vn
 >> 1),

539 
�_code
 | (
vm
 >> 1�| ((vm & 1�<< 5�| ((
vd
 & 0x1e�<< 11�| ((
vn
 & 1) << 7));

543 
unknown_�
;

545 
unknown_�
;

550 i�(
n_�gs
 == 0) {

551 i�(
�
 =�
MP_QSTR_n�
) {

552 
	`asm_thumb_�16
(&
em�
->
as
, 
ASM_THUMB_OP_NOP
);

553 } i�(
�
 =�
MP_QSTR_wfi
) {

554 
	`asm_thumb_�16
(&
em�
->
as
, 
ASM_THUMB_OP_WFI
);

556 
unknown_�
;

559 } i�(
n_�gs
 == 1) {

560 i�(
�
 =�
MP_QSTR_b
) {

561 
�b�_num
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[0]);

562 i�(!
	`asm_thumb_b_n_�b�
(&
em�
->
as
, 
�b�_num
)) {

563 
b�nch_n�_�_�nge
;

565 } i�(
�
 =�
MP_QSTR_bl
) {

566 
�b�_num
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[0]);

567 i�(!
	`asm_thumb_bl_�b�
(&
em�
->
as
, 
�b�_num
)) {

568 
b�nch_n�_�_�nge
;

570 } i�(
�
 =�
MP_QSTR_bx
) {

571 
mp_u�t_t
 
r
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

572 
	`asm_thumb_�16
(&
em�
->
as
, 0x4700 | (
r
 << 3));

573 } i�(
�_�r
[0] =�'b' && (
�_�n
 == 3

574 || (
�_�n
 =�5 && 
�_�r
[3] == '_'

575 && (
�_�r
[4] =�'n' || (
ARMV7M
 && op_str[4] == 'w'))))) {

576 
mp_u�t_t
 
cc
 = -1;

577 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
cc_�me_�b�
); i++) {

578 i�(
�_�r
[1] =�
cc_�me_�b�
[
i
].
�me
[0] && op_str[2] == cc_name_table[i].name[1]) {

579 
cc
 = 
cc_�me_�b�
[
i
].cc;

582 i�(
cc
 =�(
mp_u�t_t
)-1) {

583 
unknown_�
;

585 
�b�_num
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[0]);

586 
bo�
 
wide
 = 
�_�n
 =�5 && 
�_�r
[4] == 'w';

587 i�(
wide
 && !
ARMV7M
) {

588 
unknown_�
;

590 i�(!
	`asm_thumb_bcc_nw_�b�
(&
em�
->
as
, 
cc
, 
�b�_num
, 
wide
)) {

591 
b�nch_n�_�_�nge
;

593 } i�(
ARMV7M
 && 
�_�r
[0] == 'i' && op_str[1] == 't') {

594 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�_�gs
[0]);

595 
mp_u�t_t
 
cc
 = -1;

596 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
cc_�me_�b�
); i++) {

597 i�(
�g_�r
[0] =�
cc_�me_�b�
[
i
].
�me
[0]

598 && 
�g_�r
[1] =�
cc_�me_�b�
[
i
].
�me
[1]

599 && 
�g_�r
[2] == '\0') {

600 
cc
 = 
cc_�me_�b�
[
i
].cc;

604 i�(
cc
 =�(
mp_u�t_t
)-1) {

605 
unknown_�
;

607 cڡ *
os
 = 
�_�r
 + 2;

608 *
os
 != '\0') {

609 
os
++;

611 i�(
os
 > 
�_�r
 + 5) {

612 
unknown_�
;

614 
mp_u�t_t
 
�_mask
 = 8;

615 --
os
 >�
�_�r
 + 2) {

616 
�_mask
 >>= 1;

617 i�(*
os
 == 't') {

618 
�_mask
 |�(
cc
 & 1) << 3;

619 } i�(*
os
 == 'e') {

620 
�_mask
 |�((~
cc
) & 1) << 3;

622 
unknown_�
;

625 
	`asm_thumb_�_cc
(&
em�
->
as
, 
cc
, 
�_mask
);

626 } i�(
�
 =�
MP_QSTR_�sid
) {

628 
	`asm_thumb_�16
(&
em�
->
as
, 
ASM_THUMB_OP_CPSID_I
);

629 } i�(
�
 =�
MP_QSTR_�s�
) {

631 
	`asm_thumb_�16
(&
em�
->
as
, 
ASM_THUMB_OP_CPSIE_I
);

632 } i�(
�
 =�
MP_QSTR_push
) {

633 
mp_u�t_t
 
�gli�
 = 
	`g�_�g_�gli�
(
em�
, 
�_�r
, 
�_�gs
[0]);

634 i�((
�gli�
 & 0xbf00) == 0) {

635 i�((
�gli�
 & (1 << 14)) == 0) {

636 
	`asm_thumb_�16
(&
em�
->
as
, 0xb400 | 
�gli�
);

639 
	`asm_thumb_�16
(&
em�
->
as
, 0xb500 | (
�gli�
 & 0xff));

642 i�(!
ARMV7M
) {

643 
unknown_�
;

645 
	`asm_thumb_�32
(&
em�
->
as
, 0xe92d, 
�gli�
);

647 } i�(
�
 =�
MP_QSTR_p�
) {

648 
mp_u�t_t
 
�gli�
 = 
	`g�_�g_�gli�
(
em�
, 
�_�r
, 
�_�gs
[0]);

649 i�((
�gli�
 & 0x7f00) == 0) {

650 i�((
�gli�
 & (1 << 15)) == 0) {

651 
	`asm_thumb_�16
(&
em�
->
as
, 0xbc00 | 
�gli�
);

654 
	`asm_thumb_�16
(&
em�
->
as
, 0xbd00 | (
�gli�
 & 0xff));

657 i�(!
ARMV7M
) {

658 
unknown_�
;

660 
	`asm_thumb_�32
(&
em�
->
as
, 0xe8bd, 
�gli�
);

663 
unknown_�
;

666 } i�(
n_�gs
 == 2) {

667 i�(
	`MP_PARSE_NODE_IS_ID
(
�_�gs
[1])) {

669 
mp_u�t_t
 
�_code
, 
�_code_hi
;

670 i�(
�
 =�
MP_QSTR_mov
) {

671 
mp_u�t_t
 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

672 
mp_u�t_t
 
�g_�c
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 15);

673 
	`asm_thumb_mov_�g_�g
(&
em�
->
as
, 
�g_de�
, 
�g_�c
);

674 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_�z
) {

675 
�_code_hi
 = 0xfab0;

676 
�_code
 = 0xf080;

677 
mp_u�t_t
 
rd
, 
rm
;

678 
�_�z_rb�
:

679 
rd
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

680 
rm
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 15);

681 
	`asm_thumb_�32
(&
em�
->
as
, 
�_code_hi
 | 
rm
, 
�_code
 | (
rd
 << 8) |�m);

682 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_rb�
) {

683 
�_code_hi
 = 0xfa90;

684 
�_code
 = 0xf0a0;

685 
�_�z_rb�
;

686 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_mrs
) {

687 
mp_u�t_t
 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 12);

688 
mp_u�t_t
 
�g_�c
 = 
	`g�_�g_�ec�l_�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

689 
	`asm_thumb_�32
(&
em�
->
as
, 0xf3ef, 0x8000 | (
�g_de�
 << 8�| 
�g_�c
);

691 i�(
�
 =�
MP_QSTR_�d_
) {

692 
�_code
 = 
ASM_THUMB_FORMAT_4_AND
;

693 
mp_u�t_t
 
�g_de�
, 
�g_�c
;

694 
�_f�m�_4
:

695 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 7);

696 
�g_�c
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 7);

697 
	`asm_thumb_f�m�_4
(&
em�
->
as
, 
�_code
, 
�g_de�
, 
�g_�c
);

701 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
f�m�_4_�_�b�
); i++) {

702 i�(
	`��cmp
(
�_�r
, 
f�m�_4_�_�b�
[
i
].
�me
, 3) == 0 && op_str[3] == '\0') {

703 
�_code
 = 0x4000 | (
f�m�_4_�_�b�
[
i
].
�
 << 4);

704 
�_f�m�_4
;

707 
unknown_�
;

711 
mp_u�t_t
 
�_code
;

712 i�(
�
 =�
MP_QSTR_mov
) {

713 
�_code
 = 
ASM_THUMB_FORMAT_3_MOV
;

714 
mp_u�t_t
 
�o_de�
, 
i8_�c
;

715 
�_f�m�_3
:

716 
�o_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 7);

717 
i8_�c
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[1], 0xff);

718 
	`asm_thumb_f�m�_3
(&
em�
->
as
, 
�_code
, 
�o_de�
, 
i8_�c
);

719 } i�(
�
 =�
MP_QSTR_cmp
) {

720 
�_code
 = 
ASM_THUMB_FORMAT_3_CMP
;

721 
�_f�m�_3
;

722 } i�(
�
 =�
MP_QSTR_add
) {

723 
�_code
 = 
ASM_THUMB_FORMAT_3_ADD
;

724 
�_f�m�_3
;

725 } i�(
�
 =�
MP_QSTR_sub
) {

726 
�_code
 = 
ASM_THUMB_FORMAT_3_SUB
;

727 
�_f�m�_3
;

728 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_movw
) {

729 
�_code
 = 
ASM_THUMB_OP_MOVW
;

730 
mp_u�t_t
 
�g_de�
;

731 
�_movw_movt
:

732 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

733 
i_�c
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[1], 0xffff);

734 
	`asm_thumb_mov_�g_i16
(&
em�
->
as
, 
�_code
, 
�g_de�
, 
i_�c
);

735 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_movt
) {

736 
�_code
 = 
ASM_THUMB_OP_MOVT
;

737 
�_movw_movt
;

738 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_movwt
) {

740 
mp_u�t_t
 
�g_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

741 
u�t32_t
 
i_�c
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[1], 0xffffffff);

742 
	`asm_thumb_mov_�g_i16
(&
em�
->
as
, 
ASM_THUMB_OP_MOVW
, 
�g_de�
, 
i_�c
 & 0xffff);

743 
	`asm_thumb_mov_�g_i16
(&
em�
->
as
, 
ASM_THUMB_OP_MOVT
, 
�g_de�
, (
i_�c
 >> 16) & 0xffff);

744 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_ld�x
) {

745 
mp_u�t_t
 
r_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

746 
mp_�r�_node_t
 
�_ba�
, 
�_off�t
;

747 i�(
	`g�_�g_addr
(
em�
, 
�_�r
, 
�_�gs
[1], &
�_ba�
, &
�_off�t
)) {

748 
mp_u�t_t
 
r_ba�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_ba�
, 15);

749 
mp_u�t_t
 
i8
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0xff) >> 2;

750 
	`asm_thumb_�32
(&
em�
->
as
, 0xe850 | 
r_ba�
, 0x0f00 | (
r_de�
 << 12�| 
i8
);

754 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
f�m�_9_10_�_�b�
); i++) {

755 i�(
�
 =�
f�m�_9_10_�_�b�
[
i
].
�me
) {

756 
�_code
 = 
f�m�_9_10_�_�b�
[
i
].
�
;

757 
mp_�r�_node_t
 
�_ba�
, 
�_off�t
;

758 
mp_u�t_t
 
�o_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 7);

759 i�(
	`g�_�g_addr
(
em�
, 
�_�r
, 
�_�gs
[1], &
�_ba�
, &
�_off�t
)) {

760 
mp_u�t_t
 
�o_ba�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_ba�
, 7);

761 
mp_u�t_t
 
i5
;

762 i�(
�_code
 & 
ASM_THUMB_FORMAT_9_BYTE_TRANSFER
) {

763 
i5
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0x1f);

764 } i�(
�_code
 & 
ASM_THUMB_FORMAT_10_STRH
) {

765 
i5
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0x3e) >> 1;

767 
i5
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0x7c) >> 2;

769 
	`asm_thumb_f�m�_9_10
(&
em�
->
as
, 
�_code
, 
�o_de�
, 
�o_ba�
, 
i5
);

775 
unknown_�
;

779 } i�(
n_�gs
 == 3) {

780 
mp_u�t_t
 
�_code
;

781 i�(
�
 =�
MP_QSTR_l�
) {

782 
�_code
 = 
ASM_THUMB_FORMAT_1_LSL
;

783 
mp_u�t_t
 
�o_de�
, 
�o_�c
, 
i5
;

784 
�_f�m�_1
:

785 
�o_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 7);

786 
�o_�c
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 7);

787 
i5
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[2], 0x1f);

788 
	`asm_thumb_f�m�_1
(&
em�
->
as
, 
�_code
, 
�o_de�
, 
�o_�c
, 
i5
);

789 } i�(
�
 =�
MP_QSTR_l�
) {

790 
�_code
 = 
ASM_THUMB_FORMAT_1_LSR
;

791 
�_f�m�_1
;

792 } i�(
�
 =�
MP_QSTR_a�
) {

793 
�_code
 = 
ASM_THUMB_FORMAT_1_ASR
;

794 
�_f�m�_1
;

795 } i�(
�
 =�
MP_QSTR_add
) {

796 
�_code
 = 
ASM_THUMB_FORMAT_2_ADD
;

797 
mp_u�t_t
 
�o_de�
, 
�o_�c
;

798 
�_f�m�_2
:

799 
�o_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 7);

800 
�o_�c
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 7);

801 
�c_b
;

802 i�(
	`MP_PARSE_NODE_IS_ID
(
�_�gs
[2])) {

803 
�_code
 |�
ASM_THUMB_FORMAT_2_REG_OPERAND
;

804 
�c_b
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[2], 7);

806 
�_code
 |�
ASM_THUMB_FORMAT_2_IMM_OPERAND
;

807 
�c_b
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[2], 0x7);

809 
	`asm_thumb_f�m�_2
(&
em�
->
as
, 
�_code
, 
�o_de�
, 
�o_�c
, 
�c_b
);

810 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_sdiv
) {

811 
�_code
 = 0xfb90;

812 
mp_u�t_t
 
rd
, 
�
, 
rm
;

813 
�_sdiv_udiv
:

814 
rd
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

815 
�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 15);

816 
rm
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[2], 15);

817 
	`asm_thumb_�32
(&
em�
->
as
, 
�_code
 | 
�
, 0xf0f0 | (
rd
 << 8�| 
rm
);

818 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_udiv
) {

819 
�_code
 = 0xfbb0;

820 
�_sdiv_udiv
;

821 } i�(
�
 =�
MP_QSTR_sub
) {

822 
�_code
 = 
ASM_THUMB_FORMAT_2_SUB
;

823 
�_f�m�_2
;

824 } i�(
ARMV7M
 && 
�
 =�
MP_QSTR_��x
) {

825 
mp_u�t_t
 
r_de�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0], 15);

826 
mp_u�t_t
 
r_�c
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1], 15);

827 
mp_�r�_node_t
 
�_ba�
, 
�_off�t
;

828 i�(
	`g�_�g_addr
(
em�
, 
�_�r
, 
�_�gs
[2], &
�_ba�
, &
�_off�t
)) {

829 
mp_u�t_t
 
r_ba�
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_ba�
, 15);

830 
mp_u�t_t
 
i8
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_off�t
, 0xff) >> 2;

831 
	`asm_thumb_�32
(&
em�
->
as
, 0xe840 | 
r_ba�
, (
r_�c
 << 12�| (
r_de�
 << 8�| 
i8
);

834 
unknown_�
;

838 
unknown_�
;

843 
unknown_�
:

844 
	`em�_�l�e_thumb_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("unsu�܋d Thumb in�ru�i� '%s' w�h %d�rgum�ts"), 
�_�r
, 
n_�gs
));

847 
b�nch_n�_�_�nge
:

848 
	`em�_�l�e_thumb_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("branch�ot in�ange"));

850 
	}
}

852 cڡ 
em�_�l�e_asm_m�hod_�b�_t
 
	gem�_�l�e_thumb_m�hod_�b�
 = {

853 #i�
MICROPY_DYNAMIC_COMPILER


854 
em�_�l�e_thumb_�w
,

855 
em�_�l�e_thumb_�
,

858 
em�_�l�e_thumb_��t_�ss
,

859 
em�_�l�e_thumb_�d_�ss
,

860 
em�_�l�e_thumb_cou�_��ms
,

861 
em�_�l�e_thumb_�b�
,

862 
em�_�l�e_thumb_�
,

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitinlinextensa.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<�d�g.h
>

31 
	~<as��.h
>

33 
	~"py/em�.h
"

34 
	~"py/asmx�n�.h
"

36 #i�
MICROPY_EMIT_INLINE_XTENSA


38 
	s_em�_�l�e_asm_t
 {

39 
asm_x�n�_t
 
	mas
;

40 
u�t16_t
 
	m�ss
;

41 
mp_obj_t
 *
	m�r�_��
;

42 
mp_u�t_t
 
	mmax_num_�b�s
;

43 
q�r
 *
	m�b�_lookup
;

46 
	$em�_�l�e_x�n�_�r�_msg
(
em�_�l�e_asm_t
 *
em�
, 
mp_rom_�r�_�xt_t
 
msg
) {

47 *
em�
->
�r�_��
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
, 
msg
);

48 
	}
}

50 
	$em�_�l�e_x�n�_�r�_exc
(
em�_�l�e_asm_t
 *
em�
, 
mp_obj_t
 
exc
) {

51 *
em�
->
�r�_��
 = 
exc
;

52 
	}
}

54 
em�_�l�e_asm_t
 *
	$em�_�l�e_x�n�_�w
(
mp_u�t_t
 
max_num_�b�s
) {

55 
em�_�l�e_asm_t
 *
em�
 = 
	`m_�w_obj
(emit_inline_asm_t);

56 
	`mem�t
(&
em�
->
as
, 0, (emit->as));

57 
	`mp_asm_ba�_��
(&
em�
->
as
.
ba�
, 
max_num_�b�s
);

58 
em�
->
max_num_�b�s
 = max_num_labels;

59 
em�
->
�b�_lookup
 = 
	`m_�w
(
q�r
, 
max_num_�b�s
);

60  
em�
;

61 
	}
}

63 
	$em�_�l�e_x�n�_�
(
em�_�l�e_asm_t
 *
em�
) {

64 
	`m_d�
(
q�r
, 
em�
->
�b�_lookup
,�m�->
max_num_�b�s
);

65 
	`mp_asm_ba�_de��
(&
em�
->
as
.
ba�
, 
�l�
);

66 
	`m_d�_obj
(
em�_�l�e_asm_t
, 
em�
);

67 
	}
}

69 
	$em�_�l�e_x�n�_��t_�ss
(
em�_�l�e_asm_t
 *
em�
, 
�ss_k�d_t
 
�ss
, 
mp_obj_t
 *
�r�_��
) {

70 
em�
->
�ss
 =�ass;

71 
em�
->
�r�_��
 =�rror_slot;

72 i�(
em�
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

73 
	`mem�t
(
em�
->
�b�_lookup
, 0,�m�->
max_num_�b�s
 * (
q�r
));

75 
	`mp_asm_ba�_��t_�ss
(&
em�
->
as
.
ba�
, 
�ss
 =�
MP_PASS_EMIT
 ? 
MP_ASM_PASS_EMIT
 : 
MP_ASM_PASS_COMPUTE
);

76 
	`asm_x�n�_��y
(&
em�
->
as
, 0);

77 
	}
}

79 
	$em�_�l�e_x�n�_�d_�ss
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
ty�_sig
) {

80 
	`asm_x�n�_ex�
(&
em�
->
as
);

81 
	`asm_x�n�_�d_�ss
(&
em�
->
as
);

82 
	}
}

84 
mp_u�t_t
 
	$em�_�l�e_x�n�_cou�_��ms
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
n_��ms
, 
mp_�r�_node_t
 *
�_��ms
) {

85 i�(
n_��ms
 > 4) {

86 
	`em�_�l�e_x�n�_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("can only have up�o 4�arameters�o Xtensa�ssembly"));

89 
mp_u�t_t
 
i
 = 0; i < 
n_��ms
; i++) {

90 i�(!
	`MP_PARSE_NODE_IS_ID
(
�_��ms
[
i
])) {

91 
	`em�_�l�e_x�n�_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("parameters must be�egisters in sequence�2�o�5"));

94 cڡ *
p
 = 
	`q�r_�r
(
	`MP_PARSE_NODE_LEAF_ARG
(
�_��ms
[
i
]));

95 i�(!(
	`���
(
p
�=�2 &&�[0] =�'a' && (
mp_u�t_t
�[1] =�'2' + 
i
)) {

96 
	`em�_�l�e_x�n�_�r�_msg
(
em�
, 
	`MP_ERROR_TEXT
("parameters must be�egisters in sequence�2�o�5"));

100  
n_��ms
;

101 
	}
}

103 
bo�
 
	$em�_�l�e_x�n�_�b�
(
em�_�l�e_asm_t
 *
em�
, 
mp_u�t_t
 
�b�_num
, 
q�r
 
�b�_id
) {

104 
	`as��
(
�b�_num
 < 
em�
->
max_num_�b�s
);

105 i�(
em�
->
�ss
 =�
MP_PASS_CODE_SIZE
) {

107 
u�t
 
i
 = 0; i < 
em�
->
max_num_�b�s
; i++) {

108 i�(
em�
->
�b�_lookup
[
i
] =�
�b�_id
) {

109  
�l�
;

113 
em�
->
�b�_lookup
[
�b�_num
] = 
�b�_id
;

114 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
.
ba�
, 
�b�_num
);

115  
�ue
;

116 
	}
}

118 
	s_�g_�me_t
 { 
by�
 
	m�g
;

119 
by�
 
	m�me
[3];

120 } 
	t�g_�me_t
;

121 cڡ 
�g_�me_t
 
	g�g_�me_�b�
[] = {

142 cڡ *
	$g�_�g_�r
(
mp_�r�_node_t
 
�
) {

143 i�(
	`MP_PARSE_NODE_IS_ID
(
�
)) {

144 
q�r
 
q�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

145  
	`q�r_�r
(
q�
);

149 
	}
}

151 
mp_u�t_t
 
	$g�_�g_�g
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

152 cڡ *
�g_�r
 = 
	`g�_�g_�r
(
�
);

153 
mp_u�t_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
�g_�me_�b�
); i++) {

154 cڡ 
�g_�me_t
 *
r
 = &
�g_�me_�b�
[
i
];

155 i�(
�g_�r
[0] =�
r
->
�me
[0]

156 && 
�g_�r
[1] =�
r
->
�me
[1]

157 && 
�g_�r
[2] =�
r
->
�me
[2]

158 && (
�g_�r
[2] == '\0' ||�eg_str[3] == '\0')) {

159  
r
->
�g
;

162 
	`em�_�l�e_x�n�_�r�_exc
(
em�
,

163 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
,

164 
	`MP_ERROR_TEXT
("'%s'�x�����gi��"), 
�
));

166 
	}
}

168 
u�t32_t
 
	$g�_�g_i
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
, 
m�
, 
max
) {

169 
mp_obj_t
 
o
;

170 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
o
)) {

171 
	`em�_�l�e_x�n�_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x���� i�eg�"), 
�
));

174 
u�t32_t
 
i
 = 
	`mp_obj_g�_�t_�un��d
(
o
);

175 i�(
m�
 !�
max
 && (()
i
 < min || ()i > max)) {

176 
	`em�_�l�e_x�n�_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s' i�eg� %d i�'�w�h���g�%d..%d"), 
�
, 
i
, 
m�
, 
max
));

179  
i
;

180 
	}
}

182 
	$g�_�g_�b�
(
em�_�l�e_asm_t
 *
em�
, cڡ *
�
, 
mp_�r�_node_t
 
�
) {

183 i�(!
	`MP_PARSE_NODE_IS_ID
(
�
)) {

184 
	`em�_�l�e_x�n�_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("'%s'�x�����b�"), 
�
));

187 
q�r
 
�b�_q�r
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

188 
u�t
 
i
 = 0; i < 
em�
->
max_num_�b�s
; i++) {

189 i�(
em�
->
�b�_lookup
[
i
] =�
�b�_q�r
) {

190  
i
;

194 i�(
em�
->
�ss
 =�
MP_PASS_EMIT
) {

195 
	`em�_�l�e_x�n�_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("�b� '%q'�� def�ed"), 
�b�_q�r
));

198 
	}
}

200 
	#RRR
 (0)

	)

201 
	#RRI8
 (1)

	)

202 
	#RRI8_B
 (2)

	)

204 
	s_�code_�b�_3�g_t
 {

205 
u�t16_t
 
	m�me
;

206 
u�t8_t
 
	mty�
;

207 
u�t8_t
 
	ma0
 : 4;

208 
u�t8_t
 
	ma1
 : 4;

209 } 
	t�code_�b�_3�g_t
;

211 cڡ 
�code_�b�_3�g_t
 
	g�code_�b�_3�g
[] = {

213 {
MP_QSTR_�d_
, 
RRR
, 0, 1},

214 {
MP_QSTR_�_
, 
RRR
, 0, 2},

215 {
MP_QSTR_x�
, 
RRR
, 0, 3},

216 {
MP_QSTR_add
, 
RRR
, 0, 8},

217 {
MP_QSTR_sub
, 
RRR
, 0, 12},

218 {
MP_QSTR_mu�
, 
RRR
, 2, 8},

222 {
MP_QSTR_l8ui
, 
RRI8
 | 0x10, 2, 0},

223 {
MP_QSTR_l16ui
, 
RRI8
 | 0x30, 2, 1},

224 {
MP_QSTR_l32i
, 
RRI8
 | 0x50, 2, 2},

225 {
MP_QSTR_s8i
, 
RRI8
 | 0x10, 2, 4},

226 {
MP_QSTR_s16i
, 
RRI8
 | 0x30, 2, 5},

227 {
MP_QSTR_s32i
, 
RRI8
 | 0x50, 2, 6},

228 {
MP_QSTR_l16si
, 
RRI8
 | 0x30, 2, 9},

229 {
MP_QSTR_addi
, 
RRI8
 | 0x00, 2, 12},

232 {
MP_QSTR_b�l
, 
RRI8_B
, 
ASM_XTENSA_CC_ALL
, 0},

233 {
MP_QSTR_b�y
, 
RRI8_B
, 
ASM_XTENSA_CC_ANY
, 0},

234 {
MP_QSTR_bbc
, 
RRI8_B
, 
ASM_XTENSA_CC_BC
, 0},

235 {
MP_QSTR_bbs
, 
RRI8_B
, 
ASM_XTENSA_CC_BS
, 0},

236 {
MP_QSTR_beq
, 
RRI8_B
, 
ASM_XTENSA_CC_EQ
, 0},

237 {
MP_QSTR_bge
, 
RRI8_B
, 
ASM_XTENSA_CC_GE
, 0},

238 {
MP_QSTR_bgeu
, 
RRI8_B
, 
ASM_XTENSA_CC_GEU
, 0},

239 {
MP_QSTR_b�
, 
RRI8_B
, 
ASM_XTENSA_CC_LT
, 0},

240 {
MP_QSTR_b��
, 
RRI8_B
, 
ASM_XTENSA_CC_NALL
, 0},

241 {
MP_QSTR_b�
, 
RRI8_B
, 
ASM_XTENSA_CC_NE
, 0},

242 {
MP_QSTR_bn�e
, 
RRI8_B
, 
ASM_XTENSA_CC_NONE
, 0},

245 
	$em�_�l�e_x�n�_�
(
em�_�l�e_asm_t
 *
em�
, 
q�r
 
�
, 
mp_u�t_t
 
n_�gs
, 
mp_�r�_node_t
 *
�_�gs
) {

246 
size_t
 
�_�n
;

247 cڡ *
�_�r
 = (cڡ *)
	`q�r_d�a
(
�
, &
�_�n
);

249 i�(
n_�gs
 == 0) {

250 i�(
�
 =�
MP_QSTR_�t_n
) {

251 
	`asm_x�n�_�_�t_n
(&
em�
->
as
);

253 
unknown_�
;

256 } i�(
n_�gs
 == 1) {

257 i�(
�
 =�
MP_QSTR_��x0
) {

258 
u�t
 
r0
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

259 
	`asm_x�n�_�_��x0
(&
em�
->
as
, 
r0
);

260 } i�(
�
 =�
MP_QSTR_j
) {

261 
�b�
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[0]);

262 
	`asm_x�n�_j_�b�
(&
em�
->
as
, 
�b�
);

263 } i�(
�
 =�
MP_QSTR_jx
) {

264 
u�t
 
r0
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

265 
	`asm_x�n�_�_jx
(&
em�
->
as
, 
r0
);

267 
unknown_�
;

270 } i�(
n_�gs
 == 2) {

271 
u�t
 
r0
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

272 i�(
�
 =�
MP_QSTR_beqz
) {

273 
�b�
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[1]);

274 
	`asm_x�n�_bccz_�g_�b�
(&
em�
->
as
, 
ASM_XTENSA_CCZ_EQ
, 
r0
, 
�b�
);

275 } i�(
�
 =�
MP_QSTR_b�z
) {

276 
�b�
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[1]);

277 
	`asm_x�n�_bccz_�g_�b�
(&
em�
->
as
, 
ASM_XTENSA_CCZ_NE
, 
r0
, 
�b�
);

278 } i�(
�
 =�
MP_QSTR_mov
 || o�=�
MP_QSTR_mov_n
) {

280 
u�t
 
r1
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

281 
	`asm_x�n�_�_mov_n
(&
em�
->
as
, 
r0
, 
r1
);

282 } i�(
�
 =�
MP_QSTR_movi
) {

284 
u�t32_t
 
imm
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[1], 0, 0);

285 
	`asm_x�n�_mov_�g_i32
(&
em�
->
as
, 
r0
, 
imm
);

287 
unknown_�
;

290 } i�(
n_�gs
 == 3) {

292 
u�t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
�code_�b�_3�g
); i++) {

293 cڡ 
�code_�b�_3�g_t
 *
o
 = &
�code_�b�_3�g
[
i
];

294 i�(
�
 =�
o
->
�me
) {

295 
u�t
 
r0
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[0]);

296 
u�t
 
r1
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[1]);

297 i�(
o
->
ty�
 =�
RRR
) {

298 
u�t
 
r2
 = 
	`g�_�g_�g
(
em�
, 
�_�r
, 
�_�gs
[2]);

299 
	`asm_x�n�_�24
(&
em�
->
as
, 
	`ASM_XTENSA_ENCODE_RRR
(0, 
o
->
a0
, o->
a1
, 
r0
, 
r1
, 
r2
));

300 } i�(
o
->
ty�
 =�
RRI8_B
) {

301 
�b�
 = 
	`g�_�g_�b�
(
em�
, 
�_�r
, 
�_�gs
[2]);

302 
	`asm_x�n�_bcc_�g_�g_�b�
(&
em�
->
as
, 
o
->
a0
, 
r0
, 
r1
, 
�b�
);

304 
shi�
, 
m�
, 
max
;

305 i�((
o
->
ty�
 & 0xf0) == 0) {

306 
shi�
 = 0;

307 
m�
 = -128;

308 
max
 = 127;

310 
shi�
 = (
o
->
ty�
 & 0xf0) >> 5;

311 
m�
 = 0;

312 
max
 = 0xf�<< 
shi�
;

314 
u�t32_t
 
imm
 = 
	`g�_�g_i
(
em�
, 
�_�r
, 
�_�gs
[2], 
m�
, 
max
);

315 
	`asm_x�n�_�24
(&
em�
->
as
, 
	`ASM_XTENSA_ENCODE_RRI8
(
o
->
a0
, o->
a1
, 
r1
, 
r0
, (
imm
 >> 
shi�
) & 0xff));

320 
unknown_�
;

323 
unknown_�
;

328 
unknown_�
:

329 
	`em�_�l�e_x�n�_�r�_exc
(
em�
, 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_Sy�axE��
, 
	`MP_ERROR_TEXT
("unsu�܋d X�n� in�ru�i� '%s' w�h %d�rgum�ts"), 
�_�r
, 
n_�gs
));

337 
	}
}

339 cڡ 
em�_�l�e_asm_m�hod_�b�_t
 
	gem�_�l�e_x�n�_m�hod_�b�
 = {

340 #i�
MICROPY_DYNAMIC_COMPILER


341 
em�_�l�e_x�n�_�w
,

342 
em�_�l�e_x�n�_�
,

345 
em�_�l�e_x�n�_��t_�ss
,

346 
em�_�l�e_x�n�_�d_�ss
,

347 
em�_�l�e_x�n�_cou�_��ms
,

348 
em�_�l�e_x�n�_�b�
,

349 
em�_�l�e_x�n�_�
,

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnarm.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_ARM


8 
	#GENERIC_ASM_API
 (1)

	)

9 
	~"py/asm�m.h
"

12 
	#NLR_BUF_IDX_LOCAL_1
 (3)

13 

	)

14 
	#N_ARM
 (1)

	)

15 
	#EXPORT_FUN
(
�me
�
em�_�tive_�m_
##
	)
name

16 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnative.c

45 
	~<�dio.h
>

46 
	~<�r�g.h
>

47 
	~<as��.h
>

49 
	~"py/em�.h
"

50 
	~"py/�tiveglue.h
"

51 
	~"py/objfun.h
"

52 
	~"py/obj�r.h
"

54 #i�
MICROPY_DEBUG_VERBOSE


55 
	#DEBUG_PRINT
 (1)

	)

56 
	#DEBUG_��tf
 
DEBUG_��tf


	)

58 
	#DEBUG_��tf
(...�()0

	)

62 #i�
N_X64
 || 
N_X86
 || 
N_THUMB
 || 
N_ARM
 || 
N_XTENSA
 || 
N_XTENSAWIN
 || 
N_RV32
 || 
N_DEBUG


92 #i�
MICROPY_DYNAMIC_COMPILER


93 
	#SIZEOF_NLR_BUF
 (2 + 
mp_dy�mic_comp��
.
�r_buf_num_�gs
 + 1)

94 #��

	)

95 
	#SIZEOF_NLR_BUF
 ((
�r_buf_t
�/ (
u���_t
))

	)

97 
	#SIZEOF_CODE_STATE
 ((
mp_code_��e_�tive_t
�/ (
u���_t
))

	)

98 
	#OFFSETOF_CODE_STATE_STATE
 (
	`off�tof
(
mp_code_��e_�tive_t
, 
��e
�/ (
u���_t
))

	)

99 
	#OFFSETOF_CODE_STATE_FUN_BC
 (
	`off�tof
(
mp_code_��e_�tive_t
, 
fun_bc
�/ (
u���_t
))

	)

100 
	#OFFSETOF_CODE_STATE_IP
 (
	`off�tof
(
mp_code_��e_�tive_t
, 
�
�/ (
u���_t
))

	)

101 
	#OFFSETOF_CODE_STATE_SP
 (
	`off�tof
(
mp_code_��e_�tive_t
, 
�
�/ (
u���_t
))

	)

102 
	#OFFSETOF_CODE_STATE_N_STATE
 (
	`off�tof
(
mp_code_��e_�tive_t
, 
n_��e
�/ (
u���_t
))

	)

103 
	#OFFSETOF_OBJ_FUN_BC_CONTEXT
 (
	`off�tof
(
mp_obj_fun_bc_t
, 
cڋxt
�/ (
u���_t
))

	)

104 
	#OFFSETOF_OBJ_FUN_BC_CHILD_TABLE
 (
	`off�tof
(
mp_obj_fun_bc_t
, 
ch�d_�b�
�/ (
u���_t
))

	)

105 
	#OFFSETOF_OBJ_FUN_BC_BYTECODE
 (
	`off�tof
(
mp_obj_fun_bc_t
, 
by�code
�/ (
u���_t
))

	)

106 
	#OFFSETOF_MODULE_CONTEXT_QSTR_TABLE
 (
	`off�tof
(
mp_modu�_cڋxt_t
, 
cڡ�ts
.
q�r_�b�
�/ (
u���_t
))

	)

107 
	#OFFSETOF_MODULE_CONTEXT_OBJ_TABLE
 (
	`off�tof
(
mp_modu�_cڋxt_t
, 
cڡ�ts
.
obj_�b�
�/ (
u���_t
))

	)

108 
	#OFFSETOF_MODULE_CONTEXT_GLOBALS
 (
	`off�tof
(
mp_modu�_cڋxt_t
, 
modu�
.
glob�s
�/ (
u���_t
))

	)

111 #i�de�
REG_PARENT_RET


112 
	#REG_PARENT_RET
 
REG_RET


	)

113 
	#REG_PARENT_ARG_1
 
REG_ARG_1


	)

114 
	#REG_PARENT_ARG_2
 
REG_ARG_2


	)

115 
	#REG_PARENT_ARG_3
 
REG_ARG_3


	)

116 
	#REG_PARENT_ARG_4
 
REG_ARG_4


	)

120 
	#NLR_BUF_IDX_RET_VAL
 (1)

	)

123 
	#NEED_FUN_OBJ
(
em�
�(�m�)->
sc�e
->
exc_�ack_size
 > 0 \

124 || ((
em�
)->
sc�e
->
sc�e_�ags
 & (
MP_SCOPE_FLAG_REFGLOBALS
 | 
MP_SCOPE_FLAG_HASCONSTS
)))

	)

127 
	#NEED_GLOBAL_EXC_HANDLER
(
em�
�(�m�)->
sc�e
->
exc_�ack_size
 > 0 \

128 || ((
em�
)->
sc�e
->
sc�e_�ags
 & (
MP_SCOPE_FLAG_GENERATOR
 | 
MP_SCOPE_FLAG_REFGLOBALS
)))

	)

131 
	#NEED_EXC_HANDLER_UNWIND
(
em�
�(�m�)->
sc�e
->
exc_�ack_size
 > 0)

	)

132 
	#NEED_THROW_VAL
(
em�
�(�m�)->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)

	)

137 
	#CAN_USE_REGS_FOR_LOCALS
(
em�
�(�m�)->
sc�e
->
exc_�ack_size
 =�0 && !�m�->sc�e->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
))

	)

140 
	#LOCAL_IDX_EXC_VAL
(
em�
�(
NLR_BUF_IDX_RET_VAL
)

	)

141 
	#LOCAL_IDX_EXC_HANDLER_PC
(
em�
�(
NLR_BUF_IDX_LOCAL_1
)

	)

142 
	#LOCAL_IDX_EXC_HANDLER_UNWIND
(
em�
�(
SIZEOF_NLR_BUF
 + 1)

143 
	#LOCAL_IDX_THROW_VAL
(
em�
�(
SIZEOF_NLR_BUF
 + 2)

144 
	#LOCAL_IDX_RET_VAL
(
em�
�(
SIZEOF_NLR_BUF
)

145 
	#LOCAL_IDX_FUN_OBJ
(
em�
�(�m�)->
code_��e_��t
 + 
OFFSETOF_CODE_STATE_FUN_BC
)

	)

146 
	#LOCAL_IDX_OLD_GLOBALS
(
em�
�(�m�)->
code_��e_��t
 + 
OFFSETOF_CODE_STATE_IP
)

	)

147 
	#LOCAL_IDX_GEN_PC
(
em�
�(�m�)->
code_��e_��t
 + 
OFFSETOF_CODE_STATE_IP
)

	)

148 
	#LOCAL_IDX_LOCAL_VAR
(
em�
, 
lo�l_num
�(�m�)->
�ack_��t
 + (em�)->
n_��e
 - 1 - (lo�l_num))

	)

150 #i�
MICROPY_PERSISTENT_CODE_SAVE


157 
	#REG_GENERATOR_STATE
 (
REG_LOCAL_2
)

	)

158 
	#REG_QSTR_TABLE
 (
REG_LOCAL_3
)

	)

159 
	#MAX_REGS_FOR_LOCAL_VARS
 (2)

	)

161 cڡ 
u�t8_t
 
	g�g_lo�l_�b�
[
MAX_REGS_FOR_LOCAL_VARS
] = {
REG_LOCAL_1
, 
REG_LOCAL_2
};

170 
	#REG_GENERATOR_STATE
 (
REG_LOCAL_3
)

	)

171 
	#MAX_REGS_FOR_LOCAL_VARS
 (3)

	)

173 cڡ 
u�t8_t
 
	g�g_lo�l_�b�
[
MAX_REGS_FOR_LOCAL_VARS
] = {
REG_LOCAL_1
, 
REG_LOCAL_2
, 
REG_LOCAL_3
};

177 
	#REG_LOCAL_LAST
 (
�g_lo�l_�b�
[
MAX_REGS_FOR_LOCAL_VARS
 - 1])

	)

179 
	#EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
, ...) do { \

180 *
em�
->
�r�_��
 = 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_V��Ty�E��
, 
__VA_ARGS__
); \

181 } 0)

	)

183 #i�
N_RV32


184 
	#FIT_SIGNED
(
v�ue
, 
b�s
) \

185 ((((
v�ue
�& ~((1U << ((
b�s
) - 1)) - 1)) == 0) || \

186 (((
v�ue
�& ~((1U << ((
b�s
�- 1)�- 1)�=�~((1U << ((b�s�- 1)�- 1)))

	)

190 
	mSTACK_VALUE
,

191 
	mSTACK_REG
,

192 
	mSTACK_IMM
,

193 } 
	t�ack_�fo_k�d_t
;

198 
	mVTYPE_PYOBJ
 = 0x00 | 
MP_NATIVE_TYPE_OBJ
,

199 
	mVTYPE_BOOL
 = 0x00 | 
MP_NATIVE_TYPE_BOOL
,

200 
	mVTYPE_INT
 = 0x00 | 
MP_NATIVE_TYPE_INT
,

201 
	mVTYPE_UINT
 = 0x00 | 
MP_NATIVE_TYPE_UINT
,

202 
	mVTYPE_PTR
 = 0x00 | 
MP_NATIVE_TYPE_PTR
,

203 
	mVTYPE_PTR8
 = 0x00 | 
MP_NATIVE_TYPE_PTR8
,

204 
	mVTYPE_PTR16
 = 0x00 | 
MP_NATIVE_TYPE_PTR16
,

205 
	mVTYPE_PTR32
 = 0x00 | 
MP_NATIVE_TYPE_PTR32
,

207 
	mVTYPE_PTR_NONE
 = 0x50 | 
MP_NATIVE_TYPE_PTR
,

209 
	mVTYPE_UNBOUND
 = 0x60 | 
MP_NATIVE_TYPE_OBJ
,

210 
	mVTYPE_BUILTIN_CAST
 = 0x70 | 
MP_NATIVE_TYPE_OBJ
,

211 } 
	tvty�_k�d_t
;

213 
q�r
 
	$vty�_to_q�r
(
vty�_k�d_t
 
vty�
) {

214 
vty�
) {

215 
VTYPE_PYOBJ
:

216  
MP_QSTR_obje�
;

217 
VTYPE_BOOL
:

218  
MP_QSTR_bo�
;

219 
VTYPE_INT
:

220  
MP_QSTR_�t
;

221 
VTYPE_UINT
:

222  
MP_QSTR_u�t
;

223 
VTYPE_PTR
:

224  
MP_QSTR_�r
;

225 
VTYPE_PTR8
:

226  
MP_QSTR_�r8
;

227 
VTYPE_PTR16
:

228  
MP_QSTR_�r16
;

229 
VTYPE_PTR32
:

230  
MP_QSTR_�r32
;

231 
VTYPE_PTR_NONE
:

233  
MP_QSTR_N�e
;

235 
	}
}

237 
	s_�ack_�fo_t
 {

238 
vty�_k�d_t
 
	mvty�
;

239 
�ack_�fo_k�d_t
 
	mk�d
;

241 
	mu_�g
;

242 
mp_�t_t
 
	mu_imm
;

243 } 
	md�a
;

244 } 
	t�ack_�fo_t
;

246 
	#UNWIND_LABEL_UNUSED
 (0x7fff)

	)

247 
	#UNWIND_LABEL_DO_FINAL_UNWIND
 (0x7f�)

	)

249 
	s_exc_�ack_��y_t
 {

250 
u�t16_t
 
	m�b�
 : 15;

251 
u�t16_t
 
	mis_f��ly
 : 1;

252 
u�t16_t
 
	munw�d_�b�
 : 15;

253 
u�t16_t
 
	mis_a�ive
 : 1;

254 } 
	texc_�ack_��y_t
;

256 
	s_em�_t
 {

257 
mp_em�_comm�_t
 *
	mem�_comm�
;

258 
mp_obj_t
 *
	m�r�_��
;

259 
u�t
 *
	m�b�_��
;

260 
u�t
 
	mex�_�b�
;

261 
	m�ss
;

263 
bo�
 
	mdo_v��_ty�s
;

265 
mp_u�t_t
 
	mlo�l_vty�_�loc
;

266 
vty�_k�d_t
 *
	mlo�l_vty�
;

268 
mp_u�t_t
 
	m�ack_�fo_�loc
;

269 
�ack_�fo_t
 *
	m�ack_�fo
;

270 
vty�_k�d_t
 
	m�ved_�ack_vty�
;

272 
size_t
 
	mexc_�ack_�loc
;

273 
size_t
 
	mexc_�ack_size
;

274 
exc_�ack_��y_t
 *
	mexc_�ack
;

276 
	m��ude_off�t
;

277 
	m��ude_�r_�dex
;

278 
	m��t_off�t
;

279 
	mn_��e
;

280 
u�t16_t
 
	mcode_��e_��t
;

281 
u�t16_t
 
	m�ack_��t
;

282 
	m�ack_size
;

283 
u�t16_t
 
	mn_�fo
;

284 
u�t16_t
 
	mn_��
;

286 
sc�e_t
 *
	msc�e
;

288 
ASM_T
 *
	mas
;

291 
em�_l�d_�g_w�h_obje�
(
em�_t
 *
em�
, 
�g
, 
mp_obj_t
 
obj
);

292 
em�_�tive_glob�_exc_��y
(
em�_t
 *
em�
);

293 
em�_�tive_glob�_exc_ex�
(
em�_t
 *
em�
);

294 
em�_�tive_l�d_cڡ_obj
(
em�_t
 *
em�
, 
mp_obj_t
 
obj
);

296 
em�_t
 *
	$EXPORT_FUN
(
�w
)(
mp_em�_comm�_t
 * 
em�_comm�
, 
mp_obj_t
 *
�r�_��
, 
u�t
 *
�b�_��
, 
mp_u�t_t
 
max_num_�b�s
) {

297 
em�_t
 *
em�
 = 
	`m_�w0
(emit_t, 1);

298 
em�
->
em�_comm�
 =�mit_common;

299 
em�
->
�r�_��
 =�rror_slot;

300 
em�
->
�b�_��
 =�abel_slot;

301 
em�
->
�ack_�fo_�loc
 = 8;

302 
em�
->
�ack_�fo
 = 
	`m_�w
(
�ack_�fo_t
,�m�->
�ack_�fo_�loc
);

303 
em�
->
exc_�ack_�loc
 = 8;

304 
em�
->
exc_�ack
 = 
	`m_�w
(
exc_�ack_��y_t
,�m�->
exc_�ack_�loc
);

305 
em�
->
as
 = 
	`m_�w0
(
ASM_T
, 1);

306 
	`mp_asm_ba�_��
(&
em�
->
as
->
ba�
, 
max_num_�b�s
);

307  
em�
;

308 
	}
}

310 
	$EXPORT_FUN
(
�
)(
em�_t
 * 
em�
) {

311 
	`mp_asm_ba�_de��
(&
em�
->
as
->
ba�
, 
�l�
);

312 
	`m_d�_obj
(
ASM_T
, 
em�
->
as
);

313 
	`m_d�
(
exc_�ack_��y_t
, 
em�
->
exc_�ack
,�m�->
exc_�ack_�loc
);

314 
	`m_d�
(
vty�_k�d_t
, 
em�
->
lo�l_vty�
,�m�->
lo�l_vty�_�loc
);

315 
	`m_d�
(
�ack_�fo_t
, 
em�
->
�ack_�fo
,�m�->
�ack_�fo_�loc
);

316 
	`m_d�_obj
(
em�_t
, 
em�
);

317 
	}
}

319 
em�_��_w�h_imm_�g
(
em�_t
 *
em�
, 
mp_fun_k�d_t
 
fun_k�d
, 
mp_�t_t
 
�g_v�
, 
�g_�g
);

321 
	$em�_�tive_mov_�g_cڡ
(
em�_t
 *
em�
, 
�g_de�
, 
cڡ_v�
) {

322 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
�g_de�
, 
REG_FUN_TABLE
, 
cڡ_v�
);

323 
	}
}

325 
	$em�_�tive_mov_��e_�g
(
em�_t
 *
em�
, 
lo�l_num
, 
�g_�c
) {

326 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

327 
	`ASM_STORE_REG_REG_OFFSET
(
em�
->
as
, 
�g_�c
, 
REG_GENERATOR_STATE
, 
lo�l_num
);

329 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
lo�l_num
, 
�g_�c
);

331 
	}
}

333 
	$em�_�tive_mov_�g_��e
(
em�_t
 *
em�
, 
�g_de�
, 
lo�l_num
) {

334 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

335 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
�g_de�
, 
REG_GENERATOR_STATE
, 
lo�l_num
);

337 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
�g_de�
, 
lo�l_num
);

339 
	}
}

341 
	$em�_�tive_mov_�g_��e_addr
(
em�_t
 *
em�
, 
�g_de�
, 
lo�l_num
) {

342 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

343 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_de�
, 
lo�l_num
 * 
ASM_WORD_SIZE
);

344 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_de�
, 
REG_GENERATOR_STATE
);

346 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
�g_de�
, 
lo�l_num
);

348 
	}
}

350 
	$em�_�tive_mov_�g_q�r
(
em�_t
 *
em�
, 
�g_�g
, 
q�r
 
q�
) {

351 #i�
MICROPY_PERSISTENT_CODE_SAVE


352 
	`ASM_LOAD16_REG_REG_OFFSET
(
em�
->
as
, 
�g_�g
, 
REG_QSTR_TABLE
, 
	`mp_em�_comm�_u�_q�r
�m�->
em�_comm�
, 
q�
));

353 #�i�
	`def�ed
(
ASM_MOV_REG_QSTR
)

354 
	`ASM_MOV_REG_QSTR
(
em�
->
as
, 
�g_�g
, 
q�
);

356 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�g
, 
q�
);

358 
	}
}

361 
	$em�_�tive_mov_�g_q�r_obj
(
em�_t
 *
em�
, 
�g_de�
, 
q�r
 
q�
) {

362 #i�
MICROPY_PERSISTENT_CODE_SAVE


363 
	`em�_l�d_�g_w�h_obje�
(
em�
, 
�g_de�
, 
	`MP_OBJ_NEW_QSTR
(
q�
));

365 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_de�
, (
mp_u�t_t
)
	`MP_OBJ_NEW_QSTR
(
q�
));

367 
	}
}

369 
	#em�_�tive_mov_��e_imm_v�
(
em�
, 
lo�l_num
, 
imm
, 
�g_�mp
) \

371 
	`ASM_MOV_REG_IMM
((
em�
)->
as
, (
�g_�mp
), (
imm
)); \

372 
	`em�_�tive_mov_��e_�g
((
em�
), (
lo�l_num
), (
�g_�mp
)); \

373 } 
�l�
)

	)

375 
	$em�_�tive_��t_�ss
(
em�_t
 *
em�
, 
�ss_k�d_t
 
�ss
, 
sc�e_t
 *
sc�e
) {

376 
	`DEBUG_��tf
("��t_�ss�ass=%u, sc�e=%p)\n", 
�ss
, 
sc�e
);

378 
em�
->
�ss
 =�ass;

379 
em�
->
do_v��_ty�s
 = 
sc�e
->
em�_�ti�s
 =�
MP_EMIT_OPT_VIPER
;

380 
em�
->
�ack_size
 = 0;

381 
em�
->
sc�e
 = scope;

384 i�(
em�
->
lo�l_vty�_�loc
 < 
sc�e
->
num_lo�ls
) {

385 
em�
->
lo�l_vty�
 = 
	`m_��w
(
vty�_k�d_t
,�m�->lo�l_vty�,�m�->
lo�l_vty�_�loc
, 
sc�e
->
num_lo�ls
);

386 
em�
->
lo�l_vty�_�loc
 = 
sc�e
->
num_lo�ls
;

390 
mp_u�t_t
 
num_�gs
 = 
em�
->
sc�e
->
num_pos_�gs
 +�m�->sc�e->
num_kw�ly_�gs
;

391 i�(
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARARGS
) {

392 
num_�gs
 += 1;

394 i�(
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_VARKEYWORDS
) {

395 
num_�gs
 += 1;

397 
mp_u�t_t
 
i
 = 0; i < 
num_�gs
; i++) {

398 
em�
->
lo�l_vty�
[
i
] = 
VTYPE_PYOBJ
;

402 i�(
em�
->
do_v��_ty�s
) {

403 
i
 = 0; i < 
em�
->
sc�e
->
id_�fo_�n
; ++i) {

404 
id_�fo_t
 *
id
 = &
em�
->
sc�e
->
id_�fo
[
i
];

405 i�(
id
->
�ags
 & 
ID_FLAG_IS_PARAM
) {

406 
	`as��
(
id
->
lo�l_num
 < 
em�
->
lo�l_vty�_�loc
);

407 
em�
->
lo�l_vty�
[
id
->
lo�l_num
] = id->
�ags
 >> 
ID_FLAG_VIPER_TYPE_POS
;

413 
mp_u�t_t
 
i
 = 
num_�gs
; i < 
em�
->
lo�l_vty�_�loc
; i++) {

414 
em�
->
lo�l_vty�
[
i
] =�m�->
do_v��_ty�s
 ? 
VTYPE_UNBOUND
 : 
VTYPE_PYOBJ
;

418 
mp_u�t_t
 
i
 = 0; i < 
em�
->
�ack_�fo_�loc
; i++) {

419 
em�
->
�ack_�fo
[
i
].
k�d
 = 
STACK_VALUE
;

420 
em�
->
�ack_�fo
[
i
].
vty�
 = 
VTYPE_UNBOUND
;

423 
	`mp_asm_ba�_��t_�ss
(&
em�
->
as
->
ba�
, 
�ss
 =�
MP_PASS_EMIT
 ? 
MP_ASM_PASS_EMIT
 : 
MP_ASM_PASS_COMPUTE
);

428 
em�
->
code_��e_��t
 = 0;

429 i�(
	`NEED_GLOBAL_EXC_HANDLER
(
em�
)) {

430 
em�
->
code_��e_��t
 = 
SIZEOF_NLR_BUF
;

431 
em�
->
code_��e_��t
 += 1;

432 i�(
	`NEED_THROW_VAL
(
em�
)) {

433 
em�
->
code_��e_��t
 += 2;

434 } i�(
	`NEED_EXC_HANDLER_UNWIND
(
em�
)) {

435 
em�
->
code_��e_��t
 += 1;

439 
size_t
 
fun_�b�_off
 = 
	`mp_em�_comm�_u�_cڡ_obj
(
em�
->
em�_comm�
, 
	`MP_OBJ_FROM_PTR
(&
mp_fun_�b�
));

441 i�(
em�
->
do_v��_ty�s
) {

444 
em�
->
n_��e
 = 
sc�e
->
num_lo�ls
 + sc�e->
�ack_size
;

445 
num_lo�ls_�_�gs
 = 0;

446 i�(
	`CAN_USE_REGS_FOR_LOCALS
(
em�
)) {

447 
num_lo�ls_�_�gs
 = 
sc�e
->
num_lo�ls
;

448 i�(
num_lo�ls_�_�gs
 > 
MAX_REGS_FOR_LOCAL_VARS
) {

449 
num_lo�ls_�_�gs
 = 
MAX_REGS_FOR_LOCAL_VARS
;

452 i�(
sc�e
->
num_pos_�gs
 >�
MAX_REGS_FOR_LOCAL_VARS
 + 1) {

453 --
num_lo�ls_�_�gs
;

458 i�(
	`NEED_GLOBAL_EXC_HANDLER
(
em�
)) {

460 
em�
->
�ack_��t
 =�m�->
code_��e_��t
 + 2;

461 } i�(
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_HASCONSTS
) {

463 
em�
->
�ack_��t
 =�m�->
code_��e_��t
 + 1;

465 
em�
->
�ack_��t
 =�m�->
code_��e_��t
 + 0;

469 
	`ASM_ENTRY
(
em�
->
as
,�m�->
�ack_��t
 +�m�->
n_��e
 - 
num_lo�ls_�_�gs
);

471 #i�
N_X86


472 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 0, 
REG_PARENT_ARG_1
);

476 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, 
REG_PARENT_ARG_1
, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

477 #i�
MICROPY_PERSISTENT_CODE_SAVE


478 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_QSTR_TABLE
, 
REG_FUN_TABLE
, 
OFFSETOF_MODULE_CONTEXT_QSTR_TABLE
);

480 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, REG_FUN_TABLE, 
OFFSETOF_MODULE_CONTEXT_OBJ_TABLE
);

481 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, REG_FUN_TABLE, 
fun_�b�_off
);

484 i�(
	`NEED_FUN_OBJ
(
em�
)) {

485 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_FUN_OBJ
�m�), 
REG_PARENT_ARG_1
);

489 #i�
N_X86


490 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 1, 
REG_ARG_1
);

491 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 2, 
REG_ARG_2
);

492 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 3, 
REG_LOCAL_LAST
);

494 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
REG_PARENT_ARG_2
);

495 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
REG_PARENT_ARG_3
);

496 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_LOCAL_LAST
, 
REG_PARENT_ARG_4
);

500 
	`ASM_JUMP_IF_REG_NONZERO
(
em�
->
as
, 
REG_ARG_2
, *em�->
�b�_��
 + 4, 
�ue
);

501 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_3
, 
sc�e
->
num_pos_�gs
);

502 
	`ASM_JUMP_IF_REG_EQ
(
em�
->
as
, 
REG_ARG_1
, 
REG_ARG_3
, *em�->
�b�_��
 + 5);

503 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
->
ba�
, *em�->
�b�_��
 + 4);

504 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_3
, 
	`MP_OBJ_FUN_MAKE_SIG
(
sc�e
->
num_pos_�gs
, sc�e->num_pos_�gs, 
�l�
));

505 
	`ASM_CALL_IND
(
em�
->
as
, 
MP_F_ARG_CHECK_NUM_SIG
);

506 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
->
ba�
, *em�->
�b�_��
 + 5);

509 
i
 = 0; i < 
em�
->
sc�e
->
num_pos_�gs
; i++) {

510 
r
 = 
REG_ARG_1
;

511 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_1
, 
REG_LOCAL_LAST
, 
i
);

512 i�(
em�
->
lo�l_vty�
[
i
] !�
VTYPE_PYOBJ
) {

513 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_OBJ_TO_NATIVE
,�m�->
lo�l_vty�
[
i
], 
REG_ARG_2
);

514 
r
 = 
REG_RET
;

517 i�(
i
 < 
MAX_REGS_FOR_LOCAL_VARS
 && 
	`CAN_USE_REGS_FOR_LOCALS
(
em�
�&& (�!�MAX_REGS_FOR_LOCAL_VARS - 1 ||�m�->
sc�e
->
num_pos_�gs
 == MAX_REGS_FOR_LOCAL_VARS)) {

518 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
�g_lo�l_�b�
[
i
], 
r
);

520 
	`em�_�tive_mov_��e_�g
(
em�
, 
	`LOCAL_IDX_LOCAL_VAR
�m�, 
i
), 
r
);

524 i�(
em�
->
sc�e
->
num_pos_�gs
 >�
MAX_REGS_FOR_LOCAL_VARS
 + 1 && 
	`CAN_USE_REGS_FOR_LOCALS
(emit)) {

525 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_LOCAL_LAST
, 
	`LOCAL_IDX_LOCAL_VAR
�m�, 
MAX_REGS_FOR_LOCAL_VARS
 - 1));

528 
	`em�_�tive_glob�_exc_��y
(
em�
);

532 
em�
->
n_��e
 = 
sc�e
->
num_lo�ls
 + sc�e->
�ack_size
;

536 
	`mp_asm_ba�_d�a
(&
em�
->
as
->
ba�
, 
ASM_WORD_SIZE
, (
u���_t
�m�->
��ude_�r_�dex
);

538 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

539 
	`mp_asm_ba�_d�a
(&
em�
->
as
->
ba�
, 
ASM_WORD_SIZE
, (
u���_t
�m�->
��t_off�t
);

540 
	`ASM_ENTRY
(
em�
->
as
,�m�->
code_��e_��t
);

543 
em�
->
code_��e_��t
 = 0;

544 
em�
->
�ack_��t
 = 
SIZEOF_CODE_STATE
;

547 #i�
N_X86


548 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 0, 
REG_GENERATOR_STATE
);

550 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_GENERATOR_STATE
, 
REG_PARENT_ARG_1
);

554 #i�
N_X86


555 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 1, 
REG_PARENT_ARG_2
);

557 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_THROW_VAL
�m�), 
REG_PARENT_ARG_2
);

560 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, 
REG_GENERATOR_STATE
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

561 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

562 #i�
MICROPY_PERSISTENT_CODE_SAVE


563 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_QSTR_TABLE
, 
REG_TEMP0
, 
OFFSETOF_MODULE_CONTEXT_QSTR_TABLE
);

565 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0, 
OFFSETOF_MODULE_CONTEXT_OBJ_TABLE
);

566 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, 
REG_TEMP0
, 
fun_�b�_off
);

569 
em�
->
�ack_��t
 =�m�->
code_��e_��t
 + 
SIZEOF_CODE_STATE
;

572 
	`ASM_ENTRY
(
em�
->
as
,�m�->
�ack_��t
 +�m�->
n_��e
);

576 #i�
N_X86


577 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 0, 
REG_PARENT_ARG_1
);

578 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 1, 
REG_PARENT_ARG_2
);

579 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 2, 
REG_PARENT_ARG_3
);

580 
	`asm_x86_mov_�g_to_r32
(
em�
->
as
, 3, 
REG_PARENT_ARG_4
);

584 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, 
REG_PARENT_ARG_1
, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

585 #i�
MICROPY_PERSISTENT_CODE_SAVE


586 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_QSTR_TABLE
, 
REG_FUN_TABLE
, 
OFFSETOF_MODULE_CONTEXT_QSTR_TABLE
);

588 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, REG_FUN_TABLE, 
OFFSETOF_MODULE_CONTEXT_OBJ_TABLE
);

589 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_FUN_TABLE
, REG_FUN_TABLE, 
fun_�b�_off
);

592 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_FUN_OBJ
�m�), 
REG_PARENT_ARG_1
);

595 
	`em�_�tive_mov_��e_imm_v�
(
em�
,�m�->
code_��e_��t
 + 
OFFSETOF_CODE_STATE_N_STATE
,�m�->
n_��e
, 
REG_ARG_1
);

598 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
REG_ARG_1
,�m�->
code_��e_��t
);

601 #i�
REG_ARG_2
 !�
REG_PARENT_ARG_2


602 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
REG_PARENT_ARG_2
);

604 #i�
REG_ARG_3
 !�
REG_PARENT_ARG_3


605 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_3
, 
REG_PARENT_ARG_3
);

607 #i�
REG_ARG_4
 !�
REG_PARENT_ARG_4


608 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_4
, 
REG_PARENT_ARG_4
);

612 #i�
N_THUMB


613 
	`asm_thumb_bl_�d
(
em�
->
as
, 
MP_F_SETUP_CODE_STATE
, 
ASM_THUMB_REG_R4
);

614 #�i�
N_ARM


615 
	`asm_�m_bl_�d
(
em�
->
as
, 
MP_F_SETUP_CODE_STATE
, 
ASM_ARM_REG_R4
);

617 
	`ASM_CALL_IND
(
em�
->
as
, 
MP_F_SETUP_CODE_STATE
);

621 
	`em�_�tive_glob�_exc_��y
(
em�
);

624 i�(
	`CAN_USE_REGS_FOR_LOCALS
(
em�
)) {

625 
i
 = 0; i < 
MAX_REGS_FOR_LOCAL_VARS
 && i < 
sc�e
->
num_lo�ls
; ++i) {

626 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
�g_lo�l_�b�
[
i
], 
	`LOCAL_IDX_LOCAL_VAR
(emit, i));

631 
mp_u�t_t
 
i
 = 0; i < 
sc�e
->
id_�fo_�n
; i++) {

632 
id_�fo_t
 *
id
 = &
sc�e
->
id_�fo
[
i
];

633 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
) {

634 
em�
->
lo�l_vty�
[
id
->
lo�l_num
] = 
VTYPE_PYOBJ
;

638 
	}
}

640 
�l�e
 
	$em�_�tive_wr�e_code_�fo_by�
(
em�_t
 *
em�
, 
by�
 
v�
) {

641 
	`mp_asm_ba�_d�a
(&
em�
->
as
->
ba�
, 1, 
v�
);

642 
	}
}

644 
�l�e
 
	$em�_�tive_wr�e_code_�fo_q�r
(
em�_t
 *
em�
, 
q�r
 
q�
) {

645 
	`mp_�code_u�t
(&
em�
->
as
->
ba�
, 
mp_asm_ba�_g�_cur_to_wr�e_by�s
, 
	`mp_em�_comm�_u�_q�r
�m�->
em�_comm�
, 
q�
));

646 
	}
}

648 
bo�
 
	$em�_�tive_�d_�ss
(
em�_t
 *
em�
) {

649 
	`em�_�tive_glob�_exc_ex�
(
em�
);

651 i�(!
em�
->
do_v��_ty�s
) {

652 
em�
->
��ude_off�t
 = 
	`mp_asm_ba�_g�_code_pos
(&em�->
as
->
ba�
);

653 
em�
->
��ude_�r_�dex
 =�m�->
em�_comm�
->
�_cur_ch�d
;

655 
size_t
 
n_��e
 = 
em�
->n_state;

656 
size_t
 
n_exc_�ack
 = 0;

657 
	`MP_BC_PRELUDE_SIG_ENCODE
(
n_��e
, 
n_exc_�ack
, 
em�
->
sc�e
, 
em�_�tive_wr�e_code_�fo_by�
,�mit);

659 
size_t
 
n_�fo
 = 
em�
->n_info;

660 
size_t
 
n_��
 = 
em�
->n_cell;

661 
	`MP_BC_PRELUDE_SIZE_ENCODE
(
n_�fo
, 
n_��
, 
em�_�tive_wr�e_code_�fo_by�
, 
em�
);

664 
size_t
 
�fo_��t
 = 
	`mp_asm_ba�_g�_code_pos
(&
em�
->
as
->
ba�
);

665 
	`em�_�tive_wr�e_code_�fo_q�r
(
em�
,�m�->
sc�e
->
sim�e_�me
);

666 
i
 = 0; i < 
em�
->
sc�e
->
num_pos_�gs
 +�m�->sc�e->
num_kw�ly_�gs
; i++) {

667 
q�r
 
q�
 = 
MP_QSTR__��_
;

668 
j
 = 0; j < 
em�
->
sc�e
->
id_�fo_�n
; ++j) {

669 
id_�fo_t
 *
id
 = &
em�
->
sc�e
->
id_�fo
[
j
];

670 i�((
id
->
�ags
 & 
ID_FLAG_IS_PARAM
�&& id->
lo�l_num
 =�
i
) {

671 
q�
 = 
id
->qst;

675 
	`em�_�tive_wr�e_code_�fo_q�r
(
em�
, 
q�
);

677 
em�
->
n_�fo
 = 
	`mp_asm_ba�_g�_code_pos
(&em�->
as
->
ba�
�- 
�fo_��t
;

680 
size_t
 
��_��t
 = 
	`mp_asm_ba�_g�_code_pos
(&
em�
->
as
->
ba�
);

681 
i
 = 0; i < 
em�
->
sc�e
->
id_�fo_�n
; i++) {

682 
id_�fo_t
 *
id
 = &
em�
->
sc�e
->
id_�fo
[
i
];

683 i�(
id
->
k�d
 =�
ID_INFO_KIND_CELL
) {

684 
	`as��
(
id
->
lo�l_num
 <= 255);

685 
	`mp_asm_ba�_d�a
(&
em�
->
as
->
ba�
, 1, 
id
->
lo�l_num
);

688 
em�
->
n_��
 = 
	`mp_asm_ba�_g�_code_pos
(&em�->
as
->
ba�
�- 
��_��t
;

692 
	`ASM_END_PASS
(
em�
->
as
);

695 
	`as��
(
em�
->
�ack_size
 == 0);

696 
	`as��
(
em�
->
exc_�ack_size
 == 0);

698 i�(
em�
->
�ss
 =�
MP_PASS_EMIT
) {

699 *
f
 = 
	`mp_asm_ba�_g�_code
(&
em�
->
as
->
ba�
);

700 
mp_u�t_t
 
f_�n
 = 
	`mp_asm_ba�_g�_code_size
(&
em�
->
as
->
ba�
);

702 
mp_�w_code_t
 **
ch�d�n
 = 
em�
->
em�_comm�
->children;

703 i�(!
em�
->
do_v��_ty�s
) {

704 #i�
MICROPY_EMIT_NATIVE_PRELUDE_SEPARATE_FROM_MACHINE_CODE


707 *
buf
 = 
em�
->
as
->
ba�
.
code_ba�
 +�m�->
��ude_off�t
;

708 
size_t
 
n
 = 
em�
->
as
->
ba�
.
code_off�t
 -�m�->
��ude_off�t
;

709 cڡ 
u�t8_t
 *
��ude_�r
 = 
	`mem�y
(
	`m_�w
(u�t8_t, 
n
), 
buf
,�);

712 cڡ 
u�t8_t
 *
��ude_�r
 = (cڡ u�t8_�*)
f
 + 
em�
->
��ude_off�t
;

716 
	`as��
(
em�
->
��ude_�r_�dex
 =�em�->
em�_comm�
->
�_cur_ch�d
);

717 i�(
em�
->
��ude_�r_�dex
 == 0) {

718 
ch�d�n
 = (*)
��ude_�r
;

720 
ch�d�n
 = 
	`m_��w
(
mp_�w_code_t
 *, ch�d�n, 
em�
->
��ude_�r_�dex
,�mit->prelude_ptr_index + 1);

721 
ch�d�n
[
em�
->
��ude_�r_�dex
] = (*)
��ude_�r
;

725 
	`mp_em�_glue_assign_�tive
(
em�
->
sc�e
->
�w_code
,

726 
em�
->
do_v��_ty�s
 ? 
MP_CODE_NATIVE_VIPER
 : 
MP_CODE_NATIVE_PY
,

727 
f
, 
f_�n
,

728 
ch�d�n
,

729 #i�
MICROPY_PERSISTENT_CODE_SAVE


730 
em�
->
em�_comm�
->
�_cur_ch�d
,

731 
em�
->
��ude_off�t
,

733 
em�
->
sc�e
->
sc�e_�ags
, 0, 0);

736  
�ue
;

737 
	}
}

739 
	$�su�_ex�a_�ack
(
em�_t
 *
em�
, 
size_t
 
d��
) {

740 i�(
em�
->
�ack_size
 + 
d��
 >�m�->
�ack_�fo_�loc
) {

741 
size_t
 
�w_�loc
 = (
em�
->
�ack_size
 + 
d��
 + 8) & ~3;

742 
em�
->
�ack_�fo
 = 
	`m_��w
(
�ack_�fo_t
,�m�->�ack_�fo,�m�->
�ack_�fo_�loc
, 
�w_�loc
);

743 
em�
->
�ack_�fo_�loc
 = 
�w_�loc
;

745 
	}
}

747 
	$adju�_�ack
(
em�_t
 *
em�
, 
mp_�t_t
 
�ack_size_d��
) {

748 
	`as��
((
mp_�t_t
)
em�
->
�ack_size
 + 
�ack_size_d��
 >= 0);

749 
	`as��
((
mp_�t_t
)
em�
->
�ack_size
 + 
�ack_size_d��
 <�(mp_�t_t�m�->
�ack_�fo_�loc
);

750 
em�
->
�ack_size
 +�
�ack_size_d��
;

751 i�(
em�
->
�ss
 > 
MP_PASS_SCOPE
 &&�m�->
�ack_size
 >�m�->
sc�e
->stack_size) {

752 
em�
->
sc�e
->
�ack_size
 =�mit->stack_size;

754 #i�
DEBUG_PRINT


755 
	`DEBUG_��tf
("�dju�_�ack; s�ck_size=%d+%d; s�ck�ow:", 
em�
->
�ack_size
 - 
�ack_size_d��
, stack_size_delta);

756 
i
 = 0; i < 
em�
->
�ack_size
; i++) {

757 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[
i
];

758 
	`DEBUG_��tf
(" (v=%d k=%d %d)", 
si
->
vty�
, si->
k�d
, si->
d�a
.
u_�g
);

760 
	`DEBUG_��tf
("\n");

762 
	}
}

764 
	$em�_�tive_adju�_�ack_size
(
em�_t
 *
em�
, 
mp_�t_t
 
d��
) {

765 
	`DEBUG_��tf
("adju�_�ack_size(" 
INT_FMT
 ")\n", 
d��
);

766 i�(
d��
 > 0) {

767 
	`�su�_ex�a_�ack
(
em�
, 
d��
);

774 
mp_�t_t
 
i
 = 0; i < 
d��
; i++) {

775 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 + 
i
];

776 
si
->
k�d
 = 
STACK_VALUE
;

779 i�(
d��
 == 1) {

780 
si
->
vty�
 = 
em�
->
�ved_�ack_vty�
;

782 
si
->
vty�
 = 
VTYPE_PYOBJ
;

785 
	`adju�_�ack
(
em�
, 
d��
);

786 
	}
}

788 
	$em�_�tive_�t_sour�_l�e
(
em�_t
 *
em�
, 
mp_u�t_t
 
sour�_l�e
) {

789 ()
em�
;

790 ()
sour�_l�e
;

791 
	}
}

794 
	$em�_�tive_�e
(
em�_t
 *
em�
) {

795 ()
em�
;

796 
	}
}

799 
�ack_�fo_t
 *
	$�ek_�ack
(
em�_t
 *
em�
, 
mp_u�t_t
 
d�th
) {

800  &
em�
->
�ack_�fo
[em�->
�ack_size
 - 1 - 
d�th
];

801 
	}
}

804 
vty�_k�d_t
 
	$�ek_vty�
(
em�_t
 *
em�
, 
mp_u�t_t
 
d�th
) {

805 i�(
em�
->
do_v��_ty�s
) {

806  
	`�ek_�ack
(
em�
, 
d�th
)->
vty�
;

809  
VTYPE_PYOBJ
;

811 
	}
}

815 
	$�ed_�g_s�g�
(
em�_t
 *
em�
, 
�g_�eded
, 
sk�_�ack_pos
) {

816 
sk�_�ack_pos
 = 
em�
->
�ack_size
 - skip_stack_pos;

817 
i
 = 0; i < 
em�
->
�ack_size
; i++) {

818 i�(
i
 !�
sk�_�ack_pos
) {

819 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[
i
];

820 i�(
si
->
k�d
 =�
STACK_REG
 && si->
d�a
.
u_�g
 =�
�g_�eded
) {

821 
si
->
k�d
 = 
STACK_VALUE
;

822 
	`em�_�tive_mov_��e_�g
(
em�
,�m�->
�ack_��t
 + 
i
, 
si
->
d�a
.
u_�g
);

826 
	}
}

830 
	$�ed_�g_�l
(
em�_t
 *
em�
) {

831 
i
 = 0; i < 
em�
->
�ack_size
; i++) {

832 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[
i
];

833 i�(
si
->
k�d
 =�
STACK_REG
) {

834 
	`DEBUG_��tf
("�eg(%u�t�lo�l(%u)\n", 
si
->
d�a
.
u_�g
, 
em�
->
�ack_��t
 + 
i
);

835 
si
->
k�d
 = 
STACK_VALUE
;

836 
	`em�_�tive_mov_��e_�g
(
em�
,�m�->
�ack_��t
 + 
i
, 
si
->
d�a
.
u_�g
);

839 
	}
}

841 
vty�_k�d_t
 
	$l�d_�g_�ack_imm
(
em�_t
 *
em�
, 
�g_de�
, cڡ 
�ack_�fo_t
 *
si
, 
bo�
 
c�v�t_to_pyobj
) {

842 i�(!
c�v�t_to_pyobj
 && 
em�
->
do_v��_ty�s
) {

843 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_de�
, 
si
->
d�a
.
u_imm
);

844  
si
->
vty�
;

846 i�(
si
->
vty�
 =�
VTYPE_PYOBJ
) {

847 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_de�
, 
si
->
d�a
.
u_imm
);

848 } i�(
si
->
vty�
 =�
VTYPE_BOOL
) {

849 
	`em�_�tive_mov_�g_cڡ
(
em�
, 
�g_de�
, 
MP_F_CONST_FALSE_OBJ
 + 
si
->
d�a
.
u_imm
);

850 } i�(
si
->
vty�
 =�
VTYPE_INT
 || si->vty� =�
VTYPE_UINT
) {

851 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_de�
, (
u���_t
)
	`MP_OBJ_NEW_SMALL_INT
(
si
->
d�a
.
u_imm
));

852 } i�(
si
->
vty�
 =�
VTYPE_PTR_NONE
) {

853 
	`em�_�tive_mov_�g_cڡ
(
em�
, 
�g_de�
, 
MP_F_CONST_NONE_OBJ
);

855 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("conversion�o object"));

857  
VTYPE_PYOBJ
;

859 
	}
}

865 
	$�ed_�ack_���d
(
em�_t
 *
em�
) {

866 
	`DEBUG_��tf
("��d_�ack_���d; s�ck_size=%d\n", 
em�
->
�ack_size
);

867 
	`�ed_�g_�l
(
em�
);

868 
i
 = 0; i < 
em�
->
�ack_size
; i++) {

869 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[
i
];

870 i�(
si
->
k�d
 =�
STACK_IMM
) {

871 
	`DEBUG_��tf
(" imm(" 
INT_FMT
 "�t�lo�l(%u)\n", 
si
->
d�a
.
u_imm
, 
em�
->
�ack_��t
 + 
i
);

872 
si
->
k�d
 = 
STACK_VALUE
;

874 
si
->
vty�
 = 
	`l�d_�g_�ack_imm
(
em�
, 
REG_TEMP1
, si, 
�l�
);

875 
	`em�_�tive_mov_��e_�g
(
em�
,�m�->
�ack_��t
 + 
i
, 
REG_TEMP1
);

878 
	}
}

881 
	$em�_ac�ss_�ack
(
em�_t
 *
em�
, 
pos
, 
vty�_k�d_t
 *
vty�
, 
�g_de�
) {

882 
	`�ed_�g_s�g�
(
em�
, 
�g_de�
, 
pos
);

883 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 - 
pos
];

884 *
vty�
 = 
si
->vtype;

885 
si
->
k�d
) {

886 
STACK_VALUE
:

887 
	`em�_�tive_mov_�g_��e
(
em�
, 
�g_de�
,�m�->
�ack_��t
 +�m�->
�ack_size
 - 
pos
);

890 
STACK_REG
:

891 i�(
si
->
d�a
.
u_�g
 !�
�g_de�
) {

892 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
�g_de�
, 
si
->
d�a
.
u_�g
);

896 
STACK_IMM
:

897 *
vty�
 = 
	`l�d_�g_�ack_imm
(
em�
, 
�g_de�
, 
si
, 
�l�
);

900 
	}
}

904 
	$em�_f�d_�ack_t�
(
em�_t
 *
em�
, 
�g_de�
) {

905 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 - 2];

906 
si
[0] = si[1];

907 i�(
si
->
k�d
 =�
STACK_VALUE
) {

909 
	`em�_�tive_mov_�g_��e
(
em�
, 
�g_de�
,�m�->
�ack_��t
 +�m�->
�ack_size
 - 1);

910 
si
->
k�d
 = 
STACK_REG
;

911 
si
->
d�a
.
u_�g
 = 
�g_de�
;

913 
	`adju�_�ack
(
em�
, -1);

914 
	}
}

918 
	$em�_�e_p�_�g_�exib�
(
em�_t
 *
em�
, 
vty�_k�d_t
 *
vty�
, *
�g_de�
, 
n�_r1
, 
n�_r2
) {

919 
�ack_�fo_t
 *
si
 = 
	`�ek_�ack
(
em�
, 0);

920 i�(
si
->
k�d
 =�
STACK_REG
 && si->
d�a
.
u_�g
 !�
n�_r1
 && si->d�a.u_�g !�
n�_r2
) {

921 *
vty�
 = 
si
->vtype;

922 *
�g_de�
 = 
si
->
d�a
.
u_�g
;

923 
	`�ed_�g_s�g�
(
em�
, *
�g_de�
, 1);

925 
	`em�_ac�ss_�ack
(
em�
, 1, 
vty�
, *
�g_de�
);

927 
	`adju�_�ack
(
em�
, -1);

928 
	}
}

930 
	$em�_�e_p�_dis�rd
(
em�_t
 *
em�
) {

931 
	`adju�_�ack
(
em�
, -1);

932 
	}
}

934 
	$em�_�e_p�_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 *
vty�
, 
�g_de�
) {

935 
	`em�_ac�ss_�ack
(
em�
, 1, 
vty�
, 
�g_de�
);

936 
	`adju�_�ack
(
em�
, -1);

937 
	}
}

939 
	$em�_�e_p�_�g_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 *
vty�a
, 
�ga
, vty�_k�d_�*
vty�b
, 
�gb
) {

940 
	`em�_�e_p�_�g
(
em�
, 
vty�a
, 
�ga
);

941 
	`em�_�e_p�_�g
(
em�
, 
vty�b
, 
�gb
);

942 
	}
}

944 
	$em�_�e_p�_�g_�g_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 *
vty�a
, 
�ga
, vty�_k�d_�*
vty�b
, 
�gb
, vty�_k�d_�*
vty�c
, 
�gc
) {

945 
	`em�_�e_p�_�g
(
em�
, 
vty�a
, 
�ga
);

946 
	`em�_�e_p�_�g
(
em�
, 
vty�b
, 
�gb
);

947 
	`em�_�e_p�_�g
(
em�
, 
vty�c
, 
�gc
);

948 
	}
}

950 
	$em�_po�
(
em�_t
 *
em�
) {

951 ()
em�
;

952 
	}
}

954 
	$em�_po�_t�_�t_vty�
(
em�_t
 *
em�
, 
vty�_k�d_t
 
�w_vty�
) {

955 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 - 1];

956 
si
->
vty�
 = 
�w_vty�
;

957 
	}
}

959 
	$em�_po�_push_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 
vty�
, 
�g
) {

960 
	`�su�_ex�a_�ack
(
em�
, 1);

961 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
];

962 
si
->
vty�
 = vtype;

963 
si
->
k�d
 = 
STACK_REG
;

964 
si
->
d�a
.
u_�g
 = 
�g
;

965 
	`adju�_�ack
(
em�
, 1);

966 
	}
}

968 
	$em�_po�_push_imm
(
em�_t
 *
em�
, 
vty�_k�d_t
 
vty�
, 
mp_�t_t
 
imm
) {

969 
	`�su�_ex�a_�ack
(
em�
, 1);

970 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
];

971 
si
->
vty�
 = vtype;

972 
si
->
k�d
 = 
STACK_IMM
;

973 
si
->
d�a
.
u_imm
 = 
imm
;

974 
	`adju�_�ack
(
em�
, 1);

975 
	}
}

977 
	$em�_po�_push_�g_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 
vty�a
, 
�ga
, vty�_k�d_�
vty�b
, 
�gb
) {

978 
	`em�_po�_push_�g
(
em�
, 
vty�a
, 
�ga
);

979 
	`em�_po�_push_�g
(
em�
, 
vty�b
, 
�gb
);

980 
	}
}

982 
	$em�_po�_push_�g_�g_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 
vty�a
, 
�ga
, vty�_k�d_�
vty�b
, 
�gb
, vty�_k�d_�
vty�c
, 
�gc
) {

983 
	`em�_po�_push_�g
(
em�
, 
vty�a
, 
�ga
);

984 
	`em�_po�_push_�g
(
em�
, 
vty�b
, 
�gb
);

985 
	`em�_po�_push_�g
(
em�
, 
vty�c
, 
�gc
);

986 
	}
}

988 
	$em�_po�_push_�g_�g_�g_�g
(
em�_t
 *
em�
, 
vty�_k�d_t
 
vty�a
, 
�ga
, vty�_k�d_�
vty�b
, 
�gb
, vty�_k�d_�
vty�c
, 
�gc
, vty�_k�d_�
vty�d
, 
�gd
) {

989 
	`em�_po�_push_�g
(
em�
, 
vty�a
, 
�ga
);

990 
	`em�_po�_push_�g
(
em�
, 
vty�b
, 
�gb
);

991 
	`em�_po�_push_�g
(
em�
, 
vty�c
, 
�gc
);

992 
	`em�_po�_push_�g
(
em�
, 
vty�d
, 
�gd
);

993 
	}
}

995 
	$em�_��
(
em�_t
 *
em�
, 
mp_fun_k�d_t
 
fun_k�d
) {

996 
	`�ed_�g_�l
(
em�
);

997 
	`ASM_CALL_IND
(
em�
->
as
, 
fun_k�d
);

998 
	}
}

1000 
	$em�_��_w�h_imm_�g
(
em�_t
 *
em�
, 
mp_fun_k�d_t
 
fun_k�d
, 
mp_�t_t
 
�g_v�
, 
�g_�g
) {

1001 
	`�ed_�g_�l
(
em�
);

1002 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�g
, 
�g_v�
);

1003 
	`ASM_CALL_IND
(
em�
->
as
, 
fun_k�d
);

1004 
	}
}

1006 
	$em�_��_w�h_2_imm_�gs
(
em�_t
 *
em�
, 
mp_fun_k�d_t
 
fun_k�d
, 
mp_�t_t
 
�g_v�1
, 
�g_�g1
, mp_�t_�
�g_v�2
, 
�g_�g2
) {

1007 
	`�ed_�g_�l
(
em�
);

1008 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�g1
, 
�g_v�1
);

1009 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�g2
, 
�g_v�2
);

1010 
	`ASM_CALL_IND
(
em�
->
as
, 
fun_k�d
);

1011 
	}
}

1013 
	$em�_��_w�h_q�r_�g
(
em�_t
 *
em�
, 
mp_fun_k�d_t
 
fun_k�d
, 
q�r
 
q�
, 
�g_�g
) {

1014 
	`�ed_�g_�l
(
em�
);

1015 
	`em�_�tive_mov_�g_q�r
(
em�
, 
�g_�g
, 
q�
);

1016 
	`ASM_CALL_IND
(
em�
->
as
, 
fun_k�d
);

1017 
	}
}

1023 
	$em�_g�_�ack_po��r_to_�g_f�_p�
(
em�_t
 *
em�
, 
mp_u�t_t
 
�g_de�
, mp_u�t_�
n_p�
) {

1024 
	`�ed_�g_�l
(
em�
);

1027 
mp_u�t_t
 
i
 = 0; i < 
n_p�
; i++) {

1028 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 - 1 - 
i
];

1031 i�(
si
->
k�d
 =�
STACK_IMM
) {

1032 
si
->
k�d
 = 
STACK_VALUE
;

1033 
si
->
vty�
 = 
	`l�d_�g_�ack_imm
(
em�
, 
�g_de�
, si, 
�ue
);

1034 
	`em�_�tive_mov_��e_�g
(
em�
,�m�->
�ack_��t
 +�m�->
�ack_size
 - 1 - 
i
, 
�g_de�
);

1038 
	`as��
(
si
->
k�d
 =�
STACK_VALUE
);

1042 
mp_u�t_t
 
i
 = 0; i < 
n_p�
; i++) {

1043 
�ack_�fo_t
 *
si
 = &
em�
->
�ack_�fo
[em�->
�ack_size
 - 1 - 
i
];

1044 i�(
si
->
vty�
 !�
VTYPE_PYOBJ
) {

1045 
mp_u�t_t
 
lo�l_num
 = 
em�
->
�ack_��t
 +�m�->
�ack_size
 - 1 - 
i
;

1046 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_1
, 
lo�l_num
);

1047 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_NATIVE_TO_OBJ
, 
si
->
vty�
, 
REG_ARG_2
);

1048 
	`em�_�tive_mov_��e_�g
(
em�
, 
lo�l_num
, 
REG_RET
);

1049 
si
->
vty�
 = 
VTYPE_PYOBJ
;

1050 
	`DEBUG_��tf
(" c�v�t_�tive_to_obj�o�l_num=" 
UINT_FMT
 ")\n", 
lo�l_num
);

1055 
	`adju�_�ack
(
em�
, -
n_p�
);

1056 
	`em�_�tive_mov_�g_��e_addr
(
em�
, 
�g_de�
,�m�->
�ack_��t
 +�m�->
�ack_size
);

1057 
	}
}

1060 
	$em�_g�_�ack_po��r_to_�g_f�_push
(
em�_t
 *
em�
, 
mp_u�t_t
 
�g_de�
, mp_u�t_�
n_push
) {

1061 
	`�ed_�g_�l
(
em�
);

1062 
	`�su�_ex�a_�ack
(
em�
, 
n_push
);

1063 
mp_u�t_t
 
i
 = 0; i < 
n_push
; i++) {

1064 
em�
->
�ack_�fo
[em�->
�ack_size
 + 
i
].
k�d
 = 
STACK_VALUE
;

1065 
em�
->
�ack_�fo
[em�->
�ack_size
 + 
i
].
vty�
 = 
VTYPE_PYOBJ
;

1067 
	`em�_�tive_mov_�g_��e_addr
(
em�
, 
�g_de�
,�m�->
�ack_��t
 +�m�->
�ack_size
);

1068 
	`adju�_�ack
(
em�
, 
n_push
);

1069 
	}
}

1071 
	$em�_�tive_push_exc_�ack
(
em�_t
 *
em�
, 
u�t
 
�b�
, 
bo�
 
is_f��ly
) {

1072 i�(
em�
->
exc_�ack_size
 + 1 >�m�->
exc_�ack_�loc
) {

1073 
size_t
 
�w_�loc
 = 
em�
->
exc_�ack_�loc
 + 4;

1074 
em�
->
exc_�ack
 = 
	`m_��w
(
exc_�ack_��y_t
,�m�->exc_�ack,�m�->
exc_�ack_�loc
, 
�w_�loc
);

1075 
em�
->
exc_�ack_�loc
 = 
�w_�loc
;

1078 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[em�->
exc_�ack_size
++];

1079 
e
->
�b�
 =�abel;

1080 
e
->
is_f��ly
 = is_finally;

1081 
e
->
unw�d_�b�
 = 
UNWIND_LABEL_UNUSED
;

1082 
e
->
is_a�ive
 = 
�ue
;

1084 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_RET
, 
�b�
);

1085 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_PC
�m�), 
REG_RET
);

1086 
	}
}

1088 
	$em�_�tive_�ave_exc_�ack
(
em�_t
 *
em�
, 
bo�
 
��t_of_h�d�r
) {

1089 
	`as��
(
em�
->
exc_�ack_size
 > 0);

1092 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[em�->
exc_�ack_size
 - 1];

1093 
e
->
is_a�ive
 = 
�l�
;

1096 --
e
;� >�
em�
->
exc_�ack
 && !e->
is_a�ive
; --e) {

1100 i�(
e
 < 
em�
->
exc_�ack
) {

1102 i�(
��t_of_h�d�r
) {

1106 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_RET
, REG_RET);

1109 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_RET
, 
e
->
�b�
);

1111 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_PC
�m�), 
REG_RET
);

1112 
	}
}

1114 
exc_�ack_��y_t
 *
	$em�_�tive_p�_exc_�ack
(
em�_t
 *
em�
) {

1115 
	`as��
(
em�
->
exc_�ack_size
 > 0);

1116 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[--em�->
exc_�ack_size
];

1117 
	`as��
(
e
->
is_a�ive
 =�
�l�
);

1118  
e
;

1119 
	}
}

1122 
	$em�_l�d_�g_w�h_obje�
(
em�_t
 *
em�
, 
�g
, 
mp_obj_t
 
obj
) {

1123 
em�
->
sc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_HASCONSTS
;

1124 
size_t
 
�b�_off
 = 
	`mp_em�_comm�_u�_cڡ_obj
(
em�
->
em�_comm�
, 
obj
);

1125 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_TEMP0
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

1126 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

1127 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0, 
OFFSETOF_MODULE_CONTEXT_OBJ_TABLE
);

1128 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
�g
, 
REG_TEMP0
, 
�b�_off
);

1129 
	}
}

1131 
	$em�_l�d_�g_w�h_ch�d
(
em�_t
 *
em�
, 
�g
, 
mp_�w_code_t
 *
rc
) {

1132 
size_t
 
�b�_off
 = 
	`mp_em�_comm�_�loc_cڡ_ch�d
(
em�
->
em�_comm�
, 
rc
);

1133 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_TEMP0
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

1134 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0, 
OFFSETOF_OBJ_FUN_BC_CHILD_TABLE
);

1135 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
�g
, 
REG_TEMP0
, 
�b�_off
);

1136 
	}
}

1138 
	$em�_�tive_�b�_assign
(
em�_t
 *
em�
, 
mp_u�t_t
 
l
) {

1139 
	`DEBUG_��tf
("�b�_assign(" 
UINT_FMT
 ")\n", 
l
);

1141 
bo�
 
is_f��ly
 = 
�l�
;

1142 i�(
em�
->
exc_�ack_size
 > 0) {

1143 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[em�->
exc_�ack_size
 - 1];

1144 
is_f��ly
 = 
e
->is_f��ly &&�->
�b�
 =�
l
;

1147 i�(
is_f��ly
) {

1149 
vty�_k�d_t
 
vty�
;

1150 
	`em�_ac�ss_�ack
(
em�
, 1, &
vty�
, 
REG_TEMP0
);

1151 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_VAL
�m�), 
REG_TEMP0
);

1154 
	`em�_�tive_�e
(
em�
);

1156 
	`�ed_�ack_���d
(
em�
);

1157 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
->
ba�
, 
l
);

1158 
	`em�_po�
(
em�
);

1160 i�(
is_f��ly
) {

1162 
	`em�_�tive_�ave_exc_�ack
(
em�
, 
�l�
);

1164 
	}
}

1166 
	$em�_�tive_glob�_exc_��y
(
em�_t
 *
em�
) {

1169 
em�
->
ex�_�b�
 = *em�->
�b�_��
;

1171 i�(
	`NEED_GLOBAL_EXC_HANDLER
(
em�
)) {

1172 
mp_u�t_t
 
�r_�b�
 = *
em�
->
�b�_��
 + 1;

1173 
mp_u�t_t
 
��t_�b�
 = *
em�
->
�b�_��
 + 2;

1174 
mp_u�t_t
 
glob�_ex��_�b�
 = *
em�
->
�b�_��
 + 3;

1176 i�(!(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1178 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_1
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

1179 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_1
, REG_ARG_1, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

1180 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_1
, REG_ARG_1, 
OFFSETOF_MODULE_CONTEXT_GLOBALS
);

1181 
	`em�_��
(
em�
, 
MP_F_NATIVE_SWAP_GLOBALS
);

1184 
	`em�_�tive_mov_��e_�g
(
em�
, 
	`LOCAL_IDX_OLD_GLOBALS
�m�), 
REG_RET
);

1187 i�(
em�
->
sc�e
->
exc_�ack_size
 == 0) {

1188 i�(!(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1190 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, 
��t_�b�
, 
�l�
);

1194 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
REG_ARG_1
, 0);

1195 
	`em�_��
(
em�
, 
MP_F_NLR_PUSH
);

1196 #i�
N_NLR_SETJMP


1197 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
REG_ARG_1
, 2);

1198 
	`em�_��
(
em�
, 
MP_F_SETJMP
);

1200 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, 
��t_�b�
, 
�ue
);

1203 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0);

1204 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_UNWIND
�m�), 
REG_TEMP0
);

1208 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_VAL
�m�), 
REG_TEMP0
);

1211 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_LOCAL_1
, 
��t_�b�
);

1214 
	`em�_�tive_�b�_assign
(
em�
, 
�r_�b�
);

1215 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
REG_ARG_1
, 0);

1216 
	`em�_��
(
em�
, 
MP_F_NLR_PUSH
);

1217 #i�
N_NLR_SETJMP


1218 
	`ASM_MOV_REG_LOCAL_ADDR
(
em�
->
as
, 
REG_ARG_1
, 2);

1219 
	`em�_��
(
em�
, 
MP_F_SETJMP
);

1221 
	`ASM_JUMP_IF_REG_NONZERO
(
em�
->
as
, 
REG_RET
, 
glob�_ex��_�b�
, 
�ue
);

1224 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_TEMP0
, REG_TEMP0);

1225 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_PC
�m�), 
REG_TEMP0
);

1226 
	`ASM_JUMP_REG
(
em�
->
as
, 
REG_LOCAL_1
);

1229 
	`em�_�tive_�b�_assign
(
em�
, 
glob�_ex��_�b�
);

1230 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_LOCAL_1
, 
	`LOCAL_IDX_EXC_HANDLER_PC
(emit));

1231 
	`ASM_JUMP_IF_REG_NONZERO
(
em�
->
as
, 
REG_LOCAL_1
, 
�r_�b�
, 
�l�
);

1234 i�(!(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1236 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_1
, 
	`LOCAL_IDX_OLD_GLOBALS
(emit));

1237 
	`em�_��
(
em�
, 
MP_F_NATIVE_SWAP_GLOBALS
);

1240 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

1242 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_TEMP0
, 
	`LOCAL_IDX_EXC_VAL
(emit));

1243 
	`ASM_STORE_REG_REG_OFFSET
(
em�
->
as
, 
REG_TEMP0
, 
REG_GENERATOR_STATE
, 
OFFSETOF_CODE_STATE_STATE
);

1246 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_PARENT_RET
, 
MP_VM_RETURN_EXCEPTION
);

1248 
	`ASM_EXIT
(
em�
->
as
);

1251 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_EXC_VAL
(emit));

1252 
	`em�_��
(
em�
, 
MP_F_NATIVE_RAISE
);

1256 
	`em�_�tive_�b�_assign
(
em�
, 
��t_�b�
);

1258 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

1259 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_TEMP0
, 
	`LOCAL_IDX_GEN_PC
(emit));

1260 
	`ASM_JUMP_REG
(
em�
->
as
, 
REG_TEMP0
);

1261 
em�
->
��t_off�t
 = 
	`mp_asm_ba�_g�_code_pos
(&em�->
as
->
ba�
);

1266 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_THROW_VAL
(emit));

1267 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_2
, (
mp_u�t_t
)
MP_OBJ_NULL
);

1268 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_THROW_VAL
�m�), 
REG_ARG_2
);

1269 
	`em�_��
(
em�
, 
MP_F_NATIVE_RAISE
);

1272 
	}
}

1274 
	$em�_�tive_glob�_exc_ex�
(
em�_t
 *
em�
) {

1276 
	`em�_�tive_�b�_assign
(
em�
,�m�->
ex�_�b�
);

1278 i�(
	`NEED_GLOBAL_EXC_HANDLER
(
em�
)) {

1280 i�(!(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1281 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_1
, 
	`LOCAL_IDX_OLD_GLOBALS
(emit));

1283 i�(
em�
->
sc�e
->
exc_�ack_size
 == 0) {

1285 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_ARG_1
,�m�->
ex�_�b�
 + 1, 
�l�
);

1289 
	`em�_��
(
em�
, 
MP_F_NATIVE_SWAP_GLOBALS
);

1293 
	`em�_��
(
em�
, 
MP_F_NLR_POP
);

1295 i�(!(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
)) {

1296 i�(
em�
->
sc�e
->
exc_�ack_size
 == 0) {

1298 
	`em�_�tive_�b�_assign
(
em�
,�m�->
ex�_�b�
 + 1);

1303 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_PARENT_RET
, 
	`LOCAL_IDX_RET_VAL
(emit));

1306 
	`ASM_EXIT
(
em�
->
as
);

1307 
	}
}

1309 
	$em�_�tive_imp�t_�me
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1310 
	`DEBUG_��tf
("imp�t_�m�%s\n", 
	`q�r_�r
(
q�
));

1315 
bo�
 
�ig_do_v��_ty�s
 = 
em�
->
do_v��_ty�s
;

1316 
em�
->
do_v��_ty�s
 = 
�l�
;

1317 
vty�_k�d_t
 
vty�_�omli�
;

1318 
vty�_k�d_t
 
vty�_�v�
;

1319 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_�omli�
, 
REG_ARG_2
, &
vty�_�v�
, 
REG_ARG_3
);

1320 
	`as��
(
vty�_�omli�
 =�
VTYPE_PYOBJ
);

1321 
	`as��
(
vty�_�v�
 =�
VTYPE_PYOBJ
);

1322 
em�
->
do_v��_ty�s
 = 
�ig_do_v��_ty�s
;

1324 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_IMPORT_NAME
, 
q�
, 
REG_ARG_1
);

1325 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1326 
	}
}

1328 
	$em�_�tive_imp�t_�om
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1329 
	`DEBUG_��tf
("imp�t_�om %s\n", 
	`q�r_�r
(
q�
));

1330 
	`em�_�tive_�e
(
em�
);

1331 
vty�_k�d_t
 
vty�_modu�
;

1332 
	`em�_ac�ss_�ack
(
em�
, 1, &
vty�_modu�
, 
REG_ARG_1
);

1333 
	`as��
(
vty�_modu�
 =�
VTYPE_PYOBJ
);

1334 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_IMPORT_FROM
, 
q�
, 
REG_ARG_2
);

1335 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1336 
	}
}

1338 
	$em�_�tive_imp�t_��
(
em�_t
 *
em�
) {

1339 
	`DEBUG_��tf
("import_star\n");

1340 
vty�_k�d_t
 
vty�_modu�
;

1341 
	`em�_�e_p�_�g
(
em�
, &
vty�_modu�
, 
REG_ARG_1
);

1342 
	`as��
(
vty�_modu�
 =�
VTYPE_PYOBJ
);

1343 
	`em�_��
(
em�
, 
MP_F_IMPORT_ALL
);

1344 
	`em�_po�
(
em�
);

1345 
	}
}

1347 
	$em�_�tive_imp�t
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

1348 i�(
k�d
 =�
MP_EMIT_IMPORT_NAME
) {

1349 
	`em�_�tive_imp�t_�me
(
em�
, 
q�
);

1350 } i�(
k�d
 =�
MP_EMIT_IMPORT_FROM
) {

1351 
	`em�_�tive_imp�t_�om
(
em�
, 
q�
);

1353 
	`em�_�tive_imp�t_��
(
em�
);

1355 
	}
}

1357 
	$em�_�tive_l�d_cڡ_tok
(
em�_t
 *
em�
, 
mp_tok�_k�d_t
 
tok
) {

1358 
	`DEBUG_��tf
("l�d_cڡ_tok�ok=%u)\n", 
tok
);

1359 i�(
tok
 =�
MP_TOKEN_ELLIPSIS
) {

1360 
	`em�_�tive_l�d_cڡ_obj
(
em�
, 
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�l�sis_obj
));

1362 
	`em�_�tive_�e
(
em�
);

1363 i�(
tok
 =�
MP_TOKEN_KW_NONE
) {

1364 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PTR_NONE
, 0);

1366 
	`em�_po�_push_imm
(
em�
, 
VTYPE_BOOL
, 
tok
 =�
MP_TOKEN_KW_FALSE
 ? 0 : 1);

1369 
	}
}

1371 
	$em�_�tive_l�d_cڡ_sm�l_�t
(
em�_t
 *
em�
, 
mp_�t_t
 
�g
) {

1372 
	`DEBUG_��tf
("l�d_cڡ_sm�l_�t(�t=" 
INT_FMT
 ")\n", 
�g
);

1373 
	`em�_�tive_�e
(
em�
);

1374 
	`em�_po�_push_imm
(
em�
, 
VTYPE_INT
, 
�g
);

1375 
	}
}

1377 
	$em�_�tive_l�d_cڡ_�r
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1378 
	`em�_�tive_�e
(
em�
);

1388 
	`�ed_�g_s�g�
(
em�
, 
REG_TEMP0
, 0);

1389 
	`em�_�tive_mov_�g_q�r_obj
(
em�
, 
REG_TEMP0
, 
q�
);

1390 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_TEMP0
);

1392 
	}
}

1394 
	$em�_�tive_l�d_cڡ_obj
(
em�_t
 *
em�
, 
mp_obj_t
 
obj
) {

1395 
	`em�_�tive_�e
(
em�
);

1396 
	`�ed_�g_s�g�
(
em�
, 
REG_TEMP0
, 0);

1397 
	`em�_l�d_�g_w�h_obje�
(
em�
, 
REG_TEMP0
, 
obj
);

1398 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_TEMP0
);

1399 
	}
}

1401 
	$em�_�tive_l�d_nu�
(
em�_t
 *
em�
) {

1402 
	`em�_�tive_�e
(
em�
);

1403 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PYOBJ
, 0);

1404 
	}
}

1406 
	$em�_�tive_l�d_�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
) {

1407 
	`DEBUG_��tf
("l�d_�(%s, " 
UINT_FMT
 ")\n", 
	`q�r_�r
(
q�
), 
lo�l_num
);

1408 
vty�_k�d_t
 
vty�
 = 
em�
->
lo�l_vty�
[
lo�l_num
];

1409 i�(
vty�
 =�
VTYPE_UNBOUND
) {

1410 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
, 
	`MP_ERROR_TEXT
("lo��'%q' u�d befܐty� known"), 
q�
);

1412 
	`em�_�tive_�e
(
em�
);

1413 i�(
lo�l_num
 < 
MAX_REGS_FOR_LOCAL_VARS
 && 
	`CAN_USE_REGS_FOR_LOCALS
(
em�
)) {

1414 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
�g_lo�l_�b�
[
lo�l_num
]);

1416 
	`�ed_�g_s�g�
(
em�
, 
REG_TEMP0
, 0);

1417 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_TEMP0
, 
	`LOCAL_IDX_LOCAL_VAR
�m�, 
lo�l_num
));

1418 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
REG_TEMP0
);

1420 
	}
}

1422 
	$em�_�tive_l�d_d�ef
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
) {

1423 
	`DEBUG_��tf
("l�d_d�ef(%s, " 
UINT_FMT
 ")\n", 
	`q�r_�r
(
q�
), 
lo�l_num
);

1424 
	`�ed_�g_s�g�
(
em�
, 
REG_RET
, 0);

1425 
	`em�_�tive_l�d_�
(
em�
, 
q�
, 
lo�l_num
);

1426 
vty�_k�d_t
 
vty�
;

1427 
�g_ba�
 = 
REG_RET
;

1428 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g_ba�
, -1, -1);

1429 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 1);

1431 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1432 
	}
}

1434 
	$em�_�tive_l�d_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

1435 i�(
k�d
 =�
MP_EMIT_IDOP_LOCAL_FAST
) {

1436 
	`em�_�tive_l�d_�
(
em�
, 
q�
, 
lo�l_num
);

1438 
	`em�_�tive_l�d_d�ef
(
em�
, 
q�
, 
lo�l_num
);

1440 
	}
}

1442 
	$em�_�tive_l�d_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

1443 
	`MP_STATIC_ASSERT
(
MP_F_LOAD_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_F_LOAD_NAME);

1444 
	`MP_STATIC_ASSERT
(
MP_F_LOAD_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_F_LOAD_GLOBAL
);

1445 
	`em�_�tive_�e
(
em�
);

1446 i�(
k�d
 =�
MP_EMIT_IDOP_GLOBAL_NAME
) {

1447 
	`DEBUG_��tf
("l�d_�me(%s)\n", 
	`q�r_�r
(
q�
));

1449 
	`DEBUG_��tf
("l�d_glob�(%s)\n", 
	`q�r_�r
(
q�
));

1450 i�(
em�
->
do_v��_ty�s
) {

1452 
�tive_ty�
 = 
	`mp_�tive_ty�_�om_q�r
(
q�
);

1453 i�(
�tive_ty�
 >�
MP_NATIVE_TYPE_BOOL
) {

1454 
	`em�_po�_push_imm
(
em�
, 
VTYPE_BUILTIN_CAST
, 
�tive_ty�
);

1459 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_NAME
 + 
k�d
, 
q�
, 
REG_ARG_1
);

1460 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1461 
	}
}

1463 
	$em�_�tive_l�d_��
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1468 
vty�_k�d_t
 
vty�_ba�
;

1469 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1470 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

1471 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_ATTR
, 
q�
, 
REG_ARG_2
);

1472 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1473 
	}
}

1475 
	$em�_�tive_l�d_m�hod
(
em�_t
 *
em�
, 
q�r
 
q�
, 
bo�
 
is_su�r
) {

1476 
	`DEBUG_��tf
("l�d_m�hod(%s, %d)\n", 
	`q�r_�r
(
q�
), 
is_su�r
);

1477 i�(
is_su�r
) {

1478 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_2
, 3);

1479 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_2
, 2);

1480 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_SUPER_METHOD
, 
q�
, 
REG_ARG_1
);

1482 
vty�_k�d_t
 
vty�_ba�
;

1483 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1484 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

1485 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_3
, 2);

1486 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_METHOD
, 
q�
, 
REG_ARG_2
);

1488 
	}
}

1490 
	$em�_�tive_l�d_bu�d_�ass
(
em�_t
 *
em�
) {

1491 
	`em�_�tive_�e
(
em�
);

1492 
	`em�_��
(
em�
, 
MP_F_LOAD_BUILD_CLASS
);

1493 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1494 
	}
}

1496 
	$em�_�tive_l�d_subs�
(
em�_t
 *
em�
) {

1497 
	`DEBUG_��tf
("load_subscr\n");

1502 
vty�_k�d_t
 
vty�_ba�
 = 
	`�ek_vty�
(
em�
, 1);

1504 i�(
vty�_ba�
 =�
VTYPE_PYOBJ
) {

1507 
vty�_k�d_t
 
vty�_�dex
 = 
	`�ek_vty�
(
em�
, 0);

1508 i�(
vty�_�dex
 =�
VTYPE_PYOBJ
) {

1509 
	`em�_�e_p�_�g
(
em�
, &
vty�_�dex
, 
REG_ARG_2
);

1511 
	`em�_�e_p�_�g
(
em�
, &
vty�_�dex
, 
REG_ARG_1
);

1512 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_NATIVE_TO_OBJ
, 
vty�_�dex
, 
REG_ARG_2
);

1513 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
REG_RET
);

1515 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1516 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_OBJ_SUBSCR
, (
mp_u�t_t
)
MP_OBJ_SENTINEL
, 
REG_ARG_3
);

1517 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

1523 
�ack_�fo_t
 *
t�
 = 
	`�ek_�ack
(
em�
, 0);

1524 i�(
t�
->
vty�
 =�
VTYPE_INT
 &&��->
k�d
 =�
STACK_IMM
) {

1526 
mp_�t_t
 
�dex_v�ue
 = 
t�
->
d�a
.
u_imm
;

1527 
	`em�_�e_p�_dis�rd
(
em�
);

1528 
�g_ba�
 = 
REG_ARG_1
;

1529 
�g_�dex
 = 
REG_ARG_2
;

1530 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_ba�
, &
�g_ba�
, 
�g_�dex
,�eg_index);

1531 
	`�ed_�g_s�g�
(
em�
, 
REG_RET
, 0);

1532 
vty�_ba�
) {

1533 
VTYPE_PTR8
: {

1536 i�(
�dex_v�ue
 != 0) {

1538 #i�
N_THUMB


1539 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1540 
	`asm_thumb_ldrb_�o_�o_i5
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
);

1543 #�i�
N_RV32


1544 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 12)) {

1545 
	`asm_rv32_�code_lbu
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
);

1549 
	`�ed_�g_s�g�
(
em�
, 
�g_�dex
, 0);

1550 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
);

1551 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1552 
�g_ba�
 = 
�g_�dex
;

1554 
	`ASM_LOAD8_REG_REG
(
em�
->
as
, 
REG_RET
, 
�g_ba�
);

1557 
VTYPE_PTR16
: {

1559 i�(
�dex_v�ue
 != 0) {

1561 #i�
N_THUMB


1562 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1563 
	`asm_thumb_ldrh_�o_�o_i5
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
);

1566 #�i�
N_RV32


1567 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 11)) {

1568 
	`asm_rv32_�code_lhu
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
 << 1);

1572 
	`�ed_�g_s�g�
(
em�
, 
�g_�dex
, 0);

1573 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
 << 1);

1574 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1575 
�g_ba�
 = 
�g_�dex
;

1577 
	`ASM_LOAD16_REG_REG
(
em�
->
as
, 
REG_RET
, 
�g_ba�
);

1580 
VTYPE_PTR32
: {

1582 i�(
�dex_v�ue
 != 0) {

1584 #i�
N_THUMB


1585 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1586 
	`asm_thumb_ldr_�o_�o_i5
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
);

1589 #�i�
N_RV32


1590 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 10)) {

1591 
	`asm_rv32_�code_lw
(
em�
->
as
, 
REG_RET
, 
�g_ba�
, 
�dex_v�ue
 << 2);

1595 
	`�ed_�g_s�g�
(
em�
, 
�g_�dex
, 0);

1596 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
 << 2);

1597 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1598 
�g_ba�
 = 
�g_�dex
;

1600 
	`ASM_LOAD32_REG_REG
(
em�
->
as
, 
REG_RET
, 
�g_ba�
);

1604 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1605 
	`MP_ERROR_TEXT
("�n'�l�d from '%q'"), 
	`vty�_to_q�r
(
vty�_ba�
));

1609 
vty�_k�d_t
 
vty�_�dex
;

1610 
�g_�dex
 = 
REG_ARG_2
;

1611 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_�dex
, &
�g_�dex
, 
REG_ARG_1
, REG_ARG_1);

1612 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1613 
	`�ed_�g_s�g�
(
em�
, 
REG_RET
, 0);

1614 i�(
vty�_�dex
 !�
VTYPE_INT
 && vty�_�dex !�
VTYPE_UINT
) {

1615 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1616 
	`MP_ERROR_TEXT
("�n'�l�d w�h '%q' index"), 
	`vty�_to_q�r
(
vty�_�dex
));

1618 
vty�_ba�
) {

1619 
VTYPE_PTR8
: {

1622 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1623 
	`ASM_LOAD8_REG_REG
(
em�
->
as
, 
REG_RET
, 
REG_ARG_1
);

1626 
VTYPE_PTR16
: {

1628 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1629 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1630 
	`ASM_LOAD16_REG_REG
(
em�
->
as
, 
REG_RET
, 
REG_ARG_1
);

1633 
VTYPE_PTR32
: {

1635 #i�
N_RV32


1636 
	`asm_rv32_�code_�li
(
em�
->
as
, 
REG_TEMP2
, 
�g_�dex
, 2);

1637 
	`asm_rv32_�code_�dd
(
em�
->
as
, 
REG_ARG_1
, 
REG_TEMP2
);

1638 
	`asm_rv32_�code_lw
(
em�
->
as
, 
REG_RET
, 
REG_ARG_1
, 0);

1641 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1642 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1643 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1644 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1645 
	`ASM_LOAD32_REG_REG
(
em�
->
as
, 
REG_RET
, 
REG_ARG_1
);

1649 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1650 
	`MP_ERROR_TEXT
("�n'�l�d from '%q'"), 
	`vty�_to_q�r
(
vty�_ba�
));

1653 
	`em�_po�_push_�g
(
em�
, 
VTYPE_INT
, 
REG_RET
);

1655 
	}
}

1657 
	$em�_�tive_��e_�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
) {

1658 
vty�_k�d_t
 
vty�
;

1659 i�(
lo�l_num
 < 
MAX_REGS_FOR_LOCAL_VARS
 && 
	`CAN_USE_REGS_FOR_LOCALS
(
em�
)) {

1660 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
�g_lo�l_�b�
[
lo�l_num
]);

1662 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_TEMP0
);

1663 
	`em�_�tive_mov_��e_�g
(
em�
, 
	`LOCAL_IDX_LOCAL_VAR
�m�, 
lo�l_num
), 
REG_TEMP0
);

1665 
	`em�_po�
(
em�
);

1668 i�(
em�
->
lo�l_vty�
[
lo�l_num
] =�
VTYPE_UNBOUND
) {

1670 
em�
->
lo�l_vty�
[
lo�l_num
] = 
vty�
;

1671 } i�(
em�
->
lo�l_vty�
[
lo�l_num
] !�
vty�
) {

1673 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1674 
	`MP_ERROR_TEXT
("local '%q' has�ype '%q' but source is '%q'"),

1675 
q�
, 
	`vty�_to_q�r
(
em�
->
lo�l_vty�
[
lo�l_num
]), vty�_to_q�r(
vty�
));

1677 
	}
}

1679 
	$em�_�tive_��e_d�ef
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
) {

1680 
	`DEBUG_��tf
("��e_d�ef(%s, " 
UINT_FMT
 ")\n", 
	`q�r_�r
(
q�
), 
lo�l_num
);

1681 
	`�ed_�g_s�g�
(
em�
, 
REG_TEMP0
, 0);

1682 
	`�ed_�g_s�g�
(
em�
, 
REG_TEMP1
, 0);

1683 
	`em�_�tive_l�d_�
(
em�
, 
q�
, 
lo�l_num
);

1684 
vty�_k�d_t
 
vty�
;

1685 
�g_ba�
 = 
REG_TEMP0
;

1686 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g_ba�
, -1, -1);

1687 
�g_�c
 = 
REG_TEMP1
;

1688 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g_�c
, 
�g_ba�
,�eg_base);

1689 
	`ASM_STORE_REG_REG_OFFSET
(
em�
->
as
, 
�g_�c
, 
�g_ba�
, 1);

1690 
	`em�_po�
(
em�
);

1691 
	}
}

1693 
	$em�_�tive_��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

1694 i�(
k�d
 =�
MP_EMIT_IDOP_LOCAL_FAST
) {

1695 
	`em�_�tive_��e_�
(
em�
, 
q�
, 
lo�l_num
);

1697 
	`em�_�tive_��e_d�ef
(
em�
, 
q�
, 
lo�l_num
);

1699 
	}
}

1701 
	$em�_�tive_��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

1702 
	`MP_STATIC_ASSERT
(
MP_F_STORE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_F_STORE_NAME);

1703 
	`MP_STATIC_ASSERT
(
MP_F_STORE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_F_STORE_GLOBAL
);

1704 i�(
k�d
 =�
MP_EMIT_IDOP_GLOBAL_NAME
) {

1706 
vty�_k�d_t
 
vty�
;

1707 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_2
);

1708 
	`as��
(
vty�
 =�
VTYPE_PYOBJ
);

1710 
vty�_k�d_t
 
vty�
 = 
	`�ek_vty�
(
em�
, 0);

1711 i�(
vty�
 =�
VTYPE_PYOBJ
) {

1712 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_2
);

1714 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_1
);

1715 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_NATIVE_TO_OBJ
, 
vty�
, 
REG_ARG_2
);

1716 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
REG_RET
);

1719 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_STORE_NAME
 + 
k�d
, 
q�
, 
REG_ARG_1
);

1720 
	`em�_po�
(
em�
);

1721 
	}
}

1723 
	$em�_�tive_��e_��
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1724 
vty�_k�d_t
 
vty�_ba�
;

1725 
vty�_k�d_t
 
vty�_v�
 = 
	`�ek_vty�
(
em�
, 1);

1726 i�(
vty�_v�
 =�
VTYPE_PYOBJ
) {

1727 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
, &
vty�_v�
, 
REG_ARG_3
);

1729 
	`em�_ac�ss_�ack
(
em�
, 2, &
vty�_v�
, 
REG_ARG_1
);

1730 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_NATIVE_TO_OBJ
, 
vty�_v�
, 
REG_ARG_2
);

1731 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_3
, 
REG_RET
);

1732 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1733 
	`adju�_�ack
(
em�
, -1);

1735 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

1736 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_STORE_ATTR
, 
q�
, 
REG_ARG_2
);

1737 
	`em�_po�
(
em�
);

1738 
	}
}

1740 
	$em�_�tive_��e_subs�
(
em�_t
 *
em�
) {

1741 
	`DEBUG_��tf
("store_subscr\n");

1746 
vty�_k�d_t
 
vty�_ba�
 = 
	`�ek_vty�
(
em�
, 1);

1748 i�(
vty�_ba�
 =�
VTYPE_PYOBJ
) {

1750 
vty�_k�d_t
 
vty�_�dex
 = 
	`�ek_vty�
(
em�
, 0);

1751 
vty�_k�d_t
 
vty�_v�ue
 = 
	`�ek_vty�
(
em�
, 2);

1752 i�(
vty�_�dex
 !�
VTYPE_PYOBJ
 || 
vty�_v�ue
 != VTYPE_PYOBJ) {

1755 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_1
, 3);

1756 
	`adju�_�ack
(
em�
, 3);

1758 
	`em�_�e_p�_�g_�g_�g
(
em�
, &
vty�_�dex
, 
REG_ARG_2
, &
vty�_ba�
, 
REG_ARG_1
, &
vty�_v�ue
, 
REG_ARG_3
);

1759 
	`em�_��
(
em�
, 
MP_F_OBJ_SUBSCR
);

1765 
�ack_�fo_t
 *
t�
 = 
	`�ek_�ack
(
em�
, 0);

1766 i�(
t�
->
vty�
 =�
VTYPE_INT
 &&��->
k�d
 =�
STACK_IMM
) {

1768 
mp_�t_t
 
�dex_v�ue
 = 
t�
->
d�a
.
u_imm
;

1769 
	`em�_�e_p�_dis�rd
(
em�
);

1770 
vty�_k�d_t
 
vty�_v�ue
;

1771 
�g_ba�
 = 
REG_ARG_1
;

1772 
�g_�dex
 = 
REG_ARG_2
;

1773 
�g_v�ue
 = 
REG_ARG_3
;

1774 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_ba�
, &
�g_ba�
, 
�g_�dex
, 
�g_v�ue
);

1775 #i�
N_X64
 || 
N_X86


1777 
	`em�_�e_p�_�g
(
em�
, &
vty�_v�ue
, 
�g_v�ue
);

1779 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_v�ue
, &
�g_v�ue
, 
�g_ba�
, 
�g_�dex
);

1781 i�(
vty�_v�ue
 !�
VTYPE_BOOL
 && vty�_v�u�!�
VTYPE_INT
 && vty�_v�u�!�
VTYPE_UINT
) {

1782 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1783 
	`MP_ERROR_TEXT
("�n'��ܐ'%q'"), 
	`vty�_to_q�r
(
vty�_v�ue
));

1785 
vty�_ba�
) {

1786 
VTYPE_PTR8
: {

1789 i�(
�dex_v�ue
 != 0) {

1791 #i�
N_THUMB


1792 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1793 
	`asm_thumb_�rb_�o_�o_i5
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
);

1796 #�i�
N_RV32


1797 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 12)) {

1798 
	`asm_rv32_�code_sb
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
);

1802 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
);

1803 #i�
N_ARM


1804 
	`asm_�m_�rb_�g_�g_�g
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�g_�dex
);

1807 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1808 
�g_ba�
 = 
�g_�dex
;

1810 
	`ASM_STORE8_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
);

1813 
VTYPE_PTR16
: {

1815 i�(
�dex_v�ue
 != 0) {

1817 #i�
N_THUMB


1818 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1819 
	`asm_thumb_�rh_�o_�o_i5
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
);

1822 #�i�
N_RV32


1823 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 11)) {

1824 
	`asm_rv32_�code_sh
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
 << 1);

1828 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
 << 1);

1829 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1830 
�g_ba�
 = 
�g_�dex
;

1832 
	`ASM_STORE16_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
);

1835 
VTYPE_PTR32
: {

1837 i�(
�dex_v�ue
 != 0) {

1839 #i�
N_THUMB


1840 i�(
�dex_v�ue
 > 0 && index_value < 32) {

1841 
	`asm_thumb_�r_�o_�o_i5
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
);

1844 #�i�
N_RV32


1845 i�(
	`FIT_SIGNED
(
�dex_v�ue
, 10)) {

1846 
	`asm_rv32_�code_sw
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�dex_v�ue
 << 2);

1849 #�i�
N_ARM


1850 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
);

1851 
	`asm_�m_�r_�g_�g_�g
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
, 
�g_�dex
);

1854 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
�g_�dex
, 
�dex_v�ue
 << 2);

1855 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
�g_�dex
, 
�g_ba�
);

1856 
�g_ba�
 = 
�g_�dex
;

1858 
	`ASM_STORE32_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
�g_ba�
);

1862 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1863 
	`MP_ERROR_TEXT
("�n'��ܐt�'%q'"), 
	`vty�_to_q�r
(
vty�_ba�
));

1867 
vty�_k�d_t
 
vty�_�dex
, 
vty�_v�ue
;

1868 
�g_�dex
 = 
REG_ARG_2
;

1869 
�g_v�ue
 = 
REG_ARG_3
;

1870 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_�dex
, &
�g_�dex
, 
REG_ARG_1
, 
�g_v�ue
);

1871 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1872 i�(
vty�_�dex
 !�
VTYPE_INT
 && vty�_�dex !�
VTYPE_UINT
) {

1873 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1874 
	`MP_ERROR_TEXT
("�n'��ܐw�h '%q' index"), 
	`vty�_to_q�r
(
vty�_�dex
));

1876 #i�
N_X64
 || 
N_X86


1878 
	`em�_�e_p�_�g
(
em�
, &
vty�_v�ue
, 
�g_v�ue
);

1880 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_v�ue
, &
�g_v�ue
, 
REG_ARG_1
, 
�g_�dex
);

1882 i�(
vty�_v�ue
 !�
VTYPE_BOOL
 && vty�_v�u�!�
VTYPE_INT
 && vty�_v�u�!�
VTYPE_UINT
) {

1883 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1884 
	`MP_ERROR_TEXT
("�n'��ܐ'%q'"), 
	`vty�_to_q�r
(
vty�_v�ue
));

1886 
vty�_ba�
) {

1887 
VTYPE_PTR8
: {

1890 #i�
N_ARM


1891 
	`asm_�m_�rb_�g_�g_�g
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
, 
�g_�dex
);

1894 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1895 
	`ASM_STORE8_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
);

1898 
VTYPE_PTR16
: {

1900 #i�
N_ARM


1901 
	`asm_�m_�rh_�g_�g_�g
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
, 
�g_�dex
);

1904 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1905 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1906 
	`ASM_STORE16_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
);

1909 
VTYPE_PTR32
: {

1911 #i�
N_ARM


1912 
	`asm_�m_�r_�g_�g_�g
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
, 
�g_�dex
);

1914 #�i�
N_RV32


1915 
	`asm_rv32_�code_�li
(
em�
->
as
, 
REG_TEMP2
, 
�g_�dex
, 2);

1916 
	`asm_rv32_�code_�dd
(
em�
->
as
, 
REG_ARG_1
, 
REG_TEMP2
);

1917 
	`asm_rv32_�code_sw
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
, 0);

1920 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1921 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1922 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1923 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
�g_�dex
);

1924 
	`ASM_STORE32_REG_REG
(
em�
->
as
, 
�g_v�ue
, 
REG_ARG_1
);

1928 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

1929 
	`MP_ERROR_TEXT
("�n'��ܐt�'%q'"), 
	`vty�_to_q�r
(
vty�_ba�
));

1934 
	}
}

1936 
	$em�_�tive_d��e_lo�l
(
em�_t
 *
em�
, 
q�r
 
q�
, 
mp_u�t_t
 
lo�l_num
, 
k�d
) {

1937 i�(
k�d
 =�
MP_EMIT_IDOP_LOCAL_FAST
) {

1941 
	`em�_�tive_l�d_cڡ_tok
(
em�
, 
MP_TOKEN_KW_NONE
);

1942 
	`em�_�tive_��e_�
(
em�
, 
q�
, 
lo�l_num
);

1946 
	}
}

1948 
	$em�_�tive_d��e_glob�
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

1949 
	`MP_STATIC_ASSERT
(
MP_F_DELETE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_NAME
 == MP_F_DELETE_NAME);

1950 
	`MP_STATIC_ASSERT
(
MP_F_DELETE_NAME
 + 
MP_EMIT_IDOP_GLOBAL_GLOBAL
 =�
MP_F_DELETE_GLOBAL
);

1951 
	`em�_�tive_�e
(
em�
);

1952 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_DELETE_NAME
 + 
k�d
, 
q�
, 
REG_ARG_1
);

1953 
	`em�_po�
(
em�
);

1954 
	}
}

1956 
	$em�_�tive_d��e_��
(
em�_t
 *
em�
, 
q�r
 
q�
) {

1957 
vty�_k�d_t
 
vty�_ba�
;

1958 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

1959 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

1960 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_ARG_3
, REG_ARG_3);

1961 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_STORE_ATTR
, 
q�
, 
REG_ARG_2
);

1962 
	`em�_po�
(
em�
);

1963 
	}
}

1965 
	$em�_�tive_d��e_subs�
(
em�_t
 *
em�
) {

1966 
vty�_k�d_t
 
vty�_�dex
, 
vty�_ba�
;

1967 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_�dex
, 
REG_ARG_2
, &
vty�_ba�
, 
REG_ARG_1
);

1968 
	`as��
(
vty�_�dex
 =�
VTYPE_PYOBJ
);

1969 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

1970 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_OBJ_SUBSCR
, (
mp_u�t_t
)
MP_OBJ_NULL
, 
REG_ARG_3
);

1971 
	}
}

1973 
	$em�_�tive_subs�
(
em�_t
 *
em�
, 
k�d
) {

1974 i�(
k�d
 =�
MP_EMIT_SUBSCR_LOAD
) {

1975 
	`em�_�tive_l�d_subs�
(
em�
);

1976 } i�(
k�d
 =�
MP_EMIT_SUBSCR_STORE
) {

1977 
	`em�_�tive_��e_subs�
(
em�
);

1979 
	`em�_�tive_d��e_subs�
(
em�
);

1981 
	}
}

1983 
	$em�_�tive_��
(
em�_t
 *
em�
, 
q�r
 
q�
, 
k�d
) {

1984 i�(
k�d
 =�
MP_EMIT_ATTR_LOAD
) {

1985 
	`em�_�tive_l�d_��
(
em�
, 
q�
);

1986 } i�(
k�d
 =�
MP_EMIT_ATTR_STORE
) {

1987 
	`em�_�tive_��e_��
(
em�
, 
q�
);

1989 
	`em�_�tive_d��e_��
(
em�
, 
q�
);

1991 
	}
}

1993 
	$em�_�tive_dup_t�
(
em�_t
 *
em�
) {

1994 
	`DEBUG_��tf
("dup_top\n");

1995 
vty�_k�d_t
 
vty�
;

1996 
�g
 = 
REG_TEMP0
;

1997 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g
, -1, -1);

1998 
	`em�_po�_push_�g_�g
(
em�
, 
vty�
, 
�g
, vtype,�eg);

1999 
	}
}

2001 
	$em�_�tive_dup_t�_two
(
em�_t
 *
em�
) {

2002 
vty�_k�d_t
 
vty�0
, 
vty�1
;

2003 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�0
, 
REG_TEMP0
, &
vty�1
, 
REG_TEMP1
);

2004 
	`em�_po�_push_�g_�g_�g_�g
(
em�
, 
vty�1
, 
REG_TEMP1
, 
vty�0
, 
REG_TEMP0
, vtype1, REG_TEMP1, vtype0, REG_TEMP0);

2005 
	}
}

2007 
	$em�_�tive_p�_t�
(
em�_t
 *
em�
) {

2008 
	`DEBUG_��tf
("pop_top\n");

2009 
	`em�_�e_p�_dis�rd
(
em�
);

2010 
	`em�_po�
(
em�
);

2011 
	}
}

2013 
	$em�_�tive_r�_two
(
em�_t
 *
em�
) {

2014 
	`DEBUG_��tf
("rot_two\n");

2015 
vty�_k�d_t
 
vty�0
, 
vty�1
;

2016 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�0
, 
REG_TEMP0
, &
vty�1
, 
REG_TEMP1
);

2017 
	`em�_po�_push_�g_�g
(
em�
, 
vty�0
, 
REG_TEMP0
, 
vty�1
, 
REG_TEMP1
);

2018 
	}
}

2020 
	$em�_�tive_r�_th�e
(
em�_t
 *
em�
) {

2021 
	`DEBUG_��tf
("rot_three\n");

2022 
vty�_k�d_t
 
vty�0
, 
vty�1
, 
vty�2
;

2023 
	`em�_�e_p�_�g_�g_�g
(
em�
, &
vty�0
, 
REG_TEMP0
, &
vty�1
, 
REG_TEMP1
, &
vty�2
, 
REG_TEMP2
);

2024 
	`em�_po�_push_�g_�g_�g
(
em�
, 
vty�0
, 
REG_TEMP0
, 
vty�2
, 
REG_TEMP2
, 
vty�1
, 
REG_TEMP1
);

2025 
	}
}

2027 
	$em�_�tive_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

2028 
	`DEBUG_��tf
("jump�ab�=" 
UINT_FMT
 ")\n", 
�b�
);

2029 
	`em�_�tive_�e
(
em�
);

2031 
	`�ed_�ack_���d
(
em�
);

2032 
	`ASM_JUMP
(
em�
->
as
, 
�b�
);

2033 
	`em�_po�
(
em�
);

2034 
	`mp_asm_ba�_su��ss_code
(&
em�
->
as
->
ba�
);

2035 
	}
}

2037 
	$em�_�tive_jump_h��r
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
, bo� 
p�
) {

2038 
vty�_k�d_t
 
vty�
 = 
	`�ek_vty�
(
em�
, 0);

2039 i�(
vty�
 =�
VTYPE_PYOBJ
) {

2040 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_1
);

2041 i�(!
p�
) {

2042 
	`adju�_�ack
(
em�
, 1);

2044 
	`em�_��
(
em�
, 
MP_F_OBJ_IS_TRUE
);

2046 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_RET
);

2047 i�(!
p�
) {

2048 
	`adju�_�ack
(
em�
, 1);

2050 i�(!(
vty�
 =�
VTYPE_BOOL
 || vty� =�
VTYPE_INT
 || vty� =�
VTYPE_UINT
)) {

2051 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2052 
	`MP_ERROR_TEXT
("�n'�im�ic�ly c�v��'%q'��'bo�'"), 
	`vty�_to_q�r
(
vty�
));

2057 i�(!
p�
) {

2058 
em�
->
�ved_�ack_vty�
 = 
vty�
;

2061 
	`�ed_�ack_���d
(
em�
);

2063 i�(
c�d
) {

2064 
	`ASM_JUMP_IF_REG_NONZERO
(
em�
->
as
, 
REG_RET
, 
�b�
, 
vty�
 =�
VTYPE_PYOBJ
);

2066 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, 
�b�
, 
vty�
 =�
VTYPE_PYOBJ
);

2068 i�(!
p�
) {

2069 
	`adju�_�ack
(
em�
, -1);

2071 
	`em�_po�
(
em�
);

2072 
	}
}

2074 
	$em�_�tive_p�_jump_if
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
) {

2075 
	`DEBUG_��tf
("p�_jump_if(c�d=%u,�ab�=" 
UINT_FMT
 ")\n", 
c�d
, 
�b�
);

2076 
	`em�_�tive_jump_h��r
(
em�
, 
c�d
, 
�b�
, 
�ue
);

2077 
	}
}

2079 
	$em�_�tive_jump_if_�_p�
(
em�_t
 *
em�
, 
bo�
 
c�d
, 
mp_u�t_t
 
�b�
) {

2080 
	`DEBUG_��tf
("jump_if_�_p�(c�d=%u,�ab�=" 
UINT_FMT
 ")\n", 
c�d
, 
�b�
);

2081 
	`em�_�tive_jump_h��r
(
em�
, 
c�d
, 
�b�
, 
�l�
);

2082 
	}
}

2084 
	$em�_�tive_unw�d_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, mp_u�t_�
ex��_d�th
) {

2085 i�(
ex��_d�th
 > 0) {

2086 
exc_�ack_��y_t
 *
f��_f��ly
 = 
NULL
;

2087 
exc_�ack_��y_t
 *
�ev_f��ly
 = 
NULL
;

2088 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[em�->
exc_�ack_size
 - 1];

2089 ; 
ex��_d�th
 > 0; --ex��_d�th, --
e
) {

2090 i�(
e
->
is_f��ly
 &&�->
is_a�ive
) {

2092 i�(
f��_f��ly
 =�
NULL
) {

2093 
f��_f��ly
 = 
e
;

2095 i�(
�ev_f��ly
 !�
NULL
) {

2097 
�ev_f��ly
->
unw�d_�b�
 = 
e
->
�b�
;

2099 
�ev_f��ly
 = 
e
;

2102 i�(
�ev_f��ly
 =�
NULL
) {

2105 i�(
e
 < 
em�
->
exc_�ack
) {

2106 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_RET
, REG_RET);

2108 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_RET
, 
e
->
�b�
);

2110 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_PC
�m�), 
REG_RET
);

2114 
�ev_f��ly
->
unw�d_�b�
 = 
UNWIND_LABEL_DO_FINAL_UNWIND
;

2115 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_RET
, 
�b�
 & ~
MP_EMIT_BREAK_FROM_FOR
);

2116 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_UNWIND
�m�), 
REG_RET
);

2118 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_RET
, (
mp_u�t_t
)
MP_OBJ_NULL
);

2119 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_VAL
�m�), 
REG_RET
);

2121 
�b�
 = 
f��_f��ly
->label;

2124 
	`em�_�tive_jump
(
em�
, 
�b�
 & ~
MP_EMIT_BREAK_FROM_FOR
);

2125 
	}
}

2127 
	$em�_�tive_�tup_w�h
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

2132 
vty�_k�d_t
 
vty�
;

2133 
	`em�_ac�ss_�ack
(
em�
, 1, &
vty�
, 
REG_ARG_1
);

2134 
	`as��
(
vty�
 =�
VTYPE_PYOBJ
);

2135 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_3
, 2);

2136 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_METHOD
, 
MP_QSTR___ex�__
, 
REG_ARG_2
);

2139 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_3
);

2140 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_2
);

2141 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_1
);

2142 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
REG_ARG_2
);

2143 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
REG_ARG_3
);

2148 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_3
, 2);

2149 
	`em�_��_w�h_q�r_�g
(
em�
, 
MP_F_LOAD_METHOD
, 
MP_QSTR___��r__
, 
REG_ARG_2
);

2153 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 2);

2154 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW
, 0, 
REG_ARG_1
, 0, 
REG_ARG_2
);

2155 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2159 
	`�ed_�ack_���d
(
em�
);

2160 
	`em�_�tive_push_exc_�ack
(
em�
, 
�b�
, 
�ue
);

2162 
	`em�_�tive_dup_t�
(
em�
);

2164 
	}
}

2166 
	$em�_�tive_�tup_block
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
k�d
) {

2167 
	`DEBUG_��tf
("�tup_block(%d, %d)\n", ()
�b�
, 
k�d
);

2168 i�(
k�d
 =�
MP_EMIT_SETUP_BLOCK_WITH
) {

2169 
	`em�_�tive_�tup_w�h
(
em�
, 
�b�
);

2172 
	`em�_�tive_�e
(
em�
);

2173 
	`�ed_�ack_���d
(
em�
);

2174 
	`em�_�tive_push_exc_�ack
(
em�
, 
�b�
, 
k�d
 =�
MP_EMIT_SETUP_BLOCK_FINALLY
);

2175 
	`em�_po�
(
em�
);

2177 
	}
}

2179 
	$em�_�tive_w�h_��nup
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

2183 
	`em�_�tive_�e
(
em�
);

2184 
	`em�_�tive_�ave_exc_�ack
(
em�
, 
�l�
);

2185 
	`adju�_�ack
(
em�
, -1);

2189 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
 + 2);

2192 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PTR_NONE
, 0);

2193 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PTR_NONE
, 0);

2194 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PTR_NONE
, 0);

2195 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 5);

2196 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW
, 3, 
REG_ARG_1
, 0, 
REG_ARG_2
);

2199 
	`em�_�tive_jump
(
em�
, *em�->
�b�_��
);

2203 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
->
ba�
, 
�b�
);

2206 
	`em�_�tive_�ave_exc_�ack
(
em�
, 
�ue
);

2209 
	`em�_�tive_adju�_�ack_size
(
em�
, 2);

2212 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_EXC_VAL
(emit));

2215 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_ARG_1
, *em�->
�b�_��
 + 2, 
�l�
);

2217 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_2
, 
REG_ARG_1
, 0);

2218 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_ARG_2
);

2219 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_ARG_1
);

2220 
	`em�_po�_push_imm
(
em�
, 
VTYPE_PTR_NONE
, 0);

2224 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 5);

2225 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW
, 3, 
REG_ARG_1
, 0, 
REG_ARG_2
);

2229 i�(
REG_ARG_1
 !�
REG_RET
) {

2230 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
REG_RET
);

2232 
	`em�_��
(
em�
, 
MP_F_OBJ_IS_TRUE
);

2233 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, *em�->
�b�_��
 + 1, 
�ue
);

2236 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
);

2237 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_TEMP0
, (
mp_u�t_t
)
MP_OBJ_NULL
);

2238 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_VAL
�m�), 
REG_TEMP0
);

2241 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
 + 1);

2244 
	`adju�_�ack
(
em�
, 1);

2245 
	}
}

2247 #i�
MICROPY_PY_ASYNC_AWAIT


2248 
	$em�_�tive_async_w�h_�tup_f��ly
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�_�x�_no_exc
, mp_u�t_�
�b�_f��ly_block
, mp_u�t_�
�b�_�t_unw�d_jump
) {

2253 
	`em�_�tive_adju�_�ack_size
(
em�
, 1);

2254 
	`em�_�tive_r�_two
(
em�
);

2255 
	`em�_�tive_l�d_cڡ_tok
(
em�
, 
MP_TOKEN_KW_NONE
);

2256 
	`em�_�tive_r�_two
(
em�
);

2258 
	`em�_�tive_jump
(
em�
, 
�b�_�x�_no_exc
);

2259 
	`em�_�tive_adju�_�ack_size
(
em�
, -1);

2262 
	`em�_�tive_�b�_assign
(
em�
, 
�b�_f��ly_block
);

2265 
	`em�_�e_p�_dis�rd
(
em�
);

2266 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_EXC_VAL
(emit));

2267 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_ARG_1
);

2268 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_ARG_1
, 
�b�_�t_unw�d_jump
, 
�l�
);

2269 
	}
}

2272 
	$em�_�tive_�d_f��ly
(
em�_t
 *
em�
) {

2278 
	`DEBUG_��tf
("end_finally\n");

2280 
	`em�_�e_p�_dis�rd
(
em�
);

2281 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_EXC_VAL
(emit));

2282 
	`em�_��
(
em�
, 
MP_F_NATIVE_RAISE
);

2285 
exc_�ack_��y_t
 *
e
 = 
	`em�_�tive_p�_exc_�ack
(
em�
);

2286 i�(
e
->
unw�d_�b�
 !�
UNWIND_LABEL_UNUSED
) {

2287 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_RET
, 
	`LOCAL_IDX_EXC_HANDLER_UNWIND
(emit));

2288 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, *em�->
�b�_��
, 
�l�
);

2289 i�(
e
->
unw�d_�b�
 =�
UNWIND_LABEL_DO_FINAL_UNWIND
) {

2290 
	`ASM_JUMP_REG
(
em�
->
as
, 
REG_RET
);

2292 
	`em�_�tive_jump
(
em�
, 
e
->
unw�d_�b�
);

2294 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
);

2297 
	`em�_po�
(
em�
);

2298 
	}
}

2300 
	$em�_�tive_g�_��
(
em�_t
 *
em�
, 
bo�
 
u�_�ack
) {

2304 
	`DEBUG_��tf
("g�_��(%d)\n", 
u�_�ack
);

2306 
vty�_k�d_t
 
vty�
;

2307 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_1
);

2308 
	`as��
(
vty�
 =�
VTYPE_PYOBJ
);

2309 i�(
u�_�ack
) {

2310 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_2
, 
MP_OBJ_ITER_BUF_NSLOTS
);

2311 
	`em�_��
(
em�
, 
MP_F_NATIVE_GETITER
);

2314 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_2
, 0);

2315 
	`em�_��
(
em�
, 
MP_F_NATIVE_GETITER
);

2316 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2318 
	}
}

2320 
	$em�_�tive_f�_��
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
) {

2321 
	`em�_�tive_�e
(
em�
);

2322 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_1
, 
MP_OBJ_ITER_BUF_NSLOTS
);

2323 
	`adju�_�ack
(
em�
, 
MP_OBJ_ITER_BUF_NSLOTS
);

2324 
	`em�_��
(
em�
, 
MP_F_NATIVE_ITERNEXT
);

2325 #i�
MICROPY_DEBUG_MP_OBJ_SENTINELS


2326 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_TEMP1
, (
mp_u�t_t
)
MP_OBJ_STOP_ITERATION
);

2327 
	`ASM_JUMP_IF_REG_EQ
(
em�
->
as
, 
REG_RET
, 
REG_TEMP1
, 
�b�
);

2329 
	`MP_STATIC_ASSERT
(
MP_OBJ_STOP_ITERATION
 == 0);

2330 
	`ASM_JUMP_IF_REG_ZERO
(
em�
->
as
, 
REG_RET
, 
�b�
, 
�l�
);

2332 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2333 
	}
}

2335 
	$em�_�tive_f�_��_�d
(
em�_t
 *
em�
) {

2337 
	`em�_�tive_�e
(
em�
);

2338 
	`adju�_�ack
(
em�
, -
MP_OBJ_ITER_BUF_NSLOTS
);

2339 
	`em�_po�
(
em�
);

2340 
	}
}

2342 
	$em�_�tive_p�_ex��_jump
(
em�_t
 *
em�
, 
mp_u�t_t
 
�b�
, 
bo�
 
w�h�_exc_h�d�r
) {

2343 i�(
w�h�_exc_h�d�r
) {

2345 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_TEMP0
, (
mp_u�t_t
)
MP_OBJ_NULL
);

2346 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_VAL
�m�), 
REG_TEMP0
);

2348 
	`em�_�tive_�ave_exc_�ack
(
em�
, 
�l�
);

2350 
	`em�_�tive_jump
(
em�
, 
�b�
);

2351 
	}
}

2353 
	$em�_�tive_u�ry_�
(
em�_t
 *
em�
, 
mp_u�ry_�_t
 
�
) {

2354 
vty�_k�d_t
 
vty�
 = 
	`�ek_vty�
(
em�
, 0);

2355 i�(
vty�
 =�
VTYPE_INT
 || vty� =�
VTYPE_UINT
) {

2356 i�(
�
 =�
MP_UNARY_OP_POSITIVE
) {

2358 } i�(
�
 =�
MP_UNARY_OP_NEGATIVE
) {

2359 
�g
 = 
REG_RET
;

2360 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g
,�eg,�eg);

2361 
	`ASM_NEG_REG
(
em�
->
as
, 
�g
);

2362 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
�g
);

2363 } i�(
�
 =�
MP_UNARY_OP_INVERT
) {

2364 #ifde�
ASM_NOT_REG


2365 
�g
 = 
REG_RET
;

2366 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g
,�eg,�eg);

2367 
	`ASM_NOT_REG
(
em�
->
as
, 
�g
);

2369 
�g
 = 
REG_RET
;

2370 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�
, &
�g
, 
REG_ARG_1
,�eg);

2371 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_1
, -1);

2372 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
�g
, 
REG_ARG_1
);

2374 
	`em�_po�_push_�g
(
em�
, 
vty�
, 
�g
);

2376 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2377 
	`MP_ERROR_TEXT
("'n�'�� im�em��d"), 
mp_b��y_�_m�hod_�me
[
�
]);

2379 } i�(
vty�
 =�
VTYPE_PYOBJ
) {

2380 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_2
);

2381 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_UNARY_OP
, 
�
, 
REG_ARG_1
);

2382 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2384 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2385 
	`MP_ERROR_TEXT
("�n'�d�u�ry o�o�'%q'"), 
	`vty�_to_q�r
(
vty�
));

2387 
	}
}

2389 
	$em�_�tive_b��y_�
(
em�_t
 *
em�
, 
mp_b��y_�_t
 
�
) {

2390 
	`DEBUG_��tf
("b��y_�(" 
UINT_FMT
 ")\n", 
�
);

2391 
vty�_k�d_t
 
vty�_lhs
 = 
	`�ek_vty�
(
em�
, 1);

2392 
vty�_k�d_t
 
vty�_rhs
 = 
	`�ek_vty�
(
em�
, 0);

2393 i�((
vty�_lhs
 =�
VTYPE_INT
 || vty�_lh�=�
VTYPE_UINT
)

2394 && (
vty�_rhs
 =�
VTYPE_INT
 || vty�_rh�=�
VTYPE_UINT
)) {

2396 i�(
MP_BINARY_OP_INPLACE_OR
 <�
�
 && o�<�
MP_BINARY_OP_INPLACE_POWER
) {

2397 
�
 +�
MP_BINARY_OP_OR
 - 
MP_BINARY_OP_INPLACE_OR
;

2400 #i�
N_X64
 || 
N_X86


2402 i�(
�
 =�
MP_BINARY_OP_LSHIFT
 || o�=�
MP_BINARY_OP_RSHIFT
) {

2403 #i�
N_X64


2404 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_rhs
, 
ASM_X64_REG_RCX
, &
vty�_lhs
, 
REG_RET
);

2406 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_rhs
, 
ASM_X86_REG_ECX
, &
vty�_lhs
, 
REG_RET
);

2408 i�(
�
 =�
MP_BINARY_OP_LSHIFT
) {

2409 
	`ASM_LSL_REG
(
em�
->
as
, 
REG_RET
);

2411 i�(
vty�_lhs
 =�
VTYPE_UINT
) {

2412 
	`ASM_LSR_REG
(
em�
->
as
, 
REG_RET
);

2414 
	`ASM_ASR_REG
(
em�
->
as
, 
REG_RET
);

2417 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_RET
);

2423 i�(
�
 =�
MP_BINARY_OP_FLOOR_DIVIDE
 || o�=�
MP_BINARY_OP_MODULO
) {

2424 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_rhs
, 
REG_ARG_2
, &
vty�_lhs
, 
REG_ARG_1
);

2425 i�(
vty�_lhs
 !�
VTYPE_INT
) {

2426 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2427 
	`MP_ERROR_TEXT
("div/mod�� im�em��d f� u�t"), 
mp_b��y_�_m�hod_�me
[
�
]);

2429 i�(
�
 =�
MP_BINARY_OP_FLOOR_DIVIDE
) {

2430 
	`em�_��
(
em�
, 
MP_F_SMALL_INT_FLOOR_DIVIDE
);

2432 
	`em�_��
(
em�
, 
MP_F_SMALL_INT_MODULO
);

2434 
	`em�_po�_push_�g
(
em�
, 
VTYPE_INT
, 
REG_RET
);

2438 
�g_rhs
 = 
REG_ARG_3
;

2439 
	`em�_�e_p�_�g_�exib�
(
em�
, &
vty�_rhs
, &
�g_rhs
, 
REG_RET
, 
REG_ARG_2
);

2440 
	`em�_�e_p�_�g
(
em�
, &
vty�_lhs
, 
REG_ARG_2
);

2442 #i�!(
N_X64
 || 
N_X86
)

2443 i�(
�
 =�
MP_BINARY_OP_LSHIFT
 || o�=�
MP_BINARY_OP_RSHIFT
) {

2444 i�(
�
 =�
MP_BINARY_OP_LSHIFT
) {

2445 
	`ASM_LSL_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2447 i�(
vty�_lhs
 =�
VTYPE_UINT
) {

2448 
	`ASM_LSR_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2450 
	`ASM_ASR_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2453 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2458 i�(
�
 =�
MP_BINARY_OP_OR
) {

2459 
	`ASM_OR_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2460 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2461 } i�(
�
 =�
MP_BINARY_OP_XOR
) {

2462 
	`ASM_XOR_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2463 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2464 } i�(
�
 =�
MP_BINARY_OP_AND
) {

2465 
	`ASM_AND_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2466 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2467 } i�(
�
 =�
MP_BINARY_OP_ADD
) {

2468 
	`ASM_ADD_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2469 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2470 } i�(
�
 =�
MP_BINARY_OP_SUBTRACT
) {

2471 
	`ASM_SUB_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2472 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2473 } i�(
�
 =�
MP_BINARY_OP_MULTIPLY
) {

2474 
	`ASM_MUL_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2475 
	`em�_po�_push_�g
(
em�
, 
vty�_lhs
, 
REG_ARG_2
);

2476 } i�(
�
 =�
MP_BINARY_OP_LESS


2477 || 
�
 =�
MP_BINARY_OP_MORE


2478 || 
�
 =�
MP_BINARY_OP_EQUAL


2479 || 
�
 =�
MP_BINARY_OP_LESS_EQUAL


2480 || 
�
 =�
MP_BINARY_OP_MORE_EQUAL


2481 || 
�
 =�
MP_BINARY_OP_NOT_EQUAL
) {

2484 i�(
vty�_lhs
 !�
vty�_rhs
) {

2485 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
, 
	`MP_ERROR_TEXT
("comparison of int�nd uint"));

2488 
size_t
 
�_idx
 = 
�
 - 
MP_BINARY_OP_LESS
 + (
vty�_lhs
 =�
VTYPE_UINT
 ? 0 : 6);

2490 
	`�ed_�g_s�g�
(
em�
, 
REG_RET
, 0);

2491 #i�
N_X64


2492 
	`asm_x64_x�_r64_r64
(
em�
->
as
, 
REG_RET
, REG_RET);

2493 
	`asm_x64_cmp_r64_w�h_r64
(
em�
->
as
, 
�g_rhs
, 
REG_ARG_2
);

2494 
by�
 
�s
[6 + 6] = {

2496 
ASM_X64_CC_JB
,

2497 
ASM_X64_CC_JA
,

2498 
ASM_X64_CC_JE
,

2499 
ASM_X64_CC_JBE
,

2500 
ASM_X64_CC_JAE
,

2501 
ASM_X64_CC_JNE
,

2503 
ASM_X64_CC_JL
,

2504 
ASM_X64_CC_JG
,

2505 
ASM_X64_CC_JE
,

2506 
ASM_X64_CC_JLE
,

2507 
ASM_X64_CC_JGE
,

2508 
ASM_X64_CC_JNE
,

2510 
	`asm_x64_�tcc_r8
(
em�
->
as
, 
�s
[
�_idx
], 
REG_RET
);

2511 #�i�
N_X86


2512 
	`asm_x86_x�_r32_r32
(
em�
->
as
, 
REG_RET
, REG_RET);

2513 
	`asm_x86_cmp_r32_w�h_r32
(
em�
->
as
, 
�g_rhs
, 
REG_ARG_2
);

2514 
by�
 
�s
[6 + 6] = {

2516 
ASM_X86_CC_JB
,

2517 
ASM_X86_CC_JA
,

2518 
ASM_X86_CC_JE
,

2519 
ASM_X86_CC_JBE
,

2520 
ASM_X86_CC_JAE
,

2521 
ASM_X86_CC_JNE
,

2523 
ASM_X86_CC_JL
,

2524 
ASM_X86_CC_JG
,

2525 
ASM_X86_CC_JE
,

2526 
ASM_X86_CC_JLE
,

2527 
ASM_X86_CC_JGE
,

2528 
ASM_X86_CC_JNE
,

2530 
	`asm_x86_�tcc_r8
(
em�
->
as
, 
�s
[
�_idx
], 
REG_RET
);

2531 #�i�
N_THUMB


2532 
	`asm_thumb_cmp_�o_�o
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2533 i�(
	`asm_thumb_�low_�mv7m
(
em�
->
as
)) {

2534 
u�t16_t
 
�s
[6 + 6] = {

2536 
ASM_THUMB_OP_ITE_CC
,

2537 
ASM_THUMB_OP_ITE_HI
,

2538 
ASM_THUMB_OP_ITE_EQ
,

2539 
ASM_THUMB_OP_ITE_LS
,

2540 
ASM_THUMB_OP_ITE_CS
,

2541 
ASM_THUMB_OP_ITE_NE
,

2543 
ASM_THUMB_OP_ITE_LT
,

2544 
ASM_THUMB_OP_ITE_GT
,

2545 
ASM_THUMB_OP_ITE_EQ
,

2546 
ASM_THUMB_OP_ITE_LE
,

2547 
ASM_THUMB_OP_ITE_GE
,

2548 
ASM_THUMB_OP_ITE_NE
,

2550 
	`asm_thumb_�16
(
em�
->
as
, 
�s
[
�_idx
]);

2551 
	`asm_thumb_mov_�o_i8
(
em�
->
as
, 
REG_RET
, 1);

2552 
	`asm_thumb_mov_�o_i8
(
em�
->
as
, 
REG_RET
, 0);

2554 
u�t16_t
 
�s
[6 + 6] = {

2556 
ASM_THUMB_CC_CC
,

2557 
ASM_THUMB_CC_HI
,

2558 
ASM_THUMB_CC_EQ
,

2559 
ASM_THUMB_CC_LS
,

2560 
ASM_THUMB_CC_CS
,

2561 
ASM_THUMB_CC_NE
,

2563 
ASM_THUMB_CC_LT
,

2564 
ASM_THUMB_CC_GT
,

2565 
ASM_THUMB_CC_EQ
,

2566 
ASM_THUMB_CC_LE
,

2567 
ASM_THUMB_CC_GE
,

2568 
ASM_THUMB_CC_NE
,

2570 
	`asm_thumb_bcc_�l9
(
em�
->
as
, 
�s
[
�_idx
], 6);

2571 
	`asm_thumb_mov_�o_i8
(
em�
->
as
, 
REG_RET
, 0);

2572 
	`asm_thumb_b_�l12
(
em�
->
as
, 4);

2573 
	`asm_thumb_mov_�o_i8
(
em�
->
as
, 
REG_RET
, 1);

2575 #�i�
N_ARM


2576 
	`asm_�m_cmp_�g_�g
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
);

2577 
u�t
 
ccs
[6 + 6] = {

2579 
ASM_ARM_CC_CC
,

2580 
ASM_ARM_CC_HI
,

2581 
ASM_ARM_CC_EQ
,

2582 
ASM_ARM_CC_LS
,

2583 
ASM_ARM_CC_CS
,

2584 
ASM_ARM_CC_NE
,

2586 
ASM_ARM_CC_LT
,

2587 
ASM_ARM_CC_GT
,

2588 
ASM_ARM_CC_EQ
,

2589 
ASM_ARM_CC_LE
,

2590 
ASM_ARM_CC_GE
,

2591 
ASM_ARM_CC_NE
,

2593 
	`asm_�m_�tcc_�g
(
em�
->
as
, 
REG_RET
, 
ccs
[
�_idx
]);

2594 #�i�
N_XTENSA
 || 
N_XTENSAWIN


2595 
u�t8_t
 
ccs
[6 + 6] = {

2597 
ASM_XTENSA_CC_LTU
,

2598 0x80 | 
ASM_XTENSA_CC_LTU
,

2599 
ASM_XTENSA_CC_EQ
,

2600 0x80 | 
ASM_XTENSA_CC_GEU
,

2601 
ASM_XTENSA_CC_GEU
,

2602 
ASM_XTENSA_CC_NE
,

2604 
ASM_XTENSA_CC_LT
,

2605 0x80 | 
ASM_XTENSA_CC_LT
,

2606 
ASM_XTENSA_CC_EQ
,

2607 0x80 | 
ASM_XTENSA_CC_GE
,

2608 
ASM_XTENSA_CC_GE
,

2609 
ASM_XTENSA_CC_NE
,

2611 
u�t8_t
 
cc
 = 
ccs
[
�_idx
];

2612 i�((
cc
 & 0x80) == 0) {

2613 
	`asm_x�n�_�tcc_�g_�g_�g
(
em�
->
as
, 
cc
, 
REG_RET
, 
REG_ARG_2
, 
�g_rhs
);

2615 
	`asm_x�n�_�tcc_�g_�g_�g
(
em�
->
as
, 
cc
 & ~0x80, 
REG_RET
, 
�g_rhs
, 
REG_ARG_2
);

2617 #�i�
N_RV32


2618 ()
�_idx
;

2619 
�
) {

2620 
MP_BINARY_OP_LESS
:

2621 
	`asm_rv32_m�a_com�ris�_�
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
, 
REG_RET
, 
vty�_lhs
 =�
VTYPE_UINT
);

2624 
MP_BINARY_OP_MORE
:

2625 
	`asm_rv32_m�a_com�ris�_�
(
em�
->
as
, 
�g_rhs
, 
REG_ARG_2
, 
REG_RET
, 
vty�_lhs
 =�
VTYPE_UINT
);

2628 
MP_BINARY_OP_EQUAL
:

2629 
	`asm_rv32_m�a_com�ris�_eq
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
, 
REG_RET
);

2632 
MP_BINARY_OP_LESS_EQUAL
:

2633 
	`asm_rv32_m�a_com�ris�_�
(
em�
->
as
, 
REG_ARG_2
, 
�g_rhs
, 
REG_RET
, 
vty�_lhs
 =�
VTYPE_UINT
);

2636 
MP_BINARY_OP_MORE_EQUAL
:

2637 
	`asm_rv32_m�a_com�ris�_�
(
em�
->
as
, 
�g_rhs
, 
REG_ARG_2
, 
REG_RET
, 
vty�_lhs
 =�
VTYPE_UINT
);

2640 
MP_BINARY_OP_NOT_EQUAL
:

2641 
	`asm_rv32_m�a_com�ris�_�
(
em�
->
as
, 
�g_rhs
, 
REG_ARG_2
, 
REG_RET
);

2647 #�i�
N_DEBUG


2648 
	`asm_debug_�tcc_�g_�g_�g
(
em�
->
as
, 
�_idx
, 
REG_RET
, 
REG_ARG_2
, 
�g_rhs
);

2650 #�r� 
n�
 
im�em��d


2652 
	`em�_po�_push_�g
(
em�
, 
VTYPE_BOOL
, 
REG_RET
);

2655 
	`adju�_�ack
(
em�
, 1);

2656 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2657 
	`MP_ERROR_TEXT
("b��y o�%q�� im�em��d"), 
mp_b��y_�_m�hod_�me
[
�
]);

2659 } i�(
vty�_lhs
 =�
VTYPE_PYOBJ
 && 
vty�_rhs
 == VTYPE_PYOBJ) {

2660 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_rhs
, 
REG_ARG_3
, &
vty�_lhs
, 
REG_ARG_2
);

2661 
bo�
 
�v�t
 = 
�l�
;

2662 i�(
�
 =�
MP_BINARY_OP_NOT_IN
) {

2663 
�v�t
 = 
�ue
;

2664 
�
 = 
MP_BINARY_OP_IN
;

2665 } i�(
�
 =�
MP_BINARY_OP_IS_NOT
) {

2666 
�v�t
 = 
�ue
;

2667 
�
 = 
MP_BINARY_OP_IS
;

2669 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_BINARY_OP
, 
�
, 
REG_ARG_1
);

2670 i�(
�v�t
) {

2671 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_2
, 
REG_RET
);

2672 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_UNARY_OP
, 
MP_UNARY_OP_NOT
, 
REG_ARG_1
);

2674 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2676 
	`adju�_�ack
(
em�
, -1);

2677 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2678 
	`MP_ERROR_TEXT
("can't do binary op between '%q'�nd '%q'"),

2679 
	`vty�_to_q�r
(
vty�_lhs
), vty�_to_q�r(
vty�_rhs
));

2681 
	}
}

2683 #i�
MICROPY_PY_BUILTINS_SLICE


2684 
em�_�tive_bu�d_�i�
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
);

2687 
	$em�_�tive_bu�d
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
, 
k�d
) {

2690 
	`MP_STATIC_ASSERT
(
MP_F_BUILD_TUPLE
 + 
MP_EMIT_BUILD_TUPLE
 == MP_F_BUILD_TUPLE);

2691 
	`MP_STATIC_ASSERT
(
MP_F_BUILD_TUPLE
 + 
MP_EMIT_BUILD_LIST
 =�
MP_F_BUILD_LIST
);

2692 
	`MP_STATIC_ASSERT
(
MP_F_BUILD_TUPLE
 + 
MP_EMIT_BUILD_MAP
 =�
MP_F_BUILD_MAP
);

2693 
	`MP_STATIC_ASSERT
(
MP_F_BUILD_TUPLE
 + 
MP_EMIT_BUILD_SET
 =�
MP_F_BUILD_SET
);

2694 #i�
MICROPY_PY_BUILTINS_SLICE


2695 i�(
k�d
 =�
MP_EMIT_BUILD_SLICE
) {

2696 
	`em�_�tive_bu�d_�i�
(
em�
, 
n_�gs
);

2700 
	`em�_�tive_�e
(
em�
);

2701 i�(
k�d
 =�
MP_EMIT_BUILD_TUPLE
 || k�d =�
MP_EMIT_BUILD_LIST
 || k�d =�
MP_EMIT_BUILD_SET
) {

2702 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_2
, 
n_�gs
);

2704 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_BUILD_TUPLE
 + 
k�d
, 
n_�gs
, 
REG_ARG_1
);

2705 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2706 
	}
}

2708 
	$em�_�tive_��e_m�
(
em�_t
 *
em�
) {

2709 
vty�_k�d_t
 
vty�_key
, 
vty�_v�ue
, 
vty�_m�
;

2710 
	`em�_�e_p�_�g_�g_�g
(
em�
, &
vty�_key
, 
REG_ARG_2
, &
vty�_v�ue
, 
REG_ARG_3
, &
vty�_m�
, 
REG_ARG_1
);

2711 
	`as��
(
vty�_key
 =�
VTYPE_PYOBJ
);

2712 
	`as��
(
vty�_v�ue
 =�
VTYPE_PYOBJ
);

2713 
	`as��
(
vty�_m�
 =�
VTYPE_PYOBJ
);

2714 
	`em�_��
(
em�
, 
MP_F_STORE_MAP
);

2715 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2716 
	}
}

2718 #i�
MICROPY_PY_BUILTINS_SLICE


2719 
	$em�_�tive_bu�d_�i�
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
) {

2720 
	`DEBUG_��tf
("bu�d_�i� %d\n", 
n_�gs
);

2721 i�(
n_�gs
 == 2) {

2722 
vty�_k�d_t
 
vty�_��t
, 
vty�_��
;

2723 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_��
, 
REG_ARG_2
, &
vty�_��t
, 
REG_ARG_1
);

2724 
	`as��
(
vty�_��t
 =�
VTYPE_PYOBJ
);

2725 
	`as��
(
vty�_��
 =�
VTYPE_PYOBJ
);

2726 
	`em�_�tive_mov_�g_cڡ
(
em�
, 
REG_ARG_3
, 
MP_F_CONST_NONE_OBJ
);

2728 
	`as��
(
n_�gs
 == 3);

2729 
vty�_k�d_t
 
vty�_��t
, 
vty�_��
, 
vty�_��
;

2730 
	`em�_�e_p�_�g_�g_�g
(
em�
, &
vty�_��
, 
REG_ARG_3
, &
vty�_��
, 
REG_ARG_2
, &
vty�_��t
, 
REG_ARG_1
);

2731 
	`as��
(
vty�_��t
 =�
VTYPE_PYOBJ
);

2732 
	`as��
(
vty�_��
 =�
VTYPE_PYOBJ
);

2733 
	`as��
(
vty�_��
 =�
VTYPE_PYOBJ
);

2735 
	`em�_��
(
em�
, 
MP_F_NEW_SLICE
);

2736 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2737 
	}
}

2740 
	$em�_�tive_��e_comp
(
em�_t
 *
em�
, 
sc�e_k�d_t
 
k�d
, 
mp_u�t_t
 
c���i�_�dex
) {

2741 
mp_fun_k�d_t
 
f
;

2742 i�(
k�d
 =�
SCOPE_LIST_COMP
) {

2743 
vty�_k�d_t
 
vty�_�em
;

2744 
	`em�_�e_p�_�g
(
em�
, &
vty�_�em
, 
REG_ARG_2
);

2745 
	`as��
(
vty�_�em
 =�
VTYPE_PYOBJ
);

2746 
f
 = 
MP_F_LIST_APPEND
;

2747 #i�
MICROPY_PY_BUILTINS_SET


2748 } i�(
k�d
 =�
SCOPE_SET_COMP
) {

2749 
vty�_k�d_t
 
vty�_�em
;

2750 
	`em�_�e_p�_�g
(
em�
, &
vty�_�em
, 
REG_ARG_2
);

2751 
	`as��
(
vty�_�em
 =�
VTYPE_PYOBJ
);

2752 
f
 = 
MP_F_STORE_SET
;

2756 
vty�_k�d_t
 
vty�_key
, 
vty�_v�ue
;

2757 
	`em�_�e_p�_�g_�g
(
em�
, &
vty�_key
, 
REG_ARG_2
, &
vty�_v�ue
, 
REG_ARG_3
);

2758 
	`as��
(
vty�_key
 =�
VTYPE_PYOBJ
);

2759 
	`as��
(
vty�_v�ue
 =�
VTYPE_PYOBJ
);

2760 
f
 = 
MP_F_STORE_MAP
;

2762 
vty�_k�d_t
 
vty�_c���i�
;

2763 
	`em�_ac�ss_�ack
(
em�
, 
c���i�_�dex
, &
vty�_c���i�
, 
REG_ARG_1
);

2764 
	`as��
(
vty�_c���i�
 =�
VTYPE_PYOBJ
);

2765 
	`em�_��
(
em�
, 
f
);

2766 
	`em�_po�
(
em�
);

2767 
	}
}

2769 
	$em�_�tive_u�ack_�qu��
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
) {

2770 
	`DEBUG_��tf
("u�ack_�qu�� %d\n", 
n_�gs
);

2771 
vty�_k�d_t
 
vty�_ba�
;

2772 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

2773 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

2774 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_3
, 
n_�gs
);

2775 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_UNPACK_SEQUENCE
, 
n_�gs
, 
REG_ARG_2
);

2776 
	}
}

2778 
	$em�_�tive_u�ack_ex
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_��
, mp_u�t_�
n_right
) {

2779 
	`DEBUG_��tf
("u�ack_ex %d %d\n", 
n_��
, 
n_right
);

2780 
vty�_k�d_t
 
vty�_ba�
;

2781 
	`em�_�e_p�_�g
(
em�
, &
vty�_ba�
, 
REG_ARG_1
);

2782 
	`as��
(
vty�_ba�
 =�
VTYPE_PYOBJ
);

2783 
	`em�_g�_�ack_po��r_to_�g_f�_push
(
em�
, 
REG_ARG_3
, 
n_��
 + 
n_right
 + 1);

2784 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_UNPACK_EX
, 
n_��
 | (
n_right
 << 8), 
REG_ARG_2
);

2785 
	}
}

2787 
	$em�_�tive_make_fun�i�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
) {

2789 
	`em�_�tive_�e
(
em�
);

2790 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_2
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

2791 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_2
, REG_ARG_2, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

2792 i�(
n_pos_de�u�s
 =�0 && 
n_kw_de�u�s
 == 0) {

2793 
	`�ed_�g_�l
(
em�
);

2794 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_3
, 0);

2796 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 2);

2797 
	`�ed_�g_�l
(
em�
);

2799 
	`em�_l�d_�g_w�h_ch�d
(
em�
, 
REG_ARG_1
, 
sc�e
->
�w_code
);

2800 
	`ASM_CALL_IND
(
em�
->
as
, 
MP_F_MAKE_FUNCTION_FROM_PROTO_FUN
);

2801 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2802 
	}
}

2804 
	$em�_�tive_make_�osu�
(
em�_t
 *
em�
, 
sc�e_t
 *
sc�e
, 
mp_u�t_t
 
n_�o�d_ov�
, mp_u�t_�
n_pos_de�u�s
, mp_u�t_�
n_kw_de�u�s
) {

2806 
	`em�_�tive_�e
(
em�
);

2807 
	`em�_�tive_mov_�g_��e
(
em�
, 
REG_ARG_2
, 
	`LOCAL_IDX_FUN_OBJ
(emit));

2808 
	`ASM_LOAD_REG_REG_OFFSET
(
em�
->
as
, 
REG_ARG_2
, REG_ARG_2, 
OFFSETOF_OBJ_FUN_BC_CONTEXT
);

2809 i�(
n_pos_de�u�s
 =�0 && 
n_kw_de�u�s
 == 0) {

2810 
	`�ed_�g_�l
(
em�
);

2811 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_3
, 0);

2813 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 2 + 
n_�o�d_ov�
);

2814 
	`adju�_�ack
(
em�
, 2 + 
n_�o�d_ov�
);

2815 
	`�ed_�g_�l
(
em�
);

2817 
	`em�_l�d_�g_w�h_ch�d
(
em�
, 
REG_ARG_1
, 
sc�e
->
�w_code
);

2818 
	`ASM_CALL_IND
(
em�
->
as
, 
MP_F_MAKE_FUNCTION_FROM_PROTO_FUN
);

2821 #i�
REG_ARG_1
 !�
REG_RET


2822 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_ARG_1
, 
REG_RET
);

2824 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_2
, 
n_�o�d_ov�
);

2825 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 
n_�o�d_ov�
);

2826 i�(
n_pos_de�u�s
 !�0 || 
n_kw_de�u�s
 != 0) {

2827 
	`adju�_�ack
(
em�
, -2);

2829 
	`ASM_CALL_IND
(
em�
->
as
, 
MP_F_NEW_CLOSURE
);

2830 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2831 
	}
}

2833 
	$em�_�tive_��_fun�i�
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
) {

2834 
	`DEBUG_��tf
("��_fun�i��_pos=" 
UINT_FMT
 ",�_kw=" UINT_FMT ", s�r_�ags=" UINT_FMT ")\n", 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

2839 
	`em�_�tive_�e
(
em�
);

2840 
vty�_k�d_t
 
vty�_fun
 = 
	`�ek_vty�
(
em�
, 
n_pos�iڮ
 + 2 * 
n_keyw�d
);

2841 i�(
vty�_fun
 =�
VTYPE_BUILTIN_CAST
) {

2843 
	`as��
(
n_pos�iڮ
 =�1 && 
n_keyw�d
 == 0);

2844 
	`as��
(!
��_�ags
);

2845 
	`DEBUG_��tf
(" ca���%d\n", 
vty�_fun
);

2846 
vty�_k�d_t
 
vty�_��
 = 
	`�ek_�ack
(
em�
, 1)->
d�a
.
u_imm
;

2847 
	`�ek_vty�
(
em�
, 0)) {

2848 
VTYPE_PYOBJ
: {

2849 
vty�_k�d_t
 
vty�
;

2850 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_1
);

2851 
	`em�_�e_p�_dis�rd
(
em�
);

2852 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_OBJ_TO_NATIVE
, 
vty�_��
, 
REG_ARG_2
);

2853 
	`em�_po�_push_�g
(
em�
, 
vty�_��
, 
REG_RET
);

2856 
VTYPE_BOOL
:

2857 
VTYPE_INT
:

2858 
VTYPE_UINT
:

2859 
VTYPE_PTR
:

2860 
VTYPE_PTR8
:

2861 
VTYPE_PTR16
:

2862 
VTYPE_PTR32
:

2863 
VTYPE_PTR_NONE
:

2864 
	`em�_f�d_�ack_t�
(
em�
, 
REG_ARG_1
);

2865 
	`em�_po�_t�_�t_vty�
(
em�
, 
vty�_��
);

2869 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("casting"));

2872 
	`as��
(
vty�_fun
 =�
VTYPE_PYOBJ
);

2873 i�(
��_�ags
) {

2874 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 
n_pos�iڮ
 + 2 * 
n_keyw�d
 + 2);

2875 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW_VAR
, 0, 
REG_ARG_1
, 
n_pos�iڮ
 | (
n_keyw�d
 << 8), 
REG_ARG_2
);

2876 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2878 i�(
n_pos�iڮ
 !�0 || 
n_keyw�d
 != 0) {

2879 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 
n_pos�iڮ
 + 2 * 
n_keyw�d
);

2881 
	`em�_�e_p�_�g
(
em�
, &
vty�_fun
, 
REG_ARG_1
);

2882 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_NATIVE_CALL_FUNCTION_N_KW
, 
n_pos�iڮ
 | (
n_keyw�d
 << 8), 
REG_ARG_2
);

2883 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2886 
	}
}

2888 
	$em�_�tive_��_m�hod
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_pos�iڮ
, mp_u�t_�
n_keyw�d
, mp_u�t_�
��_�ags
) {

2889 
	`DEBUG_��tf
("��_m�hod(%d, %d, %d)\n", 
n_pos�iڮ
, 
n_keyw�d
, 
��_�ags
);

2890 i�(
��_�ags
) {

2891 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 
n_pos�iڮ
 + 2 * 
n_keyw�d
 + 3);

2892 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW_VAR
, 1, 
REG_ARG_1
, 
n_pos�iڮ
 | (
n_keyw�d
 << 8), 
REG_ARG_2
);

2893 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2895 
	`em�_�tive_�e
(
em�
);

2896 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 2 + 
n_pos�iڮ
 + 2 * 
n_keyw�d
);

2897 
	`em�_��_w�h_2_imm_�gs
(
em�
, 
MP_F_CALL_METHOD_N_KW
, 
n_pos�iڮ
, 
REG_ARG_1
, 
n_keyw�d
, 
REG_ARG_2
);

2898 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_RET
);

2900 
	}
}

2902 
	$em�_�tive_�tu�_v�ue
(
em�_t
 *
em�
) {

2903 
	`DEBUG_��tf
("return_value\n");

2905 i�(
em�
->
sc�e
->
sc�e_�ags
 & 
MP_SCOPE_FLAG_GENERATOR
) {

2907 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_TEMP0
, 1);

2908 
	`em�_�tive_mov_��e_�g
(
em�
, 
OFFSETOF_CODE_STATE_SP
, 
REG_TEMP0
);

2911 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_TEMP0
, 
MP_VM_RETURN_NORMAL
);

2912 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_RET_VAL
�m�), 
REG_TEMP0
);

2915 
	`em�_�tive_unw�d_jump
(
em�
,�m�->
ex�_�b�
,�m�->
exc_�ack_size
);

2919 i�(
em�
->
do_v��_ty�s
) {

2920 
vty�_k�d_t
 
�tu�_vty�
 = 
em�
->
sc�e
->
sc�e_�ags
 >> 
MP_SCOPE_FLAG_VIPERRET_POS
;

2921 i�(
	`�ek_vty�
(
em�
, 0�=�
VTYPE_PTR_NONE
) {

2922 
	`em�_�e_p�_dis�rd
(
em�
);

2923 i�(
�tu�_vty�
 =�
VTYPE_PYOBJ
) {

2924 
	`em�_�tive_mov_�g_cڡ
(
em�
, 
REG_PARENT_RET
, 
MP_F_CONST_NONE_OBJ
);

2926 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_1
, 0);

2929 
vty�_k�d_t
 
vty�
;

2930 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
�tu�_vty�
 =�
VTYPE_PYOBJ
 ? 
REG_PARENT_RET
 : 
REG_ARG_1
);

2931 i�(
vty�
 !�
�tu�_vty�
) {

2932 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
,

2933 
	`MP_ERROR_TEXT
("return�xpected '%q' but got '%q'"),

2934 
	`vty�_to_q�r
(
�tu�_vty�
), vty�_to_q�r(
vty�
));

2937 i�(
�tu�_vty�
 !�
VTYPE_PYOBJ
) {

2938 
	`em�_��_w�h_imm_�g
(
em�
, 
MP_F_CONVERT_NATIVE_TO_OBJ
, 
�tu�_vty�
, 
REG_ARG_2
);

2939 #i�
REG_RET
 !�
REG_PARENT_RET


2940 
	`ASM_MOV_REG_REG
(
em�
->
as
, 
REG_PARENT_RET
, 
REG_RET
);

2944 
vty�_k�d_t
 
vty�
;

2945 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_PARENT_RET
);

2946 
	`as��
(
vty�
 =�
VTYPE_PYOBJ
);

2948 i�(
	`NEED_GLOBAL_EXC_HANDLER
(
em�
)) {

2950 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_RET_VAL
�m�), 
REG_PARENT_RET
);

2952 
	`em�_�tive_unw�d_jump
(
em�
,�m�->
ex�_�b�
,�m�->
exc_�ack_size
);

2953 
	}
}

2955 
	$em�_�tive_�i�_v��gs
(
em�_t
 *
em�
, 
mp_u�t_t
 
n_�gs
) {

2956 
	`DEBUG_��tf
("�i�_v��gs(%d)\n", 
n_�gs
);

2957 ()
n_�gs
;

2958 
	`as��
(
n_�gs
 == 1);

2959 
vty�_k�d_t
 
vty�_exc
;

2960 
	`em�_�e_p�_�g
(
em�
, &
vty�_exc
, 
REG_ARG_1
);

2961 i�(
vty�_exc
 !�
VTYPE_PYOBJ
) {

2962 
	`EMIT_NATIVE_VIPER_TYPE_ERROR
(
em�
, 
	`MP_ERROR_TEXT
("must�aise�n object"));

2965 
	`em�_��
(
em�
, 
MP_F_NATIVE_RAISE
);

2966 
	`mp_asm_ba�_su��ss_code
(&
em�
->
as
->
ba�
);

2967 
	}
}

2969 
	$em�_�tive_y�ld
(
em�_t
 *
em�
, 
k�d
) {

2972 
	`DEBUG_��tf
("y�ld(%d)\n", 
k�d
);

2974 i�(
em�
->
do_v��_ty�s
) {

2975 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("native yield"));

2977 
em�
->
sc�e
->
sc�e_�ags
 |�
MP_SCOPE_FLAG_GENERATOR
;

2979 
	`�ed_�ack_���d
(
em�
);

2981 i�(
k�d
 =�
MP_EMIT_YIELD_FROM
) {

2988 
	`em�_�tive_jump
(
em�
, *em�->
�b�_��
 + 2);

2991 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
 + 1);

2995 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_TEMP0
, 1);

2996 
	`em�_�tive_mov_��e_�g
(
em�
, 
OFFSETOF_CODE_STATE_SP
, 
REG_TEMP0
);

2999 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_TEMP0
, 
MP_VM_RETURN_YIELD
);

3000 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_RET_VAL
�m�), 
REG_TEMP0
);

3003 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_TEMP0
, *em�->
�b�_��
);

3004 
	`em�_�tive_mov_��e_�g
(
em�
, 
	`LOCAL_IDX_GEN_PC
�m�), 
REG_TEMP0
);

3007 
	`ASM_JUMP
(
em�
->
as
,�m�->
ex�_�b�
);

3010 
	`mp_asm_ba�_�b�_assign
(&
em�
->
as
->
ba�
, *em�->
�b�_��
);

3013 i�(
em�
->
exc_�ack_size
 > 0) {

3015 
exc_�ack_��y_t
 *
e
 = &
em�
->
exc_�ack
[em�->
exc_�ack_size
 - 1];

3016 ; 
e
 >�
em�
->
exc_�ack
; --e) {

3017 i�(
e
->
is_a�ive
) {

3019 
	`ASM_MOV_REG_PCREL
(
em�
->
as
, 
REG_RET
, 
e
->
�b�
);

3020 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_EXC_HANDLER_PC
�m�), 
REG_RET
);

3026 
	`em�_�tive_adju�_�ack_size
(
em�
, 1);

3028 i�(
k�d
 =�
MP_EMIT_YIELD_VALUE
) {

3030 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_1
, 
	`LOCAL_IDX_THROW_VAL
(emit));

3031 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_2
, (
mp_u�t_t
)
MP_OBJ_NULL
);

3032 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_THROW_VAL
�m�), 
REG_ARG_2
);

3033 
	`em�_��
(
em�
, 
MP_F_NATIVE_RAISE
);

3036 
	`em�_�tive_�b�_assign
(
em�
, *em�->
�b�_��
 + 2);

3039 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_ARG_3
, 
	`LOCAL_IDX_THROW_VAL
(emit));

3040 
	`ASM_MOV_REG_IMM
(
em�
->
as
, 
REG_ARG_2
, (
mp_u�t_t
)
MP_OBJ_NULL
);

3041 
	`ASM_MOV_LOCAL_REG
(
em�
->
as
, 
	`LOCAL_IDX_THROW_VAL
�m�), 
REG_ARG_2
);

3042 
vty�_k�d_t
 
vty�
;

3043 
	`em�_�e_p�_�g
(
em�
, &
vty�
, 
REG_ARG_2
);

3044 
	`em�_ac�ss_�ack
(
em�
, 1, &
vty�
, 
REG_ARG_1
);

3045 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_ARG_3
);

3046 
	`em�_g�_�ack_po��r_to_�g_f�_p�
(
em�
, 
REG_ARG_3
, 1);

3047 
	`em�_��
(
em�
, 
MP_F_NATIVE_YIELD_FROM
);

3050 
	`ASM_JUMP_IF_REG_NONZERO
(
em�
->
as
, 
REG_RET
, *em�->
�b�_��
 + 1, 
�ue
);

3053 
	`em�_�tive_adju�_�ack_size
(
em�
, 1);

3054 
	`em�_f�d_�ack_t�
(
em�
, 
REG_ARG_1
);

3056 
	}
}

3058 
	$em�_�tive_��t_ex��_h�d�r
(
em�_t
 *
em�
) {

3060 
	`em�_�tive_�ave_exc_�ack
(
em�
, 
�ue
);

3063 
	`ASM_MOV_REG_LOCAL
(
em�
->
as
, 
REG_TEMP0
, 
	`LOCAL_IDX_EXC_VAL
(emit));

3064 
	`em�_po�_push_�g
(
em�
, 
VTYPE_PYOBJ
, 
REG_TEMP0
);

3065 
	}
}

3067 
	$em�_�tive_�d_ex��_h�d�r
(
em�_t
 *
em�
) {

3068 
	}
}

3070 cڡ 
em�_m�hod_�b�_t
 
EXPORT_FUN
(
m�hod_�b�
) = {

3071 #i�
MICROPY_DYNAMIC_COMPILER


3072 
EXPORT_FUN
(
�w
),

3073 
EXPORT_FUN
(
�
),

3076 
em�_�tive_��t_�ss
,

3077 
em�_�tive_�d_�ss
,

3078 
em�_�tive_adju�_�ack_size
,

3079 
em�_�tive_�t_sour�_l�e
,

3082 
em�_�tive_l�d_lo�l
,

3083 
em�_�tive_l�d_glob�
,

3086 
em�_�tive_��e_lo�l
,

3087 
em�_�tive_��e_glob�
,

3090 
em�_�tive_d��e_lo�l
,

3091 
em�_�tive_d��e_glob�
,

3094 
em�_�tive_�b�_assign
,

3095 
em�_�tive_imp�t
,

3096 
em�_�tive_l�d_cڡ_tok
,

3097 
em�_�tive_l�d_cڡ_sm�l_�t
,

3098 
em�_�tive_l�d_cڡ_�r
,

3099 
em�_�tive_l�d_cڡ_obj
,

3100 
em�_�tive_l�d_nu�
,

3101 
em�_�tive_l�d_m�hod
,

3102 
em�_�tive_l�d_bu�d_�ass
,

3103 
em�_�tive_subs�
,

3104 
em�_�tive_��
,

3105 
em�_�tive_dup_t�
,

3106 
em�_�tive_dup_t�_two
,

3107 
em�_�tive_p�_t�
,

3108 
em�_�tive_r�_two
,

3109 
em�_�tive_r�_th�e
,

3110 
em�_�tive_jump
,

3111 
em�_�tive_p�_jump_if
,

3112 
em�_�tive_jump_if_�_p�
,

3113 
em�_�tive_unw�d_jump
,

3114 
em�_�tive_�tup_block
,

3115 
em�_�tive_w�h_��nup
,

3116 #i�
MICROPY_PY_ASYNC_AWAIT


3117 
em�_�tive_async_w�h_�tup_f��ly
,

3119 
em�_�tive_�d_f��ly
,

3120 
em�_�tive_g�_��
,

3121 
em�_�tive_f�_��
,

3122 
em�_�tive_f�_��_�d
,

3123 
em�_�tive_p�_ex��_jump
,

3124 
em�_�tive_u�ry_�
,

3125 
em�_�tive_b��y_�
,

3126 
em�_�tive_bu�d
,

3127 
em�_�tive_��e_m�
,

3128 
em�_�tive_��e_comp
,

3129 
em�_�tive_u�ack_�qu��
,

3130 
em�_�tive_u�ack_ex
,

3131 
em�_�tive_make_fun�i�
,

3132 
em�_�tive_make_�osu�
,

3133 
em�_�tive_��_fun�i�
,

3134 
em�_�tive_��_m�hod
,

3135 
em�_�tive_�tu�_v�ue
,

3136 
em�_�tive_�i�_v��gs
,

3137 
em�_�tive_y�ld
,

3139 
em�_�tive_��t_ex��_h�d�r
,

3140 
em�_�tive_�d_ex��_h�d�r
,

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitndebug.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_NATIVE_DEBUG


7 
	~"py/asmba�.h
"

8 
	~"py/�tiveglue.h
"

10 
	#asm_debug_��tf
(
as
, 
fmt
, ...) \

12 i�(
as
->
ba�
.
�ss
 =�
MP_ASM_PASS_EMIT
) { \

13 i�(
fmt
[0] != 'E') { \

14 
	`mp_��tf
(
MICROPY_EMIT_NATIVE_DEBUG_PRINTER
, " "); \

16 i�(
as
->
ba�
.
su��ss
) { \

17 
	`mp_��tf
(
MICROPY_EMIT_NATIVE_DEBUG_PRINTER
, "dead_code "); \

19 
	`mp_��tf
(
MICROPY_EMIT_NATIVE_DEBUG_PRINTER
, 
fmt
, 
__VA_ARGS__
); \

21 } 0)

	)

24 
	mASM_DEBUG_REG_R00
,

25 
	mASM_DEBUG_REG_R01
,

26 
	mASM_DEBUG_REG_R02
,

27 
	mASM_DEBUG_REG_R03
,

28 
	mASM_DEBUG_REG_R04
,

29 
	mASM_DEBUG_REG_R05
,

30 
	mASM_DEBUG_REG_R06
,

31 
	mASM_DEBUG_REG_R07
,

32 
	mASM_DEBUG_REG_R08
,

33 
	mASM_DEBUG_REG_R09
,

34 
	mASM_DEBUG_REG_R10
,

35 
	mASM_DEBUG_REG_R11
,

38 
	s_asm_debug_t
 {

39 
mp_asm_ba�_t
 
	mba�
;

40 } 
	tasm_debug_t
;

42 cڡ *cڡ 
	g�g_�me_�b�
[] = {

57 cڡ *cڡ 
	gfun_�me_�b�
[
MP_F_NUMBER_OF
] = {

58 [
MP_F_CONVERT_OBJ_TO_NATIVE
] = "convert_obj_to_native",

59 [
MP_F_CONVERT_NATIVE_TO_OBJ
] = "convert_native_to_obj",

60 [
MP_F_NATIVE_SWAP_GLOBALS
] = "native_swap_globals",

61 [
MP_F_LOAD_NAME
] = "load_name",

62 [
MP_F_LOAD_GLOBAL
] = "load_global",

63 [
MP_F_LOAD_BUILD_CLASS
] = "load_build_class",

64 [
MP_F_LOAD_ATTR
] = "load_attr",

65 [
MP_F_LOAD_METHOD
] = "load_method",

66 [
MP_F_LOAD_SUPER_METHOD
] = "load_super_method",

67 [
MP_F_STORE_NAME
] = "store_name",

68 [
MP_F_STORE_GLOBAL
] = "store_global",

69 [
MP_F_STORE_ATTR
] = "store_attr",

70 [
MP_F_OBJ_SUBSCR
] = "obj_subscr",

71 [
MP_F_OBJ_IS_TRUE
] = "obj_is_true",

72 [
MP_F_UNARY_OP
] = "unary_op",

73 [
MP_F_BINARY_OP
] = "binary_op",

74 [
MP_F_BUILD_TUPLE
] = "build_tuple",

75 [
MP_F_BUILD_LIST
] = "build_list",

76 [
MP_F_BUILD_MAP
] = "build_map",

77 [
MP_F_BUILD_SET
] = "build_set",

78 [
MP_F_STORE_SET
] = "store_set",

79 [
MP_F_LIST_APPEND
] = "list_append",

80 [
MP_F_STORE_MAP
] = "store_map",

81 [
MP_F_MAKE_FUNCTION_FROM_PROTO_FUN
] = "make_function_from_proto_fun",

82 [
MP_F_NATIVE_CALL_FUNCTION_N_KW
] = "native_call_function_n_kw",

83 [
MP_F_CALL_METHOD_N_KW
] = "call_method_n_kw",

84 [
MP_F_CALL_METHOD_N_KW_VAR
] = "call_method_n_kw_var",

85 [
MP_F_NATIVE_GETITER
] = "native_getiter",

86 [
MP_F_NATIVE_ITERNEXT
] = "native_iternext",

87 [
MP_F_NLR_PUSH
] = "nlr_push",

88 [
MP_F_NLR_POP
] = "nlr_pop",

89 [
MP_F_NATIVE_RAISE
] = "native_raise",

90 [
MP_F_IMPORT_NAME
] = "import_name",

91 [
MP_F_IMPORT_FROM
] = "import_from",

92 [
MP_F_IMPORT_ALL
] = "import_all",

93 [
MP_F_NEW_SLICE
] = "new_slice",

94 [
MP_F_UNPACK_SEQUENCE
] = "unpack_sequence",

95 [
MP_F_UNPACK_EX
] = "unpack_ex",

96 [
MP_F_DELETE_NAME
] = "delete_name",

97 [
MP_F_DELETE_GLOBAL
] = "delete_global",

98 [
MP_F_NEW_CLOSURE
] = "new_closure",

99 [
MP_F_ARG_CHECK_NUM_SIG
] = "arg_check_num_sig",

100 [
MP_F_SETUP_CODE_STATE
] = "setup_code_state",

101 [
MP_F_SMALL_INT_FLOOR_DIVIDE
] = "small_int_floor_divide",

102 [
MP_F_SMALL_INT_MODULO
] = "small_int_modulo",

103 [
MP_F_NATIVE_YIELD_FROM
] = "native_yield_from",

104 [
MP_F_SETJMP
] = "setjmp",

107 
	$asm_debug_�d_�ss
(
asm_debug_t
 *
as
) {

108 ()
as
;

109 
	}
}

111 
	$asm_debug_��y
(
asm_debug_t
 *
as
, 
num_lo�ls
) {

112 
	`asm_debug_��tf
(
as
, "ENTRY�um_lo�ls=%d)\n", 
num_lo�ls
);

113 
	}
}

115 
	$asm_debug_ex�
(
asm_debug_t
 *
as
) {

116 
	`asm_debug_��tf
(
as
, "EXIT(%u)\n", 0);

117 
	}
}

119 
	$asm_debug_fun
(
asm_debug_t
 *
as
, cڡ *
�
, 
fun_idx
) {

120 
	`asm_debug_��tf
(
as
, "%s(%s)\n", 
�
, 
fun_�me_�b�
[
fun_idx
]);

121 
	}
}

123 
	$asm_debug_�g
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
) {

124 
	`asm_debug_��tf
(
as
, "%s(%s)\n", 
�
, 
�g_�me_�b�
[
�g
]);

125 
	}
}

127 
	$asm_debug_�b�
(
asm_debug_t
 *
as
, cڡ *
�
, 
�b�
) {

128 
	`asm_debug_��tf
(
as
, "%s�ab�_%u)\n", 
�
, 
�b�
);

129 
	}
}

131 
	$asm_debug_�g_imm
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
, 
imm
) {

132 
	`asm_debug_��tf
(
as
, "%s(%s, %d=0x%x)\n", 
�
, 
�g_�me_�b�
[
�g
], 
imm
, imm);

133 
	}
}

135 #i�!
MICROPY_PERSISTENT_CODE_SAVE


136 
	$asm_debug_�g_q�r
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
, 
q�
) {

137 
	`asm_debug_��tf
(
as
, "%s(%s, %s)\n", 
�
, 
�g_�me_�b�
[
�g
], 
	`q�r_�r
(
q�
));

138 
	}
}

141 
	$asm_debug_�g_�g
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g1
, 
�g2
) {

142 
	`asm_debug_��tf
(
as
, "%s(%s, %s)\n", 
�
, 
�g_�me_�b�
[
�g1
],�eg_�me_�b�[
�g2
]);

143 
	}
}

145 
	$asm_debug_�g_lo�l
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
, 
lo�l
) {

146 
	`asm_debug_��tf
(
as
, "%s(%s,�o�l_%u)\n", 
�
, 
�g_�me_�b�
[
�g
], 
lo�l
);

147 
	}
}

149 
	$asm_debug_�g_�b�
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
, 
�b�
) {

150 
	`asm_debug_��tf
(
as
, "%s(%s,�ab�_%u)\n", 
�
, 
�g_�me_�b�
[
�g
], 
�b�
);

151 
	}
}

153 
	$asm_debug_lo�l_�g
(
asm_debug_t
 *
as
, cڡ *
�
, 
lo�l
, 
�g
) {

154 
	`asm_debug_��tf
(
as
, "%s�o�l_%d, %s)\n", 
�
, 
lo�l
, 
�g_�me_�b�
[
�g
]);

155 
	}
}

157 
	$asm_debug_�g_�b�_bo�
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g
, 
�b�
, 
bo�
 
b
) {

158 
	`asm_debug_��tf
(
as
, "%s(%s,�ab�_%u, %s)\n", 
�
, 
�g_�me_�b�
[
�g
], 
�b�
, 
b
 ? "true" : "false");

159 
	}
}

161 
	$asm_debug_�g_�g_off�t
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g1
, 
�g2
, 
off�t
) {

162 
	`asm_debug_��tf
(
as
, "%s(%s, %s, %d)\n", 
�
, 
�g_�me_�b�
[
�g1
],�eg_�me_�b�[
�g2
], 
off�t
);

163 
	}
}

165 
	$asm_debug_�g_�g_�b�
(
asm_debug_t
 *
as
, cڡ *
�
, 
�g1
, 
�g2
, 
�b�
) {

166 
	`asm_debug_��tf
(
as
, "%s(%s, %s,�ab�_%u)\n", 
�
, 
�g_�me_�b�
[
�g1
],�eg_�me_�b�[
�g2
], 
�b�
);

167 
	}
}

169 
	$asm_debug_�tcc_�g_�g_�g
(
asm_debug_t
 *
as
, 
�
, 
�g1
, 
�g2
, 
�g3
) {

170 
	`asm_debug_��tf
(
as
, "�tcc(%d, %s, %s, %s)\n", 
�
, 
�g_�me_�b�
[
�g1
],�eg_�me_�b�[
�g2
],�eg_�me_�b�[
�g3
]);

171 
	}
}

176 
	#ASM_WORD_SIZE
 (8)

	)

178 
	#REG_RET
 
ASM_DEBUG_REG_R00


	)

179 
	#REG_ARG_1
 
ASM_DEBUG_REG_R01


	)

180 
	#REG_ARG_2
 
ASM_DEBUG_REG_R02


	)

181 
	#REG_ARG_3
 
ASM_DEBUG_REG_R03


	)

182 
	#REG_ARG_4
 
ASM_DEBUG_REG_R04


	)

184 
	#REG_TEMP0
 
ASM_DEBUG_REG_R05


	)

185 
	#REG_TEMP1
 
ASM_DEBUG_REG_R06


	)

186 
	#REG_TEMP2
 
ASM_DEBUG_REG_R07


	)

188 
	#REG_LOCAL_1
 
ASM_DEBUG_REG_R08


	)

189 
	#REG_LOCAL_2
 
ASM_DEBUG_REG_R09


	)

190 
	#REG_LOCAL_3
 
ASM_DEBUG_REG_R10


	)

191 
	#REG_LOCAL_NUM
 (3)

	)

194 
	#REG_FUN_TABLE
 
ASM_DEBUG_REG_R11


	)

196 
	#ASM_T
 
asm_debug_t


	)

197 
	#ASM_END_PASS
 
asm_debug_�d_�ss


	)

198 
	#ASM_ENTRY
(
as
, 
num_lo�ls
) \

199 
	`asm_debug_��y
(
as
, 
num_lo�ls
)

	)

200 
	#ASM_EXIT
(
as
) \

201 
	`asm_debug_ex�
(
as
)

	)

203 
	#ASM_JUMP
(
as
, 
�b�
) \

204 
	`asm_debug_�b�
(
as
, "jump", 
�b�
)

	)

205 
	#ASM_JUMP_IF_REG_ZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

206 
	`asm_debug_�g_�b�_bo�
(
as
, "jump_if_�g_z�o", 
�g
, 
�b�
, 
bo�_��
)

	)

207 
	#ASM_JUMP_IF_REG_NONZERO
(
as
, 
�g
, 
�b�
, 
bo�_��
) \

208 
	`asm_debug_�g_�b�_bo�
(
as
, "jump_if_�g_n�z�o", 
�g
, 
�b�
, 
bo�_��
)

	)

209 
	#ASM_JUMP_IF_REG_EQ
(
as
, 
�g1
, 
�g2
, 
�b�
) \

210 
	`asm_debug_�g_�g_�b�
(
as
, "jump_if_�g_eq", 
�g1
, 
�g2
, 
�b�
)

	)

211 
	#ASM_JUMP_REG
(
as
, 
�g
) \

212 
	`asm_debug_�g
(
as
, "jump_�g", 
�g
)

	)

213 
	#ASM_CALL_IND
(
as
, 
idx
) \

214 
	`asm_debug_fun
(
as
, "��_�d", 
idx
)

	)

216 
	#ASM_MOV_LOCAL_REG
(
as
, 
lo�l_num
, 
�g_�c
) \

217 
	`asm_debug_lo�l_�g
(
as
, "mov_lo�l_�g", 
lo�l_num
, 
�g_�c
)

	)

218 
	#ASM_MOV_REG_IMM
(
as
, 
�g_de�
, 
imm
) \

219 
	`asm_debug_�g_imm
(
as
, "mov_�g_imm", 
�g_de�
, 
imm
)

	)

220 
	#ASM_MOV_REG_QSTR
(
as
, 
�g_de�
, 
q�
) \

221 
	`asm_debug_�g_q�r
(
as
, "mov_�g_q�r", 
�g_de�
, 
q�
)

	)

222 
	#ASM_MOV_REG_LOCAL
(
as
, 
�g_de�
, 
lo�l_num
) \

223 
	`asm_debug_�g_lo�l
(
as
, "mov_�g_lo�l", 
�g_de�
, 
lo�l_num
)

	)

224 
	#ASM_MOV_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

225 
	`asm_debug_�g_�g
(
as
, "mov_�g_�g", 
�g_de�
, 
�g_�c
)

	)

226 
	#ASM_MOV_REG_LOCAL_ADDR
(
as
, 
�g_de�
, 
lo�l_num
) \

227 
	`asm_debug_�g_lo�l
(
as
, "mov_�g_lo�l_addr", 
�g_de�
, 
lo�l_num
)

	)

228 
	#ASM_MOV_REG_PCREL
(
as
, 
�g_de�
, 
�b�
) \

229 
	`asm_debug_�g_�b�
(
as
, "mov_�g_p��", 
�g_de�
, 
�b�
)

	)

231 
	#ASM_NOT_REG
(
as
, 
�g_de�
) \

232 
	`asm_debug_�g
(
as
, "n�", 
�g_de�
)

	)

233 
	#ASM_NEG_REG
(
as
, 
�g_de�
) \

234 
	`asm_debug_�g
(
as
, "�g", 
�g_de�
)

	)

235 
	#ASM_LSL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

236 
	`asm_debug_�g_�g
(
as
, "l�", 
�g_de�
, 
�g_�c
)

	)

237 
	#ASM_LSR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

238 
	`asm_debug_�g_�g
(
as
, "l�", 
�g_de�
, 
�g_�c
)

	)

239 
	#ASM_ASR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

240 
	`asm_debug_�g_�g
(
as
, "a�", 
�g_de�
, 
�g_�c
)

	)

241 
	#ASM_OR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

242 
	`asm_debug_�g_�g
(
as
, "�", 
�g_de�
, 
�g_�c
)

	)

243 
	#ASM_XOR_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

244 
	`asm_debug_�g_�g
(
as
, "x�", 
�g_de�
, 
�g_�c
)

	)

245 
	#ASM_AND_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

246 
	`asm_debug_�g_�g
(
as
, "�d", 
�g_de�
, 
�g_�c
)

	)

247 
	#ASM_ADD_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

248 
	`asm_debug_�g_�g
(
as
, "add", 
�g_de�
, 
�g_�c
)

	)

249 
	#ASM_SUB_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

250 
	`asm_debug_�g_�g
(
as
, "sub", 
�g_de�
, 
�g_�c
)

	)

251 
	#ASM_MUL_REG_REG
(
as
, 
�g_de�
, 
�g_�c
) \

252 
	`asm_debug_�g_�g
(
as
, "mul", 
�g_de�
, 
�g_�c
)

	)

254 
	#ASM_LOAD_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
) \

255 
	`asm_debug_�g_�g
(
as
, "l�d", 
�g_de�
, 
�g_ba�
)

	)

256 
	#ASM_LOAD_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
w�d_off�t
) \

257 
	`asm_debug_�g_�g_off�t
(
as
, "l�d", 
�g_de�
, 
�g_ba�
, 
w�d_off�t
)

	)

258 
	#ASM_LOAD8_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
) \

259 
	`asm_debug_�g_�g
(
as
, "l�d8", 
�g_de�
, 
�g_ba�
)

	)

260 
	#ASM_LOAD16_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
) \

261 
	`asm_debug_�g_�g
(
as
, "l�d16", 
�g_de�
, 
�g_ba�
)

	)

262 
	#ASM_LOAD16_REG_REG_OFFSET
(
as
, 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
) \

263 
	`asm_debug_�g_�g_off�t
(
as
, "l�d16", 
�g_de�
, 
�g_ba�
, 
u�t16_off�t
)

	)

264 
	#ASM_LOAD32_REG_REG
(
as
, 
�g_de�
, 
�g_ba�
) \

265 
	`asm_debug_�g_�g
(
as
, "l�d32", 
�g_de�
, 
�g_ba�
)

	)

267 
	#ASM_STORE_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
) \

268 
	`asm_debug_�g_�g
(
as
, "��e", 
�g_�c
, 
�g_ba�
)

	)

269 
	#ASM_STORE_REG_REG_OFFSET
(
as
, 
�g_�c
, 
�g_ba�
, 
w�d_off�t
) \

270 
	`asm_debug_�g_�g_off�t
(
as
, "��e", 
�g_�c
, 
�g_ba�
, 
w�d_off�t
)

	)

271 
	#ASM_STORE8_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
) \

272 
	`asm_debug_�g_�g
(
as
, "��e8", 
�g_�c
, 
�g_ba�
)

	)

273 
	#ASM_STORE16_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
) \

274 
	`asm_debug_�g_�g
(
as
, "��e16", 
�g_�c
, 
�g_ba�
)

	)

275 
	#ASM_STORE32_REG_REG
(
as
, 
�g_�c
, 
�g_ba�
) \

276 
	`asm_debug_�g_�g
(
as
, "��e32", 
�g_�c
, 
�g_ba�
)

	)

279 
	#NLR_BUF_IDX_LOCAL_1
 (5)

280 

	)

281 
	#N_DEBUG
 (1)

	)

282 
	#EXPORT_FUN
(
�me
�
em�_�tive_debug_
##
	)
name

283 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnrv32.c

29 
	~"py/mpc�fig.h
"

31 #i�
MICROPY_EMIT_RV32


34 
	#GENERIC_ASM_API
 (1)

	)

35 
	~"py/asmrv32.h
"

38 
	#NLR_BUF_IDX_LOCAL_1
 (6)

39 

	)

40 
	#N_RV32
 (1)

	)

41 
	#EXPORT_FUN
(
�me
�
em�_�tive_rv32_
##
	)
name

42 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnthumb.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_THUMB


8 
	#GENERIC_ASM_API
 (1)

	)

9 
	~"py/asmthumb.h
"

12 
	#NLR_BUF_IDX_LOCAL_1
 (3)

13 

	)

14 
	#N_THUMB
 (1)

	)

15 
	#EXPORT_FUN
(
�me
�
em�_�tive_thumb_
##
	)
name

16 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnx64.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_X64


8 
	#GENERIC_ASM_API
 (1)

	)

9 
	~"py/asmx64.h
"

12 
	#NLR_BUF_IDX_LOCAL_1
 (5)

13 

	)

14 
	#N_X64
 (1)

	)

15 
	#EXPORT_FUN
(
�me
�
em�_�tive_x64_
##
	)
name

16 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnx86.c

3 
	~"py/mpc�fig.h
"

4 
	~"py/�tiveglue.h
"

6 #i�
MICROPY_EMIT_X86


9 
	#GENERIC_ASM_API
 (1)

	)

10 
	~"py/asmx86.h
"

13 
	#NLR_BUF_IDX_LOCAL_1
 (5)

14 

	)

16 
by�
 
	gmp_f_n_�gs
[
MP_F_NUMBER_OF
] = {

17 [
MP_F_CONVERT_OBJ_TO_NATIVE
] = 2,

18 [
MP_F_CONVERT_NATIVE_TO_OBJ
] = 2,

19 [
MP_F_NATIVE_SWAP_GLOBALS
] = 1,

20 [
MP_F_LOAD_NAME
] = 1,

21 [
MP_F_LOAD_GLOBAL
] = 1,

22 [
MP_F_LOAD_BUILD_CLASS
] = 0,

23 [
MP_F_LOAD_ATTR
] = 2,

24 [
MP_F_LOAD_METHOD
] = 3,

25 [
MP_F_LOAD_SUPER_METHOD
] = 2,

26 [
MP_F_STORE_NAME
] = 2,

27 [
MP_F_STORE_GLOBAL
] = 2,

28 [
MP_F_STORE_ATTR
] = 3,

29 [
MP_F_OBJ_SUBSCR
] = 3,

30 [
MP_F_OBJ_IS_TRUE
] = 1,

31 [
MP_F_UNARY_OP
] = 2,

32 [
MP_F_BINARY_OP
] = 3,

33 [
MP_F_BUILD_TUPLE
] = 2,

34 [
MP_F_BUILD_LIST
] = 2,

35 [
MP_F_BUILD_MAP
] = 1,

36 [
MP_F_BUILD_SET
] = 2,

37 [
MP_F_STORE_SET
] = 2,

38 [
MP_F_LIST_APPEND
] = 2,

39 [
MP_F_STORE_MAP
] = 3,

40 [
MP_F_MAKE_FUNCTION_FROM_PROTO_FUN
] = 3,

41 [
MP_F_NATIVE_CALL_FUNCTION_N_KW
] = 3,

42 [
MP_F_CALL_METHOD_N_KW
] = 3,

43 [
MP_F_CALL_METHOD_N_KW_VAR
] = 3,

44 [
MP_F_NATIVE_GETITER
] = 2,

45 [
MP_F_NATIVE_ITERNEXT
] = 1,

46 [
MP_F_NLR_PUSH
] = 1,

47 [
MP_F_NLR_POP
] = 0,

48 [
MP_F_NATIVE_RAISE
] = 1,

49 [
MP_F_IMPORT_NAME
] = 3,

50 [
MP_F_IMPORT_FROM
] = 2,

51 [
MP_F_IMPORT_ALL
] = 1,

52 [
MP_F_NEW_SLICE
] = 3,

53 [
MP_F_UNPACK_SEQUENCE
] = 3,

54 [
MP_F_UNPACK_EX
] = 3,

55 [
MP_F_DELETE_NAME
] = 1,

56 [
MP_F_DELETE_GLOBAL
] = 1,

57 [
MP_F_NEW_CLOSURE
] = 3,

58 [
MP_F_ARG_CHECK_NUM_SIG
] = 3,

59 [
MP_F_SETUP_CODE_STATE
] = 4,

60 [
MP_F_SMALL_INT_FLOOR_DIVIDE
] = 2,

61 [
MP_F_SMALL_INT_MODULO
] = 2,

62 [
MP_F_NATIVE_YIELD_FROM
] = 3,

63 [
MP_F_SETJMP
] = 1,

66 
	#N_X86
 (1)

	)

67 
	#EXPORT_FUN
(
�me
�
em�_�tive_x86_
##
	)
name

68 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnxtensa.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_XTENSA


8 
	#GENERIC_ASM_API
 (1)

	)

9 
	~"py/asmx�n�.h
"

12 
	#NLR_BUF_IDX_LOCAL_1
 (8)

13 

	)

14 
	#N_XTENSA
 (1)

	)

15 
	#EXPORT_FUN
(
�me
�
em�_�tive_x�n�_
##
	)
name

16 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnxtensawin.c

3 
	~"py/mpc�fig.h
"

5 #i�
MICROPY_EMIT_XTENSAWIN


8 
	#GENERIC_ASM_API
 (1)

	)

9 
	#GENERIC_ASM_API_WIN
 (1)

	)

10 
	~"py/asmx�n�.h
"

13 
	#NLR_BUF_IDX_LOCAL_1
 (2 + 4)

14 

	)

15 
	#N_NLR_SETJMP
 (1)

	)

16 
	#N_XTENSAWIN
 (1)

	)

17 
	#EXPORT_FUN
(
�me
�
em�_�tive_x�n�w�_
##
	)
name

18 
	~"py/em��tive.c
"

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\formatfloat.c

27 
	~"py/mpc�fig.h
"

28 
	~"py/misc.h
"

29 #i�
MICROPY_FLOAT_IMPL
 !�
MICROPY_FLOAT_IMPL_NONE


31 
	~<as��.h
>

32 
	~<�dlib.h
>

33 
	~<�d�t.h
>

34 
	~<m�h.h
>

35 
	~"py/f�m���t.h
"

52 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


58 
	#FPTYPE
 

	)

59 
	#FPCONST
(
x
�x##
F


	)

60 
	#FPROUND_TO_ONE
 0.9999995F

	)

61 
	#FPDECEXP
 32

	)

62 
	#FPMIN_BUF_SIZE
 6

63 

	)

64 
	#FLT_SIGN_MASK
 0x80000000

	)

66 
�l�e
 
	$�_signb�
(
x
) {

67 
mp_��t_uni�_t
 
fb
 = {
x
};

68  
fb
.
i
 & 
FLT_SIGN_MASK
;

69 
	}
}

70 
	#�_i��
(
x
�
	`i��
(x)

	)

71 
	#�_is�f
(
x
�
	`is�f
(x)

	)

72 
�l�e
 
	$�_isz�o
(
x
) {

73 
mp_��t_uni�_t
 
fb
 = {
x
};

74  
fb
.
i
 == 0;

75 
	}
}

76 
�l�e
 
	$�_i�ess1
(
x
) {

77 
mp_��t_uni�_t
 
fb
 = {
x
};

78  
fb
.
i
 < 0x3f800000;

79 
	}
}

81 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


83 
	#FPTYPE
 

	)

84 
	#FPCONST
(
x
�
	)
x

85 
	#FPROUND_TO_ONE
 0.999999999995

	)

86 
	#FPDECEXP
 256

	)

87 
	#FPMIN_BUF_SIZE
 7

88 
	#�_signb�
(
x
�
	`signb�
(x)

	)

89 
	#�_i��
(
x
�
	`i��
(x)

	)

90 
	#�_is�f
(
x
�
	`is�f
(x)

	)

91 
	#�_isz�o
(
x
�(x =�0)

	)

92 
	#�_i�ess1
(
x
�(x < 1.0)

	)

96 
�l�e
 
	$�_expv�
(
FPTYPE
 
x
) {

97 
mp_��t_uni�_t
 
fb
 = {
x
};

98  ()((
fb
.
i
 >> 
MP_FLOAT_FRAC_BITS
�& (~(0xFFFFFFFF << 
MP_FLOAT_EXP_BITS
))�- 
MP_FLOAT_EXP_OFFSET
;

99 
	}
}

101 
	$mp_f�m�_��t
(
FPTYPE
 
f
, *
buf
, 
size_t
 
buf_size
, 
fmt
, 
�ec
, 
sign
) {

103 *
s
 = 
buf
;

105 i�(
buf_size
 <�
FPMIN_BUF_SIZE
) {

110 i�(
buf_size
 >= 2) {

111 *
s
++ = '?';

113 i�(
buf_size
 >= 1) {

114 *
s
 = '\0';

116  
buf_size
 >= 2;

118 i�(
	`�_signb�
(
f
�&& !
	`�_i��
(f)) {

119 *
s
++ = '-';

120 
f
 = -f;

122 i�(
sign
) {

123 *
s
++ = 
sign
;

129 
buf_�ma��g
 = 
buf_size
 - 1 - (
s
 - 
buf
);

132 
uc
 = 
fmt
 & 0x20;

133 i�(
	`�_is�f
(
f
)) {

134 *
s
++ = 'I' ^ 
uc
;

135 *
s
++ = 'N' ^ 
uc
;

136 *
s
++ = 'F' ^ 
uc
;

137 
�t
;

138 } i�(
	`�_i��
(
f
)) {

139 *
s
++ = 'N' ^ 
uc
;

140 *
s
++ = 'A' ^ 
uc
;

141 *
s
++ = 'N' ^ 
uc
;

142 
�t
:

143 *
s
 = '\0';

144  
s
 - 
buf
;

148 i�(
�ec
 < 0) {

149 
�ec
 = 6;

151 
e_ch�
 = 'E' | (
fmt
 & 0x20);

152 
fmt
 |= 0x20;

153 
�g_fmt
 = 
fmt
;

154 i�(
fmt
 =�'g' && 
�ec
 == 0) {

155 
�ec
 = 1;

157 
e
;

158 
dec
 = 0;

159 
e_sign
 = '\0';

160 
num_dig�s
 = 0;

161 
sig�d_e
 = 0;

165 
e_guess
 = ()(
	`�_expv�
(
f
�* 
	`FPCONST
(0.3010299956639812));

166 i�(
	`�_isz�o
(
f
)) {

167 
e
 = 0;

168 i�(
fmt
 == 'f') {

170 i�(
�ec
 + 2 > 
buf_�ma��g
) {

171 
�ec
 = 
buf_�ma��g
 - 2;

173 
num_dig�s
 = 
�ec
 + 1;

176 i�(
�ec
 + 6 > 
buf_�ma��g
) {

177 
�ec
 = 
buf_�ma��g
 - 6;

179 i�(
fmt
 == 'e') {

180 
e_sign
 = '+';

183 } i�(
	`�_i�ess1
(
f
)) {

184 
FPTYPE
 
f_��y
 = 
f
;

186 
e
 = -
e_guess
;

187 
FPTYPE
 
u_ba�
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, -
e
);

188 
u_ba�
 > 
f
) {

189 ++
e
;

190 
u_ba�
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, -
e
);

195 
f
 /�
u_ba�
;

200 i�(
fmt
 =�'f' || (fm�=�'g' && 
e
 <= 4)) {

201 
fmt
 = 'f';

202 
dec
 = 0;

204 i�(
�g_fmt
 == 'g') {

205 
�ec
 +�(
e
 - 1);

209 i�(
�ec
 + 2 > 
buf_�ma��g
) {

210 
�ec
 = 
buf_�ma��g
 - 2;

213 
num_dig�s
 = 
�ec
;

214 
sig�d_e
 = 0;

215 
f
 = 
f_��y
;

216 ++
num_dig�s
;

220 
e_sign
 = '-';

221 
dec
 = 0;

223 i�(
�ec
 > (
buf_�ma��g
 - 
FPMIN_BUF_SIZE
)) {

224 
�ec
 = 
buf_�ma��g
 - 
FPMIN_BUF_SIZE
;

225 i�(
fmt
 == 'g') {

226 
�ec
++;

229 
sig�d_e
 = -
e
;

237 
e
 = 
e_guess
;

238 
FPTYPE
 
�xt_u
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, 
e
 + 1);

239 
f
 >�
�xt_u
) {

240 ++
e
;

241 
�xt_u
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, 
e
 + 1);

248 i�(
fmt
 == 'f') {

249 i�(
e
 >�
buf_�ma��g
) {

250 
fmt
 = 'e';

251 } i�((
e
 + 
�ec
 + 2�> 
buf_�ma��g
) {

252 
�ec
 = 
buf_�ma��g
 - 
e
 - 2;

253 i�(
�ec
 < 0) {

256 
�ec
++;

260 i�(
fmt
 =�'e' && 
�ec
 > (
buf_�ma��g
 - 
FPMIN_BUF_SIZE
)) {

261 
�ec
 = 
buf_�ma��g
 - 
FPMIN_BUF_SIZE
;

263 i�(
fmt
 == 'g') {

265 i�(
�ec
 + (
FPMIN_BUF_SIZE
 - 1�> 
buf_�ma��g
) {

266 
�ec
 = 
buf_�ma��g
 - (
FPMIN_BUF_SIZE
 - 1);

272 i�(
fmt
 =�'g' && 
e
 < 
�ec
) {

273 
fmt
 = 'f';

274 
�ec
 -�(
e
 + 1);

276 i�(
fmt
 == 'f') {

277 
dec
 = 
e
;

278 
num_dig�s
 = 
�ec
 + 
e
 + 1;

280 
e_sign
 = '+';

282 
sig�d_e
 = 
e
;

284 i�(
�ec
 < 0) {

286 
�ec
 = 0;

299 i�(
fmt
 == 'e') {

300 
num_dig�s
 = 
�ec
 + 1;

301 } i�(
fmt
 == 'g') {

302 i�(
�ec
 == 0) {

303 
�ec
 = 1;

305 
num_dig�s
 = 
�ec
;

308 
d
 = 0;

309 
dig�_�dex
 = 
sig�d_e
; 
num_dig�s
 >= 0; --digit_index) {

310 
FPTYPE
 
u_ba�
 = 
	`FPCONST
(1.0);

311 i�(
dig�_�dex
 > 0) {

313 
u_ba�
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, 
dig�_�dex
);

315 
d
 = 0; d < 9; ++d) {

316 i�(
f
 < 
u_ba�
) {

319 
f
 -�
u_ba�
;

323 i�(
num_dig�s
 > 0) {

325 *
s
++ = '0' + 
d
;

326 i�(
dec
 =�0 && 
�ec
 > 0) {

327 *
s
++ = '.';

330 --
dec
;

331 --
num_dig�s
;

332 i�(
dig�_�dex
 <= 0) {

336 
f
 *�
	`FPCONST
(10.0);

340 i�(
d
 >= 5) {

341 *
rs
 = 
s
;

342 
rs
--;

344 i�(*
rs
 == '.') {

345 
rs
--;

348 i�(*
rs
 < '0' || *rs > '9') {

350 
rs
++;

353 i�(*
rs
 < '9') {

354 (*
rs
)++;

357 *
rs
 = '0';

358 i�(
rs
 =�
buf
) {

361 
rs
--;

363 i�(*
rs
 == '0') {

365 i�(
rs
[1] =�'.' && 
fmt
 != 'f') {

368 
rs
[0] = '.';

369 
rs
[1] = '0';

370 i�(
e_sign
 == '-') {

371 
e
--;

372 i�(
e
 == 0) {

373 
e_sign
 = '+';

376 
e
++;

381 i�((
size_t
)(
s
 + 1 - 
buf
�< 
buf_size
) {

382 
s
++;

385 *
ss
 = 
s
;

386 
ss
 > 
rs
) {

387 *
ss
 = ss[-1];

388 
ss
--;

390 *
rs
 = '1';

395 
	`as��
((
size_t
)(
s
 + 1 - 
buf
�<�
buf_size
);

397 i�(
�g_fmt
 =�'g' && 
�ec
 > 0) {

399 
s
[-1] == '0') {

400 
s
--;

402 i�(
s
[-1] == '.') {

403 
s
--;

407 i�(
e_sign
) {

408 *
s
++ = 
e_ch�
;

409 *
s
++ = 
e_sign
;

410 i�(
FPMIN_BUF_SIZE
 =�7 && 
e
 >= 100) {

411 *
s
++ = '0' + (
e
 / 100);

413 *
s
++ = '0' + ((
e
 / 10) % 10);

414 *
s
++ = '0' + (
e
 % 10);

416 *
s
 = '\0';

419 
	`as��
((
size_t
)(
s
 + 1 - 
buf
�<�
buf_size
);

421  
s
 - 
buf
;

422 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\formatfloat.h

26 #i�de�
MICROPY_INCLUDED_PY_FORMATFLOAT_H


27 
	#MICROPY_INCLUDED_PY_FORMATFLOAT_H


	)

29 
	~"py/mpc�fig.h
"

31 #i�
MICROPY_PY_BUILTINS_FLOAT


32 
mp_f�m�_��t
(
mp_��t_t
 
f
, *
buf
, 
size_t
 
bufSize
, 
fmt
, 
�ec
, 
sign
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\frozenmod.c

29 
	~<�r�g.h
>

30 
	~<�d�t.h
>

32 
	~"py/�x�.h
"

33 
	~"py/�oz�mod.h
"

35 #i�
MICROPY_MODULE_FROZEN


40 
cڡ 
mp_�oz�_�mes
[];

42 #i�
MICROPY_MODULE_FROZEN_STR


44 #i�de�
MICROPY_MODULE_FROZEN_LEXER


45 
	#MICROPY_MODULE_FROZEN_LEXER
 
mp_�x�_�w_�om_�r_�n


	)

47 
mp_�x�_t
 *
MICROPY_MODULE_FROZEN_LEXER
(
q�r
 
�c_�me
, cڡ *
�r
, 
mp_u�t_t
 
�n
, mp_u�t_�
�_�n
);

51 
cڡ 
u�t32_t
 
mp_�oz�_�r_sizes
[];

53 
cڡ 
mp_�oz�_�r_cڋ�
[];

56 #i�
MICROPY_MODULE_FROZEN_MPY


58 
	~"py/em�glue.h
"

60 
cڡ 
mp_�oz�_modu�_t
 *cڡ 
mp_�oz�_mpy_cڋ�
[];

67 
mp_imp�t_��_t
 
	$mp_f�d_�oz�_modu�
(cڡ *
�r
, *
�oz�_ty�
, **
d�a
) {

68 
size_t
 
�n
 = 
	`���
(
�r
);

69 cڡ *
�me
 = 
mp_�oz�_�mes
;

71 i�(
�oz�_ty�
 !�
NULL
) {

72 *
�oz�_ty�
 = 
MP_FROZEN_NONE
;

76 
size_t
 
num_�r
 = 0;

77 #i�
MICROPY_MODULE_FROZEN_STR
 && 
MICROPY_MODULE_FROZEN_MPY


78 cڡ 
u�t32_t
 *
s
 = 
mp_�oz�_�r_sizes
; *s != 0; ++s) {

79 ++
num_�r
;

83 
size_t
 
i
 = 0; *
�me
 != 0; i++) {

84 
size_t
 
��y_�n
 = 
	`���
(
�me
);

85 i�(
��y_�n
 >�
�n
 && 
	`memcmp
(
�r
, 
�me
,�en) == 0) {

87 i�(
��y_�n
 =�
�n
) {

90 i�(
�oz�_ty�
 !�
NULL
) {

91 #i�
MICROPY_MODULE_FROZEN_STR


92 i�(
i
 < 
num_�r
) {

93 *
�oz�_ty�
 = 
MP_FROZEN_STR
;

95 
size_t
 
off�t
 = 0;

96 
size_t
 
j
 = 0; j < 
i
; ++j) {

97 
off�t
 +�
mp_�oz�_�r_sizes
[
j
] + 1;

99 
size_t
 
cڋ�_�n
 = 
mp_�oz�_�r_sizes
[
i
];

100 cڡ *
cڋ�
 = &
mp_�oz�_�r_cڋ�
[
off�t
];

105 
q�r
 
sour�
 = 
	`q�r_�om_��
(
�r
, 
�n
);

106 
mp_�x�_t
 *
�x
 = 
	`MICROPY_MODULE_FROZEN_LEXER
(
sour�
, 
cڋ�
, 
cڋ�_�n
, 0);

107 *
d�a
 = 
�x
;

111 #i�
MICROPY_MODULE_FROZEN_MPY


112 i�(
i
 >�
num_�r
) {

113 *
�oz�_ty�
 = 
MP_FROZEN_MPY
;

116 *
d�a
 = (*)
mp_�oz�_mpy_cڋ�
[
i
 - 
num_�r
];

121  
MP_IMPORT_STAT_FILE
;

122 } i�(
�me
[
�n
] == '/') {

125  
MP_IMPORT_STAT_DIR
;

129 
�me
 +�
��y_�n
 + 1;

132  
MP_IMPORT_STAT_NO_EXIST
;

133 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\frozenmod.h

27 #i�de�
MICROPY_INCLUDED_PY_FROZENMOD_H


28 
	#MICROPY_INCLUDED_PY_FROZENMOD_H


	)

30 
	~"py/bu�t�.h
"

33 
	mMP_FROZEN_NONE
,

34 
	mMP_FROZEN_STR
,

35 
	mMP_FROZEN_MPY
,

38 
mp_imp�t_��_t
 
mp_f�d_�oz�_modu�
(cڡ *
�r
, *
�oz�_ty�
, **
d�a
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\gc.c

28 
	~<as��.h
>

29 
	~<�dio.h
>

30 
	~<�r�g.h
>

32 
	~"py/gc.h
"

33 
	~"py/ru�ime.h
"

35 #i�
MICROPY_DEBUG_VALGRIND


36 
	~<v�gr�d/memcheck.h
>

39 #i�
MICROPY_ENABLE_GC


41 #i�
MICROPY_DEBUG_VERBOSE


42 
	#DEBUG_PRINT
 (1)

	)

43 
	#DEBUG_��tf
 
DEBUG_��tf


	)

45 
	#DEBUG_PRINT
 (0)

	)

46 
	#DEBUG_��tf
(...�()0

	)

50 
	#EXTENSIVE_HEAP_PROFILING
 (0)

	)

54 
	#CLEAR_ON_SWEEP
 (0)

	)

56 
	#WORDS_PER_BLOCK
 ((
MICROPY_BYTES_PER_GC_BLOCK
�/ 
MP_BYTES_PER_OBJ_WORD
)

	)

57 
	#BYTES_PER_BLOCK
 (
MICROPY_BYTES_PER_GC_BLOCK
)

	)

65 
	#AT_FREE
 (0)

	)

66 
	#AT_HEAD
 (1)

	)

67 
	#AT_TAIL
 (2)

	)

68 
	#AT_MARK
 (3)

	)

70 
	#BLOCKS_PER_ATB
 (4)

	)

71 
	#ATB_MASK_0
 (0x03)

	)

72 
	#ATB_MASK_1
 (0x0c)

	)

73 
	#ATB_MASK_2
 (0x30)

	)

74 
	#ATB_MASK_3
 (0xc0)

	)

76 
	#ATB_0_IS_FREE
(
a
�((��& 
ATB_MASK_0
�=�0)

	)

77 
	#ATB_1_IS_FREE
(
a
�((��& 
ATB_MASK_1
�=�0)

	)

78 
	#ATB_2_IS_FREE
(
a
�((��& 
ATB_MASK_2
�=�0)

	)

79 
	#ATB_3_IS_FREE
(
a
�((��& 
ATB_MASK_3
�=�0)

	)

81 #i�
MICROPY_GC_SPLIT_HEAP


82 
	#NEXT_AREA
(
��
�(׻a)->
�xt
)

	)

84 
	#NEXT_AREA
(
��
�(
NULL
)

	)

87 
	#BLOCK_SHIFT
(
block
�(2 * ((block�& (
BLOCKS_PER_ATB
 - 1)))

	)

88 
	#ATB_GET_KIND
(
��
, 
block
�((׻a)->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] >> 
	`BLOCK_SHIFT
(block)�& 3)

	)

89 
	#ATB_ANY_TO_FREE
(
��
, 
block
�d�{��a->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] &�(~(
AT_MARK
 << 
	`BLOCK_SHIFT
(block))); } 0)

	)

90 
	#ATB_FREE_TO_HEAD
(
��
, 
block
�d�{��a->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] |�(
AT_HEAD
 << 
	`BLOCK_SHIFT
(block)); } 0)

	)

91 
	#ATB_FREE_TO_TAIL
(
��
, 
block
�d�{��a->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] |�(
AT_TAIL
 << 
	`BLOCK_SHIFT
(block)); } 0)

	)

92 
	#ATB_HEAD_TO_MARK
(
��
, 
block
�d�{��a->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] |�(
AT_MARK
 << 
	`BLOCK_SHIFT
(block)); } 0)

	)

93 
	#ATB_MARK_TO_HEAD
(
��
, 
block
�d�{��a->
gc_�loc_�b�_��t
[(block�/ 
BLOCKS_PER_ATB
] &�(~(
AT_TAIL
 << 
	`BLOCK_SHIFT
(block))); } 0)

	)

95 
	#BLOCK_FROM_PTR
(
��
, 
�r
�(((
by�
 *)Ռ�-��a->
gc_po�_��t
�/ 
BYTES_PER_BLOCK
)

	)

96 
	#PTR_FROM_BLOCK
(
��
, 
block
�(((block�* 
BYTES_PER_BLOCK
 + (
u���_t
�a->
gc_po�_��t
))

	)

102 
	#ALLOC_TABLE_GAP_BYTE
 (1)

	)

104 #i�
MICROPY_ENABLE_FINALISER


108 
	#BLOCKS_PER_FTB
 (8)

	)

110 
	#FTB_GET
(
��
, 
block
�(׻a->
gc_f��i�r_�b�_��t
[(block�/ 
BLOCKS_PER_FTB
] >> ((block�& 7)�& 1)

	)

111 
	#FTB_SET
(
��
, 
block
�d�{��a->
gc_f��i�r_�b�_��t
[(block�/ 
BLOCKS_PER_FTB
] |�(1 << ((block�& 7)); } 0)

	)

112 
	#FTB_CLEAR
(
��
, 
block
�d�{��a->
gc_f��i�r_�b�_��t
[(block�/ 
BLOCKS_PER_FTB
] &�(~(1 << ((block�& 7))); } 0)

	)

115 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


116 
	#GC_ENTER
(�
	`mp_th�ad_mu�x_lock
(&
	`MP_STATE_MEM
(
gc_mu�x
), 1)

	)

117 
	#GC_EXIT
(�
	`mp_th�ad_mu�x_u�ock
(&
	`MP_STATE_MEM
(
gc_mu�x
))

	)

119 
	#GC_ENTER
()

	)

120 
	#GC_EXIT
()

	)

124 
	$gc_�tup_��
(
mp_��e_mem_��_t
 *
��
, *
��t
, *
�d
) {

130 
size_t
 
tٮ_by�_�n
 = (
by�
 *)
�d
 - (by� *)
��t
;

131 #i�
MICROPY_ENABLE_FINALISER


132 
��
->
gc_�loc_�b�_by�_�n
 = (
tٮ_by�_�n
 - 
ALLOC_TABLE_GAP_BYTE
)

133 * 
MP_BITS_PER_BYTE


135 
MP_BITS_PER_BYTE


136 + 
MP_BITS_PER_BYTE
 * 
BLOCKS_PER_ATB
 / 
BLOCKS_PER_FTB


137 + 
MP_BITS_PER_BYTE
 * 
BLOCKS_PER_ATB
 * 
BYTES_PER_BLOCK


140 
��
->
gc_�loc_�b�_by�_�n
 = (
tٮ_by�_�n
 - 
ALLOC_TABLE_GAP_BYTE
�/ (1 + 
MP_BITS_PER_BYTE
 / 2 * 
BYTES_PER_BLOCK
);

143 
��
->
gc_�loc_�b�_��t
 = (
by�
 *)
��t
;

145 #i�
MICROPY_ENABLE_FINALISER


146 
size_t
 
gc_f��i�r_�b�_by�_�n
 = (
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
 + 
BLOCKS_PER_FTB
 - 1) / BLOCKS_PER_FTB;

147 
��
->
gc_f��i�r_�b�_��t
 =��a->
gc_�loc_�b�_��t
 +��a->
gc_�loc_�b�_by�_�n
 + 
ALLOC_TABLE_GAP_BYTE
;

150 
size_t
 
gc_po�_block_�n
 = 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
;

151 
��
->
gc_po�_��t
 = (
by�
 *)
�d
 - 
gc_po�_block_�n
 * 
BYTES_PER_BLOCK
;

152 
��
->
gc_po�_�d
 = 
�d
;

154 #i�
MICROPY_ENABLE_FINALISER


155 
	`as��
(
��
->
gc_po�_��t
 >�->
gc_f��i�r_�b�_��t
 + 
gc_f��i�r_�b�_by�_�n
);

158 #i�
MICROPY_ENABLE_FINALISER


160 
	`mem�t
(
��
->
gc_�loc_�b�_��t
, 0, 
gc_f��i�r_�b�_by�_�n
 +��a->
gc_�loc_�b�_by�_�n
 + 
ALLOC_TABLE_GAP_BYTE
);

163 
	`mem�t
(
��
->
gc_�loc_�b�_��t
, 0,��a->
gc_�loc_�b�_by�_�n
 + 
ALLOC_TABLE_GAP_BYTE
);

166 
��
->
gc_ϡ_�_�b_�dex
 = 0;

167 
��
->
gc_ϡ_u�d_block
 = 0;

169 #i�
MICROPY_GC_SPLIT_HEAP


170 
��
->
�xt
 = 
NULL
;

173 
	`DEBUG_��tf
("GC�ayout:\n");

174 
	`DEBUG_��tf
("��o��bˇ�%p,��gth " 
UINT_FMT
 " bytes, "

175 
UINT_FMT
 " blocks\n",

176 
��
->
gc_�loc_�b�_��t
,��a->
gc_�loc_�b�_by�_�n
,

177 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
);

178 #i�
MICROPY_ENABLE_FINALISER


179 
	`DEBUG_��tf
(" f��i���bˇ�%p,��gth " 
UINT_FMT
 " bytes, "

180 
UINT_FMT
 " blocks\n", 
��
->
gc_f��i�r_�b�_��t
,

181 
gc_f��i�r_�b�_by�_�n
,

182 
gc_f��i�r_�b�_by�_�n
 * 
BLOCKS_PER_FTB
);

184 
	`DEBUG_��tf
("�oއ�%p,��gth " 
UINT_FMT
 " bytes, "

185 
UINT_FMT
 " blocks\n", 
��
->
gc_po�_��t
,

186 
gc_po�_block_�n
 * 
BYTES_PER_BLOCK
, gc_pool_block_len);

187 
	}
}

189 
	$gc_��
(*
��t
, *
�d
) {

191 
�d
 = (*)((
u���_t
�nd & (~(
BYTES_PER_BLOCK
 - 1)));

192 
	`DEBUG_��tf
("In��liz�g GC h�p: %p..%��" 
UINT_FMT
 " by�s\n", 
��t
, 
�d
, (
by�
 *)end - (byte *)start);

194 
	`gc_�tup_��
(&
	`MP_STATE_MEM
(
��
), 
��t
, 
�d
);

197 #i�
MICROPY_GC_SPLIT_HEAP


198 
	`MP_STATE_MEM
(
gc_ϡ_�_��
��&MP_STATE_MEM(
��
);

202 
	`MP_STATE_THREAD
(
gc_lock_d�th
) = 0;

205 
	`MP_STATE_MEM
(
gc_auto_c���_�ab�d
) = 1;

207 #i�
MICROPY_GC_ALLOC_THRESHOLD


209 
	`MP_STATE_MEM
(
gc_�loc_th�sh�d
��(
size_t
)-1;

210 
	`MP_STATE_MEM
(
gc_�loc_amou�
) = 0;

213 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


214 
	`mp_th�ad_mu�x_��
(&
	`MP_STATE_MEM
(
gc_mu�x
));

216 
	}
}

218 #i�
MICROPY_GC_SPLIT_HEAP


219 
	$gc_add
(*
��t
, *
�d
) {

221 
mp_��e_mem_��_t
 *
��
 = (mp_��e_mem_��_�*)
��t
;

222 
��t
 = (*)((
u���_t
)���+ (
mp_��e_mem_��_t
));

224 
�d
 = (*)((
u���_t
�nd & (~(
BYTES_PER_BLOCK
 - 1)));

225 
	`DEBUG_��tf
("Add�g GC h�p: %p..%��" 
UINT_FMT
 " by�s\n", 
��t
, 
�d
, (
by�
 *)end - (byte *)start);

228 
	`gc_�tup_��
(
��
, 
��t
, 
�d
);

231 
mp_��e_mem_��_t
 *
�ev_��
 = &
	`MP_STATE_MEM
(
��
);

232 
�ev_��
->
�xt
 !�
NULL
) {

233 
�ev_��
 =��v_��->
�xt
;

237 
�ev_��
->
�xt
 = 
��
;

238 
	}
}

240 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


242 
bo�
 
	$gc_�y_add_h�p
(
size_t
 
�ed_�loc
) {

250 
size_t
 
�eded
 = 
�ed_�loc
 + 
	`MAX
(2048, failed_alloc * 13 / 512);

252 
size_t
 
ava�
 = 
	`gc_g�_max_�w_�l�
();

254 
	`DEBUG_��tf
("gc_�y_add_h���ed_�lo�" 
UINT_FMT
 ", "

255 "�eded " 
UINT_FMT
 ",�vail " UINT_FMT " bytes \n",

256 
�ed_�loc
,

257 
�eded
,

258 
ava�
);

260 i�(
ava�
 < 
�eded
) {

262  
�l�
;

287 
size_t
 
tٮ_blocks
 = 0;

288 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
(area);

289 
��
 !�
NULL
;

290 
��
 = 
	`NEXT_AREA
(area)) {

291 
tٮ_blocks
 +�
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
;

295 
size_t
 
tٮ_h�p
 =

296 
tٮ_blocks
 / 
BLOCKS_PER_ATB


297 #i�
MICROPY_ENABLE_FINALISER


298 + 
tٮ_blocks
 / 
BLOCKS_PER_FTB


300 + 
tٮ_blocks
 * 
BYTES_PER_BLOCK


301 + 
ALLOC_TABLE_GAP_BYTE


302 + (
mp_��e_mem_��_t
);

305 
tٮ_h�p
 = (tٮ_h��+ 
BYTES_PER_BLOCK
 - 1) & (~(BYTES_PER_BLOCK - 1));

307 
	`DEBUG_��tf
("tٮ_h��" 
UINT_FMT
 " by�s\n", 
tٮ_h�p
);

309 
size_t
 
to_�loc
 = 
	`MIN
(
ava�
, 
	`MAX
(
tٮ_h�p
, 
�eded
));

311 
mp_��e_mem_��_t
 *
�w_h�p
 = 
	`MP_PLAT_ALLOC_HEAP
(
to_�loc
);

313 
	`DEBUG_��tf
("MP_PLAT_ALLOC_HEAP " 
UINT_FMT
 " = %p\n",

314 
to_�loc
, 
�w_h�p
);

316 i�(
�w_h�p
 =�
NULL
) {

321  
�l�
;

324 
	`gc_add
(
�w_h�p
, (*�ew_h��+ 
to_�loc
);

326  
�ue
;

327 
	}
}

332 
	$gc_lock
() {

337 
	`MP_STATE_THREAD
(
gc_lock_d�th
)++;

338 
	}
}

340 
	$gc_u�ock
() {

342 
	`MP_STATE_THREAD
(
gc_lock_d�th
)--;

343 
	}
}

345 
bo�
 
	$gc_is_locked
() {

346  
	`MP_STATE_THREAD
(
gc_lock_d�th
) != 0;

347 
	}
}

349 #i�
MICROPY_GC_SPLIT_HEAP


352 
�l�e
 
mp_��e_mem_��_t
 *
	$gc_g�_�r_��
(cڡ *
�r
) {

353 i�(((
u���_t
)(
�r
�& (
BYTES_PER_BLOCK
 - 1)) != 0) {

354  
NULL
;

356 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

357 i�(
�r
 >�(*)
��
->
gc_po�_��t


358 && 
�r
 < (*)
��
->
gc_po�_�d
) {

359  
��
;

362  
NULL
;

363 
	}
}

367 
	#VERIFY_PTR
(
�r
) ( \

368 ((
u���_t
)(
�r
�& (
BYTES_PER_BLOCK
 - 1)) == 0 \

369 && 
�r
 >�(*)
	`MP_STATE_MEM
(
��
).
gc_po�_��t
 \

370 && 
�r
 < (*)
	`MP_STATE_MEM
(
��
).
gc_po�_�d
 \

371 )

	)

373 #i�de�
TRACE_MARK


374 #i�
DEBUG_PRINT


375 
	#TRACE_MARK
(
block
, 
�r
�
	`DEBUG_��tf
("gc_m�k(%p)\n",��)

	)

377 
	#TRACE_MARK
(
block
, 
�r
)

	)

385 #i�
MICROPY_GC_SPLIT_HEAP


386 
	$gc_m�k_sub��
(
mp_��e_mem_��_t
 *
��
, 
size_t
 
block
)

388 
	$gc_m�k_sub��
(
size_t
 
block
)

392 
size_t
 
�
 = 0;

394 #i�!
MICROPY_GC_SPLIT_HEAP


395 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
(area);

399 
size_t
 
n_blocks
 = 0;

401 
n_blocks
 += 1;

402 } 
	`ATB_GET_KIND
(
��
, 
block
 + 
n_blocks
�=�
AT_TAIL
);

405 
	`as��
(
��
->
gc_po�_��t
 + (
block
 + 
n_blocks
�* 
BYTES_PER_BLOCK
 <�->
gc_po�_�d
);

408 **
�rs
 = (**)
	`PTR_FROM_BLOCK
(
��
, 
block
);

409 
size_t
 
i
 = 
n_blocks
 * 
BYTES_PER_BLOCK
 / (*); i > 0; i--, 
�rs
++) {

410 
	`MICROPY_GC_HOOK_LOOP
(
i
);

411 *
�r
 = *
�rs
;

414 #i�
MICROPY_GC_SPLIT_HEAP


415 
mp_��e_mem_��_t
 *
�r_��
 = 
	`gc_g�_�r_��
(
�r
);

416 i�(!
�r_��
) {

421 i�(!
	`VERIFY_PTR
(
�r
)) {

424 
mp_��e_mem_��_t
 *
�r_��
 = 
��
;

426 
size_t
 
�r_block
 = 
	`BLOCK_FROM_PTR
(
�r_��
, 
�r
);

427 i�(
	`ATB_GET_KIND
(
�r_��
, 
�r_block
�!�
AT_HEAD
) {

432 
	`TRACE_MARK
(
�r_block
, 
�r
);

433 
	`ATB_HEAD_TO_MARK
(
�r_��
, 
�r_block
);

434 i�(
�
 < 
MICROPY_ALLOC_GC_STACK_SIZE
) {

435 
	`MP_STATE_MEM
(
gc_block_�ack
)[
�
] = 
�r_block
;

436 #i�
MICROPY_GC_SPLIT_HEAP


437 
	`MP_STATE_MEM
(
gc_��_�ack
)[
�
] = 
�r_��
;

439 
�
 += 1;

441 
	`MP_STATE_MEM
(
gc_�ack_ov��ow
) = 1;

446 i�(
�
 == 0) {

451 
�
 -= 1;

452 
block
 = 
	`MP_STATE_MEM
(
gc_block_�ack
)[
�
];

453 #i�
MICROPY_GC_SPLIT_HEAP


454 
��
 = 
	`MP_STATE_MEM
(
gc_��_�ack
)[
�
];

457 
	}
}

459 
	$gc_d�l_w�h_�ack_ov��ow
() {

460 
	`MP_STATE_MEM
(
gc_�ack_ov��ow
)) {

461 
	`MP_STATE_MEM
(
gc_�ack_ov��ow
) = 0;

464 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

465 
size_t
 
block
 = 0; block < 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
; block++) {

466 
	`MICROPY_GC_HOOK_LOOP
(
block
);

468 i�(
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_MARK
) {

469 #i�
MICROPY_GC_SPLIT_HEAP


470 
	`gc_m�k_sub��
(
��
, 
block
);

472 
	`gc_m�k_sub��
(
block
);

478 
	}
}

480 
	$gc_sw�p
() {

481 #i�
MICROPY_PY_GC_COLLECT_RETVAL


482 
	`MP_STATE_MEM
(
gc_c���ed
) = 0;

485 
�_��
 = 0;

486 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


487 
mp_��e_mem_��_t
 *
�ev_��
 = 
NULL
;

489 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

490 
size_t
 
�d_block
 = 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
;

491 i�(
��
->
gc_ϡ_u�d_block
 < 
�d_block
) {

492 
�d_block
 = 
��
->
gc_ϡ_u�d_block
 + 1;

495 
size_t
 
ϡ_u�d_block
 = 0;

497 
size_t
 
block
 = 0; block < 
�d_block
; block++) {

498 
	`MICROPY_GC_HOOK_LOOP
(
block
);

499 
	`ATB_GET_KIND
(
��
, 
block
)) {

500 
AT_HEAD
:

501 #i�
MICROPY_ENABLE_FINALISER


502 i�(
	`FTB_GET
(
��
, 
block
)) {

503 
mp_obj_ba�_t
 *
obj
 = (mp_obj_ba�_�*)
	`PTR_FROM_BLOCK
(
��
, 
block
);

504 i�(
obj
->
ty�
 !�
NULL
) {

506 
mp_obj_t
 
de�
[2];

507 
	`mp_l�d_m�hod_maybe
(
	`MP_OBJ_FROM_PTR
(
obj
), 
MP_QSTR___d�__
, 
de�
);

508 i�(
de�
[0] !�
MP_OBJ_NULL
) {

510 #i�
MICROPY_ENABLE_SCHEDULER


511 
	`mp_sched_lock
();

513 
	`mp_��_fun�i�_1_��e�ed
(
de�
[0], dest[1]);

514 #i�
MICROPY_ENABLE_SCHEDULER


515 
	`mp_sched_u�ock
();

520 
	`FTB_CLEAR
(
��
, 
block
);

523 
�_��
 = 1;

524 
	`DEBUG_��tf
("gc_sw�p(%p)\n", (*)
	`PTR_FROM_BLOCK
(
��
, 
block
));

525 #i�
MICROPY_PY_GC_COLLECT_RETVAL


526 
	`MP_STATE_MEM
(
gc_c���ed
)++;

529 
MP_FALLTHROUGH


531 
AT_TAIL
:

532 i�(
�_��
) {

533 
	`ATB_ANY_TO_FREE
(
��
, 
block
);

534 #i�
CLEAR_ON_SWEEP


535 
	`mem�t
((*)
	`PTR_FROM_BLOCK
(
��
, 
block
), 0, 
BYTES_PER_BLOCK
);

538 
ϡ_u�d_block
 = 
block
;

542 
AT_MARK
:

543 
	`ATB_MARK_TO_HEAD
(
��
, 
block
);

544 
�_��
 = 0;

545 
ϡ_u�d_block
 = 
block
;

550 
��
->
gc_ϡ_u�d_block
 = 
ϡ_u�d_block
;

552 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


554 i�(
ϡ_u�d_block
 =�0 && 
�ev_��
 !�
NULL
) {

555 
	`DEBUG_��tf
("gc_sw��䓃m�y���%p\n", 
��
);

556 
	`NEXT_AREA
(
�ev_��
��NEXT_AREA(
��
);

557 
	`MP_PLAT_FREE_HEAP
(
��
);

558 
��
 = 
�ev_��
;

560 
�ev_��
 = 
��
;

563 
	}
}

565 
	$gc_c���_��t
() {

566 
	`GC_ENTER
();

567 
	`MP_STATE_THREAD
(
gc_lock_d�th
)++;

568 #i�
MICROPY_GC_ALLOC_THRESHOLD


569 
	`MP_STATE_MEM
(
gc_�loc_amou�
) = 0;

571 
	`MP_STATE_MEM
(
gc_�ack_ov��ow
) = 0;

576 **
�rs
 = (**)(*)&
mp_��e_�x
;

577 
size_t
 
ro�_��t
 = 
	`off�tof
(
mp_��e_�x_t
, 
th�ad
.
di�_lo�ls
);

578 
size_t
 
ro�_�d
 = 
	`off�tof
(
mp_��e_�x_t
, 
vm
.
q�r_ϡ_chunk
);

579 
	`gc_c���_ro�
(
�rs
 + 
ro�_��t
 / (*), (
ro�_�d
 -�oot_start) / (*));

581 #i�
MICROPY_ENABLE_PYSTACK


583 
�rs
 = (**)(*)
	`MP_STATE_THREAD
(
py�ack_��t
);

584 
	`gc_c���_ro�
(
�rs
, (
	`MP_STATE_THREAD
(
py�ack_cur
�- MP_STATE_THREAD(
py�ack_��t
)) / (*));

586 
	}
}

591 #i�
def�ed
(
__GNUC__
�&& (__GNUC__ > 4 || (__GNUC__ =�4 && 
__GNUC_MINOR__
 >= 8))

592 
__��ibu�__
((
no_�n�ize_add�ss
))

594 *
	$gc_g�_�r
(**
�rs
, 
i
) {

595 #i�
MICROPY_DEBUG_VALGRIND


596 i�(!
	`VALGRIND_CHECK_MEM_IS_ADDRESSABLE
(&
�rs
[
i
], (*ptrs))) {

597  
NULL
;

600  
�rs
[
i
];

601 
	}
}

603 
	$gc_c���_ro�
(**
�rs
, 
size_t
 
�n
) {

604 #i�!
MICROPY_GC_SPLIT_HEAP


605 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
(area);

607 
size_t
 
i
 = 0; i < 
�n
; i++) {

608 
	`MICROPY_GC_HOOK_LOOP
(
i
);

609 *
�r
 = 
	`gc_g�_�r
(
�rs
, 
i
);

610 #i�
MICROPY_GC_SPLIT_HEAP


611 
mp_��e_mem_��_t
 *
��
 = 
	`gc_g�_�r_��
(
�r
);

612 i�(!
��
) {

616 i�(!
	`VERIFY_PTR
(
�r
)) {

620 
size_t
 
block
 = 
	`BLOCK_FROM_PTR
(
��
, 
�r
);

621 i�(
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_HEAD
) {

623 
	`ATB_HEAD_TO_MARK
(
��
, 
block
);

624 #i�
MICROPY_GC_SPLIT_HEAP


625 
	`gc_m�k_sub��
(
��
, 
block
);

627 
	`gc_m�k_sub��
(
block
);

631 
	}
}

633 
	$gc_c���_�d
() {

634 
	`gc_d�l_w�h_�ack_ov��ow
();

635 
	`gc_sw�p
();

636 #i�
MICROPY_GC_SPLIT_HEAP


637 
	`MP_STATE_MEM
(
gc_ϡ_�_��
��&MP_STATE_MEM(
��
);

639 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

640 
��
->
gc_ϡ_�_�b_�dex
 = 0;

642 
	`MP_STATE_THREAD
(
gc_lock_d�th
)--;

643 
	`GC_EXIT
();

644 
	}
}

646 
	$gc_sw�p_�l
() {

647 
	`GC_ENTER
();

648 
	`MP_STATE_THREAD
(
gc_lock_d�th
)++;

649 
	`MP_STATE_MEM
(
gc_�ack_ov��ow
) = 0;

650 
	`gc_c���_�d
();

651 
	}
}

653 
	$gc_�fo
(
gc_�fo_t
 *
�fo
) {

654 
	`GC_ENTER
();

655 
�fo
->
tٮ
 = 0;

656 
�fo
->
u�d
 = 0;

657 
�fo
->
�
 = 0;

658 
�fo
->
max_�
 = 0;

659 
�fo
->
num_1block
 = 0;

660 
�fo
->
num_2block
 = 0;

661 
�fo
->
max_block
 = 0;

662 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

663 
bo�
 
f�ish
 = 
�l�
;

664 
�fo
->
tٮ
 +�
��
->
gc_po�_�d
 -��a->
gc_po�_��t
;

665 
size_t
 
block
 = 0, 
�n
 = 0, 
�n_�
 = 0; !
f�ish
;) {

666 
	`MICROPY_GC_HOOK_LOOP
(
block
);

667 
size_t
 
k�d
 = 
	`ATB_GET_KIND
(
��
, 
block
);

668 
k�d
) {

669 
AT_FREE
:

670 
�fo
->
�
 += 1;

671 
�n_�
 += 1;

672 
�n
 = 0;

675 
AT_HEAD
:

676 
�fo
->
u�d
 += 1;

677 
�n
 = 1;

680 
AT_TAIL
:

681 
�fo
->
u�d
 += 1;

682 
�n
 += 1;

685 
AT_MARK
:

690 
block
++;

691 
f�ish
 = (
block
 =�
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
);

693 i�(!
f�ish
) {

694 
k�d
 = 
	`ATB_GET_KIND
(
��
, 
block
);

697 i�(
f�ish
 || 
k�d
 =�
AT_FREE
 || k�d =�
AT_HEAD
) {

698 i�(
�n
 == 1) {

699 
�fo
->
num_1block
 += 1;

700 } i�(
�n
 == 2) {

701 
�fo
->
num_2block
 += 1;

703 i�(
�n
 > 
�fo
->
max_block
) {

704 
�fo
->
max_block
 = 
�n
;

706 i�(
f�ish
 || 
k�d
 =�
AT_HEAD
) {

707 i�(
�n_�
 > 
�fo
->
max_�
) {

708 
�fo
->
max_�
 = 
�n_�
;

710 
�n_�
 = 0;

716 
�fo
->
u�d
 *�
BYTES_PER_BLOCK
;

717 
�fo
->
�
 *�
BYTES_PER_BLOCK
;

719 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


720 
�fo
->
max_�w_�l�
 = 
	`gc_g�_max_�w_�l�
();

723 
	`GC_EXIT
();

724 
	}
}

726 *
	$gc_�loc
(
size_t
 
n_by�s
, 
�loc_�ags
) {

727 
bo�
 
has_f��i�r
 = 
�loc_�ags
 & 
GC_ALLOC_FLAG_HAS_FINALISER
;

728 
size_t
 
n_blocks
 = ((
n_by�s
 + 
BYTES_PER_BLOCK
 - 1) & (~(BYTES_PER_BLOCK - 1))) / BYTES_PER_BLOCK;

729 
	`DEBUG_��tf
("gc_�loc(" 
UINT_FMT
 " by��-> " UINT_FMT " blocks)\n", 
n_by�s
, 
n_blocks
);

732 i�(
n_blocks
 == 0) {

733  
NULL
;

737 i�(
	`MP_STATE_THREAD
(
gc_lock_d�th
) > 0) {

738  
NULL
;

741 
	`GC_ENTER
();

743 
mp_��e_mem_��_t
 *
��
;

744 
size_t
 
i
;

745 
size_t
 
�d_block
;

746 
size_t
 
��t_block
;

747 
size_t
 
n_�
;

748 
c���ed
 = !
	`MP_STATE_MEM
(
gc_auto_c���_�ab�d
);

749 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


750 
bo�
 
added
 = 
�l�
;

753 #i�
MICROPY_GC_ALLOC_THRESHOLD


754 i�(!
c���ed
 && 
	`MP_STATE_MEM
(
gc_�loc_amou�
�>�MP_STATE_MEM(
gc_�loc_th�sh�d
)) {

755 
	`GC_EXIT
();

756 
	`gc_c���
();

757 
c���ed
 = 1;

758 
	`GC_ENTER
();

764 #i�
MICROPY_GC_SPLIT_HEAP


765 
��
 = 
	`MP_STATE_MEM
(
gc_ϡ_�_��
);

767 
��
 = &
	`MP_STATE_MEM
(area);

771 ; 
��
 !�
NULL
;����
	`NEXT_AREA
׻a), 
i
 = 0) {

772 
n_�
 = 0;

773 
i
 = 
��
->
gc_ϡ_�_�b_�dex
; i <��a->
gc_�loc_�b�_by�_�n
; i++) {

774 
	`MICROPY_GC_HOOK_LOOP
(
i
);

775 
by�
 
a
 = 
��
->
gc_�loc_�b�_��t
[
i
];

777 i�(
	`ATB_0_IS_FREE
(
a
)�{ i�(++
n_�
 >�
n_blocks
�{ 
i
 = i * 
BLOCKS_PER_ATB
 + 0; 
found
; } } {�_free = 0; }

778 i�(
	`ATB_1_IS_FREE
(
a
)�{ i�(++
n_�
 >�
n_blocks
�{ 
i
 = i * 
BLOCKS_PER_ATB
 + 1; 
found
; } } {�_free = 0; }

779 i�(
	`ATB_2_IS_FREE
(
a
)�{ i�(++
n_�
 >�
n_blocks
�{ 
i
 = i * 
BLOCKS_PER_ATB
 + 2; 
found
; } } {�_free = 0; }

780 i�(
	`ATB_3_IS_FREE
(
a
)�{ i�(++
n_�
 >�
n_blocks
�{ 
i
 = i * 
BLOCKS_PER_ATB
 + 3; 
found
; } } {�_free = 0; }

787 #i�
MICROPY_GC_SPLIT_HEAP


788 i�(
n_blocks
 == 1) {

789 
��
->
gc_ϡ_�_�b_�dex
 = (
i
 + 1�/ 
BLOCKS_PER_ATB
;

794 
	`GC_EXIT
();

796 i�(
c���ed
) {

797 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


798 i�(!
added
 && 
	`gc_�y_add_h�p
(
n_by�s
)) {

799 
added
 = 
�ue
;

803  
NULL
;

805 
	`DEBUG_��tf
("gc_�loc(" 
UINT_FMT
 "):��� mem,�rigg��g GC\n", 
n_by�s
);

806 
	`gc_c���
();

807 
c���ed
 = 1;

808 
	`GC_ENTER
();

812 
found
:

814 
�d_block
 = 
i
;

815 
��t_block
 = 
i
 - 
n_�
 + 1;

822 i�(
n_�
 == 1) {

823 #i�
MICROPY_GC_SPLIT_HEAP


824 
	`MP_STATE_MEM
(
gc_ϡ_�_��
��
��
;

826 
��
->
gc_ϡ_�_�b_�dex
 = (
i
 + 1�/ 
BLOCKS_PER_ATB
;

829 
��
->
gc_ϡ_u�d_block
 = 
	`MAX
׻a->gc_ϡ_u�d_block, 
�d_block
);

832 
	`ATB_FREE_TO_HEAD
(
��
, 
��t_block
);

836 
size_t
 
bl
 = 
��t_block
 + 1; b�<�
�d_block
; bl++) {

837 
	`ATB_FREE_TO_TAIL
(
��
, 
bl
);

842 *
�t_�r
 = (*)(
��
->
gc_po�_��t
 + 
��t_block
 * 
BYTES_PER_BLOCK
);

843 
	`DEBUG_��tf
("gc_�loc(%p)\n", 
�t_�r
);

845 #i�
MICROPY_GC_ALLOC_THRESHOLD


846 
	`MP_STATE_MEM
(
gc_�loc_amou�
�+�
n_blocks
;

849 
	`GC_EXIT
();

851 #i�
MICROPY_GC_CONSERVATIVE_CLEAR


853 
	`mem�t
((
by�
 *)
�t_�r
, 0, (
�d_block
 - 
��t_block
 + 1�* 
BYTES_PER_BLOCK
);

860 
	`mem�t
((
by�
 *)
�t_�r
 + 
n_by�s
, 0, (
�d_block
 - 
��t_block
 + 1�* 
BYTES_PER_BLOCK
 -�_bytes);

863 #i�
MICROPY_ENABLE_FINALISER


864 i�(
has_f��i�r
) {

866 ((
mp_obj_ba�_t
 *)
�t_�r
)->
ty�
 = 
NULL
;

868 
	`GC_ENTER
();

869 
	`FTB_SET
(
��
, 
��t_block
);

870 
	`GC_EXIT
();

873 ()
has_f��i�r
;

876 #i�
EXTENSIVE_HEAP_PROFILING


877 
	`gc_dump_�loc_�b�
(&
mp_��_��t
);

880  
�t_�r
;

881 
	}
}

885 
	$gc_�
(*
�r
) {

886 i�(
	`MP_STATE_THREAD
(
gc_lock_d�th
) > 0) {

893 
	`GC_ENTER
();

895 
	`DEBUG_��tf
("gc_�(%p)\n", 
�r
);

897 i�(
�r
 =�
NULL
) {

899 
	`GC_EXIT
();

904 
mp_��e_mem_��_t
 *
��
;

905 #i�
MICROPY_GC_SPLIT_HEAP


906 
��
 = 
	`gc_g�_�r_��
(
�r
);

907 
	`as��
(
��
);

909 
	`as��
(
	`VERIFY_PTR
(
�r
));

910 
��
 = &
	`MP_STATE_MEM
(area);

913 
size_t
 
block
 = 
	`BLOCK_FROM_PTR
(
��
, 
�r
);

914 
	`as��
(
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_HEAD
);

916 #i�
MICROPY_ENABLE_FINALISER


917 
	`FTB_CLEAR
(
��
, 
block
);

920 #i�
MICROPY_GC_SPLIT_HEAP


921 i�(
	`MP_STATE_MEM
(
gc_ϡ_�_��
�!�
��
) {

931 
	`MP_STATE_MEM
(
gc_ϡ_�_��
��&MP_STATE_MEM(
��
);

936 i�(
block
 / 
BLOCKS_PER_ATB
 < 
��
->
gc_ϡ_�_�b_�dex
) {

937 
��
->
gc_ϡ_�_�b_�dex
 = 
block
 / 
BLOCKS_PER_ATB
;

942 
	`ATB_ANY_TO_FREE
(
��
, 
block
);

943 
block
 += 1;

944 } 
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_TAIL
);

946 
	`GC_EXIT
();

948 #i�
EXTENSIVE_HEAP_PROFILING


949 
	`gc_dump_�loc_�b�
(&
mp_��_��t
);

951 
	}
}

953 
size_t
 
	$gc_nby�s
(cڡ *
�r
) {

954 
	`GC_ENTER
();

956 
mp_��e_mem_��_t
 *
��
;

957 #i�
MICROPY_GC_SPLIT_HEAP


958 
��
 = 
	`gc_g�_�r_��
(
�r
);

960 i�(
	`VERIFY_PTR
(
�r
)) {

961 
��
 = &
	`MP_STATE_MEM
(area);

963 
��
 = 
NULL
;

967 i�(
��
) {

968 
size_t
 
block
 = 
	`BLOCK_FROM_PTR
(
��
, 
�r
);

969 i�(
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_HEAD
) {

971 
size_t
 
n_blocks
 = 0;

973 
n_blocks
 += 1;

974 } 
	`ATB_GET_KIND
(
��
, 
block
 + 
n_blocks
�=�
AT_TAIL
);

975 
	`GC_EXIT
();

976  
n_blocks
 * 
BYTES_PER_BLOCK
;

981 
	`GC_EXIT
();

983 
	}
}

985 *
	$gc_��loc
(*
�r_�
, 
size_t
 
n_by�s
, 
bo�
 
�low_move
) {

987 i�(
�r_�
 =�
NULL
) {

988  
	`gc_�loc
(
n_by�s
, 
�l�
);

992 i�(
n_by�s
 == 0) {

993 
	`gc_�
(
�r_�
);

994  
NULL
;

997 i�(
	`MP_STATE_THREAD
(
gc_lock_d�th
) > 0) {

998  
NULL
;

1001 *
�r
 = 
�r_�
;

1003 
	`GC_ENTER
();

1006 
mp_��e_mem_��_t
 *
��
;

1007 #i�
MICROPY_GC_SPLIT_HEAP


1008 
��
 = 
	`gc_g�_�r_��
(
�r
);

1009 
	`as��
(
��
);

1011 
	`as��
(
	`VERIFY_PTR
(
�r
));

1012 
��
 = &
	`MP_STATE_MEM
(area);

1014 
size_t
 
block
 = 
	`BLOCK_FROM_PTR
(
��
, 
�r
);

1015 
	`as��
(
	`ATB_GET_KIND
(
��
, 
block
�=�
AT_HEAD
);

1018 
size_t
 
�w_blocks
 = (
n_by�s
 + 
BYTES_PER_BLOCK
 - 1) / BYTES_PER_BLOCK;

1026 
size_t
 
n_�
 = 0;

1027 
size_t
 
n_blocks
 = 1;

1028 
size_t
 
max_block
 = 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
;

1029 
size_t
 
bl
 = 
block
 + 
n_blocks
; b�< 
max_block
; bl++) {

1030 
by�
 
block_ty�
 = 
	`ATB_GET_KIND
(
��
, 
bl
);

1031 i�(
block_ty�
 =�
AT_TAIL
) {

1032 
n_blocks
++;

1035 i�(
block_ty�
 =�
AT_FREE
) {

1036 
n_�
++;

1037 i�(
n_blocks
 + 
n_�
 >�
�w_blocks
) {

1047 i�(
�w_blocks
 =�
n_blocks
) {

1048 
	`GC_EXIT
();

1049  
�r_�
;

1053 i�(
�w_blocks
 < 
n_blocks
) {

1055 
size_t
 
bl
 = 
block
 + 
�w_blocks
, 
cou�
 = 
n_blocks
 -�ew_blocks; count > 0; bl++, count--) {

1056 
	`ATB_ANY_TO_FREE
(
��
, 
bl
);

1059 #i�
MICROPY_GC_SPLIT_HEAP


1060 i�(
	`MP_STATE_MEM
(
gc_ϡ_�_��
�!�
��
) {

1062 
	`MP_STATE_MEM
(
gc_ϡ_�_��
��&MP_STATE_MEM(
��
);

1067 i�((
block
 + 
�w_blocks
�/ 
BLOCKS_PER_ATB
 < 
��
->
gc_ϡ_�_�b_�dex
) {

1068 
��
->
gc_ϡ_�_�b_�dex
 = (
block
 + 
�w_blocks
�/ 
BLOCKS_PER_ATB
;

1071 
	`GC_EXIT
();

1073 #i�
EXTENSIVE_HEAP_PROFILING


1074 
	`gc_dump_�loc_�b�
(&
mp_��_��t
);

1077  
�r_�
;

1081 i�(
�w_blocks
 <�
n_blocks
 + 
n_�
) {

1083 
size_t
 
�d_block
 = 
block
 + 
�w_blocks
;

1084 
size_t
 
bl
 = 
block
 + 
n_blocks
; b�< 
�d_block
; bl++) {

1085 
	`as��
(
	`ATB_GET_KIND
(
��
, 
bl
�=�
AT_FREE
);

1086 
	`ATB_FREE_TO_TAIL
(
��
, 
bl
);

1089 
��
->
gc_ϡ_u�d_block
 = 
	`MAX
׻a->gc_ϡ_u�d_block, 
�d_block
);

1091 
	`GC_EXIT
();

1093 #i�
MICROPY_GC_CONSERVATIVE_CLEAR


1095 
	`mem�t
((
by�
 *)
�r_�
 + 
n_blocks
 * 
BYTES_PER_BLOCK
, 0, (
�w_blocks
 -�_blocks) * BYTES_PER_BLOCK);

1098 
	`mem�t
((
by�
 *)
�r_�
 + 
n_by�s
, 0, 
�w_blocks
 * 
BYTES_PER_BLOCK
 -�_bytes);

1101 #i�
EXTENSIVE_HEAP_PROFILING


1102 
	`gc_dump_�loc_�b�
(&
mp_��_��t
);

1105  
�r_�
;

1108 #i�
MICROPY_ENABLE_FINALISER


1109 
bo�
 
�b_��e
 = 
	`FTB_GET
(
��
, 
block
);

1111 
bo�
 
�b_��e
 = 
�l�
;

1114 
	`GC_EXIT
();

1116 i�(!
�low_move
) {

1118  
NULL
;

1122 *
�r_out
 = 
	`gc_�loc
(
n_by�s
, 
�b_��e
);

1125 i�(
�r_out
 =�
NULL
) {

1126  
NULL
;

1129 
	`DEBUG_��tf
("gc_��loc(%�-> %p)\n", 
�r_�
, 
�r_out
);

1130 
	`mem�y
(
�r_out
, 
�r_�
, 
n_blocks
 * 
BYTES_PER_BLOCK
);

1131 
	`gc_�
(
�r_�
);

1132  
�r_out
;

1133 
	}
}

1135 
	$gc_dump_�fo
(cڡ 
mp_��t_t
 *
��t
) {

1136 
gc_�fo_t
 
�fo
;

1137 
	`gc_�fo
(&
�fo
);

1138 
	`mp_��tf
(
��t
, "GC:�otal: %u, used: %u, free: %u",

1139 (
u�t
)
�fo
.
tٮ
, (u�t)�fo.
u�d
, (u�t)�fo.
�
);

1140 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


1141 
	`mp_��tf
(
��t
, ", max�ew s��: %u", (
u�t
)
�fo
.
max_�w_�l�
);

1143 
	`mp_��tf
(
��t
, "\n No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u\n",

1144 (
u�t
)
�fo
.
num_1block
, (u�t)�fo.
num_2block
, (u�t)�fo.
max_block
, (u�t)�fo.
max_�
);

1145 
	}
}

1147 
	$gc_dump_�loc_�b�
(cڡ 
mp_��t_t
 *
��t
) {

1148 
	`GC_ENTER
();

1149 cڡ 
size_t
 
DUMP_BYTES_PER_LINE
 = 64;

1150 
mp_��e_mem_��_t
 *
��
 = &
	`MP_STATE_MEM
׻a);���!�
NULL
;����
	`NEXT_AREA
(area)) {

1151 #i�!
EXTENSIVE_HEAP_PROFILING


1154 
	`mp_��tf
(
��t
, "GC mem�y�ayout; from %p:", 
��
->
gc_po�_��t
);

1156 
size_t
 
bl
 = 0; b�< 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
; bl++) {

1157 i�(
bl
 % 
DUMP_BYTES_PER_LINE
 == 0) {

1161 
size_t
 
bl2
 = 
bl
;

1162 
bl2
 < 
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
 && 
	`ATB_GET_KIND
׻a, bl2�=�
AT_FREE
) {

1163 
bl2
++;

1165 i�(
bl2
 - 
bl
 >�2 * 
DUMP_BYTES_PER_LINE
) {

1167 
	`mp_��tf
(
��t
, "\� (%u��e����)", (
u�t
)(
bl2
 - 
bl
�/ 
DUMP_BYTES_PER_LINE
);

1168 
bl
 = 
bl2
 & (~(
DUMP_BYTES_PER_LINE
 - 1));

1169 i�(
bl
 >�
��
->
gc_�loc_�b�_by�_�n
 * 
BLOCKS_PER_ATB
) {

1177 
	`mp_��tf
(
��t
, "\n%08x: ", (
u�t
)(
bl
 * 
BYTES_PER_BLOCK
));

1179 
c
 = ' ';

1180 
	`ATB_GET_KIND
(
��
, 
bl
)) {

1181 
AT_FREE
:

1182 
c
 = '.';

1211 
AT_HEAD
: {

1212 **
�r
 = (**)(
��
->
gc_po�_��t
 + 
bl
 * 
BYTES_PER_BLOCK
);

1213 i�(*
�r
 =�&
mp_ty�_tu�e
) {

1214 
c
 = 'T';

1215 } i�(*
�r
 =�&
mp_ty�_li�
) {

1216 
c
 = 'L';

1217 } i�(*
�r
 =�&
mp_ty�_di�
) {

1218 
c
 = 'D';

1219 } i�(*
�r
 =�&
mp_ty�_�r
 || *��=�&
mp_ty�_by�s
) {

1220 
c
 = 'S';

1222 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


1223 i�(*
�r
 =�&
mp_ty�_by���y
) {

1224 
c
 = 'A';

1227 #i�
MICROPY_PY_ARRAY


1228 i�(*
�r
 =�&
mp_ty�_��y
) {

1229 
c
 = 'A';

1232 #i�
MICROPY_PY_BUILTINS_FLOAT


1233 i�(*
�r
 =�&
mp_ty�_��t
) {

1234 
c
 = 'F';

1237 i�(*
�r
 =�&
mp_ty�_fun_bc
) {

1238 
c
 = 'B';

1239 } i�(*
�r
 =�&
mp_ty�_modu�
) {

1240 
c
 = 'M';

1242 
c
 = 'h';

1247 
q�r_po�_t
 *
po�
 = 
	`MP_STATE_VM
(
ϡ_po�
); 
c
 =�'h' &&�o� !�
NULL
;�o� =�o�->
�ev
) {

1248 i�((
q�r_po�_t
 *)
�r
 =�
po�
) {

1249 
c
 = 'Q';

1252 cڡ 
by�
 **
q
 = 
po�
->
q�rs
, **
q_t�
 =�o�->q�r�+�o�->
�n
; q < q_top; q++) {

1253 i�((cڡ 
by�
 *)
�r
 =�*
q
) {

1254 
c
 = 'q';

1263 
AT_TAIL
:

1264 
c
 = '=';

1266 
AT_MARK
:

1267 
c
 = 'm';

1270 
	`mp_��tf
(
��t
, "%c", 
c
);

1272 
	`mp_��t_�r
(
��t
, "\n");

1274 
	`GC_EXIT
();

1275 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\gc.h

26 #i�de�
MICROPY_INCLUDED_PY_GC_H


27 
	#MICROPY_INCLUDED_PY_GC_H


	)

29 
	~<�dbo�.h
>

30 
	~<�ddef.h
>

31 
	~"py/m�r�t.h
"

33 
gc_��
(*
��t
, *
�d
);

35 #i�
MICROPY_GC_SPLIT_HEAP


37 
gc_add
(*
��t
, *
�d
);

39 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


42 
size_t
 
gc_g�_max_�w_�l�
();

48 
gc_lock
();

49 
gc_u�ock
();

50 
bo�
 
gc_is_locked
();

53 
gc_c���
();

54 
gc_c���_��t
();

55 
gc_c���_ro�
(**
�rs
, 
size_t
 
�n
);

56 
gc_c���_�d
();

59 
gc_sw�p_�l
();

62 
	mGC_ALLOC_FLAG_HAS_FINALISER
 = 1,

65 *
gc_�loc
(
size_t
 
n_by�s
, 
�loc_�ags
);

66 
gc_�
(*
�r
);

67 
size_t
 
gc_nby�s
(cڡ *
�r
);

68 *
gc_��loc
(*
�r
, 
size_t
 
n_by�s
, 
bo�
 
�low_move
);

70 
	s_gc_�fo_t
 {

71 
size_t
 
	mtٮ
;

72 
size_t
 
	mu�d
;

73 
size_t
 
	m�
;

74 
size_t
 
	mmax_�
;

75 
size_t
 
	mnum_1block
;

76 
size_t
 
	mnum_2block
;

77 
size_t
 
	mmax_block
;

78 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


79 
size_t
 
	mmax_�w_�l�
;

81 } 
	tgc_�fo_t
;

83 
gc_�fo
(
gc_�fo_t
 *
�fo
);

84 
gc_dump_�fo
(cڡ 
mp_��t_t
 *
��t
);

85 
gc_dump_�loc_�b�
(cڡ 
mp_��t_t
 *
��t
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\grammar.h

35 
DEF_RULE_NC
(
g��ic_c��_��
, 
�d_id�t
(2), 
tok
(
DEL_COLON
), 
	$ru�
(
��
))

36 
	`DEF_RULE_NC
(
g��ic_equ�_��
, 
	`�d_id�t
(2), 
	`tok
(
DEL_EQUAL
), 
	$ru�
(
��
))

47 
	`DEF_RULE_NC
(
s�g�_�put
, 
	`�
(3), 
	`tok
(
NEWLINE
), 
	`ru�
(
sim�e_�mt
), 
	$ru�
(
compound_�mt
))

48 
	`DEF_RULE
(
f�e_�put
, 
	`c
(
g��ic_�l_nodes
), 
	`�d_id�t
(1), 
	$�t_ru�
(
f�e_�put_2
))

49 
	`DEF_RULE
(
f�e_�put_2
, 
	`c
(
g��ic_�l_nodes
), 
�e_�_m�e
, 
	$ru�
(
f�e_�put_3
))

50 
	`DEF_RULE_NC
(
f�e_�put_3
, 
	`�
(2), 
	`tok
(
NEWLINE
), 
	$ru�
(
�mt
))

51 
	`DEF_RULE_NC
(
ev�_�put
, 
	`�d_id�t
(2), 
	`ru�
(
��li�
), 
	$�t_ru�
(
ev�_�put_2
))

52 
	`DEF_RULE_NC
(
ev�_�put_2
, 
	`�d
(1), 
	$tok
(
NEWLINE
))

65 
	`DEF_RULE_NC
(
decܩ�
, 
	`�d
(4), 
	`tok
(
OP_AT
), 
	`ru�
(
dًd_�me
), 
	`�t_ru�
(
�a��_��n
), 
	$tok
(
NEWLINE
))

66 
	`DEF_RULE_NC
(
decܩ�s
, 
�e_�_m�e
, 
	$ru�
(
decܩ�
))

67 
	`DEF_RULE
(
decܩed
, 
	`c
(decܩed), 
	`�d_id�t
(2), 
	`ru�
(
decܩ�s
), 
	$ru�
(
decܩed_body
))

68 #i�
MICROPY_PY_ASYNC_AWAIT


69 
	`DEF_RULE_NC
(
decܩed_body
, 
	`�
(3), 
	`ru�
(
�assdef
),�u�(
funcdef
), 
	$ru�
(
async_funcdef
))

70 
	`DEF_RULE_NC
(
async_funcdef
, 
	`�d
(2), 
	`tok
(
KW_ASYNC
), 
	$ru�
(
funcdef
))

72 
	`DEF_RULE_NC
(
decܩed_body
, 
	`�
(2), 
	`ru�
(
�assdef
), 
	$ru�
(
funcdef
))

74 
	`DEF_RULE
(
funcdef
, 
	`c
(funcdef), 
	`�d_b�nk
(8), 
	`tok
(
KW_DEF
),�ok(
NAME
),�ok(
DEL_PAREN_OPEN
), 
	`�t_ru�
(
ty�d�g�i�
),�ok(
DEL_PAREN_CLOSE
), o�_ru�(
funcde�ty�
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

75 
	`DEF_RULE_NC
(
funcde�ty�
, 
	`�d_id�t
(2), 
	`tok
(
DEL_MINUS_MORE
), 
	$ru�
(
��
))

77 
	`DEF_RULE_NC
(
ty�d�g�i�
, 
li�_w�h_�d
, 
	`ru�
(
ty�d�g�i�_�em
), 
	$tok
(
DEL_COMMA
))

78 
	`DEF_RULE_NC
(
ty�d�g�i�_�em
, 
	`�
(3), 
	`ru�
(
ty�d�g�i�_�me
),�u�(
ty�d�g�i�_��
), 
	$ru�
(
ty�d�g�i�_dbl_��
))

79 
	`DEF_RULE_NC
(
ty�d�g�i�_�me
, 
	`�d_id�t
(3), 
	`tok
(
NAME
), 
	`�t_ru�
(
g��ic_c��_��
), 
	$�t_ru�
(
g��ic_equ�_��
))

80 
	`DEF_RULE_NC
(
ty�d�g�i�_��
, 
	`�d
(2), 
	`tok
(
OP_STAR
), 
	$�t_ru�
(
t�def
))

81 
	`DEF_RULE_NC
(
ty�d�g�i�_dbl_��
, 
	`�d
(3), 
	`tok
(
OP_DBL_STAR
),�ok(
NAME
), 
	$�t_ru�
(
g��ic_c��_��
))

82 
	`DEF_RULE_NC
(
t�def
, 
	`�d
(2), 
	`tok
(
NAME
), 
	$�t_ru�
(
g��ic_c��_��
))

84 
	`DEF_RULE_NC
(
v��g�i�
, 
li�_w�h_�d
, 
	`ru�
(
v��g�i�_�em
), 
	$tok
(
DEL_COMMA
))

85 
	`DEF_RULE_NC
(
v��g�i�_�em
, 
	`�
(3), 
	`ru�
(
v��g�i�_�me
),�u�(
v��g�i�_��
), 
	$ru�
(
v��g�i�_dbl_��
))

86 
	`DEF_RULE_NC
(
v��g�i�_�me
, 
	`�d_id�t
(2), 
	`tok
(
NAME
), 
	$�t_ru�
(
g��ic_equ�_��
))

87 
	`DEF_RULE_NC
(
v��g�i�_��
, 
	`�d
(2), 
	`tok
(
OP_STAR
), 
	$�t_ru�
(
v�def
))

88 
	`DEF_RULE_NC
(
v��g�i�_dbl_��
, 
	`�d
(2), 
	`tok
(
OP_DBL_STAR
), 
	$tok
(
NAME
))

89 
	`DEF_RULE_NC
(
v�def
, 
	`�d_id�t
(1), 
	$tok
(
NAME
))

93 
	`DEF_RULE_NC
(
�mt
, 
	`�
(2), 
	`ru�
(
compound_�mt
), 
	$ru�
(
sim�e_�mt
))

97 
	`DEF_RULE_NC
(
sim�e_�mt
, 
	`�d_id�t
(2), 
	`ru�
(
sim�e_�mt_2
), 
	$tok
(
NEWLINE
))

98 
	`DEF_RULE
(
sim�e_�mt_2
, 
	`c
(
g��ic_�l_nodes
), 
li�_w�h_�d
, 
	`ru�
(
sm�l_�mt
), 
	$tok
(
DEL_SEMICOLON
))

107 
	`DEF_RULE_NC
(
sm�l_�mt
, 
	`�
(8), 
	`ru�
(
d�_�mt
),�u�(
�ss_�mt
),�u�(
�ow_�mt
),�u�(
imp�t_�mt
),�u�(
glob�_�mt
),�u�(
n�lo�l_�mt
),�u�(
as��_�mt
), 
	$ru�
(
ex�_�mt
))

108 
	`DEF_RULE
(
ex�_�mt
, 
	`c
�x�_�mt), 
	`�d
(2), 
	`ru�
(
��li�_��_ex�
), 
	$�t_ru�
(
ex�_�mt_2
))

109 
	`DEF_RULE_NC
(
ex�_�mt_2
, 
	`�
(3), 
	`ru�
(
��ssign
),�u�(
ex�_�mt_augassign
), 
	$ru�
(
ex�_�mt_assign_li�
))

110 
	`DEF_RULE_NC
(
ex�_�mt_augassign
, 
	`�d_id�t
(2), 
	`ru�
(
augassign
), 
	$ru�
(
ex�_�mt_6
))

111 
	`DEF_RULE_NC
(
ex�_�mt_assign_li�
, 
�e_�_m�e
, 
	$ru�
(
ex�_�mt_assign
))

112 
	`DEF_RULE_NC
(
ex�_�mt_assign
, 
	`�d_id�t
(2), 
	`tok
(
DEL_EQUAL
), 
	$ru�
(
ex�_�mt_6
))

113 
	`DEF_RULE_NC
(
ex�_�mt_6
, 
	`�
(2), 
	`ru�
(
y�ld_ex�
), 
	$ru�
(
��li�_��_ex�
))

114 
	`DEF_RULE
(
��li�_��_ex�
, 
	`c
(
g��ic_tu�e
), 
li�_w�h_�d
, 
	`ru�
(
��li�_��_ex�_2
), 
	$tok
(
DEL_COMMA
))

115 
	`DEF_RULE_NC
(
��li�_��_ex�_2
, 
	`�
(2), 
	`ru�
(
��_ex�
), 
	$ru�
(
��
))

116 
	`DEF_RULE_NC
(
��ssign
, 
	`�d
(3), 
	`tok
(
DEL_COLON
), 
	`ru�
(
��
), 
	$�t_ru�
(
ex�_�mt_assign
))

117 
	`DEF_RULE_NC
(
augassign
, 
	`�
(13), 
	`tok
(
DEL_PLUS_EQUAL
),�ok(
DEL_MINUS_EQUAL
),�ok(
DEL_STAR_EQUAL
),�ok(
DEL_AT_EQUAL
),�ok(
DEL_SLASH_EQUAL
),�ok(
DEL_PERCENT_EQUAL
),�ok(
DEL_AMPERSAND_EQUAL
),�ok(
DEL_PIPE_EQUAL
),�ok(
DEL_CARET_EQUAL
),�ok(
DEL_DBL_LESS_EQUAL
),�ok(
DEL_DBL_MORE_EQUAL
),�ok(
DEL_DBL_STAR_EQUAL
), 
	$tok
(
DEL_DBL_SLASH_EQUAL
))

128 
	`DEF_RULE
(
d�_�mt
, 
	`c
(d�_�mt), 
	`�d
(2), 
	`tok
(
KW_DEL
), 
	$ru�
(
ex�li�
))

129 
	`DEF_RULE
(
�ss_�mt
, 
	`c
(
g��ic_�l_nodes
), 
	`�d
(1), 
	$tok
(
KW_PASS
))

130 
	`DEF_RULE_NC
(
�ow_�mt
, 
	`�
(5), 
	`ru�
(
b�ak_�mt
),�u�(
c�t�ue_�mt
),�u�(
�tu�_�mt
),�u�(
�i�_�mt
), 
	$ru�
(
y�ld_�mt
))

131 
	`DEF_RULE
(
b�ak_�mt
, 
	`c
(
b�ak_c�t_�mt
), 
	`�d
(1), 
	$tok
(
KW_BREAK
))

132 
	`DEF_RULE
(
c�t�ue_�mt
, 
	`c
(
b�ak_c�t_�mt
), 
	`�d
(1), 
	$tok
(
KW_CONTINUE
))

133 
	`DEF_RULE
(
�tu�_�mt
, 
	`c
ԑu�_�mt), 
	`�d
(2), 
	`tok
(
KW_RETURN
), 
	$�t_ru�
(
��li�
))

134 
	`DEF_RULE
(
y�ld_�mt
, 
	`c
(y�ld_�mt), 
	`�d
(1), 
	$ru�
(
y�ld_ex�
))

135 
	`DEF_RULE
(
�i�_�mt
, 
	`c
�ai�_�mt), 
	`�d
(2), 
	`tok
(
KW_RAISE
), 
	$�t_ru�
(
�i�_�mt_�g
))

136 
	`DEF_RULE_NC
(
�i�_�mt_�g
, 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
�i�_�mt_�om
))

137 
	`DEF_RULE_NC
(
�i�_�mt_�om
, 
	`�d_id�t
(2), 
	`tok
(
KW_FROM
), 
	$ru�
(
��
))

151 
	`DEF_RULE_NC
(
imp�t_�mt
, 
	`�
(2), 
	`ru�
(
imp�t_�me
), 
	$ru�
(
imp�t_�om
))

152 
	`DEF_RULE
(
imp�t_�me
, 
	`c
(imp�t_�me), 
	`�d
(2), 
	`tok
(
KW_IMPORT
), 
	$ru�
(
dًd_as_�mes
))

153 
	`DEF_RULE
(
imp�t_�om
, 
	`c
(imp�t_�om), 
	`�d
(4), 
	`tok
(
KW_FROM
), 
	`ru�
(
imp�t_�om_2
),�ok(
KW_IMPORT
), 
	$ru�
(
imp�t_�om_3
))

154 
	`DEF_RULE_NC
(
imp�t_�om_2
, 
	`�
(2), 
	`ru�
(
dًd_�me
), 
	$ru�
(
imp�t_�om_2b
))

155 
	`DEF_RULE_NC
(
imp�t_�om_2b
, 
	`�d_id�t
(2), 
	`ru�
(
�e_�_m�e_�riod_�_�l�sis
), 
	$�t_ru�
(
dًd_�me
))

156 
	`DEF_RULE_NC
(
imp�t_�om_3
, 
	`�
(3), 
	`tok
(
OP_STAR
), 
	`ru�
(
imp�t_as_�mes_��n
), 
	$ru�
(
imp�t_as_�mes
))

157 
	`DEF_RULE_NC
(
imp�t_as_�mes_��n
, 
	`�d_id�t
(3), 
	`tok
(
DEL_PAREN_OPEN
), 
	`ru�
(
imp�t_as_�mes
), 
	$tok
(
DEL_PAREN_CLOSE
))

158 
	`DEF_RULE_NC
(
�e_�_m�e_�riod_�_�l�sis
, 
�e_�_m�e
, 
	$ru�
(
�riod_�_�l�sis
))

159 
	`DEF_RULE_NC
(
�riod_�_�l�sis
, 
	`�
(2), 
	`tok
(
DEL_PERIOD
), 
	$tok
(
ELLIPSIS
))

160 
	`DEF_RULE_NC
(
imp�t_as_�me
, 
	`�d
(2), 
	`tok
(
NAME
), 
	$�t_ru�
(
as_�me
))

161 
	`DEF_RULE_NC
(
dًd_as_�me
, 
	`�d_id�t
(2), 
	`ru�
(
dًd_�me
), 
	$�t_ru�
(
as_�me
))

162 
	`DEF_RULE_NC
(
as_�me
, 
	`�d_id�t
(2), 
	`tok
(
KW_AS
), 
	$tok
(
NAME
))

163 
	`DEF_RULE_NC
(
imp�t_as_�mes
, 
li�_w�h_�d
, 
	`ru�
(
imp�t_as_�me
), 
	$tok
(
DEL_COMMA
))

164 
	`DEF_RULE_NC
(
dًd_as_�mes
, 
li�
, 
	`ru�
(
dًd_as_�me
), 
	$tok
(
DEL_COMMA
))

165 
	`DEF_RULE_NC
(
dًd_�me
, 
li�
, 
	`tok
(
NAME
), 
	$tok
(
DEL_PERIOD
))

166 
	`DEF_RULE
(
glob�_�mt
, 
	`c
(
glob�_n�lo�l_�mt
), 
	`�d
(2), 
	`tok
(
KW_GLOBAL
), 
	$ru�
(
�me_li�
))

167 
	`DEF_RULE
(
n�lo�l_�mt
, 
	`c
(
glob�_n�lo�l_�mt
), 
	`�d
(2), 
	`tok
(
KW_NONLOCAL
), 
	$ru�
(
�me_li�
))

168 
	`DEF_RULE_NC
(
�me_li�
, 
li�
, 
	`tok
(
NAME
), 
	$tok
(
DEL_COMMA
))

169 
	`DEF_RULE
(
as��_�mt
, 
	`c
�s��_�mt), 
	`�d
(3), 
	`tok
(
KW_ASSERT
), 
	`ru�
(
��
), 
	$�t_ru�
(
as��_�mt_ex�a
))

170 
	`DEF_RULE_NC
(
as��_�mt_ex�a
, 
	`�d_id�t
(2), 
	`tok
(
DEL_COMMA
), 
	$ru�
(
��
))

184 #i�
MICROPY_PY_ASYNC_AWAIT


185 
	`DEF_RULE_NC
(
compound_�mt
, 
	`�
(9), 
	`ru�
(
if_�mt
),�u�(
wh�e_�mt
),�u�(
f�_�mt
),�u�(
�y_�mt
),�u�(
w�h_�mt
),�u�(
funcdef
),�u�(
�assdef
),�u�(
decܩed
), 
	$ru�
(
async_�mt
))

186 
	`DEF_RULE
(
async_�mt
, 
	`c
�sync_�mt), 
	`�d
(2), 
	`tok
(
KW_ASYNC
), 
	$ru�
(
async_�mt_2
))

187 
	`DEF_RULE_NC
(
async_�mt_2
, 
	`�
(3), 
	`ru�
(
funcdef
),�u�(
w�h_�mt
), 
	$ru�
(
f�_�mt
))

189 
	`DEF_RULE_NC
(
compound_�mt
, 
	`�
(8), 
	`ru�
(
if_�mt
),�u�(
wh�e_�mt
),�u�(
f�_�mt
),�u�(
�y_�mt
),�u�(
w�h_�mt
),�u�(
funcdef
),�u�(
�assdef
), 
	$ru�
(
decܩed
))

191 
	`DEF_RULE
(
if_�mt
, 
	`c
(if_�mt), 
	`�d
(6), 
	`tok
(
KW_IF
), 
	`ru�
(
�medex�_��
),�ok(
DEL_COLON
),�u�(
su�e
), 
	`�t_ru�
(
if_�mt_�if_li�
), 
	$�t_ru�
(
��_�mt
))

192 
	`DEF_RULE_NC
(
if_�mt_�if_li�
, 
�e_�_m�e
, 
	$ru�
(
if_�mt_�if
))

193 
	`DEF_RULE_NC
(
if_�mt_�if
, 
	`�d
(4), 
	`tok
(
KW_ELIF
), 
	`ru�
(
�medex�_��
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

194 
	`DEF_RULE
(
wh�e_�mt
, 
	`c
(wh�e_�mt), 
	`�d
(5), 
	`tok
(
KW_WHILE
), 
	`ru�
(
�medex�_��
),�ok(
DEL_COLON
),�u�(
su�e
), 
	$�t_ru�
(
��_�mt
))

195 
	`DEF_RULE
(
f�_�mt
, 
	`c
(f�_�mt), 
	`�d
(7), 
	`tok
(
KW_FOR
), 
	`ru�
(
ex�li�
),�ok(
KW_IN
),�u�(
��li�
),�ok(
DEL_COLON
),�u�(
su�e
), 
	$�t_ru�
(
��_�mt
))

196 
	`DEF_RULE
(
�y_�mt
, 
	`c
�ry_�mt), 
	`�d
(4), 
	`tok
(
KW_TRY
),�ok(
DEL_COLON
), 
	`ru�
(
su�e
), 
	$ru�
(
�y_�mt_2
))

197 
	`DEF_RULE_NC
(
�y_�mt_2
, 
	`�
(2), 
	`ru�
(
�y_�mt_ex��_�d_m�e
), 
	$ru�
(
�y_�mt_f��ly
))

198 
	`DEF_RULE_NC
(
�y_�mt_ex��_�d_m�e
, 
	`�d_id�t
(3), 
	`ru�
(
�y_�mt_ex��_li�
), 
	`�t_ru�
(
��_�mt
), 
	$�t_ru�
(
�y_�mt_f��ly
))

199 
	`DEF_RULE_NC
(
�y_�mt_ex��
, 
	`�d
(4), 
	`tok
(
KW_EXCEPT
), 
	`�t_ru�
(
�y_�mt_as_�me
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

200 
	`DEF_RULE_NC
(
�y_�mt_as_�me
, 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
as_�me
))

201 
	`DEF_RULE_NC
(
�y_�mt_ex��_li�
, 
�e_�_m�e
, 
	$ru�
(
�y_�mt_ex��
))

202 
	`DEF_RULE_NC
(
�y_�mt_f��ly
, 
	`�d
(3), 
	`tok
(
KW_FINALLY
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

203 
	`DEF_RULE_NC
(
��_�mt
, 
	`�d_id�t
(3), 
	`tok
(
KW_ELSE
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

204 
	`DEF_RULE
(
w�h_�mt
, 
	`c
(w�h_�mt), 
	`�d
(4), 
	`tok
(
KW_WITH
), 
	`ru�
(
w�h_�mt_li�
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

205 
	`DEF_RULE_NC
(
w�h_�mt_li�
, 
li�
, 
	`ru�
(
w�h_�em
), 
	$tok
(
DEL_COMMA
))

206 
	`DEF_RULE_NC
(
w�h_�em
, 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
w�h_�em_as
))

207 
	`DEF_RULE_NC
(
w�h_�em_as
, 
	`�d_id�t
(2), 
	`tok
(
KW_AS
), 
	$ru�
(
ex�
))

208 
	`DEF_RULE_NC
(
su�e
, 
	`�
(2), 
	`ru�
(
su�e_block
), 
	$ru�
(
sim�e_�mt
))

209 
	`DEF_RULE_NC
(
su�e_block
, 
	`�d_id�t
(4), 
	`tok
(
NEWLINE
),�ok(
INDENT
), 
	`ru�
(
su�e_block_�mts
), 
	$tok
(
DEDENT
))

210 
	`DEF_RULE
(
su�e_block_�mts
, 
	`c
(
g��ic_�l_nodes
), 
�e_�_m�e
, 
	$ru�
(
�mt
))

217 #i�
MICROPY_PY_ASSIGN_EXPR


218 
	`DEF_RULE
(
�medex�_��
, 
	`c
(
�medex�
), 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
�medex�_��_2
))

219 
	`DEF_RULE_NC
(
�medex�_��_2
, 
	`�d_id�t
(2), 
	`tok
(
OP_ASSIGN
), 
	$ru�
(
��
))

221 
	`DEF_RULE_NC
(
�medex�_��
, 
	`�
(1), 
	$ru�
(
��
))

223 
	`DEF_RULE_NC
(
��
, 
	`�
(2), 
	`ru�
(
�mbdef
), 
	$ru�
(
��_if_ex�
))

224 
	`DEF_RULE
(
��_if_ex�
, 
	`c
�e�_if_ex�), 
	`�d_id�t
(2), 
	`ru�
(
�_��
), 
	$�t_ru�
(
��_if_��
))

225 
	`DEF_RULE_NC
(
��_if_��
, 
	`�d
(4), 
	`tok
(
KW_IF
), 
	`ru�
(
�_��
),�ok(
KW_ELSE
), 
	$ru�
(
��
))

226 
	`DEF_RULE_NC
(
��_noc�d
, 
	`�
(2), 
	`ru�
(
�mbdef_noc�d
), 
	$ru�
(
�_��
))

227 
	`DEF_RULE
(
�mbdef
, 
	`c
�ambdef), 
	`�d_b�nk
(4), 
	`tok
(
KW_LAMBDA
), 
	`�t_ru�
(
v��g�i�
),�ok(
DEL_COLON
), 
	$ru�
(
��
))

228 
	`DEF_RULE
(
�mbdef_noc�d
, 
	`c
(
�mbdef
), 
	`�d_b�nk
(4), 
	`tok
(
KW_LAMBDA
), 
	`�t_ru�
(
v��g�i�
),�ok(
DEL_COLON
), 
	$ru�
(
��_noc�d
))

246 
	`DEF_RULE
(
�_��
, 
	`c
(
�_�d_��
), 
li�
, 
	`ru�
(
�d_��
), 
	$tok
(
KW_OR
))

247 
	`DEF_RULE
(
�d_��
, 
	`c
(
�_�d_��
), 
li�
, 
	`ru�
(
n�_��
), 
	$tok
(
KW_AND
))

248 
	`DEF_RULE_NC
(
n�_��
, 
	`�
(2), 
	`ru�
(
n�_��_2
), 
	$ru�
(
com�ris�
))

249 
	`DEF_RULE
(
n�_��_2
, 
	`c
��_��_2), 
	`�d
(2), 
	`tok
(
KW_NOT
), 
	$ru�
(
n�_��
))

250 
	`DEF_RULE
(
com�ris�
, 
	`c
(com�ris�), 
li�
, 
	`ru�
(
ex�
), 
	$ru�
(
comp_�
))

251 
	`DEF_RULE_NC
(
comp_�
, 
	`�
(9), 
	`tok
(
OP_LESS
),�ok(
OP_MORE
),�ok(
OP_DBL_EQUAL
),�ok(
OP_LESS_EQUAL
),�ok(
OP_MORE_EQUAL
),�ok(
OP_NOT_EQUAL
),�ok(
KW_IN
), 
	`ru�
(
comp_�_n�_�
), 
	$ru�
(
comp_�_is
))

252 
	`DEF_RULE_NC
(
comp_�_n�_�
, 
	`�d
(2), 
	`tok
(
KW_NOT
), 
	$tok
(
KW_IN
))

253 
	`DEF_RULE_NC
(
comp_�_is
, 
	`�d
(2), 
	`tok
(
KW_IS
), 
	$�t_ru�
(
comp_�_is_n�
))

254 
	`DEF_RULE_NC
(
comp_�_is_n�
, 
	`�d
(1), 
	$tok
(
KW_NOT
))

255 
	`DEF_RULE
(
��_ex�
, 
	`c
(��_ex�), 
	`�d
(2), 
	`tok
(
OP_STAR
), 
	$ru�
(
ex�
))

256 
	`DEF_RULE
(
ex�
, 
	`c
(
b��y_�
), 
li�
, 
	`ru�
(
x�_ex�
), 
	$tok
(
OP_PIPE
))

257 
	`DEF_RULE
(
x�_ex�
, 
	`c
(
b��y_�
), 
li�
, 
	`ru�
(
�d_ex�
), 
	$tok
(
OP_CARET
))

258 
	`DEF_RULE
(
�d_ex�
, 
	`c
(
b��y_�
), 
li�
, 
	`ru�
(
shi�_ex�
), 
	$tok
(
OP_AMPERSAND
))

259 
	`DEF_RULE
(
shi�_ex�
, 
	`c
(
�rm
), 
li�
, 
	`ru�
(
��h_ex�
), 
	$ru�
(
shi�_�
))

260 
	`DEF_RULE_NC
(
shi�_�
, 
	`�
(2), 
	`tok
(
OP_DBL_LESS
), 
	$tok
(
OP_DBL_MORE
))

261 
	`DEF_RULE
(
��h_ex�
, 
	`c
(
�rm
), 
li�
, 
	`ru�
єm), 
	$ru�
(
��h_�
))

262 
	`DEF_RULE_NC
(
��h_�
, 
	`�
(2), 
	`tok
(
OP_PLUS
), 
	$tok
(
OP_MINUS
))

263 
	`DEF_RULE
(
�rm
, 
	`c
єm), 
li�
, 
	`ru�
(
���
), 
	$ru�
(
�rm_�
))

264 
	`DEF_RULE_NC
(
�rm_�
, 
	`�
(5), 
	`tok
(
OP_STAR
),�ok(
OP_AT
),�ok(
OP_SLASH
),�ok(
OP_PERCENT
), 
	$tok
(
OP_DBL_SLASH
))

265 
	`DEF_RULE_NC
(
���
, 
	`�
(2), 
	`ru�
(
���_2
), 
	$ru�
(
pow�
))

266 
	`DEF_RULE
(
���_2
, 
	`c
(���_2), 
	`�d_id�t
(2), 
	`ru�
(
���_�
), 
	$ru�
(
���
))

267 
	`DEF_RULE_NC
(
���_�
, 
	`�
(3), 
	`tok
(
OP_PLUS
),�ok(
OP_MINUS
), 
	$tok
(
OP_TILDE
))

268 
	`DEF_RULE
(
pow�
, 
	`c
�ow�), 
	`�d_id�t
(2), 
	`ru�
(
�om_ex�
), 
	$�t_ru�
(
pow�_dbl_��
))

269 #i�
MICROPY_PY_ASYNC_AWAIT


270 
	`DEF_RULE_NC
(
�om_ex�
, 
	`�
(2), 
	`ru�
(
�om_ex�_awa�
), 
	$ru�
(
�om_ex�_n�m�
))

271 
	`DEF_RULE
(
�om_ex�_awa�
, 
	`c
�tom_ex�_awa�), 
	`�d
(3), 
	`tok
(
KW_AWAIT
), 
	`ru�
(
�om
), 
	$�t_ru�
(
�om_ex�_�a��s
))

273 
	`DEF_RULE_NC
(
�om_ex�
, 
	`�
(1), 
	$ru�
(
�om_ex�_n�m�
))

275 
	`DEF_RULE
(
�om_ex�_n�m�
, 
	`c
�tom_ex�_n�m�), 
	`�d_id�t
(2), 
	`ru�
(
�om
), 
	$�t_ru�
(
�om_ex�_�a��s
))

276 
	`DEF_RULE_NC
(
�om_ex�_�a��s
, 
�e_�_m�e
, 
	$ru�
(
�a��
))

277 
	`DEF_RULE_NC
(
pow�_dbl_��
, 
	`�d_id�t
(2), 
	`tok
(
OP_DBL_STAR
), 
	$ru�
(
���
))

283 
	`DEF_RULE_NC
(
�om
, 
	`�
(12), 
	`tok
(
NAME
),�ok(
INTEGER
),�ok(
FLOAT_OR_IMAG
),�ok(
STRING
),�ok(
BYTES
),�ok(
ELLIPSIS
),�ok(
KW_NONE
),�ok(
KW_TRUE
),�ok(
KW_FALSE
), 
	`ru�
(
�om_��n
),�u�(
�om_b�ck�
), 
	$ru�
(
�om_b��
))

284 
	`DEF_RULE
(
�om_��n
, 
	`c
�tom_��n), 
	`�d
(3), 
	`tok
(
DEL_PAREN_OPEN
), 
	`�t_ru�
(
�om_2b
), 
	$tok
(
DEL_PAREN_CLOSE
))

285 
	`DEF_RULE_NC
(
�om_2b
, 
	`�
(2), 
	`ru�
(
y�ld_ex�
), 
	$ru�
(
��li�_comp
))

286 
	`DEF_RULE
(
�om_b�ck�
, 
	`c
�tom_b�ck�), 
	`�d
(3), 
	`tok
(
DEL_BRACKET_OPEN
), 
	`�t_ru�
(
��li�_comp
), 
	$tok
(
DEL_BRACKET_CLOSE
))

287 
	`DEF_RULE
(
�om_b��
, 
	`c
�tom_b��), 
	`�d
(3), 
	`tok
(
DEL_BRACE_OPEN
), 
	`�t_ru�
(
di�ܣtmak�
), 
	$tok
(
DEL_BRACE_CLOSE
))

288 
	`DEF_RULE_NC
(
��li�_comp
, 
	`�d_id�t
(2), 
	`ru�
(
��li�_comp_2
), 
	$�t_ru�
(
��li�_comp_3
))

289 
	`DEF_RULE_NC
(
��li�_comp_2
, 
	`�
(2), 
	`ru�
(
��_ex�
), 
	$ru�
(
�medex�_��
))

290 
	`DEF_RULE_NC
(
��li�_comp_3
, 
	`�
(2), 
	`ru�
(
comp_f�
), 
	$ru�
(
��li�_comp_3b
))

291 
	`DEF_RULE_NC
(
��li�_comp_3b
, 
	`�d_id�t
(2), 
	`tok
(
DEL_COMMA
), 
	$�t_ru�
(
��li�_comp_3c
))

292 
	`DEF_RULE_NC
(
��li�_comp_3c
, 
li�_w�h_�d
, 
	`ru�
(
��li�_comp_2
), 
	$tok
(
DEL_COMMA
))

293 
	`DEF_RULE_NC
(
�a��
, 
	`�
(3), 
	`ru�
(
�a��_��n
),�u�(
�a��_b�ck�
), 
	$ru�
(
�a��_�riod
))

294 
	`DEF_RULE
(
�a��_��n
, 
	`c
ѿ��_��n), 
	`�d
(3), 
	`tok
(
DEL_PAREN_OPEN
), 
	`�t_ru�
(
�gli�
), 
	$tok
(
DEL_PAREN_CLOSE
))

295 
	`DEF_RULE
(
�a��_b�ck�
, 
	`c
ѿ��_b�ck�), 
	`�d
(3), 
	`tok
(
DEL_BRACKET_OPEN
), 
	`ru�
(
subs���i�
), 
	$tok
(
DEL_BRACKET_CLOSE
))

296 
	`DEF_RULE
(
�a��_�riod
, 
	`c
ѿ��_�riod), 
	`�d
(2), 
	`tok
(
DEL_PERIOD
), 
	$tok
(
NAME
))

302 #i�
MICROPY_PY_BUILTINS_SLICE


303 
	`DEF_RULE
(
subs���i�
, 
	`c
(
g��ic_tu�e
), 
li�_w�h_�d
, 
	`ru�
(
subs��t
), 
	$tok
(
DEL_COMMA
))

304 
	`DEF_RULE_NC
(
subs��t
, 
	`�
(2), 
	`ru�
(
subs��t_3
), 
	$ru�
(
subs��t_2
))

305 
	`DEF_RULE
(
subs��t_2
, 
	`c
(
subs��t
), 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
subs��t_3
))

306 
	`DEF_RULE
(
subs��t_3
, 
	`c
(
subs��t
), 
	`�d
(2), 
	`tok
(
DEL_COLON
), 
	$�t_ru�
(
subs��t_3b
))

307 
	`DEF_RULE_NC
(
subs��t_3b
, 
	`�
(2), 
	`ru�
(
subs��t_3c
), 
	$ru�
(
subs��t_3d
))

308 
	`DEF_RULE_NC
(
subs��t_3c
, 
	`�d
(2), 
	`tok
(
DEL_COLON
), 
	$�t_ru�
(
��
))

309 
	`DEF_RULE_NC
(
subs��t_3d
, 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
�i��
))

310 
	`DEF_RULE_NC
(
�i��
, 
	`�d
(2), 
	`tok
(
DEL_COLON
), 
	$�t_ru�
(
��
))

312 
	`DEF_RULE
(
subs���i�
, 
	`c
(
g��ic_tu�e
), 
li�_w�h_�d
, 
	`ru�
(
��
), 
	$tok
(
DEL_COMMA
))

319 
	`DEF_RULE_NC
(
ex�li�
, 
li�_w�h_�d
, 
	`ru�
(
ex�li�_2
), 
	$tok
(
DEL_COMMA
))

320 
	`DEF_RULE_NC
(
ex�li�_2
, 
	`�
(2), 
	`ru�
(
��_ex�
), 
	$ru�
(
ex�
))

321 
	`DEF_RULE
(
��li�
, 
	`c
(
g��ic_tu�e
), 
li�_w�h_�d
, 
	`ru�
(
��
), 
	$tok
(
DEL_COMMA
))

323 
	`DEF_RULE_NC
(
di�ܣtmak�
, 
	`�d_id�t
(2), 
	`ru�
(
di�ܣtmak�_�em
), 
	$�t_ru�
(
di�ܣtmak�_��
))

324 #i�
MICROPY_PY_BUILTINS_SET


325 
	`DEF_RULE
(
di�ܣtmak�_�em
, 
	`c
(di�ܣtmak�_�em), 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
g��ic_c��_��
))

327 
	`DEF_RULE
(
di�ܣtmak�_�em
, 
	`c
(di�ܣtmak�_�em), 
	`�d
(3), 
	`ru�
(
��
), 
	`tok
(
DEL_COLON
), 
	$ru�
(
��
))

329 
	`DEF_RULE_NC
(
di�ܣtmak�_��
, 
	`�
(2), 
	`ru�
(
comp_f�
), 
	$ru�
(
di�ܣtmak�_li�
))

330 
	`DEF_RULE_NC
(
di�ܣtmak�_li�
, 
	`�d
(2), 
	`tok
(
DEL_COMMA
), 
	$�t_ru�
(
di�ܣtmak�_li�2
))

331 
	`DEF_RULE_NC
(
di�ܣtmak�_li�2
, 
li�_w�h_�d
, 
	`ru�
(
di�ܣtmak�_�em
), 
	$tok
(
DEL_COMMA
))

335 
	`DEF_RULE
(
�assdef
, 
	`c
(�assdef), 
	`�d_b�nk
(5), 
	`tok
(
KW_CLASS
),�ok(
NAME
), 
	`�t_ru�
(
�assdef_2
),�ok(
DEL_COLON
), 
	$ru�
(
su�e
))

336 
	`DEF_RULE_NC
(
�assdef_2
, 
	`�d_id�t
(3), 
	`tok
(
DEL_PAREN_OPEN
), 
	`�t_ru�
(
�gli�
), 
	$tok
(
DEL_PAREN_CLOSE
))

341 
	`DEF_RULE_NC
(
�gli�
, 
li�_w�h_�d
, 
	`ru�
(
�gli�_2
), 
	$tok
(
DEL_COMMA
))

342 
	`DEF_RULE_NC
(
�gli�_2
, 
	`�
(3), 
	`ru�
(
�gli�_��
),�u�(
�gli�_dbl_��
), 
	$ru�
(
�gum�t
))

343 
	`DEF_RULE_NC
(
�gli�_��
, 
	`�d
(2), 
	`tok
(
OP_STAR
), 
	$ru�
(
��
))

344 
	`DEF_RULE_NC
(
�gli�_dbl_��
, 
	`�d
(2), 
	`tok
(
OP_DBL_STAR
), 
	$ru�
(
��
))

353 
	`DEF_RULE_NC
(
�gum�t
, 
	`�d_id�t
(2), 
	`ru�
(
��
), 
	$�t_ru�
(
�gum�t_2
))

354 #i�
MICROPY_PY_ASSIGN_EXPR


355 
	`DEF_RULE_NC
(
�gum�t_2
, 
	`�
(3), 
	`ru�
(
comp_f�
),�u�(
g��ic_equ�_��
), 
	$ru�
(
�gum�t_3
))

356 
	`DEF_RULE_NC
(
�gum�t_3
, 
	`�d
(2), 
	`tok
(
OP_ASSIGN
), 
	$ru�
(
��
))

358 
	`DEF_RULE_NC
(
�gum�t_2
, 
	`�
(2), 
	`ru�
(
comp_f�
), 
	$ru�
(
g��ic_equ�_��
))

360 
	`DEF_RULE_NC
(
comp_��
, 
	`�
(2), 
	`ru�
(
comp_f�
), 
	$ru�
(
comp_if
))

361 
	`DEF_RULE_NC
(
comp_f�
, 
	`�d_b�nk
(5), 
	`tok
(
KW_FOR
), 
	`ru�
(
ex�li�
),�ok(
KW_IN
),�u�(
�_��
), 
	$�t_ru�
(
comp_��
))

362 
	`DEF_RULE_NC
(
comp_if
, 
	`�d
(3), 
	`tok
(
KW_IF
), 
	`ru�
(
��_noc�d
), 
	$�t_ru�
(
comp_��
))

370 
	`DEF_RULE
(
y�ld_ex�
, 
	`c
(y�ld_ex�), 
	`�d
(2), 
	`tok
(
KW_YIELD
), 
	$�t_ru�
(
y�ld_�g
))

371 
	`DEF_RULE_NC
(
y�ld_�g
, 
	`�
(2), 
	`ru�
(
y�ld_�g_�om
), 
	$ru�
(
��li�
))

372 
	`DEF_RULE_NC
(
y�ld_�g_�om
, 
	`�d
(2), 
	`tok
(
KW_FROM
), 
	`ru�
(
��
))

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\lexer.c

27 
	~<�dio.h
>

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/�ad�.h
"

32 
	~"py/�x�.h
"

33 
	~"py/ru�ime.h
"

35 #i�
MICROPY_ENABLE_COMPILER


37 
	#TAB_SIZE
 (8)

	)

42 
	#MP_LEXER_EOF
 ((
unich�
)
MP_READER_EOF
)

	)

43 
	#CUR_CHAR
(
�x
�(�ex)->
chr0
)

	)

45 
bo�
 
	$is_�d
(
mp_�x�_t
 *
�x
) {

46  
�x
->
chr0
 =�
MP_LEXER_EOF
;

47 
	}
}

49 
bo�
 
	$is_physi�l_�wl�e
(
mp_�x�_t
 *
�x
) {

50  
�x
->
chr0
 == '\n';

51 
	}
}

53 
bo�
 
	$is_ch�
(
mp_�x�_t
 *
�x
, 
by�
 
c
) {

54  
�x
->
chr0
 =�
c
;

55 
	}
}

57 
bo�
 
	$is_ch�_�
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
) {

58  
�x
->
chr0
 =�
c1
 ||�ex->chr0 =�
c2
;

59 
	}
}

61 
bo�
 
	$is_ch�_�3
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
, by� 
c3
) {

62  
�x
->
chr0
 =�
c1
 ||�ex->chr0 =�
c2
 ||�ex->chr0 =�
c3
;

63 
	}
}

65 #i�
MICROPY_PY_FSTRINGS


66 
bo�
 
	$is_ch�_�4
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
, by� 
c3
, by� 
c4
) {

67  
�x
->
chr0
 =�
c1
 ||�ex->chr0 =�
c2
 ||�ex->chr0 =�
c3
 ||�ex->chr0 =�
c4
;

68 
	}
}

71 
bo�
 
	$is_ch�_f�low�g
(
mp_�x�_t
 *
�x
, 
by�
 
c
) {

72  
�x
->
chr1
 =�
c
;

73 
	}
}

75 
bo�
 
	$is_ch�_f�low�g_�
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
) {

76  
�x
->
chr1
 =�
c1
 ||�ex->chr1 =�
c2
;

77 
	}
}

79 
bo�
 
	$is_ch�_f�low�g_f�low�g_�
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
) {

80  
�x
->
chr2
 =�
c1
 ||�ex->chr2 =�
c2
;

81 
	}
}

83 
bo�
 
	$is_ch�_�d
(
mp_�x�_t
 *
�x
, 
by�
 
c1
, by� 
c2
) {

84  
�x
->
chr0
 =�
c1
 &&�ex->
chr1
 =�
c2
;

85 
	}
}

87 
bo�
 
	$is_wh�e�a�
(
mp_�x�_t
 *
�x
) {

88  
	`unich�_is�a�
(
�x
->
chr0
);

89 
	}
}

91 
bo�
 
	$is_ˉ�
(
mp_�x�_t
 *
�x
) {

92  
	`unich�_i��ha
(
�x
->
chr0
);

93 
	}
}

95 
bo�
 
	$is_dig�
(
mp_�x�_t
 *
�x
) {

96  
	`unich�_isdig�
(
�x
->
chr0
);

97 
	}
}

99 
bo�
 
	$is_f�low�g_dig�
(
mp_�x�_t
 *
�x
) {

100  
	`unich�_isdig�
(
�x
->
chr1
);

101 
	}
}

103 
bo�
 
	$is_f�low�g_ba�_ch�
(
mp_�x�_t
 *
�x
) {

104 cڡ 
unich�
 
chr1
 = 
�x
->chr1 | 0x20;

105  
chr1
 == 'b' || chr1 == 'o' || chr1 == 'x';

106 
	}
}

108 
bo�
 
	$is_f�low�g_odig�
(
mp_�x�_t
 *
�x
) {

109  
�x
->
chr1
 >= '0' &&�ex->chr1 <= '7';

110 
	}
}

112 
bo�
 
	$is_�r�g_�_by�s
(
mp_�x�_t
 *
�x
) {

113  
	`is_ch�_�
(
�x
, '\'', '\"')

114 #i�
MICROPY_PY_FSTRINGS


115 || (
	`is_ch�_�4
(
�x
, 'r', 'u', 'b', 'f'�&& 
	`is_ch�_f�low�g_�
(lex, '\'', '\"'))

116 || (((
	`is_ch�_�d
(
�x
, 'r', 'f') || is_char_and(lex, 'f', 'r'))

117 && 
	`is_ch�_f�low�g_f�low�g_�
(
�x
, '\'', '\"')))

119 || (
	`is_ch�_�3
(
�x
, 'r', 'u', 'b'�&& 
	`is_ch�_f�low�g_�
(lex, '\'', '\"'))

121 || ((
	`is_ch�_�d
(
�x
, 'r', 'b') || is_char_and(lex, 'b', 'r'))

122 && 
	`is_ch�_f�low�g_f�low�g_�
(
�x
, '\'', '\"'));

123 
	}
}

126 
bo�
 
	$is_h�d_of_id�tif�r
(
mp_�x�_t
 *
�x
) {

127  
	`is_ˉ�
(
�x
�||�ex->
chr0
 == '_' ||�ex->chr0 >= 0x80;

128 
	}
}

130 
bo�
 
	$is_��_of_id�tif�r
(
mp_�x�_t
 *
�x
) {

131  
	`is_h�d_of_id�tif�r
(
�x
�|| 
	`is_dig�
(lex);

132 
	}
}

134 
	$�xt_ch�
(
mp_�x�_t
 *
�x
) {

135 i�(
�x
->
chr0
 == '\n') {

137 ++
�x
->
l�e
;

138 
�x
->
c�umn
 = 1;

139 } i�(
�x
->
chr0
 == '\t') {

141 
�x
->
c�umn
 = ((�ex->c�um�- 1 + 
TAB_SIZE
) / TAB_SIZE) * TAB_SIZE) + 1;

144 ++
�x
->
c�umn
;

148 
�x
->
chr0
 =�ex->
chr1
;

149 
�x
->
chr1
 =�ex->
chr2
;

152 #i�
MICROPY_PY_FSTRINGS


153 i�(
�x
->
f�r�g_�gs_idx
) {

155 i�(
�x
->
f�r�g_�gs_idx
 <�ex->
f�r�g_�gs
.
�n
) {

156 
�x
->
chr2
 =�ex->
f�r�g_�gs
.
buf
[�x->
f�r�g_�gs_idx
++];

159 
�x
->
chr2
 = '\0';

162 i�(
�x
->
chr0
 == '\0') {

164 
�x
->
chr0
 =�ex->
chr0_�ved
;

165 
�x
->
chr1
 =�ex->
chr1_�ved
;

166 
�x
->
chr2
 =�ex->
chr2_�ved
;

168 
	`v�r_��t
(&
�x
->
f�r�g_�gs
);

169 
�x
->
f�r�g_�gs_idx
 = 0;

174 
�x
->
chr2
 =�ex->
�ad�
.
	`�adby�
�ex->�ad�.
d�a
);

177 i�(
�x
->
chr1
 == '\r') {

179 
�x
->
chr1
 = '\n';

180 i�(
�x
->
chr2
 == '\n') {

182 
�x
->
chr2
 =�ex->
�ad�
.
	`�adby�
�ex->�ad�.
d�a
);

187 i�(
�x
->
chr2
 =�
MP_LEXER_EOF
 &&�ex->
chr1
 != MP_LEXER_EOF &&�ex->chr1 != '\n') {

188 
�x
->
chr2
 = '\n';

190 
	}
}

192 
	$�d�t_push
(
mp_�x�_t
 *
�x
, 
size_t
 
�d�t
) {

193 i�(
�x
->
num_�d�t_�v�
 >��x->
�loc_�d�t_�v�
) {

194 
�x
->
�d�t_�v�
 = 
	`m_��w
(
u�t16_t
,�ex->�d�t_�v�,�ex->
�loc_�d�t_�v�
,�ex->�loc_�d�t_�v� + 
MICROPY_ALLOC_LEXEL_INDENT_INC
);

195 
�x
->
�loc_�d�t_�v�
 +�
MICROPY_ALLOC_LEXEL_INDENT_INC
;

197 
�x
->
�d�t_�v�
[�x->
num_�d�t_�v�
++] = 
�d�t
;

198 
	}
}

200 
size_t
 
	$�d�t_t�
(
mp_�x�_t
 *
�x
) {

201  
�x
->
�d�t_�v�
[�x->
num_�d�t_�v�
 - 1];

202 
	}
}

204 
	$�d�t_p�
(
mp_�x�_t
 *
�x
) {

205 
�x
->
num_�d�t_�v�
 -= 1;

206 
	}
}

214 cڡ *cڡ 
	gtok_�c
 =

231 cڡ 
u�t8_t
 
	gtok_�c_k�d
[] = {

232 
MP_TOKEN_DEL_PAREN_OPEN
, 
MP_TOKEN_DEL_PAREN_CLOSE
,

233 
MP_TOKEN_DEL_BRACKET_OPEN
, 
MP_TOKEN_DEL_BRACKET_CLOSE
,

234 
MP_TOKEN_DEL_BRACE_OPEN
, 
MP_TOKEN_DEL_BRACE_CLOSE
,

235 
MP_TOKEN_DEL_COMMA
, 
MP_TOKEN_DEL_SEMICOLON
, 
MP_TOKEN_OP_TILDE
,

237 
MP_TOKEN_DEL_COLON
, 
MP_TOKEN_OP_ASSIGN
,

238 
MP_TOKEN_OP_LESS
, 
MP_TOKEN_OP_LESS_EQUAL
, 
MP_TOKEN_OP_DBL_LESS
, 
MP_TOKEN_DEL_DBL_LESS_EQUAL
,

239 
MP_TOKEN_OP_MORE
, 
MP_TOKEN_OP_MORE_EQUAL
, 
MP_TOKEN_OP_DBL_MORE
, 
MP_TOKEN_DEL_DBL_MORE_EQUAL
,

240 
MP_TOKEN_OP_STAR
, 
MP_TOKEN_DEL_STAR_EQUAL
, 
MP_TOKEN_OP_DBL_STAR
, 
MP_TOKEN_DEL_DBL_STAR_EQUAL
,

241 
MP_TOKEN_OP_PLUS
, 
MP_TOKEN_DEL_PLUS_EQUAL
,

242 
MP_TOKEN_OP_MINUS
, 
MP_TOKEN_DEL_MINUS_EQUAL
, 
MP_TOKEN_DEL_MINUS_MORE
,

243 
MP_TOKEN_OP_AMPERSAND
, 
MP_TOKEN_DEL_AMPERSAND_EQUAL
,

244 
MP_TOKEN_OP_PIPE
, 
MP_TOKEN_DEL_PIPE_EQUAL
,

245 
MP_TOKEN_OP_SLASH
, 
MP_TOKEN_DEL_SLASH_EQUAL
, 
MP_TOKEN_OP_DBL_SLASH
, 
MP_TOKEN_DEL_DBL_SLASH_EQUAL
,

246 
MP_TOKEN_OP_PERCENT
, 
MP_TOKEN_DEL_PERCENT_EQUAL
,

247 
MP_TOKEN_OP_CARET
, 
MP_TOKEN_DEL_CARET_EQUAL
,

248 
MP_TOKEN_OP_AT
, 
MP_TOKEN_DEL_AT_EQUAL
,

249 
MP_TOKEN_DEL_EQUAL
, 
MP_TOKEN_OP_DBL_EQUAL
,

254 cڡ *cڡ 
	gtok_kw
[] = {

262 #i�
MICROPY_PY_ASYNC_AWAIT


298 
bo�
 
	$g�_hex
(
mp_�x�_t
 *
�x
, 
size_t
 
num_dig�s
, 
mp_u�t_t
 *
�su�
) {

299 
mp_u�t_t
 
num
 = 0;

300 
num_dig�s
-- != 0) {

301 
	`�xt_ch�
(
�x
);

302 
unich�
 
c
 = 
	`CUR_CHAR
(
�x
);

303 i�(!
	`unich�_isxdig�
(
c
)) {

304  
�l�
;

306 
num
 = (num << 4�+ 
	`unich�_xdig�_v�ue
(
c
);

308 *
�su�
 = 
num
;

309  
�ue
;

310 
	}
}

312 
	$�r�_�r�g_l���
(
mp_�x�_t
 *
�x
, 
bo�
 
is_�w
, bo� 
is_f�r�g
) {

314 
qu�e_ch�
 = '\'';

315 i�(
	`is_ch�
(
�x
, '\"')) {

316 
qu�e_ch�
 = '\"';

318 
	`�xt_ch�
(
�x
);

321 
size_t
 
num_qu�es
;

322 i�(
	`is_ch�_�d
(
�x
, 
qu�e_ch�
, quote_char)) {

324 
	`�xt_ch�
(
�x
);

325 
	`�xt_ch�
(
�x
);

326 
num_qu�es
 = 3;

329 
num_qu�es
 = 1;

332 
size_t
 
n_�os�g
 = 0;

333 #i�
MICROPY_PY_FSTRINGS


334 i�(
is_f�r�g
) {

341 i�(
	`v�r_�n
(&
�x
->
f�r�g_�gs
) == 0) {

342 
	`v�r_add_�r
(&
�x
->
f�r�g_�gs
, ".format(");

347 !
	`is_�d
(
�x
�&& (
num_qu�es
 > 1 || !
	`is_ch�
�ex, '\n')�&& 
n_�os�g
 <�um_quotes) {

348 i�(
	`is_ch�
(
�x
, 
qu�e_ch�
)) {

349 
n_�os�g
 += 1;

350 
	`v�r_add_ch�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

352 
n_�os�g
 = 0;

354 #i�
MICROPY_PY_FSTRINGS


355 
is_f�r�g
 && 
	`is_ch�
(
�x
, '{')) {

356 
	`�xt_ch�
(
�x
);

357 i�(
	`is_ch�
(
�x
, '{')) {

359 
	`v�r_add_by�
(&
�x
->
v�r
, '{');

360 
	`�xt_ch�
(
�x
);

364 
	`v�r_add_by�
(&
�x
->
f�r�g_�gs
, '(');

366 
size_t
 
i
 = 
�x
->
f�r�g_�gs
.
�n
;

379 
áed_b�ck�_�v�
 = 0;

380 !
	`is_�d
(
�x
�&& (
áed_b�ck�_�v�
 != 0

381 || !(
	`is_ch�_�
(
�x
, ':', '}')

382 || (
	`is_ch�
(
�x
, '!')

383 && 
	`is_ch�_f�low�g_�
(
�x
, 'r', 's')

384 && 
	`is_ch�_f�low�g_f�low�g_�
(
�x
, ':', '}'))))

386 
unich�
 
c
 = 
	`CUR_CHAR
(
�x
);

387 i�(
c
 == '[' || c == '{') {

388 
áed_b�ck�_�v�
 += 1;

389 } i�(
c
 == ']' || c == '}') {

390 
áed_b�ck�_�v�
 -= 1;

393 
	`v�r_add_by�
(&
�x
->
f�r�g_�gs
, 
c
);

394 
	`�xt_ch�
(
�x
);

396 i�(
�x
->
f�r�g_�gs
.
buf
[�x->f�r�g_�gs.
�n
 - 1] == '=') {

399 
	`v�r_add_��
(&
�x
->
v�r
,�ex->
f�r�g_�gs
.
buf
 + 
i
,�ex->f�r�g_�gs.
�n
 - i);

401 
�x
->
f�r�g_�gs
.
�n
--;

404 
	`v�r_add_by�
(&
�x
->
f�r�g_�gs
, ')');

406 
	`v�r_add_by�
(&
�x
->
f�r�g_�gs
, ',');

408 
	`v�r_add_by�
(&
�x
->
v�r
, '{');

412 i�(
	`is_ch�
(
�x
, '\\')) {

413 
	`�xt_ch�
(
�x
);

414 
unich�
 
c
 = 
	`CUR_CHAR
(
�x
);

415 i�(
is_�w
) {

417 
	`v�r_add_ch�
(&
�x
->
v�r
, '\\');

419 
c
) {

423 
c
 = 
MP_LEXER_EOF
;

432 
c
 = 0x07;

435 
c
 = 0x08;

438 
c
 = 0x09;

441 
c
 = 0x0a;

444 
c
 = 0x0b;

447 
c
 = 0x0c;

450 
c
 = 0x0d;

454 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_BYTES
) {

456 
	`v�r_add_ch�
(&
�x
->
v�r
, '\\');

460 
MP_FALLTHROUGH


462 
mp_u�t_t
 
num
 = 0;

463 i�(!
	`g�_hex
(
�x
, (
c
 =�'x' ? 2 : c =�'u' ? 4 : 8), &
num
)) {

465 
�x
->
tok_k�d
 = 
MP_TOKEN_INVALID
;

467 
c
 = 
num
;

476 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("unicode�ame�scapes"));

479 i�(
c
 >= '0' && c <= '7') {

481 
size_t
 
dig�s
 = 3;

482 
mp_u�t_t
 
num
 = 
c
 - '0';

483 
	`is_f�low�g_odig�
(
�x
�&& --
dig�s
 != 0) {

484 
	`�xt_ch�
(
�x
);

485 
num
 =�um * 8 + (
	`CUR_CHAR
(
�x
) - '0');

487 
c
 = 
num
;

490 
	`v�r_add_ch�
(&
�x
->
v�r
, '\\');

495 i�(
c
 !�
MP_LEXER_EOF
) {

496 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


497 i�(
c
 < 0x110000 && 
�x
->
tok_k�d
 =�
MP_TOKEN_STRING
) {

499 
	`v�r_add_ch�
(&
�x
->
v�r
, 
c
);

500 } i�(
c
 < 0x100 && 
�x
->
tok_k�d
 =�
MP_TOKEN_BYTES
) {

502 
	`v�r_add_by�
(&
�x
->
v�r
, 
c
);

505 i�(
c
 < 0x100) {

507 
	`v�r_add_by�
(&
�x
->
v�r
, 
c
);

512 
�x
->
tok_k�d
 = 
MP_TOKEN_INVALID
;

518 
	`v�r_add_by�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

521 
	`�xt_ch�
(
�x
);

525 i�(
n_�os�g
 < 
num_qu�es
) {

526 
�x
->
tok_k�d
 = 
MP_TOKEN_LONELY_STRING_OPEN
;

530 
	`v�r_cut_��_by�s
(&
�x
->
v�r
, 
n_�os�g
);

531 
	}
}

535 
bo�
 
	$sk�_wh�e�a�
(
mp_�x�_t
 *
�x
, 
bo�
 
��_�_�wl�e
) {

536 !
	`is_�d
(
�x
)) {

537 i�(
	`is_physi�l_�wl�e
(
�x
)) {

538 i�(
��_�_�wl�e
 && 
�x
->
áed_b�ck�_�v�
 == 0) {

539  
�ue
;

541 
	`�xt_ch�
(
�x
);

542 } i�(
	`is_wh�e�a�
(
�x
)) {

543 
	`�xt_ch�
(
�x
);

544 } i�(
	`is_ch�
(
�x
, '#')) {

545 
	`�xt_ch�
(
�x
);

546 !
	`is_�d
(
�x
�&& !
	`is_physi�l_�wl�e
(lex)) {

547 
	`�xt_ch�
(
�x
);

550 } i�(
	`is_ch�_�d
(
�x
, '\\', '\n')) {

552 
	`�xt_ch�
(
�x
);

553 
	`�xt_ch�
(
�x
);

558  
�l�
;

559 
	}
}

561 
	$mp_�x�_to_�xt
(
mp_�x�_t
 *
�x
) {

562 #i�
MICROPY_PY_FSTRINGS


563 i�(
�x
->
f�r�g_�gs
.
�n
 &&�ex->
f�r�g_�gs_idx
 == 0) {

566 
	`v�r_add_by�
(&
�x
->
f�r�g_�gs
, ')');

567 
�x
->
chr0_�ved
 =�ex->
chr0
;

568 
�x
->
chr1_�ved
 =�ex->
chr1
;

569 
�x
->
chr2_�ved
 =�ex->
chr2
;

570 
�x
->
chr0
 =�ex->
f�r�g_�gs
.
buf
[0];

571 
�x
->
chr1
 =�ex->
f�r�g_�gs
.
buf
[1];

572 
�x
->
chr2
 =�ex->
f�r�g_�gs
.
buf
[2];

575 
�x
->
f�r�g_�gs_idx
 = 3;

580 
	`v�r_��t
(&
�x
->
v�r
);

586 
bo�
 
had_physi�l_�wl�e
 = 
	`sk�_wh�e�a�
(
�x
, 
�ue
);

589 
�x
->
tok_l�e
 =�ex->
l�e
;

590 
�x
->
tok_c�umn
 =�ex->
c�umn
;

592 i�(
�x
->
em�_d�t
 < 0) {

593 
�x
->
tok_k�d
 = 
MP_TOKEN_DEDENT
;

594 
�x
->
em�_d�t
 += 1;

596 } i�(
�x
->
em�_d�t
 > 0) {

597 
�x
->
tok_k�d
 = 
MP_TOKEN_INDENT
;

598 
�x
->
em�_d�t
 -= 1;

600 } i�(
had_physi�l_�wl�e
) {

604 
	`sk�_wh�e�a�
(
�x
, 
�l�
);

606 
�x
->
tok_k�d
 = 
MP_TOKEN_NEWLINE
;

608 
size_t
 
num_�a�s
 = 
�x
->
c�umn
 - 1;

609 i�(
num_�a�s
 =�
	`�d�t_t�
(
�x
)) {

610 } i�(
num_�a�s
 > 
	`�d�t_t�
(
�x
)) {

611 
	`�d�t_push
(
�x
, 
num_�a�s
);

612 
�x
->
em�_d�t
 += 1;

614 
num_�a�s
 < 
	`�d�t_t�
(
�x
)) {

615 
	`�d�t_p�
(
�x
);

616 
�x
->
em�_d�t
 -= 1;

618 i�(
num_�a�s
 !�
	`�d�t_t�
(
�x
)) {

619 
�x
->
tok_k�d
 = 
MP_TOKEN_DEDENT_MISMATCH
;

623 } i�(
	`is_�d
(
�x
)) {

624 
�x
->
tok_k�d
 = 
MP_TOKEN_END
;

626 } i�(
	`is_�r�g_�_by�s
(
�x
)) {

636 
�x
->
tok_k�d
 = 
MP_TOKEN_END
;

641 
bo�
 
is_�w
 = 
�l�
;

642 
bo�
 
is_f�r�g
 = 
�l�
;

643 
mp_tok�_k�d_t
 
k�d
 = 
MP_TOKEN_STRING
;

644 
n_ch�
 = 0;

645 i�(
	`is_ch�
(
�x
, 'u')) {

646 
n_ch�
 = 1;

647 } i�(
	`is_ch�
(
�x
, 'b')) {

648 
k�d
 = 
MP_TOKEN_BYTES
;

649 
n_ch�
 = 1;

650 i�(
	`is_ch�_f�low�g
(
�x
, 'r')) {

651 
is_�w
 = 
�ue
;

652 
n_ch�
 = 2;

654 } i�(
	`is_ch�
(
�x
, 'r')) {

655 
is_�w
 = 
�ue
;

656 
n_ch�
 = 1;

657 i�(
	`is_ch�_f�low�g
(
�x
, 'b')) {

658 
k�d
 = 
MP_TOKEN_BYTES
;

659 
n_ch�
 = 2;

661 #i�
MICROPY_PY_FSTRINGS


662 i�(
	`is_ch�_f�low�g
(
�x
, 'f')) {

663 
is_f�r�g
 = 
�ue
;

664 
n_ch�
 = 2;

668 #i�
MICROPY_PY_FSTRINGS


669 i�(
	`is_ch�
(
�x
, 'f')) {

670 
is_f�r�g
 = 
�ue
;

671 
n_ch�
 = 1;

672 i�(
	`is_ch�_f�low�g
(
�x
, 'r')) {

673 
is_�w
 = 
�ue
;

674 
n_ch�
 = 2;

680 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_END
) {

681 
�x
->
tok_k�d
 = 
k�d
;

682 } i�(
�x
->
tok_k�d
 !�
k�d
) {

688 i�(
n_ch�
 != 0) {

689 
	`�xt_ch�
(
�x
);

690 i�(
n_ch�
 == 2) {

691 
	`�xt_ch�
(
�x
);

696 
	`�r�_�r�g_l���
(
�x
, 
is_�w
, 
is_f�r�g
);

699 
	`sk�_wh�e�a�
(
�x
, 
�ue
);

701 } 
	`is_�r�g_�_by�s
(
�x
));

703 } i�(
	`is_h�d_of_id�tif�r
(
�x
)) {

704 
�x
->
tok_k�d
 = 
MP_TOKEN_NAME
;

707 
	`v�r_add_by�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

708 
	`�xt_ch�
(
�x
);

711 !
	`is_�d
(
�x
�&& 
	`is_��_of_id�tif�r
(lex)) {

712 
	`v�r_add_by�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

713 
	`�xt_ch�
(
�x
);

720 cڡ *
s
 = 
	`v�r_nu�_�rm��ed_�r
(&
�x
->
v�r
);

721 
size_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
tok_kw
); i++) {

722 
cmp
 = 
	`�rcmp
(
s
, 
tok_kw
[
i
]);

723 i�(
cmp
 == 0) {

724 
�x
->
tok_k�d
 = 
MP_TOKEN_KW_FALSE
 + 
i
;

725 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_KW___DEBUG__
) {

726 
�x
->
tok_k�d
 = (
	`MP_STATE_VM
(
mp_�timi�_v�ue
�=�0 ? 
MP_TOKEN_KW_TRUE
 : 
MP_TOKEN_KW_FALSE
);

729 } i�(
cmp
 < 0) {

735 } i�(
	`is_dig�
(
�x
�|| (
	`is_ch�
�ex, '.'�&& 
	`is_f�low�g_dig�
(lex))) {

736 
bo�
 
f��d_��g�
 = 
�l�
;

737 i�(
	`is_ch�
(
�x
, '.')) {

738 
�x
->
tok_k�d
 = 
MP_TOKEN_FLOAT_OR_IMAG
;

740 
�x
->
tok_k�d
 = 
MP_TOKEN_INTEGER
;

741 i�(
	`is_ch�
(
�x
, '0'�&& 
	`is_f�low�g_ba�_ch�
(lex)) {

742 
f��d_��g�
 = 
�ue
;

747 
	`v�r_add_ch�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

748 
	`�xt_ch�
(
�x
);

751 !
	`is_�d
(
�x
)) {

752 i�(!
f��d_��g�
 && 
	`is_ch�_�
(
�x
, 'e', 'E')) {

753 
�x
->
tok_k�d
 = 
MP_TOKEN_FLOAT_OR_IMAG
;

754 
	`v�r_add_ch�
(&
�x
->
v�r
, 'e');

755 
	`�xt_ch�
(
�x
);

756 i�(
	`is_ch�
(
�x
, '+') || is_char(lex, '-')) {

757 
	`v�r_add_ch�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

758 
	`�xt_ch�
(
�x
);

760 } i�(
	`is_ˉ�
(
�x
�|| 
	`is_dig�
�ex�|| 
	`is_ch�
(lex, '.')) {

761 i�(
	`is_ch�_�3
(
�x
, '.', 'j', 'J')) {

762 
�x
->
tok_k�d
 = 
MP_TOKEN_FLOAT_OR_IMAG
;

764 
	`v�r_add_ch�
(&
�x
->
v�r
, 
	`CUR_CHAR
(lex));

765 
	`�xt_ch�
(
�x
);

766 } i�(
	`is_ch�
(
�x
, '_')) {

767 
	`�xt_ch�
(
�x
);

777 
	`MP_STATIC_ASSERT
(
MP_TOKEN_NUMBER_OF
 <= 256);

779 cڡ *
t
 = 
tok_�c
;

780 
size_t
 
tok_�c_�dex
 = 0;

781 ; *
t
 !�0 && !
	`is_ch�
(
�x
, *t);� += 1) {

782 i�(*
t
 == 'e' || *t == 'c') {

783 
t
 += 1;

785 
tok_�c_�dex
 += 1;

788 
	`�xt_ch�
(
�x
);

790 i�(*
t
 == 0) {

792 
�x
->
tok_k�d
 = 
MP_TOKEN_INVALID
;

794 } i�(*
t
 == '!') {

796 i�(
	`is_ch�
(
�x
, '=')) {

797 
	`�xt_ch�
(
�x
);

798 
�x
->
tok_k�d
 = 
MP_TOKEN_OP_NOT_EQUAL
;

800 
�x
->
tok_k�d
 = 
MP_TOKEN_INVALID
;

803 } i�(*
t
 == '.') {

805 i�(
	`is_ch�_�d
(
�x
, '.', '.')) {

806 
	`�xt_ch�
(
�x
);

807 
	`�xt_ch�
(
�x
);

808 
�x
->
tok_k�d
 = 
MP_TOKEN_ELLIPSIS
;

810 
�x
->
tok_k�d
 = 
MP_TOKEN_DEL_PERIOD
;

817 
t
 += 1;

818 
size_t
 
t_�dex
 = 
tok_�c_�dex
;

819 *
t
 == 'c' || *t == 'e') {

820 
t_�dex
 += 1;

821 i�(
	`is_ch�
(
�x
, 
t
[1])) {

822 
	`�xt_ch�
(
�x
);

823 
tok_�c_�dex
 = 
t_�dex
;

824 i�(*
t
 == 'e') {

827 } i�(*
t
 == 'c') {

830 
t
 += 2;

834 
�x
->
tok_k�d
 = 
tok_�c_k�d
[
tok_�c_�dex
];

837 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_DEL_PAREN_OPEN
 ||�ex->tok_k�d =�
MP_TOKEN_DEL_BRACKET_OPEN
 ||�ex->tok_k�d =�
MP_TOKEN_DEL_BRACE_OPEN
) {

838 
�x
->
áed_b�ck�_�v�
 += 1;

839 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_DEL_PAREN_CLOSE
 ||�ex->tok_k�d =�
MP_TOKEN_DEL_BRACKET_CLOSE
 ||�ex->tok_k�d =�
MP_TOKEN_DEL_BRACE_CLOSE
) {

840 
�x
->
áed_b�ck�_�v�
 -= 1;

844 
	}
}

846 
mp_�x�_t
 *
	$mp_�x�_�w
(
q�r
 
�c_�me
, 
mp_�ad�_t
 
�ad�
) {

847 
mp_�x�_t
 *
�x
 = 
	`m_�w_obj
(mp_lexer_t);

849 
�x
->
sour�_�me
 = 
�c_�me
;

850 
�x
->
�ad�
 =�eader;

851 
�x
->
l�e
 = 1;

852 
�x
->
c�umn
 = (
size_t
)-2;

853 
�x
->
em�_d�t
 = 0;

854 
�x
->
áed_b�ck�_�v�
 = 0;

855 
�x
->
�loc_�d�t_�v�
 = 
MICROPY_ALLOC_LEXER_INDENT_INIT
;

856 
�x
->
num_�d�t_�v�
 = 1;

857 
�x
->
�d�t_�v�
 = 
	`m_�w
(
u�t16_t
,�ex->
�loc_�d�t_�v�
);

858 
	`v�r_��
(&
�x
->
v�r
, 32);

859 #i�
MICROPY_PY_FSTRINGS


860 
	`v�r_��
(&
�x
->
f�r�g_�gs
, 0);

861 
�x
->
f�r�g_�gs_idx
 = 0;

865 
�x
->
�d�t_�v�
[0] = 0;

869 
�x
->
chr0
 =�ex->
chr1
 =�ex->
chr2
 = 0;

870 
	`�xt_ch�
(
�x
);

871 
	`�xt_ch�
(
�x
);

872 
	`�xt_ch�
(
�x
);

875 
	`mp_�x�_to_�xt
(
�x
);

880 i�(
�x
->
tok_c�umn
 !�1 &&�ex->
tok_k�d
 !�
MP_TOKEN_NEWLINE
) {

881 
�x
->
tok_k�d
 = 
MP_TOKEN_INDENT
;

884  
�x
;

885 
	}
}

887 
mp_�x�_t
 *
	$mp_�x�_�w_�om_�r_�n
(
q�r
 
�c_�me
, cڡ *
�r
, 
size_t
 
�n
, size_�
�_�n
) {

888 
mp_�ad�_t
 
�ad�
;

889 
	`mp_�ad�_�w_mem
(&
�ad�
, (cڡ 
by�
 *)
�r
, 
�n
, 
�_�n
);

890  
	`mp_�x�_�w
(
�c_�me
, 
�ad�
);

891 
	}
}

893 #i�
MICROPY_READER_POSIX
 || 
MICROPY_READER_VFS


895 
mp_�x�_t
 *
	$mp_�x�_�w_�om_f�e
(
q�r
 
f��ame
) {

896 
mp_�ad�_t
 
�ad�
;

897 
	`mp_�ad�_�w_f�e
(&
�ad�
, 
f��ame
);

898  
	`mp_�x�_�w
(
f��ame
, 
�ad�
);

899 
	}
}

901 #i�
MICROPY_HELPER_LEXER_UNIX


903 
mp_�x�_t
 *
	$mp_�x�_�w_�om_fd
(
q�r
 
f��ame
, 
fd
, 
bo�
 
�o�_fd
) {

904 
mp_�ad�_t
 
�ad�
;

905 
	`mp_�ad�_�w_f�e_�om_fd
(&
�ad�
, 
fd
, 
�o�_fd
);

906  
	`mp_�x�_�w
(
f��ame
, 
�ad�
);

907 
	}
}

913 
	$mp_�x�_�
(
mp_�x�_t
 *
�x
) {

914 i�(
�x
) {

915 
�x
->
�ad�
.
	`�o�
�ex->�ad�.
d�a
);

916 
	`v�r_��r
(&
�x
->
v�r
);

917 #i�
MICROPY_PY_FSTRINGS


918 
	`v�r_��r
(&
�x
->
f�r�g_�gs
);

920 
	`m_d�
(
u�t16_t
, 
�x
->
�d�t_�v�
,�ex->
�loc_�d�t_�v�
);

921 
	`m_d�_obj
(
mp_�x�_t
, 
�x
);

923 
	}
}

928 
	$mp_�x�_show_tok�
(cڡ 
mp_�x�_t
 *
�x
) {

929 
	`��tf
("(" 
UINT_FMT
 ":" UINT_FMT "�k�d:%u s�:%��n:%zu", 
�x
->
tok_l�e
,�ex->
tok_c�umn
,�ex->
tok_k�d
,�ex->
v�r
.
buf
,�ex->v�r.
�n
);

930 i�(
�x
->
v�r
.
�n
 > 0) {

931 cڡ 
by�
 *
i
 = (cڡ by� *)
�x
->
v�r
.
buf
;

932 cڡ 
by�
 *
j
 = (cڡ by� *)
i
 + 
�x
->
v�r
.
�n
;

933 
	`��tf
(" ");

934 
i
 < 
j
) {

935 
unich�
 
c
 = 
	`utf8_g�_ch�
(
i
);

936 
i
 = 
	`utf8_�xt_ch�
(i);

937 i�(
	`unich�_i�r�t
(
c
)) {

938 
	`��tf
("%c", ()
c
);

940 
	`��tf
("?");

944 
	`��tf
("\n");

945 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\lexer.h

26 #i�de�
MICROPY_INCLUDED_PY_LEXER_H


27 
	#MICROPY_INCLUDED_PY_LEXER_H


	)

29 
	~<�d�t.h
>

31 
	~"py/mpc�fig.h
"

32 
	~"py/q�r.h
"

33 
	~"py/�ad�.h
"

41 
	e_mp_tok�_k�d_t
 {

42 
	mMP_TOKEN_END
,

44 
	mMP_TOKEN_INVALID
,

45 
	mMP_TOKEN_DEDENT_MISMATCH
,

46 
	mMP_TOKEN_LONELY_STRING_OPEN
,

47 #i�
MICROPY_PY_FSTRINGS


48 
	mMP_TOKEN_MALFORMED_FSTRING
,

51 
	mMP_TOKEN_NEWLINE
,

52 
	mMP_TOKEN_INDENT
,

53 
	mMP_TOKEN_DEDENT
,

55 
	mMP_TOKEN_NAME
,

56 
	mMP_TOKEN_INTEGER
,

57 
	mMP_TOKEN_FLOAT_OR_IMAG
,

58 
	mMP_TOKEN_STRING
,

59 
	mMP_TOKEN_BYTES
,

61 
	mMP_TOKEN_ELLIPSIS
,

63 
	mMP_TOKEN_KW_FALSE
,

64 
	mMP_TOKEN_KW_NONE
,

65 
	mMP_TOKEN_KW_TRUE
,

66 
	mMP_TOKEN_KW___DEBUG__
,

67 
	mMP_TOKEN_KW_AND
,

68 
	mMP_TOKEN_KW_AS
,

69 
	mMP_TOKEN_KW_ASSERT
,

70 #i�
MICROPY_PY_ASYNC_AWAIT


71 
	mMP_TOKEN_KW_ASYNC
,

72 
	mMP_TOKEN_KW_AWAIT
,

74 
	mMP_TOKEN_KW_BREAK
,

75 
	mMP_TOKEN_KW_CLASS
,

76 
	mMP_TOKEN_KW_CONTINUE
,

77 
	mMP_TOKEN_KW_DEF
,

78 
	mMP_TOKEN_KW_DEL
,

79 
	mMP_TOKEN_KW_ELIF
,

80 
	mMP_TOKEN_KW_ELSE
,

81 
	mMP_TOKEN_KW_EXCEPT
,

82 
	mMP_TOKEN_KW_FINALLY
,

83 
	mMP_TOKEN_KW_FOR
,

84 
	mMP_TOKEN_KW_FROM
,

85 
	mMP_TOKEN_KW_GLOBAL
,

86 
	mMP_TOKEN_KW_IF
,

87 
	mMP_TOKEN_KW_IMPORT
,

88 
	mMP_TOKEN_KW_IN
,

89 
	mMP_TOKEN_KW_IS
,

90 
	mMP_TOKEN_KW_LAMBDA
,

91 
	mMP_TOKEN_KW_NONLOCAL
,

92 
	mMP_TOKEN_KW_NOT
,

93 
	mMP_TOKEN_KW_OR
,

94 
	mMP_TOKEN_KW_PASS
,

95 
	mMP_TOKEN_KW_RAISE
,

96 
	mMP_TOKEN_KW_RETURN
,

97 
	mMP_TOKEN_KW_TRY
,

98 
	mMP_TOKEN_KW_WHILE
,

99 
	mMP_TOKEN_KW_WITH
,

100 
	mMP_TOKEN_KW_YIELD
,

102 
	mMP_TOKEN_OP_ASSIGN
,

103 
	mMP_TOKEN_OP_TILDE
,

106 
	mMP_TOKEN_OP_LESS
,

107 
	mMP_TOKEN_OP_MORE
,

108 
	mMP_TOKEN_OP_DBL_EQUAL
,

109 
	mMP_TOKEN_OP_LESS_EQUAL
,

110 
	mMP_TOKEN_OP_MORE_EQUAL
,

111 
	mMP_TOKEN_OP_NOT_EQUAL
,

114 
	mMP_TOKEN_OP_PIPE
,

115 
	mMP_TOKEN_OP_CARET
,

116 
	mMP_TOKEN_OP_AMPERSAND
,

117 
	mMP_TOKEN_OP_DBL_LESS
,

118 
	mMP_TOKEN_OP_DBL_MORE
,

119 
	mMP_TOKEN_OP_PLUS
,

120 
	mMP_TOKEN_OP_MINUS
,

121 
	mMP_TOKEN_OP_STAR
,

122 
	mMP_TOKEN_OP_AT
,

123 
	mMP_TOKEN_OP_DBL_SLASH
,

124 
	mMP_TOKEN_OP_SLASH
,

125 
	mMP_TOKEN_OP_PERCENT
,

126 
	mMP_TOKEN_OP_DBL_STAR
,

129 
	mMP_TOKEN_DEL_PIPE_EQUAL
,

130 
	mMP_TOKEN_DEL_CARET_EQUAL
,

131 
	mMP_TOKEN_DEL_AMPERSAND_EQUAL
,

132 
	mMP_TOKEN_DEL_DBL_LESS_EQUAL
,

133 
	mMP_TOKEN_DEL_DBL_MORE_EQUAL
,

134 
	mMP_TOKEN_DEL_PLUS_EQUAL
,

135 
	mMP_TOKEN_DEL_MINUS_EQUAL
,

136 
	mMP_TOKEN_DEL_STAR_EQUAL
,

137 
	mMP_TOKEN_DEL_AT_EQUAL
,

138 
	mMP_TOKEN_DEL_DBL_SLASH_EQUAL
,

139 
	mMP_TOKEN_DEL_SLASH_EQUAL
,

140 
	mMP_TOKEN_DEL_PERCENT_EQUAL
,

141 
	mMP_TOKEN_DEL_DBL_STAR_EQUAL
,

143 
	mMP_TOKEN_DEL_PAREN_OPEN
,

144 
	mMP_TOKEN_DEL_PAREN_CLOSE
,

145 
	mMP_TOKEN_DEL_BRACKET_OPEN
,

146 
	mMP_TOKEN_DEL_BRACKET_CLOSE
,

147 
	mMP_TOKEN_DEL_BRACE_OPEN
,

148 
	mMP_TOKEN_DEL_BRACE_CLOSE
,

149 
	mMP_TOKEN_DEL_COMMA
,

150 
	mMP_TOKEN_DEL_COLON
,

151 
	mMP_TOKEN_DEL_PERIOD
,

152 
	mMP_TOKEN_DEL_SEMICOLON
,

153 
	mMP_TOKEN_DEL_EQUAL
,

154 
	mMP_TOKEN_DEL_MINUS_MORE
,

156 
	mMP_TOKEN_NUMBER_OF
,

157 } 
	tmp_tok�_k�d_t
;

161 
	s_mp_�x�_t
 {

162 
q�r
 
	msour�_�me
;

163 
mp_�ad�_t
 
	m�ad�
;

165 
unich�
 
	mchr0
, 
	mchr1
, 
	mchr2
;

166 #i�
MICROPY_PY_FSTRINGS


167 
unich�
 
	mchr0_�ved
, 
	mchr1_�ved
, 
	mchr2_�ved
;

170 
size_t
 
	ml�e
;

171 
size_t
 
	mc�umn
;

173 
mp_�t_t
 
	mem�_d�t
;

174 
mp_�t_t
 
	máed_b�ck�_�v�
;

176 
size_t
 
	m�loc_�d�t_�v�
;

177 
size_t
 
	mnum_�d�t_�v�
;

178 
u�t16_t
 *
	m�d�t_�v�
;

180 
size_t
 
	mtok_l�e
;

181 
size_t
 
	mtok_c�umn
;

182 
mp_tok�_k�d_t
 
	mtok_k�d
;

183 
v�r_t
 
	mv�r
;

184 #i�
MICROPY_PY_FSTRINGS


185 
v�r_t
 
	mf�r�g_�gs
;

186 
size_t
 
	mf�r�g_�gs_idx
;

188 } 
	tmp_�x�_t
;

190 
mp_�x�_t
 *
mp_�x�_�w
(
q�r
 
�c_�me
, 
mp_�ad�_t
 
�ad�
);

191 
mp_�x�_t
 *
mp_�x�_�w_�om_�r_�n
(
q�r
 
�c_�me
, cڡ *
�r
, 
size_t
 
�n
, size_�
�_�n
);

195 
mp_�x�_t
 *
mp_�x�_�w_�om_f�e
(
q�r
 
f��ame
);

197 #i�
MICROPY_HELPER_LEXER_UNIX


198 
mp_�x�_t
 *
mp_�x�_�w_�om_fd
(
q�r
 
f��ame
, 
fd
, 
bo�
 
�o�_fd
);

201 
mp_�x�_�
(
mp_�x�_t
 *
�x
);

202 
mp_�x�_to_�xt
(
mp_�x�_t
 *
�x
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\malloc.c

27 
	~<�dio.h
>

28 
	~<�dlib.h
>

29 
	~<�r�g.h
>

31 
	~"py/mpc�fig.h
"

32 
	~"py/misc.h
"

33 
	~"py/mp��e.h
"

35 #i�
MICROPY_DEBUG_VERBOSE


36 
	#DEBUG_��tf
 
DEBUG_��tf


	)

38 
	#DEBUG_��tf
(...�()0

	)

41 #i�
MICROPY_MEM_STATS


42 #i�!
MICROPY_MALLOC_USES_ALLOCATED_SIZE


43 #�r� 
MICROPY_MEM_STATS
 
�qu�es
 
MICROPY_MALLOC_USES_ALLOCATED_SIZE


45 
	#UPDATE_PEAK
(�{ i�(
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�> MP_STATE_MEM(
�ak_by�s_�lo��d
)�MP_STATE_MEM՗k_by�s_�lo��d��MP_STATE_MEM(cu��t_by�s_�lo��d); }

	)

48 #i�
MICROPY_ENABLE_GC


49 
	~"py/gc.h
"

56 #unde�
m�loc


57 #unde�
�


58 #unde�
��loc


59 
	#m�loc
(
b
�
	`gc_�loc
((b), 
�l�
)

	)

60 
	#m�loc_w�h_f��i�r
(
b
�
	`gc_�loc
((b), 
�ue
)

	)

61 
	#�
 
gc_�


	)

62 
	#��loc
(
�r
, 
n
�
	`gc_��loc
Ռ,�, 
�ue
)

	)

63 
	#��loc_ext
(
�r
, 
n
, 
mv
�
	`gc_��loc
Ռ,�, mv)

	)

68 #i�
MICROPY_ENABLE_FINALISER


69 #�r� 
MICROPY_ENABLE_FINALISER
 
�qu�es
 
MICROPY_ENABLE_GC


72 *
	$��loc_ext
(*
�r
, 
size_t
 
n_by�s
, 
bo�
 
�low_move
) {

73 i�(
�low_move
) {

74  
	`��loc
(
�r
, 
n_by�s
);

79  
NULL
;

81 
	}
}

85 *
	$m_m�loc
(
size_t
 
num_by�s
) {

86 *
�r
 = 
	`m�loc
(
num_by�s
);

87 i�(
�r
 =�
NULL
 && 
num_by�s
 != 0) {

88 
	`m_m�loc_�
(
num_by�s
);

90 #i�
MICROPY_MEM_STATS


91 
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
�+�
num_by�s
;

92 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�+�
num_by�s
;

93 
	`UPDATE_PEAK
();

95 
	`DEBUG_��tf
("m�lo�%d : %p\n", 
num_by�s
, 
�r
);

96  
�r
;

97 
	}
}

99 *
	$m_m�loc_maybe
(
size_t
 
num_by�s
) {

100 *
�r
 = 
	`m�loc
(
num_by�s
);

101 #i�
MICROPY_MEM_STATS


102 
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
�+�
num_by�s
;

103 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�+�
num_by�s
;

104 
	`UPDATE_PEAK
();

106 
	`DEBUG_��tf
("m�lo�%d : %p\n", 
num_by�s
, 
�r
);

107  
�r
;

108 
	}
}

110 #i�
MICROPY_ENABLE_FINALISER


111 *
	$m_m�loc_w�h_f��i�r
(
size_t
 
num_by�s
) {

112 *
�r
 = 
	`m�loc_w�h_f��i�r
(
num_by�s
);

113 i�(
�r
 =�
NULL
 && 
num_by�s
 != 0) {

114 
	`m_m�loc_�
(
num_by�s
);

116 #i�
MICROPY_MEM_STATS


117 
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
�+�
num_by�s
;

118 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�+�
num_by�s
;

119 
	`UPDATE_PEAK
();

121 
	`DEBUG_��tf
("m�lo�%d : %p\n", 
num_by�s
, 
�r
);

122  
�r
;

123 
	}
}

126 *
	$m_m�loc0
(
size_t
 
num_by�s
) {

127 *
�r
 = 
	`m_m�loc
(
num_by�s
);

129 #i�!
MICROPY_GC_CONSERVATIVE_CLEAR


130 
	`mem�t
(
�r
, 0, 
num_by�s
);

132  
�r
;

133 
	}
}

135 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


136 *
	$m_��loc
(*
�r
, 
size_t
 
�d_num_by�s
, size_�
�w_num_by�s
)

138 *
	$m_��loc
(*
�r
, 
size_t
 
�w_num_by�s
)

141 *
�w_�r
 = 
	`��loc
(
�r
, 
�w_num_by�s
);

142 i�(
�w_�r
 =�
NULL
 && 
�w_num_by�s
 != 0) {

143 
	`m_m�loc_�
(
�w_num_by�s
);

145 #i�
MICROPY_MEM_STATS


151 
size_t
 
diff
 = 
�w_num_by�s
 - 
�d_num_by�s
;

152 
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
�+�
diff
;

153 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�+�
diff
;

154 
	`UPDATE_PEAK
();

156 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


157 
	`DEBUG_��tf
("��lo�%p, %d, %d : %p\n", 
�r
, 
�d_num_by�s
, 
�w_num_by�s
, 
�w_�r
);

159 
	`DEBUG_��tf
("��lo�%p, %d : %p\n", 
�r
, 
�w_num_by�s
, 
�w_�r
);

161  
�w_�r
;

162 
	}
}

164 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


165 *
	$m_��loc_maybe
(*
�r
, 
size_t
 
�d_num_by�s
, size_�
�w_num_by�s
, 
bo�
 
�low_move
)

167 *
	$m_��loc_maybe
(*
�r
, 
size_t
 
�w_num_by�s
, 
bo�
 
�low_move
)

170 *
�w_�r
 = 
	`��loc_ext
(
�r
, 
�w_num_by�s
, 
�low_move
);

171 #i�
MICROPY_MEM_STATS


178 i�(!(
�w_�r
 =�
NULL
 && 
�w_num_by�s
 != 0)) {

179 
size_t
 
diff
 = 
�w_num_by�s
 - 
�d_num_by�s
;

180 
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
�+�
diff
;

181 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�+�
diff
;

182 
	`UPDATE_PEAK
();

185 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


186 
	`DEBUG_��tf
("��lo�%p, %d, %d : %p\n", 
�r
, 
�d_num_by�s
, 
�w_num_by�s
, 
�w_�r
);

188 
	`DEBUG_��tf
("��lo�%p, %d : %p\n", 
�r
, 
�w_num_by�s
, 
�w_�r
);

190  
�w_�r
;

191 
	}
}

193 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


194 
	$m_�
(*
�r
, 
size_t
 
num_by�s
)

196 
	$m_�
(*
�r
)

199 
	`�
(
�r
);

200 #i�
MICROPY_MEM_STATS


201 
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
�-�
num_by�s
;

203 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


204 
	`DEBUG_��tf
("� %p, %d\n", 
�r
, 
num_by�s
);

206 
	`DEBUG_��tf
("� %p\n", 
�r
);

208 
	}
}

210 #i�
MICROPY_TRACKED_ALLOC


212 
	#MICROPY_TRACKED_ALLOC_STORE_SIZE
 (!
MICROPY_ENABLE_GC
)

	)

214 
	s_m_�acked_node_t
 {

215 
_m_�acked_node_t
 *
	m�ev
;

216 
_m_�acked_node_t
 *
	m�xt
;

217 #i�
MICROPY_TRACKED_ALLOC_STORE_SIZE


218 
u���_t
 
	msize
;

220 
u�t8_t
 
	md�a
[];

221 } 
	tm_�acked_node_t
;

223 #i�
MICROPY_DEBUG_VERBOSE


224 
size_t
 
	$m_�acked_cou�_l�ks
(
size_t
 *
nb
) {

225 
m_�acked_node_t
 *
node
 = 
	`MP_STATE_VM
(
m_�acked_h�d
);

226 
size_t
 
n
 = 0;

227 *
nb
 = 0;

228 
node
 !�
NULL
) {

229 ++
n
;

230 #i�
MICROPY_TRACKED_ALLOC_STORE_SIZE


231 *
nb
 +�
node
->
size
;

233 *
nb
 +�
	`gc_nby�s
(
node
);

235 
node
 =�ode->
�xt
;

237  
n
;

238 
	}
}

241 *
	$m_�acked_��oc
(
size_t
 
nmemb
, size_�
size
) {

242 
m_�acked_node_t
 *
node
 = 
	`m_m�loc_maybe
((m_�acked_node_t�+ 
nmemb
 * 
size
);

243 i�(
node
 =�
NULL
) {

244  
NULL
;

246 #i�
MICROPY_DEBUG_VERBOSE


247 
size_t
 
nb
;

248 
size_t
 
n
 = 
	`m_�acked_cou�_l�ks
(&
nb
);

249 
	`DEBUG_��tf
("m_�acked_��oc(%u, %u�-> (%u;%u�%p\n", ()
nmemb
, ()
size
, ()
n
, ()
nb
, 
node
);

251 i�(
	`MP_STATE_VM
(
m_�acked_h�d
�!�
NULL
) {

252 
	`MP_STATE_VM
(
m_�acked_h�d
)->
�ev
 = 
node
;

254 
node
->
�ev
 = 
NULL
;

255 
node
->
�xt
 = 
	`MP_STATE_VM
(
m_�acked_h�d
);

256 
	`MP_STATE_VM
(
m_�acked_h�d
��
node
;

257 #i�
MICROPY_TRACKED_ALLOC_STORE_SIZE


258 
node
->
size
 = 
nmemb
 * size;

260 #i�!
MICROPY_GC_CONSERVATIVE_CLEAR


261 
	`mem�t
(&
node
->
d�a
[0], 0, 
nmemb
 * 
size
);

263  &
node
->
d�a
[0];

264 
	}
}

266 
	$m_�acked_�
(*
�r_�
) {

267 i�(
�r_�
 =�
NULL
) {

270 
m_�acked_node_t
 *
node
 = (m_�acked_node_�*)((
u�t8_t
 *)
�r_�
 - (m_tracked_node_t));

271 #i�
MICROPY_DEBUG_VERBOSE


272 
size_t
 
d�a_by�s
;

273 #i�
MICROPY_TRACKED_ALLOC_STORE_SIZE


274 
d�a_by�s
 = 
node
->
size
;

276 
d�a_by�s
 = 
	`gc_nby�s
(
node
);

278 
size_t
 
nb
;

279 
size_t
 
n
 = 
	`m_�acked_cou�_l�ks
(&
nb
);

280 
	`DEBUG_��tf
("m_�acked_�(%p, [%p, %p],�by�s=%u,��ks=%u;%u)\n", 
node
,�ode->
�ev
,�ode->
�xt
, ()
d�a_by�s
, ()
n
, ()
nb
);

282 i�(
node
->
�xt
 !�
NULL
) {

283 
node
->
�xt
->
�ev
 =�ode->prev;

285 i�(
node
->
�ev
 !�
NULL
) {

286 
node
->
�ev
->
�xt
 =�ode->next;

288 
	`MP_STATE_VM
(
m_�acked_h�d
��
node
->
�xt
;

290 
	`m_�
(
node


291 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


292 #i�
MICROPY_TRACKED_ALLOC_STORE_SIZE


293 , 
node
->
size


295 , 
	`gc_nby�s
(
node
)

299 
	}
}

303 #i�
MICROPY_MEM_STATS


304 
size_t
 
	$m_g�_tٮ_by�s_�lo��d
() {

305  
	`MP_STATE_MEM
(
tٮ_by�s_�lo��d
);

306 
	}
}

308 
size_t
 
	$m_g�_cu��t_by�s_�lo��d
() {

309  
	`MP_STATE_MEM
(
cu��t_by�s_�lo��d
);

310 
	}
}

312 
size_t
 
	$m_g�_�ak_by�s_�lo��d
() {

313  
	`MP_STATE_MEM
(
�ak_by�s_�lo��d
);

314 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\map.c

27 
	~<�d�t.h
>

28 
	~<�dlib.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/mpc�fig.h
"

33 
	~"py/misc.h
"

34 
	~"py/ru�ime.h
"

36 #i�
MICROPY_DEBUG_VERBOSE


37 
	#DEBUG_PRINT
 (1)

	)

39 
	#DEBUG_PRINT
 (0)

	)

40 
	#DEBUG_��tf
(...�()0

	)

43 #i�
MICROPY_OPT_MAP_LOOKUP_CACHE


53 
	#MAP_CACHE_OFFSET
(
�dex
�((((
u���_t
)(�dex)�>> 2�% 
MICROPY_OPT_MAP_LOOKUP_CACHE_SIZE
)

	)

55 
	#MAP_CACHE_ENTRY
(
�dex
�(
	`MP_STATE_VM
(
m�_lookup_�che
)[
	`MAP_CACHE_OFFSET
(�dex)])

	)

57 
	#MAP_CACHE_GET
(
m�
, 
�dex
�(&(m�)->
�b�
[
	`MAP_CACHE_ENTRY
(�dex�% (m�)->
�loc
])

	)

59 
	#MAP_CACHE_SET
(
�dex
, 
pos
�
	`MAP_CACHE_ENTRY
(�dex���os�& 0xff;

	)

61 
	#MAP_CACHE_SET
(
�dex
, 
pos
)

	)

68 cڡ 
u�t16_t
 
	ghash_�lo�ti�_sizes
[] = {

75 
size_t
 
	$g�_hash_�loc_g���_�_equ�_to
(
size_t
 
x
) {

76 
size_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
hash_�lo�ti�_sizes
); i++) {

77 i�(
hash_�lo�ti�_sizes
[
i
] >�
x
) {

78  
hash_�lo�ti�_sizes
[
i
];

83  (
x
 + x / 2) | 1;

84 
	}
}

89 
	$mp_m�_��
(
mp_m�_t
 *
m�
, 
size_t
 
n
) {

90 i�(
n
 == 0) {

91 
m�
->
�loc
 = 0;

92 
m�
->
�b�
 = 
NULL
;

94 
m�
->
�loc
 = 
n
;

95 
m�
->
�b�
 = 
	`m_�w0
(
mp_m�_�em_t
, m�->
�loc
);

97 
m�
->
u�d
 = 0;

98 
m�
->
�l_keys_�e_q�rs
 = 1;

99 
m�
->
is_fixed
 = 0;

100 
m�
->
is_�d�ed
 = 0;

101 
	}
}

103 
	$mp_m�_��_fixed_�b�
(
mp_m�_t
 *
m�
, 
size_t
 
n
, cڡ 
mp_obj_t
 *
�b�
) {

104 
m�
->
�loc
 = 
n
;

105 
m�
->
u�d
 = 
n
;

106 
m�
->
�l_keys_�e_q�rs
 = 1;

107 
m�
->
is_fixed
 = 1;

108 
m�
->
is_�d�ed
 = 1;

109 
m�
->
�b�
 = (
mp_m�_�em_t
 *)table;

110 
	}
}

113 
	$mp_m�_de��
(
mp_m�_t
 *
m�
) {

114 i�(!
m�
->
is_fixed
) {

115 
	`m_d�
(
mp_m�_�em_t
, 
m�
->
�b�
, m�->
�loc
);

117 
m�
->
u�d
 = m�->
�loc
 = 0;

118 
	}
}

120 
	$mp_m�_��r
(
mp_m�_t
 *
m�
) {

121 i�(!
m�
->
is_fixed
) {

122 
	`m_d�
(
mp_m�_�em_t
, 
m�
->
�b�
, m�->
�loc
);

124 
m�
->
�loc
 = 0;

125 
m�
->
u�d
 = 0;

126 
m�
->
�l_keys_�e_q�rs
 = 1;

127 
m�
->
is_fixed
 = 0;

128 
m�
->
�b�
 = 
NULL
;

129 
	}
}

131 
	$mp_m�_�hash
(
mp_m�_t
 *
m�
) {

132 
size_t
 
�d_�loc
 = 
m�
->
�loc
;

133 
size_t
 
�w_�loc
 = 
	`g�_hash_�loc_g���_�_equ�_to
(
m�
->
�loc
 + 1);

134 
	`DEBUG_��tf
("mp_m�_�hash(%p): " 
UINT_FMT
 " -> " UINT_FMT "\n", 
m�
, 
�d_�loc
, 
�w_�loc
);

135 
mp_m�_�em_t
 *
�d_�b�
 = 
m�
->
�b�
;

136 
mp_m�_�em_t
 *
�w_�b�
 = 
	`m_�w0
(mp_m�_�em_t, 
�w_�loc
);

138 
m�
->
�loc
 = 
�w_�loc
;

139 
m�
->
u�d
 = 0;

140 
m�
->
�l_keys_�e_q�rs
 = 1;

141 
m�
->
�b�
 = 
�w_�b�
;

142 
size_t
 
i
 = 0; i < 
�d_�loc
; i++) {

143 i�(
�d_�b�
[
i
].
key
 !�
MP_OBJ_NULL
 && old_�b�[i].key !�
MP_OBJ_SENTINEL
) {

144 
	`mp_m�_lookup
(
m�
, 
�d_�b�
[
i
].
key
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = old_table[i].value;

147 
	`m_d�
(
mp_m�_�em_t
, 
�d_�b�
, 
�d_�loc
);

148 
	}
}

156 
mp_m�_�em_t
 *
	$MICROPY_WRAP_MP_MAP_LOOKUP
(
mp_m�_lookup
)(
mp_m�_t
 * 
m�
, 
mp_obj_t
 
�dex
, 
mp_m�_lookup_k�d_t
 
lookup_k�d
) {

158 
	`as��
(!
m�
->
is_fixed
 || 
lookup_k�d
 =�
MP_MAP_LOOKUP
);

160 #i�
MICROPY_OPT_MAP_LOOKUP_CACHE


162 i�(
lookup_k�d
 !�
MP_MAP_LOOKUP_REMOVE_IF_FOUND
 && 
m�
->
�loc
) {

163 
mp_m�_�em_t
 *
��
 = 
	`MAP_CACHE_GET
(
m�
, 
�dex
);

166 i�(
��
->
key
 =�
�dex
) {

167  
��
;

173 
bo�
 
com��_�ly_�rs
 = 
m�
->
�l_keys_�e_q�rs
;

174 i�(
com��_�ly_�rs
) {

175 i�(
	`mp_obj_is_q�r
(
�dex
)) {

177 } i�(
	`mp_obj_is_exa�_ty�
(
�dex
, &
mp_ty�_�r
)) {

183 
com��_�ly_�rs
 = 
�l�
;

184 } i�(
lookup_k�d
 !�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

187  
NULL
;

192 i�(
m�
->
is_�d�ed
) {

193 
mp_m�_�em_t
 *
�em
 = &
m�
->
�b�
[0], *
t�
 = &m�->�b�[m�->
u�d
];�lem <�op;�lem++) {

194 i�(
�em
->
key
 =�
�dex
 || (!
com��_�ly_�rs
 && 
	`mp_obj_equ�
(elem->key, index))) {

195 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


196 i�(
	`MP_UNLIKELY
(
lookup_k�d
 =�
MP_MAP_LOOKUP_REMOVE_IF_FOUND
)) {

198 
mp_obj_t
 
v�ue
 = 
�em
->value;

199 --
m�
->
u�d
;

200 
	`memmove
(
�em
,��m + 1, (
t�
 -�lem - 1) * (*elem));

203 
�em
 = &
m�
->
�b�
[m�->
u�d
];

204 
�em
->
key
 = 
MP_OBJ_NULL
;

205 
�em
->
v�ue
 = value;

208 
	`MAP_CACHE_SET
(
�dex
, 
�em
 - 
m�
->
�b�
);

209  
�em
;

212 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


213 i�(
	`MP_LIKELY
(
lookup_k�d
 !�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)) {

214  
NULL
;

216 i�(
m�
->
u�d
 =�m�->
�loc
) {

218 
m�
->
�loc
 += 4;

219 
m�
->
�b�
 = 
	`m_��w
(
mp_m�_�em_t
, m�->�b�, m�->
u�d
, m�->
�loc
);

220 
	`mp_�q_��r
(
m�
->
�b�
, m�->
u�d
, m�->
�loc
, (*map->table));

222 
mp_m�_�em_t
 *
�em
 = 
m�
->
�b�
 + m�->
u�d
++;

223 
�em
->
key
 = 
�dex
;

224 
�em
->
v�ue
 = 
MP_OBJ_NULL
;

225 i�(!
	`mp_obj_is_q�r
(
�dex
)) {

226 
m�
->
�l_keys_�e_q�rs
 = 0;

228  
�em
;

230  
NULL
;

236 i�(
m�
->
�loc
 == 0) {

237 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

238 
	`mp_m�_�hash
(
m�
);

240  
NULL
;

245 
mp_u�t_t
 
hash
;

246 i�(
	`mp_obj_is_q�r
(
�dex
)) {

247 
hash
 = 
	`q�r_hash
(
	`MP_OBJ_QSTR_VALUE
(
�dex
));

249 
hash
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`mp_u�ry_�
(
MP_UNARY_OP_HASH
, 
�dex
));

252 
size_t
 
pos
 = 
hash
 % 
m�
->
�loc
;

253 
size_t
 
��t_pos
 = 
pos
;

254 
mp_m�_�em_t
 *
ava�_��
 = 
NULL
;

256 
mp_m�_�em_t
 *
��
 = &
m�
->
�b�
[
pos
];

257 i�(
��
->
key
 =�
MP_OBJ_NULL
) {

259 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

260 
m�
->
u�d
 += 1;

261 i�(
ava�_��
 =�
NULL
) {

262 
ava�_��
 = 
��
;

264 
ava�_��
->
key
 = 
�dex
;

265 
ava�_��
->
v�ue
 = 
MP_OBJ_NULL
;

266 i�(!
	`mp_obj_is_q�r
(
�dex
)) {

267 
m�
->
�l_keys_�e_q�rs
 = 0;

269  
ava�_��
;

271  
NULL
;

273 } i�(
��
->
key
 =�
MP_OBJ_SENTINEL
) {

275 i�(
ava�_��
 =�
NULL
) {

276 
ava�_��
 = 
��
;

278 } i�(
��
->
key
 =�
�dex
 || (!
com��_�ly_�rs
 && 
	`mp_obj_equ�
(slot->key, index))) {

281 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_REMOVE_IF_FOUND
) {

283 
m�
->
u�d
--;

284 i�(
m�
->
�b�
[(
pos
 + 1�% m�->
�loc
].
key
 =�
MP_OBJ_NULL
) {

286 
��
->
key
 = 
MP_OBJ_NULL
;

288 
��
->
key
 = 
MP_OBJ_SENTINEL
;

292 
	`MAP_CACHE_SET
(
�dex
, 
pos
);

293  
��
;

297 
pos
 = (po�+ 1�% 
m�
->
�loc
;

299 i�(
pos
 =�
��t_pos
) {

301 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

302 i�(
ava�_��
 !�
NULL
) {

304 
m�
->
u�d
++;

305 
ava�_��
->
key
 = 
�dex
;

306 
ava�_��
->
v�ue
 = 
MP_OBJ_NULL
;

307 i�(!
	`mp_obj_is_q�r
(
�dex
)) {

308 
m�
->
�l_keys_�e_q�rs
 = 0;

310  
ava�_��
;

313 
	`mp_m�_�hash
(
m�
);

315 
��t_pos
 = 
pos
 = 
hash
 % 
m�
->
�loc
;

318  
NULL
;

322 
	}
}

327 #i�
MICROPY_PY_BUILTINS_SET


329 
	$mp_�t_��
(
mp_�t_t
 *
�t
, 
size_t
 
n
) {

330 
�t
->
�loc
 = 
n
;

331 
�t
->
u�d
 = 0;

332 
�t
->
�b�
 = 
	`m_�w0
(
mp_obj_t
, s�->
�loc
);

333 
	}
}

335 
	$mp_�t_�hash
(
mp_�t_t
 *
�t
) {

336 
size_t
 
�d_�loc
 = 
�t
->
�loc
;

337 
mp_obj_t
 *
�d_�b�
 = 
�t
->
�b�
;

338 
�t
->
�loc
 = 
	`g�_hash_�loc_g���_�_equ�_to
(set->alloc + 1);

339 
�t
->
u�d
 = 0;

340 
�t
->
�b�
 = 
	`m_�w0
(
mp_obj_t
, s�->
�loc
);

341 
size_t
 
i
 = 0; i < 
�d_�loc
; i++) {

342 i�(
�d_�b�
[
i
] !�
MP_OBJ_NULL
 && old_�b�[i] !�
MP_OBJ_SENTINEL
) {

343 
	`mp_�t_lookup
(
�t
, 
�d_�b�
[
i
], 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

346 
	`m_d�
(
mp_obj_t
, 
�d_�b�
, 
�d_�loc
);

347 
	}
}

349 
mp_obj_t
 
	$mp_�t_lookup
(
mp_�t_t
 *
�t
, 
mp_obj_t
 
�dex
, 
mp_m�_lookup_k�d_t
 
lookup_k�d
) {

353 i�(
�t
->
�loc
 == 0) {

354 i�(
lookup_k�d
 & 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

355 
	`mp_�t_�hash
(
�t
);

357  
MP_OBJ_NULL
;

360 
mp_u�t_t
 
hash
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`mp_u�ry_�
(
MP_UNARY_OP_HASH
, 
�dex
));

361 
size_t
 
pos
 = 
hash
 % 
�t
->
�loc
;

362 
size_t
 
��t_pos
 = 
pos
;

363 
mp_obj_t
 *
ava�_��
 = 
NULL
;

365 
mp_obj_t
 
�em
 = 
�t
->
�b�
[
pos
];

366 i�(
�em
 =�
MP_OBJ_NULL
) {

368 i�(
lookup_k�d
 & 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

369 i�(
ava�_��
 =�
NULL
) {

370 
ava�_��
 = &
�t
->
�b�
[
pos
];

372 
�t
->
u�d
++;

373 *
ava�_��
 = 
�dex
;

374  
�dex
;

376  
MP_OBJ_NULL
;

378 } i�(
�em
 =�
MP_OBJ_SENTINEL
) {

380 i�(
ava�_��
 =�
NULL
) {

381 
ava�_��
 = &
�t
->
�b�
[
pos
];

383 } i�(
	`mp_obj_equ�
(
�em
, 
�dex
)) {

385 i�(
lookup_k�d
 & 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
) {

387 
�t
->
u�d
--;

388 i�(
�t
->
�b�
[(
pos
 + 1�% s�->
�loc
] =�
MP_OBJ_NULL
) {

390 
�t
->
�b�
[
pos
] = 
MP_OBJ_NULL
;

392 
�t
->
�b�
[
pos
] = 
MP_OBJ_SENTINEL
;

395  
�em
;

399 
pos
 = (po�+ 1�% 
�t
->
�loc
;

401 i�(
pos
 =�
��t_pos
) {

403 i�(
lookup_k�d
 & 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

404 i�(
ava�_��
 !�
NULL
) {

406 
�t
->
u�d
++;

407 *
ava�_��
 = 
�dex
;

408  
�dex
;

411 
	`mp_�t_�hash
(
�t
);

413 
��t_pos
 = 
pos
 = 
hash
 % 
�t
->
�loc
;

416  
MP_OBJ_NULL
;

420 
	}
}

422 
mp_obj_t
 
	$mp_�t_�move_f��
(
mp_�t_t
 *
�t
) {

423 
size_t
 
pos
 = 0;�o�< 
�t
->
�loc
;�os++) {

424 i�(
	`mp_�t_��_is_f��d
(
�t
, 
pos
)) {

425 
mp_obj_t
 
�em
 = 
�t
->
�b�
[
pos
];

427 
�t
->
u�d
--;

428 i�(
�t
->
�b�
[(
pos
 + 1�% s�->
�loc
] =�
MP_OBJ_NULL
) {

430 
�t
->
�b�
[
pos
] = 
MP_OBJ_NULL
;

432 
�t
->
�b�
[
pos
] = 
MP_OBJ_SENTINEL
;

434  
�em
;

437  
MP_OBJ_NULL
;

438 
	}
}

440 
	$mp_�t_��r
(
mp_�t_t
 *
�t
) {

441 
	`m_d�
(
mp_obj_t
, 
�t
->
�b�
, s�->
�loc
);

442 
�t
->
�loc
 = 0;

443 
�t
->
u�d
 = 0;

444 
�t
->
�b�
 = 
NULL
;

445 
	}
}

449 #i�
def�ed
(
DEBUG_PRINT
) && DEBUG_PRINT

450 
	$mp_m�_dump
(
mp_m�_t
 *
m�
) {

451 
size_t
 
i
 = 0; i < 
m�
->
�loc
; i++) {

452 i�(
m�
->
�b�
[
i
].
key
 !�
MP_OBJ_NULL
) {

453 
	`mp_obj_��t
(
m�
->
�b�
[
i
].
key
, 
PRINT_REPR
);

455 
	`DEBUG_��tf
("(nil)");

457 
	`DEBUG_��tf
(": %p\n", 
m�
->
�b�
[
i
].
v�ue
);

459 
	`DEBUG_��tf
("---\n");

460 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\misc.h

26 #i�de�
MICROPY_INCLUDED_PY_MISC_H


27 
	#MICROPY_INCLUDED_PY_MISC_H


	)

33 
	~<�dbo�.h
>

34 
	~<�d�t.h
>

35 
	~<�ddef.h
>

37 
	tby�
;

38 
	tu�t
;

42 #i�de�
MIN


43 
	#MIN
(
x
, 
y
�((x�< (y�? (x�: (y))

	)

45 #i�de�
MAX


46 
	#MAX
(
x
, 
y
�((x�> (y�? (x�: (y))

	)

50 
	#MP_STRINGIFY_HELPER
(
x
�#x

	)

51 
	#MP_STRINGIFY
(
x
�
	`MP_STRINGIFY_HELPER
(x)

	)

54 
	#MP_STATIC_ASSERT
(
c�d
�(()([1 - 2 * !(c�d)]))

	)

60 #i�
def�ed
(
_MSC_VER
�|| def�ed(
__�lu�lus
)

61 
	#MP_STATIC_ASSERT_NONCONSTEXPR
(
c�d
�(()1)

	)

63 
	#MP_STATIC_ASSERT_NONCONSTEXPR
(
c�d
�
	`MP_STATIC_ASSERT
(c�d)

	)

67 
	#MP_CEIL_DIVIDE
(
a
, 
b
�((��+ (b�- 1�/ (b))

	)

68 
	#MP_ROUND_DIVIDE
(
a
, 
b
�((��+ (b�/ 2�/ (b))

	)

74 
	#m_�w
(
ty�
, 
num
�(�y� *)(
	`m_m�loc
(�y��* (num))))

	)

75 
	#m_�w_maybe
(
ty�
, 
num
�(�y� *)(
	`m_m�loc_maybe
(�y��* (num))))

	)

76 
	#m_�w0
(
ty�
, 
num
�(�y� *)(
	`m_m�loc0
(�y��* (num))))

	)

77 
	#m_�w_obj
(
ty�
�(
	`m_�w
�y�, 1))

	)

78 
	#m_�w_obj_maybe
(
ty�
�(
	`m_�w_maybe
�y�, 1))

	)

79 
	#m_�w_obj_v�
(
obj_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
�((obj_ty� *)
	`m_m�loc
(
	`off�tof
(obj_ty�, v�_f�ld�+ (v�_ty��* (v�_num)))

	)

80 
	#m_�w_obj_v�0
(
obj_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
�((obj_ty� *)
	`m_m�loc0
(
	`off�tof
(obj_ty�, v�_f�ld�+ (v�_ty��* (v�_num)))

	)

81 
	#m_�w_obj_v�_maybe
(
obj_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
�((obj_ty� *)
	`m_m�loc_maybe
(
	`off�tof
(obj_ty�, v�_f�ld�+ (v�_ty��* (v�_num)))

	)

82 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


83 
	#m_��w
(
ty�
, 
�r
, 
�d_num
, 
�w_num
�(�y� *)(
	`m_��loc
(Ռ), �y��* (�d_num), �y��* (�w_num))))

	)

84 
	#m_��w_maybe
(
ty�
, 
�r
, 
�d_num
, 
�w_num
, 
�low_move
�(�y� *)(
	`m_��loc_maybe
(Ռ), �y��* (�d_num), �y��* (�w_num), (�low_move))))

	)

85 
	#m_d�
(
ty�
, 
�r
, 
num
�
	`m_�
Ռ, �y��* (num))

	)

86 
	#m_d�_v�
(
obj_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
, 
�r
�(
	`m_�
Ռ, 
	`off�tof
(obj_ty�, v�_f�ld�+ (v�_ty��* (v�_num)))

	)

88 
	#m_��w
(
ty�
, 
�r
, 
�d_num
, 
�w_num
�(�y� *)(
	`m_��loc
(Ռ), �y��* (�w_num))))

	)

89 
	#m_��w_maybe
(
ty�
, 
�r
, 
�d_num
, 
�w_num
, 
�low_move
�(�y� *)(
	`m_��loc_maybe
(Ռ), �y��* (�w_num), (�low_move))))

	)

90 
	#m_d�
(
ty�
, 
�r
, 
num
�(()�um), 
	`m_�
Ռ))

	)

91 
	#m_d�_v�
(
obj_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
, 
�r
�(()(v�_num), 
	`m_�
Ռ))

	)

93 
	#m_d�_obj
(
ty�
, 
�r
�(
	`m_d�
�y�,��, 1))

	)

95 *
m_m�loc
(
size_t
 
num_by�s
);

96 *
m_m�loc_maybe
(
size_t
 
num_by�s
);

97 *
m_m�loc_w�h_f��i�r
(
size_t
 
num_by�s
);

98 *
m_m�loc0
(
size_t
 
num_by�s
);

99 #i�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


100 *
m_��loc
(*
�r
, 
size_t
 
�d_num_by�s
, size_�
�w_num_by�s
);

101 *
m_��loc_maybe
(*
�r
, 
size_t
 
�d_num_by�s
, size_�
�w_num_by�s
, 
bo�
 
�low_move
);

102 
m_�
(*
�r
, 
size_t
 
num_by�s
);

104 *
m_��loc
(*
�r
, 
size_t
 
�w_num_by�s
);

105 *
m_��loc_maybe
(*
�r
, 
size_t
 
�w_num_by�s
, 
bo�
 
�low_move
);

106 
m_�
(*
�r
);

108 
NORETURN
 
m_m�loc_�
(
size_t
 
num_by�s
);

110 #i�
MICROPY_TRACKED_ALLOC


113 *
m_�acked_��oc
(
size_t
 
nmemb
, size_�
size
);

114 
m_�acked_�
(*
�r_�
);

117 #i�
MICROPY_MEM_STATS


118 
size_t
 
m_g�_tٮ_by�s_�lo��d
();

119 
size_t
 
m_g�_cu��t_by�s_�lo��d
();

120 
size_t
 
m_g�_�ak_by�s_�lo��d
();

126 
	#MP_ARRAY_SIZE
(
a
�(��/ (�)[0]))

	)

129 
	#MP_ALIGN
(
�r
, 
�ignm�t
�(*)(((
u���_t
)Ռ�+ (�lignm�t�- 1)�& ~(�lignm�t�- 1))

	)

133 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


135 
u�t32_t
 
	tunich�
;

139 
u�t
 
	tunich�
;

142 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


143 
unich�
 
utf8_g�_ch�
(cڡ 
by�
 *
s
);

144 cڡ 
by�
 *
utf8_�xt_ch�
(cڡ by� *
s
);

145 
size_t
 
utf8_ch��n
(cڡ 
by�
 *
�r
, size_�
�n
);

147 
�l�e
 
unich�
 
	$utf8_g�_ch�
(cڡ 
by�
 *
s
) {

148  *
s
;

149 
	}
}

150 
�l�e
 cڡ 
by�
 *
	$utf8_�xt_ch�
(cڡ 
by�
 *
s
) {

151  
s
 + 1;

152 
	}
}

153 
�l�e
 
size_t
 
	$utf8_ch��n
(cڡ 
by�
 *
�r
, 
size_t
 
�n
) {

154 ()
�r
;

155  
�n
;

156 
	}
}

159 
bo�
 
unich�_is�a�
(
unich�
 
c
);

160 
bo�
 
unich�_i��ha
(
unich�
 
c
);

161 
bo�
 
unich�_i�r�t
(
unich�
 
c
);

162 
bo�
 
unich�_isdig�
(
unich�
 
c
);

163 
bo�
 
unich�_isxdig�
(
unich�
 
c
);

164 
bo�
 
unich�_isid�t
(
unich�
 
c
);

165 
bo�
 
unich�_i��um
(
unich�
 
c
);

166 
bo�
 
unich�_isu��
(
unich�
 
c
);

167 
bo�
 
unich�_i�ow�
(
unich�
 
c
);

168 
unich�
 
unich�_t�ow�
(unich� 
c
);

169 
unich�
 
unich�_tou��
(unich� 
c
);

170 
mp_u�t_t
 
unich�_xdig�_v�ue
(
unich�
 
c
);

171 
	#UTF8_IS_NONASCII
(
ch
�((ch�& 0x80)

	)

172 
	#UTF8_IS_CONT
(
ch
�(((ch�& 0xC0�=�0x80)

	)

176 
	s_v�r_t
 {

177 
size_t
 
	m�loc
;

178 
size_t
 
	m�n
;

179 *
	mbuf
;

180 
bo�
 
	mfixed_buf
;

181 } 
	tv�r_t
;

184 
	#VSTR_FIXED
(
v�r
, 
�loc
�
v�r_t
 v�r; v�r##
_buf
[��oc)]; 
	`v�r_��_fixed_buf
(&v�r, (�loc), v�r##_buf);

	)

186 
v�r_��
(
v�r_t
 *
v�r
, 
size_t
 
�loc
);

187 
v�r_��_�n
(
v�r_t
 *
v�r
, 
size_t
 
�n
);

188 
v�r_��_fixed_buf
(
v�r_t
 *
v�r
, 
size_t
 
�loc
, *
buf
);

189 
	g_mp_��t_t
;

190 
v�r_��_��t
(
v�r_t
 *
v�r
, 
size_t
 
�loc
, 
_mp_��t_t
 *
��t
);

191 
v�r_��r
(
v�r_t
 *
v�r
);

192 
v�r_t
 *
v�r_�w
(
size_t
 
�loc
);

193 
v�r_�
(
v�r_t
 *
v�r
);

194 
�l�e
 
	$v�r_��t
(
v�r_t
 *
v�r
) {

195 
v�r
->
�n
 = 0;

196 
	}
}

197 
�l�e
 *
	$v�r_�r
(
v�r_t
 *
v�r
) {

198  
v�r
->
buf
;

199 
	}
}

200 
�l�e
 
size_t
 
	$v�r_�n
(
v�r_t
 *
v�r
) {

201  
v�r
->
�n
;

202 
	}
}

203 
v�r_h�t_size
(
v�r_t
 *
v�r
, 
size_t
 
size
);

204 *
v�r_ex�nd
(
v�r_t
 *
v�r
, 
size_t
 
size
);

205 *
v�r_add_�n
(
v�r_t
 *
v�r
, 
size_t
 
�n
);

206 *
v�r_nu�_�rm��ed_�r
(
v�r_t
 *
v�r
);

207 
v�r_add_by�
(
v�r_t
 *
v�r
, 
by�
 
v
);

208 
v�r_add_ch�
(
v�r_t
 *
v�r
, 
unich�
 
chr
);

209 
v�r_add_�r
(
v�r_t
 *
v�r
, cڡ *
�r
);

210 
v�r_add_��
(
v�r_t
 *
v�r
, cڡ *
�r
, 
size_t
 
�n
);

211 
v�r_�s_by�
(
v�r_t
 *
v�r
, 
size_t
 
by�_pos
, 
by�
 
b
);

212 
v�r_�s_ch�
(
v�r_t
 *
v�r
, 
size_t
 
ch�_pos
, 
unich�
 
chr
);

213 
v�r_cut_h�d_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�s_to_cut
);

214 
v�r_cut_��_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�s_to_cut
);

215 
v�r_cut_out_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�_pos
, size_�
by�s_to_cut
);

216 
v�r_��tf
(
v�r_t
 *
v�r
, cڡ *
fmt
, ...);

220 
	#CHECKBUF
(
buf
, 
max_size
�buf[max_siz�+ 1]; 
size_t
 buf##
_�n
 = max_size; *buf##
_p
 = buf;

	)

221 
	#CHECKBUF_RESET
(
buf
, 
max_size
�buf##
_�n
 = max_size; buf##
_p
 = buf;

	)

222 
	#CHECKBUF_APPEND
(
buf
, 
�c
, 
�c_�n
) \

223 { 
size_t
 
l
 = 
	`MIN
(
�c_�n
, 
buf
##
_�n
); \

224 
	`mem�y
(
buf
##
_p
, 
�c
, 
l
); \

225 
buf
##
_�n
 -�
l
; \

226 
buf
##
_p
 +�
l
; }

	)

227 
	#CHECKBUF_APPEND_0
(
buf
�{ *buf##
_p
 = 0; }

	)

228 
	#CHECKBUF_LEN
(
buf
�(buf##
_p
 - buf)

	)

230 #ifde�
va_��t


231 
v�r_v��tf
(
v�r_t
 *
v�r
, cڡ *
fmt
, 
va_li�
 
�
);

235 
DEBUG_��tf
(cڡ *
fmt
, ...);

237 
mp_u�t_t
 
mp_v�bo�_�ag
;

241 #i�
MICROPY_PY_BUILTINS_FLOAT


243 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


244 
	#MP_FLOAT_EXP_BITS
 (11)

	)

245 
	#MP_FLOAT_EXP_OFFSET
 (1023)

	)

246 
	#MP_FLOAT_FRAC_BITS
 (52)

	)

247 
u�t64_t
 
	tmp_��t_u�t_t
;

248 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


249 
	#MP_FLOAT_EXP_BITS
 (8)

	)

250 
	#MP_FLOAT_EXP_OFFSET
 (127)

	)

251 
	#MP_FLOAT_FRAC_BITS
 (23)

	)

252 
u�t32_t
 
	tmp_��t_u�t_t
;

255 
	#MP_FLOAT_EXP_BIAS
 ((1 << (
MP_FLOAT_EXP_BITS
 - 1)�- 1)

	)

257 
	u_mp_��t_uni�_t
 {

258 
mp_��t_t
 
	mf
;

259 #i�
MP_ENDIANNESS_LITTLE


261 
mp_��t_u�t_t
 
	m�c
 : 
MP_FLOAT_FRAC_BITS
;

262 
mp_��t_u�t_t
 
	mexp
 : 
MP_FLOAT_EXP_BITS
;

263 
mp_��t_u�t_t
 
	msgn
 : 1;

264 } 
	mp
;

267 
mp_��t_u�t_t
 
	msgn
 : 1;

268 
mp_��t_u�t_t
 
	mexp
 : 
MP_FLOAT_EXP_BITS
;

269 
mp_��t_u�t_t
 
	m�c
 : 
MP_FLOAT_FRAC_BITS
;

270 } 
	mp
;

272 
mp_��t_u�t_t
 
	mi
;

273 } 
	tmp_��t_uni�_t
;

279 #i�
MICROPY_ROM_TEXT_COMPRESSION


281 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NONE


285 #ifde�
NO_QSTR


297 #i�
def�ed
(
__��g__
�|| def�ed(
_MSC_VER
)

300 
	mdummy
;

302 } *
	tmp_rom_�r�_�xt_t
;

304 
	~<�r�g.h
>

306 
�l�e
 
MP_ALWAYSINLINE
 cڡ *
	$MP_COMPRESSED_ROM_TEXT
(cڡ *
msg
) {

309 
	#MP_MATCH_COMPRESSED
(
a
, 
b
�i�(
	`�rcmp
(
msg
,��=�0�{  b; } 

	)

312 
	#MP_COMPRESSED_DATA
(
x
)

	)

314 
	~"g�hdr/com�es�d.d�a.h
"

316 #unde�
MP_COMPRESSED_DATA


317 #unde�
MP_MATCH_COMPRESSED


319  
msg
;

320 
	}
}

328 cڡ *
	tmp_rom_�r�_�xt_t
;

329 
	#MP_COMPRESSED_ROM_TEXT
(
x
�
	)
x

335 
	#MP_ERROR_TEXT
(
x
�(
mp_rom_�r�_�xt_t
)
	`MP_COMPRESSED_ROM_TEXT
(x)

	)

338 #ifde�
_MSC_VER


339 
	~<���.h
>

341 
�l�e
 
u�t32_t
 
	$mp_�z
(
u�t32_t
 
x
) {

342 
lz
 = 0;

343  
	`_B�S�nRev��
(&
lz
, 
x
) ? ((x) * 8 - 1) -�z : 0;

344 
	}
}

346 
�l�e
 
u�t32_t
 
	$mp_�zl
(
x
) {

347 
lz
 = 0;

348  
	`_B�S�nRev��
(&
lz
, 
x
) ? ((x) * 8 - 1) -�z : 0;

349 
	}
}

351 #ifde�
_WIN64


352 
�l�e
 
u�t32_t
 
	$mp_�z�
(
x
) {

353 
lz
 = 0;

354  
	`_B�S�nRev��64
(&
lz
, 
x
) ? ((x) * 8 - 1) -�z : 0;

355 
	}
}

358 
�l�e
 
u�t32_t
 
	$mp_�z�
(
x
) {

359 
h
 = 
x
 >> 32;

360  
h
 ? 
	`mp_�zl
(h�: (mp_�zl(
x
) + 32);

361 
	}
}

364 
�l�e
 
u�t32_t
 
	$mp_�z
(
u�t32_t
 
x
) {

365 
tz
 = 0;

366  
	`_B�S�nF�w�d
(&
tz
, 
x
) ?�z : 0;

367 
	}
}

370 
�l�e
 
bo�
 
	$mp_check
(
bo�
 
v�ue
) {

371  
v�ue
;

372 
	}
}

374 
	#mp_�z
(
x
�
	`__bu�t�_�z
(x)

	)

375 
	#mp_�zl
(
x
�
	`__bu�t�_�zl
(x)

	)

376 
	#mp_�z�
(
x
�
	`__bu�t�_�z�
(x)

	)

377 
	#mp_�z
(
x
�
	`__bu�t�_�z
(x)

	)

378 
	#mp_check
(
x
�(x)

	)

382 
�l�e
 
u�t32_t
 
	$mp_�z_mpi
(
mp_�t_t
 
x
) {

383 
	`MP_STATIC_ASSERT
((
mp_�t_t
) == ()

384 || (
mp_�t_t
) == ());

387 i�(
	`mp_check
((
mp_�t_t
) == ())) {

388  
	`mp_�zl
(()
x
);

390  
	`mp_�z�
(()
x
);

392 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modarray.c

27 
	~"py/bu�t�.h
"

29 #i�
MICROPY_PY_ARRAY


31 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_��y_glob�s_�b�
[] = {

32 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_��y
) },

33 { 
MP_ROM_QSTR
(
MP_QSTR_��y
), 
MP_ROM_PTR
(&
mp_ty�_��y
) },

36 
MP_DEFINE_CONST_DICT
(
mp_modu�_��y_glob�s
, 
mp_modu�_��y_glob�s_�b�
);

38 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_��y
 = {

39 .
ba�
 = { &
mp_ty�_modu�
 },

40 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_��y_glob�s
,

43 
MP_REGISTER_EXTENSIBLE_MODULE
(
MP_QSTR_��y
, 
mp_modu�_��y
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modbuiltins.c

27 
	~<�dio.h
>

28 
	~<as��.h
>

30 
	~"py/sm�l�t.h
"

31 
	~"py/obj�t.h
"

32 
	~"py/obj�r.h
"

33 
	~"py/objty�.h
"

34 
	~"py/ru�ime.h
"

35 
	~"py/bu�t�.h
"

36 
	~"py/��am.h
"

38 #i�
MICROPY_PY_BUILTINS_FLOAT


39 
	~<m�h.h
>

42 #i�
MICROPY_PY_IO


43 

_mp_dummy_t
 
mp_sys_�dout_obj
;

49 
mp_obj_t
 
	$mp_bu�t�___bu�d_�ass__
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

50 
	`as��
(2 <�
n_�gs
);

53 
mp_obj_di�_t
 *
�d_lo�ls
 = 
	`mp_lo�ls_g�
();

54 
mp_obj_t
 
�ass_lo�ls
 = 
	`mp_obj_�w_di�
(0);

55 
	`mp_lo�ls_�t
(
	`MP_OBJ_TO_PTR
(
�ass_lo�ls
));

58 
mp_obj_t
 
��
 = 
	`mp_��_fun�i�_0
(
�gs
[0]);

61 
	`mp_lo�ls_�t
(
�d_lo�ls
);

64 
mp_obj_t
 
m�a
;

65 i�(
n_�gs
 == 2) {

67 
m�a
 = 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_ty�
);

70 
m�a
 = 
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
�gs
[2]));

76 
mp_obj_t
 
m�a_�gs
[3];

77 
m�a_�gs
[0] = 
�gs
[1];

78 
m�a_�gs
[1] = 
	`mp_obj_�w_tu�e
(
n_�gs
 - 2, 
�gs
 + 2);

79 
m�a_�gs
[2] = 
�ass_lo�ls
;

80 
mp_obj_t
 
�w_�ass
 = 
	`mp_��_fun�i�_n_kw
(
m�a
, 3, 0, 
m�a_�gs
);

83 i�(
��
 !�
mp_cڡ_n�e
) {

84 
	`mp_obj_��_�t
(
��
, 
�w_�ass
);

87  
�w_�ass
;

88 
	}
}

89 
MP_DEFINE_CONST_FUN_OBJ_VAR
(
mp_bu�t�___bu�d_�ass___obj
, 2, 
mp_bu�t�___bu�d_�ass__
);

91 
mp_obj_t
 
	$mp_bu�t�_abs
(
mp_obj_t
 
o_�
) {

92  
	`mp_u�ry_�
(
MP_UNARY_OP_ABS
, 
o_�
);

93 
	}
}

94 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_abs_obj
, 
mp_bu�t�_abs
);

96 
mp_obj_t
 
	$mp_bu�t�_�l
(
mp_obj_t
 
o_�
) {

97 
mp_obj_��_buf_t
 
��_buf
;

98 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
o_�
, &
��_buf
);

99 
mp_obj_t
 
�em
;

100 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

101 i�(!
	`mp_obj_is_�ue
(
�em
)) {

102  
mp_cڡ_�l�
;

105  
mp_cڡ_�ue
;

106 
	}
}

107 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_�l_obj
, 
mp_bu�t�_�l
);

109 
mp_obj_t
 
	$mp_bu�t�_�y
(
mp_obj_t
 
o_�
) {

110 
mp_obj_��_buf_t
 
��_buf
;

111 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
o_�
, &
��_buf
);

112 
mp_obj_t
 
�em
;

113 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

114 i�(
	`mp_obj_is_�ue
(
�em
)) {

115  
mp_cڡ_�ue
;

118  
mp_cڡ_�l�
;

119 
	}
}

120 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_�y_obj
, 
mp_bu�t�_�y
);

122 
mp_obj_t
 
	$mp_bu�t�_b�
(
mp_obj_t
 
o_�
) {

123 
mp_obj_t
 
�gs
[] = { 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__b��_ݒ__c��__hash_b_b��_�o�_
), 
o_�
 };

124  
	`mp_obj_�r_f�m�
(
	`MP_ARRAY_SIZE
(
�gs
),�rgs, 
NULL
);

125 
	}
}

126 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_b�_obj
, 
mp_bu�t�_b�
);

128 
mp_obj_t
 
	$mp_bu�t�_��ab�
(
mp_obj_t
 
o_�
) {

129 i�(
	`mp_obj_is_��ab�
(
o_�
)) {

130  
mp_cڡ_�ue
;

132  
mp_cڡ_�l�
;

134 
	}
}

135 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_��ab�_obj
, 
mp_bu�t�_��ab�
);

137 
mp_obj_t
 
	$mp_bu�t�_chr
(
mp_obj_t
 
o_�
) {

138 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


139 
mp_u�t_t
 
c
 = 
	`mp_obj_g�_�t
(
o_�
);

140 i�(
c
 >= 0x110000) {

141 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("chr()�rg�ot in�ange(0x110000)"));

143 
	`VSTR_FIXED
(
buf
, 4);

144 
	`v�r_add_ch�
(&
buf
, 
c
);

145  
	`mp_obj_�w_�r_v�_q�r
(
buf
.buf, buf.
�n
);

147 
mp_�t_t
 
�d
 = 
	`mp_obj_g�_�t
(
o_�
);

148 i�(0 <�
�d
 && ord <= 0xff) {

149 
u�t8_t
 
�r
[1] = {
�d
};

150  
	`mp_obj_�w_�r_v�_q�r
((*)
�r
, 1);

152 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("chr()�rg�ot in�ange(256)"));

155 
	}
}

156 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_chr_obj
, 
mp_bu�t�_chr
);

158 
mp_obj_t
 
	$mp_bu�t�_d�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

159 
mp_obj_t
 
d�
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

160 i�(
n_�gs
 == 0) {

162 
mp_obj_di�_t
 *
di�
 = 
	`mp_lo�ls_g�
();

163 
size_t
 
i
 = 0; i < 
di�
->
m�
.
�loc
; i++) {

164 i�(
	`mp_m�_��_is_f��d
(&
di�
->
m�
, 
i
)) {

165 
	`mp_obj_li�_��nd
(
d�
, 
di�
->
m�
.
�b�
[
i
].
key
);

171 
size_t
 
nq�r
 = 
	`QSTR_TOTAL
();

172 
size_t
 
i
 = 
MP_QSTR_
 + 1; i < 
nq�r
; ++i) {

173 
mp_obj_t
 
de�
[2];

174 
	`mp_l�d_m�hod_��e�ed
(
�gs
[0], 
i
, 
de�
, 
�l�
);

175 i�(
de�
[0] !�
MP_OBJ_NULL
) {

176 #i�
MICROPY_PY_ALL_SPECIAL_METHODS


179 i�(
i
 =�
MP_QSTR___d�__
 && 
de�
[1] !�
MP_OBJ_NULL
) {

180  
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

183 
	`mp_obj_li�_��nd
(
d�
, 
	`MP_OBJ_NEW_QSTR
(
i
));

187  
d�
;

188 
	}
}

189 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_d�_obj
, 0, 1, 
mp_bu�t�_d�
);

191 
mp_obj_t
 
	$mp_bu�t�_divmod
(
mp_obj_t
 
o1_�
, mp_obj_�
o2_�
) {

192  
	`mp_b��y_�
(
MP_BINARY_OP_DIVMOD
, 
o1_�
, 
o2_�
);

193 
	}
}

194 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_bu�t�_divmod_obj
, 
mp_bu�t�_divmod
);

196 
mp_obj_t
 
	$mp_bu�t�_hash
(
mp_obj_t
 
o_�
) {

198  
	`mp_u�ry_�
(
MP_UNARY_OP_HASH
, 
o_�
);

199 
	}
}

200 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_hash_obj
, 
mp_bu�t�_hash
);

202 
mp_obj_t
 
	$mp_bu�t�_hex
(
mp_obj_t
 
o_�
) {

203 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


204  
	`mp_b��y_�
(
MP_BINARY_OP_MODULO
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__�r��__hash_x
), 
o_�
);

206 
mp_obj_t
 
�gs
[] = { 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__b��_ݒ__c��__hash_x_b��_�o�_
), 
o_�
 };

207  
	`mp_obj_�r_f�m�
(
	`MP_ARRAY_SIZE
(
�gs
),�rgs, 
NULL
);

209 
	}
}

210 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_hex_obj
, 
mp_bu�t�_hex
);

212 #i�
MICROPY_PY_BUILTINS_INPUT


214 
	~"py/mph�.h
"

215 
	~"sh�ed/�adl�e/�adl�e.h
"

218 #i�de�
mp_h�_�adl�e


219 
	#mp_h�_�adl�e
 
�adl�e


	)

222 
mp_obj_t
 
	$mp_bu�t�_�put
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

223 i�(
n_�gs
 == 1) {

224 
	`mp_obj_��t
(
�gs
[0], 
PRINT_STR
);

226 
v�r_t
 
l�e
;

227 
	`v�r_��
(&
l�e
, 16);

228 
�t
 = 
	`mp_h�_�adl�e
(&
l�e
, "");

229 i�(
�t
 =�
CHAR_CTRL_C
) {

230 
	`mp_�i�_ty�
(&
mp_ty�_Keyb�rdI��ru�
);

232 i�(
l�e
.
�n
 =�0 && 
�t
 =�
CHAR_CTRL_D
) {

233 
	`mp_�i�_ty�
(&
mp_ty�_EOFE��
);

235  
	`mp_obj_�w_�r_�om_v�r
(&
l�e
);

236 
	}
}

237 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_�put_obj
, 0, 1, 
mp_bu�t�_�put
);

241 
mp_obj_t
 
	$mp_bu�t�_��
(
mp_obj_t
 
o_�
) {

242  
	`mp_g���
(
o_�
, 
NULL
);

243 
	}
}

244 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_��_obj
, 
mp_bu�t�_��
);

246 #i�
MICROPY_PY_BUILTINS_MIN_MAX


248 
mp_obj_t
 
	$mp_bu�t�_m�_max
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
, 
mp_u�t_t
 
�
) {

249 
mp_m�_�em_t
 *
key_�em
 = 
	`mp_m�_lookup
(
kw�gs
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_key
), 
MP_MAP_LOOKUP
);

250 
mp_m�_�em_t
 *
de�u�_�em
;

251 
mp_obj_t
 
key_�
 = 
key_�em
 =�
NULL
 ? 
MP_OBJ_NULL
 : key_�em->
v�ue
;

252 i�(
n_�gs
 == 1) {

254 
mp_obj_��_buf_t
 
��_buf
;

255 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�gs
[0], &
��_buf
);

256 
mp_obj_t
 
be�_key
 = 
MP_OBJ_NULL
;

257 
mp_obj_t
 
be�_obj
 = 
MP_OBJ_NULL
;

258 
mp_obj_t
 
�em
;

259 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

260 
mp_obj_t
 
key
 = 
key_�
 =�
MP_OBJ_NULL
 ? 
�em
 : 
	`mp_��_fun�i�_1
(key_fn, item);

261 i�(
be�_obj
 =�
MP_OBJ_NULL
 || (
	`mp_b��y_�
(
�
, 
key
, 
be�_key
�=�
mp_cڡ_�ue
)) {

262 
be�_key
 = 
key
;

263 
be�_obj
 = 
�em
;

266 i�(
be�_obj
 =�
MP_OBJ_NULL
) {

267 
de�u�_�em
 = 
	`mp_m�_lookup
(
kw�gs
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_de�u�
), 
MP_MAP_LOOKUP
);

268 i�(
de�u�_�em
 !�
NULL
) {

269 
be�_obj
 = 
de�u�_�em
->
v�ue
;

271 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("arg is�n�mpty sequence"));

274  
be�_obj
;

277 
mp_obj_t
 
be�_key
 = 
MP_OBJ_NULL
;

278 
mp_obj_t
 
be�_obj
 = 
MP_OBJ_NULL
;

279 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

280 
mp_obj_t
 
key
 = 
key_�
 =�
MP_OBJ_NULL
 ? 
�gs
[
i
] : 
	`mp_��_fun�i�_1
(key_fn,�rgs[i]);

281 i�(
be�_obj
 =�
MP_OBJ_NULL
 || (
	`mp_b��y_�
(
�
, 
key
, 
be�_key
�=�
mp_cڡ_�ue
)) {

282 
be�_key
 = 
key
;

283 
be�_obj
 = 
�gs
[
i
];

286  
be�_obj
;

288 
	}
}

290 
mp_obj_t
 
	$mp_bu�t�_max
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

291  
	`mp_bu�t�_m�_max
(
n_�gs
, 
�gs
, 
kw�gs
, 
MP_BINARY_OP_MORE
);

292 
	}
}

293 
MP_DEFINE_CONST_FUN_OBJ_KW
(
mp_bu�t�_max_obj
, 1, 
mp_bu�t�_max
);

295 
mp_obj_t
 
	$mp_bu�t�_m�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

296  
	`mp_bu�t�_m�_max
(
n_�gs
, 
�gs
, 
kw�gs
, 
MP_BINARY_OP_LESS
);

297 
	}
}

298 
MP_DEFINE_CONST_FUN_OBJ_KW
(
mp_bu�t�_m�_obj
, 1, 
mp_bu�t�_m�
);

302 #i�
MICROPY_PY_BUILTINS_NEXT2


303 
mp_obj_t
 
	$mp_bu�t�_�xt
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

304 i�(
n_�gs
 == 1) {

305 
mp_obj_t
 
�t
 = 
	`mp_���xt_�low_�i�
(
�gs
[0]);

306 i�(
�t
 =�
MP_OBJ_STOP_ITERATION
) {

307 
	`mp_�i�_St�I��ti�
(
	`MP_STATE_THREAD
(
��_���i�_�g
));

309  
�t
;

312 
mp_obj_t
 
�t
 = 
	`mp_���xt
(
�gs
[0]);

313  
�t
 =�
MP_OBJ_STOP_ITERATION
 ? 
�gs
[1] :�et;

315 
	}
}

316 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_�xt_obj
, 1, 2, 
mp_bu�t�_�xt
);

318 
mp_obj_t
 
	$mp_bu�t�_�xt
(
mp_obj_t
 
o
) {

319 
mp_obj_t
 
�t
 = 
	`mp_���xt_�low_�i�
(
o
);

320 i�(
�t
 =�
MP_OBJ_STOP_ITERATION
) {

321 
	`mp_�i�_St�I��ti�
(
	`MP_STATE_THREAD
(
��_���i�_�g
));

323  
�t
;

325 
	}
}

326 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_�xt_obj
, 
mp_bu�t�_�xt
);

329 
mp_obj_t
 
	$mp_bu�t�_o�
(
mp_obj_t
 
o_�
) {

330 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


331  
	`mp_b��y_�
(
MP_BINARY_OP_MODULO
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__�r��__hash_o
), 
o_�
);

333 
mp_obj_t
 
�gs
[] = { 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__b��_ݒ__c��__hash_o_b��_�o�_
), 
o_�
 };

334  
	`mp_obj_�r_f�m�
(
	`MP_ARRAY_SIZE
(
�gs
),�rgs, 
NULL
);

336 
	}
}

337 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_o�_obj
, 
mp_bu�t�_o�
);

339 
mp_obj_t
 
	$mp_bu�t�_�d
(
mp_obj_t
 
o_�
) {

340 
size_t
 
�n
;

341 cڡ 
by�
 *
�r
 = (cڡ by� *)
	`mp_obj_�r_g�_d�a
(
o_�
, &
�n
);

342 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


343 i�(
	`mp_obj_is_�r
(
o_�
)) {

344 
�n
 = 
	`utf8_ch��n
(
�r
,�en);

345 i�(
�n
 == 1) {

346  
	`mp_obj_�w_�t
(
	`utf8_g�_ch�
(
�r
));

352 i�(
�n
 == 1) {

353  
	`MP_OBJ_NEW_SMALL_INT
(
�r
[0]);

357 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


358 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("ord�xpects� character"));

360 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

361 
	`MP_ERROR_TEXT
("�d(�ex��ed� ch�a��, bu��r�g o��ngth %d found"), ()
�n
);

363 
	}
}

364 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_�d_obj
, 
mp_bu�t�_�d
);

366 
mp_obj_t
 
	$mp_bu�t�_pow
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

367 
n_�gs
) {

369  
	`mp_b��y_�
(
MP_BINARY_OP_POWER
, 
�gs
[0],�rgs[1]);

371 #i�!
MICROPY_PY_BUILTINS_POW3


372 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("3-arg�ow()�ot supported"));

373 #�i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_MPZ


374  
	`mp_b��y_�
(
MP_BINARY_OP_MODULO
, mp_b��y_�(
MP_BINARY_OP_POWER
, 
�gs
[0],�rgs[1]),�rgs[2]);

376  
	`mp_obj_�t_pow3
(
�gs
[0],�rgs[1],�rgs[2]);

379 
	}
}

380 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_pow_obj
, 2, 3, 
mp_bu�t�_pow
);

382 
mp_obj_t
 
	$mp_bu�t�_��t
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
) {

383 �um { 
ARG_�p
, 
ARG_�d
, 
ARG_f�e
 };

384 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

385 { 
MP_QSTR_�p
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
	`MP_ROM_QSTR
(
MP_QSTR__�a�_
)} },

386 { 
MP_QSTR_�d
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
	`MP_ROM_QSTR
(
MP_QSTR__0x0a_
)} },

387 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


388 { 
MP_QSTR_f�e
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
	`MP_ROM_PTR
(&
mp_sys_�dout_obj
)} },

394 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

395 
size_t
 
�n
[2];

396 } 
u
;

397 
	`mp_�g_�r�_�l
(0, 
NULL
, 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
u
.
�gs
);

399 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


400 
	`mp_g�_��am_�i�
(
u
.
�gs
[
ARG_f�e
].
u_obj
, 
MP_STREAM_OP_WRITE
);

401 
mp_��t_t
 
��t
 = {
	`MP_OBJ_TO_PTR
(
u
.
�gs
[
ARG_f�e
].
u_obj
), 
mp_��am_wr�e_ad�t�
};

405 
mp_obj_t
 
�p
 = 
u
.
�gs
[
ARG_�p
].
u_obj
;

406 
mp_obj_t
 
�d
 = 
u
.
�gs
[
ARG_�d
].
u_obj
;

407 cڡ *
�p_d�a
 = 
	`mp_obj_�r_g�_d�a
(
�p
, &
u
.
�n
[0]);

408 cڡ *
�d_d�a
 = 
	`mp_obj_�r_g�_d�a
(
�d
, &
u
.
�n
[1]);

410 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

411 i�(
i
 > 0) {

412 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


413 
	`mp_��am_wr�e_ad�t�
(
��t
.
d�a
, 
�p_d�a
, 
u
.
�n
[0]);

415 
	`mp_��t_��
(&
mp_��_��t
, 
�p_d�a
, 
u
.
�n
[0], 0, 0, 0);

418 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


419 
	`mp_obj_��t_h��r
(&
��t
, 
pos_�gs
[
i
], 
PRINT_STR
);

421 
	`mp_obj_��t_h��r
(&
mp_��_��t
, 
pos_�gs
[
i
], 
PRINT_STR
);

424 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


425 
	`mp_��am_wr�e_ad�t�
(
��t
.
d�a
, 
�d_d�a
, 
u
.
�n
[1]);

427 
	`mp_��t_��
(&
mp_��_��t
, 
�d_d�a
, 
u
.
�n
[1], 0, 0, 0);

429  
mp_cڡ_n�e
;

430 
	}
}

431 
MP_DEFINE_CONST_FUN_OBJ_KW
(
mp_bu�t�_��t_obj
, 0, 
mp_bu�t�_��t
);

433 
mp_obj_t
 
	$mp_bu�t�___��_��t__
(
mp_obj_t
 
o
) {

434 i�(
o
 !�
mp_cڡ_n�e
) {

435 
	`mp_obj_��t_h��r
(
MP_PYTHON_PRINTER
, 
o
, 
PRINT_REPR
);

436 
	`mp_��t_�r
(
MP_PYTHON_PRINTER
, "\n");

437 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


439 
mp_obj_t
 
de�
[2] = {
MP_OBJ_SENTINEL
, 
o
};

440 
	`MP_OBJ_TYPE_GET_SLOT
(&
mp_ty�_modu�
, 
��
)(
	`MP_OBJ_FROM_PTR
(&
mp_modu�_bu�t�s
), 
MP_QSTR__
, 
de�
);

443  
mp_cڡ_n�e
;

444 
	}
}

445 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�___��_��t___obj
, 
mp_bu�t�___��_��t__
);

447 
mp_obj_t
 
	$mp_bu�t�_��
(
mp_obj_t
 
o_�
) {

448 
v�r_t
 
v�r
;

449 
mp_��t_t
 
��t
;

450 
	`v�r_��_��t
(&
v�r
, 16, &
��t
);

451 
	`mp_obj_��t_h��r
(&
��t
, 
o_�
, 
PRINT_REPR
);

452  
	`mp_obj_�w_�r_�om_utf8_v�r
(&
v�r
);

453 
	}
}

454 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_��_obj
, 
mp_bu�t�_��
);

456 
mp_obj_t
 
	$mp_bu�t�_round
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

457 
mp_obj_t
 
o_�
 = 
�gs
[0];

458 i�(
	`mp_obj_is_�t
(
o_�
)) {

459 i�(
n_�gs
 <= 1) {

460  
o_�
;

463 #i�!
MICROPY_PY_BUILTINS_ROUND_INT


464 
	`mp_�i�_N�Im�em��dE��
(
NULL
);

466 
mp_�t_t
 
num_dig
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

467 i�(
num_dig
 >= 0) {

468  
o_�
;

471 
mp_obj_t
 
mu�
 = 
	`mp_b��y_�
(
MP_BINARY_OP_POWER
, 
	`MP_OBJ_NEW_SMALL_INT
(10), MP_OBJ_NEW_SMALL_INT(-
num_dig
));

472 
mp_obj_t
 
h�f_mu�
 = 
	`mp_b��y_�
(
MP_BINARY_OP_FLOOR_DIVIDE
, 
mu�
, 
	`MP_OBJ_NEW_SMALL_INT
(2));

473 
mp_obj_t
 
modulo
 = 
	`mp_b��y_�
(
MP_BINARY_OP_MODULO
, 
o_�
, 
mu�
);

474 
mp_obj_t
 
rounded
 = 
	`mp_b��y_�
(
MP_BINARY_OP_SUBTRACT
, 
o_�
, 
modulo
);

475 i�(
	`mp_obj_is_�ue
(
	`mp_b��y_�
(
MP_BINARY_OP_MORE
, 
h�f_mu�
, 
modulo
))) {

476  
rounded
;

477 } i�(
	`mp_obj_is_�ue
(
	`mp_b��y_�
(
MP_BINARY_OP_MORE
, 
modulo
, 
h�f_mu�
))) {

478  
	`mp_b��y_�
(
MP_BINARY_OP_ADD
, 
rounded
, 
mu�
);

481 
mp_obj_t
 
�o�
 = 
	`mp_b��y_�
(
MP_BINARY_OP_FLOOR_DIVIDE
, 
o_�
, 
mu�
);

482 i�(
	`mp_obj_is_�ue
(
	`mp_b��y_�
(
MP_BINARY_OP_AND
, 
�o�
, 
	`MP_OBJ_NEW_SMALL_INT
(1)))) {

483  
	`mp_b��y_�
(
MP_BINARY_OP_ADD
, 
rounded
, 
mu�
);

485  
rounded
;

490 #i�
MICROPY_PY_BUILTINS_FLOAT


491 
mp_��t_t
 
v�
 = 
	`mp_obj_g�_��t
(
o_�
);

492 i�(
n_�gs
 > 1) {

493 
mp_�t_t
 
num_dig
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

494 
mp_��t_t
 
mu�
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, (mp_��t_t)
num_dig
);

496 
mp_��t_t
 
rounded
 = 
	`MICROPY_FLOAT_C_FUN
(
ìby�t
)(
v�
 * 
mu�
) / mult;

497  
	`mp_obj_�w_��t
(
rounded
);

499 
mp_��t_t
 
rounded
 = 
	`MICROPY_FLOAT_C_FUN
(
ìby�t
)(
v�
);

500  
	`mp_obj_�w_�t_�om_��t
(
rounded
);

502 
mp_�t_t
 
r
 = 
	`mp_obj_g�_�t
(
o_�
);

503  
	`mp_obj_�w_�t
(
r
);

505 
	}
}

506 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_round_obj
, 1, 2, 
mp_bu�t�_round
);

508 
mp_obj_t
 
	$mp_bu�t�_sum
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

509 
mp_obj_t
 
v�ue
;

510 
n_�gs
) {

512 
v�ue
 = 
	`MP_OBJ_NEW_SMALL_INT
(0);

515 
v�ue
 = 
�gs
[1];

518 
mp_obj_��_buf_t
 
��_buf
;

519 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�gs
[0], &
��_buf
);

520 
mp_obj_t
 
�em
;

521 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

522 
v�ue
 = 
	`mp_b��y_�
(
MP_BINARY_OP_ADD
, v�ue, 
�em
);

524  
v�ue
;

525 
	}
}

526 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_sum_obj
, 1, 2, 
mp_bu�t�_sum
);

528 
mp_obj_t
 
	$mp_bu�t�_s܋d
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

529 i�(
n_�gs
 > 1) {

530 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("must use keyword�rgument for key function"));

532 
mp_obj_t
 
�lf
 = 
	`mp_obj_li�_make_�w
(&
mp_ty�_li�
, 1, 0, 
�gs
);

533 
	`mp_obj_li�_s�t
(1, &
�lf
, 
kw�gs
);

535  
�lf
;

536 
	}
}

537 
MP_DEFINE_CONST_FUN_OBJ_KW
(
mp_bu�t�_s܋d_obj
, 1, 
mp_bu�t�_s܋d
);

540 
�l�e
 
mp_obj_t
 
	$mp_l�d_��_de�u�
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�
defv�
) {

541 
mp_obj_t
 
de�
[2];

543 i�(
defv�
 =�
MP_OBJ_NULL
) {

544 
	`mp_l�d_m�hod
(
ba�
, 
��
, 
de�
);

546 
	`mp_l�d_m�hod_��e�ed
(
ba�
, 
��
, 
de�
, 
�l�
);

548 i�(
de�
[0] =�
MP_OBJ_NULL
) {

549  
defv�
;

550 } i�(
de�
[1] =�
MP_OBJ_NULL
) {

552  
de�
[0];

555  
	`mp_obj_�w_bound_m�h
(
de�
[0], dest[1]);

557 
	}
}

559 
mp_obj_t
 
	$mp_bu�t�_g���
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

560 
mp_obj_t
 
defv�
 = 
MP_OBJ_NULL
;

561 i�(
n_�gs
 > 2) {

562 
defv�
 = 
�gs
[2];

564  
	`mp_l�d_��_de�u�
(
�gs
[0], 
	`mp_obj_�r_g�_q�r
�rgs[1]), 
defv�
);

565 
	}
}

566 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_bu�t�_g���_obj
, 2, 3, 
mp_bu�t�_g���
);

568 
mp_obj_t
 
	$mp_bu�t�_���r
(
mp_obj_t
 
ba�
, mp_obj_�
��
, mp_obj_�
v�ue
) {

569 
	`mp_��e_��
(
ba�
, 
	`mp_obj_�r_g�_q�r
(
��
), 
v�ue
);

570  
mp_cڡ_n�e
;

571 
	}
}

572 
MP_DEFINE_CONST_FUN_OBJ_3
(
mp_bu�t�_���r_obj
, 
mp_bu�t�_���r
);

574 #i�
MICROPY_CPYTHON_COMPAT


575 
mp_obj_t
 
	$mp_bu�t�_d���
(
mp_obj_t
 
ba�
, mp_obj_�
��
) {

576  
	`mp_bu�t�_���r
(
ba�
, 
��
, 
MP_OBJ_NULL
);

577 
	}
}

578 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_bu�t�_d���_obj
, 
mp_bu�t�_d���
);

581 
mp_obj_t
 
	$mp_bu�t�_ha��r
(
mp_obj_t
 
obje�_�
, mp_obj_�
��_�
) {

582 
q�r
 
��
 = 
	`mp_obj_�r_g�_q�r
(
��_�
);

583 
mp_obj_t
 
de�
[2];

584 
	`mp_l�d_m�hod_��e�ed
(
obje�_�
, 
��
, 
de�
, 
�l�
);

585  
	`mp_obj_�w_bo�
(
de�
[0] !�
MP_OBJ_NULL
);

586 
	}
}

587 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_bu�t�_ha��r_obj
, 
mp_bu�t�_ha��r
);

589 
mp_obj_t
 
	$mp_bu�t�_glob�s
() {

590  
	`MP_OBJ_FROM_PTR
(
	`mp_glob�s_g�
());

591 
	}
}

592 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_bu�t�_glob�s_obj
, 
mp_bu�t�_glob�s
);

594 
mp_obj_t
 
	$mp_bu�t�_lo�ls
() {

595  
	`MP_OBJ_FROM_PTR
(
	`mp_lo�ls_g�
());

596 
	}
}

597 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_bu�t�_lo�ls_obj
, 
mp_bu�t�_lo�ls
);

600 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_id_obj
, 
mp_obj_id
);

601 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_bu�t�_�n_obj
, 
mp_obj_�n
);

603 #i�
ORB_ENABLE_INTERRUPT


604 
mp_obj_t
 
	$mp_ex�
() {

605 
mp_obj_ex��i�_t
 
sy�em_ex�
;

606 
sy�em_ex�
.
ba�
.
ty�
 = &
mp_ty�_Sy�emEx�
;

608 
sy�em_ex�
.
�a�back_�loc
 = 0;

609 
sy�em_ex�
.
�a�back_d�a
 = 
NULL
;

612 
sy�em_ex�
.
�gs
 = (
mp_obj_tu�e_t
*�
	`mp_obj_�w_tu�e
(1, 
NULL
);

613 
mp_obj_t
 
mp_�r
 = 
	`mp_obj_�w_�r
("Exit", 4);

614 
sy�em_ex�
.
�gs
->
�ems
[0] = 
mp_�r
;

615 
	`MP_STATE_VM
(
�b_���u�_�je�ed
��
�ue
;

617 
	`�r_�i�
(&
sy�em_ex�
);

619  
mp_cڡ_n�e
;

620 
	}
}

621 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_ex�_obj
, 
mp_ex�
);

624 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_bu�t�s_glob�s_�b�
[] = {

625 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_bu�t�s
) },

628 { 
MP_ROM_QSTR
(
MP_QSTR___bu�d_�ass__
), 
MP_ROM_PTR
(&
mp_bu�t�___bu�d_�ass___obj
) },

629 { 
MP_ROM_QSTR
(
MP_QSTR___imp�t__
), 
MP_ROM_PTR
(&
mp_bu�t�___imp�t___obj
) },

630 { 
MP_ROM_QSTR
(
MP_QSTR___��_��t__
), 
MP_ROM_PTR
(&
mp_bu�t�___��_��t___obj
) },

633 { 
MP_ROM_QSTR
(
MP_QSTR_bo�
), 
MP_ROM_PTR
(&
mp_ty�_bo�
) },

634 { 
MP_ROM_QSTR
(
MP_QSTR_by�s
), 
MP_ROM_PTR
(&
mp_ty�_by�s
) },

636 #i�
ORB_ENABLE_INTERRUPT


637 { 
MP_ROM_QSTR
(
MP_QSTR_ex�
), 
MP_ROM_PTR
(&
mp_ex�_obj
) },

639 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


640 { 
MP_ROM_QSTR
(
MP_QSTR_by���y
), 
MP_ROM_PTR
(&
mp_ty�_by���y
) },

642 #i�
MICROPY_PY_BUILTINS_COMPLEX


643 { 
MP_ROM_QSTR
(
MP_QSTR_com�ex
), 
MP_ROM_PTR
(&
mp_ty�_com�ex
) },

645 { 
MP_ROM_QSTR
(
MP_QSTR_di�
), 
MP_ROM_PTR
(&
mp_ty�_di�
) },

646 #i�
MICROPY_PY_BUILTINS_ENUMERATE


647 { 
MP_ROM_QSTR
(
MP_QSTR_�um��e
), 
MP_ROM_PTR
(&
mp_ty�_�um��e
) },

649 #i�
MICROPY_PY_BUILTINS_FILTER


650 { 
MP_ROM_QSTR
(
MP_QSTR_f��r
), 
MP_ROM_PTR
(&
mp_ty�_f��r
) },

652 #i�
MICROPY_PY_BUILTINS_FLOAT


653 { 
MP_ROM_QSTR
(
MP_QSTR_��t
), 
MP_ROM_PTR
(&
mp_ty�_��t
) },

655 #i�
MICROPY_PY_BUILTINS_SET
 && 
MICROPY_PY_BUILTINS_FROZENSET


656 { 
MP_ROM_QSTR
(
MP_QSTR_�oz��t
), 
MP_ROM_PTR
(&
mp_ty�_�oz��t
) },

658 { 
MP_ROM_QSTR
(
MP_QSTR_�t
), 
MP_ROM_PTR
(&
mp_ty�_�t
) },

659 { 
MP_ROM_QSTR
(
MP_QSTR_li�
), 
MP_ROM_PTR
(&
mp_ty�_li�
) },

660 { 
MP_ROM_QSTR
(
MP_QSTR_m�
), 
MP_ROM_PTR
(&
mp_ty�_m�
) },

661 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


662 { 
MP_ROM_QSTR
(
MP_QSTR_mem�yv�w
), 
MP_ROM_PTR
(&
mp_ty�_mem�yv�w
) },

664 { 
MP_ROM_QSTR
(
MP_QSTR_obje�
), 
MP_ROM_PTR
(&
mp_ty�_obje�
) },

665 #i�
MICROPY_PY_BUILTINS_PROPERTY


666 { 
MP_ROM_QSTR
(
MP_QSTR_�ݔty
), 
MP_ROM_PTR
(&
mp_ty�_�ݔty
) },

668 { 
MP_ROM_QSTR
(
MP_QSTR_�nge
), 
MP_ROM_PTR
(&
mp_ty�_�nge
) },

669 #i�
MICROPY_PY_BUILTINS_REVERSED


670 { 
MP_ROM_QSTR
(
MP_QSTR_�v��d
), 
MP_ROM_PTR
(&
mp_ty�_�v��d
) },

672 #i�
MICROPY_PY_BUILTINS_SET


673 { 
MP_ROM_QSTR
(
MP_QSTR_�t
), 
MP_ROM_PTR
(&
mp_ty�_�t
) },

675 #i�
MICROPY_PY_BUILTINS_SLICE


676 { 
MP_ROM_QSTR
(
MP_QSTR_�i�
), 
MP_ROM_PTR
(&
mp_ty�_�i�
) },

678 { 
MP_ROM_QSTR
(
MP_QSTR_�r
), 
MP_ROM_PTR
(&
mp_ty�_�r
) },

679 { 
MP_ROM_QSTR
(
MP_QSTR_su�r
), 
MP_ROM_PTR
(&
mp_ty�_su�r
) },

680 { 
MP_ROM_QSTR
(
MP_QSTR_tu�e
), 
MP_ROM_PTR
(&
mp_ty�_tu�e
) },

681 { 
MP_ROM_QSTR
(
MP_QSTR_ty�
), 
MP_ROM_PTR
(&
mp_ty�_ty�
) },

682 { 
MP_ROM_QSTR
(
MP_QSTR_z�
), 
MP_ROM_PTR
(&
mp_ty�_z�
) },

684 { 
MP_ROM_QSTR
(
MP_QSTR_�assm�hod
), 
MP_ROM_PTR
(&
mp_ty�_�assm�hod
) },

685 { 
MP_ROM_QSTR
(
MP_QSTR_��icm�hod
), 
MP_ROM_PTR
(&
mp_ty�_��icm�hod
) },

688 { 
MP_ROM_QSTR
(
MP_QSTR_EΝsis
), 
MP_ROM_PTR
(&
mp_cڡ_�l�sis_obj
) },

689 #i�
MICROPY_PY_BUILTINS_NOTIMPLEMENTED


690 { 
MP_ROM_QSTR
(
MP_QSTR_N�Im�em��d
), 
MP_ROM_PTR
(&
mp_cڡ_n�im�em��d_obj
) },

694 { 
MP_ROM_QSTR
(
MP_QSTR_abs
), 
MP_ROM_PTR
(&
mp_bu�t�_abs_obj
) },

695 { 
MP_ROM_QSTR
(
MP_QSTR_�l
), 
MP_ROM_PTR
(&
mp_bu�t�_�l_obj
) },

696 { 
MP_ROM_QSTR
(
MP_QSTR_�y
), 
MP_ROM_PTR
(&
mp_bu�t�_�y_obj
) },

697 { 
MP_ROM_QSTR
(
MP_QSTR_b�
), 
MP_ROM_PTR
(&
mp_bu�t�_b�_obj
) },

698 { 
MP_ROM_QSTR
(
MP_QSTR_��ab�
), 
MP_ROM_PTR
(&
mp_bu�t�_��ab�_obj
) },

699 #i�
MICROPY_PY_BUILTINS_COMPILE


700 { 
MP_ROM_QSTR
(
MP_QSTR_comp�e
), 
MP_ROM_PTR
(&
mp_bu�t�_comp�e_obj
) },

702 { 
MP_ROM_QSTR
(
MP_QSTR_chr
), 
MP_ROM_PTR
(&
mp_bu�t�_chr_obj
) },

703 #i�
MICROPY_CPYTHON_COMPAT


704 { 
MP_ROM_QSTR
(
MP_QSTR_d���
), 
MP_ROM_PTR
(&
mp_bu�t�_d���_obj
) },

706 { 
MP_ROM_QSTR
(
MP_QSTR_d�
), 
MP_ROM_PTR
(&
mp_bu�t�_d�_obj
) },

707 { 
MP_ROM_QSTR
(
MP_QSTR_divmod
), 
MP_ROM_PTR
(&
mp_bu�t�_divmod_obj
) },

708 #i�
MICROPY_PY_BUILTINS_EVAL_EXEC


709 { 
MP_ROM_QSTR
(
MP_QSTR_ev�
), 
MP_ROM_PTR
(&
mp_bu�t�_ev�_obj
) },

710 { 
MP_ROM_QSTR
(
MP_QSTR_exec
), 
MP_ROM_PTR
(&
mp_bu�t�_exec_obj
) },

712 #i�
MICROPY_PY_BUILTINS_EXECFILE


713 { 
MP_ROM_QSTR
(
MP_QSTR_execf�e
), 
MP_ROM_PTR
(&
mp_bu�t�_execf�e_obj
) },

715 { 
MP_ROM_QSTR
(
MP_QSTR_g���
), 
MP_ROM_PTR
(&
mp_bu�t�_g���_obj
) },

716 { 
MP_ROM_QSTR
(
MP_QSTR_���r
), 
MP_ROM_PTR
(&
mp_bu�t�_���r_obj
) },

717 { 
MP_ROM_QSTR
(
MP_QSTR_glob�s
), 
MP_ROM_PTR
(&
mp_bu�t�_glob�s_obj
) },

718 { 
MP_ROM_QSTR
(
MP_QSTR_ha��r
), 
MP_ROM_PTR
(&
mp_bu�t�_ha��r_obj
) },

719 { 
MP_ROM_QSTR
(
MP_QSTR_hash
), 
MP_ROM_PTR
(&
mp_bu�t�_hash_obj
) },

720 #i�
MICROPY_PY_BUILTINS_HELP


721 { 
MP_ROM_QSTR
(
MP_QSTR_h�p
), 
MP_ROM_PTR
(&
mp_bu�t�_h�p_obj
) },

723 { 
MP_ROM_QSTR
(
MP_QSTR_hex
), 
MP_ROM_PTR
(&
mp_bu�t�_hex_obj
) },

724 { 
MP_ROM_QSTR
(
MP_QSTR_id
), 
MP_ROM_PTR
(&
mp_bu�t�_id_obj
) },

725 #i�
MICROPY_PY_BUILTINS_INPUT


726 { 
MP_ROM_QSTR
(
MP_QSTR_�put
), 
MP_ROM_PTR
(&
mp_bu�t�_�put_obj
) },

728 { 
MP_ROM_QSTR
(
MP_QSTR_is����
), 
MP_ROM_PTR
(&
mp_bu�t�_is����_obj
) },

729 { 
MP_ROM_QSTR
(
MP_QSTR_issub�ass
), 
MP_ROM_PTR
(&
mp_bu�t�_issub�ass_obj
) },

730 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_bu�t�_��_obj
) },

731 { 
MP_ROM_QSTR
(
MP_QSTR_�n
), 
MP_ROM_PTR
(&
mp_bu�t�_�n_obj
) },

732 { 
MP_ROM_QSTR
(
MP_QSTR_lo�ls
), 
MP_ROM_PTR
(&
mp_bu�t�_lo�ls_obj
) },

733 #i�
MICROPY_PY_BUILTINS_MIN_MAX


734 { 
MP_ROM_QSTR
(
MP_QSTR_max
), 
MP_ROM_PTR
(&
mp_bu�t�_max_obj
) },

735 { 
MP_ROM_QSTR
(
MP_QSTR_m�
), 
MP_ROM_PTR
(&
mp_bu�t�_m�_obj
) },

737 { 
MP_ROM_QSTR
(
MP_QSTR_�xt
), 
MP_ROM_PTR
(&
mp_bu�t�_�xt_obj
) },

738 { 
MP_ROM_QSTR
(
MP_QSTR_o�
), 
MP_ROM_PTR
(&
mp_bu�t�_o�_obj
) },

739 #i�
MICROPY_PY_IO


740 { 
MP_ROM_QSTR
(
MP_QSTR_ݒ
), 
MP_ROM_PTR
(&
mp_bu�t�_ݒ_obj
) },

742 { 
MP_ROM_QSTR
(
MP_QSTR_�d
), 
MP_ROM_PTR
(&
mp_bu�t�_�d_obj
) },

743 { 
MP_ROM_QSTR
(
MP_QSTR_pow
), 
MP_ROM_PTR
(&
mp_bu�t�_pow_obj
) },

744 { 
MP_ROM_QSTR
(
MP_QSTR_��t
), 
MP_ROM_PTR
(&
mp_bu�t�_��t_obj
) },

745 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_bu�t�_��_obj
) },

746 { 
MP_ROM_QSTR
(
MP_QSTR_round
), 
MP_ROM_PTR
(&
mp_bu�t�_round_obj
) },

747 { 
MP_ROM_QSTR
(
MP_QSTR_s܋d
), 
MP_ROM_PTR
(&
mp_bu�t�_s܋d_obj
) },

748 { 
MP_ROM_QSTR
(
MP_QSTR_sum
), 
MP_ROM_PTR
(&
mp_bu�t�_sum_obj
) },

751 { 
MP_ROM_QSTR
(
MP_QSTR_Ba�Ex��i�
), 
MP_ROM_PTR
(&
mp_ty�_Ba�Ex��i�
) },

752 { 
MP_ROM_QSTR
(
MP_QSTR_Ar�hm�icE��
), 
MP_ROM_PTR
(&
mp_ty�_Ar�hm�icE��
) },

753 { 
MP_ROM_QSTR
(
MP_QSTR_As��i�E��
), 
MP_ROM_PTR
(&
mp_ty�_As��i�E��
) },

754 { 
MP_ROM_QSTR
(
MP_QSTR_A�ribu�E��
), 
MP_ROM_PTR
(&
mp_ty�_A�ribu�E��
) },

755 { 
MP_ROM_QSTR
(
MP_QSTR_EOFE��
), 
MP_ROM_PTR
(&
mp_ty�_EOFE��
) },

756 { 
MP_ROM_QSTR
(
MP_QSTR_Ex��i�
), 
MP_ROM_PTR
(&
mp_ty�_Ex��i�
) },

757 { 
MP_ROM_QSTR
(
MP_QSTR_G����Ex�
), 
MP_ROM_PTR
(&
mp_ty�_G����Ex�
) },

758 { 
MP_ROM_QSTR
(
MP_QSTR_Imp�tE��
), 
MP_ROM_PTR
(&
mp_ty�_Imp�tE��
) },

759 { 
MP_ROM_QSTR
(
MP_QSTR_Ind��ti�E��
), 
MP_ROM_PTR
(&
mp_ty�_Ind��ti�E��
) },

760 { 
MP_ROM_QSTR
(
MP_QSTR_IndexE��
), 
MP_ROM_PTR
(&
mp_ty�_IndexE��
) },

761 { 
MP_ROM_QSTR
(
MP_QSTR_Keyb�rdI��ru�
), 
MP_ROM_PTR
(&
mp_ty�_Keyb�rdI��ru�
) },

762 { 
MP_ROM_QSTR
(
MP_QSTR_KeyE��
), 
MP_ROM_PTR
(&
mp_ty�_KeyE��
) },

763 { 
MP_ROM_QSTR
(
MP_QSTR_LookupE��
), 
MP_ROM_PTR
(&
mp_ty�_LookupE��
) },

764 { 
MP_ROM_QSTR
(
MP_QSTR_Mem�yE��
), 
MP_ROM_PTR
(&
mp_ty�_Mem�yE��
) },

765 { 
MP_ROM_QSTR
(
MP_QSTR_NameE��
), 
MP_ROM_PTR
(&
mp_ty�_NameE��
) },

766 { 
MP_ROM_QSTR
(
MP_QSTR_N�Im�em��dE��
), 
MP_ROM_PTR
(&
mp_ty�_N�Im�em��dE��
) },

767 { 
MP_ROM_QSTR
(
MP_QSTR_OSE��
), 
MP_ROM_PTR
(&
mp_ty�_OSE��
) },

768 { 
MP_ROM_QSTR
(
MP_QSTR_Ov��owE��
), 
MP_ROM_PTR
(&
mp_ty�_Ov��owE��
) },

769 { 
MP_ROM_QSTR
(
MP_QSTR_Ru�imeE��
), 
MP_ROM_PTR
(&
mp_ty�_Ru�imeE��
) },

770 #i�
MICROPY_PY_ASYNC_AWAIT


771 { 
MP_ROM_QSTR
(
MP_QSTR_St�AsyncI��ti�
), 
MP_ROM_PTR
(&
mp_ty�_St�AsyncI��ti�
) },

773 { 
MP_ROM_QSTR
(
MP_QSTR_St�I��ti�
), 
MP_ROM_PTR
(&
mp_ty�_St�I��ti�
) },

774 { 
MP_ROM_QSTR
(
MP_QSTR_Sy�axE��
), 
MP_ROM_PTR
(&
mp_ty�_Sy�axE��
) },

775 { 
MP_ROM_QSTR
(
MP_QSTR_Sy�emEx�
), 
MP_ROM_PTR
(&
mp_ty�_Sy�emEx�
) },

776 { 
MP_ROM_QSTR
(
MP_QSTR_Ty�E��
), 
MP_ROM_PTR
(&
mp_ty�_Ty�E��
) },

777 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


778 { 
MP_ROM_QSTR
(
MP_QSTR_UnicodeE��
), 
MP_ROM_PTR
(&
mp_ty�_UnicodeE��
) },

780 { 
MP_ROM_QSTR
(
MP_QSTR_V�ueE��
), 
MP_ROM_PTR
(&
mp_ty�_V�ueE��
) },

781 #i�
MICROPY_EMIT_NATIVE


782 { 
MP_ROM_QSTR
(
MP_QSTR_V��Ty�E��
), 
MP_ROM_PTR
(&
mp_ty�_V��Ty�E��
) },

784 { 
MP_ROM_QSTR
(
MP_QSTR_Z�oDivisi�E��
), 
MP_ROM_PTR
(&
mp_ty�_Z�oDivisi�E��
) },

787 
MICROPY_PORT_BUILTINS


788 
MICROPY_PORT_EXTRA_BUILTINS


791 
MP_DEFINE_CONST_DICT
(
mp_modu�_bu�t�s_glob�s
, 
mp_modu�_bu�t�s_glob�s_�b�
);

793 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_bu�t�s
 = {

794 .
ba�
 = { &
mp_ty�_modu�
 },

795 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_bu�t�s_glob�s
,

798 
MP_REGISTER_MODULE
(
MP_QSTR_bu�t�s
, 
mp_modu�_bu�t�s
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modcmath.c

27 
	~"py/bu�t�.h
"

29 #i�
MICROPY_PY_BUILTINS_FLOAT
 && 
MICROPY_PY_BUILTINS_COMPLEX
 && 
MICROPY_PY_CMATH


31 
	~<m�h.h
>

34 
mp_obj_t
 
	$mp_cm�h_pha�
(
mp_obj_t
 
z_obj
) {

35 
mp_��t_t
 
��
, 
imag
;

36 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

37  
	`mp_obj_�w_��t
(
	`MICROPY_FLOAT_C_FUN
(
��2
)(
imag
, 
��
));

38 
	}
}

39 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_pha�_obj
, 
mp_cm�h_pha�
);

42 
mp_obj_t
 
	$mp_cm�h_pެ
(
mp_obj_t
 
z_obj
) {

43 
mp_��t_t
 
��
, 
imag
;

44 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

45 
mp_obj_t
 
tu�e
[2] = {

46 
	`mp_obj_�w_��t
(
	`MICROPY_FLOAT_C_FUN
(
sq�
)(
��
 *���+ 
imag
 * imag)),

47 
	`mp_obj_�w_��t
(
	`MICROPY_FLOAT_C_FUN
(
��2
)(
imag
, 
��
)),

49  
	`mp_obj_�w_tu�e
(2, 
tu�e
);

50 
	}
}

51 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_pެ_obj
, 
mp_cm�h_pެ
);

54 
mp_obj_t
 
	$mp_cm�h_��
(
mp_obj_t
 
r_obj
, mp_obj_�
phi_obj
) {

55 
mp_��t_t
 
r
 = 
	`mp_obj_g�_��t
(
r_obj
);

56 
mp_��t_t
 
phi
 = 
	`mp_obj_g�_��t
(
phi_obj
);

57  
	`mp_obj_�w_com�ex
(
r
 * 
	`MICROPY_FLOAT_C_FUN
(
cos
)(
phi
),� * MICROPY_FLOAT_C_FUN(
s�
)(phi));

58 
	}
}

59 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_cm�h_��_obj
, 
mp_cm�h_��
);

62 
mp_obj_t
 
	$mp_cm�h_exp
(
mp_obj_t
 
z_obj
) {

63 
mp_��t_t
 
��
, 
imag
;

64 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

65 
mp_��t_t
 
exp_��
 = 
	`MICROPY_FLOAT_C_FUN
(
exp
)(
��
);

66  
	`mp_obj_�w_com�ex
(
exp_��
 * 
	`MICROPY_FLOAT_C_FUN
(
cos
)(
imag
),�xp_�� * MICROPY_FLOAT_C_FUN(
s�
)(imag));

67 
	}
}

68 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_exp_obj
, 
mp_cm�h_exp
);

72 
mp_obj_t
 
	$mp_cm�h_log
(
mp_obj_t
 
z_obj
) {

73 
mp_��t_t
 
��
, 
imag
;

74 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

75  
	`mp_obj_�w_com�ex
(
	`MICROPY_FLOAT_CONST
(0.5�* 
	`MICROPY_FLOAT_C_FUN
(
log
)(
��
 *���+ 
imag
 * imag), MICROPY_FLOAT_C_FUN(
��2
)(imag,�eal));

76 
	}
}

77 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_log_obj
, 
mp_cm�h_log
);

79 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


81 
mp_obj_t
 
	$mp_cm�h_log10
(
mp_obj_t
 
z_obj
) {

82 
mp_��t_t
 
��
, 
imag
;

83 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

84  
	`mp_obj_�w_com�ex
(
	`MICROPY_FLOAT_CONST
(0.5�* 
	`MICROPY_FLOAT_C_FUN
(
log10
)(
��
 *���+ 
imag
 * imag), MICROPY_FLOAT_CONST(0.4342944819032518�* MICROPY_FLOAT_C_FUN(
��2
)(imag,�eal));

85 
	}
}

86 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_log10_obj
, 
mp_cm�h_log10
);

90 
mp_obj_t
 
	$mp_cm�h_sq�
(
mp_obj_t
 
z_obj
) {

91 
mp_��t_t
 
��
, 
imag
;

92 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

93 
mp_��t_t
 
sq�_abs
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)(
��
 *���+ 
imag
 * imag, 
	`MICROPY_FLOAT_CONST
(0.25));

94 
mp_��t_t
 
th�a
 = 
	`MICROPY_FLOAT_CONST
(0.5�* 
	`MICROPY_FLOAT_C_FUN
(
��2
)(
imag
, 
��
);

95  
	`mp_obj_�w_com�ex
(
sq�_abs
 * 
	`MICROPY_FLOAT_C_FUN
(
cos
)(
th�a
), sq�_ab�* MICROPY_FLOAT_C_FUN(
s�
)(theta));

96 
	}
}

97 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_sq�_obj
, 
mp_cm�h_sq�
);

100 
mp_obj_t
 
	$mp_cm�h_cos
(
mp_obj_t
 
z_obj
) {

101 
mp_��t_t
 
��
, 
imag
;

102 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

103  
	`mp_obj_�w_com�ex
(
	`MICROPY_FLOAT_C_FUN
(
cos
)(
��
�* MICROPY_FLOAT_C_FUN(
cosh
)(
imag
), -MICROPY_FLOAT_C_FUN(
s�
)ԗl�* MICROPY_FLOAT_C_FUN(
s�h
)(imag));

104 
	}
}

105 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_cos_obj
, 
mp_cm�h_cos
);

108 
mp_obj_t
 
	$mp_cm�h_s�
(
mp_obj_t
 
z_obj
) {

109 
mp_��t_t
 
��
, 
imag
;

110 
	`mp_obj_g�_com�ex
(
z_obj
, &
��
, &
imag
);

111  
	`mp_obj_�w_com�ex
(
	`MICROPY_FLOAT_C_FUN
(
s�
)(
��
�* MICROPY_FLOAT_C_FUN(
cosh
)(
imag
), MICROPY_FLOAT_C_FUN(
cos
)ԗl�* MICROPY_FLOAT_C_FUN(
s�h
)(imag));

112 
	}
}

113 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_cm�h_s�_obj
, 
mp_cm�h_s�
);

115 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_cm�h_glob�s_�b�
[] = {

116 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_cm�h
) },

117 { 
MP_ROM_QSTR
(
MP_QSTR_e
), 
mp_cڡ_��t_e
 },

118 { 
MP_ROM_QSTR
(
MP_QSTR_pi
), 
mp_cڡ_��t_pi
 },

119 { 
MP_ROM_QSTR
(
MP_QSTR_pha�
), 
MP_ROM_PTR
(&
mp_cm�h_pha�_obj
) },

120 { 
MP_ROM_QSTR
(
MP_QSTR_pެ
), 
MP_ROM_PTR
(&
mp_cm�h_pެ_obj
) },

121 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_cm�h_��_obj
) },

122 { 
MP_ROM_QSTR
(
MP_QSTR_exp
), 
MP_ROM_PTR
(&
mp_cm�h_exp_obj
) },

123 { 
MP_ROM_QSTR
(
MP_QSTR_log
), 
MP_ROM_PTR
(&
mp_cm�h_log_obj
) },

124 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


125 { 
MP_ROM_QSTR
(
MP_QSTR_log10
), 
MP_ROM_PTR
(&
mp_cm�h_log10_obj
) },

127 { 
MP_ROM_QSTR
(
MP_QSTR_sq�
), 
MP_ROM_PTR
(&
mp_cm�h_sq�_obj
) },

131 { 
MP_ROM_QSTR
(
MP_QSTR_cos
), 
MP_ROM_PTR
(&
mp_cm�h_cos_obj
) },

132 { 
MP_ROM_QSTR
(
MP_QSTR_s�
), 
MP_ROM_PTR
(&
mp_cm�h_s�_obj
) },

145 
MP_DEFINE_CONST_DICT
(
mp_modu�_cm�h_glob�s
, 
mp_modu�_cm�h_glob�s_�b�
);

147 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_cm�h
 = {

148 .
ba�
 = { &
mp_ty�_modu�
 },

149 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_cm�h_glob�s
,

152 
MP_REGISTER_MODULE
(
MP_QSTR_cm�h
, 
mp_modu�_cm�h
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modcollections.c

27 
	~"py/bu�t�.h
"

29 #i�
MICROPY_PY_COLLECTIONS


31 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_c���i�s_glob�s_�b�
[] = {

32 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_c���i�s
) },

33 #i�
MICROPY_PY_COLLECTIONS_DEQUE


34 { 
MP_ROM_QSTR
(
MP_QSTR_deque
), 
MP_ROM_PTR
(&
mp_ty�_deque
) },

36 { 
MP_ROM_QSTR
(
MP_QSTR_�medtu�e
), 
MP_ROM_PTR
(&
mp_�medtu�e_obj
) },

37 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


38 { 
MP_ROM_QSTR
(
MP_QSTR_Ord�edDi�
), 
MP_ROM_PTR
(&
mp_ty�_�d�eddi�
) },

42 
MP_DEFINE_CONST_DICT
(
mp_modu�_c���i�s_glob�s
, 
mp_modu�_c���i�s_glob�s_�b�
);

44 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_c���i�s
 = {

45 .
ba�
 = { &
mp_ty�_modu�
 },

46 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_c���i�s_glob�s
,

49 
MP_REGISTER_EXTENSIBLE_MODULE
(
MP_QSTR_c���i�s
, 
mp_modu�_c���i�s
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\moderrno.c

27 
	~<as��.h
>

28 
	~<�r�g.h
>

30 
	~"py/obj.h
"

31 
	~"py/m��no.h
"

33 #i�
MICROPY_PY_ERRNO


37 #i�de�
MICROPY_PY_ERRNO_LIST


38 
	#MICROPY_PY_ERRNO_LIST
 \

39 
	`X
(
EPERM
) \

40 
	`X
(
ENOENT
) \

41 
	`X
(
EIO
) \

42 
	`X
(
EBADF
) \

43 
	`X
(
EAGAIN
) \

44 
	`X
(
ENOMEM
) \

45 
	`X
(
EACCES
) \

46 
	`X
(
EEXIST
) \

47 
	`X
(
ENODEV
) \

48 
	`X
(
EISDIR
) \

49 
	`X
(
EINVAL
) \

50 
	`X
(
EOPNOTSUPP
) \

51 
	`X
(
EADDRINUSE
) \

52 
	`X
(
ECONNABORTED
) \

53 
	`X
(
ECONNRESET
) \

54 
	`X
(
ENOBUFS
) \

55 
	`X
(
ENOTCONN
) \

56 
	`X
(
ETIMEDOUT
) \

57 
	`X
(
ECONNREFUSED
) \

58 
	`X
(
EHOSTUNREACH
) \

59 
	`X
(
EALREADY
) \

60 
	`X
(
EINPROGRESS
) \

61 

	)

64 #i�
MICROPY_PY_ERRNO_ERRORCODE


65 cڡ 
mp_rom_m�_�em_t
 
	g�r�code_�b�
[] = {

66 
	#X
(
e
�{ 
	`MP_ROM_INT
(
MP_
##e), 
	`MP_ROM_QSTR
(
MP_QSTR_
##e�},

	)

67 
MICROPY_PY_ERRNO_LIST


68 #unde�
X


71 cڡ 
mp_obj_di�_t
 
	g�r�code_di�
 = {

72 .
ba�
 = {&
mp_ty�_di�
},

73 .
	gm�
 = {

74 .
�l_keys_�e_q�rs
 = 0,

75 .
	gis_fixed
 = 1,

76 .
	gis_�d�ed
 = 1,

77 .
	gu�d
 = 
MP_ARRAY_SIZE
(
�r�code_�b�
),

78 .
	g�loc
 = 
MP_ARRAY_SIZE
(
�r�code_�b�
),

79 .
	g�b�
 = (
mp_m�_�em_t
 *)(
mp_rom_m�_�em_t
 *)
�r�code_�b�
,

84 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_��o_glob�s_�b�
[] = {

85 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_��o
) },

86 #i�
MICROPY_PY_ERRNO_ERRORCODE


87 { 
MP_ROM_QSTR
(
MP_QSTR_�r�code
), 
MP_ROM_PTR
(&
�r�code_di�
) },

90 
	#X
(
e
�{ 
	`MP_ROM_QSTR
(
MP_QSTR_
##e), 
	`MP_ROM_INT
(
MP_
##e�},

	)

91 
MICROPY_PY_ERRNO_LIST


92 #unde�
X


95 
MP_DEFINE_CONST_DICT
(
mp_modu�_��o_glob�s
, 
mp_modu�_��o_glob�s_�b�
);

97 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_��o
 = {

98 .
ba�
 = { &
mp_ty�_modu�
 },

99 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_��o_glob�s
,

102 
MP_REGISTER_EXTENSIBLE_MODULE
(
MP_QSTR_��o
, 
mp_modu�_��o
);

104 
q�r
 
	$mp_��o_to_�r
(
mp_obj_t
 
��o_v�
) {

105 #i�
MICROPY_PY_ERRNO_ERRORCODE


107 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
((
mp_m�_t
 *)&
�r�code_di�
.
m�
, 
��o_v�
, 
MP_MAP_LOOKUP
);

108 i�(
�em
 =�
NULL
) {

109  
MP_QSTRnu�
;

111  
	`MP_OBJ_QSTR_VALUE
(
�em
->
v�ue
);

115 
size_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
mp_modu�_��o_glob�s_�b�
); ++i) {

116 i�(
��o_v�
 =�
mp_modu�_��o_glob�s_�b�
[
i
].
v�ue
) {

117  
	`MP_OBJ_QSTR_VALUE
(
mp_modu�_��o_glob�s_�b�
[
i
].
key
);

120  
MP_QSTRnu�
;

122 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modgc.c

27 
	~"py/mp��e.h
"

28 
	~"py/obj.h
"

29 
	~"py/gc.h
"

31 #i�
MICROPY_PY_GC
 && 
MICROPY_ENABLE_GC


34 
mp_obj_t
 
	$py_gc_c���
() {

35 
	`gc_c���
();

36 #i�
MICROPY_PY_GC_COLLECT_RETVAL


37  
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_STATE_MEM
(
gc_c���ed
));

39  
mp_cڡ_n�e
;

41 
	}
}

42 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_c���_obj
, 
py_gc_c���
);

45 
mp_obj_t
 
	$gc_di�b�
() {

46 
	`MP_STATE_MEM
(
gc_auto_c���_�ab�d
) = 0;

47  
mp_cڡ_n�e
;

48 
	}
}

49 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_di�b�_obj
, 
gc_di�b�
);

52 
mp_obj_t
 
	$gc_�ab�
() {

53 
	`MP_STATE_MEM
(
gc_auto_c���_�ab�d
) = 1;

54  
mp_cڡ_n�e
;

55 
	}
}

56 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_�ab�_obj
, 
gc_�ab�
);

58 
mp_obj_t
 
	$gc_i��b�d
() {

59  
	`mp_obj_�w_bo�
(
	`MP_STATE_MEM
(
gc_auto_c���_�ab�d
));

60 
	}
}

61 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_i��b�d_obj
, 
gc_i��b�d
);

64 
mp_obj_t
 
	$gc_mem_�
() {

65 
gc_�fo_t
 
�fo
;

66 
	`gc_�fo
(&
�fo
);

67 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


69  
	`MP_OBJ_NEW_SMALL_INT
(
�fo
.
�
 + info.
max_�w_�l�
);

71  
	`MP_OBJ_NEW_SMALL_INT
(
�fo
.
�
);

73 
	}
}

74 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_mem_�_obj
, 
gc_mem_�
);

77 
mp_obj_t
 
	$gc_mem_�loc
() {

78 
gc_�fo_t
 
�fo
;

79 
	`gc_�fo
(&
�fo
);

80  
	`MP_OBJ_NEW_SMALL_INT
(
�fo
.
u�d
);

81 
	}
}

82 
MP_DEFINE_CONST_FUN_OBJ_0
(
gc_mem_�loc_obj
, 
gc_mem_�loc
);

84 #i�
MICROPY_GC_ALLOC_THRESHOLD


85 
mp_obj_t
 
	$gc_th�sh�d
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

86 i�(
n_�gs
 == 0) {

87 i�(
	`MP_STATE_MEM
(
gc_�loc_th�sh�d
�=�(
size_t
)-1) {

88  
	`MP_OBJ_NEW_SMALL_INT
(-1);

90  
	`mp_obj_�w_�t
(
	`MP_STATE_MEM
(
gc_�loc_th�sh�d
�* 
MICROPY_BYTES_PER_GC_BLOCK
);

92 
mp_�t_t
 
v�
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

93 i�(
v�
 < 0) {

94 
	`MP_STATE_MEM
(
gc_�loc_th�sh�d
��(
size_t
)-1;

96 
	`MP_STATE_MEM
(
gc_�loc_th�sh�d
��
v�
 / 
MICROPY_BYTES_PER_GC_BLOCK
;

98  
mp_cڡ_n�e
;

99 
	}
}

100 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
gc_th�sh�d_obj
, 0, 1, 
gc_th�sh�d
);

103 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_gc_glob�s_�b�
[] = {

104 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_gc
) },

105 { 
MP_ROM_QSTR
(
MP_QSTR_c���
), 
MP_ROM_PTR
(&
gc_c���_obj
) },

106 { 
MP_ROM_QSTR
(
MP_QSTR_di�b�
), 
MP_ROM_PTR
(&
gc_di�b�_obj
) },

107 { 
MP_ROM_QSTR
(
MP_QSTR_�ab�
), 
MP_ROM_PTR
(&
gc_�ab�_obj
) },

108 { 
MP_ROM_QSTR
(
MP_QSTR_i��b�d
), 
MP_ROM_PTR
(&
gc_i��b�d_obj
) },

109 { 
MP_ROM_QSTR
(
MP_QSTR_mem_�
), 
MP_ROM_PTR
(&
gc_mem_�_obj
) },

110 { 
MP_ROM_QSTR
(
MP_QSTR_mem_�loc
), 
MP_ROM_PTR
(&
gc_mem_�loc_obj
) },

111 #i�
MICROPY_GC_ALLOC_THRESHOLD


112 { 
MP_ROM_QSTR
(
MP_QSTR_th�sh�d
), 
MP_ROM_PTR
(&
gc_th�sh�d_obj
) },

116 
MP_DEFINE_CONST_DICT
(
mp_modu�_gc_glob�s
, 
mp_modu�_gc_glob�s_�b�
);

118 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_gc
 = {

119 .
ba�
 = { &
mp_ty�_modu�
 },

120 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_gc_glob�s
,

123 
MP_REGISTER_MODULE
(
MP_QSTR_gc
, 
mp_modu�_gc
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modio.c

27 
	~<as��.h
>

28 
	~<�r�g.h
>

30 
	~"py/ru�ime.h
"

31 
	~"py/bu�t�.h
"

32 
	~"py/��am.h
"

33 
	~"py/b��y.h
"

34 
	~"py/obj��y.h
"

35 
	~"py/obj�r�gio.h
"

36 
	~"py/�oz�mod.h
"

38 #i�
MICROPY_PY_IO


40 #i�
MICROPY_PY_IO_IOBASE


42 cڡ 
mp_obj_ty�_t
 
	gmp_ty�_ioba�
;

44 cڡ 
mp_obj_ba�_t
 
	gioba�_s�g�t�
 = {&
mp_ty�_ioba�
};

46 
mp_obj_t
 
	$ioba�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

47 ()
ty�
;

48 ()
n_�gs
;

49 ()
n_kw
;

50 ()
�gs
;

51  
	`MP_OBJ_FROM_PTR
(&
ioba�_s�g�t�
);

52 
	}
}

54 
mp_u�t_t
 
	$ioba�_�ad_wr�e
(
mp_obj_t
 
obj
, *
buf
, 
mp_u�t_t
 
size
, *
�rcode
, 
q�r
 
q�
) {

55 
mp_obj_t
 
de�
[3];

56 
	`mp_l�d_m�hod
(
obj
, 
q�
, 
de�
);

57 
mp_obj_��y_t
 
�
 = {{&
mp_ty�_by���y
}, 
BYTEARRAY_TYPECODE
, 0, 
size
, 
buf
};

58 
de�
[2] = 
	`MP_OBJ_FROM_PTR
(&
�
);

59 
mp_obj_t
 
�t_obj
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�
);

60 i�(
�t_obj
 =�
mp_cڡ_n�e
) {

61 *
�rcode
 = 
MP_EAGAIN
;

62  
MP_STREAM_ERROR
;

64 
mp_�t_t
 
�t
 = 
	`mp_obj_g�_�t
(
�t_obj
);

65 i�(
�t
 >= 0) {

66  
�t
;

68 *
�rcode
 = -
�t
;

69  
MP_STREAM_ERROR
;

71 
	}
}

72 
mp_u�t_t
 
	$ioba�_�ad
(
mp_obj_t
 
obj
, *
buf
, 
mp_u�t_t
 
size
, *
�rcode
) {

73  
	`ioba�_�ad_wr�e
(
obj
, 
buf
, 
size
, 
�rcode
, 
MP_QSTR_�ad�to
);

74 
	}
}

76 
mp_u�t_t
 
	$ioba�_wr�e
(
mp_obj_t
 
obj
, cڡ *
buf
, 
mp_u�t_t
 
size
, *
�rcode
) {

77  
	`ioba�_�ad_wr�e
(
obj
, (*)
buf
, 
size
, 
�rcode
, 
MP_QSTR_wr�e
);

78 
	}
}

80 
mp_u�t_t
 
	$ioba�_io�l
(
mp_obj_t
 
obj
, 
mp_u�t_t
 
�que�
, 
u���_t
 
�g
, *
�rcode
) {

81 
mp_obj_t
 
de�
[4];

82 
	`mp_l�d_m�hod
(
obj
, 
MP_QSTR_io�l
, 
de�
);

83 
de�
[2] = 
	`mp_obj_�w_�t_�om_u�t
(
�que�
);

84 
de�
[3] = 
	`mp_obj_�w_�t_�om_u�t
(
�g
);

85 
mp_�t_t
 
�t
 = 
	`mp_obj_g�_�t
(
	`mp_��_m�hod_n_kw
(2, 0, 
de�
));

86 i�(
�t
 >= 0) {

87  
�t
;

89 *
�rcode
 = -
�t
;

90  
MP_STREAM_ERROR
;

92 
	}
}

94 cڡ 
mp_��am_p_t
 
	gioba�_p
 = {

95 .
�ad
 = 
ioba�_�ad
,

96 .
	gwr�e
 = 
ioba�_wr�e
,

97 .
	gio�l
 = 
ioba�_io�l
,

100 
MP_DEFINE_CONST_OBJ_TYPE
(

101 
mp_ty�_ioba�
,

102 
MP_QSTR_IOBa�
,

103 
MP_TYPE_FLAG_NONE
,

104 
make_�w
, 
ioba�_make_�w
,

105 
��oc�
, &
ioba�_p


110 #i�
MICROPY_PY_IO_BUFFEREDWRITER


111 
	s_mp_obj_bufwr��_t
 {

112 
mp_obj_ba�_t
 
	mba�
;

113 
mp_obj_t
 
	m��am
;

114 
size_t
 
	m�loc
;

115 
size_t
 
	m�n
;

116 
by�
 
	mbuf
[0];

117 } 
	tmp_obj_bufwr��_t
;

119 
mp_obj_t
 
	$bufwr��_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

120 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 2, 
�l�
);

121 
size_t
 
�loc
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

122 
mp_obj_bufwr��_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_bufwr��_t, 
buf
, 
by�
, 
�loc
, 
ty�
);

123 
o
->
��am
 = 
�gs
[0];

124 
o
->
�loc
 =�lloc;

125 
o
->
�n
 = 0;

126  
o
;

127 
	}
}

129 
mp_u�t_t
 
	$bufwr��_wr�e
(
mp_obj_t
 
�lf_�
, cڡ *
buf
, 
mp_u�t_t
 
size
, *
�rcode
) {

130 
mp_obj_bufwr��_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

132 
mp_u�t_t
 
�g_size
 = 
size
;

134 
size
 > 0) {

135 
mp_u�t_t
 
�m
 = 
�lf
->
�loc
 - s�f->
�n
;

136 i�(
size
 < 
�m
) {

137 
	`mem�y
(
�lf
->
buf
 + s�f->
�n
, buf, 
size
);

138 
�lf
->
�n
 +�
size
;

139  
�g_size
;

148 
	`mem�y
(
�lf
->
buf
 + s�f->
�n
, buf, 
�m
);

149 
buf
 = (
by�
 *)bu�+ 
�m
;

150 
size
 -�
�m
;

151 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_wr�e_exa�ly
(
�lf
->
��am
, s�f->
buf
, s�f->
�loc
, 
�rcode
);

152 ()
out_sz
;

153 i�(*
�rcode
 != 0) {

154  
MP_STREAM_ERROR
;

158 
	`as��
(
out_sz
 =�
�lf
->
�loc
);

159 
�lf
->
�n
 = 0;

162  
�g_size
;

163 
	}
}

165 
mp_obj_t
 
	$bufwr��_�ush
(
mp_obj_t
 
�lf_�
) {

166 
mp_obj_bufwr��_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

168 i�(
�lf
->
�n
 != 0) {

169 
�r
;

170 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_wr�e_exa�ly
(
�lf
->
��am
, s�f->
buf
, s�f->
�n
, &
�r
);

171 ()
out_sz
;

174 
	`as��
(
out_sz
 =�
�lf
->
�n
);

175 
�lf
->
�n
 = 0;

176 i�(
�r
 != 0) {

177 
	`mp_�i�_OSE��
(
�r
);

181  
mp_cڡ_n�e
;

182 
	}
}

183 
MP_DEFINE_CONST_FUN_OBJ_1
(
bufwr��_�ush_obj
, 
bufwr��_�ush
);

185 cڡ 
mp_rom_m�_�em_t
 
	gbufwr��_lo�ls_di�_�b�
[] = {

186 { 
MP_ROM_QSTR
(
MP_QSTR_wr�e
), 
MP_ROM_PTR
(&
mp_��am_wr�e_obj
) },

187 { 
MP_ROM_QSTR
(
MP_QSTR_�ush
), 
MP_ROM_PTR
(&
bufwr��_�ush_obj
) },

189 
MP_DEFINE_CONST_DICT
(
bufwr��_lo�ls_di�
, 
bufwr��_lo�ls_di�_�b�
);

191 cڡ 
mp_��am_p_t
 
	gbufwr��_��am_p
 = {

192 .
wr�e
 = 
bufwr��_wr�e
,

195 
MP_DEFINE_CONST_OBJ_TYPE
(

196 
mp_ty�_bufwr��
,

197 
MP_QSTR_Buf�dWr��
,

198 
MP_TYPE_FLAG_NONE
,

199 
make_�w
, 
bufwr��_make_�w
,

200 
��oc�
, &
bufwr��_��am_p
,

201 
lo�ls_di�
, &
bufwr��_lo�ls_di�


205 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_io_glob�s_�b�
[] = {

206 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_io
) },

209 { 
MP_ROM_QSTR
(
MP_QSTR_ݒ
), 
MP_ROM_PTR
(&
mp_bu�t�_ݒ_obj
) },

210 #i�
MICROPY_PY_IO_IOBASE


211 { 
MP_ROM_QSTR
(
MP_QSTR_IOBa�
), 
MP_ROM_PTR
(&
mp_ty�_ioba�
) },

213 { 
MP_ROM_QSTR
(
MP_QSTR_S��gIO
), 
MP_ROM_PTR
(&
mp_ty�_�r�gio
) },

214 #i�
MICROPY_PY_IO_BYTESIO


215 { 
MP_ROM_QSTR
(
MP_QSTR_By�sIO
), 
MP_ROM_PTR
(&
mp_ty�_by�sio
) },

217 #i�
MICROPY_PY_IO_BUFFEREDWRITER


218 { 
MP_ROM_QSTR
(
MP_QSTR_Buf�dWr��
), 
MP_ROM_PTR
(&
mp_ty�_bufwr��
) },

222 
MP_DEFINE_CONST_DICT
(
mp_modu�_io_glob�s
, 
mp_modu�_io_glob�s_�b�
);

224 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_io
 = {

225 .
ba�
 = { &
mp_ty�_modu�
 },

226 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_io_glob�s
,

229 
MP_REGISTER_EXTENSIBLE_MODULE
(
MP_QSTR_io
, 
mp_modu�_io
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modmath.c

27 
	~"py/bu�t�.h
"

28 
	~"py/ru�ime.h
"

30 #i�
MICROPY_PY_BUILTINS_FLOAT
 && 
MICROPY_PY_MATH


32 
	~<m�h.h
>

36 
	#MP_PI
 
	`MICROPY_FLOAT_CONST
(3.14159265358979323846)

	)

37 
	#MP_PI_4
 
	`MICROPY_FLOAT_CONST
(0.78539816339744830962)

	)

38 
	#MP_3_PI_4
 
	`MICROPY_FLOAT_CONST
(2.35619449019234492885)

	)

40 
NORETURN
 
	$m�h_�r�
() {

41 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("math domain�rror"));

42 
	}
}

44 
mp_obj_t
 
m�h_g��ic_1
(mp_obj_�
x_obj
, 
	$mp_��t_t
 (*
f
)(
mp_��t_t
)) {

45 
mp_��t_t
 
x
 = 
	`mp_obj_g�_��t
(
x_obj
);

46 
mp_��t_t
 
�s
 = 
	`f
(
x
);

47 i�((
	`i��
(
�s
�&& !i��(
x
)�|| (
	`is�f
(ans) && !isinf(x))) {

48 
	`m�h_�r�
();

50  
	`mp_obj_�w_��t
(
�s
);

51 
	}
}

53 
mp_obj_t
 
m�h_g��ic_2
(mp_obj_�
x_obj
, mp_obj_�
y_obj
, 
	$mp_��t_t
 (*
f
)(
mp_��t_t
, mp_float_t)) {

54 
mp_��t_t
 
x
 = 
	`mp_obj_g�_��t
(
x_obj
);

55 
mp_��t_t
 
y
 = 
	`mp_obj_g�_��t
(
y_obj
);

56 
mp_��t_t
 
�s
 = 
	`f
(
x
, 
y
);

57 i�((
	`i��
(
�s
�&& !i��(
x
�&& !i��(
y
)�|| (
	`is�f
(ans) && !isinf(x) && !isinf(y))) {

58 
	`m�h_�r�
();

60  
	`mp_obj_�w_��t
(
�s
);

61 
	}
}

63 
	#MATH_FUN_1
(
py_�me
, 
c_�me
) \

64 
mp_obj_t
 
mp_m�h_
##
	`py_�me
(mp_obj_�
x_obj
) { \

65  
	`m�h_g��ic_1
(
x_obj
, 
	`MICROPY_FLOAT_C_FUN
(
c_�me
)); \

67 
	`MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_
##
py_�me
##
_obj
, mp_m�h_##py_�me);

	)

69 
	#MATH_FUN_1_TO_BOOL
(
py_�me
, 
c_�me
) \

70 
mp_obj_t
 
mp_m�h_
##
	`py_�me
(mp_obj_�
x_obj
�{  
	`mp_obj_�w_bo�
(
	`c_�me
(
	`mp_obj_g�_��t
(x_obj))); } \

71 
	`MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_
##
py_�me
##
_obj
, mp_m�h_##py_�me);

	)

73 
	#MATH_FUN_1_TO_INT
(
py_�me
, 
c_�me
) \

74 
mp_obj_t
 
mp_m�h_
##
	`py_�me
(mp_obj_�
x_obj
�{  
	`mp_obj_�w_�t_�om_��t
(
	`MICROPY_FLOAT_C_FUN
(
c_�me
)(
	`mp_obj_g�_��t
(x_obj))); } \

75 
	`MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_
##
py_�me
##
_obj
, mp_m�h_##py_�me);

	)

77 
	#MATH_FUN_2
(
py_�me
, 
c_�me
) \

78 
mp_obj_t
 
mp_m�h_
##
	`py_�me
(mp_obj_�
x_obj
, mp_obj_�
y_obj
) { \

79  
	`m�h_g��ic_2
(
x_obj
, 
y_obj
, 
	`MICROPY_FLOAT_C_FUN
(
c_�me
)); \

81 
	`MP_DEFINE_CONST_FUN_OBJ_2
(
mp_m�h_
##
py_�me
##
_obj
, mp_m�h_##py_�me);

	)

83 
	#MATH_FUN_2_FLT_INT
(
py_�me
, 
c_�me
) \

84 
mp_obj_t
 
mp_m�h_
##
	`py_�me
(mp_obj_�
x_obj
, mp_obj_�
y_obj
) { \

85  
	`mp_obj_�w_��t
(
	`MICROPY_FLOAT_C_FUN
(
c_�me
)(
	`mp_obj_g�_��t
(
x_obj
), 
	`mp_obj_g�_�t
(
y_obj
))); \

87 
	`MP_DEFINE_CONST_FUN_OBJ_2
(
mp_m�h_
##
py_�me
##
_obj
, mp_m�h_##py_�me);

	)

89 #i�
MP_NEED_LOG2


90 #unde�
log2


91 #unde�
log2f


93 
mp_��t_t
 
	$MICROPY_FLOAT_C_FUN
(
log2
)(
mp_��t_t
 
x
) {

94  
	`MICROPY_FLOAT_C_FUN
(
log
)(
x
�* 
	`MICROPY_FLOAT_CONST
(1.442695040888963407354163704);

95 
	}
}

99 
	$MATH_FUN_1
(
sq�
, sqrt)

101 #i�
MICROPY_PY_MATH_POW_FIX_NAN


102 
mp_��t_t
 
	$pow_func
(
mp_��t_t
 
x
, mp_��t_�
y
) {

105 i�(
x
 =�
	`MICROPY_FLOAT_CONST
(1.0�|| 
y
 == MICROPY_FLOAT_CONST(0.0)) {

106  
	`MICROPY_FLOAT_CONST
(1.0);

108  
	`MICROPY_FLOAT_C_FUN
(
pow
)(
x
, 
y
);

109 
	}
}

110 
	$MATH_FUN_2
(
pow
, 
pow_func
)

112 
	$MATH_FUN_2
(
pow
,�ow)

115 
	$MATH_FUN_1
(
exp
,�xp)

116 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


118 
	$MATH_FUN_1
(
expm1
,�xpm1)

120 
	$MATH_FUN_1
(
log2
,�og2)

122 
	$MATH_FUN_1
(
log10
,�og10)

124 
	$MATH_FUN_1
(
cosh
, cosh)

126 
	$MATH_FUN_1
(
s�h
, sinh)

128 
	$MATH_FUN_1
(
�nh
,�anh)

130 
	$MATH_FUN_1
(
acosh
,�cosh)

132 
	$MATH_FUN_1
(
as�h
,�sinh)

134 
	$MATH_FUN_1
(
��h
,�tanh)

137 
	$MATH_FUN_1
(
cos
, cos)

139 
	$MATH_FUN_1
(
s�
, sin)

141 
	$MATH_FUN_1
(
�n
,�an)

143 
	$MATH_FUN_1
(
acos
,�cos)

145 
	$MATH_FUN_1
(
as�
,�sin)

147 
	$MATH_FUN_1
(
��
,�tan)

149 #i�
MICROPY_PY_MATH_ATAN2_FIX_INFNAN


150 
mp_��t_t
 
	$��2_func
(
mp_��t_t
 
x
, mp_��t_�
y
) {

151 i�(
	`is�f
(
x
�&& is�f(
y
)) {

152  
	`c�ysign
(
y
 < 0 ? 
MP_3_PI_4
 : 
MP_PI_4
, 
x
);

154  
	`��2
(
x
, 
y
);

155 
	}
}

156 
	$MATH_FUN_2
(
��2
, 
��2_func
)

158 
	$MATH_FUN_2
(
��2
,�tan2)

161 
	$MATH_FUN_1_TO_INT
(
��
, ceil)

163 
mp_��t_t
 
	$MICROPY_FLOAT_C_FUN
(
c�ysign_func
)(
mp_��t_t
 
x
, mp_��t_�
y
) {

164  
	`MICROPY_FLOAT_C_FUN
(
c�ysign
)(
x
, 
y
);

165 
	}
}

166 
	$MATH_FUN_2
(
c�ysign
, 
c�ysign_func
)

168 
mp_��t_t
 
	$MICROPY_FLOAT_C_FUN
(
�bs_func
)(
mp_��t_t
 
x
) {

169  
	`MICROPY_FLOAT_C_FUN
(
�bs
)(
x
);

170 
	}
}

171 
	$MATH_FUN_1
(
�bs
, 
�bs_func
)

173 
	$MATH_FUN_1_TO_INT
(
�o�
, floor)

175 #i�
MICROPY_PY_MATH_FMOD_FIX_INFNAN


176 
mp_��t_t
 
	$fmod_func
(
mp_��t_t
 
x
, mp_��t_�
y
) {

177  (!
	`is�f
(
x
�&& is�f(
y
)�? x : 
	`fmod
(x, y);

178 
	}
}

179 
	$MATH_FUN_2
(
fmod
, 
fmod_func
)

181 
	$MATH_FUN_2
(
fmod
, fmod)

184 
	$MATH_FUN_1_TO_BOOL
(
isf��e
, isfinite)

186 
	$MATH_FUN_1_TO_BOOL
(
is�f
, isinf)

188 
	$MATH_FUN_1_TO_BOOL
(
i��
, isnan)

190 
	$MATH_FUN_1_TO_INT
(
�unc
,�runc)

192 
	$MATH_FUN_2_FLT_INT
(
ldexp
,�dexp)

193 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


195 
	$MATH_FUN_1
(
�f
,�rf)

197 
	$MATH_FUN_1
(
�fc
,�rfc)

199 #i�
MICROPY_PY_MATH_GAMMA_FIX_NEGINF


200 
mp_��t_t
 
	$MICROPY_FLOAT_C_FUN
(
tgamma_func
)(
mp_��t_t
 
x
) {

201 i�(
	`is�f
(
x
) && x < 0) {

202 
	`m�h_�r�
();

204  
	`MICROPY_FLOAT_C_FUN
(
tgamma
)(
x
);

205 
	}
}

206 
	$MATH_FUN_1
(
gamma
, 
tgamma_func
)

208 
	$MATH_FUN_1
(
gamma
, 
tgamma
)

211 
	$MATH_FUN_1
(
lgamma
,�gamma)

215 #i�
MICROPY_PY_MATH_ISCLOSE


216 
mp_obj_t
 
	$mp_m�h_is�o�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
) {

217 �um { 
ARG_�l_t�
, 
ARG_abs_t�
 };

218 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

219 {
MP_QSTR_�l_t�
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
}},

220 {
MP_QSTR_abs_t�
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
	`MP_OBJ_NEW_SMALL_INT
(0)}},

222 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

223 
	`mp_�g_�r�_�l
(
n_�gs
 - 2, 
pos_�gs
 + 2, 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

224 cڡ 
mp_��t_t
 
a
 = 
	`mp_obj_g�_��t
(
pos_�gs
[0]);

225 cڡ 
mp_��t_t
 
b
 = 
	`mp_obj_g�_��t
(
pos_�gs
[1]);

226 cڡ 
mp_��t_t
 
�l_t�
 = 
�gs
[
ARG_�l_t�
].
u_obj
 =�
MP_OBJ_NULL


227 ? (
mp_��t_t
)1e-9 : 
	`mp_obj_g�_��t
(
�gs
[
ARG_�l_t�
].
u_obj
);

228 cڡ 
mp_��t_t
 
abs_t�
 = 
	`mp_obj_g�_��t
(
�gs
[
ARG_abs_t�
].
u_obj
);

229 i�(
�l_t�
 < (
mp_��t_t
)0.0 || 
abs_t�
 < (mp_float_t)0.0) {

230 
	`m�h_�r�
();

232 i�(
a
 =�
b
) {

233  
mp_cڡ_�ue
;

235 cڡ 
mp_��t_t
 
dif�n�
 = 
	`MICROPY_FLOAT_C_FUN
(
�bs
)(
a
 - 
b
);

236 i�(
	`is�f
(
dif�n�
)) {

237  
mp_cڡ_�l�
;

239 i�((
dif�n�
 <�
abs_t�
) ||

240 (
dif�n�
 <�
	`MICROPY_FLOAT_C_FUN
(
�bs
)(
�l_t�
 * 
a
)) ||

241 (
dif�n�
 <�
	`MICROPY_FLOAT_C_FUN
(
�bs
)(
�l_t�
 * 
b
))) {

242  
mp_cڡ_�ue
;

244  
mp_cڡ_�l�
;

245 
	}
}

246 
MP_DEFINE_CONST_FUN_OBJ_KW
(
mp_m�h_is�o�_obj
, 2, 
mp_m�h_is�o�
);

252 
mp_obj_t
 
	$mp_m�h_log
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

253 
mp_��t_t
 
x
 = 
	`mp_obj_g�_��t
(
�gs
[0]);

254 i�(
x
 <�(
mp_��t_t
)0.0) {

255 
	`m�h_�r�
();

257 
mp_��t_t
 
l
 = 
	`MICROPY_FLOAT_C_FUN
(
log
)(
x
);

258 i�(
n_�gs
 == 1) {

259  
	`mp_obj_�w_��t
(
l
);

261 
mp_��t_t
 
ba�
 = 
	`mp_obj_g�_��t
(
�gs
[1]);

262 i�(
ba�
 <�(
mp_��t_t
)0.0) {

263 
	`m�h_�r�
();

264 } i�(
ba�
 =�(
mp_��t_t
)1.0) {

265 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("divide by zero"));

267  
	`mp_obj_�w_��t
(
l
 / 
	`MICROPY_FLOAT_C_FUN
(
log
)(
ba�
));

269 
	}
}

270 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_m�h_log_obj
, 1, 2, 
mp_m�h_log
);

275 
mp_obj_t
 
	$mp_m�h_�exp
(
mp_obj_t
 
x_obj
) {

276 
�t_expڒt
 = 0;

277 
mp_��t_t
 
signifi�nd
 = 
	`MICROPY_FLOAT_C_FUN
(
�exp
)(
	`mp_obj_g�_��t
(
x_obj
), &
�t_expڒt
);

278 
mp_obj_t
 
tu�e
[2];

279 
tu�e
[0] = 
	`mp_obj_�w_��t
(
signifi�nd
);

280 
tu�e
[1] = 
	`mp_obj_�w_�t
(
�t_expڒt
);

281  
	`mp_obj_�w_tu�e
(2, 
tu�e
);

282 
	}
}

283 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_�exp_obj
, 
mp_m�h_�exp
);

286 
mp_obj_t
 
	$mp_m�h_modf
(
mp_obj_t
 
x_obj
) {

287 
mp_��t_t
 
�t_��
 = 0.0;

288 
mp_��t_t
 
x
 = 
	`mp_obj_g�_��t
(
x_obj
);

289 
mp_��t_t
 
�a�iڮ_��
 = 
	`MICROPY_FLOAT_C_FUN
(
modf
)(
x
, &
�t_��
);

290 #i�
MICROPY_PY_MATH_MODF_FIX_NEGZERO


291 i�(
�a�iڮ_��
 =�
	`MICROPY_FLOAT_CONST
(0.0)) {

292 
�a�iڮ_��
 = 
	`c�ysign
(�a�iڮ_��, 
x
);

295 
mp_obj_t
 
tu�e
[2];

296 
tu�e
[0] = 
	`mp_obj_�w_��t
(
�a�iڮ_��
);

297 
tu�e
[1] = 
	`mp_obj_�w_��t
(
�t_��
);

298  
	`mp_obj_�w_tu�e
(2, 
tu�e
);

299 
	}
}

300 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_modf_obj
, 
mp_m�h_modf
);

305 
mp_obj_t
 
	$mp_m�h_�d�ns
(
mp_obj_t
 
x_obj
) {

306  
	`mp_obj_�w_��t
(
	`mp_obj_g�_��t
(
x_obj
�* (
MP_PI
 / 
	`MICROPY_FLOAT_CONST
(180.0)));

307 
	}
}

308 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_�d�ns_obj
, 
mp_m�h_�d�ns
);

311 
mp_obj_t
 
	$mp_m�h_deg�es
(
mp_obj_t
 
x_obj
) {

312  
	`mp_obj_�w_��t
(
	`mp_obj_g�_��t
(
x_obj
�* (
	`MICROPY_FLOAT_CONST
(180.0�/ 
MP_PI
));

313 
	}
}

314 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_deg�es_obj
, 
mp_m�h_deg�es
);

316 #i�
MICROPY_PY_MATH_FACTORIAL


318 #i�
MICROPY_OPT_MATH_FACTORIAL


321 
mp_obj_t
 
	$mp_m�h_��ܟl_��r
(
mp_u�t_t
 
��t
, mp_u�t_�
�d
) {

322 i�(
��t
 =�
�d
) {

323  
	`mp_obj_�w_�t
(
��t
);

324 } i�(
�d
 - 
��t
 == 1) {

325  
	`mp_b��y_�
(
MP_BINARY_OP_MULTIPLY
, 
	`MP_OBJ_NEW_SMALL_INT
(
��t
), MP_OBJ_NEW_SMALL_INT(
�d
));

326 } i�(
�d
 - 
��t
 == 2) {

327 
mp_obj_t
 
��
 = 
	`MP_OBJ_NEW_SMALL_INT
(
��t
);

328 
mp_obj_t
 
midd�
 = 
	`MP_OBJ_NEW_SMALL_INT
(
��t
 + 1);

329 
mp_obj_t
 
right
 = 
	`MP_OBJ_NEW_SMALL_INT
(
�d
);

330 
mp_obj_t
 
tmp
 = 
	`mp_b��y_�
(
MP_BINARY_OP_MULTIPLY
, 
��
, 
midd�
);

331  
	`mp_b��y_�
(
MP_BINARY_OP_MULTIPLY
, 
tmp
, 
right
);

333 
mp_u�t_t
 
midd�
 = 
��t
 + ((
�d
 - start) >> 1);

334 
mp_obj_t
 
��
 = 
	`mp_m�h_��ܟl_��r
(
��t
, 
midd�
);

335 
mp_obj_t
 
right
 = 
	`mp_m�h_��ܟl_��r
(
midd�
 + 1, 
�d
);

336  
	`mp_b��y_�
(
MP_BINARY_OP_MULTIPLY
, 
��
, 
right
);

338 
	}
}

339 
mp_obj_t
 
	$mp_m�h_��ܟl
(
mp_obj_t
 
x_obj
) {

340 
mp_�t_t
 
max
 = 
	`mp_obj_g�_�t
(
x_obj
);

341 i�(
max
 < 0) {

342 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative factorial"));

343 } i�(
max
 == 0) {

344  
	`MP_OBJ_NEW_SMALL_INT
(1);

346  
	`mp_m�h_��ܟl_��r
(1, 
max
);

347 
	}
}

353 
mp_obj_t
 
	$mp_m�h_��ܟl
(
mp_obj_t
 
x_obj
) {

354 
mp_�t_t
 
max
 = 
	`mp_obj_g�_�t
(
x_obj
);

355 i�(
max
 < 0) {

356 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative factorial"));

357 } i�(
max
 <= 1) {

358  
	`MP_OBJ_NEW_SMALL_INT
(1);

360 
mp_�t_t
 
h
 = 
max
 >> 1;

361 
mp_�t_t
 
q
 = 
h
 * h;

362 
mp_�t_t
 
r
 = 
q
 << 1;

363 i�(
max
 & 1) {

364 
r
 *�
max
;

366 
mp_obj_t
 
�od
 = 
	`MP_OBJ_NEW_SMALL_INT
(
r
);

367 
mp_�t_t
 
num
 = 1;�um < 
max
 - 2;�um += 2) {

368 
q
 -�
num
;

369 
�od
 = 
	`mp_b��y_�
(
MP_BINARY_OP_MULTIPLY
,�rod, 
	`MP_OBJ_NEW_SMALL_INT
(
q
));

371  
�od
;

372 
	}
}

376 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_m�h_��ܟl_obj
, 
mp_m�h_��ܟl
);

380 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_m�h_glob�s_�b�
[] = {

381 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_m�h
) },

382 { 
MP_ROM_QSTR
(
MP_QSTR_e
), 
mp_cڡ_��t_e
 },

383 { 
MP_ROM_QSTR
(
MP_QSTR_pi
), 
mp_cڡ_��t_pi
 },

384 #i�
MICROPY_PY_MATH_CONSTANTS


385 { 
MP_ROM_QSTR
(
MP_QSTR_�u
), 
mp_cڡ_��t_�u
 },

386 { 
MP_ROM_QSTR
(
MP_QSTR_�f
), 
mp_cڡ_��t_�f
 },

387 { 
MP_ROM_QSTR
(
MP_QSTR_�n
), 
mp_cڡ_��t_�n
 },

389 { 
MP_ROM_QSTR
(
MP_QSTR_sq�
), 
MP_ROM_PTR
(&
mp_m�h_sq�_obj
) },

390 { 
MP_ROM_QSTR
(
MP_QSTR_pow
), 
MP_ROM_PTR
(&
mp_m�h_pow_obj
) },

391 { 
MP_ROM_QSTR
(
MP_QSTR_exp
), 
MP_ROM_PTR
(&
mp_m�h_exp_obj
) },

392 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


393 { 
MP_ROM_QSTR
(
MP_QSTR_expm1
), 
MP_ROM_PTR
(&
mp_m�h_expm1_obj
) },

395 { 
MP_ROM_QSTR
(
MP_QSTR_log
), 
MP_ROM_PTR
(&
mp_m�h_log_obj
) },

396 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


397 { 
MP_ROM_QSTR
(
MP_QSTR_log2
), 
MP_ROM_PTR
(&
mp_m�h_log2_obj
) },

398 { 
MP_ROM_QSTR
(
MP_QSTR_log10
), 
MP_ROM_PTR
(&
mp_m�h_log10_obj
) },

399 { 
MP_ROM_QSTR
(
MP_QSTR_cosh
), 
MP_ROM_PTR
(&
mp_m�h_cosh_obj
) },

400 { 
MP_ROM_QSTR
(
MP_QSTR_s�h
), 
MP_ROM_PTR
(&
mp_m�h_s�h_obj
) },

401 { 
MP_ROM_QSTR
(
MP_QSTR_�nh
), 
MP_ROM_PTR
(&
mp_m�h_�nh_obj
) },

402 { 
MP_ROM_QSTR
(
MP_QSTR_acosh
), 
MP_ROM_PTR
(&
mp_m�h_acosh_obj
) },

403 { 
MP_ROM_QSTR
(
MP_QSTR_as�h
), 
MP_ROM_PTR
(&
mp_m�h_as�h_obj
) },

404 { 
MP_ROM_QSTR
(
MP_QSTR_��h
), 
MP_ROM_PTR
(&
mp_m�h_��h_obj
) },

406 { 
MP_ROM_QSTR
(
MP_QSTR_cos
), 
MP_ROM_PTR
(&
mp_m�h_cos_obj
) },

407 { 
MP_ROM_QSTR
(
MP_QSTR_s�
), 
MP_ROM_PTR
(&
mp_m�h_s�_obj
) },

408 { 
MP_ROM_QSTR
(
MP_QSTR_�n
), 
MP_ROM_PTR
(&
mp_m�h_�n_obj
) },

409 { 
MP_ROM_QSTR
(
MP_QSTR_acos
), 
MP_ROM_PTR
(&
mp_m�h_acos_obj
) },

410 { 
MP_ROM_QSTR
(
MP_QSTR_as�
), 
MP_ROM_PTR
(&
mp_m�h_as�_obj
) },

411 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_m�h_��_obj
) },

412 { 
MP_ROM_QSTR
(
MP_QSTR_��2
), 
MP_ROM_PTR
(&
mp_m�h_��2_obj
) },

413 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_m�h_��_obj
) },

414 { 
MP_ROM_QSTR
(
MP_QSTR_c�ysign
), 
MP_ROM_PTR
(&
mp_m�h_c�ysign_obj
) },

415 { 
MP_ROM_QSTR
(
MP_QSTR_�bs
), 
MP_ROM_PTR
(&
mp_m�h_�bs_obj
) },

416 { 
MP_ROM_QSTR
(
MP_QSTR_�o�
), 
MP_ROM_PTR
(&
mp_m�h_�o�_obj
) },

417 { 
MP_ROM_QSTR
(
MP_QSTR_fmod
), 
MP_ROM_PTR
(&
mp_m�h_fmod_obj
) },

418 { 
MP_ROM_QSTR
(
MP_QSTR_�exp
), 
MP_ROM_PTR
(&
mp_m�h_�exp_obj
) },

419 { 
MP_ROM_QSTR
(
MP_QSTR_ldexp
), 
MP_ROM_PTR
(&
mp_m�h_ldexp_obj
) },

420 { 
MP_ROM_QSTR
(
MP_QSTR_modf
), 
MP_ROM_PTR
(&
mp_m�h_modf_obj
) },

421 { 
MP_ROM_QSTR
(
MP_QSTR_isf��e
), 
MP_ROM_PTR
(&
mp_m�h_isf��e_obj
) },

422 { 
MP_ROM_QSTR
(
MP_QSTR_is�f
), 
MP_ROM_PTR
(&
mp_m�h_is�f_obj
) },

423 { 
MP_ROM_QSTR
(
MP_QSTR_i��
), 
MP_ROM_PTR
(&
mp_m�h_i��_obj
) },

424 #i�
MICROPY_PY_MATH_ISCLOSE


425 { 
MP_ROM_QSTR
(
MP_QSTR_is�o�
), 
MP_ROM_PTR
(&
mp_m�h_is�o�_obj
) },

427 { 
MP_ROM_QSTR
(
MP_QSTR_�unc
), 
MP_ROM_PTR
(&
mp_m�h_�unc_obj
) },

428 { 
MP_ROM_QSTR
(
MP_QSTR_�d�ns
), 
MP_ROM_PTR
(&
mp_m�h_�d�ns_obj
) },

429 { 
MP_ROM_QSTR
(
MP_QSTR_deg�es
), 
MP_ROM_PTR
(&
mp_m�h_deg�es_obj
) },

430 #i�
MICROPY_PY_MATH_FACTORIAL


431 { 
MP_ROM_QSTR
(
MP_QSTR_��ܟl
), 
MP_ROM_PTR
(&
mp_m�h_��ܟl_obj
) },

433 #i�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


434 { 
MP_ROM_QSTR
(
MP_QSTR_�f
), 
MP_ROM_PTR
(&
mp_m�h_�f_obj
) },

435 { 
MP_ROM_QSTR
(
MP_QSTR_�fc
), 
MP_ROM_PTR
(&
mp_m�h_�fc_obj
) },

436 { 
MP_ROM_QSTR
(
MP_QSTR_gamma
), 
MP_ROM_PTR
(&
mp_m�h_gamma_obj
) },

437 { 
MP_ROM_QSTR
(
MP_QSTR_lgamma
), 
MP_ROM_PTR
(&
mp_m�h_lgamma_obj
) },

441 
MP_DEFINE_CONST_DICT
(
mp_modu�_m�h_glob�s
, 
mp_modu�_m�h_glob�s_�b�
);

443 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_m�h
 = {

444 .
ba�
 = { &
mp_ty�_modu�
 },

445 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_m�h_glob�s
,

448 
MP_REGISTER_MODULE
(
MP_QSTR_m�h
, 
mp_modu�_m�h
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modmicropython.c

27 
	~<�dio.h
>

29 
	~"py/bu�t�.h
"

30 
	~"py/c�ack.h
"

31 
	~"py/ru�ime.h
"

32 
	~"py/gc.h
"

33 
	~"py/mph�.h
"

35 #i�
MICROPY_PY_MICROPYTHON


40 #i�
MICROPY_ENABLE_COMPILER


41 
mp_obj_t
 
	$mp_mi��yth�_�t_�v�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

42 i�(
n_�gs
 == 0) {

43  
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_STATE_VM
(
mp_�timi�_v�ue
));

45 
	`MP_STATE_VM
(
mp_�timi�_v�ue
��
	`mp_obj_g�_�t
(
�gs
[0]);

46  
mp_cڡ_n�e
;

48 
	}
}

49 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_mi��yth�_�t_�v�_obj
, 0, 1, 
mp_mi��yth�_�t_�v�
);

52 #i�
MICROPY_PY_MICROPYTHON_MEM_INFO


54 #i�
MICROPY_MEM_STATS


55 
mp_obj_t
 
	$mp_mi��yth�_mem_tٮ
() {

56  
	`MP_OBJ_NEW_SMALL_INT
(
	`m_g�_tٮ_by�s_�lo��d
());

57 
	}
}

58 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_mem_tٮ_obj
, 
mp_mi��yth�_mem_tٮ
);

60 
mp_obj_t
 
	$mp_mi��yth�_mem_cu��t
() {

61  
	`MP_OBJ_NEW_SMALL_INT
(
	`m_g�_cu��t_by�s_�lo��d
());

62 
	}
}

63 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_mem_cu��t_obj
, 
mp_mi��yth�_mem_cu��t
);

65 
mp_obj_t
 
	$mp_mi��yth�_mem_�ak
() {

66  
	`MP_OBJ_NEW_SMALL_INT
(
	`m_g�_�ak_by�s_�lo��d
());

67 
	}
}

68 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_mem_�ak_obj
, 
mp_mi��yth�_mem_�ak
);

71 
mp_obj_t
 
	$mp_mi��yth�_mem_�fo
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

72 ()
�gs
;

73 #i�
MICROPY_MEM_STATS


74 
	`mp_��tf
(&
mp_��_��t
, "mem:�ٮ=" 
UINT_FMT
 ", current=" UINT_FMT ",�eak=" UINT_FMT "\n",

75 (
mp_u�t_t
)
	`m_g�_tٮ_by�s_�lo��d
(), (mp_u�t_t)
	`m_g�_cu��t_by�s_�lo��d
(), (mp_u�t_t)
	`m_g�_�ak_by�s_�lo��d
());

77 #i�
MICROPY_STACK_CHECK


78 
	`mp_��tf
(&
mp_��_��t
, "�ack: " 
UINT_FMT
 " out of " UINT_FMT "\n",

79 
	`mp_c�ack_u�ge
(), (
mp_u�t_t
)
	`MP_STATE_THREAD
(
�ack_lim�
));

81 
	`mp_��tf
(&
mp_��_��t
, "�ack: " 
UINT_FMT
 "\n", 
	`mp_c�ack_u�ge
());

83 #i�
MICROPY_ENABLE_GC


84 
	`gc_dump_�fo
(&
mp_��_��t
);

85 i�(
n_�gs
 == 1) {

87 
	`gc_dump_�loc_�b�
(&
mp_��_��t
);

90 ()
n_�gs
;

92  
mp_cڡ_n�e
;

93 
	}
}

94 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_mi��yth�_mem_�fo_obj
, 0, 1, 
mp_mi��yth�_mem_�fo
);

96 
mp_obj_t
 
	$mp_mi��yth�_q�r_�fo
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

97 ()
�gs
;

98 
size_t
 
n_po�
, 
n_q�r
, 
n_�r_d�a_by�s
, 
n_tٮ_by�s
;

99 
	`q�r_po�_�fo
(&
n_po�
, &
n_q�r
, &
n_�r_d�a_by�s
, &
n_tٮ_by�s
);

100 
	`mp_��tf
(&
mp_��_��t
, "qstr�ool:�_pool=%u,�_qstr=%u,�_str_data_bytes=%u,�_total_bytes=%u\n",

101 
n_po�
, 
n_q�r
, 
n_�r_d�a_by�s
, 
n_tٮ_by�s
);

102 i�(
n_�gs
 == 1) {

104 
	`q�r_dump_d�a
();

106  
mp_cڡ_n�e
;

107 
	}
}

108 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_mi��yth�_q�r_�fo_obj
, 0, 1, 
mp_mi��yth�_q�r_�fo
);

112 #i�
MICROPY_PY_MICROPYTHON_STACK_USE


113 
mp_obj_t
 
	$mp_mi��yth�_�ack_u�
() {

114  
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_c�ack_u�ge
());

115 
	}
}

116 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_�ack_u�_obj
, 
mp_mi��yth�_�ack_u�
);

119 #i�
MICROPY_ENABLE_PYSTACK


120 
mp_obj_t
 
	$mp_mi��yth�_py�ack_u�
() {

121  
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_py�ack_u�ge
());

122 
	}
}

123 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_py�ack_u�_obj
, 
mp_mi��yth�_py�ack_u�
);

126 #i�
MICROPY_ENABLE_GC


127 
mp_obj_t
 
	$mp_mi��yth�_h�p_lock
() {

128 
	`gc_lock
();

129  
mp_cڡ_n�e
;

130 
	}
}

131 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_h�p_lock_obj
, 
mp_mi��yth�_h�p_lock
);

133 
mp_obj_t
 
	$mp_mi��yth�_h�p_u�ock
() {

134 
	`gc_u�ock
();

135  
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_STATE_THREAD
(
gc_lock_d�th
));

136 
	}
}

137 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_h�p_u�ock_obj
, 
mp_mi��yth�_h�p_u�ock
);

139 #i�
MICROPY_PY_MICROPYTHON_HEAP_LOCKED


140 
mp_obj_t
 
	$mp_mi��yth�_h�p_locked
() {

141  
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_STATE_THREAD
(
gc_lock_d�th
));

142 
	}
}

143 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_mi��yth�_h�p_locked_obj
, 
mp_mi��yth�_h�p_locked
);

147 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
 && (
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 == 0)

148 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_�loc_em�g�cy_ex��i�_buf_obj
, 
mp_�loc_em�g�cy_ex��i�_buf
);

151 #i�
MICROPY_KBD_EXCEPTION


152 
mp_obj_t
 
	$mp_mi��yth�_kbd_��
(
mp_obj_t
 
�t_chr_�
) {

153 
	`mp_h�_�t_���u�_ch�
(
	`mp_obj_g�_�t
(
�t_chr_�
));

154  
mp_cڡ_n�e
;

155 
	}
}

156 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_mi��yth�_kbd_��_obj
, 
mp_mi��yth�_kbd_��
);

159 #i�
MICROPY_ENABLE_SCHEDULER


160 
mp_obj_t
 
	$mp_mi��yth�_schedu�
(
mp_obj_t
 
fun�i�
, mp_obj_�
�g
) {

161 i�(!
	`mp_sched_schedu�
(
fun�i�
, 
�g
)) {

162 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("schedule queue full"));

164  
mp_cڡ_n�e
;

165 
	}
}

166 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_mi��yth�_schedu�_obj
, 
mp_mi��yth�_schedu�
);

169 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_mi��yth�_glob�s_�b�
[] = {

170 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_mi��yth�
) },

171 { 
MP_ROM_QSTR
(
MP_QSTR_cڡ
), 
MP_ROM_PTR
(&
mp_id�t�y_obj
) },

172 #i�
MICROPY_ENABLE_COMPILER


173 { 
MP_ROM_QSTR
(
MP_QSTR_�t_�v�
), 
MP_ROM_PTR
(&
mp_mi��yth�_�t_�v�_obj
) },

175 #i�
MICROPY_PY_MICROPYTHON_MEM_INFO


176 #i�
MICROPY_MEM_STATS


177 { 
MP_ROM_QSTR
(
MP_QSTR_mem_tٮ
), 
MP_ROM_PTR
(&
mp_mi��yth�_mem_tٮ_obj
) },

178 { 
MP_ROM_QSTR
(
MP_QSTR_mem_cu��t
), 
MP_ROM_PTR
(&
mp_mi��yth�_mem_cu��t_obj
) },

179 { 
MP_ROM_QSTR
(
MP_QSTR_mem_�ak
), 
MP_ROM_PTR
(&
mp_mi��yth�_mem_�ak_obj
) },

181 { 
MP_ROM_QSTR
(
MP_QSTR_mem_�fo
), 
MP_ROM_PTR
(&
mp_mi��yth�_mem_�fo_obj
) },

182 { 
MP_ROM_QSTR
(
MP_QSTR_q�r_�fo
), 
MP_ROM_PTR
(&
mp_mi��yth�_q�r_�fo_obj
) },

184 #i�
MICROPY_PY_MICROPYTHON_STACK_USE


185 { 
MP_ROM_QSTR
(
MP_QSTR_�ack_u�
), 
MP_ROM_PTR
(&
mp_mi��yth�_�ack_u�_obj
) },

187 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
 && (
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 == 0)

188 { 
MP_ROM_QSTR
(
MP_QSTR_�loc_em�g�cy_ex��i�_buf
), 
MP_ROM_PTR
(&
mp_�loc_em�g�cy_ex��i�_buf_obj
) },

190 #i�
MICROPY_ENABLE_PYSTACK


191 { 
MP_ROM_QSTR
(
MP_QSTR_py�ack_u�
), 
MP_ROM_PTR
(&
mp_mi��yth�_py�ack_u�_obj
) },

193 #i�
MICROPY_ENABLE_GC


194 { 
MP_ROM_QSTR
(
MP_QSTR_h�p_lock
), 
MP_ROM_PTR
(&
mp_mi��yth�_h�p_lock_obj
) },

195 { 
MP_ROM_QSTR
(
MP_QSTR_h�p_u�ock
), 
MP_ROM_PTR
(&
mp_mi��yth�_h�p_u�ock_obj
) },

196 #i�
MICROPY_PY_MICROPYTHON_HEAP_LOCKED


197 { 
MP_ROM_QSTR
(
MP_QSTR_h�p_locked
), 
MP_ROM_PTR
(&
mp_mi��yth�_h�p_locked_obj
) },

200 #i�
MICROPY_KBD_EXCEPTION


201 { 
MP_ROM_QSTR
(
MP_QSTR_kbd_��
), 
MP_ROM_PTR
(&
mp_mi��yth�_kbd_��_obj
) },

203 #i�
MICROPY_ENABLE_SCHEDULER


204 { 
MP_ROM_QSTR
(
MP_QSTR_schedu�
), 
MP_ROM_PTR
(&
mp_mi��yth�_schedu�_obj
) },

208 
MP_DEFINE_CONST_DICT
(
mp_modu�_mi��yth�_glob�s
, 
mp_modu�_mi��yth�_glob�s_�b�
);

210 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_mi��yth�
 = {

211 .
ba�
 = { &
mp_ty�_modu�
 },

212 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_mi��yth�_glob�s
,

215 
MP_REGISTER_MODULE
(
MP_QSTR_mi��yth�
, 
mp_modu�_mi��yth�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modstruct.c

28 
	~<as��.h
>

29 
	~<�r�g.h
>

31 
	~"py/ru�ime.h
"

32 
	~"py/bu�t�.h
"

33 
	~"py/objtu�e.h
"

34 
	~"py/b��y.h
"

35 
	~"py/�r�num.h
"

37 #i�
MICROPY_PY_STRUCT


55 
	$g�_fmt_ty�
(cڡ **
fmt
) {

56 
t
 = **
fmt
;

57 
t
) {

59 
t
 = '>';

70 (*
fmt
)++;

71  
t
;

72 
	}
}

74 
mp_u�t_t
 
	$g�_fmt_num
(cڡ **
p
) {

75 cڡ *
num
 = *
p
;

76 
u�t
 
�n
 = 1;

77 
	`unich�_isdig�
(*++
num
)) {

78 
�n
++;

80 
mp_u�t_t
 
v�
 = (mp_u�t_t)
	`MP_OBJ_SMALL_INT_VALUE
(
	`mp_�r�_num_��g�
(*
p
, 
�n
, 10, 
NULL
));

81 *
p
 = 
num
;

82  
v�
;

83 
	}
}

85 
size_t
 
	$�lc_size_�ems
(cڡ *
fmt
, 
size_t
 *
tٮ_sz
) {

86 
fmt_ty�
 = 
	`g�_fmt_ty�
(&
fmt
);

87 
size_t
 
tٮ_�t
 = 0;

88 
size_t
 
size
;

89 
size
 = 0; *
fmt
; fmt++) {

90 
mp_u�t_t
 
�t
 = 1;

91 i�(
	`unich�_isdig�
(*
fmt
)) {

92 
�t
 = 
	`g�_fmt_num
(&
fmt
);

95 i�(*
fmt
 == 'x') {

96 
size
 +�
�t
;

97 } i�(*
fmt
 == 's') {

98 
tٮ_�t
 += 1;

99 
size
 +�
�t
;

101 
tٮ_�t
 +�
�t
;

102 
size_t
 
�ign
;

103 
size_t
 
sz
 = 
	`mp_b��y_g�_size
(
fmt_ty�
, *
fmt
, &
�ign
);

104 
�t
--) {

106 
size
 = (siz�+ 
�ign
 - 1) & ~(align - 1);

107 
size
 +�
sz
;

111 *
tٮ_sz
 = 
size
;

112  
tٮ_�t
;

113 
	}
}

115 
mp_obj_t
 
	$�ru�_�lcsize
(
mp_obj_t
 
fmt_�
) {

116 cڡ *
fmt
 = 
	`mp_obj_�r_g�_�r
(
fmt_�
);

117 
size_t
 
size
;

118 
	`�lc_size_�ems
(
fmt
, &
size
);

119  
	`MP_OBJ_NEW_SMALL_INT
(
size
);

120 
	}
}

121 
MP_DEFINE_CONST_FUN_OBJ_1
(
�ru�_�lcsize_obj
, 
�ru�_�lcsize
);

123 
mp_obj_t
 
	$�ru�_u�ack_�om
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

128 cڡ *
fmt
 = 
	`mp_obj_�r_g�_�r
(
�gs
[0]);

129 
size_t
 
tٮ_sz
;

130 
size_t
 
num_�ems
 = 
	`�lc_size_�ems
(
fmt
, &
tٮ_sz
);

131 
fmt_ty�
 = 
	`g�_fmt_ty�
(&
fmt
);

132 
mp_obj_tu�e_t
 *
�s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
num_�ems
, 
NULL
));

133 
mp_buf�r_�fo_t
 
buf�fo
;

134 
	`mp_g�_buf�r_�i�
(
�gs
[1], &
buf�fo
, 
MP_BUFFER_READ
);

135 
by�
 *
p
 = 
buf�fo
.
buf
;

136 
by�
 *
�d_p
 = &
p
[
buf�fo
.
�n
];

137 
mp_�t_t
 
off�t
 = 0;

139 i�(
n_�gs
 > 2) {

141 
off�t
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

142 i�(
off�t
 < 0) {

144 
off�t
 = 
buf�fo
.
�n
 + offset;

145 i�(
off�t
 < 0) {

146 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("buffer�oo small"));

149 
p
 +�
off�t
;

151 
by�
 *
p_ba�
 = 
p
;

154 i�(
p
 + 
tٮ_sz
 > 
�d_p
) {

155 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("buffer�oo small"));

158 
size_t
 
i
 = 0; i < 
num_�ems
;) {

159 
mp_u�t_t
 
�t
 = 1;

160 i�(
	`unich�_isdig�
(*
fmt
)) {

161 
�t
 = 
	`g�_fmt_num
(&
fmt
);

163 
mp_obj_t
 
�em
;

164 i�(*
fmt
 == 'x') {

165 
p
 +�
�t
;

166 } i�(*
fmt
 == 's') {

167 
�em
 = 
	`mp_obj_�w_by�s
(
p
, 
�t
);

168 
p
 +�
�t
;

169 
�s
->
�ems
[
i
++] = 
�em
;

171 
�t
--) {

172 
�em
 = 
	`mp_b��y_g�_v�
(
fmt_ty�
, *
fmt
, 
p_ba�
, &
p
);

173 
�s
->
�ems
[
i
++] = 
�em
;

176 
fmt
++;

178  
	`MP_OBJ_FROM_PTR
(
�s
);

179 
	}
}

180 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�ru�_u�ack_�om_obj
, 2, 3, 
�ru�_u�ack_�om
);

183 
	$�ru�_�ck_�to_����
(
mp_obj_t
 
fmt_�
, 
by�
 *
p
, 
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
) {

184 cڡ *
fmt
 = 
	`mp_obj_�r_g�_�r
(
fmt_�
);

185 
fmt_ty�
 = 
	`g�_fmt_ty�
(&
fmt
);

187 
by�
 *
p_ba�
 = 
p
;

188 
size_t
 
i
;

189 
i
 = 0; i < 
n_�gs
;) {

190 
mp_u�t_t
 
�t
 = 1;

191 i�(*
fmt
 == '\0') {

195 i�(
	`unich�_isdig�
(*
fmt
)) {

196 
�t
 = 
	`g�_fmt_num
(&
fmt
);

199 i�(*
fmt
 == 'x') {

200 
	`mem�t
(
p
, 0, 
�t
);

201 
p
 +�
�t
;

202 } i�(*
fmt
 == 's') {

203 
mp_buf�r_�fo_t
 
buf�fo
;

204 
	`mp_g�_buf�r_�i�
(
�gs
[
i
++], &
buf�fo
, 
MP_BUFFER_READ
);

205 
mp_u�t_t
 
to_c�y
 = 
�t
;

206 i�(
buf�fo
.
�n
 < 
to_c�y
) {

207 
to_c�y
 = 
buf�fo
.
�n
;

209 
	`mem�y
(
p
, 
buf�fo
.
buf
, 
to_c�y
);

210 
	`mem�t
(
p
 + 
to_c�y
, 0, 
�t
 -�o_copy);

211 
p
 +�
�t
;

214 
�t
-- && 
i
 < 
n_�gs
) {

215 
	`mp_b��y_�t_v�
(
fmt_ty�
, *
fmt
, 
�gs
[
i
++], 
p_ba�
, &
p
);

218 
fmt
++;

220 
	}
}

222 
mp_obj_t
 
	$�ru�_�ck
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

224 
mp_�t_t
 
size
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`�ru�_�lcsize
(
�gs
[0]));

225 
v�r_t
 
v�r
;

226 
	`v�r_��_�n
(&
v�r
, 
size
);

227 
by�
 *
p
 = (by� *)
v�r
.
buf
;

228 
	`mem�t
(
p
, 0, 
size
);

229 
	`�ru�_�ck_�to_����
(
�gs
[0], 
p
, 
n_�gs
 - 1, &args[1]);

230  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

231 
	}
}

232 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�ru�_�ck_obj
, 1, 
MP_OBJ_FUN_ARGS_MAX
, 
�ru�_�ck
);

234 
mp_obj_t
 
	$�ru�_�ck_�to
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

235 
mp_buf�r_�fo_t
 
buf�fo
;

236 
	`mp_g�_buf�r_�i�
(
�gs
[1], &
buf�fo
, 
MP_BUFFER_WRITE
);

237 
mp_�t_t
 
off�t
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

238 i�(
off�t
 < 0) {

240 
off�t
 = (
mp_�t_t
)
buf�fo
.
�n
 + offset;

241 i�(
off�t
 < 0) {

242 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("buffer�oo small"));

245 
by�
 *
p
 = (by� *)
buf�fo
.
buf
;

246 
by�
 *
�d_p
 = &
p
[
buf�fo
.
�n
];

247 
p
 +�
off�t
;

250 
mp_�t_t
 
sz
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`�ru�_�lcsize
(
�gs
[0]));

251 i�(
p
 + 
sz
 > 
�d_p
) {

252 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("buffer�oo small"));

255 
	`�ru�_�ck_�to_����
(
�gs
[0], 
p
, 
n_�gs
 - 3, &args[3]);

256  
mp_cڡ_n�e
;

257 
	}
}

258 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�ru�_�ck_�to_obj
, 3, 
MP_OBJ_FUN_ARGS_MAX
, 
�ru�_�ck_�to
);

260 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_�ru�_glob�s_�b�
[] = {

261 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_�ru�
) },

262 { 
MP_ROM_QSTR
(
MP_QSTR_�lcsize
), 
MP_ROM_PTR
(&
�ru�_�lcsize_obj
) },

263 { 
MP_ROM_QSTR
(
MP_QSTR_�ck
), 
MP_ROM_PTR
(&
�ru�_�ck_obj
) },

264 { 
MP_ROM_QSTR
(
MP_QSTR_�ck_�to
), 
MP_ROM_PTR
(&
�ru�_�ck_�to_obj
) },

265 { 
MP_ROM_QSTR
(
MP_QSTR_u�ack
), 
MP_ROM_PTR
(&
�ru�_u�ack_�om_obj
) },

266 { 
MP_ROM_QSTR
(
MP_QSTR_u�ack_�om
), 
MP_ROM_PTR
(&
�ru�_u�ack_�om_obj
) },

269 
MP_DEFINE_CONST_DICT
(
mp_modu�_�ru�_glob�s
, 
mp_modu�_�ru�_glob�s_�b�
);

271 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_�ru�
 = {

272 .
ba�
 = { &
mp_ty�_modu�
 },

273 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_�ru�_glob�s
,

276 
MP_REGISTER_EXTENSIBLE_MODULE
(
MP_QSTR_�ru�
, 
mp_modu�_�ru�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modsys.c

28 
	~"py/bu�t�.h
"

29 
	~"py/objli�.h
"

30 
	~"py/objmodu�.h
"

31 
	~"py/objtu�e.h
"

32 
	~"py/obj�r.h
"

33 
	~"py/obj�t.h
"

34 
	~"py/objty�.h
"

35 
	~"py/��am.h
"

36 
	~"py/sm�l�t.h
"

37 
	~"py/ru�ime.h
"

38 
	~"py/�rsi��tcode.h
"

39 
	~"extmod/mod��f�m.h
"

40 
	~"g�hdr/mpv�si�.h
"

42 #i�
MICROPY_PY_SYS_SETTRACE


43 
	~"py/objmodu�.h
"

44 
	~"py/�of�e.h
"

47 #i�
MICROPY_PY_SYS


50 

_mp_dummy_t
 
mp_sys_�d�_obj
;

51 

_mp_dummy_t
 
mp_sys_�dout_obj
;

52 

_mp_dummy_t
 
mp_sys_�d�r_obj
;

54 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


55 cڡ 
mp_��t_t
 
	gmp_sys_�dout_��t
 = {&
mp_sys_�dout_obj
, 
mp_��am_wr�e_ad�t�
};

59 cڡ 
MP_DEFINE_STR_OBJ
(
mp_sys_v�si�_obj
, "3.4.0; " 
MICROPY_BANNER_NAME_AND_VERSION
);

63 cڡ 
mp_rom_obj_tu�e_t
 
	gmp_sys_v�si�_�fo_obj
 = {{&
mp_ty�_tu�e
}, 3, {
MP_ROM_INT
(3), MP_ROM_INT(4), MP_ROM_INT(0)}};

67 cڡ 
mp_rom_obj_tu�e_t
 
	gmp_sys_im�em��ti�_v�si�_�fo_obj
 = {

68 {&
mp_ty�_tu�e
},

71 
MP_ROM_INT
(
MICROPY_VERSION_MAJOR
),

72 
MP_ROM_INT
(
MICROPY_VERSION_MINOR
),

73 
MP_ROM_INT
(
MICROPY_VERSION_MICRO
),

74 #i�
MICROPY_VERSION_PRERELEASE


75 
MP_ROM_QSTR
(
MP_QSTR_�ev�w
),

77 
MP_ROM_QSTR
(
MP_QSTR_
),

81 cڡ 
MP_DEFINE_STR_OBJ
(
mp_sys_im�em��ti�_mach�e_obj
, 
MICROPY_BANNER_MACHINE
);

82 
	#SYS_IMPLEMENTATION_ELEMS_BASE
 \

83 
	`MP_ROM_QSTR
(
MP_QSTR_mi��yth�
), \

84 
	`MP_ROM_PTR
(&
mp_sys_im�em��ti�_v�si�_�fo_obj
), \

85 
	`MP_ROM_PTR
(&
mp_sys_im�em��ti�_mach�e_obj
)

	)

87 #i�
MICROPY_PERSISTENT_CODE_LOAD


88 
	#SYS_IMPLEMENTATION_ELEMS__MPY
 \

89 , 
	`MP_ROM_INT
(
MPY_FILE_HEADER_INT
)

	)

91 
	#SYS_IMPLEMENTATION_ELEMS__MPY


	)

94 #i�
MICROPY_PY_ATTRTUPLE


95 #i�
MICROPY_PREVIEW_VERSION_2


96 
	#SYS_IMPLEMENTATION_ELEMS__V2
 \

97 , 
MP_ROM_TRUE


	)

99 
	#SYS_IMPLEMENTATION_ELEMS__V2


	)

102 cڡ 
q�r
 
	gim�_f�lds
[] = {

103 
MP_QSTR_�me
,

104 
MP_QSTR_v�si�
,

105 
MP_QSTR__mach�e
,

106 #i�
MICROPY_PERSISTENT_CODE_LOAD


107 
MP_QSTR__mpy
,

109 #i�
MICROPY_PREVIEW_VERSION_2


110 
MP_QSTR__v2
,

113 
MP_DEFINE_ATTRTUPLE
(

114 
mp_sys_im�em��ti�_obj
,

115 
im�_f�lds
,

116 3 + 
MICROPY_PERSISTENT_CODE_LOAD
 + 
MICROPY_PREVIEW_VERSION_2
,

117 
SYS_IMPLEMENTATION_ELEMS_BASE


118 
SYS_IMPLEMENTATION_ELEMS__MPY


119 
SYS_IMPLEMENTATION_ELEMS__V2


122 cڡ 
mp_rom_obj_tu�e_t
 
	gmp_sys_im�em��ti�_obj
 = {

123 {&
mp_ty�_tu�e
},

124 3 + 
MICROPY_PERSISTENT_CODE_LOAD
,

131 
SYS_IMPLEMENTATION_ELEMS_BASE


132 
SYS_IMPLEMENTATION_ELEMS__MPY


137 #unde�
I


139 #ifde�
MICROPY_PY_SYS_PLATFORM


141 cڡ 
MP_DEFINE_STR_OBJ
(
mp_sys_��f�m_obj
, 
MICROPY_PY_SYS_PLATFORM
);

144 #ifde�
MICROPY_PY_SYS_EXECUTABLE


147 
MP_DEFINE_STR_OBJ
(
mp_sys_execu�b�_obj
, "");

150 #i�
MICROPY_PY_SYS_INTERN


151 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_sys_���_obj
, 
mp_obj_�r_���_checked
);

155 
mp_obj_t
 
	$mp_sys_ex�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

156 i�(
n_�gs
 == 0) {

157 
	`mp_�i�_ty�
(&
mp_ty�_Sy�emEx�
);

159 
	`mp_�i�_ty�_�g
(&
mp_ty�_Sy�emEx�
, 
�gs
[0]);

161 
	}
}

162 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_sys_ex�_obj
, 0, 1, 
mp_sys_ex�
);

164 
mp_obj_t
 
	$mp_sys_��t_ex��i�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

165 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


166 *
��am_obj
 = &
mp_sys_�dout_obj
;

167 i�(
n_�gs
 > 1) {

168 
	`mp_g�_��am_�i�
(
�gs
[1], 
MP_STREAM_OP_WRITE
);

169 
��am_obj
 = 
	`MP_OBJ_TO_PTR
(
�gs
[1]);

172 
mp_��t_t
 
��t
 = {
��am_obj
, 
mp_��am_wr�e_ad�t�
};

173 
	`mp_obj_��t_ex��i�
(&
��t
, 
�gs
[0]);

175 ()
n_�gs
;

176 
	`mp_obj_��t_ex��i�
(&
mp_��_��t
, 
�gs
[0]);

179  
mp_cڡ_n�e
;

180 
	}
}

181 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_sys_��t_ex��i�_obj
, 1, 2, 
mp_sys_��t_ex��i�
);

183 #i�
MICROPY_PY_SYS_EXC_INFO


184 
mp_obj_t
 
	$mp_sys_exc_�fo
() {

185 
mp_obj_t
 
cur_exc
 = 
	`MP_OBJ_FROM_PTR
(
	`MP_STATE_VM
(
cur_ex��i�
));

186 
mp_obj_tu�e_t
 *
t
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(3, 
NULL
));

188 i�(
cur_exc
 =�
MP_OBJ_NULL
) {

189 
t
->
�ems
[0] = 
mp_cڡ_n�e
;

190 
t
->
�ems
[1] = 
mp_cڡ_n�e
;

191 
t
->
�ems
[2] = 
mp_cڡ_n�e
;

192  
	`MP_OBJ_FROM_PTR
(
t
);

195 
t
->
�ems
[0] = 
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
cur_exc
));

196 
t
->
�ems
[1] = 
cur_exc
;

197 
t
->
�ems
[2] = 
mp_cڡ_n�e
;

198  
	`MP_OBJ_FROM_PTR
(
t
);

199 
	}
}

200 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_sys_exc_�fo_obj
, 
mp_sys_exc_�fo
);

203 #i�
MICROPY_PY_SYS_GETSIZEOF


204 
mp_obj_t
 
	$mp_sys_g�sizeof
(
mp_obj_t
 
obj
) {

205  
	`mp_u�ry_�
(
MP_UNARY_OP_SIZEOF
, 
obj
);

206 
	}
}

207 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_sys_g�sizeof_obj
, 
mp_sys_g�sizeof
);

210 #i�
MICROPY_PY_SYS_ATEXIT


212 
mp_obj_t
 
	$mp_sys_�ex�
(
mp_obj_t
 
obj
) {

213 
mp_obj_t
 
�d
 = 
	`MP_STATE_VM
(
sys_ex�func
);

214 
	`MP_STATE_VM
(
sys_ex�func
��
obj
;

215  
�d
;

216 
	}
}

217 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_sys_�ex�_obj
, 
mp_sys_�ex�
);

220 #i�
MICROPY_PY_SYS_SETTRACE


222 
mp_obj_t
 
	$mp_sys_����
(
mp_obj_t
 
obj
) {

223  
	`mp_�of_����
(
obj
);

224 
	}
}

225 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_sys_����_obj
, 
mp_sys_����
);

228 #i�
MICROPY_PY_SYS_PATH
 && !
MICROPY_PY_SYS_ATTR_DELEGATION


232 #i�
MICROPY_PY_SYS_PS1_PS2
 && !
MICROPY_PY_SYS_ATTR_DELEGATION


236 #i�
MICROPY_PY_SYS_TRACEBACKLIMIT
 && !
MICROPY_PY_SYS_ATTR_DELEGATION


240 #i�
MICROPY_PY_SYS_ATTR_DELEGATION
 && !
MICROPY_MODULE_ATTR_DELEGATION


244 #i�
MICROPY_PY_SYS_ATTR_DELEGATION


246 cڡ 
u�t16_t
 
	gsys_mu�b�_keys
[] = {

247 #i�
MICROPY_PY_SYS_PATH


250 
MP_QSTR_�th
,

252 #i�
MICROPY_PY_SYS_PS1_PS2


253 
MP_QSTR_ps1
,

254 
MP_QSTR_ps2
,

256 #i�
MICROPY_PY_SYS_TRACEBACKLIMIT


257 
MP_QSTR_�a�backlim�
,

259 
MP_QSTRnu�
,

262 
	$mp_modu�_sys_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

263 
	`MP_STATIC_ASSERT
(
	`MP_ARRAY_SIZE
(
sys_mu�b�_keys
�=�
MP_SYS_MUTABLE_NUM
 + 1);

264 
	`MP_STATIC_ASSERT
(
	`MP_ARRAY_SIZE
(
	`MP_STATE_VM
(
sys_mu�b�
)�=�
MP_SYS_MUTABLE_NUM
);

265 
	`mp_modu�_g��ic_��
(
��
, 
de�
, 
sys_mu�b�_keys
, 
	`MP_STATE_VM
(
sys_mu�b�
));

266 
	}
}

269 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_sys_glob�s_�b�
[] = {

270 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_sys
) },

272 #i�
MICROPY_PY_SYS_ARGV


273 { 
MP_ROM_QSTR
(
MP_QSTR_�gv
), 
MP_ROM_PTR
(&
MP_STATE_VM
(
mp_sys_�gv_obj
)) },

275 { 
MP_ROM_QSTR
(
MP_QSTR_v�si�
), 
MP_ROM_PTR
(&
mp_sys_v�si�_obj
) },

276 { 
MP_ROM_QSTR
(
MP_QSTR_v�si�_�fo
), 
MP_ROM_PTR
(&
mp_sys_v�si�_�fo_obj
) },

277 { 
MP_ROM_QSTR
(
MP_QSTR_im�em��ti�
), 
MP_ROM_PTR
(&
mp_sys_im�em��ti�_obj
) },

278 #ifde�
MICROPY_PY_SYS_PLATFORM


279 { 
MP_ROM_QSTR
(
MP_QSTR_��f�m
), 
MP_ROM_PTR
(&
mp_sys_��f�m_obj
) },

281 #i�
MP_ENDIANNESS_LITTLE


282 { 
MP_ROM_QSTR
(
MP_QSTR_by��d�
), MP_ROM_QSTR(
MP_QSTR_l��e
) },

284 { 
MP_ROM_QSTR
(
MP_QSTR_by��d�
), MP_ROM_QSTR(
MP_QSTR_big
) },

287 #i�
MICROPY_PY_SYS_MAXSIZE


288 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_NONE


294 { 
MP_ROM_QSTR
(
MP_QSTR_maxsize
), 
MP_ROM_INT
(
MP_SMALL_INT_MAX
) },

296 { 
MP_ROM_QSTR
(
MP_QSTR_maxsize
), 
MP_ROM_PTR
(&
mp_sys_maxsize_obj
) },

300 #i�
MICROPY_PY_SYS_INTERN


301 { 
MP_ROM_QSTR
(
MP_QSTR_���
), 
MP_ROM_PTR
(&
mp_sys_���_obj
) },

304 #i�
MICROPY_PY_SYS_EXIT


305 { 
MP_ROM_QSTR
(
MP_QSTR_ex�
), 
MP_ROM_PTR
(&
mp_sys_ex�_obj
) },

308 #i�
MICROPY_PY_SYS_SETTRACE


309 { 
MP_ROM_QSTR
(
MP_QSTR_����
), 
MP_ROM_PTR
(&
mp_sys_����_obj
) },

312 #i�
MICROPY_PY_SYS_STDFILES


313 { 
MP_ROM_QSTR
(
MP_QSTR_�d�
), 
MP_ROM_PTR
(&
mp_sys_�d�_obj
) },

314 { 
MP_ROM_QSTR
(
MP_QSTR_�dout
), 
MP_ROM_PTR
(&
mp_sys_�dout_obj
) },

315 { 
MP_ROM_QSTR
(
MP_QSTR_�d�r
), 
MP_ROM_PTR
(&
mp_sys_�d�r_obj
) },

318 #i�
MICROPY_PY_SYS_MODULES


319 { 
MP_ROM_QSTR
(
MP_QSTR_modu�s
), 
MP_ROM_PTR
(&
MP_STATE_VM
(
mp_l�ded_modu�s_di�
)) },

321 #i�
MICROPY_PY_SYS_EXC_INFO


322 { 
MP_ROM_QSTR
(
MP_QSTR_exc_�fo
), 
MP_ROM_PTR
(&
mp_sys_exc_�fo_obj
) },

324 #i�
MICROPY_PY_SYS_GETSIZEOF


325 { 
MP_ROM_QSTR
(
MP_QSTR_g�sizeof
), 
MP_ROM_PTR
(&
mp_sys_g�sizeof_obj
) },

328 #i�
MICROPY_PY_SYS_EXECUTABLE


329 { 
MP_ROM_QSTR
(
MP_QSTR_execu�b�
), 
MP_ROM_PTR
(&
mp_sys_execu�b�_obj
) },

336 { 
MP_ROM_QSTR
(
MP_QSTR_��t_ex��i�
), 
MP_ROM_PTR
(&
mp_sys_��t_ex��i�_obj
) },

337 #i�
MICROPY_PY_SYS_ATEXIT


338 { 
MP_ROM_QSTR
(
MP_QSTR_�ex�
), 
MP_ROM_PTR
(&
mp_sys_�ex�_obj
) },

342 
MP_DEFINE_CONST_DICT
(
mp_modu�_sys_glob�s
, 
mp_modu�_sys_glob�s_�b�
);

344 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_sys
 = {

345 .
ba�
 = { &
mp_ty�_modu�
 },

346 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_sys_glob�s
,

352 
MP_REGISTER_MODULE
(
MP_QSTR_sys
, 
mp_modu�_sys
);

354 #i�
MICROPY_PY_SYS_ARGV


357 
MP_REGISTER_ROOT_POINTER
(
mp_obj_li�_t
 
mp_sys_�gv_obj
);

360 #i�
MICROPY_PY_SYS_EXC_INFO


362 
MP_REGISTER_ROOT_POINTER
(
mp_obj_ba�_t
 * 
cur_ex��i�
);

365 #i�
MICROPY_PY_SYS_ATEXIT


367 
MP_REGISTER_ROOT_POINTER
(
mp_obj_t
 
sys_ex�func
);

370 #i�
MICROPY_PY_SYS_ATTR_DELEGATION


372 
MP_REGISTER_ROOT_POINTER
(
mp_obj_t
 
sys_mu�b�
[
MP_SYS_MUTABLE_NUM
]);

373 
MP_REGISTER_MODULE_DELEGATION
(
mp_modu�_sys
, 
mp_modu�_sys_��
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modthread.c

27 
	~<�dio.h
>

28 
	~<�r�g.h
>

30 
	~"py/ru�ime.h
"

32 #i�
MICROPY_PY_THREAD


34 
	~"py/m�h�ad.h
"

36 #i�
MICROPY_DEBUG_VERBOSE


37 
	#DEBUG_PRINT
 (1)

	)

38 
	#DEBUG_��tf
 
DEBUG_��tf


	)

40 
	#DEBUG_PRINT
 (0)

	)

41 
	#DEBUG_��tf
(...�()0

	)

47 cڡ 
mp_obj_ty�_t
 
	gmp_ty�_th�ad_lock
;

49 
	s_mp_obj_th�ad_lock_t
 {

50 
mp_obj_ba�_t
 
	mba�
;

51 
mp_th�ad_mu�x_t
 
	mmu�x
;

52 vީ��
bo�
 
	mlocked
;

53 } 
	tmp_obj_th�ad_lock_t
;

55 
mp_obj_th�ad_lock_t
 *
	$mp_obj_�w_th�ad_lock
() {

56 
mp_obj_th�ad_lock_t
 *
�lf
 = 
	`mp_obj_m�loc
(mp_obj_th�ad_lock_t, &
mp_ty�_th�ad_lock
);

57 
	`mp_th�ad_mu�x_��
(&
�lf
->
mu�x
);

58 
�lf
->
locked
 = 
�l�
;

59  
�lf
;

60 
	}
}

62 
mp_obj_t
 
	$th�ad_lock_acqu�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

63 
mp_obj_th�ad_lock_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

64 
bo�
 
wa�
 = 
�ue
;

65 i�(
n_�gs
 > 1) {

66 
wa�
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

69 
	`MP_THREAD_GIL_EXIT
();

70 
�t
 = 
	`mp_th�ad_mu�x_lock
(&
�lf
->
mu�x
, 
wa�
);

71 
	`MP_THREAD_GIL_ENTER
();

72 i�(
�t
 == 0) {

73  
mp_cڡ_�l�
;

74 } i�(
�t
 == 1) {

75 
�lf
->
locked
 = 
�ue
;

76  
mp_cڡ_�ue
;

78 
	`mp_�i�_OSE��
(-
�t
);

80 
	}
}

81 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
th�ad_lock_acqu�e_obj
, 1, 3, 
th�ad_lock_acqu�e
);

83 
mp_obj_t
 
	$th�ad_lock_��a�
(
mp_obj_t
 
�lf_�
) {

84 
mp_obj_th�ad_lock_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

85 i�(!
�lf
->
locked
) {

86 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
NULL
);

88 
�lf
->
locked
 = 
�l�
;

89 
	`MP_THREAD_GIL_EXIT
();

90 
	`mp_th�ad_mu�x_u�ock
(&
�lf
->
mu�x
);

91 
	`MP_THREAD_GIL_ENTER
();

92  
mp_cڡ_n�e
;

93 
	}
}

94 
MP_DEFINE_CONST_FUN_OBJ_1
(
th�ad_lock_��a�_obj
, 
th�ad_lock_��a�
);

96 
mp_obj_t
 
	$th�ad_lock_locked
(
mp_obj_t
 
�lf_�
) {

97 
mp_obj_th�ad_lock_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

98  
	`mp_obj_�w_bo�
(
�lf
->
locked
);

99 
	}
}

100 
MP_DEFINE_CONST_FUN_OBJ_1
(
th�ad_lock_locked_obj
, 
th�ad_lock_locked
);

102 
mp_obj_t
 
	$th�ad_lock___ex�__
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

103 ()
n_�gs
;

104  
	`th�ad_lock_��a�
(
�gs
[0]);

105 
	}
}

106 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
th�ad_lock___ex�___obj
, 4, 4, 
th�ad_lock___ex�__
);

108 cڡ 
mp_rom_m�_�em_t
 
	gth�ad_lock_lo�ls_di�_�b�
[] = {

109 { 
MP_ROM_QSTR
(
MP_QSTR_acqu�e
), 
MP_ROM_PTR
(&
th�ad_lock_acqu�e_obj
) },

110 { 
MP_ROM_QSTR
(
MP_QSTR_��a�
), 
MP_ROM_PTR
(&
th�ad_lock_��a�_obj
) },

111 { 
MP_ROM_QSTR
(
MP_QSTR_locked
), 
MP_ROM_PTR
(&
th�ad_lock_locked_obj
) },

112 { 
MP_ROM_QSTR
(
MP_QSTR___��r__
), 
MP_ROM_PTR
(&
th�ad_lock_acqu�e_obj
) },

113 { 
MP_ROM_QSTR
(
MP_QSTR___ex�__
), 
MP_ROM_PTR
(&
th�ad_lock___ex�___obj
) },

116 
MP_DEFINE_CONST_DICT
(
th�ad_lock_lo�ls_di�
, 
th�ad_lock_lo�ls_di�_�b�
);

118 
MP_DEFINE_CONST_OBJ_TYPE
(

119 
mp_ty�_th�ad_lock
,

120 
MP_QSTR_lock
,

121 
MP_TYPE_FLAG_NONE
,

122 
lo�ls_di�
, &
th�ad_lock_lo�ls_di�


128 
size_t
 
	gth�ad_�ack_size
 = 0;

130 
mp_obj_t
 
	$mod_th�ad_g�_id�t
() {

131  
	`mp_obj_�w_�t_�om_u�t
(
	`mp_th�ad_g�_id
());

132 
	}
}

133 
MP_DEFINE_CONST_FUN_OBJ_0
(
mod_th�ad_g�_id�t_obj
, 
mod_th�ad_g�_id�t
);

135 
mp_obj_t
 
	$mod_th�ad_�ack_size
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

136 
mp_obj_t
 
�t
 = 
	`mp_obj_�w_�t_�om_u�t
(
th�ad_�ack_size
);

137 i�(
n_�gs
 == 0) {

138 
th�ad_�ack_size
 = 0;

140 
th�ad_�ack_size
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

142  
�t
;

143 
	}
}

144 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mod_th�ad_�ack_size_obj
, 0, 1, 
mod_th�ad_�ack_size
);

146 
	s_th�ad_��y_�gs_t
 {

147 
mp_obj_di�_t
 *
	mdi�_lo�ls
;

148 
mp_obj_di�_t
 *
	mdi�_glob�s
;

149 
size_t
 
	m�ack_size
;

150 
mp_obj_t
 
	mfun
;

151 
size_t
 
	mn_�gs
;

152 
size_t
 
	mn_kw
;

153 
mp_obj_t
 
	m�gs
[];

154 } 
	tth�ad_��y_�gs_t
;

156 *
	$th�ad_��y
(*
�gs_�
) {

159 
th�ad_��y_�gs_t
 *
�gs
 = (th�ad_��y_�gs_�*)
�gs_�
;

161 
mp_��e_th�ad_t
 
ts
;

162 
	`mp_th�ad_��_��e
(&
ts
, 
�gs
->
�ack_size
,�rgs->
di�_lo�ls
,�rgs->
di�_glob�s
);

164 #i�
MICROPY_ENABLE_PYSTACK


166 
mp_obj_t
 
m�i_py�ack
[128];

167 
	`mp_py�ack_��
(
m�i_py�ack
, &mini_pystack[128]);

170 
	`MP_THREAD_GIL_ENTER
();

173 
	`mp_th�ad_��t
();

178 
	`DEBUG_��tf
("[th�ad] s���s=%��gs=%��ack=%p\n", &
ts
, &
�gs
, 
	`MP_STATE_THREAD
(
�ack_t�
));

180 
�r_buf_t
 
�r
;

181 i�(
	`�r_push
(&
�r
) == 0) {

182 
	`mp_��_fun�i�_n_kw
(
�gs
->
fun
,�rgs->
n_�gs
,�rgs->
n_kw
,�rgs->args);

183 
	`�r_p�
();

187 
mp_obj_ba�_t
 *
exc
 = (mp_obj_ba�_�*)
�r
.
�t_v�
;

188 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
exc
->
ty�
), MP_OBJ_FROM_PTR(&
mp_ty�_Sy�emEx�
))) {

192 
	`mp_��tf
(
MICROPY_ERROR_PRINTER
, "Unhandled�xception in�hread started by ");

193 
	`mp_obj_��t_h��r
(
MICROPY_ERROR_PRINTER
, 
�gs
->
fun
, 
PRINT_REPR
);

194 
	`mp_��tf
(
MICROPY_ERROR_PRINTER
, "\n");

195 
	`mp_obj_��t_ex��i�
(
MICROPY_ERROR_PRINTER
, 
	`MP_OBJ_FROM_PTR
(
exc
));

199 
	`DEBUG_��tf
("[th�ad] f�ish�s=%p\n", &
ts
);

202 
	`mp_th�ad_f�ish
();

204 
	`MP_THREAD_GIL_EXIT
();

206  
NULL
;

207 
	}
}

209 
mp_obj_t
 
	$mod_th�ad_��t_�w_th�ad
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

214 
th�ad_��y_�gs_t
 *
th_�gs
;

217 
size_t
 
pos_�gs_�n
;

218 
mp_obj_t
 *
pos_�gs_�ems
;

219 
	`mp_obj_g�_��y
(
�gs
[1], &
pos_�gs_�n
, &
pos_�gs_�ems
);

222 i�(
n_�gs
 == 2) {

224 
th_�gs
 = 
	`m_�w_obj_v�
(
th�ad_��y_�gs_t
, 
�gs
, 
mp_obj_t
, 
pos_�gs_�n
);

225 
th_�gs
->
n_kw
 = 0;

228 i�(
	`mp_obj_g�_ty�
(
�gs
[2]�!�&
mp_ty�_di�
) {

229 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("expecting� dict for keyword�rgs"));

231 
mp_m�_t
 *
m�
 = &((
mp_obj_di�_t
 *)
	`MP_OBJ_TO_PTR
(
�gs
[2]))->map;

232 
th_�gs
 = 
	`m_�w_obj_v�
(
th�ad_��y_�gs_t
, 
�gs
, 
mp_obj_t
, 
pos_�gs_�n
 + 2 * 
m�
->
u�d
);

233 
th_�gs
->
n_kw
 = 
m�
->
u�d
;

235 
size_t
 
i
 = 0, 
n
 = 
pos_�gs_�n
; i < 
m�
->
�loc
; ++i) {

236 i�(
	`mp_m�_��_is_f��d
(
m�
, 
i
)) {

237 
th_�gs
->
�gs
[
n
++] = 
m�
->
�b�
[
i
].
key
;

238 
th_�gs
->
�gs
[
n
++] = 
m�
->
�b�
[
i
].
v�ue
;

244 
th_�gs
->
n_�gs
 = 
pos_�gs_�n
;

245 
	`mem�y
(
th_�gs
->
�gs
, 
pos_�gs_�ems
, 
pos_�gs_�n
 * (
mp_obj_t
));

248 
th_�gs
->
di�_lo�ls
 = 
	`mp_lo�ls_g�
();

249 
th_�gs
->
di�_glob�s
 = 
	`mp_glob�s_g�
();

252 
th_�gs
->
�ack_size
 = 
th�ad_�ack_size
;

255 
th_�gs
->
fun
 = 
�gs
[0];

258  
	`mp_obj_�w_�t_�om_u�t
(
	`mp_th�ad_���
(
th�ad_��y
, 
th_�gs
, &th_�gs->
�ack_size
));

259 
	}
}

260 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mod_th�ad_��t_�w_th�ad_obj
, 2, 3, 
mod_th�ad_��t_�w_th�ad
);

262 
mp_obj_t
 
	$mod_th�ad_ex�
() {

263 
	`mp_�i�_ty�
(&
mp_ty�_Sy�emEx�
);

264 
	}
}

265 
MP_DEFINE_CONST_FUN_OBJ_0
(
mod_th�ad_ex�_obj
, 
mod_th�ad_ex�
);

267 
mp_obj_t
 
	$mod_th�ad_�lo��_lock
() {

268  
	`MP_OBJ_FROM_PTR
(
	`mp_obj_�w_th�ad_lock
());

269 
	}
}

270 
MP_DEFINE_CONST_FUN_OBJ_0
(
mod_th�ad_�lo��_lock_obj
, 
mod_th�ad_�lo��_lock
);

272 cڡ 
mp_rom_m�_�em_t
 
	gmp_modu�_th�ad_glob�s_�b�
[] = {

273 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR__th�ad
) },

274 { 
MP_ROM_QSTR
(
MP_QSTR_LockTy�
), 
MP_ROM_PTR
(&
mp_ty�_th�ad_lock
) },

275 { 
MP_ROM_QSTR
(
MP_QSTR_g�_id�t
), 
MP_ROM_PTR
(&
mod_th�ad_g�_id�t_obj
) },

276 { 
MP_ROM_QSTR
(
MP_QSTR_�ack_size
), 
MP_ROM_PTR
(&
mod_th�ad_�ack_size_obj
) },

277 { 
MP_ROM_QSTR
(
MP_QSTR_��t_�w_th�ad
), 
MP_ROM_PTR
(&
mod_th�ad_��t_�w_th�ad_obj
) },

278 { 
MP_ROM_QSTR
(
MP_QSTR_ex�
), 
MP_ROM_PTR
(&
mod_th�ad_ex�_obj
) },

279 { 
MP_ROM_QSTR
(
MP_QSTR_�lo��_lock
), 
MP_ROM_PTR
(&
mod_th�ad_�lo��_lock_obj
) },

282 
MP_DEFINE_CONST_DICT
(
mp_modu�_th�ad_glob�s
, 
mp_modu�_th�ad_glob�s_�b�
);

284 cڡ 
mp_obj_modu�_t
 
	gmp_modu�_th�ad
 = {

285 .
ba�
 = { &
mp_ty�_modu�
 },

286 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mp_modu�_th�ad_glob�s
,

289 
MP_REGISTER_MODULE
(
MP_QSTR__th�ad
, 
mp_modu�_th�ad
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpconfig.h

26 #i�de�
MICROPY_INCLUDED_PY_MPCONFIG_H


27 
	#MICROPY_INCLUDED_PY_MPCONFIG_H


	)

32 
	#MICROPY_VERSION_MAJOR
 1

	)

33 
	#MICROPY_VERSION_MINOR
 24

	)

34 
	#MICROPY_VERSION_MICRO
 0

	)

35 
	#MICROPY_VERSION_PRERELEASE
 1

	)

40 
	#MICROPY_MAKE_VERSION
(
maj�
, 
m��
, 
�tch
�(maj� << 16 | m�� << 8 |��ch)

	)

41 
	#MICROPY_VERSION
 
	`MICROPY_MAKE_VERSION
(
MICROPY_VERSION_MAJOR
, 
MICROPY_VERSION_MINOR
, 
MICROPY_VERSION_MICRO
)

	)

46 
	#MICROPY_VERSION_STRING_BASE
 \

47 
	`MP_STRINGIFY
(
MICROPY_VERSION_MAJOR
) "." \

48 
	`MP_STRINGIFY
(
MICROPY_VERSION_MINOR
) "." \

49 
	`MP_STRINGIFY
(
MICROPY_VERSION_MICRO
)

	)

50 #i�
MICROPY_VERSION_PRERELEASE


51 
	#MICROPY_VERSION_STRING
 
MICROPY_VERSION_STRING_BASE
 "-�ev�w"

	)

53 
	#MICROPY_VERSION_STRING
 
MICROPY_VERSION_STRING_BASE


	)

58 #i�de�
MICROPY_PREVIEW_VERSION_2


59 
	#MICROPY_PREVIEW_VERSION_2
 (0)

	)

76 
	#MICROPY_CONFIG_ROM_LEVEL_MINIMUM
 (0)

	)

78 
	#MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES
 (10)

	)

80 
	#MICROPY_CONFIG_ROM_LEVEL_BASIC_FEATURES
 (20)

	)

82 
	#MICROPY_CONFIG_ROM_LEVEL_EXTRA_FEATURES
 (30)

	)

84 
	#MICROPY_CONFIG_ROM_LEVEL_FULL_FEATURES
 (40)

	)

86 
	#MICROPY_CONFIG_ROM_LEVEL_EVERYTHING
 (50)

	)

88 #ifde�
MP_CONFIGFILE


89 #��ud�
MP_CONFIGFILE


91 
	~<mpc�figp�t.h
>

95 #i�de�
MICROPY_CONFIG_ROM_LEVEL


96 
	#MICROPY_CONFIG_ROM_LEVEL
 (
MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES
)

	)

100 
	#MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
 (
MICROPY_CONFIG_ROM_LEVEL
 >�
MICROPY_CONFIG_ROM_LEVEL_CORE_FEATURES
)

	)

101 
	#MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_BASIC_FEATURES
 (
MICROPY_CONFIG_ROM_LEVEL
 >�
MICROPY_CONFIG_ROM_LEVEL_BASIC_FEATURES
)

	)

102 
	#MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
 (
MICROPY_CONFIG_ROM_LEVEL
 >�
MICROPY_CONFIG_ROM_LEVEL_EXTRA_FEATURES
)

	)

103 
	#MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_FULL_FEATURES
 (
MICROPY_CONFIG_ROM_LEVEL
 >�
MICROPY_CONFIG_ROM_LEVEL_FULL_FEATURES
)

	)

104 
	#MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
 (
MICROPY_CONFIG_ROM_LEVEL
 >�
MICROPY_CONFIG_ROM_LEVEL_EVERYTHING
)

	)

117 
	#MICROPY_OBJ_REPR_A
 (0)

	)

124 
	#MICROPY_OBJ_REPR_B
 (1)

	)

137 
	#MICROPY_OBJ_REPR_C
 (2)

	)

151 
	#MICROPY_OBJ_REPR_D
 (3)

	)

153 #i�de�
MICROPY_OBJ_REPR


154 
	#MICROPY_OBJ_REPR
 (
MICROPY_OBJ_REPR_A
)

	)

160 #i�de�
MICROPY_OBJ_IMMEDIATE_OBJS


161 
	#MICROPY_OBJ_IMMEDIATE_OBJS
 (
MICROPY_OBJ_REPR
 !�
MICROPY_OBJ_REPR_D
)

	)

169 #i�de�
MICROPY_BYTES_PER_GC_BLOCK


170 
	#MICROPY_BYTES_PER_GC_BLOCK
 (4 * 
MP_BYTES_PER_OBJ_WORD
)

	)

174 #i�de�
MICROPY_ALLOC_GC_STACK_SIZE


175 
	#MICROPY_ALLOC_GC_STACK_SIZE
 (64)

	)

183 #i�de�
MICROPY_GC_STACK_ENTRY_TYPE


184 
	#MICROPY_GC_STACK_ENTRY_TYPE
 
size_t


	)

193 #i�de�
MICROPY_GC_CONSERVATIVE_CLEAR


194 
	#MICROPY_GC_CONSERVATIVE_CLEAR
 (
MICROPY_ENABLE_GC
)

	)

199 #i�de�
MICROPY_GC_ALLOC_THRESHOLD


200 
	#MICROPY_GC_ALLOC_THRESHOLD
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

207 #i�de�
MICROPY_ALLOC_QSTR_CHUNK_INIT


208 
	#MICROPY_ALLOC_QSTR_CHUNK_INIT
 (128)

	)

212 #i�de�
MICROPY_ALLOC_LEXER_INDENT_INIT


213 
	#MICROPY_ALLOC_LEXER_INDENT_INIT
 (10)

	)

217 #i�de�
MICROPY_ALLOC_LEXEL_INDENT_INC


218 
	#MICROPY_ALLOC_LEXEL_INDENT_INC
 (8)

	)

222 #i�de�
MICROPY_ALLOC_PARSE_RULE_INIT


223 
	#MICROPY_ALLOC_PARSE_RULE_INIT
 (64)

	)

227 #i�de�
MICROPY_ALLOC_PARSE_RULE_INC


228 
	#MICROPY_ALLOC_PARSE_RULE_INC
 (16)

	)

232 #i�de�
MICROPY_ALLOC_PARSE_RESULT_INIT


233 
	#MICROPY_ALLOC_PARSE_RESULT_INIT
 (32)

	)

237 #i�de�
MICROPY_ALLOC_PARSE_RESULT_INC


238 
	#MICROPY_ALLOC_PARSE_RESULT_INC
 (16)

	)

242 #i�de�
MICROPY_ALLOC_PARSE_INTERN_STRING_LEN


243 
	#MICROPY_ALLOC_PARSE_INTERN_STRING_LEN
 (10)

	)

248 #i�de�
MICROPY_ALLOC_PARSE_CHUNK_INIT


249 
	#MICROPY_ALLOC_PARSE_CHUNK_INIT
 (128)

	)

253 #i�de�
MICROPY_ALLOC_SCOPE_ID_INIT


254 
	#MICROPY_ALLOC_SCOPE_ID_INIT
 (4)

	)

258 #i�de�
MICROPY_ALLOC_SCOPE_ID_INC


259 
	#MICROPY_ALLOC_SCOPE_ID_INC
 (6)

	)

264 #i�de�
MICROPY_ALLOC_PATH_MAX


265 
	#MICROPY_ALLOC_PATH_MAX
 (512)

	)

269 #i�de�
MICROPY_MODULE_DICT_SIZE


270 
	#MICROPY_MODULE_DICT_SIZE
 (1)

	)

274 #i�de�
MICROPY_LOADED_MODULES_DICT_SIZE


275 
	#MICROPY_LOADED_MODULES_DICT_SIZE
 (3)

	)

280 #i�de�
MICROPY_MALLOC_USES_ALLOCATED_SIZE


281 
	#MICROPY_MALLOC_USES_ALLOCATED_SIZE
 (0)

	)

287 #i�de�
MICROPY_QSTR_BYTES_IN_LEN


288 
	#MICROPY_QSTR_BYTES_IN_LEN
 (1)

	)

292 #i�de�
MICROPY_QSTR_BYTES_IN_HASH


293 #i�
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES


294 
	#MICROPY_QSTR_BYTES_IN_HASH
 (2)

	)

295 #�i�
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES


296 
	#MICROPY_QSTR_BYTES_IN_HASH
 (1)

	)

298 
	#MICROPY_QSTR_BYTES_IN_HASH
 (0)

	)

304 #i�de�
MICROPY_STACKLESS


305 
	#MICROPY_STACKLESS
 (0)

	)

311 #i�de�
MICROPY_STACKLESS_STRICT


312 
	#MICROPY_STACKLESS_STRICT
 (0)

	)

320 #i�
def�ed
(
MICROPY_NO_ALLOCA
) && MICROPY_NO_ALLOCA

321 #unde�
�lo�


322 
	#�lo�
(
x
�
	`m_m�loc
(x)

	)

329 #i�de�
MICROPY_PERSISTENT_CODE_LOAD


330 
	#MICROPY_PERSISTENT_CODE_LOAD
 (0)

	)

336 #i�de�
MICROPY_PERSISTENT_CODE_SAVE


337 
	#MICROPY_PERSISTENT_CODE_SAVE
 (
MICROPY_PY_SYS_SETTRACE
)

	)

341 #i�de�
MICROPY_PERSISTENT_CODE_SAVE_FILE


342 
	#MICROPY_PERSISTENT_CODE_SAVE_FILE
 (0)

	)

347 #i�de�
MICROPY_PERSISTENT_CODE


348 
	#MICROPY_PERSISTENT_CODE
 (
MICROPY_PERSISTENT_CODE_LOAD
 || 
MICROPY_PERSISTENT_CODE_SAVE
 || 
MICROPY_MODULE_FROZEN_MPY
)

	)

355 #i�de�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


356 
	#MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE
 (
MICROPY_PERSISTENT_CODE
)

	)

360 #i�de�
MICROPY_EMIT_X64


361 
	#MICROPY_EMIT_X64
 (0)

	)

365 #i�de�
MICROPY_EMIT_X86


366 
	#MICROPY_EMIT_X86
 (0)

	)

370 #i�de�
MICROPY_EMIT_THUMB


371 
	#MICROPY_EMIT_THUMB
 (0)

	)

375 #i�de�
MICROPY_EMIT_THUMB_ARMV7M


376 
	#MICROPY_EMIT_THUMB_ARMV7M
 (1)

	)

380 #i�de�
MICROPY_EMIT_INLINE_THUMB


381 
	#MICROPY_EMIT_INLINE_THUMB
 (0)

	)

385 #i�de�
MICROPY_EMIT_INLINE_THUMB_FLOAT


386 
	#MICROPY_EMIT_INLINE_THUMB_FLOAT
 (1)

	)

390 #i�de�
MICROPY_EMIT_ARM


391 
	#MICROPY_EMIT_ARM
 (0)

	)

395 #i�de�
MICROPY_EMIT_XTENSA


396 
	#MICROPY_EMIT_XTENSA
 (0)

	)

400 #i�de�
MICROPY_EMIT_INLINE_XTENSA


401 
	#MICROPY_EMIT_INLINE_XTENSA
 (0)

	)

405 #i�de�
MICROPY_EMIT_XTENSAWIN


406 
	#MICROPY_EMIT_XTENSAWIN
 (0)

	)

410 #i�de�
MICROPY_EMIT_RV32


411 
	#MICROPY_EMIT_RV32
 (0)

	)

415 
	#MICROPY_EMIT_NATIVE
 (
MICROPY_EMIT_X64
 || 
MICROPY_EMIT_X86
 || 
MICROPY_EMIT_THUMB
 || 
MICROPY_EMIT_ARM
 || 
MICROPY_EMIT_XTENSA
 || 
MICROPY_EMIT_XTENSAWIN
 || 
MICROPY_EMIT_RV32
 || 
MICROPY_EMIT_NATIVE_DEBUG
)

	)

420 
	#MICROPY_EMIT_NATIVE_PRELUDE_SEPARATE_FROM_MACHINE_CODE
 (
MICROPY_EMIT_XTENSAWIN
)

	)

423 
	#MICROPY_EMIT_INLINE_ASM
 (
MICROPY_EMIT_INLINE_THUMB
 || 
MICROPY_EMIT_INLINE_XTENSA
)

	)

426 
	#MICROPY_EMIT_MACHINE_CODE
 (
MICROPY_EMIT_NATIVE
 || 
MICROPY_EMIT_INLINE_ASM
)

	)

432 #i�de�
MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE


433 #i�!
MICROPY_EMIT_MACHINE_CODE
 || 
def�ed
(
MP_PLAT_ALLOC_EXEC
�|| def�ed(
MP_PLAT_COMMIT_EXEC
)

434 
	#MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE
 (0)

	)

436 
	#MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE
 (1)

	)

444 #i�de�
MICROPY_ENABLE_COMPILER


445 
	#MICROPY_ENABLE_COMPILER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

450 #i�de�
MICROPY_DYNAMIC_COMPILER


451 
	#MICROPY_DYNAMIC_COMPILER
 (0)

	)

455 #i�de�
MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT


456 
	#MICROPY_COMP_ALLOW_TOP_LEVEL_AWAIT
 (0)

	)

460 #i�de�
MICROPY_COMP_CONST_FOLDING


461 
	#MICROPY_COMP_CONST_FOLDING
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

466 #i�de�
MICROPY_COMP_CONST_TUPLE


467 
	#MICROPY_COMP_CONST_TUPLE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

471 #i�de�
MICROPY_COMP_CONST_LITERAL


472 
	#MICROPY_COMP_CONST_LITERAL
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

476 #i�de�
MICROPY_COMP_MODULE_CONST


477 
	#MICROPY_COMP_MODULE_CONST
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

481 #i�de�
MICROPY_COMP_CONST


482 
	#MICROPY_COMP_CONST
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

487 #i�de�
MICROPY_COMP_DOUBLE_TUPLE_ASSIGN


488 
	#MICROPY_COMP_DOUBLE_TUPLE_ASSIGN
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

493 #i�de�
MICROPY_COMP_TRIPLE_TUPLE_ASSIGN


494 
	#MICROPY_COMP_TRIPLE_TUPLE_ASSIGN
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

499 #i�de�
MICROPY_COMP_RETURN_IF_EXPR


500 
	#MICROPY_COMP_RETURN_IF_EXPR
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

507 #i�de�
MICROPY_MEM_STATS


508 
	#MICROPY_MEM_STATS
 (0)

	)

512 #i�de�
MICROPY_DEBUG_PRINTER


513 
	#MICROPY_DEBUG_PRINTER
 (&
mp_��_��t
)

	)

519 #i�de�
MICROPY_DEBUG_PRINTERS


520 
	#MICROPY_DEBUG_PRINTERS
 (0)

	)

524 #i�de�
MICROPY_DEBUG_VERBOSE


525 
	#MICROPY_DEBUG_VERBOSE
 (0)

	)

529 #i�de�
MICROPY_DEBUG_MP_OBJ_SENTINELS


530 
	#MICROPY_DEBUG_MP_OBJ_SENTINELS
 (0)

	)

534 #i�de�
MICROPY_DEBUG_PARSE_RULE_NAME


535 
	#MICROPY_DEBUG_PARSE_RULE_NAME
 (0)

	)

539 #i�de�
MICROPY_DEBUG_VM_STACK_OVERFLOW


540 
	#MICROPY_DEBUG_VM_STACK_OVERFLOW
 (0)

	)

544 #i�de�
MICROPY_DEBUG_VALGRIND


545 
	#MICROPY_DEBUG_VALGRIND
 (0)

	)

556 #i�de�
MICROPY_OPT_COMPUTED_GOTO


557 
	#MICROPY_OPT_COMPUTED_GOTO
 (0)

	)

562 #i�de�
MICROPY_OPT_LOAD_ATTR_FAST_PATH


563 
	#MICROPY_OPT_LOAD_ATTR_FAST_PATH
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

571 #i�de�
MICROPY_OPT_MAP_LOOKUP_CACHE


572 
	#MICROPY_OPT_MAP_LOOKUP_CACHE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

576 #i�de�
MICROPY_OPT_MAP_LOOKUP_CACHE_SIZE


577 
	#MICROPY_OPT_MAP_LOOKUP_CACHE_SIZE
 (128)

	)

582 #i�de�
MICROPY_OPT_MPZ_BITWISE


583 
	#MICROPY_OPT_MPZ_BITWISE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

588 #i�de�
MICROPY_OPT_MATH_FACTORIAL


589 
	#MICROPY_OPT_MATH_FACTORIAL
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

597 #i�de�
MICROPY_NLR_THUMB_USE_LONG_JUMP


598 
	#MICROPY_NLR_THUMB_USE_LONG_JUMP
 (0)

	)

604 #i�de�
MICROPY_ENABLE_EXTERNAL_IMPORT


605 
	#MICROPY_ENABLE_EXTERNAL_IMPORT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

609 #i�de�
MICROPY_READER_POSIX


610 
	#MICROPY_READER_POSIX
 (0)

	)

614 #i�de�
MICROPY_READER_VFS


615 
	#MICROPY_READER_VFS
 (0)

	)

619 #i�de�
MICROPY_HAS_FILE_READER


620 
	#MICROPY_HAS_FILE_READER
 (
MICROPY_READER_POSIX
 || 
MICROPY_READER_VFS
)

	)

625 #i�de�
MICROPY_VM_HOOK_INIT


626 
	#MICROPY_VM_HOOK_INIT


	)

630 #i�de�
MICROPY_VM_HOOK_LOOP


631 
	#MICROPY_VM_HOOK_LOOP


	)

635 #i�de�
MICROPY_VM_HOOK_RETURN


636 
	#MICROPY_VM_HOOK_RETURN


	)

641 #i�de�
MICROPY_SCHED_HOOK_SCHEDULED


642 
	#MICROPY_SCHED_HOOK_SCHEDULED


	)

646 #i�de�
MICROPY_ENABLE_GC


647 
	#MICROPY_ENABLE_GC
 (0)

	)

651 #i�de�
MICROPY_GC_SPLIT_HEAP


652 
	#MICROPY_GC_SPLIT_HEAP
 (0)

	)

656 #i�de�
MICROPY_GC_SPLIT_HEAP_AUTO


657 
	#MICROPY_GC_SPLIT_HEAP_AUTO
 (0)

	)

662 #i�de�
MICROPY_GC_HOOK_LOOP


663 
	#MICROPY_GC_HOOK_LOOP
(
i
)

	)

667 #i�de�
MICROPY_TRACKED_ALLOC


668 
	#MICROPY_TRACKED_ALLOC
 (0)

	)

672 #i�de�
MICROPY_ENABLE_FINALISER


673 
	#MICROPY_ENABLE_FINALISER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

678 #i�de�
MICROPY_ENABLE_PYSTACK


679 
	#MICROPY_ENABLE_PYSTACK
 (0)

	)

683 #i�de�
MICROPY_PYSTACK_ALIGN


684 
	#MICROPY_PYSTACK_ALIGN
 (8)

	)

689 #i�de�
MICROPY_STACK_CHECK


690 
	#MICROPY_STACK_CHECK
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

696 #i�de�
MICROPY_STACK_CHECK_MARGIN


697 
	#MICROPY_STACK_CHECK_MARGIN
 (0)

	)

701 #i�de�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


702 
	#MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
 (0)

	)

704 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


705 #i�de�
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE


706 
	#MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 (0)

709 

	)

711 #i�de�
MICROPY_KBD_EXCEPTION


712 
	#MICROPY_KBD_EXCEPTION
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

717 #i�de�
MICROPY_ASYNC_KBD_INTR


718 
	#MICROPY_ASYNC_KBD_INTR
 (0)

	)

722 #i�de�
MICROPY_HELPER_REPL


723 
	#MICROPY_HELPER_REPL
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

727 #i�de�
MICROPY_REPL_INFO


728 
	#MICROPY_REPL_INFO
 (0)

	)

732 #i�de�
MICROPY_REPL_EMACS_KEYS


733 
	#MICROPY_REPL_EMACS_KEYS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

739 #i�de�
MICROPY_REPL_EMACS_WORDS_MOVE


740 
	#MICROPY_REPL_EMACS_WORDS_MOVE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

747 #i�de�
MICROPY_REPL_EMACS_EXTRA_WORDS_MOVE


748 
	#MICROPY_REPL_EMACS_EXTRA_WORDS_MOVE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

752 #i�de�
MICROPY_REPL_AUTO_INDENT


753 
	#MICROPY_REPL_AUTO_INDENT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

757 #i�de�
MICROPY_REPL_EVENT_DRIVEN


758 
	#MICROPY_REPL_EVENT_DRIVEN
 (0)

	)

762 #i�de�
MICROPY_READLINE_HISTORY_SIZE


763 
	#MICROPY_READLINE_HISTORY_SIZE
 (8)

	)

767 #i�de�
MICROPY_HELPER_LEXER_UNIX


768 
	#MICROPY_HELPER_LEXER_UNIX
 (0)

	)

772 
	#MICROPY_LONGINT_IMPL_NONE
 (0)

	)

773 
	#MICROPY_LONGINT_IMPL_LONGLONG
 (1)

	)

774 
	#MICROPY_LONGINT_IMPL_MPZ
 (2)

	)

776 #i�de�
MICROPY_LONGINT_IMPL


777 
	#MICROPY_LONGINT_IMPL
 (
MICROPY_LONGINT_IMPL_NONE
)

	)

780 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


781 
	tmp_l�g�t_im�_t
;

786 #i�de�
MICROPY_ENABLE_SOURCE_LINE


787 
	#MICROPY_ENABLE_SOURCE_LINE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

791 #i�de�
MICROPY_ENABLE_DOC_STRING


792 
	#MICROPY_ENABLE_DOC_STRING
 (0)

	)

796 
	#MICROPY_ERROR_REPORTING_NONE
 (0)

	)

798 
	#MICROPY_ERROR_REPORTING_TERSE
 (1)

	)

800 
	#MICROPY_ERROR_REPORTING_NORMAL
 (2)

	)

802 
	#MICROPY_ERROR_REPORTING_DETAILED
 (3)

	)

804 #i�de�
MICROPY_ERROR_REPORTING


805 #i�
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_FULL_FEATURES


806 
	#MICROPY_ERROR_REPORTING
 (
MICROPY_ERROR_REPORTING_DETAILED
)

	)

807 #�i�
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES


808 
	#MICROPY_ERROR_REPORTING
 (
MICROPY_ERROR_REPORTING_NORMAL
)

	)

810 
	#MICROPY_ERROR_REPORTING
 (
MICROPY_ERROR_REPORTING_TERSE
)

	)

815 #i�de�
MICROPY_WARNINGS


816 
	#MICROPY_WARNINGS
 (0)

	)

820 #i�de�
MICROPY_WARNINGS_CATEGORY


821 
	#MICROPY_WARNINGS_CATEGORY
 (0)

	)

825 #i�de�
MICROPY_ERROR_PRINTER


826 
	#MICROPY_ERROR_PRINTER
 (&
mp_��_��t
)

	)

830 
	#MICROPY_FLOAT_IMPL_NONE
 (0)

	)

831 
	#MICROPY_FLOAT_IMPL_FLOAT
 (1)

	)

832 
	#MICROPY_FLOAT_IMPL_DOUBLE
 (2)

	)

834 #i�de�
MICROPY_FLOAT_IMPL


835 
	#MICROPY_FLOAT_IMPL
 (
MICROPY_FLOAT_IMPL_NONE
)

	)

838 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


839 
	#MICROPY_PY_BUILTINS_FLOAT
 (1)

	)

840 
	#MICROPY_FLOAT_CONST
(
x
�x##
F


	)

841 
	#MICROPY_FLOAT_C_FUN
(
fun
�fun##
f


	)

842 
	tmp_��t_t
;

843 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


844 
	#MICROPY_PY_BUILTINS_FLOAT
 (1)

	)

845 
	#MICROPY_FLOAT_CONST
(
x
�
	)
x

846 
	#MICROPY_FLOAT_C_FUN
(
fun
�
	)
fun

847 
	tmp_��t_t
;

849 
	#MICROPY_PY_BUILTINS_FLOAT
 (0)

	)

852 #i�de�
MICROPY_PY_BUILTINS_COMPLEX


853 
	#MICROPY_PY_BUILTINS_COMPLEX
 (
MICROPY_PY_BUILTINS_FLOAT
)

	)

857 #i�de�
MICROPY_FLOAT_USE_NATIVE_FLT16


858 #ifde�
__FLT16_MAX__


859 
	#MICROPY_FLOAT_USE_NATIVE_FLT16
 (1)

	)

861 
	#MICROPY_FLOAT_USE_NATIVE_FLT16
 (0)

	)

867 #i�de�
MICROPY_FLOAT_HIGH_QUALITY_HASH


868 
	#MICROPY_FLOAT_HIGH_QUALITY_HASH
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

875 #i�de�
MICROPY_CPYTHON_COMPAT


876 
	#MICROPY_CPYTHON_COMPAT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

884 #i�de�
MICROPY_FULL_CHECKS


885 
	#MICROPY_FULL_CHECKS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

889 #i�de�
MICROPY_STREAMS_NON_BLOCK


890 
	#MICROPY_STREAMS_NON_BLOCK
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

895 #i�de�
MICROPY_STREAMS_POSIX_API


896 
	#MICROPY_STREAMS_POSIX_API
 (0)

	)

901 #i�de�
MICROPY_MODULE_ATTR_DELEGATION


902 
	#MICROPY_MODULE_ATTR_DELEGATION
 (
MICROPY_PY_SYS_ATTR_DELEGATION
 || 
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

908 #i�de�
MICROPY_MODULE_BUILTIN_INIT


909 
	#MICROPY_MODULE_BUILTIN_INIT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

922 #i�de�
MICROPY_MODULE_BUILTIN_SUBPACKAGES


923 
	#MICROPY_MODULE_BUILTIN_SUBPACKAGES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

927 #i�de�
MICROPY_MODULE_GETATTR


928 
	#MICROPY_MODULE_GETATTR
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

933 #i�de�
MICROPY_MODULE_OVERRIDE_MAIN_IMPORT


934 
	#MICROPY_MODULE_OVERRIDE_MAIN_IMPORT
 (0)

	)

938 #i�de�
MICROPY_MODULE_FROZEN_STR


939 
	#MICROPY_MODULE_FROZEN_STR
 (0)

	)

943 #i�de�
MICROPY_MODULE_FROZEN_MPY


944 
	#MICROPY_MODULE_FROZEN_MPY
 (0)

	)

948 #i�de�
MICROPY_MODULE_FROZEN


949 
	#MICROPY_MODULE_FROZEN
 (
MICROPY_MODULE_FROZEN_STR
 || 
MICROPY_MODULE_FROZEN_MPY
)

	)

953 #i�de�
MICROPY_CAN_OVERRIDE_BUILTINS


954 
	#MICROPY_CAN_OVERRIDE_BUILTINS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

962 #i�de�
MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG


963 
	#MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

967 #i�de�
MICROPY_USE_INTERNAL_ERRNO


968 
	#MICROPY_USE_INTERNAL_ERRNO
 (0)

	)

972 #i�de�
MICROPY_USE_INTERNAL_PRINTF


973 
	#MICROPY_USE_INTERNAL_PRINTF
 (1)

	)

977 #i�de�
MICROPY_INTERNAL_PRINTF_PRINTER


978 
	#MICROPY_INTERNAL_PRINTF_PRINTER
 (&
mp_��_��t
)

	)

982 #i�de�
MICROPY_ENABLE_VM_ABORT


983 
	#MICROPY_ENABLE_VM_ABORT
 (0)

	)

987 #i�de�
MICROPY_ENABLE_SCHEDULER


988 
	#MICROPY_ENABLE_SCHEDULER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

992 #i�de�
MICROPY_SCHEDULER_STATIC_NODES


993 
	#MICROPY_SCHEDULER_STATIC_NODES
 (0)

	)

997 #i�de�
MICROPY_SCHEDULER_DEPTH


998 
	#MICROPY_SCHEDULER_DEPTH
 (4)

	)

1002 #i�de�
MICROPY_VFS


1003 
	#MICROPY_VFS
 (0)

	)

1007 #i�de�
MICROPY_VFS_POSIX


1008 
	#MICROPY_VFS_POSIX
 (0)

	)

1012 #i�de�
MICROPY_VFS_FAT


1013 
	#MICROPY_VFS_FAT
 (0)

	)

1017 #i�de�
MICROPY_VFS_LFS1


1018 
	#MICROPY_VFS_LFS1
 (0)

	)

1022 #i�de�
MICROPY_VFS_LFS2


1023 
	#MICROPY_VFS_LFS2
 (0)

	)

1032 #i�de�
MICROPY_MULTIPLE_INHERITANCE


1033 
	#MICROPY_MULTIPLE_INHERITANCE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1037 #i�de�
MICROPY_PY_FUNCTION_ATTRS


1038 
	#MICROPY_PY_FUNCTION_ATTRS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1044 #i�de�
MICROPY_PY_DESCRIPTORS


1045 
	#MICROPY_PY_DESCRIPTORS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1051 #i�de�
MICROPY_PY_DELATTR_SETATTR


1052 
	#MICROPY_PY_DELATTR_SETATTR
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1056 #i�de�
MICROPY_PY_ASYNC_AWAIT


1057 
	#MICROPY_PY_ASYNC_AWAIT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1061 #i�de�
MICROPY_PY_FSTRINGS


1062 
	#MICROPY_PY_FSTRINGS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1066 #i�de�
MICROPY_PY_ASSIGN_EXPR


1067 
	#MICROPY_PY_ASSIGN_EXPR
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1075 #i�de�
MICROPY_PY_GENERATOR_PEND_THROW


1076 
	#MICROPY_PY_GENERATOR_PEND_THROW
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1080 #i�de�
MICROPY_PY_STR_BYTES_CMP_WARN


1081 
	#MICROPY_PY_STR_BYTES_CMP_WARN
 (0)

	)

1085 #i�de�
MICROPY_PY_BUILTINS_BYTES_HEX


1086 
	#MICROPY_PY_BUILTINS_BYTES_HEX
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1090 #i�de�
MICROPY_PY_BUILTINS_STR_UNICODE


1091 
	#MICROPY_PY_BUILTINS_STR_UNICODE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1095 #i�de�
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


1096 
	#MICROPY_PY_BUILTINS_STR_UNICODE_CHECK
 (
MICROPY_PY_BUILTINS_STR_UNICODE
)

	)

1100 #i�de�
MICROPY_PY_BUILTINS_STR_CENTER


1101 
	#MICROPY_PY_BUILTINS_STR_CENTER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1105 #i�de�
MICROPY_PY_BUILTINS_STR_COUNT


1106 
	#MICROPY_PY_BUILTINS_STR_COUNT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1110 #i�de�
MICROPY_PY_BUILTINS_STR_OP_MODULO


1111 
	#MICROPY_PY_BUILTINS_STR_OP_MODULO
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1115 #i�de�
MICROPY_PY_BUILTINS_STR_PARTITION


1116 
	#MICROPY_PY_BUILTINS_STR_PARTITION
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1120 #i�de�
MICROPY_PY_BUILTINS_STR_SPLITLINES


1121 
	#MICROPY_PY_BUILTINS_STR_SPLITLINES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1125 #i�de�
MICROPY_PY_BUILTINS_BYTEARRAY


1126 
	#MICROPY_PY_BUILTINS_BYTEARRAY
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1130 #i�de�
MICROPY_PY_BUILTINS_DICT_FROMKEYS


1131 
	#MICROPY_PY_BUILTINS_DICT_FROMKEYS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1135 #i�de�
MICROPY_PY_BUILTINS_MEMORYVIEW


1136 
	#MICROPY_PY_BUILTINS_MEMORYVIEW
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1140 #i�de�
MICROPY_PY_BUILTINS_MEMORYVIEW_ITEMSIZE


1141 
	#MICROPY_PY_BUILTINS_MEMORYVIEW_ITEMSIZE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1145 #i�de�
MICROPY_PY_BUILTINS_SET


1146 
	#MICROPY_PY_BUILTINS_SET
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1150 #i�de�
MICROPY_PY_BUILTINS_SLICE


1151 
	#MICROPY_PY_BUILTINS_SLICE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1156 #i�de�
MICROPY_PY_BUILTINS_SLICE_ATTRS


1157 
	#MICROPY_PY_BUILTINS_SLICE_ATTRS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1161 #i�de�
MICROPY_PY_BUILTINS_SLICE_INDICES


1162 
	#MICROPY_PY_BUILTINS_SLICE_INDICES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1166 #i�de�
MICROPY_PY_BUILTINS_FROZENSET


1167 
	#MICROPY_PY_BUILTINS_FROZENSET
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1171 #i�de�
MICROPY_PY_BUILTINS_PROPERTY


1172 
	#MICROPY_PY_BUILTINS_PROPERTY
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1177 #i�de�
MICROPY_PY_BUILTINS_RANGE_ATTRS


1178 
	#MICROPY_PY_BUILTINS_RANGE_ATTRS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1185 #i�de�
MICROPY_PY_BUILTINS_RANGE_BINOP


1186 
	#MICROPY_PY_BUILTINS_RANGE_BINOP
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1190 #i�de�
MICROPY_PY_BUILTINS_NEXT2


1191 
	#MICROPY_PY_BUILTINS_NEXT2
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1195 #i�de�
MICROPY_PY_BUILTINS_ROUND_INT


1196 
	#MICROPY_PY_BUILTINS_ROUND_INT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1204 #i�de�
MICROPY_PY_ALL_SPECIAL_METHODS


1205 
	#MICROPY_PY_ALL_SPECIAL_METHODS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1210 #i�de�
MICROPY_PY_ALL_INPLACE_SPECIAL_METHODS


1211 
	#MICROPY_PY_ALL_INPLACE_SPECIAL_METHODS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1217 #i�de�
MICROPY_PY_REVERSE_SPECIAL_METHODS


1218 
	#MICROPY_PY_REVERSE_SPECIAL_METHODS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1222 #i�de�
MICROPY_PY_BUILTINS_COMPILE


1223 
	#MICROPY_PY_BUILTINS_COMPILE
 (
MICROPY_ENABLE_COMPILER
 && 
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1227 #i�de�
MICROPY_PY_BUILTINS_ENUMERATE


1228 
	#MICROPY_PY_BUILTINS_ENUMERATE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1233 #i�de�
MICROPY_PY_BUILTINS_EVAL_EXEC


1234 
	#MICROPY_PY_BUILTINS_EVAL_EXEC
 (
MICROPY_ENABLE_COMPILER
)

	)

1238 #i�de�
MICROPY_PY_BUILTINS_EXECFILE


1239 
	#MICROPY_PY_BUILTINS_EXECFILE
 (
MICROPY_ENABLE_COMPILER
 && 
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1243 #i�de�
MICROPY_PY_BUILTINS_FILTER


1244 
	#MICROPY_PY_BUILTINS_FILTER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1248 #i�de�
MICROPY_PY_BUILTINS_REVERSED


1249 
	#MICROPY_PY_BUILTINS_REVERSED
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1253 #i�de�
MICROPY_PY_BUILTINS_NOTIMPLEMENTED


1254 
	#MICROPY_PY_BUILTINS_NOTIMPLEMENTED
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1259 #i�de�
MICROPY_PY_BUILTINS_INPUT


1260 
	#MICROPY_PY_BUILTINS_INPUT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1264 #i�de�
MICROPY_PY_BUILTINS_MIN_MAX


1265 
	#MICROPY_PY_BUILTINS_MIN_MAX
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1269 #i�de�
MICROPY_PY_BUILTINS_POW3


1270 
	#MICROPY_PY_BUILTINS_POW3
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1274 #i�de�
MICROPY_PY_BUILTINS_HELP


1275 
	#MICROPY_PY_BUILTINS_HELP
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1280 #i�de�
MICROPY_PY_BUILTINS_HELP_TEXT


1281 
	#MICROPY_PY_BUILTINS_HELP_TEXT
 
mp_h�p_de�u�_�xt


	)

1285 #i�de�
MICROPY_PY_BUILTINS_HELP_MODULES


1286 
	#MICROPY_PY_BUILTINS_HELP_MODULES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1290 #i�de�
MICROPY_PY___FILE__


1291 
	#MICROPY_PY___FILE__
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1295 #i�de�
MICROPY_PY_MICROPYTHON_MEM_INFO


1296 
	#MICROPY_PY_MICROPYTHON_MEM_INFO
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1300 #i�de�
MICROPY_PY_MICROPYTHON_STACK_USE


1301 
	#MICROPY_PY_MICROPYTHON_STACK_USE
 (
MICROPY_PY_MICROPYTHON_MEM_INFO
)

	)

1305 #i�de�
MICROPY_PY_MICROPYTHON_HEAP_LOCKED


1306 
	#MICROPY_PY_MICROPYTHON_HEAP_LOCKED
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1312 #i�de�
MICROPY_PY_ARRAY


1313 
	#MICROPY_PY_ARRAY
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1318 #i�de�
MICROPY_PY_ARRAY_SLICE_ASSIGN


1319 
	#MICROPY_PY_ARRAY_SLICE_ASSIGN
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1324 #i�de�
MICROPY_PY_ATTRTUPLE


1325 
	#MICROPY_PY_ATTRTUPLE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1329 #i�de�
MICROPY_PY_COLLECTIONS


1330 
	#MICROPY_PY_COLLECTIONS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1334 #i�de�
MICROPY_PY_COLLECTIONS_DEQUE


1335 
	#MICROPY_PY_COLLECTIONS_DEQUE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1339 #i�de�
MICROPY_PY_COLLECTIONS_DEQUE_ITER


1340 
	#MICROPY_PY_COLLECTIONS_DEQUE_ITER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1344 #i�de�
MICROPY_PY_COLLECTIONS_DEQUE_SUBSCR


1345 
	#MICROPY_PY_COLLECTIONS_DEQUE_SUBSCR
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1349 #i�de�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


1350 
	#MICROPY_PY_COLLECTIONS_ORDEREDDICT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1354 #i�de�
MICROPY_PY_COLLECTIONS_NAMEDTUPLE__ASDICT


1355 
	#MICROPY_PY_COLLECTIONS_NAMEDTUPLE__ASDICT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1359 #i�de�
MICROPY_PY_MATH


1360 
	#MICROPY_PY_MATH
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1364 #i�de�
MICROPY_PY_MATH_CONSTANTS


1365 
	#MICROPY_PY_MATH_CONSTANTS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1369 #i�de�
MICROPY_PY_MATH_SPECIAL_FUNCTIONS


1370 
	#MICROPY_PY_MATH_SPECIAL_FUNCTIONS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1374 #i�de�
MICROPY_PY_MATH_FACTORIAL


1375 
	#MICROPY_PY_MATH_FACTORIAL
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1379 #i�de�
MICROPY_PY_MATH_ISCLOSE


1380 
	#MICROPY_PY_MATH_ISCLOSE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1384 #i�de�
MICROPY_PY_MATH_ATAN2_FIX_INFNAN


1385 
	#MICROPY_PY_MATH_ATAN2_FIX_INFNAN
 (0)

	)

1389 #i�de�
MICROPY_PY_MATH_FMOD_FIX_INFNAN


1390 
	#MICROPY_PY_MATH_FMOD_FIX_INFNAN
 (0)

	)

1394 #i�de�
MICROPY_PY_MATH_MODF_FIX_NEGZERO


1395 
	#MICROPY_PY_MATH_MODF_FIX_NEGZERO
 (0)

	)

1399 #i�de�
MICROPY_PY_MATH_POW_FIX_NAN


1400 
	#MICROPY_PY_MATH_POW_FIX_NAN
 (0)

	)

1404 #i�de�
MICROPY_PY_MATH_GAMMA_FIX_NEGINF


1405 
	#MICROPY_PY_MATH_GAMMA_FIX_NEGINF
 (0)

	)

1409 #i�de�
MICROPY_PY_CMATH


1410 
	#MICROPY_PY_CMATH
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1414 #i�de�
MICROPY_PY_MICROPYTHON


1415 
	#MICROPY_PY_MICROPYTHON
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1419 #i�de�
MICROPY_PY_GC


1420 
	#MICROPY_PY_GC
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1424 #i�de�
MICROPY_PY_GC_COLLECT_RETVAL


1425 
	#MICROPY_PY_GC_COLLECT_RETVAL
 (0)

	)

1429 #i�de�
MICROPY_PY_IO


1430 
	#MICROPY_PY_IO
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1434 #i�de�
MICROPY_PY_IO_IOBASE


1435 
	#MICROPY_PY_IO_IOBASE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1439 #i�de�
MICROPY_PY_IO_BYTESIO


1440 
	#MICROPY_PY_IO_BYTESIO
 (1)

	)

1444 #i�de�
MICROPY_PY_IO_BUFFEREDWRITER


1445 
	#MICROPY_PY_IO_BUFFEREDWRITER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1449 #i�de�
MICROPY_PY_STRUCT


1450 
	#MICROPY_PY_STRUCT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1454 #i�de�
MICROPY_PY_SYS


1455 
	#MICROPY_PY_SYS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
)

	)

1459 #i�de�
MICROPY_PY_SYS_PATH_ARGV_DEFAULTS


1460 
	#MICROPY_PY_SYS_PATH_ARGV_DEFAULTS
 (
MICROPY_PY_SYS
)

	)

1464 #i�de�
MICROPY_PY_SYS_MAXSIZE


1465 
	#MICROPY_PY_SYS_MAXSIZE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1469 #i�de�
MICROPY_PY_SYS_MODULES


1470 
	#MICROPY_PY_SYS_MODULES
 (1)

	)

1475 #i�de�
MICROPY_PY_SYS_EXC_INFO


1476 
	#MICROPY_PY_SYS_EXC_INFO
 (0)

	)

1482 #i�de�
MICROPY_PY_SYS_EXECUTABLE


1483 
	#MICROPY_PY_SYS_EXECUTABLE
 (0)

	)

1487 #i�de�
MICROPY_PY_SYS_INTERN


1488 
	#MICROPY_PY_SYS_INTERN
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1492 #i�de�
MICROPY_PY_SYS_EXIT


1493 
	#MICROPY_PY_SYS_EXIT
 (1)

	)

1497 #i�de�
MICROPY_PY_SYS_ATEXIT


1498 
	#MICROPY_PY_SYS_ATEXIT
 (0)

	)

1506 #i�de�
MICROPY_PY_SYS_PATH


1507 
	#MICROPY_PY_SYS_PATH
 (1)

	)

1514 #i�de�
MICROPY_PY_SYS_ARGV


1515 
	#MICROPY_PY_SYS_ARGV
 (1)

	)

1519 #i�de�
MICROPY_PY_SYS_PS1_PS2


1520 
	#MICROPY_PY_SYS_PS1_PS2
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1524 #i�de�
MICROPY_PY_SYS_SETTRACE


1525 
	#MICROPY_PY_SYS_SETTRACE
 (0)

	)

1529 #i�de�
MICROPY_PY_SYS_GETSIZEOF


1530 
	#MICROPY_PY_SYS_GETSIZEOF
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1534 #i�de�
MICROPY_PY_SYS_STDFILES


1535 
	#MICROPY_PY_SYS_STDFILES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1540 #i�de�
MICROPY_PY_SYS_STDIO_BUFFER


1541 
	#MICROPY_PY_SYS_STDIO_BUFFER
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1545 #i�de�
MICROPY_PY_SYS_TRACEBACKLIMIT


1546 
	#MICROPY_PY_SYS_TRACEBACKLIMIT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1551 #i�de�
MICROPY_PY_SYS_ATTR_DELEGATION


1552 
	#MICROPY_PY_SYS_ATTR_DELEGATION
 (
MICROPY_PY_SYS_PATH
 || 
MICROPY_PY_SYS_PS1_PS2
 || 
MICROPY_PY_SYS_TRACEBACKLIMIT
)

	)

1556 #i�de�
MICROPY_PY_ERRNO


1557 
	#MICROPY_PY_ERRNO
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1561 #i�de�
MICROPY_PY_ERRNO_ERRORCODE


1562 
	#MICROPY_PY_ERRNO_ERRORCODE
 (1)

	)

1566 #i�de�
MICROPY_PY_SELECT


1567 
	#MICROPY_PY_SELECT
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1571 #i�de�
MICROPY_PY_SELECT_POSIX_OPTIMISATIONS


1572 
	#MICROPY_PY_SELECT_POSIX_OPTIMISATIONS
 (0)

	)

1578 #i�de�
MICROPY_PY_SELECT_SELECT


1579 
	#MICROPY_PY_SELECT_SELECT
 (1)

	)

1583 #i�de�
MICROPY_PY_TIME


1584 
	#MICROPY_PY_TIME
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_BASIC_FEATURES
)

	)

1588 #i�de�
MICROPY_PY_TIME_GMTIME_LOCALTIME_MKTIME


1589 
	#MICROPY_PY_TIME_GMTIME_LOCALTIME_MKTIME
 (0)

	)

1593 #i�de�
MICROPY_PY_TIME_TIME_TIME_NS


1594 
	#MICROPY_PY_TIME_TIME_TIME_NS
 (0)

	)

1603 #i�de�
MICROPY_PY_TIME_TICKS_PERIOD


1604 
	#MICROPY_PY_TIME_TICKS_PERIOD
 (
MP_SMALL_INT_POSITIVE_MASK
 + 1)

	)

1608 #i�de�
MICROPY_PY_THREAD


1609 
	#MICROPY_PY_THREAD
 (0)

	)

1614 #i�de�
MICROPY_PY_THREAD_GIL


1615 
	#MICROPY_PY_THREAD_GIL
 (
MICROPY_PY_THREAD
)

	)

1620 #i�de�
MICROPY_PY_THREAD_GIL_VM_DIVISOR


1621 
	#MICROPY_PY_THREAD_GIL_VM_DIVISOR
 (32)

	)

1626 #i�de�
MICROPY_PY_ASYNCIO


1627 
	#MICROPY_PY_ASYNCIO
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1630 #i�de�
MICROPY_PY_ASYNCIO_TASK_QUEUE_PUSH_CALLBACK


1631 
	#MICROPY_PY_ASYNCIO_TASK_QUEUE_PUSH_CALLBACK
 (0)

	)

1634 #i�de�
MICROPY_PY_UCTYPES


1635 
	#MICROPY_PY_UCTYPES
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1640 #i�de�
MICROPY_PY_UCTYPES_NATIVE_C_TYPES


1641 
	#MICROPY_PY_UCTYPES_NATIVE_C_TYPES
 (1)

	)

1645 #i�de�
MICROPY_PY_DEFLATE


1646 
	#MICROPY_PY_DEFLATE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1650 #i�de�
MICROPY_PY_DEFLATE_COMPRESS


1651 
	#MICROPY_PY_DEFLATE_COMPRESS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_FULL_FEATURES
)

	)

1654 #i�de�
MICROPY_PY_JSON


1655 
	#MICROPY_PY_JSON
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1659 #i�de�
MICROPY_PY_JSON_SEPARATORS


1660 
	#MICROPY_PY_JSON_SEPARATORS
 (1)

	)

1663 #i�de�
MICROPY_PY_OS


1664 
	#MICROPY_PY_OS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1667 #i�de�
MICROPY_PY_OS_STATVFS


1668 
	#MICROPY_PY_OS_STATVFS
 (
MICROPY_PY_OS
)

	)

1671 #i�de�
MICROPY_PY_RE


1672 
	#MICROPY_PY_RE
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1675 #i�de�
MICROPY_PY_RE_DEBUG


1676 
	#MICROPY_PY_RE_DEBUG
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1679 #i�de�
MICROPY_PY_RE_MATCH_GROUPS


1680 
	#MICROPY_PY_RE_MATCH_GROUPS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1683 #i�de�
MICROPY_PY_RE_MATCH_SPAN_START_END


1684 
	#MICROPY_PY_RE_MATCH_SPAN_START_END
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EVERYTHING
)

	)

1687 #i�de�
MICROPY_PY_RE_SUB


1688 
	#MICROPY_PY_RE_SUB
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1691 #i�de�
MICROPY_PY_HEAPQ


1692 
	#MICROPY_PY_HEAPQ
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1695 #i�de�
MICROPY_PY_HASHLIB


1696 
	#MICROPY_PY_HASHLIB
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1699 #i�de�
MICROPY_PY_HASHLIB_MD5


1700 
	#MICROPY_PY_HASHLIB_MD5
 (0)

	)

1703 #i�de�
MICROPY_PY_HASHLIB_SHA1


1704 
	#MICROPY_PY_HASHLIB_SHA1
 (0)

	)

1707 #i�de�
MICROPY_PY_HASHLIB_SHA256


1708 
	#MICROPY_PY_HASHLIB_SHA256
 (1)

	)

1711 #i�de�
MICROPY_PY_CRYPTOLIB


1712 
	#MICROPY_PY_CRYPTOLIB
 (0)

	)

1716 #i�de�
MICROPY_PY_CRYPTOLIB_CTR


1717 
	#MICROPY_PY_CRYPTOLIB_CTR
 (0)

	)

1720 #i�de�
MICROPY_PY_CRYPTOLIB_CONSTS


1721 
	#MICROPY_PY_CRYPTOLIB_CONSTS
 (0)

	)

1724 #i�de�
MICROPY_PY_BINASCII


1725 
	#MICROPY_PY_BINASCII
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1729 #i�de�
MICROPY_PY_BINASCII_CRC32


1730 
	#MICROPY_PY_BINASCII_CRC32
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1733 #i�de�
MICROPY_PY_RANDOM


1734 
	#MICROPY_PY_RANDOM
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1738 #i�de�
MICROPY_PY_RANDOM_EXTRA_FUNCS


1739 
	#MICROPY_PY_RANDOM_EXTRA_FUNCS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1742 #i�de�
MICROPY_PY_MACHINE


1743 
	#MICROPY_PY_MACHINE
 (0)

	)

1747 #i�de�
MICROPY_PY_MACHINE_RESET


1748 
	#MICROPY_PY_MACHINE_RESET
 (0)

	)

1752 #i�de�
MICROPY_PY_MACHINE_FREQ_NUM_ARGS_MAX


1753 
	#MICROPY_PY_MACHINE_FREQ_NUM_ARGS_MAX
 (1)

	)

1757 #i�de�
MICROPY_PY_MACHINE_BITSTREAM


1758 
	#MICROPY_PY_MACHINE_BITSTREAM
 (0)

	)

1762 #i�de�
MICROPY_PY_MACHINE_PULSE


1763 
	#MICROPY_PY_MACHINE_PULSE
 (0)

	)

1767 #i�de�
MICROPY_PY_MACHINE_MEMX


1768 
	#MICROPY_PY_MACHINE_MEMX
 (
MICROPY_PY_MACHINE
)

	)

1772 #i�de�
MICROPY_PY_MACHINE_SIGNAL


1773 
	#MICROPY_PY_MACHINE_SIGNAL
 (
MICROPY_PY_MACHINE
)

	)

1776 #i�de�
MICROPY_PY_MACHINE_I2C


1777 
	#MICROPY_PY_MACHINE_I2C
 (0)

	)

1781 #i�de�
MICROPY_PY_MACHINE_I2C_TRANSFER_WRITE1


1782 
	#MICROPY_PY_MACHINE_I2C_TRANSFER_WRITE1
 (0)

	)

1786 #i�de�
MICROPY_PY_MACHINE_SOFTI2C


1787 
	#MICROPY_PY_MACHINE_SOFTI2C
 (0)

	)

1790 #i�de�
MICROPY_PY_MACHINE_SPI


1791 
	#MICROPY_PY_MACHINE_SPI
 (0)

	)

1795 #i�de�
MICROPY_PY_MACHINE_SOFTSPI


1796 
	#MICROPY_PY_MACHINE_SOFTSPI
 (0)

	)

1800 #i�de�
MICROPY_PY_MACHINE_SPI_MSB


1801 
	#MICROPY_PY_MACHINE_SPI_MSB
 (0)

	)

1802 
	#MICROPY_PY_MACHINE_SPI_LSB
 (1)

	)

1806 #i�de�
MICROPY_PY_MACHINE_TIMER


1807 
	#MICROPY_PY_MACHINE_TIMER
 (0)

	)

1811 #i�de�
MICROPY_PY_SOCKET_LISTEN_BACKLOG_DEFAULT


1812 
	#MICROPY_PY_SOCKET_LISTEN_BACKLOG_DEFAULT
 (2)

	)

1815 #i�de�
MICROPY_PY_SSL


1816 
	#MICROPY_PY_SSL
 (0)

	)

1820 #i�de�
MICROPY_PY_SSL_FINALISER


1821 
	#MICROPY_PY_SSL_FINALISER
 (
MICROPY_ENABLE_FINALISER
)

	)

1825 #i�de�
MICROPY_PY_VFS


1826 
	#MICROPY_PY_VFS
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_CORE_FEATURES
 && 
MICROPY_VFS
)

	)

1829 #i�de�
MICROPY_PY_WEBSOCKET


1830 
	#MICROPY_PY_WEBSOCKET
 (0)

	)

1833 #i�de�
MICROPY_PY_FRAMEBUF


1834 
	#MICROPY_PY_FRAMEBUF
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1837 #i�de�
MICROPY_PY_BTREE


1838 
	#MICROPY_PY_BTREE
 (0)

	)

1842 #i�de�
MICROPY_PY_ONEWIRE


1843 
	#MICROPY_PY_ONEWIRE
 (0)

	)

1847 #i�de�
MICROPY_PY_PLATFORM


1848 
	#MICROPY_PY_PLATFORM
 (
MICROPY_CONFIG_ROM_LEVEL_AT_LEAST_EXTRA_FEATURES
)

	)

1855 #i�de�
MICROPY_PORT_BUILTINS


1856 
	#MICROPY_PORT_BUILTINS


	)

1861 #i�de�
MICROPY_PORT_EXTRA_BUILTINS


1862 
	#MICROPY_PORT_EXTRA_BUILTINS


	)

1866 #i�de�
MICROPY_PORT_CONSTANTS


1867 
	#MICROPY_PORT_CONSTANTS


	)

1873 #i�de�
MICROPY_WRAP_MP_BINARY_OP


1874 
	#MICROPY_WRAP_MP_BINARY_OP
(
f
�
	)
f

1877 #i�de�
MICROPY_WRAP_MP_EXECUTE_BYTECODE


1878 
	#MICROPY_WRAP_MP_EXECUTE_BYTECODE
(
f
�
	)
f

1881 #i�de�
MICROPY_WRAP_MP_LOAD_GLOBAL


1882 
	#MICROPY_WRAP_MP_LOAD_GLOBAL
(
f
�
	)
f

1885 #i�de�
MICROPY_WRAP_MP_LOAD_NAME


1886 
	#MICROPY_WRAP_MP_LOAD_NAME
(
f
�
	)
f

1889 #i�de�
MICROPY_WRAP_MP_MAP_LOOKUP


1890 
	#MICROPY_WRAP_MP_MAP_LOOKUP
(
f
�
	)
f

1893 #i�de�
MICROPY_WRAP_MP_OBJ_GET_TYPE


1894 
	#MICROPY_WRAP_MP_OBJ_GET_TYPE
(
f
�
	)
f

1897 #i�de�
MICROPY_WRAP_MP_SCHED_EXCEPTION


1898 
	#MICROPY_WRAP_MP_SCHED_EXCEPTION
(
f
�
	)
f

1901 #i�de�
MICROPY_WRAP_MP_SCHED_KEYBOARD_INTERRUPT


1902 
	#MICROPY_WRAP_MP_SCHED_KEYBOARD_INTERRUPT
(
f
�
	)
f

1905 #i�de�
MICROPY_WRAP_MP_SCHED_SCHEDULE


1906 
	#MICROPY_WRAP_MP_SCHED_SCHEDULE
(
f
�
	)
f

1909 #i�de�
MICROPY_WRAP_MP_SCHED_VM_ABORT


1910 
	#MICROPY_WRAP_MP_SCHED_VM_ABORT
(
f
�
	)
f

1920 #i�de�
MICROPY_OBJ_BASE_ALIGNMENT


1921 
	#MICROPY_OBJ_BASE_ALIGNMENT


	)

1925 #i�de�
MICROPY_BANNER_NAME_AND_VERSION


1926 #i�
MICROPY_PREVIEW_VERSION_2


1927 
	#MICROPY_BANNER_NAME_AND_VERSION
 "Mi�oPyth� (w�h v2.0��v�w�" 
MICROPY_GIT_TAG
 " o�" 
MICROPY_BUILD_DATE


	)

1929 
	#MICROPY_BANNER_NAME_AND_VERSION
 "Mi�oPyth� " 
MICROPY_GIT_TAG
 " o�" 
MICROPY_BUILD_DATE


	)

1934 #i�de�
MICROPY_BANNER_MACHINE


1935 #ifde�
MICROPY_HW_BOARD_NAME


1936 
	#MICROPY_BANNER_MACHINE
 
MICROPY_HW_BOARD_NAME
 " w�h " 
MICROPY_HW_MCU_NAME


	)

1938 
	#MICROPY_BANNER_MACHINE
 
MICROPY_PY_SYS_PLATFORM
 " [" 
MICROPY_PLATFORM_COMPILER
 "] v�si�"

	)

1943 #i�de�
MP_BYTES_PER_OBJ_WORD


1944 
	#MP_BYTES_PER_OBJ_WORD
 ((
mp_u�t_t
))

	)

1948 #i�de�
MP_BITS_PER_BYTE


1949 
	#MP_BITS_PER_BYTE
 (8)

	)

1952 
	#MP_OBJ_WORD_MSBIT_HIGH
 (((
mp_u�t_t
)1�<< (
MP_BYTES_PER_OBJ_WORD
 * 
MP_BITS_PER_BYTE
 - 1))

	)

1956 #i�
def�ed
(
MP_ENDIANNESS_LITTLE
)

1957 
	#MP_ENDIANNESS_BIG
 (!
MP_ENDIANNESS_LITTLE
)

	)

1958 #�i�
def�ed
(
MP_ENDIANNESS_BIG
)

1959 
	#MP_ENDIANNESS_LITTLE
 (!
MP_ENDIANNESS_BIG
)

	)

1962 #i�
def�ed
(
__BYTE_ORDER__
)

1963 #i�
__BYTE_ORDER__
 =�
__ORDER_LITTLE_ENDIAN__


1964 
	#MP_ENDIANNESS_LITTLE
 (1)

	)

1965 #�i�
__BYTE_ORDER__
 =�
__ORDER_BIG_ENDIAN__


1966 
	#MP_ENDIANNESS_LITTLE
 (0)

	)

1969 
	~<�d�n.h
>

1970 #i�
def�ed
(
__BYTE_ORDER
)

1971 #i�
__BYTE_ORDER
 =�
__LITTLE_ENDIAN


1972 
	#MP_ENDIANNESS_LITTLE
 (1)

	)

1973 #�i�
__BYTE_ORDER
 =�
__BIG_ENDIAN


1974 
	#MP_ENDIANNESS_LITTLE
 (0)

	)

1978 #i�de�
MP_ENDIANNESS_LITTLE


1979 #�r� 
�d��ess
 
n�
 
def�ed
 
�d
 
���
 
d�e�
 
�


1981 
	#MP_ENDIANNESS_BIG
 (!
MP_ENDIANNESS_LITTLE
)

	)

1986 #i�de�
MICROPY_MAKE_POINTER_CALLABLE


1987 
	#MICROPY_MAKE_POINTER_CALLABLE
(
p
��)

	)

1993 #i�de�
MP_PLAT_ALLOC_EXEC


1994 
	#MP_PLAT_ALLOC_EXEC
(
m�_size
, 
�r
, 
size
�d�{ *���
	`m_�w
(
by�
, m�_size); *siz��m�_size; } 0)

	)

1997 #i�de�
MP_PLAT_FREE_EXEC


1998 
	#MP_PLAT_FREE_EXEC
(
�r
, 
size
�
	`m_d�
(
by�
,��, size)

	)

2002 #i�
MICROPY_GC_SPLIT_HEAP_AUTO


2003 #i�de�
MP_PLAT_ALLOC_HEAP


2004 
	#MP_PLAT_ALLOC_HEAP
(
size
�
	`m�loc
(size)

	)

2006 #i�de�
MP_PLAT_FREE_HEAP


2007 
	#MP_PLAT_FREE_HEAP
(
�r
�
	`�
Ռ)

	)

2012 #i�de�
MP_PLAT_PRINT_STRN


2013 
	#MP_PLAT_PRINT_STRN
(
�r
, 
�n
�
	`mp_h�_�dout_tx_��_cooked
(�r,��)

	)

2016 #i�de�
MP_SSIZE_MAX


2017 
	#MP_SSIZE_MAX
 
SSIZE_MAX


	)

2021 #i�de�
INT_FMT


2022 #i�
def�ed
(
__LP64__
)

2024 
	#UINT_FMT
 "%lu"

	)

2025 
	#INT_FMT
 "%ld"

	)

2026 #�i�
def�ed
(
_WIN64
)

2027 
	#UINT_FMT
 "%�u"

	)

2028 
	#INT_FMT
 "%�d"

	)

2031 
	#UINT_FMT
 "%u"

	)

2032 
	#INT_FMT
 "%d"

	)

2037 #i�de�
NORETURN


2038 
	#NORETURN
 
	`__��ibu�__
((
nܑu�
))

	)

2042 #i�de�
MP_WEAK


2043 
	#MP_WEAK
 
	`__��ibu�__
((
w�k
))

	)

2047 #i�de�
MP_NOINLINE


2048 
	#MP_NOINLINE
 
	`__��ibu�__
((
no�l�e
))

	)

2052 #i�de�
MP_ALWAYSINLINE


2053 
	#MP_ALWAYSINLINE
 
	`__��ibu�__
((
�ways_�l�e
))

	)

2057 #i�de�
MP_LIKELY


2058 
	#MP_LIKELY
(
x
�
	`__bu�t�_ex��
((x), 1)

	)

2062 #i�de�
MP_UNLIKELY


2063 
	#MP_UNLIKELY
(
x
�
	`__bu�t�_ex��
((x), 0)

	)

2067 #i�de�
MP_UNREACHABLE


2068 #i�
def�ed
(
__GNUC__
)

2069 
	#MP_UNREACHABLE
 
	`__bu�t�_uėchab�
();

	)

2071 
	#MP_UNREACHABLE
 ;;);

	)

2076 #i�
def�ed
(
__GNUC__
) && __GNUC__ >= 7

2077 
	#MP_FALLTHROUGH
 
	`__��ibu�__
((
��through
));

	)

2079 
	#MP_FALLTHROUGH


	)

2082 #i�de�
MP_HTOBE16


2083 #i�
MP_ENDIANNESS_LITTLE


2084 
	#MP_HTOBE16
(
x
�((
u�t16_t
)((((x�& 0xff�<< 8�| (((x�>> 8�& 0xff)))

	)

2085 
	#MP_BE16TOH
(
x
�
	`MP_HTOBE16
(x)

	)

2087 
	#MP_HTOBE16
(
x
�(x)

	)

2088 
	#MP_BE16TOH
(
x
�(x)

	)

2092 #i�de�
MP_HTOBE32


2093 #i�
MP_ENDIANNESS_LITTLE


2094 
	#MP_HTOBE32
(
x
�((
u�t32_t
)((((x�& 0xff�<< 24�| (((x�& 0xff00�<< 8�| (((x�>> 8�& 0xff00�| (((x�>> 24�& 0xff)))

	)

2095 
	#MP_BE32TOH
(
x
�
	`MP_HTOBE32
(x)

	)

2097 
	#MP_HTOBE32
(
x
�(x)

	)

2098 
	#MP_BE32TOH
(
x
�(x)

	)

2104 #i�
MICROPY_WARNINGS_CATEGORY


2105 #i�de�
MP_WARN_CAT


2106 
	#MP_WARN_CAT
(
x
�#x

	)

2109 #unde�
MP_WARN_CAT


2110 
	#MP_WARN_CAT
(
x
�(
NULL
)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mperrno.h

26 #i�de�
MICROPY_INCLUDED_PY_MPERRNO_H


27 
	#MICROPY_INCLUDED_PY_MPERRNO_H


	)

29 
	~"py/mpc�fig.h
"

31 #i�
MICROPY_USE_INTERNAL_ERRNO


36 
	#MP_EPERM
 (1)

37 
	#MP_ENOENT
 (2)

38 
	#MP_ESRCH
 (3)

39 
	#MP_EINTR
 (4)

40 
	#MP_EIO
 (5)

41 
	#MP_ENXIO
 (6)

42 
	#MP_E2BIG
 (7)

43 
	#MP_ENOEXEC
 (8)

44 
	#MP_EBADF
 (9)

45 
	#MP_ECHILD
 (10)

46 
	#MP_EAGAIN
 (11)

47 
	#MP_ENOMEM
 (12)

48 
	#MP_EACCES
 (13)

49 
	#MP_EFAULT
 (14)

50 
	#MP_ENOTBLK
 (15)

51 
	#MP_EBUSY
 (16)

52 
	#MP_EEXIST
 (17)

53 
	#MP_EXDEV
 (18)

54 
	#MP_ENODEV
 (19)

55 
	#MP_ENOTDIR
 (20)

56 
	#MP_EISDIR
 (21)

57 
	#MP_EINVAL
 (22)

58 
	#MP_ENFILE
 (23)

59 
	#MP_EMFILE
 (24)

60 
	#MP_ENOTTY
 (25)

61 
	#MP_ETXTBSY
 (26)

62 
	#MP_EFBIG
 (27)

63 
	#MP_ENOSPC
 (28)

64 
	#MP_ESPIPE
 (29)

65 
	#MP_EROFS
 (30)

66 
	#MP_EMLINK
 (31)

67 
	#MP_EPIPE
 (32)

68 
	#MP_EDOM
 (33)

69 
	#MP_ERANGE
 (34)

70 
	#MP_EWOULDBLOCK
 
MP_EAGAIN


71 
	#MP_EOPNOTSUPP
 (95)

72 
	#MP_EAFNOSUPPORT
 (97)

73 
	#MP_EADDRINUSE
 (98)

74 
	#MP_ECONNABORTED
 (103)

75 
	#MP_ECONNRESET
 (104)

76 
	#MP_ENOBUFS
 (105)

77 
	#MP_EISCONN
 (106)

78 
	#MP_ENOTCONN
 (107)

79 
	#MP_ETIMEDOUT
 (110)

80 
	#MP_ECONNREFUSED
 (111)

81 
	#MP_EHOSTUNREACH
 (113)

82 
	#MP_EALREADY
 (114)

83 
	#MP_EINPROGRESS
 (115)

84 
	#MP_ECANCELED
 (125)

85 

	)

90 
	~<��o.h
>

92 
	#MP_EPERM
 
EPERM


	)

93 
	#MP_ENOENT
 
ENOENT


	)

94 
	#MP_ESRCH
 
ESRCH


	)

95 
	#MP_EINTR
 
EINTR


	)

96 
	#MP_EIO
 
EIO


	)

97 
	#MP_ENXIO
 
ENXIO


	)

98 
	#MP_E2BIG
 
E2BIG


	)

99 
	#MP_ENOEXEC
 
ENOEXEC


	)

100 
	#MP_EBADF
 
EBADF


	)

101 
	#MP_ECHILD
 
ECHILD


	)

102 
	#MP_EAGAIN
 
EAGAIN


	)

103 
	#MP_ENOMEM
 
ENOMEM


	)

104 
	#MP_EACCES
 
EACCES


	)

105 
	#MP_EFAULT
 
EFAULT


	)

106 
	#MP_ENOTBLK
 
ENOTBLK


	)

107 
	#MP_EBUSY
 
EBUSY


	)

108 
	#MP_EEXIST
 
EEXIST


	)

109 
	#MP_EXDEV
 
EXDEV


	)

110 
	#MP_ENODEV
 
ENODEV


	)

111 
	#MP_ENOTDIR
 
ENOTDIR


	)

112 
	#MP_EISDIR
 
EISDIR


	)

113 
	#MP_EINVAL
 
EINVAL


	)

114 
	#MP_ENFILE
 
ENFILE


	)

115 
	#MP_EMFILE
 
EMFILE


	)

116 
	#MP_ENOTTY
 
ENOTTY


	)

117 
	#MP_ETXTBSY
 
ETXTBSY


	)

118 
	#MP_EFBIG
 
EFBIG


	)

119 
	#MP_ENOSPC
 
ENOSPC


	)

120 
	#MP_ESPIPE
 
ESPIPE


	)

121 
	#MP_EROFS
 
EROFS


	)

122 
	#MP_EMLINK
 
EMLINK


	)

123 
	#MP_EPIPE
 
EPIPE


	)

124 
	#MP_EDOM
 
EDOM


	)

125 
	#MP_ERANGE
 
ERANGE


	)

126 
	#MP_EWOULDBLOCK
 
EWOULDBLOCK


	)

127 
	#MP_EOPNOTSUPP
 
EOPNOTSUPP


	)

128 
	#MP_EAFNOSUPPORT
 
EAFNOSUPPORT


	)

129 
	#MP_EADDRINUSE
 
EADDRINUSE


	)

130 
	#MP_ECONNABORTED
 
ECONNABORTED


	)

131 
	#MP_ECONNRESET
 
ECONNRESET


	)

132 
	#MP_ENOBUFS
 
ENOBUFS


	)

133 
	#MP_EISCONN
 
EISCONN


	)

134 
	#MP_ENOTCONN
 
ENOTCONN


	)

135 
	#MP_ETIMEDOUT
 
ETIMEDOUT


	)

136 
	#MP_ECONNREFUSED
 
ECONNREFUSED


	)

137 
	#MP_EHOSTUNREACH
 
EHOSTUNREACH


	)

138 
	#MP_EALREADY
 
EALREADY


	)

139 
	#MP_EINPROGRESS
 
EINPROGRESS


	)

140 
	#MP_ECANCELED
 
ECANCELED


	)

144 #i�
MICROPY_PY_ERRNO


146 
	~"py/obj.h
"

148 
q�r
 
mp_��o_to_�r
(
mp_obj_t
 
��o_v�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mphal.h

26 #i�de�
MICROPY_INCLUDED_PY_MPHAL_H


27 
	#MICROPY_INCLUDED_PY_MPHAL_H


	)

29 
	~<�d�t.h
>

30 
	~"py/mpc�fig.h
"

32 #ifde�
MICROPY_MPHALPORT_H


33 #��ud�
MICROPY_MPHALPORT_H


35 
	~<mph�p�t.h
>

39 #i�de�
MICROPY_BEGIN_ATOMIC_SECTION


40 
	#MICROPY_BEGIN_ATOMIC_SECTION
(�(0)

	)

42 #i�de�
MICROPY_END_ATOMIC_SECTION


43 
	#MICROPY_END_ATOMIC_SECTION
(
��e
�()(��e)

	)

46 #i�de�
mp_h�_�dio_p�l


47 
u���_t
 
mp_h�_�dio_p�l
(u���_�
p�l_�ags
);

50 #i�de�
mp_h�_�d�_rx_chr


51 
mp_h�_�d�_rx_chr
();

54 #i�de�
mp_h�_�dout_tx_�r


55 
mp_h�_�dout_tx_�r
(cڡ *
�r
);

58 #i�de�
mp_h�_�dout_tx_��


59 
mp_u�t_t
 
mp_h�_�dout_tx_��
(cڡ *
�r
, 
size_t
 
�n
);

62 #i�de�
mp_h�_�dout_tx_��_cooked


63 
mp_h�_�dout_tx_��_cooked
(cڡ *
�r
, 
size_t
 
�n
);

66 #i�de�
mp_h�_d�ay_ms


67 
mp_h�_d�ay_ms
(
mp_u�t_t
 
ms
);

70 #i�de�
mp_h�_d�ay_us


71 
mp_h�_d�ay_us
(
mp_u�t_t
 
us
);

74 #i�de�
mp_h�_ticks_ms


75 
mp_u�t_t
 
mp_h�_ticks_ms
();

78 #i�de�
mp_h�_ticks_us


79 
mp_u�t_t
 
mp_h�_ticks_us
();

82 #i�de�
mp_h�_ticks_�u


83 
mp_u�t_t
 
mp_h�_ticks_�u
();

86 #i�de�
mp_h�_time_ns


88 
u�t64_t
 
mp_h�_time_ns
();

93 #i�de�
mp_h�_p�_obj_t


94 
	#mp_h�_p�_obj_t
 
mp_obj_t


	)

95 
	#mp_h�_g�_p�_obj
(
p�
�՚)

	)

96 
	#mp_h�_p�_�ad
(
p�
�
	`mp_v�tu�_p�_�ad
՚)

	)

97 
	#mp_h�_p�_wr�e
(
p�
, 
v
�
	`mp_v�tu�_p�_wr�e
՚, v)

	)

98 
	~"extmod/v���.h
"

103 #i�de�
MICROPY_INTERNAL_WFE


105 
	#MICROPY_INTERNAL_WFE
(
TIMEOUT_MS
�()0

	)

108 #i�de�
MICROPY_INTERNAL_EVENT_HOOK


111 
	#MICROPY_INTERNAL_EVENT_HOOK
 ()0

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpprint.c

27 
	~<as��.h
>

28 
	~<�d�g.h
>

29 
	~<�d�t.h
>

30 
	~<�dio.h
>

31 
	~<�r�g.h
>

33 
	~"py/mph�.h
"

34 
	~"py/m�r�t.h
"

35 
	~"py/obj.h
"

36 
	~"py/obj�t.h
"

37 
	~"py/ru�ime.h
"

39 #i�
MICROPY_PY_BUILTINS_FLOAT


40 
	~"py/f�m���t.h
"

43 cڡ 
	g�d_�a�s
[] = " ";

44 cڡ 
	g�d_z��s
[] = "0000000000000000";

46 
	$��_��t_��
(*
�v
, cڡ *
�r
, 
size_t
 
�n
) {

47 ()
�v
;

48 
	`MP_PLAT_PRINT_STRN
(
�r
, 
�n
);

49 
	}
}

51 cڡ 
mp_��t_t
 
	gmp_��_��t
 = {
NULL
, 
��_��t_��
};

53 
	$mp_��t_�r
(cڡ 
mp_��t_t
 *
��t
, cڡ *
�r
) {

54 
size_t
 
�n
 = 
	`���
(
�r
);

55 i�(
�n
) {

56 
��t
->
	`��t_��
�r�t->
d�a
, 
�r
, 
�n
);

58  
�n
;

59 
	}
}

61 
	$mp_��t_��
(cڡ 
mp_��t_t
 *
��t
, cڡ *
�r
, 
size_t
 
�n
, 
�ags
, 
f�l
, 
width
) {

62 
��_�d
 = 0;

63 
right_�d
 = 0;

64 
�d
 = 
width
 - 
�n
;

65 
�d_size
;

66 
tٮ_ch�s_���d
 = 0;

67 cڡ *
�d_ch�s
;

69 i�(!
f�l
 || fill == ' ') {

70 
�d_ch�s
 = 
�d_�a�s
;

71 
�d_size
 = (
�d_�a�s
) - 1;

72 } i�(
f�l
 == '0') {

73 
�d_ch�s
 = 
�d_z��s
;

74 
�d_size
 = (
�d_z��s
) - 1;

78 
�d_ch�s
 = &
f�l
;

79 
�d_size
 = 1;

82 i�(
�ags
 & 
PF_FLAG_CENTER_ADJUST
) {

83 
��_�d
 = 
�d
 / 2;

84 
right_�d
 = 
�d
 - 
��_�d
;

85 } i�(
�ags
 & 
PF_FLAG_LEFT_ADJUST
) {

86 
right_�d
 = 
�d
;

88 
��_�d
 = 
�d
;

91 i�(
��_�d
 > 0) {

92 
tٮ_ch�s_���d
 +�
��_�d
;

93 
��_�d
 > 0) {

94 
p
 = 
��_�d
;

95 i�(
p
 > 
�d_size
) {

96 
p
 = 
�d_size
;

98 
��t
->
	`��t_��
�r�t->
d�a
, 
�d_ch�s
, 
p
);

99 
��_�d
 -�
p
;

102 i�(
�n
) {

103 
��t
->
	`��t_��
�r�t->
d�a
, 
�r
, 
�n
);

104 
tٮ_ch�s_���d
 +�
�n
;

106 i�(
right_�d
 > 0) {

107 
tٮ_ch�s_���d
 +�
right_�d
;

108 
right_�d
 > 0) {

109 
p
 = 
right_�d
;

110 i�(
p
 > 
�d_size
) {

111 
p
 = 
�d_size
;

113 
��t
->
	`��t_��
�r�t->
d�a
, 
�d_ch�s
, 
p
);

114 
right_�d
 -�
p
;

117  
tٮ_ch�s_���d
;

118 
	}
}

122 
	#INT_BUF_SIZE
 ((
mp_�t_t
�* 4)

	)

126 
	#SUPPORT_INT_BASE_PREFIX
 (0)

	)

130 
	$mp_��t_�t
(cڡ 
mp_��t_t
 *
��t
, 
mp_u�t_t
 
x
, 
sgn
, 
ba�
, 
ba�_ch�
, 
�ags
, 
f�l
, 
width
) {

131 
sign
 = 0;

132 i�(
sgn
) {

133 i�((
mp_�t_t
)
x
 < 0) {

134 
sign
 = '-';

135 
x
 = -x;

136 } i�(
�ags
 & 
PF_FLAG_SHOW_SIGN
) {

137 
sign
 = '+';

138 } i�(
�ags
 & 
PF_FLAG_SPACE_SIGN
) {

139 
sign
 = ' ';

143 
buf
[
INT_BUF_SIZE
];

144 *
b
 = 
buf
 + 
INT_BUF_SIZE
;

146 i�(
x
 == 0) {

147 *(--
b
) = '0';

150 
c
 = 
x
 % 
ba�
;

151 
x
 /�
ba�
;

152 i�(
c
 >= 10) {

153 
c
 +�
ba�_ch�
 - 10;

155 
c
 += '0';

157 *(--
b
��
c
;

158 } 
b
 > 
buf
 && 
x
 != 0);

161 #i�
SUPPORT_INT_BASE_PREFIX


162 
�efix_ch�
 = '\0';

164 i�(
�ags
 & 
PF_FLAG_SHOW_PREFIX
) {

165 i�(
ba�
 == 2) {

166 
�efix_ch�
 = 
ba�_ch�
 + 'b' - 'a';

167 } i�(
ba�
 == 8) {

168 
�efix_ch�
 = 
ba�_ch�
 + 'o' - 'a';

169 } i�(
ba�
 == 16) {

170 
�efix_ch�
 = 
ba�_ch�
 + 'x' - 'a';

175 
�n
 = 0;

176 i�(
�ags
 & 
PF_FLAG_PAD_AFTER_SIGN
) {

177 i�(
sign
) {

178 
�n
 +�
	`mp_��t_��
(
��t
, &
sign
, 1, 
�ags
, 
f�l
, 1);

179 
width
--;

181 #i�
SUPPORT_INT_BASE_PREFIX


182 i�(
�efix_ch�
) {

183 
�n
 +�
	`mp_��t_��
(
��t
, "0", 1, 
�ags
, 
f�l
, 1);

184 
�n
 +�
	`mp_��t_��
(
��t
, &
�efix_ch�
, 1, 
�ags
, 
f�l
, 1);

185 
width
 -= 2;

189 #i�
SUPPORT_INT_BASE_PREFIX


190 i�(
�efix_ch�
 && 
b
 > &
buf
[1]) {

191 *(--
b
��
�efix_ch�
;

192 *(--
b
) = '0';

195 i�(
sign
 && 
b
 > 
buf
) {

196 *(--
b
��
sign
;

200 
�n
 +�
	`mp_��t_��
(
��t
, 
b
, 
buf
 + 
INT_BUF_SIZE
 - b, 
�ags
, 
f�l
, 
width
);

201  
�n
;

202 
	}
}

204 
	$mp_��t_mp_�t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
x
, 
ba�
, 
ba�_ch�
, 
�ags
, 
f�l
, 
width
, 
�ec
) {

208 
	`as��
(
ba�
 == 2 || base == 8 || base == 10 || base == 16);

210 i�(!
	`mp_obj_is_�t
(
x
)) {

213 
x
 = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_obj_g�_�t
(x));

216 i�((
�ags
 & (
PF_FLAG_LEFT_ADJUST
 | 
PF_FLAG_CENTER_ADJUST
)�=�0 && 
f�l
 == '0') {

217 i�(
�ec
 > 
width
) {

218 
width
 = 
�ec
;

220 
�ec
 = 0;

222 
�efix_buf
[4];

223 *
�efix
 = 
�efix_buf
;

225 i�(
	`mp_obj_�t_sign
(
x
) >= 0) {

226 i�(
�ags
 & 
PF_FLAG_SHOW_SIGN
) {

227 *
�efix
++ = '+';

228 } i�(
�ags
 & 
PF_FLAG_SPACE_SIGN
) {

229 *
�efix
++ = ' ';

233 i�(
�ags
 & 
PF_FLAG_SHOW_PREFIX
) {

234 i�(
ba�
 == 2) {

235 *
�efix
++ = '0';

236 *
�efix
++ = 
ba�_ch�
 + 'b' - 'a';

237 } i�(
ba�
 == 8) {

238 *
�efix
++ = '0';

239 i�(
�ags
 & 
PF_FLAG_SHOW_OCTAL_LETTER
) {

240 *
�efix
++ = 
ba�_ch�
 + 'o' - 'a';

242 } i�(
ba�
 == 16) {

243 *
�efix
++ = '0';

244 *
�efix
++ = 
ba�_ch�
 + 'x' - 'a';

247 *
�efix
 = '\0';

248 
�efix_�n
 = 
�efix
 - 
�efix_buf
;

249 
�efix
 = 
�efix_buf
;

251 
comma
 = '\0';

252 i�(
�ags
 & 
PF_FLAG_SHOW_COMMA
) {

253 
comma
 = ',';

258 
�ack_buf
[(
mp_�t_t
) * 4];

259 *
buf
 = 
�ack_buf
;

260 
size_t
 
buf_size
 = (
�ack_buf
);

261 
size_t
 
fmt_size
 = 0;

262 *
�r
;

264 i�(
�ec
 > 1) {

265 
�ags
 |�
PF_FLAG_PAD_AFTER_SIGN
;

267 
sign
 = '\0';

268 i�(
�ags
 & 
PF_FLAG_PAD_AFTER_SIGN
) {

271 
�r
 = 
	`mp_obj_�t_f�m��d
(&
buf
, &
buf_size
, &
fmt_size
,

272 
x
, 
ba�
, 
NULL
, 
ba�_ch�
, 
comma
);

273 i�(*
�r
 == '-') {

274 
sign
 = *
�r
++;

275 
fmt_size
--;

278 
�r
 = 
	`mp_obj_�t_f�m��d
(&
buf
, &
buf_size
, &
fmt_size
,

279 
x
, 
ba�
, 
�efix
, 
ba�_ch�
, 
comma
);

282 
�a�s_bef�e
 = 0;

283 
�a�s_a�
 = 0;

285 i�(
�ec
 > 1) {

290 
�ec_width
 = 
fmt_size
;

291 i�(
�ec_width
 < 
�ec
) {

292 
�ec_width
 = 
�ec
;

294 i�(
�ags
 & 
PF_FLAG_PAD_AFTER_SIGN
) {

295 i�(
sign
) {

296 
�ec_width
++;

298 
�ec_width
 +�
�efix_�n
;

300 i�(
�ec_width
 < 
width
) {

301 i�(
�ags
 & 
PF_FLAG_LEFT_ADJUST
) {

302 
�a�s_a�
 = 
width
 - 
�ec_width
;

304 
�a�s_bef�e
 = 
width
 - 
�ec_width
;

307 
f�l
 = '0';

308 
�ags
 &�~
PF_FLAG_LEFT_ADJUST
;

311 
�n
 = 0;

312 i�(
�a�s_bef�e
) {

313 
�n
 +�
	`mp_��t_��
(
��t
, "", 0, 0, ' ', 
�a�s_bef�e
);

315 i�(
�ags
 & 
PF_FLAG_PAD_AFTER_SIGN
) {

317 i�(
sign
) {

318 
�n
 +�
	`mp_��t_��
(
��t
, &
sign
, 1, 0, 0, 1);

319 
width
--;

321 i�(
�efix_�n
) {

322 
�n
 +�
	`mp_��t_��
(
��t
, 
�efix
, 
�efix_�n
, 0, 0, 1);

323 
width
 -�
�efix_�n
;

326 i�(
�ec
 > 1) {

327 
width
 = 
�ec
;

330 
�n
 +�
	`mp_��t_��
(
��t
, 
�r
, 
fmt_size
, 
�ags
, 
f�l
, 
width
);

332 i�(
�a�s_a�
) {

333 
�n
 +�
	`mp_��t_��
(
��t
, "", 0, 0, ' ', 
�a�s_a�
);

336 i�(
buf
 !�
�ack_buf
) {

337 
	`m_d�
(, 
buf
, 
buf_size
);

339  
�n
;

340 
	}
}

342 #i�
MICROPY_PY_BUILTINS_FLOAT


343 
	$mp_��t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_��t_t
 
f
, 
fmt
, 
�ags
, 
f�l
, 
width
, 
�ec
) {

344 
buf
[32];

345 
sign
 = '\0';

346 
chrs
 = 0;

348 i�(
�ags
 & 
PF_FLAG_SHOW_SIGN
) {

349 
sign
 = '+';

351 i�(
�ags
 & 
PF_FLAG_SPACE_SIGN
) {

352 
sign
 = ' ';

355 
�n
 = 
	`mp_f�m�_��t
(
f
, 
buf
, (buf), 
fmt
, 
�ec
, 
sign
);

357 *
s
 = 
buf
;

359 i�((
�ags
 & 
PF_FLAG_ADD_PERCENT
�&& (
size_t
)(
�n
 + 1�< (
buf
)) {

360 
buf
[
�n
++] = '%';

361 
buf
[
�n
] = '\0';

365 i�((
�ags
 & 
PF_FLAG_PAD_AFTER_SIGN
�&& 
buf
[0] < '0') {

367 
s
++;

368 
chrs
 +�
	`mp_��t_��
(
��t
, &
buf
[0], 1, 0, 0, 1);

369 
width
--;

370 
�n
--;

373 
chrs
 +�
	`mp_��t_��
(
��t
, 
s
, 
�n
, 
�ags
, 
f�l
, 
width
);

375  
chrs
;

376 
	}
}

379 
	$mp_��tf
(cڡ 
mp_��t_t
 *
��t
, cڡ *
fmt
, ...) {

380 
va_li�
 
�
;

381 
	`va_��t
(
�
, 
fmt
);

382 
�t
 = 
	`mp_v��tf
(
��t
, 
fmt
, 
�
);

383 
	`va_�d
(
�
);

384  
�t
;

385 
	}
}

387 
	$mp_v��tf
(cڡ 
mp_��t_t
 *
��t
, cڡ *
fmt
, 
va_li�
 
�gs
) {

388 
chrs
 = 0;

391 cڡ *
f
 = 
fmt
;

392 *
f
 != '\0' && *f != '%') {

393 ++
f
;

395 i�(
f
 > 
fmt
) {

396 
��t
->
	`��t_��
�r�t->
d�a
, 
fmt
, 
f
 - fmt);

397 
chrs
 +�
f
 - 
fmt
;

398 
fmt
 = 
f
;

402 i�(*
fmt
 == '\0') {

407 ++
fmt
;

410 
�ags
 = 0;

411 
f�l
 = ' ';

412 *
fmt
 != '\0') {

413 i�(*
fmt
 == '-') {

414 
�ags
 |�
PF_FLAG_LEFT_ADJUST
;

415 } i�(*
fmt
 == '+') {

416 
�ags
 |�
PF_FLAG_SHOW_SIGN
;

417 } i�(*
fmt
 == ' ') {

418 
�ags
 |�
PF_FLAG_SPACE_SIGN
;

419 } i�(*
fmt
 == '!') {

420 
�ags
 |�
PF_FLAG_NO_TRAILZ
;

421 } i�(*
fmt
 == '0') {

422 
�ags
 |�
PF_FLAG_PAD_AFTER_SIGN
;

423 
f�l
 = '0';

427 ++
fmt
;

431 
width
 = 0;

432 ; '0' <�*
fmt
 && *fmt <= '9'; ++fmt) {

433 
width
 = width * 10 + *
fmt
 - '0';

437 
�ec
 = -1;

438 i�(*
fmt
 == '.') {

439 ++
fmt
;

440 i�(*
fmt
 == '*') {

441 ++
fmt
;

442 
�ec
 = 
	`va_�g
(
�gs
, );

444 
�ec
 = 0;

445 ; '0' <�*
fmt
 && *fmt <= '9'; ++fmt) {

446 
�ec
 =���* 10 + *
fmt
 - '0';

449 i�(
�ec
 < 0) {

450 
�ec
 = 0;

455 #i�de�
__LP64__


458 
bo�
 
l�g_�g
 = 
�l�
;

459 i�(*
fmt
 == 'l') {

460 ++
fmt
;

461 #ifde�
__LP64__


462 
l�g_�g
 = 
�ue
;

466 i�(*
fmt
 == '\0') {

470 *
fmt
) {

472 i�(
	`va_�g
(
�gs
, )) {

473 
chrs
 +�
	`mp_��t_��
(
��t
, "�ue", 4, 
�ags
, 
f�l
, 
width
);

475 
chrs
 +�
	`mp_��t_��
(
��t
, "�l�", 5, 
�ags
, 
f�l
, 
width
);

479 
�r
 = 
	`va_�g
(
�gs
, );

480 
chrs
 +�
	`mp_��t_��
(
��t
, &
�r
, 1, 
�ags
, 
f�l
, 
width
);

484 
q�r
 
q�
 = 
	`va_�g
(
�gs
, qstr);

485 
size_t
 
�n
;

486 cڡ *
�r
 = (cڡ *)
	`q�r_d�a
(
q�
, &
�n
);

487 i�(
�ec
 >�0 && (
size_t
���< 
�n
) {

488 
�n
 = 
�ec
;

490 
chrs
 +�
	`mp_��t_��
(
��t
, 
�r
, 
�n
, 
�ags
, 
f�l
, 
width
);

494 cڡ *
�r
 = 
	`va_�g
(
�gs
, const *);

495 #i�de�
NDEBUG


497 i�(
�ec
 !�0 && 
�r
 =�
NULL
) {

498 
chrs
 +�
	`mp_��t_��
(
��t
, "�u�)", 6, 
�ags
, 
f�l
, 
width
);

502 
size_t
 
�n
 = 
	`���
(
�r
);

503 i�(
�ec
 >�0 && (
size_t
���< 
�n
) {

504 
�n
 = 
�ec
;

506 
chrs
 +�
	`mp_��t_��
(
��t
, 
�r
, 
�n
, 
�ags
, 
f�l
, 
width
);

510 
mp_�t_t
 
v�
;

511 i�(
l�g_�g
) {

512 
v�
 = 
	`va_�g
(
�gs
, );

514 
v�
 = 
	`va_�g
(
�gs
, );

516 
chrs
 +�
	`mp_��t_�t
(
��t
, 
v�
, 1, 10, 'a', 
�ags
, 
f�l
, 
width
);

522 
ba�
 = 16 - ((*
fmt
 + 1) & 6);

523 
fmt_c
 = (*
fmt
 & 0xf0) - 'P' + 'A';

524 
mp_u�t_t
 
v�
;

525 i�(
l�g_�g
) {

526 
v�
 = 
	`va_�g
(
�gs
, );

528 
v�
 = 
	`va_�g
(
�gs
, );

530 
chrs
 +�
	`mp_��t_�t
(
��t
, 
v�
, 0, 
ba�
, 
fmt_c
, 
�ags
, 
f�l
, 
width
);

536 
chrs
 +�
	`mp_��t_�t
(
��t
, 
	`va_�g
(
�gs
, ), 0, 16, 'a', 
�ags
, 
f�l
, 
width
);

538 #i�
MICROPY_PY_BUILTINS_FLOAT


545 #i�((
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT
�|| (MICROPY_FLOAT_IMPL =�
MICROPY_FLOAT_IMPL_DOUBLE
))

546 
mp_��t_t
 
f
 = (mp_��t_t)
	`va_�g
(
�gs
, );

547 
chrs
 +�
	`mp_��t_��t
(
��t
, 
f
, *
fmt
, 
�ags
, 
f�l
, 
width
, 
�ec
);

549 #�r� 
Unknown
 
MICROPY
 
FLOAT
 
IMPL


557 #i�(
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D
�|| 
	`def�ed
(
_WIN64
)

559 
�g_v�ue
 = 
	`va_�g
(
�gs
, );

560 ++
fmt
;

561 
	`as��
(*
fmt
 == 'u' || *fmt == 'd' || !"unsupported fmt char");

562 
chrs
 +�
	`mp_��t_�t
(
��t
, 
�g_v�ue
, *
fmt
 =�'d', 10, 'a', 
�ags
, 
f�l
, 
width
);

568 
	`as��
(*
fmt
 == '%' || !"unsupported fmt char");

569 
��t
->
	`��t_��
�r�t->
d�a
, 
fmt
, 1);

570 
chrs
 += 1;

573 ++
fmt
;

575  
chrs
;

576 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpprint.h

26 #i�de�
MICROPY_INCLUDED_PY_MPPRINT_H


27 
	#MICROPY_INCLUDED_PY_MPPRINT_H


	)

29 
	~"py/mpc�fig.h
"

31 
	#PF_FLAG_LEFT_ADJUST
 (0x001)

	)

32 
	#PF_FLAG_SHOW_SIGN
 (0x002)

	)

33 
	#PF_FLAG_SPACE_SIGN
 (0x004)

	)

34 
	#PF_FLAG_NO_TRAILZ
 (0x008)

	)

35 
	#PF_FLAG_SHOW_PREFIX
 (0x010)

	)

36 
	#PF_FLAG_SHOW_COMMA
 (0x020)

	)

37 
	#PF_FLAG_PAD_AFTER_SIGN
 (0x040)

	)

38 
	#PF_FLAG_CENTER_ADJUST
 (0x080)

	)

39 
	#PF_FLAG_ADD_PERCENT
 (0x100)

	)

40 
	#PF_FLAG_SHOW_OCTAL_LETTER
 (0x200)

	)

42 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


43 
	#MP_PYTHON_PRINTER
 &
mp_sys_�dout_��t


	)

45 
	#MP_PYTHON_PRINTER
 &
mp_��_��t


	)

48 (*
	tmp_��t_��_t
)(*
	td�a
, cڡ *
	t�r
, 
	tsize_t
 
	t�n
);

50 
	s_mp_��t_t
 {

51 *
d�a
;

52 
mp_��t_��_t
 
��t_��
;

53 } 
	tmp_��t_t
;

55 
	s_mp_��t_ext_t
 {

56 
mp_��t_t
 
ba�
;

57 cڡ *
�em_���t�
;

58 cڡ *
key_���t�
;

59 } 
	tmp_��t_ext_t
;

61 
	#MP_PRINT_GET_EXT
(
��t
�((
mp_��t_ext_t
 *�r�t)

	)

65 
cڡ 
mp_��t_t
 
mp_��_��t
;

66 #i�
MICROPY_PY_IO
 && 
MICROPY_PY_SYS_STDFILES


68 
cڡ 
mp_��t_t
 
mp_sys_�dout_��t
;

71 
	`mp_��t_�r
(cڡ 
mp_��t_t
 *
��t
, cڡ *
�r
);

72 
	`mp_��t_��
(cڡ 
mp_��t_t
 *
��t
, cڡ *
�r
, 
size_t
 
�n
, 
�ags
, 
f�l
, 
width
);

73 #i�
MICROPY_PY_BUILTINS_FLOAT


74 
	`mp_��t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_��t_t
 
f
, 
fmt
, 
�ags
, 
f�l
, 
width
, 
�ec
);

77 
	`mp_��tf
(cڡ 
mp_��t_t
 *
��t
, cڡ *
fmt
, ...);

78 #ifde�
va_��t


79 
	`mp_v��tf
(cڡ 
mp_��t_t
 *
��t
, cڡ *
fmt
, 
va_li�
 
�gs
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpstate.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_DYNAMIC_COMPILER


30 
mp_dy�mic_comp��_t
 
	gmp_dy�mic_comp��
 = {0};

33 
mp_��e_�x_t
 
	gmp_��e_�x
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpstate.h

26 #i�de�
MICROPY_INCLUDED_PY_MPSTATE_H


27 
	#MICROPY_INCLUDED_PY_MPSTATE_H


	)

29 
	~<�d�t.h
>

31 
	~"py/mpc�fig.h
"

32 
	~"py/m�h�ad.h
"

33 
	~"py/misc.h
"

34 
	~"py/�r.h
"

35 
	~"py/obj.h
"

36 
	~"py/objli�.h
"

37 
	~"py/objex��.h
"

43 #i�
MICROPY_PY_SYS_ATTR_DELEGATION


46 #i�
MICROPY_PY_SYS_PATH


47 
	mMP_SYS_MUTABLE_PATH
,

49 #i�
MICROPY_PY_SYS_PS1_PS2


50 
	mMP_SYS_MUTABLE_PS1
,

51 
	mMP_SYS_MUTABLE_PS2
,

53 #i�
MICROPY_PY_SYS_TRACEBACKLIMIT


54 
	mMP_SYS_MUTABLE_TRACEBACKLIMIT
,

56 
	mMP_SYS_MUTABLE_NUM
,

61 #i�
MICROPY_DYNAMIC_COMPILER


62 
	smp_dy�mic_comp��_t
 {

63 
u�t8_t
 
	msm�l_�t_b�s
;

64 
u�t8_t
 
	m�tive_�ch
;

65 
u�t8_t
 
	m�r_buf_num_�gs
;

66 } 
	tmp_dy�mic_comp��_t
;

67 
mp_dy�mic_comp��_t
 
mp_dy�mic_comp��
;

71 
	#MP_SCHED_IDLE
 (1)

	)

72 
	#MP_SCHED_LOCKED
 (-1)

	)

73 
	#MP_SCHED_PENDING
 (0)

74 

	)

75 
	s_mp_sched_�em_t
 {

76 
mp_obj_t
 
	mfunc
;

77 
mp_obj_t
 
	m�g
;

78 } 
	tmp_sched_�em_t
;

82 
	s_mp_��e_mem_��_t
 {

83 #i�
MICROPY_GC_SPLIT_HEAP


84 
_mp_��e_mem_��_t
 *
	m�xt
;

87 
by�
 *
	mgc_�loc_�b�_��t
;

88 
size_t
 
	mgc_�loc_�b�_by�_�n
;

89 #i�
MICROPY_ENABLE_FINALISER


90 
by�
 *
	mgc_f��i�r_�b�_��t
;

92 
by�
 *
	mgc_po�_��t
;

93 
by�
 *
	mgc_po�_�d
;

95 
size_t
 
	mgc_ϡ_�_�b_�dex
;

96 
size_t
 
	mgc_ϡ_u�d_block
;

97 } 
	tmp_��e_mem_��_t
;

100 
	s_mp_��e_mem_t
 {

101 #i�
MICROPY_MEM_STATS


102 
size_t
 
	mtٮ_by�s_�lo��d
;

103 
size_t
 
	mcu��t_by�s_�lo��d
;

104 
size_t
 
	m�ak_by�s_�lo��d
;

107 
mp_��e_mem_��_t
 
	m��
;

109 
	mgc_�ack_ov��ow
;

110 
MICROPY_GC_STACK_ENTRY_TYPE
 
	mgc_block_�ack
[
MICROPY_ALLOC_GC_STACK_SIZE
];

111 #i�
MICROPY_GC_SPLIT_HEAP


113 
mp_��e_mem_��_t
 *
	mgc_��_�ack
[
MICROPY_ALLOC_GC_STACK_SIZE
];

119 
u�t16_t
 
	mgc_auto_c���_�ab�d
;

121 #i�
MICROPY_GC_ALLOC_THRESHOLD


122 
size_t
 
	mgc_�loc_amou�
;

123 
size_t
 
	mgc_�loc_th�sh�d
;

126 #i�
MICROPY_GC_SPLIT_HEAP


127 
mp_��e_mem_��_t
 *
	mgc_ϡ_�_��
;

130 #i�
MICROPY_PY_GC_COLLECT_RETVAL


131 
size_t
 
	mgc_c���ed
;

134 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


136 
mp_th�ad_mu�x_t
 
	mgc_mu�x
;

138 } 
	tmp_��e_mem_t
;

142 
	s_mp_��e_vm_t
 {

150 
q�r_po�_t
 *
	mϡ_po�
;

152 #i�
MICROPY_TRACKED_ALLOC


153 
_m_�acked_node_t
 *
	mm_�acked_h�d
;

157 
mp_obj_ex��i�_t
 
	mmp_em�g�cy_ex��i�_obj
;

160 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


161 #i�
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 > 0

163 
mp_obj_t
 
	mmp_em�g�cy_ex��i�_buf
[
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 / (mp_obj_t)];

166 
by�
 *
	mmp_em�g�cy_ex��i�_buf
;

170 #i�
MICROPY_KBD_EXCEPTION


172 
mp_obj_ex��i�_t
 
	mmp_kbd_ex��i�
;

176 
mp_obj_di�_t
 
	mmp_l�ded_modu�s_di�
;

179 
mp_obj_di�_t
 
	mdi�_ma�
;

182 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


183 
mp_obj_di�_t
 *
	mmp_modu�_bu�t�s_ov�ride_di�
;

187 #i�de�
NO_QSTR


190 
	~"g�hdr/ro�_po��rs.h
"

199 *
	mq�r_ϡ_chunk
;

200 
size_t
 
	mq�r_ϡ_�loc
;

201 
size_t
 
	mq�r_ϡ_u�d
;

203 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


205 
mp_th�ad_mu�x_t
 
	mq�r_mu�x
;

208 #i�
MICROPY_ENABLE_COMPILER


209 
mp_u�t_t
 
	mmp_�timi�_v�ue
;

210 #i�
MICROPY_EMIT_NATIVE


211 
u�t8_t
 
	mde�u�_em�_�t
;

216 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF
 && 
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 == 0

217 
mp_�t_t
 
	mmp_em�g�cy_ex��i�_buf_size
;

220 #i�
MICROPY_ENABLE_SCHEDULER


221 vީ��
�t16_t
 
	msched_��e
;

223 #i�
MICROPY_SCHEDULER_STATIC_NODES


227 
_mp_sched_node_t
 *
	msched_h�d
;

228 
_mp_sched_node_t
 *
	msched_��
;

232 
u�t8_t
 
	msched_�n
;

233 
u�t8_t
 
	msched_idx
;

236 #i�
MICROPY_ENABLE_VM_ABORT


237 
bo�
 
	mvm_ab�t
;

238 
�r_buf_t
 *
	m�r_ab�t
;

241 #i�
ORB_ENABLE_INTERRUPT


242 
bo�
 
	m�b_���u�
;

243 
bo�
 
	m�b_���u�_�je�ed
;

246 #i�
MICROPY_PY_THREAD_GIL


248 
mp_th�ad_mu�x_t
 
	mg�_mu�x
;

251 #i�
MICROPY_OPT_MAP_LOOKUP_CACHE


253 
u�t8_t
 
	mm�_lookup_�che
[
MICROPY_OPT_MAP_LOOKUP_CACHE_SIZE
];

255 } 
	tmp_��e_vm_t
;

261 
	s_mp_��e_th�ad_t
 {

263 *
	m�ack_t�
;

265 #i�
MICROPY_STACK_CHECK


266 
size_t
 
	m�ack_lim�
;

269 #i�
MICROPY_ENABLE_PYSTACK


270 
u�t8_t
 *
	mpy�ack_��t
;

271 
u�t8_t
 *
	mpy�ack_�d
;

272 
u�t8_t
 *
	mpy�ack_cur
;

276 
u�t16_t
 
	mgc_lock_d�th
;

284 
mp_obj_di�_t
 *
	mdi�_lo�ls
;

285 
mp_obj_di�_t
 *
	mdi�_glob�s
;

287 
�r_buf_t
 *
	m�r_t�
;

288 
�r_jump_��back_node_t
 *
	m�r_jump_��back_t�
;

291 vީ��
mp_obj_t
 
	mmp_�nd�g_ex��i�
;

294 
mp_obj_t
 
	m��_���i�_�g
;

296 #i�
MICROPY_PY_SYS_SETTRACE


297 
mp_obj_t
 
	m�of_�a�_��back
;

298 
bo�
 
	m�of_��back_is_execut�g
;

299 
_mp_code_��e_t
 *
	mcu��t_code_��e
;

301 } 
	tmp_��e_th�ad_t
;

305 
	s_mp_��e_�x_t
 {

306 
mp_��e_th�ad_t
 
	mth�ad
;

307 
mp_��e_vm_t
 
	mvm
;

308 
mp_��e_mem_t
 
	mmem
;

309 } 
	tmp_��e_�x_t
;

311 
mp_��e_�x_t
 
mp_��e_�x
;

313 
	#MP_STATE_VM
(
x
�(
mp_��e_�x
.
vm
.x)

	)

314 
	#MP_STATE_MEM
(
x
�(
mp_��e_�x
.
mem
.x)

	)

315 
	#MP_STATE_MAIN_THREAD
(
x
�(
mp_��e_�x
.
th�ad
.x)

	)

317 #i�
MICROPY_PY_THREAD


318 
	#MP_STATE_THREAD
(
x
�(
	`mp_th�ad_g�_��e
()->x)

	)

319 
	#mp_th�ad_is_ma�_th�ad
(�(
	`mp_th�ad_g�_��e
(�=�&
mp_��e_�x
.
th�ad
)

	)

321 
	#MP_STATE_THREAD
(
x
�
	`MP_STATE_MAIN_THREAD
(x)

	)

322 
	#mp_th�ad_is_ma�_th�ad
(�(
�ue
)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpthread.h

26 #i�de�
MICROPY_INCLUDED_PY_MPTHREAD_H


27 
	#MICROPY_INCLUDED_PY_MPTHREAD_H


	)

29 
	~"py/mpc�fig.h
"

31 #i�
MICROPY_PY_THREAD


33 
	g_mp_��e_th�ad_t
;

35 #ifde�
MICROPY_MPTHREADPORT_H


36 #��ud�
MICROPY_MPTHREADPORT_H


38 
	~<m�h�adp�t.h
>

41 
_mp_��e_th�ad_t
 *
mp_th�ad_g�_��e
();

42 
mp_th�ad_�t_��e
(
_mp_��e_th�ad_t
 *
��e
);

43 
mp_u�t_t
 
mp_th�ad_���
(*(*
��y
)(*), *
�g
, 
size_t
 *
�ack_size
);

44 
mp_u�t_t
 
mp_th�ad_g�_id
();

45 
mp_th�ad_��t
();

46 
mp_th�ad_f�ish
();

47 
mp_th�ad_mu�x_��
(
mp_th�ad_mu�x_t
 *
mu�x
);

48 
mp_th�ad_mu�x_lock
(
mp_th�ad_mu�x_t
 *
mu�x
, 
wa�
);

49 
mp_th�ad_mu�x_u�ock
(
mp_th�ad_mu�x_t
 *
mu�x
);

53 #i�
MICROPY_PY_THREAD
 && 
MICROPY_PY_THREAD_GIL


54 
	~"py/mp��e.h
"

55 
	#MP_THREAD_GIL_ENTER
(�
	`mp_th�ad_mu�x_lock
(&
	`MP_STATE_VM
(
g�_mu�x
), 1)

	)

56 
	#MP_THREAD_GIL_EXIT
(�
	`mp_th�ad_mu�x_u�ock
(&
	`MP_STATE_VM
(
g�_mu�x
))

	)

58 
	#MP_THREAD_GIL_ENTER
()

	)

59 
	#MP_THREAD_GIL_EXIT
()

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpz.c

27 
	~<�r�g.h
>

28 
	~<as��.h
>

30 
	~"py/mpz.h
"

32 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_MPZ


34 
	#DIG_SIZE
 (
MPZ_DIG_SIZE
)

	)

35 
	#DIG_MASK
 ((
MPZ_LONG_1
 << 
DIG_SIZE
�- 1)

	)

36 
	#DIG_MSB
 (
MPZ_LONG_1
 << (
DIG_SIZE
 - 1))

	)

37 
	#DIG_BASE
 (
MPZ_LONG_1
 << 
DIG_SIZE
)

	)

52 
size_t
 
	$m�_�move_�a��g_z�os
(
mpz_dig_t
 *
oidig
, mpz_dig_�*
idig
) {

53 --
idig
; idig >�
oidig
 && *idig == 0; --idig) {

55  
idig
 + 1 - 
oidig
;

56 
	}
}

62 
	$m�_cmp
(cڡ 
mpz_dig_t
 *
idig
, 
size_t
 
��
, cڡ mpz_dig_�*
jdig
, size_�
j�n
) {

63 i�(
��
 < 
j�n
) {

66 i�(
��
 > 
j�n
) {

70 
idig
 +�
��
, 
jdig
 += ilen; ilen > 0; --ilen) {

71 
mpz_dbl_dig_sig�d_t
 
cmp
 = (
mpz_dbl_dig_t
)*(--
idig
�- (mpz_dbl_dig_t)*(--
jdig
);

72 i�(
cmp
 < 0) {

75 i�(
cmp
 > 0) {

81 
	}
}

88 
size_t
 
	$m�_shl
(
mpz_dig_t
 *
idig
, mpz_dig_�*
jdig
, 
size_t
 
j�n
, 
mp_u�t_t
 
n
) {

89 
mp_u�t_t
 
n_wh�e
 = (
n
 + 
DIG_SIZE
 - 1) / DIG_SIZE;

90 
mp_u�t_t
 
n_��
 = 
n
 % 
DIG_SIZE
;

91 i�(
n_��
 == 0) {

92 
n_��
 = 
DIG_SIZE
;

96 
idig
 +�
j�n
 + 
n_wh�e
 - 1;

97 
jdig
 +�
j�n
 - 1;

100 
mpz_dbl_dig_t
 
d
 = 0;

101 
size_t
 
i
 = 
j�n
; i > 0; i--, 
idig
--, 
jdig
--) {

102 
d
 |�*
jdig
;

103 *
idig
 = (
d
 >> (
DIG_SIZE
 - 
n_��
)�& 
DIG_MASK
;

104 
d
 <<�
DIG_SIZE
;

108 *
idig
 = (
d
 >> (
DIG_SIZE
 - 
n_��
)�& 
DIG_MASK
;

109 
idig
 -�
n_wh�e
 - 1;

110 
	`mem�t
(
idig
, 0, (
n_wh�e
 - 1�* (
mpz_dig_t
));

113 
j�n
 +�
n_wh�e
;

114 
j�n
 !�0 && 
idig
[jlen - 1] == 0) {

115 
j�n
--;

119  
j�n
;

120 
	}
}

127 
size_t
 
	$m�_shr
(
mpz_dig_t
 *
idig
, mpz_dig_�*
jdig
, 
size_t
 
j�n
, 
mp_u�t_t
 
n
) {

128 
mp_u�t_t
 
n_wh�e
 = 
n
 / 
DIG_SIZE
;

129 
mp_u�t_t
 
n_��
 = 
n
 % 
DIG_SIZE
;

131 i�(
n_wh�e
 >�
j�n
) {

135 
jdig
 +�
n_wh�e
;

136 
j�n
 -�
n_wh�e
;

138 
size_t
 
i
 = 
j�n
; i > 0; i--, 
idig
++, 
jdig
++) {

139 
mpz_dbl_dig_t
 
d
 = *
jdig
;

140 i�(
i
 > 1) {

141 
d
 |�(
mpz_dbl_dig_t
)
jdig
[1] << 
DIG_SIZE
;

143 
d
 >>�
n_��
;

144 *
idig
 = 
d
 & 
DIG_MASK
;

147 i�(
idig
[-1] == 0) {

148 
j�n
--;

151  
j�n
;

152 
	}
}

159 
size_t
 
	$m�_add
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
) {

160 
mpz_dig_t
 *
oidig
 = 
idig
;

161 
mpz_dbl_dig_t
 
��y
 = 0;

163 
j�n
 -�
k�n
;

165 ; 
k�n
 > 0; --k�n, ++
idig
, ++
jdig
, ++
kdig
) {

166 
��y
 +�(
mpz_dbl_dig_t
)*
jdig
 + (mpz_dbl_dig_t)*
kdig
;

167 *
idig
 = 
��y
 & 
DIG_MASK
;

168 
��y
 >>�
DIG_SIZE
;

171 ; 
j�n
 > 0; --j�n, ++
idig
, ++
jdig
) {

172 
��y
 +�*
jdig
;

173 *
idig
 = 
��y
 & 
DIG_MASK
;

174 
��y
 >>�
DIG_SIZE
;

177 i�(
��y
 != 0) {

178 *
idig
++ = 
��y
;

181  
idig
 - 
oidig
;

182 
	}
}

189 
size_t
 
	$m�_sub
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
) {

190 
mpz_dig_t
 *
oidig
 = 
idig
;

191 
mpz_dbl_dig_sig�d_t
 
b�row
 = 0;

193 
j�n
 -�
k�n
;

195 ; 
k�n
 > 0; --k�n, ++
idig
, ++
jdig
, ++
kdig
) {

196 
b�row
 +�(
mpz_dbl_dig_t
)*
jdig
 - (mpz_dbl_dig_t)*
kdig
;

197 *
idig
 = 
b�row
 & 
DIG_MASK
;

198 
b�row
 >>�
DIG_SIZE
;

201 ; 
j�n
 > 0; --j�n, ++
idig
, ++
jdig
) {

202 
b�row
 +�*
jdig
;

203 *
idig
 = 
b�row
 & 
DIG_MASK
;

204 
b�row
 >>�
DIG_SIZE
;

207  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

208 
	}
}

210 #i�
MICROPY_OPT_MPZ_BITWISE


217 
size_t
 
	$m�_�d
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, cڡ mpz_dig_�*
kdig
, 
size_t
 
k�n
) {

218 
mpz_dig_t
 *
oidig
 = 
idig
;

220 ; 
k�n
 > 0; --k�n, ++
idig
, ++
jdig
, ++
kdig
) {

221 *
idig
 = *
jdig
 & *
kdig
;

224  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

225 
	}
}

238 
size_t
 
	$m�_�d_�g
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
,

239 
mpz_dbl_dig_t
 
��yi
, mpz_dbl_dig_�
��yj
, mpz_dbl_dig_�
��yk
) {

240 
mpz_dig_t
 *
oidig
 = 
idig
;

241 
mpz_dig_t
 
imask
 = (0 =�
��yi
�? 0 : 
DIG_MASK
;

242 
mpz_dig_t
 
jmask
 = (0 =�
��yj
�? 0 : 
DIG_MASK
;

243 
mpz_dig_t
 
kmask
 = (0 =�
��yk
�? 0 : 
DIG_MASK
;

245 ; 
j�n
 > 0; ++
idig
, ++
jdig
) {

246 
��yj
 +�*
jdig
 ^ 
jmask
;

247 
��yk
 +�(--
k�n
 <�--
j�n
�? (*
kdig
++ ^ 
kmask
) : kmask;

248 
��yi
 +�((
��yj
 & 
��yk
�^ 
imask
�& 
DIG_MASK
;

249 *
idig
 = 
��yi
 & 
DIG_MASK
;

250 
��yk
 >>�
DIG_SIZE
;

251 
��yj
 >>�
DIG_SIZE
;

252 
��yi
 >>�
DIG_SIZE
;

255 i�(0 !�
��yi
) {

256 *
idig
++ = 
��yi
;

259  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

260 
	}
}

262 #i�
MICROPY_OPT_MPZ_BITWISE


269 
size_t
 
	$m�_�
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
) {

270 
mpz_dig_t
 *
oidig
 = 
idig
;

272 
j�n
 -�
k�n
;

274 ; 
k�n
 > 0; --k�n, ++
idig
, ++
jdig
, ++
kdig
) {

275 *
idig
 = *
jdig
 | *
kdig
;

278 ; 
j�n
 > 0; --j�n, ++
idig
, ++
jdig
) {

279 *
idig
 = *
jdig
;

282  
idig
 - 
oidig
;

283 
	}
}

297 #i�
MICROPY_OPT_MPZ_BITWISE


299 
size_t
 
	$m�_�_�g
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
,

300 
mpz_dbl_dig_t
 
��yj
, mpz_dbl_dig_�
��yk
) {

301 
mpz_dig_t
 *
oidig
 = 
idig
;

302 
mpz_dbl_dig_t
 
��yi
 = 1;

303 
mpz_dig_t
 
jmask
 = (0 =�
��yj
�? 0 : 
DIG_MASK
;

304 
mpz_dig_t
 
kmask
 = (0 =�
��yk
�? 0 : 
DIG_MASK
;

306 ; 
j�n
 > 0; ++
idig
, ++
jdig
) {

307 
��yj
 +�*
jdig
 ^ 
jmask
;

308 
��yk
 +�(--
k�n
 <�--
j�n
�? (*
kdig
++ ^ 
kmask
) : kmask;

309 
��yi
 +�((
��yj
 | 
��yk
�^ 
DIG_MASK
) & DIG_MASK;

310 *
idig
 = 
��yi
 & 
DIG_MASK
;

311 
��yk
 >>�
DIG_SIZE
;

312 
��yj
 >>�
DIG_SIZE
;

313 
��yi
 >>�
DIG_SIZE
;

322 
	`as��
(
��yi
 == 0);

324  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

325 
	}
}

329 
size_t
 
	$m�_�_�g
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
,

330 
mpz_dbl_dig_t
 
��yi
, mpz_dbl_dig_�
��yj
, mpz_dbl_dig_�
��yk
) {

331 
mpz_dig_t
 *
oidig
 = 
idig
;

332 
mpz_dig_t
 
imask
 = (0 =�
��yi
�? 0 : 
DIG_MASK
;

333 
mpz_dig_t
 
jmask
 = (0 =�
��yj
�? 0 : 
DIG_MASK
;

334 
mpz_dig_t
 
kmask
 = (0 =�
��yk
�? 0 : 
DIG_MASK
;

336 ; 
j�n
 > 0; ++
idig
, ++
jdig
) {

337 
��yj
 +�*
jdig
 ^ 
jmask
;

338 
��yk
 +�(--
k�n
 <�--
j�n
�? (*
kdig
++ ^ 
kmask
) : kmask;

339 
��yi
 +�((
��yj
 | 
��yk
�^ 
imask
�& 
DIG_MASK
;

340 *
idig
 = 
��yi
 & 
DIG_MASK
;

341 
��yk
 >>�
DIG_SIZE
;

342 
��yj
 >>�
DIG_SIZE
;

343 
��yi
 >>�
DIG_SIZE
;

347 
	`as��
(
��yi
 == 0);

349  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

350 
	}
}

354 #i�
MICROPY_OPT_MPZ_BITWISE


361 
size_t
 
	$m�_x�
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
) {

362 
mpz_dig_t
 *
oidig
 = 
idig
;

364 
j�n
 -�
k�n
;

366 ; 
k�n
 > 0; --k�n, ++
idig
, ++
jdig
, ++
kdig
) {

367 *
idig
 = *
jdig
 ^ *
kdig
;

370 ; 
j�n
 > 0; --j�n, ++
idig
, ++
jdig
) {

371 *
idig
 = *
jdig
;

374  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

375 
	}
}

388 
size_t
 
	$m�_x�_�g
(
mpz_dig_t
 *
idig
, cڡ mpz_dig_�*
jdig
, 
size_t
 
j�n
, cڡ mpz_dig_�*
kdig
, size_�
k�n
,

389 
mpz_dbl_dig_t
 
��yi
, mpz_dbl_dig_�
��yj
, mpz_dbl_dig_�
��yk
) {

390 
mpz_dig_t
 *
oidig
 = 
idig
;

392 ; 
j�n
 > 0; ++
idig
, ++
jdig
) {

393 
��yj
 +�*
jdig
 + 
DIG_MASK
;

394 
��yk
 +�(--
k�n
 <�--
j�n
�? (*
kdig
++ + 
DIG_MASK
) : DIG_MASK;

395 
��yi
 +�(
��yj
 ^ 
��yk
�& 
DIG_MASK
;

396 *
idig
 = 
��yi
 & 
DIG_MASK
;

397 
��yk
 >>�
DIG_SIZE
;

398 
��yj
 >>�
DIG_SIZE
;

399 
��yi
 >>�
DIG_SIZE
;

402 i�(0 !�
��yi
) {

403 *
idig
++ = 
��yi
;

406  
	`m�_�move_�a��g_z�os
(
oidig
, 
idig
);

407 
	}
}

413 
size_t
 
	$m�_mul_dig_add_dig
(
mpz_dig_t
 *
idig
, 
size_t
 
��
, mpz_dig_�
dmul
, mpz_dig_�
dadd
) {

414 
mpz_dig_t
 *
oidig
 = 
idig
;

415 
mpz_dbl_dig_t
 
��y
 = 
dadd
;

417 ; 
��
 > 0; --��, ++
idig
) {

418 
��y
 +�(
mpz_dbl_dig_t
)*
idig
 * (mpz_dbl_dig_t)
dmul
;

419 *
idig
 = 
��y
 & 
DIG_MASK
;

420 
��y
 >>�
DIG_SIZE
;

423 i�(
��y
 != 0) {

424 *
idig
++ = 
��y
;

427  
idig
 - 
oidig
;

428 
	}
}

435 
size_t
 
	$m�_mul
(
mpz_dig_t
 *
idig
, mpz_dig_�*
jdig
, 
size_t
 
j�n
, mpz_dig_�*
kdig
, size_�
k�n
) {

436 
mpz_dig_t
 *
oidig
 = 
idig
;

437 
size_t
 
��
 = 0;

439 ; 
k�n
 > 0; --k�n, ++
idig
, ++
kdig
) {

440 
mpz_dig_t
 *
id
 = 
idig
;

441 
mpz_dbl_dig_t
 
��y
 = 0;

443 
size_t
 
jl
 = 
j�n
;

444 
mpz_dig_t
 *
jd
 = 
jdig
; 
jl
 > 0; --jl, ++jd, ++
id
) {

445 
��y
 +�(
mpz_dbl_dig_t
)*
id
 + (mpz_dbl_dig_t)*
jd
 * (mpz_dbl_dig_t)*
kdig
;

446 *
id
 = 
��y
 & 
DIG_MASK
;

447 
��y
 >>�
DIG_SIZE
;

450 i�(
��y
 != 0) {

451 *
id
++ = 
��y
;

454 
��
 = 
id
 - 
oidig
;

457  
��
;

458 
	}
}

466 
	$m�_div
(
mpz_dig_t
 *
num_dig
, 
size_t
 *
num_�n
, cڡ mpz_dig_�*
d�_dig
, size_�
d�_�n
, mpz_dig_�*
quo_dig
, size_�*
quo_�n
) {

467 
mpz_dig_t
 *
�ig_num_dig
 = 
num_dig
;

468 
mpz_dig_t
 *
�ig_quo_dig
 = 
quo_dig
;

469 
mpz_dig_t
 
n�m_shi�
 = 0;

470 
mpz_dbl_dig_t
 
�ad_d�_dig�
;

474 
cmp
 = 
	`m�_cmp
(
num_dig
, *
num_�n
, 
d�_dig
, 
d�_�n
);

475 i�(
cmp
 == 0) {

476 *
num_�n
 = 0;

477 
quo_dig
[0] = 1;

478 *
quo_�n
 = 1;

480 } i�(
cmp
 < 0) {

482 *
quo_�n
 = 0;

494 
mpz_dig_t
 
d
 = 
d�_dig
[
d�_�n
 - 1];

495 (
d
 & 
DIG_MSB
) == 0) {

496 
d
 <<= 1;

497 ++
n�m_shi�
;

503 
num_dig
[*
num_�n
] = 0;

504 ++(*
num_�n
);

505 
mpz_dig_t
 *
num
 = 
num_dig
, 
��y
 = 0;�um <�um_dig + *
num_�n
; ++num) {

506 
mpz_dig_t
 
n
 = *
num
;

507 *
num
 = ((
n
 << 
n�m_shi�
�| 
��y
�& 
DIG_MASK
;

508 
��y
 = (
mpz_dbl_dig_t
)
n
 >> (
DIG_SIZE
 - 
n�m_shi�
);

512 
�ad_d�_dig�
 = (
mpz_dbl_dig_t
)
d�_dig
[
d�_�n
 - 1] << 
n�m_shi�
;

513 i�(
d�_�n
 >= 2) {

514 
�ad_d�_dig�
 |�(
mpz_dbl_dig_t
)
d�_dig
[
d�_�n
 - 2] >> (
DIG_SIZE
 - 
n�m_shi�
);

518 
num_dig
 +�*
num_�n
 - 1;

521 *
quo_�n
 = *
num_�n
 - 
d�_�n
;

524 
quo_dig
 +�*
quo_�n
 - 1;

527 *
num_�n
 > 
d�_�n
) {

528 
mpz_dbl_dig_t
 
quo
 = ((mpz_dbl_dig_t)*
num_dig
 << 
DIG_SIZE
) |�um_dig[-1];

531 
quo
 /�
�ad_d�_dig�
;

537 cڡ 
mpz_dig_t
 *
d
 = 
d�_dig
;

538 
mpz_dbl_dig_t
 
d_n�m
 = 0;

539 
mpz_dbl_dig_sig�d_t
 
b�row
 = 0;

540 
mpz_dig_t
 *
n
 = 
num_dig
 - 
d�_�n
;� <�um_dig; ++n, ++
d
) {

542 
d_n�m
 = ((
mpz_dbl_dig_t
)*
d
 << 
n�m_shi�
�| (d_n�m >> 
DIG_SIZE
);

544 
mpz_dbl_dig_t
 
x
 = (mpz_dbl_dig_t)
quo
 * (
d_n�m
 & 
DIG_MASK
);

546 
mpz_dbl_dig_sig�d_t
 
low_digs
 = (
b�row
 & 
DIG_MASK
�+ *
n
 - (
x
 & DIG_MASK);

548 *
n
 = 
low_digs
 & 
DIG_MASK
;

550 
b�row
 = (b�row >> 
DIG_SIZE
�- (
x
 >> DIG_SIZE�+ (
low_digs
 >> DIG_SIZE);

564 
b�row
 +�*
num_dig
;

565 ; 
b�row
 !�0; --
quo
) {

566 
d
 = 
d�_dig
;

567 
d_n�m
 = 0;

568 
mpz_dbl_dig_t
 
��y
 = 0;

569 
mpz_dig_t
 *
n
 = 
num_dig
 - 
d�_�n
;� <�um_dig; ++n, ++
d
) {

570 
d_n�m
 = ((
mpz_dbl_dig_t
)*
d
 << 
n�m_shi�
�| (d_n�m >> 
DIG_SIZE
);

571 
��y
 +�(
mpz_dbl_dig_t
)*
n
 + (
d_n�m
 & 
DIG_MASK
);

572 *
n
 = 
��y
 & 
DIG_MASK
;

573 
��y
 >>�
DIG_SIZE
;

575 
b�row
 +�
��y
;

579 *
quo_dig
 = 
quo
 & 
DIG_MASK
;

580 --
quo_dig
;

583 --
num_dig
;

584 --(*
num_�n
);

588 
mpz_dig_t
 *
num
 = 
�ig_num_dig
 + *
num_�n
 - 1, 
��y
 = 0;�um >= orig_num_dig; --num) {

589 
mpz_dig_t
 
n
 = *
num
;

590 *
num
 = ((
n
 >> 
n�m_shi�
�| 
��y
�& 
DIG_MASK
;

591 
��y
 = (
mpz_dbl_dig_t
)
n
 << (
DIG_SIZE
 - 
n�m_shi�
);

596 *
quo_�n
 > 0 && 
�ig_quo_dig
[*quo_len - 1] == 0) {

597 --(*
quo_�n
);

600 *
num_�n
 > 0 && 
�ig_num_dig
[*num_len - 1] == 0) {

601 --(*
num_�n
);

603 
	}
}

605 
	#MIN_ALLOC
 (2)

	)

607 
	$mpz_��_z�o
(
mpz_t
 *
z
) {

608 
z
->
�g
 = 0;

609 
z
->
fixed_dig
 = 0;

610 
z
->
�loc
 = 0;

611 
z
->
�n
 = 0;

612 
z
->
dig
 = 
NULL
;

613 
	}
}

615 
	$mpz_��_�om_�t
(
mpz_t
 *
z
, 
mp_�t_t
 
v�
) {

616 
	`mpz_��_z�o
(
z
);

617 
	`mpz_�t_�om_�t
(
z
, 
v�
);

618 
	}
}

620 
	$mpz_��_fixed_�om_�t
(
mpz_t
 *
z
, 
mpz_dig_t
 *
dig
, 
size_t
 
�loc
, 
mp_�t_t
 
v�
) {

621 
z
->
�g
 = 0;

622 
z
->
fixed_dig
 = 1;

623 
z
->
�loc
 =�lloc;

624 
z
->
�n
 = 0;

625 
z
->
dig
 = dig;

626 
	`mpz_�t_�om_�t
(
z
, 
v�
);

627 
	}
}

629 
	$mpz_de��
(
mpz_t
 *
z
) {

630 i�(
z
 !�
NULL
 && !z->
fixed_dig
) {

631 
	`m_d�
(
mpz_dig_t
, 
z
->
dig
, z->
�loc
);

633 
	}
}

636 
the�
 
fun�i�s
 
�e
 
unu�d


638 
mpz_t
 *
	$mpz_z�o
() {

639 
mpz_t
 *
z
 = 
	`m_�w_obj
(mpz_t);

640 
	`mpz_��_z�o
(
z
);

641  
z
;

642 
	}
}

644 
mpz_t
 *
	$mpz_�om_�t
(
mp_�t_t
 
v�
) {

645 
mpz_t
 *
z
 = 
	`mpz_z�o
();

646 
	`mpz_�t_�om_�t
(
z
, 
v�
);

647  
z
;

648 
	}
}

650 
mpz_t
 *
	$mpz_�om_�
(
v�
, 
bo�
 
is_sig�d
) {

651 
mpz_t
 *
z
 = 
	`mpz_z�o
();

652 
	`mpz_�t_�om_�
(
z
, 
v�
, 
is_sig�d
);

653  
z
;

654 
	}
}

656 #i�
MICROPY_PY_BUILTINS_FLOAT


657 
mpz_t
 *
	$mpz_�om_��t
(
mp_��t_t
 
v�
) {

658 
mpz_t
 *
z
 = 
	`mpz_z�o
();

659 
	`mpz_�t_�om_��t
(
z
, 
v�
);

660  
z
;

661 
	}
}

664 
mpz_t
 *
	$mpz_�om_�r
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
) {

665 
mpz_t
 *
z
 = 
	`mpz_z�o
();

666 
	`mpz_�t_�om_�r
(
z
, 
�r
, 
�n
, 
�g
, 
ba�
);

667  
z
;

668 
	}
}

671 
	$mpz_�
(
mpz_t
 *
z
) {

672 i�(
z
 !�
NULL
) {

673 
	`m_d�
(
mpz_dig_t
, 
z
->
dig
, z->
�loc
);

674 
	`m_d�_obj
(
mpz_t
, 
z
);

676 
	}
}

678 
	$mpz_�ed_dig
(
mpz_t
 *
z
, 
size_t
 
�ed
) {

679 i�(
�ed
 < 
MIN_ALLOC
) {

680 
�ed
 = 
MIN_ALLOC
;

683 i�(
z
->
dig
 =�
NULL
 || z->
�loc
 < 
�ed
) {

686 
	`as��
(!
z
->
fixed_dig
);

687 
z
->
dig
 = 
	`m_��w
(
mpz_dig_t
, z->dig, z->
�loc
, 
�ed
);

688 
z
->
�loc
 = 
�ed
;

690 
	}
}

692 
mpz_t
 *
	$mpz_��e
(cڡ 
mpz_t
 *
�c
) {

693 
	`as��
(
�c
->
�loc
 != 0);

694 
mpz_t
 *
z
 = 
	`m_�w_obj
(mpz_t);

695 
z
->
�g
 = 
�c
->neg;

696 
z
->
fixed_dig
 = 0;

697 
z
->
�loc
 = 
�c
->alloc;

698 
z
->
�n
 = 
�c
->len;

699 
z
->
dig
 = 
	`m_�w
(
mpz_dig_t
, z->
�loc
);

700 
	`mem�y
(
z
->
dig
, 
�c
->dig, src->
�loc
 * (
mpz_dig_t
));

701  
z
;

702 
	}
}

707 
	$mpz_�t
(
mpz_t
 *
de�
, cڡ mpz_�*
�c
) {

708 
	`mpz_�ed_dig
(
de�
, 
�c
->
�n
);

709 
de�
->
�g
 = 
�c
->neg;

710 
de�
->
�n
 = 
�c
->len;

711 
	`mem�y
(
de�
->
dig
, 
�c
->dig, src->
�n
 * (
mpz_dig_t
));

712 
	}
}

714 
	$mpz_�t_�om_�t
(
mpz_t
 *
z
, 
mp_�t_t
 
v�
) {

715 i�(
v�
 == 0) {

716 
z
->
�g
 = 0;

717 
z
->
�n
 = 0;

721 
	`mpz_�ed_dig
(
z
, 
MPZ_NUM_DIG_FOR_INT
);

723 
mp_u�t_t
 
uv�
;

724 i�(
v�
 < 0) {

725 
z
->
�g
 = 1;

726 
uv�
 = -
v�
;

728 
z
->
�g
 = 0;

729 
uv�
 = 
v�
;

732 
z
->
�n
 = 0;

733 
uv�
 > 0) {

734 
z
->
dig
[z->
�n
++] = 
uv�
 & 
DIG_MASK
;

735 
uv�
 >>�
DIG_SIZE
;

737 
	}
}

739 
	$mpz_�t_�om_�
(
mpz_t
 *
z
, 
v�
, 
bo�
 
is_sig�d
) {

740 
	`mpz_�ed_dig
(
z
, 
MPZ_NUM_DIG_FOR_LL
);

742 
uv�
;

743 i�(
is_sig�d
 && 
v�
 < 0) {

744 
z
->
�g
 = 1;

745 
uv�
 = -()
v�
;

747 
z
->
�g
 = 0;

748 
uv�
 = 
v�
;

751 
z
->
�n
 = 0;

752 
uv�
 > 0) {

753 
z
->
dig
[z->
�n
++] = 
uv�
 & 
DIG_MASK
;

754 
uv�
 >>�
DIG_SIZE
;

756 
	}
}

758 #i�
MICROPY_PY_BUILTINS_FLOAT


759 
	$mpz_�t_�om_��t
(
mpz_t
 *
z
, 
mp_��t_t
 
�c
) {

760 
mp_��t_uni�_t
 
u
 = {
�c
};

761 
z
->
�g
 = 
u
.
p
.
sgn
;

762 i�(
u
.
p
.
exp
 == 0) {

764 
	`mpz_�t_�om_�t
(
z
, 0);

765 } i�(
u
.
p
.
exp
 =�((1 << 
MP_FLOAT_EXP_BITS
) - 1)) {

768 
	`mpz_�t_�om_�t
(
z
, 0);

770 cڡ 
adj_exp
 = ()
u
.
p
.
exp
 - 
MP_FLOAT_EXP_BIAS
;

771 i�(
adj_exp
 < 0) {

773 
	`mpz_�t_�om_�t
(
z
, 0);

774 } i�(
adj_exp
 == 0) {

776 
	`mpz_�t_�om_�t
(
z
, 1);

779 cڡ 
dig_�t
 = (
adj_exp
 + 1 + (
DIG_SIZE
 - 1)) / DIG_SIZE;

780 cڡ 
�m
 = 
adj_exp
 % 
DIG_SIZE
;

781 
dig_�d
, 
sh�
;

782 
mp_��t_u�t_t
 
�c
 = 
u
.
p
.��| ((mp_��t_u�t_t)1 << 
MP_FLOAT_FRAC_BITS
);

784 i�(
adj_exp
 < 
MP_FLOAT_FRAC_BITS
) {

785 
sh�
 = 0;

786 
dig_�d
 = 0;

787 
�c
 >>�
MP_FLOAT_FRAC_BITS
 - 
adj_exp
;

789 
sh�
 = (
�m
 - 
MP_FLOAT_FRAC_BITS
�% 
DIG_SIZE
;

790 
dig_�d
 = (
adj_exp
 - 
MP_FLOAT_FRAC_BITS
�/ 
DIG_SIZE
;

792 
	`mpz_�ed_dig
(
z
, 
dig_�t
);

793 
z
->
�n
 = 
dig_�t
;

794 i�(
dig_�d
 != 0) {

795 
	`mem�t
(
z
->
dig
, 0, 
dig_�d
 * (
mpz_dig_t
));

797 i�(
sh�
 != 0) {

798 
z
->
dig
[
dig_�d
++] = (
�c
 << 
sh�
�& 
DIG_MASK
;

799 
�c
 >>�
DIG_SIZE
 - 
sh�
;

801 #i�
DIG_SIZE
 < (
MP_FLOAT_FRAC_BITS
 + 1)

802 
dig_�d
 !�
dig_�t
) {

803 
z
->
dig
[
dig_�d
++] = 
�c
 & 
DIG_MASK
;

804 
�c
 >>�
DIG_SIZE
;

807 i�(
dig_�d
 !�
dig_�t
) {

808 
z
->
dig
[
dig_�d
] = 
�c
;

813 
	}
}

817 
size_t
 
	$mpz_�t_�om_�r
(
mpz_t
 *
z
, cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
) {

818 
	`as��
(
ba�
 <= 36);

820 cڡ *
cur
 = 
�r
;

821 cڡ *
t�
 = 
�r
 + 
�n
;

823 
	`mpz_�ed_dig
(
z
, 
�n
 * 8 / 
DIG_SIZE
 + 1);

825 i�(
�g
) {

826 
z
->
�g
 = 1;

828 
z
->
�g
 = 0;

831 
z
->
�n
 = 0;

832 ; 
cur
 < 
t�
; ++cur) {

834 
mp_u�t_t
 
v
 = *
cur
;

835 i�('0' <�
v
 && v <= '9') {

836 
v
 -= '0';

837 } i�('A' <�
v
 && v <= 'Z') {

838 
v
 -= 'A' - 10;

839 } i�('a' <�
v
 && v <= 'z') {

840 
v
 -= 'a' - 10;

844 i�(
v
 >�
ba�
) {

847 
z
->
�n
 = 
	`m�_mul_dig_add_dig
(z->
dig
, z->�n, 
ba�
, 
v
);

850  
cur
 - 
�r
;

851 
	}
}

853 
	$mpz_�t_�om_by�s
(
mpz_t
 *
z
, 
bo�
 
big_�d�n
, 
size_t
 
�n
, cڡ 
by�
 *
buf
) {

854 
d��
 = 1;

855 i�(
big_�d�n
) {

856 
buf
 +�
�n
 - 1;

857 
d��
 = -1;

860 
	`mpz_�ed_dig
(
z
, (
�n
 * 8 + 
DIG_SIZE
 - 1) / DIG_SIZE);

862 
mpz_dig_t
 
d
 = 0;

863 
num_b�s
 = 0;

864 
z
->
�g
 = 0;

865 
z
->
�n
 = 0;

866 
�n
) {

867 
�n
 && 
num_b�s
 < 
DIG_SIZE
) {

868 
d
 |�*
buf
 << 
num_b�s
;

869 
num_b�s
 += 8;

870 
buf
 +�
d��
;

871 
�n
--;

873 
z
->
dig
[z->
�n
++] = 
d
 & 
DIG_MASK
;

875 #i�
DIG_SIZE
 != 8 && DIG_SIZE != 16 && DIG_SIZE != 32

876 
d
 >>�
DIG_SIZE
;

878 
d
 = 0;

880 
num_b�s
 -�
DIG_SIZE
;

883 
z
->
�n
 = 
	`m�_�move_�a��g_z�os
(z->
dig
, z->dig + z->len);

884 
	}
}

887 
the�
 
fun�i�s
 
�e
 
unu�d


889 
bo�
 
	$mpz_is_pos
(cڡ 
mpz_t
 *
z
) {

890  
z
->
�n
 > 0 && z->
�g
 == 0;

891 
	}
}

893 
bo�
 
	$mpz_is_odd
(cڡ 
mpz_t
 *
z
) {

894  
z
->
�n
 > 0 && (z->
dig
[0] & 1) != 0;

895 
	}
}

897 
bo�
 
	$mpz_is_ev�
(cڡ 
mpz_t
 *
z
) {

898  
z
->
�n
 =�0 || (z->
dig
[0] & 1) == 0;

899 
	}
}

902 
	$mpz_cmp
(cڡ 
mpz_t
 *
z1
, cڡ mpz_�*
z2
) {

903 
cmp
 = ()
z2
->
�g
 - ()
z1
->neg;

904 i�(
cmp
 != 0) {

905  
cmp
;

907 
cmp
 = 
	`m�_cmp
(
z1
->
dig
, z1->
�n
, 
z2
->dig, z2->len);

908 i�(
z1
->
�g
 != 0) {

909 
cmp
 = -cmp;

911  
cmp
;

912 
	}
}

917 
mp_�t_t
 
	$mpz_cmp_sml_�t
(cڡ 
mpz_t
 *
z
, 
mp_�t_t
 
sml_�t
) {

918 
mp_�t_t
 
cmp
;

919 i�(
z
->
�g
 == 0) {

920 i�(
sml_�t
 < 0) {

923 i�(
sml_�t
 == 0) {

924 i�(
z
->
�n
 == 0) {

929 i�(
z
->
�n
 == 0) {

932 
	`as��
(
sml_�t
 < (1 << 
DIG_SIZE
));

933 i�(
z
->
�n
 != 1) {

936 
cmp
 = 
z
->
dig
[0] - 
sml_�t
;

938 i�(
sml_�t
 > 0) {

941 i�(
sml_�t
 == 0) {

942 i�(
z
->
�n
 == 0) {

947 i�(
z
->
�n
 == 0) {

950 
	`as��
(
sml_�t
 > -(1 << 
DIG_SIZE
));

951 i�(
z
->
�n
 != 1) {

954 
cmp
 = -
z
->
dig
[0] - 
sml_�t
;

956 i�(
cmp
 < 0) {

959 i�(
cmp
 > 0) {

963 
	}
}

967 
the�
 
fun�i�s
 
�e
 
unu�d


971 
mpz_t
 *
	$mpz_abs
(cڡ 
mpz_t
 *
z
) {

973 
mpz_t
 *
z2
 = 
	`mpz_��e
(
z
);

974 
z2
->
�g
 = 0;

975  
z2
;

976 
	}
}

980 
mpz_t
 *
	$mpz_�g
(cڡ 
mpz_t
 *
z
) {

982 
mpz_t
 *
z2
 = 
	`mpz_��e
(
z
);

983 
z2
->
�g
 = 1 - z2->neg;

984  
z2
;

985 
	}
}

990 
mpz_t
 *
	$mpz_add
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

991 
mpz_t
 *
z
 = 
	`mpz_z�o
();

992 
	`mpz_add_��
(
z
, 
lhs
, 
rhs
);

993  
z
;

994 
	}
}

999 
mpz_t
 *
	$mpz_sub
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

1000 
mpz_t
 *
z
 = 
	`mpz_z�o
();

1001 
	`mpz_sub_��
(
z
, 
lhs
, 
rhs
);

1002  
z
;

1003 
	}
}

1008 
mpz_t
 *
	$mpz_mul
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

1009 
mpz_t
 *
z
 = 
	`mpz_z�o
();

1010 
	`mpz_mul_��
(
z
, 
lhs
, 
rhs
);

1011  
z
;

1012 
	}
}

1017 
mpz_t
 *
	$mpz_pow
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

1018 
mpz_t
 *
z
 = 
	`mpz_z�o
();

1019 
	`mpz_pow_��
(
z
, 
lhs
, 
rhs
);

1020  
z
;

1021 
	}
}

1028 
	$mpz_divmod
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
, mpz_�**
quo
, mpz_�**
�m
) {

1029 *
quo
 = 
	`mpz_z�o
();

1030 *
�m
 = 
	`mpz_z�o
();

1031 
	`mpz_divmod_��
(*
quo
, *
�m
, 
lhs
, 
rhs
);

1032 
	}
}

1038 
	$mpz_abs_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
) {

1039 i�(
de�
 !�
z
) {

1040 
	`mpz_�t
(
de�
, 
z
);

1042 
de�
->
�g
 = 0;

1043 
	}
}

1048 
	$mpz_�g_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
) {

1049 i�(
de�
 !�
z
) {

1050 
	`mpz_�t
(
de�
, 
z
);

1052 i�(
de�
->
�n
) {

1053 
de�
->
�g
 = 1 - dest->neg;

1055 
	}
}

1060 
	$mpz_n�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
) {

1061 i�(
de�
 !�
z
) {

1062 
	`mpz_�t
(
de�
, 
z
);

1064 i�(
de�
->
�n
 == 0) {

1065 
	`mpz_�ed_dig
(
de�
, 1);

1066 
de�
->
dig
[0] = 1;

1067 
de�
->
�n
 = 1;

1068 
de�
->
�g
 = 1;

1069 } i�(
de�
->
�g
) {

1070 
de�
->
�g
 = 0;

1071 
mpz_dig_t
 
k
 = 1;

1072 
de�
->
�n
 = 
	`m�_sub
(de�->
dig
, de�->dig, de�->�n, &
k
, 1);

1074 
	`mpz_�ed_dig
(
de�
, de�->
�n
 + 1);

1075 
mpz_dig_t
 
k
 = 1;

1076 
de�
->
�n
 = 
	`m�_add
(de�->
dig
, de�->dig, de�->�n, &
k
, 1);

1077 
de�
->
�g
 = 1;

1079 
	}
}

1084 
	$mpz_shl_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, 
mp_u�t_t
 
rhs
) {

1085 i�(
lhs
->
�n
 =�0 || 
rhs
 == 0) {

1086 
	`mpz_�t
(
de�
, 
lhs
);

1088 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + (
rhs
 + 
DIG_SIZE
 - 1) / DIG_SIZE);

1089 
de�
->
�n
 = 
	`m�_shl
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
);

1090 
de�
->
�g
 = 
lhs
->neg;

1092 
	}
}

1097 
	$mpz_shr_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, 
mp_u�t_t
 
rhs
) {

1098 i�(
lhs
->
�n
 =�0 || 
rhs
 == 0) {

1099 
	`mpz_�t
(
de�
, 
lhs
);

1101 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1102 
de�
->
�n
 = 
	`m�_shr
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
);

1103 
de�
->
�g
 = 
lhs
->neg;

1104 i�(
de�
->
�g
) {

1106 
mp_u�t_t
 
n_wh�e
 = 
rhs
 / 
DIG_SIZE
;

1107 
mp_u�t_t
 
n_��
 = 
rhs
 % 
DIG_SIZE
;

1108 
mpz_dig_t
 
round_up
 = 0;

1109 
size_t
 
i
 = 0; i < 
lhs
->
�n
 && i < 
n_wh�e
; i++) {

1110 i�(
lhs
->
dig
[
i
] != 0) {

1111 
round_up
 = 1;

1115 i�(
n_wh�e
 < 
lhs
->
�n
 && (lhs->
dig
[n_wh�e] & ((1 << 
n_��
) - 1)) != 0) {

1116 
round_up
 = 1;

1118 i�(
round_up
) {

1119 i�(
de�
->
�n
 == 0) {

1121 
de�
->
dig
[0] = 1;

1122 
de�
->
�n
 = 1;

1125 
de�
->
�n
 = 
	`m�_add
(de�->
dig
, de�->dig, de�->�n, &
round_up
, 1);

1130 
	}
}

1135 
	$mpz_add_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1136 i�(
	`m�_cmp
(
lhs
->
dig
,�hs->
�n
, 
rhs
->dig,�hs->len) < 0) {

1137 cڡ 
mpz_t
 *
�mp
 = 
lhs
;

1138 
lhs
 = 
rhs
;

1139 
rhs
 = 
�mp
;

1142 i�(
lhs
->
�g
 =�
rhs
->neg) {

1143 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 1);

1144 
de�
->
�n
 = 
	`m�_add
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1146 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1147 
de�
->
�n
 = 
	`m�_sub
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1150 
de�
->
�g
 = 
lhs
->�g & !!de�->
�n
;

1151 
	}
}

1156 
	$mpz_sub_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1157 
bo�
 
�g
 = 
�l�
;

1159 i�(
	`m�_cmp
(
lhs
->
dig
,�hs->
�n
, 
rhs
->dig,�hs->len) < 0) {

1160 cڡ 
mpz_t
 *
�mp
 = 
lhs
;

1161 
lhs
 = 
rhs
;

1162 
rhs
 = 
�mp
;

1163 
�g
 = 
�ue
;

1166 i�(
lhs
->
�g
 !�
rhs
->neg) {

1167 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 1);

1168 
de�
->
�n
 = 
	`m�_add
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1170 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1171 
de�
->
�n
 = 
	`m�_sub
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1174 i�(
de�
->
�n
 == 0) {

1175 
de�
->
�g
 = 0;

1176 } i�(
�g
) {

1177 
de�
->
�g
 = 1 - 
lhs
->neg;

1179 
de�
->
�g
 = 
lhs
->neg;

1181 
	}
}

1186 
	$mpz_�d_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1188 i�(
lhs
->
�n
 < 
rhs
->len) {

1189 cڡ 
mpz_t
 *
�mp
 = 
lhs
;

1190 
lhs
 = 
rhs
;

1191 
rhs
 = 
�mp
;

1194 #i�
MICROPY_OPT_MPZ_BITWISE


1196 i�((0 =�
lhs
->
�g
�&& (0 =�
rhs
->neg)) {

1197 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1198 
de�
->
�n
 = 
	`m�_�d
(de�->
dig
, 
lhs
->dig, 
rhs
->dig,�hs->len);

1199 
de�
->
�g
 = 0;

1201 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 1);

1202 
de�
->
�n
 = 
	`m�_�d_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len,

1203 
lhs
->
�g
 =�
rhs
->neg, 0 !=�hs->neg, 0 !=�hs->neg);

1204 
de�
->
�g
 = 
lhs
->�g & 
rhs
->neg;

1209 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + (lhs->
�g
 || 
rhs
->neg));

1210 
de�
->
�n
 = 
	`m�_�d_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len,

1211 (
lhs
->
�g
 =�
rhs
->neg) ?�hs->neg : 0,�hs->neg,�hs->neg);

1212 
de�
->
�g
 = 
lhs
->�g & 
rhs
->neg;

1215 
	}
}

1220 
	$mpz_�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1222 i�(
lhs
->
�n
 < 
rhs
->len) {

1223 cڡ 
mpz_t
 *
�mp
 = 
lhs
;

1224 
lhs
 = 
rhs
;

1225 
rhs
 = 
�mp
;

1228 #i�
MICROPY_OPT_MPZ_BITWISE


1230 i�((0 =�
lhs
->
�g
�&& (0 =�
rhs
->neg)) {

1231 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1232 
de�
->
�n
 = 
	`m�_�
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1233 
de�
->
�g
 = 0;

1235 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 1);

1236 
de�
->
�n
 = 
	`m�_�_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len,

1237 0 !�
lhs
->
�g
, 0 !�
rhs
->neg);

1238 
de�
->
�g
 = 1;

1243 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + (lhs->
�g
 || 
rhs
->neg));

1244 
de�
->
�n
 = 
	`m�_�_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len,

1245 (
lhs
->
�g
 || 
rhs
->neg),�hs->neg,�hs->neg);

1246 
de�
->
�g
 = 
lhs
->�g | 
rhs
->neg;

1249 
	}
}

1254 
	$mpz_x�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1256 i�(
lhs
->
�n
 < 
rhs
->len) {

1257 cڡ 
mpz_t
 *
�mp
 = 
lhs
;

1258 
lhs
 = 
rhs
;

1259 
rhs
 = 
�mp
;

1262 #i�
MICROPY_OPT_MPZ_BITWISE


1264 i�(
lhs
->
�g
 =�
rhs
->neg) {

1265 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
);

1266 i�(
lhs
->
�g
 == 0) {

1267 
de�
->
�n
 = 
	`m�_x�
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1269 
de�
->
�n
 = 
	`m�_x�_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len, 0, 0, 0);

1271 
de�
->
�g
 = 0;

1273 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 1);

1274 
de�
->
�n
 = 
	`m�_x�_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len, 1,

1275 0 =�
lhs
->
�g
, 0 =�
rhs
->neg);

1276 
de�
->
�g
 = 1;

1281 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + (lhs->
�g
 || 
rhs
->neg));

1282 
de�
->
�n
 = 
	`m�_x�_�g
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len,

1283 (
lhs
->
�g
 !�
rhs
->neg), 0 ==�hs->neg, 0 ==�hs->neg);

1284 
de�
->
�g
 = 
lhs
->�g ^ 
rhs
->neg;

1287 
	}
}

1292 
	$mpz_mul_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1293 i�(
lhs
->
�n
 =�0 || 
rhs
->len == 0) {

1294 
	`mpz_�t_�om_�t
(
de�
, 0);

1298 
mpz_t
 *
�mp
 = 
NULL
;

1299 i�(
lhs
 =�
de�
) {

1300 
lhs
 = 
�mp
 = 
	`mpz_��e
(lhs);

1301 i�(
rhs
 =�
de�
) {

1302 
rhs
 = 
lhs
;

1304 } i�(
rhs
 =�
de�
) {

1305 
rhs
 = 
�mp
 = 
	`mpz_��e
(rhs);

1308 
	`mpz_�ed_dig
(
de�
, 
lhs
->
�n
 + 
rhs
->len);

1309 
	`mem�t
(
de�
->
dig
, 0, de�->
�loc
 * (
mpz_dig_t
));

1310 
de�
->
�n
 = 
	`m�_mul
(de�->
dig
, 
lhs
->dig,�hs->�n, 
rhs
->dig,�hs->len);

1312 i�(
lhs
->
�g
 =�
rhs
->neg) {

1313 
de�
->
�g
 = 0;

1315 
de�
->
�g
 = 1;

1318 
	`mpz_�
(
�mp
);

1319 
	}
}

1324 
	$mpz_pow_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1325 i�(
lhs
->
�n
 =�0 || 
rhs
->
�g
 != 0) {

1326 
	`mpz_�t_�om_�t
(
de�
, 0);

1330 i�(
rhs
->
�n
 == 0) {

1331 
	`mpz_�t_�om_�t
(
de�
, 1);

1335 
mpz_t
 *
x
 = 
	`mpz_��e
(
lhs
);

1336 
mpz_t
 *
n
 = 
	`mpz_��e
(
rhs
);

1338 
	`mpz_�t_�om_�t
(
de�
, 1);

1340 
n
->
�n
 > 0) {

1341 i�((
n
->
dig
[0] & 1) != 0) {

1342 
	`mpz_mul_��
(
de�
, de�, 
x
);

1344 
n
->
�n
 = 
	`m�_shr
�->
dig
,�->dig,�->len, 1);

1345 i�(
n
->
�n
 == 0) {

1348 
	`mpz_mul_��
(
x
, x, x);

1351 
	`mpz_�
(
x
);

1352 
	`mpz_�
(
n
);

1353 
	}
}

1358 
	$mpz_pow3_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
, cڡ mpz_�*
mod
) {

1359 i�(
lhs
->
�n
 =�0 || 
rhs
->
�g
 !�0 || (
mod
->��=�1 && mod->
dig
[0] == 1)) {

1360 
	`mpz_�t_�om_�t
(
de�
, 0);

1364 
	`mpz_�t_�om_�t
(
de�
, 1);

1366 i�(
rhs
->
�n
 == 0) {

1370 
mpz_t
 *
x
 = 
	`mpz_��e
(
lhs
);

1371 
mpz_t
 *
n
 = 
	`mpz_��e
(
rhs
);

1372 
mpz_t
 
quo
;

1373 
	`mpz_��_z�o
(&
quo
);

1375 
n
->
�n
 > 0) {

1376 i�((
n
->
dig
[0] & 1) != 0) {

1377 
	`mpz_mul_��
(
de�
, de�, 
x
);

1378 
	`mpz_divmod_��
(&
quo
, 
de�
, de�, 
mod
);

1380 
n
->
�n
 = 
	`m�_shr
�->
dig
,�->dig,�->len, 1);

1381 i�(
n
->
�n
 == 0) {

1384 
	`mpz_mul_��
(
x
, x, x);

1385 
	`mpz_divmod_��
(&
quo
, 
x
, x, 
mod
);

1388 
	`mpz_de��
(&
quo
);

1389 
	`mpz_�
(
x
);

1390 
	`mpz_�
(
n
);

1391 
	}
}

1394 
the�
 
fun�i�s
 
�e
 
unu�d


1402 
mpz_t
 *
	$mpz_gcd
(cڡ 
mpz_t
 *
z1
, cڡ mpz_�*
z2
) {

1403 i�(
z1
->
�n
 == 0) {

1405 
mpz_t
 *
a
 = 
	`mpz_��e
(
z2
);

1406 
a
->
�g
 = 0;

1407  
a
;

1408 } i�(
z2
->
�n
 == 0) {

1409 
mpz_t
 *
a
 = 
	`mpz_��e
(
z1
);

1410 
a
->
�g
 = 0;

1411  
a
;

1414 
mpz_t
 *
a
 = 
	`mpz_��e
(
z1
);

1415 
mpz_t
 *
b
 = 
	`mpz_��e
(
z2
);

1416 
mpz_t
 
c
;

1417 
	`mpz_��_z�o
(&
c
);

1418 
a
->
�g
 = 0;

1419 
b
->
�g
 = 0;

1422 i�(
	`mpz_cmp
(
a
, 
b
) < 0) {

1423 i�(
a
->
�n
 == 0) {

1424 
	`mpz_�
(
a
);

1425 
	`mpz_de��
(&
c
);

1426  
b
;

1428 
mpz_t
 *
t
 = 
a
;

1429 
a
 = 
b
;

1430 
b
 = 
t
;

1432 i�(!(
b
->
�n
 >�2 || (b->��=�1 && b->
dig
[0] > 1))) {

1435 
	`mpz_�t
(&
c
, 
b
);

1437 
	`mpz_add_��
(&
c
, &c, &c);

1438 } 
	`mpz_cmp
(&
c
, 
a
) <= 0);

1439 
c
.
�n
 = 
	`m�_shr
(c.
dig
, c.dig, c.len, 1);

1440 
	`mpz_sub_��
(
a
,�, &
c
);

1443 
	`mpz_de��
(&
c
);

1445 i�(
b
->
�n
 =�1 && b->
dig
[0] == 1) {

1446 
	`mpz_�
(
a
);

1447  
b
;

1449 
	`mpz_�
(
b
);

1450  
a
;

1452 
	}
}

1460 
mpz_t
 *
	$mpz_lcm
(cڡ 
mpz_t
 *
z1
, cڡ mpz_�*
z2
) {

1461 i�(
z1
->
�n
 =�0 || 
z2
->len == 0) {

1462  
	`mpz_z�o
();

1465 
mpz_t
 *
gcd
 = 
	`mpz_gcd
(
z1
, 
z2
);

1466 
mpz_t
 *
quo
 = 
	`mpz_z�o
();

1467 
mpz_t
 *
�m
 = 
	`mpz_z�o
();

1468 
	`mpz_divmod_��
(
quo
, 
�m
, 
z1
, 
gcd
);

1469 
	`mpz_mul_��
(
�m
, 
quo
, 
z2
);

1470 
	`mpz_�
(
gcd
);

1471 
	`mpz_�
(
quo
);

1472 
�m
->
�g
 = 0;

1473  
�m
;

1474 
	}
}

1483 
	$mpz_divmod_��
(
mpz_t
 *
de�_quo
, mpz_�*
de�_�m
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
) {

1484 
	`as��
(!
	`mpz_is_z�o
(
rhs
));

1486 
	`mpz_�ed_dig
(
de�_quo
, 
lhs
->
�n
 + 1);

1487 
	`mem�t
(
de�_quo
->
dig
, 0, (
lhs
->
�n
 + 1�* (
mpz_dig_t
));

1488 
de�_quo
->
�g
 = 0;

1489 
de�_quo
->
�n
 = 0;

1490 
	`mpz_�ed_dig
(
de�_�m
, 
lhs
->
�n
 + 1);

1491 
	`mpz_�t
(
de�_�m
, 
lhs
);

1492 
	`m�_div
(
de�_�m
->
dig
, &de�_�m->
�n
, 
rhs
->dig,�hs->�n, 
de�_quo
->dig, &dest_quo->len);

1493 
de�_�m
->
�g
 &�!!de�_�m->
�n
;

1496 i�(
lhs
->
�g
 !�
rhs
->neg) {

1497 
de�_quo
->
�g
 = !!de�_quo->
�n
;

1498 i�(!
	`mpz_is_z�o
(
de�_�m
)) {

1499 
mpz_t
 
mpz�e
;

1500 
	`mpz_��_�om_�t
(&
mpz�e
, -1);

1501 
	`mpz_add_��
(
de�_quo
, de�_quo, &
mpz�e
);

1502 
	`mpz_add_��
(
de�_�m
, de�_�m, 
rhs
);

1505 
	}
}

1508 
the�
 
fun�i�s
 
�e
 
unu�d


1513 
mpz_t
 *
	$mpz_div
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

1514 
mpz_t
 *
quo
 = 
	`mpz_z�o
();

1515 
mpz_t
 
�m
;

1516 
	`mpz_��_z�o
(&
�m
);

1517 
	`mpz_divmod_��
(
quo
, &
�m
, 
lhs
, 
rhs
);

1518 
	`mpz_de��
(&
�m
);

1519  
quo
;

1520 
	}
}

1525 
mpz_t
 *
	$mpz_mod
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
) {

1526 
mpz_t
 
quo
;

1527 
	`mpz_��_z�o
(&
quo
);

1528 
mpz_t
 *
�m
 = 
	`mpz_z�o
();

1529 
	`mpz_divmod_��
(&
quo
, 
�m
, 
lhs
, 
rhs
);

1530 
	`mpz_de��
(&
quo
);

1531  
�m
;

1532 
	}
}

1536 
mp_�t_t
 
	$mpz_hash
(cڡ 
mpz_t
 *
z
) {

1537 
mp_u�t_t
 
v�
 = 0;

1538 
mpz_dig_t
 *
d
 = 
z
->
dig
 + z->
�n
;

1540 
d
-- > 
z
->
dig
) {

1541 
v�
 = (v� << 
DIG_SIZE
�| *
d
;

1544 i�(
z
->
�g
 != 0) {

1545 
v�
 = -val;

1548  
v�
;

1549 
	}
}

1551 
bo�
 
	$mpz_as_�t_checked
(cڡ 
mpz_t
 *
i
, 
mp_�t_t
 *
v�ue
) {

1552 
mp_u�t_t
 
v�
 = 0;

1553 
mpz_dig_t
 *
d
 = 
i
->
dig
 + i->
�n
;

1555 
d
-- > 
i
->
dig
) {

1556 i�(
v�
 > (~(
MP_OBJ_WORD_MSBIT_HIGH
�>> 
DIG_SIZE
)) {

1558  
�l�
;

1560 
v�
 = (v� << 
DIG_SIZE
�| *
d
;

1563 i�(
i
->
�g
 != 0) {

1564 
v�
 = -val;

1567 *
v�ue
 = 
v�
;

1568  
�ue
;

1569 
	}
}

1571 
bo�
 
	$mpz_as_u�t_checked
(cڡ 
mpz_t
 *
i
, 
mp_u�t_t
 *
v�ue
) {

1572 i�(
i
->
�g
 != 0) {

1574  
�l�
;

1577 
mp_u�t_t
 
v�
 = 0;

1578 
mpz_dig_t
 *
d
 = 
i
->
dig
 + i->
�n
;

1580 
d
-- > 
i
->
dig
) {

1581 i�(
v�
 > (~(
MP_OBJ_WORD_MSBIT_HIGH
�>> (
DIG_SIZE
 - 1))) {

1583  
�l�
;

1585 
v�
 = (v� << 
DIG_SIZE
�| *
d
;

1588 *
v�ue
 = 
v�
;

1589  
�ue
;

1590 
	}
}

1592 
bo�
 
	$mpz_as_by�s
(cڡ 
mpz_t
 *
z
, 
bo�
 
big_�d�n
, bo� 
as_sig�d
, 
size_t
 
�n
, 
by�
 *
buf
) {

1593 
by�
 *
b
 = 
buf
;

1594 i�(
big_�d�n
) {

1595 
b
 +�
�n
;

1597 
mpz_dig_t
 *
zdig
 = 
z
->
dig
;

1598 
b�s
 = 0;

1599 
mpz_dbl_dig_t
 
d
 = 0;

1600 
mpz_dbl_dig_t
 
��y
 = 1;

1601 
size_t
 
ޒ
 = 
�n
;

1602 
bo�
 
ok
 = 
�ue
;

1603 
size_t
 
z�n
 = 
z
->
�n
; zlen > 0; --zlen) {

1604 
b�s
 +�
DIG_SIZE
;

1605 
d
 = (d << 
DIG_SIZE
�| *
zdig
++;

1606 ; 
b�s
 >�8; b��-�8, 
d
 >>= 8) {

1607 
mpz_dig_t
 
v�
 = 
d
;

1608 i�(
z
->
�g
) {

1609 
v�
 = (~v� & 0xff�+ 
��y
;

1610 
��y
 = 
v�
 >> 8;

1613 i�(!
ޒ
) {

1615 
ok
 = ok && ((
by�
)
v�
 == 0);

1619 i�(
big_�d�n
) {

1620 *--
b
 = 
v�
;

1622 *
b
++ = 
v�
;

1624 
ޒ
--;

1628 i�(
as_sig�d
 && 
ޒ
 =�0 && 
�n
 > 0) {

1630 
by�
 
mo�_sig
 = 
big_�d�n
 ? 
buf
[0] : buf[
�n
 - 1];

1631 
ok
 = ok && (
bo�
)(
mo�_sig
 & 0x80�=�(bo�)
z
->
�g
;

1634 
	`mem�t
(
big_�d�n
 ? 
buf
 : 
b
, 
z
->
�g
 ? 0xf�: 0x00, 
ޒ
);

1637  
ok
;

1638 
	}
}

1640 #i�
MICROPY_PY_BUILTINS_FLOAT


1641 
mp_��t_t
 
	$mpz_as_��t
(cڡ 
mpz_t
 *
i
) {

1642 
mp_��t_t
 
v�
 = 0;

1643 
mpz_dig_t
 *
d
 = 
i
->
dig
 + i->
�n
;

1645 
d
-- > 
i
->
dig
) {

1646 
v�
 = v� * 
DIG_BASE
 + *
d
;

1649 i�(
i
->
�g
 != 0) {

1650 
v�
 = -val;

1653  
v�
;

1654 
	}
}

1658 
this
 
fun�i�
 
is
 
unu�d


1659 *
	$mpz_as_�r
(cڡ 
mpz_t
 *
i
, 
ba�
) {

1660 *
s
 = 
	`m_�w
(, 
	`mp_�t_f�m�_size
(
	`mpz_max_num_b�s
(
i
), 
ba�
, 
NULL
, '\0'));

1661 
	`mpz_as_�r_��
(
i
, 
ba�
, 
NULL
, 'a', '\0', 
s
);

1662  
s
;

1663 
	}
}

1669 
size_t
 
	$mpz_as_�r_��
(cڡ 
mpz_t
 *
i
, 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
, *
�r
) {

1670 
	`as��
(
�r
 !�
NULL
);

1671 
	`as��
(2 <�
ba�
 && base <= 32);

1673 
size_t
 
��
 = 
i
->
�n
;

1675 *
s
 = 
�r
;

1676 i�(
��
 == 0) {

1677 i�(
�efix
) {

1678 *
�efix
) {

1679 *
s
++ = *
�efix
++;

1682 *
s
++ = '0';

1683 *
s
 = '\0';

1684  
s
 - 
�r
;

1688 
mpz_dig_t
 *
dig
 = 
	`m_�w
(mpz_dig_t, 
��
);

1689 
	`mem�y
(
dig
, 
i
->dig, 
��
 * (
mpz_dig_t
));

1692 *
ϡ_comma
 = 
�r
;

1693 
bo�
 
d�e
;

1695 
mpz_dig_t
 *
d
 = 
dig
 + 
��
;

1696 
mpz_dbl_dig_t
 
a
 = 0;

1699 --
d
 >�
dig
) {

1700 
a
 = (�<< 
DIG_SIZE
�| *
d
;

1701 *
d
 = 
a
 / 
ba�
;

1702 
a
 %�
ba�
;

1706 
a
 += '0';

1707 i�(
a
 > '9') {

1708 
a
 +�
ba�_ch�
 - '9' - 1;

1710 *
s
++ = 
a
;

1713 
d�e
 = 
�ue
;

1714 
d
 = 
dig
; d < dig + 
��
; ++d) {

1715 i�(*
d
 != 0) {

1716 
d�e
 = 
�l�
;

1720 i�(
comma
 && (
s
 - 
ϡ_comma
) == 3) {

1721 *
s
++ = 
comma
;

1722 
ϡ_comma
 = 
s
;

1725 !
d�e
);

1728 
	`m_d�
(
mpz_dig_t
, 
dig
, 
��
);

1730 i�(
�efix
) {

1731 cڡ *
p
 = &
�efix
[
	`���
(prefix)];

1732 
p
 > 
�efix
) {

1733 *
s
++ = *--
p
;

1736 i�(
i
->
�g
 != 0) {

1737 *
s
++ = '-';

1741 *
u
 = 
�r
, *
v
 = 
s
 - 1; u < v; ++u, --v) {

1742 
�mp
 = *
u
;

1743 *
u
 = *
v
;

1744 *
v
 = 
�mp
;

1747 *
s
 = '\0';

1749  
s
 - 
�r
;

1750 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpz.h

26 #i�de�
MICROPY_INCLUDED_PY_MPZ_H


27 
	#MICROPY_INCLUDED_PY_MPZ_H


	)

29 
	~<�d�t.h
>

31 
	~"py/mpc�fig.h
"

32 
	~"py/misc.h
"

47 #i�de�
MPZ_DIG_SIZE


48 #i�
def�ed
(
__x86_64__
�|| def�ed(
_WIN64
)

50 
	#MPZ_DIG_SIZE
 (32)

	)

53 
	#MPZ_DIG_SIZE
 (16)

	)

57 #i�
MPZ_DIG_SIZE
 > 16

58 
	#MPZ_DBL_DIG_SIZE
 (64)

	)

59 
u�t32_t
 
	tmpz_dig_t
;

60 
u�t64_t
 
	tmpz_dbl_dig_t
;

61 
�t64_t
 
	tmpz_dbl_dig_sig�d_t
;

62 #�i�
MPZ_DIG_SIZE
 > 8

63 
	#MPZ_DBL_DIG_SIZE
 (32)

	)

64 
u�t16_t
 
	tmpz_dig_t
;

65 
u�t32_t
 
	tmpz_dbl_dig_t
;

66 
�t32_t
 
	tmpz_dbl_dig_sig�d_t
;

67 #�i�
MPZ_DIG_SIZE
 > 4

68 
	#MPZ_DBL_DIG_SIZE
 (16)

	)

69 
u�t8_t
 
	tmpz_dig_t
;

70 
u�t16_t
 
	tmpz_dbl_dig_t
;

71 
�t16_t
 
	tmpz_dbl_dig_sig�d_t
;

73 
	#MPZ_DBL_DIG_SIZE
 (8)

	)

74 
u�t8_t
 
	tmpz_dig_t
;

75 
u�t8_t
 
	tmpz_dbl_dig_t
;

76 
�t8_t
 
	tmpz_dbl_dig_sig�d_t
;

79 #ifde�
_WIN64


80 #ifde�
__MINGW32__


81 
	#MPZ_LONG_1
 1LL

	)

83 
	#MPZ_LONG_1
 1
i64


	)

86 
	#MPZ_LONG_1
 1L

	)

90 
	#MPZ_NUM_DIG_FOR_INT
 (((
mp_�t_t
�* 8 + 
MPZ_DIG_SIZE
 - 1�/ MPZ_DIG_SIZE)

	)

91 
	#MPZ_NUM_DIG_FOR_LL
 (((�* 8 + 
MPZ_DIG_SIZE
 - 1�/ MPZ_DIG_SIZE)

	)

93 
	s_mpz_t
 {

95 
size_t
 
	m�g
 : 1;

96 
size_t
 
	mfixed_dig
 : 1;

97 
size_t
 
	m�loc
 : (8 * (size_t) - 2);

98 
size_t
 
	m�n
;

99 
mpz_dig_t
 *
	mdig
;

100 } 
	tmpz_t
;

103 
	#MPZ_CONST_INT
(
z
, 
v�
�
mpz_t
 z; 
mpz_dig_t
 z##
_dig�s
[
MPZ_NUM_DIG_FOR_INT
]; 
	`mpz_��_fixed_�om_�t
(&z, 
z_dig�s
, MPZ_NUM_DIG_FOR_INT, v�);

	)

105 
mpz_��_z�o
(
mpz_t
 *
z
);

106 
mpz_��_�om_�t
(
mpz_t
 *
z
, 
mp_�t_t
 
v�
);

107 
mpz_��_fixed_�om_�t
(
mpz_t
 *
z
, 
mpz_dig_t
 *
dig
, 
size_t
 
dig_�loc
, 
mp_�t_t
 
v�
);

108 
mpz_de��
(
mpz_t
 *
z
);

110 
mpz_�t
(
mpz_t
 *
de�
, cڡ mpz_�*
�c
);

111 
mpz_�t_�om_�t
(
mpz_t
 *
z
, 
mp_�t_t
 
�c
);

112 
mpz_�t_�om_�
(
mpz_t
 *
z
, 
i
, 
bo�
 
is_sig�d
);

113 #i�
MICROPY_PY_BUILTINS_FLOAT


114 
mpz_�t_�om_��t
(
mpz_t
 *
z
, 
mp_��t_t
 
�c
);

116 
size_t
 
mpz_�t_�om_�r
(
mpz_t
 *
z
, cڡ *
�r
, size_�
�n
, 
bo�
 
�g
, 
ba�
);

117 
mpz_�t_�om_by�s
(
mpz_t
 *
z
, 
bo�
 
big_�d�n
, 
size_t
 
�n
, cڡ 
by�
 *
buf
);

119 
�l�e
 
bo�
 
	$mpz_is_z�o
(cڡ 
mpz_t
 *
z
) {

120  
z
->
�n
 == 0;

121 
	}
}

122 
�l�e
 
bo�
 
	$mpz_is_�g
(cڡ 
mpz_t
 *
z
) {

123  
z
->
�g
 != 0;

124 
	}
}

125 
mpz_cmp
(cڡ 
mpz_t
 *
lhs
, cڡ mpz_�*
rhs
);

127 
mpz_abs_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
);

128 
mpz_�g_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
);

129 
mpz_n�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
z
);

130 
mpz_shl_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, 
mp_u�t_t
 
rhs
);

131 
mpz_shr_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, 
mp_u�t_t
 
rhs
);

132 
mpz_add_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

133 
mpz_sub_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

134 
mpz_mul_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

135 
mpz_pow_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

136 
mpz_pow3_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
, cڡ mpz_�*
mod
);

137 
mpz_�d_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

138 
mpz_�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

139 
mpz_x�_��
(
mpz_t
 *
de�
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

140 
mpz_divmod_��
(
mpz_t
 *
de�_quo
, mpz_�*
de�_�m
, cڡ mpz_�*
lhs
, cڡ mpz_�*
rhs
);

142 
�l�e
 
size_t
 
	$mpz_max_num_b�s
(cڡ 
mpz_t
 *
z
) {

143  
z
->
�n
 * 
MPZ_DIG_SIZE
;

144 
	}
}

145 
mp_�t_t
 
mpz_hash
(cڡ 
mpz_t
 *
z
);

146 
bo�
 
mpz_as_�t_checked
(cڡ 
mpz_t
 *
z
, 
mp_�t_t
 *
v�ue
);

147 
bo�
 
mpz_as_u�t_checked
(cڡ 
mpz_t
 *
z
, 
mp_u�t_t
 *
v�ue
);

149 
bo�
 
mpz_as_by�s
(cڡ 
mpz_t
 *
z
, bo� 
big_�d�n
, bo� 
as_sig�d
, 
size_t
 
�n
, 
by�
 *
buf
);

150 #i�
MICROPY_PY_BUILTINS_FLOAT


151 
mp_��t_t
 
mpz_as_��t
(cڡ 
mpz_t
 *
z
);

153 
size_t
 
mpz_as_�r_��
(cڡ 
mpz_t
 *
z
, 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
, *
�r
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nativeglue.c

27 
	~<�d�g.h
>

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/b��y.h
"

33 
	~"py/ru�ime.h
"

34 
	~"py/sm�l�t.h
"

35 
	~"py/�tiveglue.h
"

36 
	~"py/gc.h
"

38 #i�
MICROPY_DEBUG_VERBOSE


39 
	#DEBUG_��tf
 
DEBUG_��tf


	)

41 
	#DEBUG_��tf
(...�()0

	)

44 #i�
MICROPY_EMIT_NATIVE


46 
	$mp_�tive_ty�_�om_q�r
(
q�r
 
q�
) {

47 
q�
) {

48 
MP_QSTR_obje�
:

49  
MP_NATIVE_TYPE_OBJ
;

50 
MP_QSTR_bo�
:

51  
MP_NATIVE_TYPE_BOOL
;

52 
MP_QSTR_�t
:

53  
MP_NATIVE_TYPE_INT
;

54 
MP_QSTR_u�t
:

55  
MP_NATIVE_TYPE_UINT
;

56 
MP_QSTR_�r
:

57  
MP_NATIVE_TYPE_PTR
;

58 
MP_QSTR_�r8
:

59  
MP_NATIVE_TYPE_PTR8
;

60 
MP_QSTR_�r16
:

61  
MP_NATIVE_TYPE_PTR16
;

62 
MP_QSTR_�r32
:

63  
MP_NATIVE_TYPE_PTR32
;

67 
	}
}

70 
mp_u�t_t
 
	$mp_�tive_�om_obj
(
mp_obj_t
 
obj
, 
mp_u�t_t
 
ty�
) {

71 
	`DEBUG_��tf
("mp_�tive_�om_obj(%p, " 
UINT_FMT
 ")\n", 
obj
, 
ty�
);

72 
ty�
 & 0xf) {

73 
MP_NATIVE_TYPE_OBJ
:

74  (
mp_u�t_t
)
obj
;

75 
MP_NATIVE_TYPE_BOOL
:

76  
	`mp_obj_is_�ue
(
obj
);

77 
MP_NATIVE_TYPE_INT
:

78 
MP_NATIVE_TYPE_UINT
:

79  
	`mp_obj_g�_�t_�un��d
(
obj
);

81 
mp_buf�r_�fo_t
 
buf�fo
;

82 i�(
	`mp_g�_buf�r
(
obj
, &
buf�fo
, 
MP_BUFFER_READ
)) {

83  (
mp_u�t_t
)
buf�fo
.
buf
;

86  
	`mp_obj_g�_�t_�un��d
(
obj
);

90 
	}
}

94 #i�
MICROPY_EMIT_MACHINE_CODE


97 
mp_obj_t
 
	$mp_�tive_to_obj
(
mp_u�t_t
 
v�
, mp_u�t_�
ty�
) {

98 
	`DEBUG_��tf
("mp_�tive_to_obj(" 
UINT_FMT
 ", " UINT_FMT ")\n", 
v�
, 
ty�
);

99 
ty�
 & 0xf) {

100 
MP_NATIVE_TYPE_OBJ
:

101  (
mp_obj_t
)
v�
;

102 
MP_NATIVE_TYPE_BOOL
:

103  
	`mp_obj_�w_bo�
(
v�
);

104 
MP_NATIVE_TYPE_INT
:

105  
	`mp_obj_�w_�t
(
v�
);

106 
MP_NATIVE_TYPE_UINT
:

107  
	`mp_obj_�w_�t_�om_u�t
(
v�
);

108 
MP_NATIVE_TYPE_QSTR
:

109  
	`MP_OBJ_NEW_QSTR
(
v�
);

112  
	`mp_obj_�w_�t_�om_u�t
(
v�
);

114 
	}
}

118 #i�
MICROPY_EMIT_NATIVE
 && !
MICROPY_DYNAMIC_COMPILER


120 #i�!
MICROPY_PY_BUILTINS_SET


121 
mp_obj_t
 
	$mp_obj_�w_�t
(
size_t
 
n_�gs
, 
mp_obj_t
 *
�ems
) {

122 ()
n_�gs
;

123 ()
�ems
;

124 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("set unsupported"));

125 
	}
}

127 
	$mp_obj_�t_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
) {

128 ()
�lf_�
;

129 ()
�em
;

130 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("set unsupported"));

131 
	}
}

134 #i�!
MICROPY_PY_BUILTINS_SLICE


135 
mp_obj_t
 
	$mp_obj_�w_�i�
(
mp_obj_t
 
o��t
, mp_obj_�
o��
, mp_obj_�
o��
) {

136 ()
o��t
;

137 ()
o��
;

138 ()
o��
;

139 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("slice unsupported"));

140 
	}
}

143 
mp_obj_di�_t
 *
	$mp_�tive_sw�_glob�s
(
mp_obj_di�_t
 *
�w_glob�s
) {

144 i�(
�w_glob�s
 =�
NULL
) {

146  
NULL
;

148 
mp_obj_di�_t
 *
�d_glob�s
 = 
	`mp_glob�s_g�
();

149 i�(
�d_glob�s
 =�
�w_glob�s
) {

151  
NULL
;

153 
	`mp_glob�s_�t
(
�w_glob�s
);

154  
�d_glob�s
;

155 
	}
}

159 
mp_obj_t
 
	$mp_�tive_��_fun�i�_n_kw
(
mp_obj_t
 
fun_�
, 
size_t
 
n_�gs_kw
, cڡ mp_obj_�*
�gs
) {

160  
	`mp_��_fun�i�_n_kw
(
fun_�
, 
n_�gs_kw
 & 0xff, (n_�gs_kw >> 8�& 0xff, 
�gs
);

161 
	}
}

165 
	$mp_�tive_�i�
(
mp_obj_t
 
o
) {

166 i�(
o
 !�
MP_OBJ_NULL
 && o !�
mp_cڡ_n�e
) {

167 
	`�r_�i�
(
	`mp_make_�i�_obj
(
o
));

169 
	}
}

172 
mp_obj_t
 
	$mp_�tive_g���
(
mp_obj_t
 
obj
, 
mp_obj_��_buf_t
 *
��
) {

173 i�(
��
 =�
NULL
) {

174  
	`mp_g���
(
obj
, 
NULL
);

176 
obj
 = 
	`mp_g���
(obj, 
��
);

177 i�(
obj
 !�
	`MP_OBJ_FROM_PTR
(
��
)) {

179 
��
->
ba�
.
ty�
 = 
MP_OBJ_NULL
;

180 
��
->
buf
[0] = 
obj
;

182  
NULL
;

184 
	}
}

187 
mp_obj_t
 
	$mp_�tive_���xt
(
mp_obj_��_buf_t
 *
��
) {

188 
mp_obj_t
 
obj
;

189 i�(
��
->
ba�
.
ty�
 =�
MP_OBJ_NULL
) {

190 
obj
 = 
��
->
buf
[0];

192 
obj
 = 
	`MP_OBJ_FROM_PTR
(
��
);

194  
	`mp_���xt
(
obj
);

195 
	}
}

197 
bo�
 
	$mp_�tive_y�ld_�om
(
mp_obj_t
 
g�
, mp_obj_�
�nd_v�ue
, mp_obj_�*
�t_v�ue
) {

198 
mp_vm_�tu�_k�d_t
 
�t_k�d
;

199 
�r_buf_t
 
�r_buf
;

200 
mp_obj_t
 
throw_v�ue
 = *
�t_v�ue
;

201 i�(
	`�r_push
(&
�r_buf
) == 0) {

202 i�(
throw_v�ue
 !�
MP_OBJ_NULL
) {

203 
�nd_v�ue
 = 
MP_OBJ_NULL
;

205 
�t_k�d
 = 
	`mp_�sume
(
g�
, 
�nd_v�ue
, 
throw_v�ue
, 
�t_v�ue
);

206 
	`�r_p�
();

208 
�t_k�d
 = 
MP_VM_RETURN_EXCEPTION
;

209 *
�t_v�ue
 = 
�r_buf
.
�t_v�
;

212 i�(
�t_k�d
 =�
MP_VM_RETURN_YIELD
) {

213  
�ue
;

214 } i�(
�t_k�d
 =�
MP_VM_RETURN_NORMAL
) {

215 i�(*
�t_v�ue
 =�
MP_OBJ_STOP_ITERATION
) {

216 *
�t_v�ue
 = 
mp_cڡ_n�e
;

219 
	`as��
(
�t_k�d
 =�
MP_VM_RETURN_EXCEPTION
);

220 i�(!
	`mp_obj_ex��i�_m�ch
(*
�t_v�ue
, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_St�I��ti�
))) {

221 
	`�r_�i�
(*
�t_v�ue
);

223 *
�t_v�ue
 = 
	`mp_obj_ex��i�_g�_v�ue
(*ret_value);

226 i�(
throw_v�ue
 !�
MP_OBJ_NULL
 && 
	`mp_obj_ex��i�_m�ch
�hrow_v�ue, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_G����Ex�
))) {

227 
	`�r_�i�
(
	`mp_make_�i�_obj
(
throw_v�ue
));

230  
�l�
;

231 
	}
}

233 #i�!
MICROPY_PY_BUILTINS_FLOAT


235 
mp_obj_t
 
	$mp_obj_�w_��t_�om_f
(
f
) {

236 ()
f
;

237 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("float unsupported"));

238 
	}
}

240 
mp_obj_t
 
	$mp_obj_�w_��t_�om_d
(
d
) {

241 ()
d
;

242 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("float unsupported"));

243 
	}
}

245 
	$mp_obj_g�_��t_to_f
(
mp_obj_t
 
o
) {

246 ()
o
;

247 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("float unsupported"));

248 
	}
}

250 
	$mp_obj_g�_��t_to_d
(
mp_obj_t
 
o
) {

251 ()
o
;

252 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("float unsupported"));

253 
	}
}

258 cڡ 
mp_fun_�b�_t
 
	gmp_fun_�b�
 = {

259 
mp_cڡ_n�e
,

260 
mp_cڡ_�l�
,

261 
mp_cڡ_�ue
,

262 
mp_�tive_�om_obj
,

263 
mp_�tive_to_obj
,

264 
mp_�tive_sw�_glob�s
,

265 
mp_l�d_�me
,

266 
mp_l�d_glob�
,

267 
mp_l�d_bu�d_�ass
,

268 
mp_l�d_��
,

269 
mp_l�d_m�hod
,

270 
mp_l�d_su�r_m�hod
,

271 
mp_��e_�me
,

272 
mp_��e_glob�
,

273 
mp_��e_��
,

274 
mp_obj_subs�
,

275 
mp_obj_is_�ue
,

276 
mp_u�ry_�
,

277 
mp_b��y_�
,

278 
mp_obj_�w_tu�e
,

279 
mp_obj_�w_li�
,

280 
mp_obj_�w_di�
,

281 
mp_obj_�w_�t
,

282 
mp_obj_�t_��e
,

283 
mp_obj_li�_��nd
,

284 
mp_obj_di�_��e
,

285 
mp_make_fun�i�_�om_��o_fun
,

286 
mp_�tive_��_fun�i�_n_kw
,

287 
mp_��_m�hod_n_kw
,

288 
mp_��_m�hod_n_kw_v�
,

289 
mp_�tive_g���
,

290 
mp_�tive_���xt
,

291 #i�
MICROPY_NLR_SETJMP


292 
�r_push_��
,

294 
�r_push
,

296 
�r_p�
,

297 
mp_�tive_�i�
,

298 
mp_imp�t_�me
,

299 
mp_imp�t_�om
,

300 
mp_imp�t_�l
,

301 
mp_obj_�w_�i�
,

302 
mp_u�ack_�qu��
,

303 
mp_u�ack_ex
,

304 
mp_d��e_�me
,

305 
mp_d��e_glob�
,

306 
mp_obj_�w_�osu�
,

307 
mp_�g_check_num_sig
,

308 
mp_�tup_code_��e_�tive
,

309 
mp_sm�l_�t_�o�_divide
,

310 
mp_sm�l_�t_modulo
,

311 
mp_�tive_y�ld_�om
,

312 #i�
MICROPY_NLR_SETJMP


313 
�tjmp
,

315 
NULL
,

318 
mem�t
,

319 
memmove
,

320 
gc_��loc
,

321 
mp_��tf
,

322 
mp_v��tf
,

323 
mp_�i�_msg
,

324 
mp_obj_g�_ty�
,

325 
mp_obj_�w_�r
,

326 
mp_obj_�w_by�s
,

327 
mp_obj_�w_by���y_by_�f
,

328 
mp_obj_�w_��t_�om_f
,

329 
mp_obj_�w_��t_�om_d
,

330 
mp_obj_g�_��t_to_f
,

331 
mp_obj_g�_��t_to_d
,

332 
mp_l�d_m�hod_maybe
,

333 
mp_g�_buf�r
,

334 
mp_g�_��am_�i�
,

335 
mp_�g_�r�_�l
,

336 
mp_�g_�r�_�l_kw_��y
,

337 
mp_b��y_g�_size
,

338 
mp_b��y_g�_v�_��y
,

339 
mp_b��y_�t_v�_��y
,

340 &
mp_��_��t
,

341 &
mp_ty�_ty�
,

342 &
mp_ty�_�r
,

343 &
mp_ty�_li�
,

344 &
mp_ty�_di�
,

345 &
mp_ty�_fun_bu�t�_0
,

346 &
mp_ty�_fun_bu�t�_1
,

347 &
mp_ty�_fun_bu�t�_2
,

348 &
mp_ty�_fun_bu�t�_3
,

349 &
mp_ty�_fun_bu�t�_v�
,

350 &
mp_ty�_Ex��i�
,

351 &
mp_��am_�ad_obj
,

352 &
mp_��am_�ad�to_obj
,

353 &
mp_��am_unbuf�d_�adl�e_obj
,

354 &
mp_��am_wr�e_obj
,

357 #�i�
MICROPY_EMIT_NATIVE
 && 
MICROPY_DYNAMIC_COMPILER


359 cڡ 
	gmp_fun_�b�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nativeglue.h

26 #i�de�
MICROPY_INCLUDED_PY_NATIVEGLUE_H


27 
	#MICROPY_INCLUDED_PY_NATIVEGLUE_H


	)

29 
	~<�d�g.h
>

30 
	~"py/obj.h
"

31 
	~"py/�rsi��tcode.h
"

32 
	~"py/��am.h
"

35 
	mMP_F_CONST_NONE_OBJ
 = 0,

36 
	mMP_F_CONST_FALSE_OBJ
,

37 
	mMP_F_CONST_TRUE_OBJ
,

38 
	mMP_F_CONVERT_OBJ_TO_NATIVE
,

39 
	mMP_F_CONVERT_NATIVE_TO_OBJ
,

40 
	mMP_F_NATIVE_SWAP_GLOBALS
,

41 
	mMP_F_LOAD_NAME
,

42 
	mMP_F_LOAD_GLOBAL
,

43 
	mMP_F_LOAD_BUILD_CLASS
,

44 
	mMP_F_LOAD_ATTR
,

45 
	mMP_F_LOAD_METHOD
,

46 
	mMP_F_LOAD_SUPER_METHOD
,

47 
	mMP_F_STORE_NAME
,

48 
	mMP_F_STORE_GLOBAL
,

49 
	mMP_F_STORE_ATTR
,

50 
	mMP_F_OBJ_SUBSCR
,

51 
	mMP_F_OBJ_IS_TRUE
,

52 
	mMP_F_UNARY_OP
,

53 
	mMP_F_BINARY_OP
,

54 
	mMP_F_BUILD_TUPLE
,

55 
	mMP_F_BUILD_LIST
,

56 
	mMP_F_BUILD_MAP
,

57 
	mMP_F_BUILD_SET
,

58 
	mMP_F_STORE_SET
,

59 
	mMP_F_LIST_APPEND
,

60 
	mMP_F_STORE_MAP
,

61 
	mMP_F_MAKE_FUNCTION_FROM_PROTO_FUN
,

62 
	mMP_F_NATIVE_CALL_FUNCTION_N_KW
,

63 
	mMP_F_CALL_METHOD_N_KW
,

64 
	mMP_F_CALL_METHOD_N_KW_VAR
,

65 
	mMP_F_NATIVE_GETITER
,

66 
	mMP_F_NATIVE_ITERNEXT
,

67 
	mMP_F_NLR_PUSH
,

68 
	mMP_F_NLR_POP
,

69 
	mMP_F_NATIVE_RAISE
,

70 
	mMP_F_IMPORT_NAME
,

71 
	mMP_F_IMPORT_FROM
,

72 
	mMP_F_IMPORT_ALL
,

73 
	mMP_F_NEW_SLICE
,

74 
	mMP_F_UNPACK_SEQUENCE
,

75 
	mMP_F_UNPACK_EX
,

76 
	mMP_F_DELETE_NAME
,

77 
	mMP_F_DELETE_GLOBAL
,

78 
	mMP_F_NEW_CLOSURE
,

79 
	mMP_F_ARG_CHECK_NUM_SIG
,

80 
	mMP_F_SETUP_CODE_STATE
,

81 
	mMP_F_SMALL_INT_FLOOR_DIVIDE
,

82 
	mMP_F_SMALL_INT_MODULO
,

83 
	mMP_F_NATIVE_YIELD_FROM
,

84 
	mMP_F_SETJMP
,

85 
	mMP_F_NUMBER_OF
,

86 } 
	tmp_fun_k�d_t
;

88 
	s_mp_fun_�b�_t
 {

89 
mp_cڡ_obj_t
 
	mcڡ_n�e
;

90 
mp_cڡ_obj_t
 
	mcڡ_�l�
;

91 
mp_cڡ_obj_t
 
	mcڡ_�ue
;

92 
mp_u�t_t
 (*
�tive_�om_obj
)(
mp_obj_t
 
	mobj
, mp_u�t_�
	mty�
);

93 
mp_obj_t
 (*
�tive_to_obj
)(
mp_u�t_t
 
	mv�
, mp_u�t_�
	mty�
);

94 
	mmp_obj_di�_t
 *(*
	msw�_glob�s
)(
mp_obj_di�_t
 * 
	m�w_glob�s
);

95 
mp_obj_t
 (*
l�d_�me
)(
q�r
 
	mq�
);

96 
mp_obj_t
 (*
l�d_glob�
)(
q�r
 
	mq�
);

97 
mp_obj_t
 (*
l�d_bu�d_�ass
)();

98 
mp_obj_t
 (*
l�d_��
)(mp_obj_�
	mba�
, 
q�r
 
	m��
);

99 (*
	ml�d_m�hod
)(
mp_obj_t
 
	mba�
, 
q�r
 
	m��
, mp_obj_�*
	mde�
);

100 (*
	ml�d_su�r_m�hod
)(
q�r
 
	m��
, 
mp_obj_t
 *
	mde�
);

101 (*
	m��e_�me
)(
q�r
 
	mq�
, 
mp_obj_t
 
	mobj
);

102 (*
	m��e_glob�
)(
q�r
 
	mq�
, 
mp_obj_t
 
	mobj
);

103 (*
	m��e_��
)(
mp_obj_t
 
	mba�
, 
q�r
 
	m��
, mp_obj_�
	mv�
);

104 
mp_obj_t
 (*
obj_subs�
)(mp_obj_�
	mba�
, mp_obj_�
	m�dex
, mp_obj_�
	mv�
);

105 
bo�
 (*
obj_is_�ue
)(
mp_obj_t
 
	m�g
);

106 
mp_obj_t
 (*
u�ry_�
)(
mp_u�ry_�_t
 
	m�
, mp_obj_�
	m�g
);

107 
mp_obj_t
 (*
b��y_�
)(
mp_b��y_�_t
 
	m�
, mp_obj_�
	mlhs
, mp_obj_�
	mrhs
);

108 
mp_obj_t
 (*
�w_tu�e
)(
size_t
 
	mn
, cڡ mp_obj_�*
	m�ems
);

109 
mp_obj_t
 (*
�w_li�
)(
size_t
 
	mn
, mp_obj_�*
	m�ems
);

110 
mp_obj_t
 (*
�w_di�
)(
size_t
 
	mn_�gs
);

111 
mp_obj_t
 (*
�w_�t
)(
size_t
 
	mn_�gs
, mp_obj_�*
	m�ems
);

112 (*
	m�t_��e
)(
mp_obj_t
 
	m�lf_�
, mp_obj_�
	m�em
);

113 
mp_obj_t
 (*
li�_��nd
)(mp_obj_�
	m�lf_�
, mp_obj_�
	m�g
);

114 
mp_obj_t
 (*
di�_��e
)(mp_obj_�
	m�lf_�
, mp_obj_�
	mkey
, mp_obj_�
	mv�ue
);

115 
mp_obj_t
 (*
make_fun�i�_�om_��o_fun
)(
mp_��o_fun_t
 
	m��o_fun
, cڡ 
mp_modu�_cڋxt_t
 *
	mcm
, cڡ mp_obj_�*
	mdef_�gs
);

116 
mp_obj_t
 (*
��_fun�i�_n_kw
)(mp_obj_�
	mfun_�
, 
size_t
 
	mn_�gs_kw
, cڡ mp_obj_�*
	m�gs
);

117 
mp_obj_t
 (*
��_m�hod_n_kw
)(
size_t
 
	mn_�gs
, size_�
	mn_kw
, cڡ mp_obj_�*
	m�gs
);

118 
mp_obj_t
 (*
��_m�hod_n_kw_v�
)(
bo�
 
	mhave_�lf
, 
size_t
 
	mn_�gs_n_kw
, cڡ mp_obj_�*
	m�gs
);

119 
mp_obj_t
 (*
g���
)(mp_obj_�
	mobj
, 
mp_obj_��_buf_t
 *
	m��
);

120 
mp_obj_t
 (*
���xt
)(
mp_obj_��_buf_t
 *
	m��
);

121 (*
	m�r_push
)(
	m�r_buf_t
 *);

122 (*
	m�r_p�
)();

123 (*
	m�i�
)(
mp_obj_t
 
	mo
);

124 
mp_obj_t
 (*
imp�t_�me
)(
q�r
 
	m�me
, mp_obj_�
	m�omli�
, mp_obj_�
	m�v�
);

125 
mp_obj_t
 (*
imp�t_�om
)(mp_obj_�
	mmodu�
, 
q�r
 
	m�me
);

126 (*
	mimp�t_�l
)(
mp_obj_t
 
	mmodu�
);

127 
mp_obj_t
 (*
�w_�i�
)(mp_obj_�
	m��t
, mp_obj_�
	m��
, mp_obj_�
	m��
);

128 (*
	mu�ack_�qu��
)(
mp_obj_t
 
	m�q
, 
size_t
 
	mnum
, mp_obj_�*
	m�ems
);

129 (*
	mu�ack_ex
)(
mp_obj_t
 
	m�q
, 
size_t
 
	mnum
, mp_obj_�*
	m�ems
);

130 (*
	md��e_�me
)(
q�r
 
	mq�
);

131 (*
	md��e_glob�
)(
q�r
 
	mq�
);

132 
mp_obj_t
 (*
�w_�osu�
)(mp_obj_�
	mfun
, 
size_t
 
	mn_�o�d_ov�
, cڡ mp_obj_�*
	m�o�d
);

133 (*
	m�g_check_num_sig
)(
size_t
 
	mn_�gs
, size_�
	mn_kw
, 
u�t32_t
 
	msig
);

134 (*
	m�tup_code_��e_�tive
)(
mp_code_��e_�tive_t
 *
	mcode_��e
, 
size_t
 
	mn_�gs
, size_�
	mn_kw
, cڡ 
mp_obj_t
 *
	m�gs
);

135 
mp_�t_t
 (*
sm�l_�t_�o�_divide
)(mp_�t_�
	mnum
, mp_�t_�
	md�om
);

136 
mp_�t_t
 (*
sm�l_�t_modulo
)(mp_�t_�
	mdivid�d
, mp_�t_�
	mdivis�
);

137 
bo�
 (*
y�ld_�om
)(
mp_obj_t
 
	mg�
, mp_obj_�
	m�nd_v�ue
, mp_obj_�*
	m�t_v�ue
);

138 *
	m�tjmp_
;

140 *(*
	mmem�t_
)(*
	ms
, 
	mc
, 
size_t
 
	mn
);

141 *(*
	mmemmove_
)(*
	mde�
, cڡ *
	m�c
, 
size_t
 
	mn
);

142 *(*
	m��loc_
)(*
	m�r
, 
size_t
 
	mn_by�s
, 
bo�
 
	m�low_move
);

143 (*
	m��tf_
)(cڡ 
mp_��t_t
 *
	m��t
, cڡ *
	mfmt
, ...);

144 (*
	mv��tf_
)(cڡ 
mp_��t_t
 *
	m��t
, cڡ *
	mfmt
, 
va_li�
 
	m�gs
);

145 #i�
def�ed
(
__GNUC__
)

146 
	mNORETURN


148 (*
	m�i�_msg
)(cڡ 
mp_obj_ty�_t
 *
	mexc_ty�
, 
mp_rom_�r�_�xt_t
 
	mmsg
);

149 cڡ 
	mmp_obj_ty�_t
 *(*
	mobj_g�_ty�
)(
mp_cڡ_obj_t
 
	mo_�
);

150 
mp_obj_t
 (*
obj_�w_�r
)(cڡ *
	md�a
, 
size_t
 
	m�n
);

151 
mp_obj_t
 (*
obj_�w_by�s
)(cڡ 
by�
 *
	md�a
, 
size_t
 
	m�n
);

152 
mp_obj_t
 (*
obj_�w_by���y_by_�f
)(
size_t
 
	mn
, *
	m�ems
);

153 
mp_obj_t
 (*
obj_�w_��t_�om_f
)(
	mf
);

154 
mp_obj_t
 (*
obj_�w_��t_�om_d
)(
	md
);

155 (*
	mobj_g�_��t_to_f
)(
mp_obj_t
 
	mo
);

156 (*
	mobj_g�_��t_to_d
)(
mp_obj_t
 
	mo
);

157 (*
	ml�d_m�hod_maybe
)(
mp_obj_t
 
	mba�
, 
q�r
 
	m��
, mp_obj_�*
	mde�
);

158 
bo�
 (*
g�_buf�r
)(
mp_obj_t
 
	mobj
, 
mp_buf�r_�fo_t
 *
	mbuf�fo
, 
mp_u�t_t
 
	m�ags
);

159 cڡ 
	mmp_��am_p_t
 *(*
	mg�_��am_�i�
)(
mp_obj_t
 
	m�lf_�
, 
	m�ags
);

160 (*
	m�g_�r�_�l
)(
size_t
 
	mn_pos
, cڡ 
mp_obj_t
 *
	mpos
, 
mp_m�_t
 *
	mkws
, size_�
	mn_�lowed
, cڡ 
mp_�g_t
 *
	m�lowed
, 
mp_�g_v�_t
 *
	mout_v�s
);

161 (*
	m�g_�r�_�l_kw_��y
)(
size_t
 
	mn_pos
, size_�
	mn_kw
, cڡ 
mp_obj_t
 *
	m�gs
, size_�
	mn_�lowed
, cڡ 
mp_�g_t
 *
	m�lowed
, 
mp_�g_v�_t
 *
	mout_v�s
);

162 
size_t
 (*
b��y_g�_size
)(
	m�ru�_ty�
, 
	mv�_ty�
, size_�*
	m�lign
);

163 
mp_obj_t
 (*
b��y_g�_v�_��y
)(
	mty�code
, *
	mp
, 
size_t
 
	m�dex
);

164 (*
	mb��y_�t_v�_��y
)(
	mty�code
, *
	mp
, 
size_t
 
	m�dex
, 
mp_obj_t
 
	mv�_�
);

165 cڡ 
mp_��t_t
 *
	m��_��t
;

168 cڡ 
mp_obj_ty�_t
 *
	mty�_ty�
;

169 cڡ 
mp_obj_ty�_t
 *
	mty�_�r
;

170 cڡ 
mp_obj_ty�_t
 *
	mty�_li�
;

171 cڡ 
mp_obj_ty�_t
 *
	mty�_di�
;

172 cڡ 
mp_obj_ty�_t
 *
	mty�_fun_bu�t�_0
;

173 cڡ 
mp_obj_ty�_t
 *
	mty�_fun_bu�t�_1
;

174 cڡ 
mp_obj_ty�_t
 *
	mty�_fun_bu�t�_2
;

175 cڡ 
mp_obj_ty�_t
 *
	mty�_fun_bu�t�_3
;

176 cڡ 
mp_obj_ty�_t
 *
	mty�_fun_bu�t�_v�
;

177 cڡ 
mp_obj_ty�_t
 *
	mty�_Ex��i�
;

178 cڡ 
mp_obj_fun_bu�t�_v�_t
 *
	m��am_�ad_obj
;

179 cڡ 
mp_obj_fun_bu�t�_v�_t
 *
	m��am_�ad�to_obj
;

180 cڡ 
mp_obj_fun_bu�t�_v�_t
 *
	m��am_unbuf�d_�adl�e_obj
;

181 cڡ 
mp_obj_fun_bu�t�_v�_t
 *
	m��am_wr�e_obj
;

182 } 
	tmp_fun_�b�_t
;

184 #i�(
MICROPY_EMIT_NATIVE
 && !
MICROPY_DYNAMIC_COMPILER
�|| 
MICROPY_ENABLE_DYNRUNTIME


185 
cڡ 
mp_fun_�b�_t
 
mp_fun_�b�
;

186 #�i�
MICROPY_EMIT_NATIVE
 && 
MICROPY_DYNAMIC_COMPILER


189 
cڡ 
mp_fun_�b�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlr.c

27 
	~"py/mp��e.h
"

29 #i�!
MICROPY_NLR_SETJMP


31 #i�
MICROPY_NLR_X86
 && 
MICROPY_NLR_OS_WINDOWS


33 
	$�r_push_��
(
�r_buf_t
 *
�r
�
	`asm
 ("nlr_push_tail");

36 
	`__��ibu�__
((
u�d
)�
	`�r_push_��
(
�r_buf_t
 *
�r
);

40 
	$�r_push_��
(
�r_buf_t
 *
�r
) {

41 
�r_buf_t
 **
t�
 = &
	`MP_STATE_THREAD
(
�r_t�
);

42 
�r
->
�ev
 = *
t�
;

43 
	`MP_NLR_SAVE_PYSTACK
(
�r
);

44 *
t�
 = 
�r
;

46 
	}
}

48 
	$�r_p�
() {

49 
�r_buf_t
 **
t�
 = &
	`MP_STATE_THREAD
(
�r_t�
);

50 *
t�
 = (*t�)->
�ev
;

51 
	}
}

53 
	$�r_push_jump_��back
(
�r_jump_��back_node_t
 *
node
, 
�r_jump_��back_fun_t
 
fun
) {

54 
�r_jump_��back_node_t
 **
t�
 = &
	`MP_STATE_THREAD
(
�r_jump_��back_t�
);

55 
node
->
�ev
 = *
t�
;

56 
node
->
fun
 = fun;

57 *
t�
 = 
node
;

58 
	}
}

60 
	$�r_p�_jump_��back
(
bo�
 
run_��back
) {

61 
�r_jump_��back_node_t
 **
t�
 = &
	`MP_STATE_THREAD
(
�r_jump_��back_t�
);

62 
�r_jump_��back_node_t
 *
cur
 = *
t�
;

63 *
t�
 = (*t�)->
�ev
;

64 i�(
run_��back
) {

65 
cur
->
	`fun
(cur);

67 
	}
}

76 
	$�r_��_jump_��backs
(
�r_buf_t
 *
�r
) {

77 
�r_jump_��back_node_t
 **
t�
 = &
	`MP_STATE_THREAD
(
�r_jump_��back_t�
);

78 *
t�
 !�
NULL
 && (*)*t� < (*)
�r
) {

79 
	`�r_p�_jump_��back
(
�ue
);

81 
	}
}

83 #i�
MICROPY_ENABLE_VM_ABORT


84 
NORETURN
 
	$�r_jump_ab�t
() {

85 
	`MP_STATE_THREAD
(
�r_t�
��
	`MP_STATE_VM
(
�r_ab�t
);

86 
	`�r_jump
(
NULL
);

87 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlr.h

26 #i�de�
MICROPY_INCLUDED_PY_NLR_H


27 
	#MICROPY_INCLUDED_PY_NLR_H


	)

32 
	~<lim�s.h
>

33 
	~<as��.h
>

34 
	~<�dbo�.h
>

36 
	~"py/mpc�fig.h
"

38 
	#MICROPY_NLR_NUM_REGS_X86
 (6)

	)

39 
	#MICROPY_NLR_NUM_REGS_X64
 (8)

	)

40 
	#MICROPY_NLR_NUM_REGS_X64_WIN
 (10)

	)

41 
	#MICROPY_NLR_NUM_REGS_ARM_THUMB
 (10)

	)

42 
	#MICROPY_NLR_NUM_REGS_ARM_THUMB_FP
 (10 + 6)

	)

43 
	#MICROPY_NLR_NUM_REGS_AARCH64
 (13)

	)

44 
	#MICROPY_NLR_NUM_REGS_MIPS
 (13)

	)

45 
	#MICROPY_NLR_NUM_REGS_XTENSA
 (10)

	)

46 
	#MICROPY_NLR_NUM_REGS_XTENSAWIN
 (17)

	)

47 
	#MICROPY_NLR_NUM_REGS_RV32I
 (14)

	)

52 #i�!
MICROPY_NLR_SETJMP


54 #i�
def�ed
(
_WIN32
�|| def�ed(
__CYGWIN__
)

55 
	#MICROPY_NLR_OS_WINDOWS
 1

	)

57 
	#MICROPY_NLR_OS_WINDOWS
 0

	)

59 #i�
def�ed
(
__i386__
)

60 
	#MICROPY_NLR_X86
 (1)

	)

61 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_X86
)

	)

62 #�i�
def�ed
(
__x86_64__
)

63 
	#MICROPY_NLR_X64
 (1)

	)

64 #i�
MICROPY_NLR_OS_WINDOWS


65 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_X64_WIN
)

	)

67 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_X64
)

	)

69 #�i�
def�ed
(
__thumb2__
�|| def�ed(
__thumb__
�|| def�ed(
__�m__
)

70 
	#MICROPY_NLR_THUMB
 (1)

	)

71 #i�
def�ed
(
__SOFTFP__
)

72 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_ARM_THUMB
)

	)

77 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_ARM_THUMB_FP
)

	)

79 #�i�
def�ed
(
__�rch64__
)

80 
	#MICROPY_NLR_AARCH64
 (1)

	)

81 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_AARCH64
)

	)

82 #�i�
def�ed
(
__x�n�__
)

83 
	#MICROPY_NLR_XTENSA
 (1)

	)

84 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_XTENSA
)

	)

85 #�i�
def�ed
(
__pow�pc__
)

86 
	#MICROPY_NLR_POWERPC
 (1)

	)

88 
	#MICROPY_NLR_NUM_REGS
 (128)

	)

89 #�i�
def�ed
(
__m�s__
)

90 
	#MICROPY_NLR_MIPS
 (1)

	)

91 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_MIPS
)

	)

92 #�i�
def�ed
(
__riscv
�&& def�ed(
__riscv_x�n
) && (__riscv_xlen == 32)

93 
	#MICROPY_NLR_RV32I
 (1)

	)

94 
	#MICROPY_NLR_NUM_REGS
 (
MICROPY_NLR_NUM_REGS_RV32I
)

	)

96 
	#MICROPY_NLR_SETJMP
 (1)

	)

103 #i�
MICROPY_NLR_SETJMP


104 
	~<�tjmp.h
>

107 
_�r_buf_t
 
	t�r_buf_t
;

108 
	s_�r_buf_t
 {

113 
�r_buf_t
 *
	m�ev
;

118 *
	m�t_v�
;

120 #i�
MICROPY_NLR_SETJMP


121 
jmp_buf
 
	mjmpbuf
;

123 *
	m�gs
[
MICROPY_NLR_NUM_REGS
];

126 #i�
MICROPY_ENABLE_PYSTACK


127 *
	mpy�ack
;

131 (*
	t�r_jump_��back_fun_t
)(*
	t�x
);

133 
_�r_jump_��back_node_t
 
	t�r_jump_��back_node_t
;

135 
	s_�r_jump_��back_node_t
 {

136 
�r_jump_��back_node_t
 *
�ev
;

137 
�r_jump_��back_fun_t
 
fun
;

141 #i�
MICROPY_ENABLE_PYSTACK


142 
	#MP_NLR_SAVE_PYSTACK
(
�r_buf
���_buf)->
py�ack
 = 
	`MP_STATE_THREAD
(
py�ack_cur
)

	)

143 
	#MP_NLR_RESTORE_PYSTACK
(
�r_buf
�
	`MP_STATE_THREAD
(
py�ack_cur
����_buf)->
py�ack


	)

145 
	#MP_NLR_SAVE_PYSTACK
(
�r_buf
�()
	)
nlr_buf

146 
	#MP_NLR_RESTORE_PYSTACK
(
�r_buf
�()
	)
nlr_buf

150 
	#MP_NLR_JUMP_HEAD
(
v�
, 
t�
) \

151 
�r_buf_t
 **
_t�_�r
 = &
	`MP_STATE_THREAD
(
�r_t�
); \

152 
�r_buf_t
 *
t�
 = *
_t�_�r
; \

153 i�(
t�
 =�
NULL
) { \

154 
	`�r_jump_�
(
v�
); \

155 
	}
} \

156 
t�
->
�t_v�
 = 
v�
; \

157 
	`�r_��_jump_��backs
(
t�
); \

158 
	`MP_NLR_RESTORE_PYSTACK
(
t�
); \

159 *
_t�_�r
 = 
t�
->
�ev
; \

160 

	)

161 #i�
MICROPY_NLR_SETJMP


165 
	#�r_push
(
buf
�(
	`�r_push_��
(buf), 
	`�tjmp
((buf)->
jmpbuf
))

	)

167 
�r_push
(
�r_buf_t
 *);

170 
�r_push_��
(
�r_buf_t
 *
t�
);

171 
�r_p�
();

172 
NORETURN
 
�r_jump
(*
v�
);

174 #i�
MICROPY_ENABLE_VM_ABORT


175 
	#�r_�t_ab�t
(
buf
�
	`MP_STATE_VM
(
�r_ab�t
��
	)
buf

176 
	#�r_g�_ab�t
(�
	`MP_STATE_VM
(
�r_ab�t
)

	)

177 
NORETURN
 
�r_jump_ab�t
();

183 
NORETURN
 
�r_jump_�
(*
v�
);

186 #i�de�
MICROPY_DEBUG_NLR


187 
	#�r_�i�
(
v�
�
	`�r_jump
(
	`MP_OBJ_TO_PTR
(v�))

	)

190 
	#�r_�i�
(
v�
) \

192 *
_v�
 = 
	`MP_OBJ_TO_PTR
(
v�
); \

193 
	`as��
(
_v�
 !�
NULL
); \

194 
	`as��
(
	`mp_obj_is_ex��i�_����
(
v�
)); \

195 
	`�r_jump
(
_v�
); \

196 } 0)

	)

198 #i�!
MICROPY_NLR_SETJMP


199 
	#�r_push
(
v�
) \

200 
	`as��
(
	`MP_STATE_THREAD
(
�r_t�
�!�
v�
), 
	`�r_push
(v�)

	)

208 
�r_push_jump_��back
(
�r_jump_��back_node_t
 *
node
, 
�r_jump_��back_fun_t
 
fun
);

212 
�r_p�_jump_��back
(
bo�
 
run_��back
);

215 
�r_��_jump_��backs
(
�r_buf_t
 *
�r
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlraarch64.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_AARCH64


36 
__asm
(

37 #i�
def�ed
(
__APPLE__
�&& def�ed(
__MACH__
)

52 #i�
def�ed
(
__APPLE__
�&& def�ed(
__MACH__
)

59 
NORETURN
 
	$�r_jump
(*
v�
) {

60 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

62 
	`MP_STATIC_ASSERT
(
	`off�tof
(
�r_buf_t
, 
�gs
) == 16);

64 
__asm
 volatile (

77 : "r" (
t�
)

81 
MP_UNREACHABLE


82 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrmips.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_MIPS


31 
__��ibu�__
((
u�d
)�
�r_push_��
(
�r_buf_t
 *
�r
);

33 
__asm
(

53 #ifde�
__pic__


60 
NORETURN
 
	$�r_jump
(*
v�
) {

61 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

62 
	`__asm
(

80 : "r" (
t�
)

83 
MP_UNREACHABLE


84 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrpowerpc.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_POWERPC


31 #unde�
�r_push


35 #ifde�
__LP64__


37 
	$�r_push
(
�r_buf_t
 *
�r
) {

39 
__asm__
 volatile (

74 : "r" (&
�r
->
�gs
), "r" (nlr)

79 
	}
}

81 
NORETURN
 
	$�r_jump
(*
v�
) {

82 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

84 
__asm__
 volatile (

116 : "r" (&
t�
->
�gs
)

120 
MP_UNREACHABLE
;

121 
	}
}

126 
	$�r_push
(
�r_buf_t
 *
�r
) {

128 
__asm__
 volatile (

163 : "r" (&
�r
->
�gs
), "r" (nlr)

168 
	}
}

170 
NORETURN
 
	$�r_jump
(*
v�
) {

171 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

173 
__asm__
 volatile (

205 : "r" (&
t�
->
�gs
)

209 
MP_UNREACHABLE
;

210 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrrv32.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_RV32I


31 #unde�
�r_push


33 
__��ibu�__
((
�ked
)�
	$�r_push
(
�r_buf_t
 *
�r
) {

34 
__asm
 volatile (

51 
	}
}

53 
NORETURN
 
	$�r_jump
(*
v�
) {

54 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

55 
__asm
 volatile (

74 : "r" (
t�
)

78 
MP_UNREACHABLE


79 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrsetjmp.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_SETJMP


31 
	$�r_jump
(*
v�
) {

32 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
);

33 
	`l�gjmp
(
t�
->
jmpbuf
, 1);

34 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrthumb.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_THUMB


31 #unde�
�r_push


39 
__��ibu�__
((
�ked
)�
	$�r_push
(
�r_buf_t
 *
�r
) {

49 
__asm
 volatile (

55 #i�!
	`def�ed
(
__thumb2__
)

74 #i�
MICROPY_NLR_NUM_REGS
 == 16

82 #i�
MICROPY_NLR_THUMB_USE_LONG_JUMP


88 #i�
	`def�ed
(
__APPLE__
�|| def�ed(
__MACH__
)

96 #i�!
	`def�ed
(
__��g__
�&& def�ed(
__GNUC__
�&& (__GNUC__ < 4 || (__GNUC__ =�4 && 
__GNUC_MINOR__
 < 8))

101 
	}
}

103 
NORETURN
 
	$�r_jump
(*
v�
) {

104 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

106 
__asm
 volatile (

113 #i�!
	`def�ed
(
__thumb2__
)

132 #i�
MICROPY_NLR_NUM_REGS
 == 16

142 : "r" (
t�
)

146 
MP_UNREACHABLE


147 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrx64.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_X64


31 #unde�
�r_push


36 
__��ibu�__
((
u�d
)�
�r_push_��
(
�r_buf_t
 *
�r
);

38 #i�!
MICROPY_NLR_OS_WINDOWS


39 #i�
def�ed
(
__��g__
�|| (def�ed(
__GNUC__
) && __GNUC__ >= 8)

40 
	#USE_NAKED
 1

	)

43 
__��ibu�__
((
�timize
("omit-frame-pointer")))

47 #i�!
def�ed
(
USE_NAKED
)

48 
	#USE_NAKED
 0

	)

51 #i�
USE_NAKED


53 
__��ibu�__
((
�ked
))

55 
	$�r_push
(
�r_buf_t
 *
�r
) {

56 #i�!
USE_NAKED


57 ()
�r
;

60 #i�
MICROPY_NLR_OS_WINDOWS


62 
__asm
 volatile (

79 
__asm
 volatile (

89 #i�
	`def�ed
(
__APPLE__
�&& def�ed(
__MACH__
)

98 #i�!
USE_NAKED


101 
	}
}

103 
NORETURN
 
	$�r_jump
(*
v�
) {

104 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

106 
__asm
 volatile (

108 #i�
MICROPY_NLR_OS_WINDOWS


125 : "r" (
t�
)

129 
MP_UNREACHABLE


130 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrx86.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_X86


31 #unde�
�r_push


36 #i�
MICROPY_NLR_OS_WINDOWS


37 
	$�r_push_��
(
�r_buf_t
 *
�r
�
	`asm
 ("nlr_push_tail");

39 
	`__��ibu�__
((
u�d
)�
	`�r_push_��
(
�r_buf_t
 *
�r
);

42 #i�!
	`def�ed
(
__��g__
�&& def�ed(
__GNUC__
) && __GNUC__ >= 8

44 
	#USE_NAKED
 (1)

	)

45 
	#UNDO_PRELUDE
 (0)

	)

46 #�i�
	`def�ed
(
__ZEPHYR__
�|| def�ed(
__ANDROID__
)

48 
	#USE_NAKED
 (0)

	)

49 
	#UNDO_PRELUDE
 (0)

	)

51 
	#USE_NAKED
 (0)

	)

52 
	#UNDO_PRELUDE
 (1)

	)

55 #i�
USE_NAKED


56 
	`__��ibu�__
((
�ked
))

58 
	$�r_push
(
�r_buf_t
 *
�r
) {

59 ()
�r
;

61 
__asm
 volatile (

62 #i�
UNDO_PRELUDE


76 #i�!
USE_NAKED


79 
	}
}

81 
NORETURN
 
	$�r_jump
(*
v�
) {

82 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

84 
__asm
 volatile (

97 : "r" (
t�
)

101 
MP_UNREACHABLE


102 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrxtensa.c

27 
	~"py/mp��e.h
"

29 #i�
MICROPY_NLR_XTENSA


31 #unde�
�r_push


39 
	$�r_push
(
�r_buf_t
 *
�r
) {

41 
__asm
 volatile (

56 
	}
}

58 
NORETURN
 
	$�r_jump
(*
v�
) {

59 
	`MP_NLR_JUMP_HEAD
(
v�
, 
t�
)

61 
__asm
 volatile (

76 : "r" (
t�
)

80 
MP_UNREACHABLE


81 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\obj.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<�d�g.h
>

30 
	~<as��.h
>

32 
	~"py/obj.h
"

33 
	~"py/objty�.h
"

34 
	~"py/obj�t.h
"

35 
	~"py/obj�r.h
"

36 
	~"py/ru�ime.h
"

37 
	~"py/c�ack.h
"

38 
	~"py/��am.h
"

41 
MP_NOINLINE
 *
	$mp_obj_m�loc_h��r
(
size_t
 
num_by�s
, cڡ 
mp_obj_ty�_t
 *
ty�
) {

42 
mp_obj_ba�_t
 *
ba�
 = (mp_obj_ba�_�*)
	`m_m�loc
(
num_by�s
);

43 
ba�
->
ty�
 =�ype;

44  
ba�
;

45 
	}
}

47 #i�
MICROPY_ENABLE_FINALISER


49 
MP_NOINLINE
 *
	$mp_obj_m�loc_w�h_f��i�r_h��r
(
size_t
 
num_by�s
, cڡ 
mp_obj_ty�_t
 *
ty�
) {

50 
mp_obj_ba�_t
 *
ba�
 = (mp_obj_ba�_�*)
	`m_m�loc_w�h_f��i�r
(
num_by�s
);

51 
ba�
->
ty�
 =�ype;

52  
ba�
;

53 
	}
}

56 cڡ 
mp_obj_ty�_t
 *
	$MICROPY_WRAP_MP_OBJ_GET_TYPE
(
mp_obj_g�_ty�
)(
mp_cڡ_obj_t
 
o_�
) {

57 #i�
MICROPY_OBJ_IMMEDIATE_OBJS
 && 
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_A


59 i�(
	`mp_obj_is_obj
(
o_�
)) {

60 cڡ 
mp_obj_ba�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

61  
o
->
ty�
;

63 cڡ 
mp_obj_ty�_t
 *cڡ 
ty�s
[] = {

64 
NULL
, &
mp_ty�_�t
, &
mp_ty�_�r
, &mp_type_int,

65 
NULL
, &
mp_ty�_�t
, &
mp_ty�_N�eTy�
, &mp_type_int,

66 
NULL
, &
mp_ty�_�t
, &
mp_ty�_�r
, &mp_type_int,

67 
NULL
, &
mp_ty�_�t
, &
mp_ty�_bo�
, &mp_type_int,

69  
ty�s
[(
u���_t
)
o_�
 & 0xf];

72 #�i�
MICROPY_OBJ_IMMEDIATE_OBJS
 && 
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C


74 i�(
	`mp_obj_is_sm�l_�t
(
o_�
)) {

75  &
mp_ty�_�t
;

76 } i�(
	`mp_obj_is_obj
(
o_�
)) {

77 cڡ 
mp_obj_ba�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

78  
o
->
ty�
;

79 #i�
MICROPY_PY_BUILTINS_FLOAT


80 } i�((((
mp_u�t_t
)(
o_�
)) & 0xff800007) != 0x00000006) {

81  &
mp_ty�_��t
;

84 cڡ 
mp_obj_ty�_t
 *cڡ 
ty�s
[] = {

85 &
mp_ty�_�r
, &
mp_ty�_N�eTy�
, &mp_ty�_�r, &
mp_ty�_bo�
,

87  
ty�s
[((
u���_t
)
o_�
 >> 3) & 3];

92 i�(
	`mp_obj_is_sm�l_�t
(
o_�
)) {

93  &
mp_ty�_�t
;

94 } i�(
	`mp_obj_is_q�r
(
o_�
)) {

95  &
mp_ty�_�r
;

96 #i�
MICROPY_PY_BUILTINS_FLOAT
 && ( \

97 
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C
 || MICROPY_OBJ_REPR =�
MICROPY_OBJ_REPR_D
)

98 } i�(
	`mp_obj_is_��t
(
o_�
)) {

99  &
mp_ty�_��t
;

101 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


102 } i�(
	`mp_obj_is_immed��_obj
(
o_�
)) {

103 cڡ 
mp_obj_ty�_t
 *cڡ 
ty�s
[2] = {&
mp_ty�_N�eTy�
, &
mp_ty�_bo�
};

104  
ty�s
[
	`MP_OBJ_IMMEDIATE_OBJ_VALUE
(
o_�
) & 1];

107 cڡ 
mp_obj_ba�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

108  
o
->
ty�
;

112 
	}
}

114 cڡ *
	$mp_obj_g�_ty�_�r
(
mp_cڡ_obj_t
 
o_�
) {

115  
	`q�r_�r
(
	`mp_obj_g�_ty�
(
o_�
)->
�me
);

116 
	}
}

118 
	$mp_obj_��t_h��r
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

120 
	`mp_c�ack_check
();

121 #i�de�
NDEBUG


122 i�(
o_�
 =�
MP_OBJ_NULL
) {

123 
	`mp_��t_�r
(
��t
, "(nil)");

127 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o_�
);

128 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��t
)) {

129 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��t
)((
mp_��t_t
 *�r�t, 
o_�
, 
k�d
);

131 
	`mp_��tf
(
��t
, "<%q>", 
ty�
->
�me
);

133 
	}
}

135 
	$mp_obj_��t
(
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

136 
	`mp_obj_��t_h��r
(
MP_PYTHON_PRINTER
, 
o_�
, 
k�d
);

137 
	}
}

140 
	$mp_obj_��t_ex��i�
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
exc
) {

141 i�(
	`mp_obj_is_ex��i�_����
(
exc
)) {

142 
size_t
 
n
, *
v�ues
;

143 
	`mp_obj_ex��i�_g�_�a�back
(
exc
, &
n
, &
v�ues
);

144 i�(
n
 > 0) {

145 
	`as��
(
n
 % 3 == 0);

146 
	`mp_��t_�r
(
��t
, "Traceback (most�ecent call�ast):\n");

147 
i
 = 
n
 - 3; i >= 0; i -= 3) {

148 #i�
MICROPY_ENABLE_SOURCE_LINE


149 
	`mp_��tf
(
��t
, " F��\"%q\",���%d", 
v�ues
[
i
], ()values[i + 1]);

151 
	`mp_��tf
(
��t
, " F��\"%q\"", 
v�ues
[
i
]);

154 
q�r
 
block
 = 
v�ues
[
i
 + 2];

155 i�(
block
 =�
MP_QSTRnu�
) {

156 
	`mp_��t_�r
(
��t
, "\n");

158 
	`mp_��tf
(
��t
, ", i�%q\n", 
block
);

163 
	`mp_obj_��t_h��r
(
��t
, 
exc
, 
PRINT_EXC
);

164 
	`mp_��t_�r
(
��t
, "\n");

165 
	}
}

167 
bo�
 
	$mp_obj_is_�ue
(
mp_obj_t
 
�g
) {

168 i�(
�g
 =�
mp_cڡ_�l�
) {

170 } i�(
�g
 =�
mp_cڡ_�ue
) {

172 } i�(
�g
 =�
mp_cڡ_n�e
) {

174 } i�(
	`mp_obj_is_sm�l_�t
(
�g
)) {

175 i�(
�g
 =�
	`MP_OBJ_NEW_SMALL_INT
(0)) {

181 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�g
);

182 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
u�ry_�
)) {

183 
mp_obj_t
 
�su�
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
u�ry_�
)(
MP_UNARY_OP_BOOL
, 
�g
);

184 i�(
�su�
 !�
MP_OBJ_NULL
) {

185  
�su�
 =�
mp_cڡ_�ue
;

189 
mp_obj_t
 
�n
 = 
	`mp_obj_�n_maybe
(
�g
);

190 i�(
�n
 !�
MP_OBJ_NULL
) {

192  
�n
 !�
	`MP_OBJ_NEW_SMALL_INT
(0);

198 
	}
}

200 
bo�
 
	$mp_obj_is_��ab�
(
mp_obj_t
 
o_�
) {

201 cڡ 
mp_��_fun_t
 
��
 = 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
	`mp_obj_g�_ty�
(
o_�
), call);

202 i�(
��
 !�
mp_obj_����_��
) {

203  
��
 !�
NULL
;

205  
	`mp_obj_����_is_��ab�
(
o_�
);

206 
	}
}

221 
mp_obj_t
 
	$mp_obj_equ�_n�_equ�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
o1
, mp_obj_�
o2
) {

222 
mp_obj_t
 
lo�l_�ue
 = (
�
 =�
MP_BINARY_OP_NOT_EQUAL
�? 
mp_cڡ_�l�
 : 
mp_cڡ_�ue
;

223 
mp_obj_t
 
lo�l_�l�
 = (
�
 =�
MP_BINARY_OP_NOT_EQUAL
�? 
mp_cڡ_�ue
 : 
mp_cڡ_�l�
;

224 
�ss_numb�
 = 0;

227 i�(
o1
 =�
o2
 &&

228 (
	`mp_obj_is_sm�l_�t
(
o1
�|| !(
	`mp_obj_g�_ty�
(o1)->
�ags
 & 
MP_TYPE_FLAG_EQ_NOT_REFLEXIVE
))) {

229  
lo�l_�ue
;

233 i�(
	`mp_obj_is_�r
(
o1
)) {

234 i�(
	`mp_obj_is_�r
(
o2
)) {

236  
	`mp_obj_�r_equ�
(
o1
, 
o2
�? 
lo�l_�ue
 : 
lo�l_�l�
;

237 #i�
MICROPY_PY_STR_BYTES_CMP_WARN


238 } i�(
	`mp_obj_is_ty�
(
o2
, &
mp_ty�_by�s
)) {

239 
�r_by�s_cmp
:

240 
	`mp_w�n�g
(
	`MP_WARN_CAT
(
By�sW�n�g
), "Comparison between bytes�nd str");

241  
lo�l_�l�
;

244 
sk�_�e_�ss
;

246 #i�
MICROPY_PY_STR_BYTES_CMP_WARN


247 } i�(
	`mp_obj_is_�r
(
o2
�&& 
	`mp_obj_is_ty�
(
o1
, &
mp_ty�_by�s
)) {

249 
�r_by�s_cmp
;

254 i�(
	`mp_obj_is_sm�l_�t
(
o1
)) {

255 i�(
	`mp_obj_is_sm�l_�t
(
o2
)) {

257  
lo�l_�l�
;

259 
sk�_�e_�ss
;

264 
�ss_numb�
 < 2) {

265 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o1
);

268 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
b��y_�
) &&

269 ((
ty�
->
�ags
 & 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
�|| 
	`mp_obj_g�_ty�
(
o2
) ==�ype)) {

272 i�(
�
 =�
MP_BINARY_OP_NOT_EQUAL
 && (
ty�
->
�ags
 & 
MP_TYPE_FLAG_EQ_HAS_NEQ_TEST
)) {

273 
mp_obj_t
 
r
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
b��y_�
)(
MP_BINARY_OP_NOT_EQUAL
, 
o1
, 
o2
);

274 i�(
r
 !�
MP_OBJ_NULL
) {

275  
r
;

280 
mp_obj_t
 
r
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
b��y_�
)(
MP_BINARY_OP_EQUAL
, 
o1
, 
o2
);

281 i�(
r
 !�
MP_OBJ_NULL
) {

282 i�(
�
 =�
MP_BINARY_OP_EQUAL
) {

283  
r
;

285  
	`mp_obj_is_�ue
(
r
�? 
lo�l_�ue
 : 
lo�l_�l�
;

290 
sk�_�e_�ss
:

292 ++
�ss_numb�
;

293 
mp_obj_t
 
�mp
 = 
o1
;

294 
o1
 = 
o2
;

295 
o2
 = 
�mp
;

299  (
o1
 =�
o2
�? 
lo�l_�ue
 : 
lo�l_�l�
;

300 
	}
}

302 
bo�
 
	$mp_obj_equ�
(
mp_obj_t
 
o1
, mp_obj_�
o2
) {

303  
	`mp_obj_is_�ue
(
	`mp_obj_equ�_n�_equ�
(
MP_BINARY_OP_EQUAL
, 
o1
, 
o2
));

304 
	}
}

306 
mp_�t_t
 
	$mp_obj_g�_�t
(
mp_cڡ_obj_t
 
�g
) {

310 
mp_�t_t
 
v�
;

311 i�(!
	`mp_obj_g�_�t_maybe
(
�g
, &
v�
)) {

312 
	`mp_�i�_Ty�E��_�t_c�v�si�
(
�g
);

314  
v�
;

315 
	}
}

317 
mp_�t_t
 
	$mp_obj_g�_�t_�un��d
(
mp_cڡ_obj_t
 
�g
) {

318 i�(
	`mp_obj_is_�t
(
�g
)) {

319  
	`mp_obj_�t_g�_�un��d
(
�g
);

321  
	`mp_obj_g�_�t
(
�g
);

323 
	}
}

328 
bo�
 
	$mp_obj_g�_�t_maybe
(
mp_cڡ_obj_t
 
�g
, 
mp_�t_t
 *
v�ue
) {

329 i�(
�g
 =�
mp_cڡ_�l�
) {

330 *
v�ue
 = 0;

331 } i�(
�g
 =�
mp_cڡ_�ue
) {

332 *
v�ue
 = 1;

333 } i�(
	`mp_obj_is_sm�l_�t
(
�g
)) {

334 *
v�ue
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�g
);

335 } i�(
	`mp_obj_is_exa�_ty�
(
�g
, &
mp_ty�_�t
)) {

336 *
v�ue
 = 
	`mp_obj_�t_g�_checked
(
�g
);

338 
�g
 = 
	`mp_u�ry_�
(
MP_UNARY_OP_INT_MAYBE
, (
mp_obj_t
)arg);

339 i�(
�g
 !�
MP_OBJ_NULL
) {

340 *
v�ue
 = 
	`mp_obj_�t_g�_checked
(
�g
);

342  
�l�
;

345  
�ue
;

346 
	}
}

348 #i�
MICROPY_PY_BUILTINS_FLOAT


349 
bo�
 
	$mp_obj_g�_��t_maybe
(
mp_obj_t
 
�g
, 
mp_��t_t
 *
v�ue
) {

350 
mp_��t_t
 
v�
;

352 i�(
�g
 =�
mp_cڡ_�l�
) {

353 
v�
 = 0;

354 } i�(
�g
 =�
mp_cڡ_�ue
) {

355 
v�
 = 1;

356 } i�(
	`mp_obj_is_sm�l_�t
(
�g
)) {

357 
v�
 = (
mp_��t_t
)
	`MP_OBJ_SMALL_INT_VALUE
(
�g
);

358 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


359 } i�(
	`mp_obj_is_exa�_ty�
(
�g
, &
mp_ty�_�t
)) {

360 
v�
 = 
	`mp_obj_�t_as_��t_im�
(
�g
);

362 } i�(
	`mp_obj_is_��t
(
�g
)) {

363 
v�
 = 
	`mp_obj_��t_g�
(
�g
);

365 
�g
 = 
	`mp_u�ry_�
(
MP_UNARY_OP_FLOAT_MAYBE
, (
mp_obj_t
)arg);

366 i�(
�g
 !�
MP_OBJ_NULL
 && 
	`mp_obj_is_��t
(arg)) {

367 
v�
 = 
	`mp_obj_��t_g�
(
�g
);

369  
�l�
;

372 *
v�ue
 = 
v�
;

373  
�ue
;

374 
	}
}

376 
mp_��t_t
 
	$mp_obj_g�_��t
(
mp_obj_t
 
�g
) {

377 
mp_��t_t
 
v�
;

379 i�(!
	`mp_obj_g�_��t_maybe
(
�g
, &
v�
)) {

380 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


381 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't convert�o float"));

383 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

384 
	`MP_ERROR_TEXT
("�n'�c�v��%�t���t"), 
	`mp_obj_g�_ty�_�r
(
�g
));

388  
v�
;

389 
	}
}

391 #i�
MICROPY_PY_BUILTINS_COMPLEX


392 
bo�
 
	$mp_obj_g�_com�ex_maybe
(
mp_obj_t
 
�g
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
) {

393 i�(
	`mp_obj_g�_��t_maybe
(
�g
, 
��
)) {

394 *
imag
 = 0;

395 } i�(
	`mp_obj_is_ty�
(
�g
, &
mp_ty�_com�ex
)) {

396 
	`mp_obj_com�ex_g�
(
�g
, 
��
, 
imag
);

398 
�g
 = 
	`mp_u�ry_�
(
MP_UNARY_OP_COMPLEX_MAYBE
, (
mp_obj_t
)arg);

399 i�(
�g
 !�
MP_OBJ_NULL
 && 
	`mp_obj_is_ty�
�rg, &
mp_ty�_com�ex
)) {

400 
	`mp_obj_com�ex_g�
(
�g
, 
��
, 
imag
);

402  
�l�
;

405  
�ue
;

406 
	}
}

408 
	$mp_obj_g�_com�ex
(
mp_obj_t
 
�g
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
) {

409 i�(!
	`mp_obj_g�_com�ex_maybe
(
�g
, 
��
, 
imag
)) {

410 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


411 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't convert�o complex"));

413 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

414 
	`MP_ERROR_TEXT
("�n'�c�v��%�t�com�ex"), 
	`mp_obj_g�_ty�_�r
(
�g
));

417 
	}
}

422 
	$mp_obj_g�_��y
(
mp_obj_t
 
o
, 
size_t
 *
�n
, mp_obj_�**
�ems
) {

423 i�(
	`mp_obj_is_ty�
(
o
, &
mp_ty�_tu�e
)) {

424 
	`mp_obj_tu�e_g�
(
o
, 
�n
, 
�ems
);

425 } i�(
	`mp_obj_is_ty�
(
o
, &
mp_ty�_li�
)) {

426 
	`mp_obj_li�_g�
(
o
, 
�n
, 
�ems
);

428 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


429 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("expected�uple/list"));

431 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

432 
	`MP_ERROR_TEXT
("obje� '%s' i�'��tu��܆i�"), 
	`mp_obj_g�_ty�_�r
(
o
));

435 
	}
}

438 
	$mp_obj_g�_��y_fixed_n
(
mp_obj_t
 
o
, 
size_t
 
�n
, mp_obj_�**
�ems
) {

439 
size_t
 
�q_�n
;

440 
	`mp_obj_g�_��y
(
o
, &
�q_�n
, 
�ems
);

441 i�(
�q_�n
 !�
�n
) {

442 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


443 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("tuple/list has wrong�ength"));

445 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

446 
	`MP_ERROR_TEXT
("�que�ed��gth %d bu�obje� ha��ngth %d"), ()
�n
, ()
�q_�n
);

449 
	}
}

452 
size_t
 
	$mp_g�_�dex
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
�n
, 
mp_obj_t
 
�dex
, 
bo�
 
is_�i�
) {

453 
mp_�t_t
 
i
;

454 i�(
	`mp_obj_is_sm�l_�t
(
�dex
)) {

455 
i
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�dex
);

456 } i�(!
	`mp_obj_g�_�t_maybe
(
�dex
, &
i
)) {

457 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


458 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("indices must be integers"));

460 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

461 
	`MP_ERROR_TEXT
("%q indices must be integers,�ot %s"),

462 
ty�
->
�me
, 
	`mp_obj_g�_ty�_�r
(
�dex
));

466 i�(
i
 < 0) {

467 
i
 +�
�n
;

469 i�(
is_�i�
) {

470 i�(
i
 < 0) {

471 
i
 = 0;

472 } i�((
mp_u�t_t
)
i
 > 
�n
) {

473 
i
 = 
�n
;

476 i�(
i
 < 0 || (
mp_u�t_t
)�>�
�n
) {

477 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


478 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("index out of�ange"));

480 
	`mp_�i�_msg_v�g
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("%q index ou�o�nge"), 
ty�
->
�me
);

486  (
size_t
)
i
;

487 
	}
}

489 
mp_obj_t
 
	$mp_obj_id
(
mp_obj_t
 
o_�
) {

490 
mp_�t_t
 
id
 = (mp_�t_t)
o_�
;

491 i�(!
	`mp_obj_is_obj
(
o_�
)) {

492  
	`mp_obj_�w_�t
(
id
);

493 } i�(
id
 >= 0) {

498  
	`MP_OBJ_NEW_SMALL_INT
(
id
);

503  
	`mp_obj_�w_�t_�om_u�t
((
mp_u�t_t
)
id
);

505 
	}
}

508 
mp_obj_t
 
	$mp_obj_�n
(
mp_obj_t
 
o_�
) {

509 
mp_obj_t
 
�n
 = 
	`mp_obj_�n_maybe
(
o_�
);

510 i�(
�n
 =�
MP_OBJ_NULL
) {

511 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


512 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object has�o�en"));

514 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

515 
	`MP_ERROR_TEXT
("obje� o�ty� '%s' ha�n��n()"), 
	`mp_obj_g�_ty�_�r
(
o_�
));

518  
�n
;

520 
	}
}

523 
mp_obj_t
 
	$mp_obj_�n_maybe
(
mp_obj_t
 
o_�
) {

525 #i�!
MICROPY_PY_BUILTINS_STR_UNICODE


527 
	`mp_obj_is_�r
(
o_�
) ||

529 
	`mp_obj_is_ty�
(
o_�
, &
mp_ty�_by�s
)) {

530 
	`GET_STR_LEN
(
o_�
, 
l
);

531  
	`MP_OBJ_NEW_SMALL_INT
(
l
);

533 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o_�
);

534 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
u�ry_�
)) {

535  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
u�ry_�
)(
MP_UNARY_OP_LEN
, 
o_�
);

537  
MP_OBJ_NULL
;

540 
	}
}

542 
mp_obj_t
 
	$mp_obj_subs�
(
mp_obj_t
 
ba�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

543 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
ba�
);

544 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
subs�
)) {

545 
mp_obj_t
 
�t
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
subs�
)(
ba�
, 
�dex
, 
v�ue
);

546 i�(
�t
 !�
MP_OBJ_NULL
) {

547  
�t
;

551 i�(
v�ue
 =�
MP_OBJ_NULL
) {

552 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


553 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object doesn't support item deletion"));

555 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

556 
	`MP_ERROR_TEXT
("'%s' obje� dۢ'�su�܈�em d��i�"), 
	`mp_obj_g�_ty�_�r
(
ba�
));

558 } i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

559 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


560 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object isn't subscriptable"));

562 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

563 
	`MP_ERROR_TEXT
("'%s' obje� i�'�subs���b�"), 
	`mp_obj_g�_ty�_�r
(
ba�
));

566 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


567 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object doesn't support item�ssignment"));

569 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

570 
	`MP_ERROR_TEXT
("'%s' obje� dۢ'�su�܈�em�ssignm�t"), 
	`mp_obj_g�_ty�_�r
(
ba�
));

573 
	}
}

577 
mp_obj_t
 
	$mp_id�t�y
(
mp_obj_t
 
�lf
) {

578  
�lf
;

579 
	}
}

580 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_id�t�y_obj
, 
mp_id�t�y
);

587 
bo�
 
	$mp_g�_buf�r
(
mp_obj_t
 
obj
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
) {

588 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
obj
);

589 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
buf�r
)

590 && 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
buf�r
)(
obj
, 
buf�fo
, 
�ags
 & 
MP_BUFFER_RW
) == 0) {

591  
�ue
;

593 i�(
�ags
 & 
MP_BUFFER_RAISE_IF_UNSUPPORTED
) {

594 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object with buffer�rotocol�equired"));

596  
�l�
;

597 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\obj.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJ_H


27 
	#MICROPY_INCLUDED_PY_OBJ_H


	)

29 
	~<as��.h
>

31 
	~"py/mpc�fig.h
"

32 
	~"py/misc.h
"

33 
	~"py/q�r.h
"

34 
	~"py/m�r�t.h
"

35 
	~"py/ru�ime0.h
"

40 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


41 
u�t64_t
 
	tmp_obj_t
;

42 
u�t64_t
 
	tmp_cڡ_obj_t
;

44 *
	tmp_obj_t
;

45 cڡ *
	tmp_cڡ_obj_t
;

50 
_mp_obj_ty�_t
 
	tmp_obj_ty�_t
;

54 
	s_mp_obj_ba�_t
 {

55 cڡ 
mp_obj_ty�_t
 *
ty�
 
	mMICROPY_OBJ_BASE_ALIGNMENT
;

57 
_mp_obj_ba�_t
 
	tmp_obj_ba�_t
;

70 #i�
MICROPY_DEBUG_MP_OBJ_SENTINELS


71 
	#MP_OBJ_NULL
 (
	`MP_OBJ_FROM_PTR
((*)0))

	)

72 
	#MP_OBJ_STOP_ITERATION
 (
	`MP_OBJ_FROM_PTR
((*)4))

	)

73 
	#MP_OBJ_SENTINEL
 (
	`MP_OBJ_FROM_PTR
((*)8))

	)

75 
	#MP_OBJ_NULL
 (
	`MP_OBJ_FROM_PTR
((*)0))

	)

76 
	#MP_OBJ_STOP_ITERATION
 (
	`MP_OBJ_FROM_PTR
((*)0))

	)

77 
	#MP_OBJ_SENTINEL
 (
	`MP_OBJ_FROM_PTR
((*)4))

	)

84 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_A


86 
�l�e
 
bo�
 
	$mp_obj_is_sm�l_�t
(
mp_cڡ_obj_t
 
o
) {

87  (((
mp_�t_t
)(
o
)) & 1) != 0;

88 
	}
}

89 
	#MP_OBJ_SMALL_INT_VALUE
(
o
�(((
mp_�t_t
)(o)�>> 1)

	)

90 
	#MP_OBJ_NEW_SMALL_INT
(
sm�l_�t
�((
mp_obj_t
)((((
mp_u�t_t
)(sm�l_�t)�<< 1�| 1))

	)

92 
�l�e
 
bo�
 
	$mp_obj_is_q�r
(
mp_cڡ_obj_t
 
o
) {

93  (((
mp_�t_t
)(
o
)) & 7) == 2;

94 
	}
}

95 
	#MP_OBJ_QSTR_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 3)

	)

96 
	#MP_OBJ_NEW_QSTR
(
q�
�((
mp_obj_t
)((((
mp_u�t_t
)(q�)�<< 3�| 2))

	)

98 
�l�e
 
bo�
 
	$mp_obj_is_immed��_obj
(
mp_cڡ_obj_t
 
o
) {

99  (((
mp_�t_t
)(
o
)) & 7) == 6;

100 
	}
}

101 
	#MP_OBJ_IMMEDIATE_OBJ_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 3)

	)

102 
	#MP_OBJ_NEW_IMMEDIATE_OBJ
(
v�
�((
mp_obj_t
)(((v��<< 3�| 6))

	)

104 #i�
MICROPY_PY_BUILTINS_FLOAT


105 
	#mp_cڡ_��t_e
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_e_obj
)

	)

106 
	#mp_cڡ_��t_pi
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_pi_obj
)

	)

107 #i�
MICROPY_PY_MATH_CONSTANTS


108 
	#mp_cڡ_��t_�u
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�u_obj
)

	)

109 
	#mp_cڡ_��t_�f
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�f_obj
)

	)

110 
	#mp_cڡ_��t_�n
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�n_obj
)

	)

112 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_e_obj
;

113 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_pi_obj
;

114 #i�
MICROPY_PY_MATH_CONSTANTS


115 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�u_obj
;

116 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�f_obj
;

117 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�n_obj
;

120 
	#mp_obj_is_��t
(
o
�
	`mp_obj_is_ty�
((o), &
mp_ty�_��t
)

	)

121 
mp_��t_t
 
mp_obj_��t_g�
(
mp_obj_t
 
�lf_�
);

122 
mp_obj_t
 
mp_obj_�w_��t
(
mp_��t_t
 
v�ue
);

125 
�l�e
 
bo�
 
	$mp_obj_is_obj
(
mp_cڡ_obj_t
 
o
) {

126  (((
mp_�t_t
)(
o
)) & 3) == 0;

127 
	}
}

129 #�i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_B


131 
�l�e
 
bo�
 
	$mp_obj_is_sm�l_�t
(
mp_cڡ_obj_t
 
o
) {

132  (((
mp_�t_t
)(
o
)) & 3) == 1;

133 
	}
}

134 
	#MP_OBJ_SMALL_INT_VALUE
(
o
�(((
mp_�t_t
)(o)�>> 2)

	)

135 
	#MP_OBJ_NEW_SMALL_INT
(
sm�l_�t
�((
mp_obj_t
)((((
mp_u�t_t
)(sm�l_�t)�<< 2�| 1))

	)

137 
�l�e
 
bo�
 
	$mp_obj_is_q�r
(
mp_cڡ_obj_t
 
o
) {

138  (((
mp_�t_t
)(
o
)) & 7) == 3;

139 
	}
}

140 
	#MP_OBJ_QSTR_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 3)

	)

141 
	#MP_OBJ_NEW_QSTR
(
q�
�((
mp_obj_t
)((((
mp_u�t_t
)(q�)�<< 3�| 3))

	)

143 
�l�e
 
bo�
 
	$mp_obj_is_immed��_obj
(
mp_cڡ_obj_t
 
o
) {

144  (((
mp_�t_t
)(
o
)) & 7) == 7;

145 
	}
}

146 
	#MP_OBJ_IMMEDIATE_OBJ_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 3)

	)

147 
	#MP_OBJ_NEW_IMMEDIATE_OBJ
(
v�
�((
mp_obj_t
)(((v��<< 3�| 7))

	)

149 #i�
MICROPY_PY_BUILTINS_FLOAT


150 
	#mp_cڡ_��t_e
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_e_obj
)

	)

151 
	#mp_cڡ_��t_pi
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_pi_obj
)

	)

152 #i�
MICROPY_PY_MATH_CONSTANTS


153 
	#mp_cڡ_��t_�u
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�u_obj
)

	)

154 
	#mp_cڡ_��t_�f
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�f_obj
)

	)

155 
	#mp_cڡ_��t_�n
 
	`MP_ROM_PTR
(&
mp_cڡ_��t_�n_obj
)

	)

157 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_e_obj
;

158 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_pi_obj
;

159 #i�
MICROPY_PY_MATH_CONSTANTS


160 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�u_obj
;

161 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�f_obj
;

162 
cڡ 
_mp_obj_��t_t
 
mp_cڡ_��t_�n_obj
;

165 
	#mp_obj_is_��t
(
o
�
	`mp_obj_is_ty�
((o), &
mp_ty�_��t
)

	)

166 
mp_��t_t
 
mp_obj_��t_g�
(
mp_obj_t
 
�lf_�
);

167 
mp_obj_t
 
mp_obj_�w_��t
(
mp_��t_t
 
v�ue
);

170 
�l�e
 
bo�
 
	$mp_obj_is_obj
(
mp_cڡ_obj_t
 
o
) {

171  (((
mp_�t_t
)(
o
)) & 1) == 0;

172 
	}
}

174 #�i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C


176 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_NONE


180 
�l�e
 
bo�
 
	$mp_obj_is_sm�l_�t
(
mp_cڡ_obj_t
 
o
) {

181  (((
mp_�t_t
)(
o
)) & 1) != 0;

182 
	}
}

183 
	#MP_OBJ_SMALL_INT_VALUE
(
o
�(((
mp_�t_t
)(o)�>> 1)

	)

184 
	#MP_OBJ_NEW_SMALL_INT
(
sm�l_�t
�((
mp_obj_t
)((((
mp_u�t_t
)(sm�l_�t)�<< 1�| 1))

	)

186 #i�
MICROPY_PY_BUILTINS_FLOAT


187 
	#mp_cڡ_��t_e
 
	`MP_ROM_PTR
((
mp_obj_t
)(((0x402df854 & ~3�| 2�+ 0x80800000))

	)

188 
	#mp_cڡ_��t_pi
 
	`MP_ROM_PTR
((
mp_obj_t
)(((0x40490fdb & ~3�| 2�+ 0x80800000))

	)

189 #i�
MICROPY_PY_MATH_CONSTANTS


190 
	#mp_cڡ_��t_�u
 
	`MP_ROM_PTR
((
mp_obj_t
)(((0x40c90fdb & ~3�| 2�+ 0x80800000))

	)

191 
	#mp_cڡ_��t_�f
 
	`MP_ROM_PTR
((
mp_obj_t
)(((0x7f800000 & ~3�| 2�+ 0x80800000))

	)

192 
	#mp_cڡ_��t_�n
 
	`MP_ROM_PTR
((
mp_obj_t
)(((0xffc00000 & ~3�| 2�+ 0x80800000))

	)

195 
�l�e
 
bo�
 
	$mp_obj_is_��t
(
mp_cڡ_obj_t
 
o
) {

197 
	`MP_STATIC_ASSERT
((
mp_��t_t
�<�(
mp_obj_t
));

199  (((
mp_u�t_t
)(
o
)) & 3) == 2 && (((mp_uint_t)(o)) & 0xff800007) != 0x00000006;

200 
	}
}

201 
�l�e
 
mp_��t_t
 
	$mp_obj_��t_g�
(
mp_cڡ_obj_t
 
o
) {

203 
mp_��t_t
 
f
;

204 
mp_u�t_t
 
u
;

205 } 
num
 = {.
u
 = ((
mp_u�t_t
)
o
 - 0x80800000) & ~3};

206  
num
.
f
;

207 
	}
}

208 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t
(
mp_��t_t
 
f
) {

210 
mp_��t_t
 
f
;

211 
mp_u�t_t
 
u
;

212 } 
num
 = {.
f
 = f};

213  (
mp_obj_t
)(((
num
.
u
 & ~0x3) | 2) + 0x80800000);

214 
	}
}

217 
�l�e
 
bo�
 
	$mp_obj_is_q�r
(
mp_cڡ_obj_t
 
o
) {

218  (((
mp_u�t_t
)(
o
)) & 0xff80000f) == 0x00000006;

219 
	}
}

220 
	#MP_OBJ_QSTR_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 4)

	)

221 
	#MP_OBJ_NEW_QSTR
(
q�
�((
mp_obj_t
)((((
mp_u�t_t
)(q�)�<< 4�| 0x00000006))

	)

223 
�l�e
 
bo�
 
	$mp_obj_is_immed��_obj
(
mp_cڡ_obj_t
 
o
) {

224  (((
mp_u�t_t
)(
o
)) & 0xff80000f) == 0x0000000e;

225 
	}
}

226 
	#MP_OBJ_IMMEDIATE_OBJ_VALUE
(
o
�(((
mp_u�t_t
)(o)�>> 4)

	)

227 
	#MP_OBJ_NEW_IMMEDIATE_OBJ
(
v�
�((
mp_obj_t
)(((v��<< 4�| 0xe))

	)

229 
�l�e
 
bo�
 
	$mp_obj_is_obj
(
mp_cڡ_obj_t
 
o
) {

230  (((
mp_�t_t
)(
o
)) & 3) == 0;

231 
	}
}

233 #�i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


235 
�l�e
 
bo�
 
	$mp_obj_is_sm�l_�t
(
mp_cڡ_obj_t
 
o
) {

236  (((
u�t64_t
)(
o
)) & 0xffff000000000000) == 0x0001000000000000;

237 
	}
}

238 
	#MP_OBJ_SMALL_INT_VALUE
(
o
�(((
mp_�t_t
)((o�<< 16)�>> 17)

	)

239 
	#MP_OBJ_NEW_SMALL_INT
(
sm�l_�t
�(((((
u�t64_t
)(sm�l_�t)�& 0x7fffffffffff�<< 1�| 0x0001000000000001)

	)

241 
�l�e
 
bo�
 
	$mp_obj_is_q�r
(
mp_cڡ_obj_t
 
o
) {

242  (((
u�t64_t
)(
o
)) & 0xffff000000000000) == 0x0002000000000000;

243 
	}
}

244 
	#MP_OBJ_QSTR_VALUE
(
o
�((((
u�t32_t
)(o)�>> 1�& 0xffffffff)

	)

245 
	#MP_OBJ_NEW_QSTR
(
q�
�((
mp_obj_t
)(((
u�t64_t
)(((
u�t32_t
)(q�)�<< 1)�| 0x0002000000000001))

	)

247 
�l�e
 
bo�
 
	$mp_obj_is_immed��_obj
(
mp_cڡ_obj_t
 
o
) {

248  (((
u�t64_t
)(
o
)) & 0xffff000000000000) == 0x0003000000000000;

249 
	}
}

250 
	#MP_OBJ_IMMEDIATE_OBJ_VALUE
(
o
�((((
u�t32_t
)(o)�>> 46�& 3)

	)

251 
	#MP_OBJ_NEW_IMMEDIATE_OBJ
(
v�
�(((
u�t64_t
)(v��<< 46�| 0x0003000000000000)

	)

253 #i�
MICROPY_PY_BUILTINS_FLOAT


255 #i�
MICROPY_FLOAT_IMPL
 !�
MICROPY_FLOAT_IMPL_DOUBLE


256 #�r� 
MICROPY_OBJ_REPR_D
 
�qu�es
 
MICROPY_FLOAT_IMPL_DOUBLE


259 
	#mp_cڡ_��t_e
 {((
mp_obj_t
)((
u�t64_t
)0x4005bf0a8b145769 + 0x8004000000000000))}

	)

260 
	#mp_cڡ_��t_pi
 {((
mp_obj_t
)((
u�t64_t
)0x400921fb54442d18 + 0x8004000000000000))}

	)

261 #i�
MICROPY_PY_MATH_CONSTANTS


262 
	#mp_cڡ_��t_�u
 {((
mp_obj_t
)((
u�t64_t
)0x401921fb54442d18 + 0x8004000000000000))}

	)

263 
	#mp_cڡ_��t_�f
 {((
mp_obj_t
)((
u�t64_t
)0x7ff0000000000000 + 0x8004000000000000))}

	)

264 
	#mp_cڡ_��t_�n
 {((
mp_obj_t
)((
u�t64_t
)0xfff8000000000000 + 0x8004000000000000))}

	)

267 
�l�e
 
bo�
 
	$mp_obj_is_��t
(
mp_cڡ_obj_t
 
o
) {

268  ((
u�t64_t
)(
o
) & 0xfffc000000000000) != 0;

269 
	}
}

270 
�l�e
 
mp_��t_t
 
	$mp_obj_��t_g�
(
mp_cڡ_obj_t
 
o
) {

272 
mp_��t_t
 
f
;

273 
u�t64_t
 
r
;

274 } 
num
 = {.
r
 = 
o
 - 0x8004000000000000};

275  
num
.
f
;

276 
	}
}

277 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t
(
mp_��t_t
 
f
) {

279 
mp_��t_t
 
f
;

280 
u�t64_t
 
r
;

281 } 
num
 = {.
f
 = f};

282  
num
.
r
 + 0x8004000000000000;

283 
	}
}

286 
�l�e
 
bo�
 
	$mp_obj_is_obj
(
mp_cڡ_obj_t
 
o
) {

287  (((
u�t64_t
)(
o
)) & 0xffff000000000000) == 0x0000000000000000;

288 
	}
}

289 
	#MP_OBJ_TO_PTR
(
o
�((*)(
u���_t
)(o))

	)

290 
	#MP_OBJ_FROM_PTR
(
p
�((
mp_obj_t
)((
u���_t
)�)))

	)

293 
	u_mp_rom_obj_t
 {

294 
u�t64_t
 
	mu64
;

296 cڡ *
	mlo
, *
	mhi
;

297 } 
	mu32
;

298 } 
	tmp_rom_obj_t
;

299 
	#MP_ROM_INT
(
i
�{
	`MP_OBJ_NEW_SMALL_INT
(i)}

	)

300 
	#MP_ROM_QSTR
(
q
�{
	`MP_OBJ_NEW_QSTR
(q)}

	)

301 #i�
MP_ENDIANNESS_LITTLE


302 
	#MP_ROM_PTR
(
p
�{.
u32
 = {.
lo
 = (p), .
hi
 = 
NULL
}}

	)

304 
	#MP_ROM_PTR
(
p
�{.
u32
 = {.
lo
 = 
NULL
, .
hi
 = (p)}}

	)

315 #i�de�
MP_OBJ_TO_PTR


316 
	#MP_OBJ_TO_PTR
(
o
�((*)(o))

	)

320 #i�de�
MP_OBJ_FROM_PTR


321 
	#MP_OBJ_FROM_PTR
(
p
�((
mp_obj_t
)�))

	)

326 #i�de�
MP_ROM_NONE


327 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


328 
	#MP_ROM_NONE
 
mp_cڡ_n�e


	)

330 
	#MP_ROM_NONE
 
	`MP_ROM_PTR
(&
mp_cڡ_n�e_obj
)

	)

334 #i�de�
MP_ROM_FALSE


335 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


336 
	#MP_ROM_FALSE
 
mp_cڡ_�l�


	)

337 
	#MP_ROM_TRUE
 
mp_cڡ_�ue


	)

339 
	#MP_ROM_FALSE
 
	`MP_ROM_PTR
(&
mp_cڡ_�l�_obj
)

	)

340 
	#MP_ROM_TRUE
 
	`MP_ROM_PTR
(&
mp_cڡ_�ue_obj
)

	)

344 #i�de�
MP_ROM_INT


345 
mp_cڡ_obj_t
 
	tmp_rom_obj_t
;

346 
	#MP_ROM_INT
(
i
�
	`MP_OBJ_NEW_SMALL_INT
(i)

	)

347 
	#MP_ROM_QSTR
(
q
�
	`MP_OBJ_NEW_QSTR
(q)

	)

348 
	#MP_ROM_PTR
(
p
��)

	)

360 
	#MP_DECLARE_CONST_FUN_OBJ_0
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_fixed_t
 
	)
obj_name

361 
	#MP_DECLARE_CONST_FUN_OBJ_1
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_fixed_t
 
	)
obj_name

362 
	#MP_DECLARE_CONST_FUN_OBJ_2
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_fixed_t
 
	)
obj_name

363 
	#MP_DECLARE_CONST_FUN_OBJ_3
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_fixed_t
 
	)
obj_name

364 
	#MP_DECLARE_CONST_FUN_OBJ_VAR
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_v�_t
 
	)
obj_name

365 
	#MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_v�_t
 
	)
obj_name

366 
	#MP_DECLARE_CONST_FUN_OBJ_KW
(
obj_�me
�
cڡ 
mp_obj_fun_bu�t�_v�_t
 
	)
obj_name

368 
	#MP_OBJ_FUN_ARGS_MAX
 (0xffff)

369 
	#MP_OBJ_FUN_MAKE_SIG
(
n_�gs_m�
, 
n_�gs_max
, 
�kes_kw
�((
u�t32_t
)((((u�t32_t)�_�gs_m�)�<< 17�| (((u�t32_t)�_�gs_max)�<< 1�| (�akes_kw�? 1 : 0)))

	)

371 
	#MP_DEFINE_CONST_FUN_OBJ_0
(
obj_�me
, 
fun_�me
) \

372 cڡ 
mp_obj_fun_bu�t�_fixed_t
 
obj_�me
 = \

373 {{&
mp_ty�_fun_bu�t�_0
}, .
fun
.
_0
 = 
fun_�me
}

	)

374 
	#MP_DEFINE_CONST_FUN_OBJ_1
(
obj_�me
, 
fun_�me
) \

375 cڡ 
mp_obj_fun_bu�t�_fixed_t
 
obj_�me
 = \

376 {{&
mp_ty�_fun_bu�t�_1
}, .
fun
.
_1
 = 
fun_�me
}

	)

377 
	#MP_DEFINE_CONST_FUN_OBJ_2
(
obj_�me
, 
fun_�me
) \

378 cڡ 
mp_obj_fun_bu�t�_fixed_t
 
obj_�me
 = \

379 {{&
mp_ty�_fun_bu�t�_2
}, .
fun
.
_2
 = 
fun_�me
}

	)

380 
	#MP_DEFINE_CONST_FUN_OBJ_3
(
obj_�me
, 
fun_�me
) \

381 cڡ 
mp_obj_fun_bu�t�_fixed_t
 
obj_�me
 = \

382 {{&
mp_ty�_fun_bu�t�_3
}, .
fun
.
_3
 = 
fun_�me
}

	)

383 
	#MP_DEFINE_CONST_FUN_OBJ_VAR
(
obj_�me
, 
n_�gs_m�
, 
fun_�me
) \

384 cڡ 
mp_obj_fun_bu�t�_v�_t
 
obj_�me
 = \

385 {{&
mp_ty�_fun_bu�t�_v�
}, 
	`MP_OBJ_FUN_MAKE_SIG
(
n_�gs_m�
, 
MP_OBJ_FUN_ARGS_MAX
, 
�l�
), .
fun
.
v�
 = 
fun_�me
}

	)

386 
	#MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
obj_�me
, 
n_�gs_m�
, 
n_�gs_max
, 
fun_�me
) \

387 cڡ 
mp_obj_fun_bu�t�_v�_t
 
obj_�me
 = \

388 {{&
mp_ty�_fun_bu�t�_v�
}, 
	`MP_OBJ_FUN_MAKE_SIG
(
n_�gs_m�
, 
n_�gs_max
, 
�l�
), .
fun
.
v�
 = 
fun_�me
}

	)

389 
	#MP_DEFINE_CONST_FUN_OBJ_KW
(
obj_�me
, 
n_�gs_m�
, 
fun_�me
) \

390 cڡ 
mp_obj_fun_bu�t�_v�_t
 
obj_�me
 = \

391 {{&
mp_ty�_fun_bu�t�_v�
}, 
	`MP_OBJ_FUN_MAKE_SIG
(
n_�gs_m�
, 
MP_OBJ_FUN_ARGS_MAX
, 
�ue
), .
fun
.
kw
 = 
fun_�me
}

	)

396 
	#MP_DEFINE_CONST_MAP
(
m�_�me
, 
�b�_�me
) \

397 cڡ 
mp_m�_t
 
m�_�me
 = { \

398 .
�l_keys_�e_q�rs
 = 1, \

399 .
is_fixed
 = 1, \

400 .
is_�d�ed
 = 1, \

401 .
u�d
 = 
	`MP_ARRAY_SIZE
(
�b�_�me
), \

402 .
�loc
 = 
	`MP_ARRAY_SIZE
(
�b�_�me
), \

403 .
�b�
 = (
mp_m�_�em_t
 *)(
mp_rom_m�_�em_t
 *)
�b�_�me
, \

404 }

	)

406 
	#MP_DEFINE_CONST_DICT_WITH_SIZE
(
di�_�me
, 
�b�_�me
, 
n
) \

407 cڡ 
mp_obj_di�_t
 
di�_�me
 = { \

408 .
ba�
 = {&
mp_ty�_di�
}, \

409 .
m�
 = { \

410 .
�l_keys_�e_q�rs
 = 1, \

411 .
is_fixed
 = 1, \

412 .
is_�d�ed
 = 1, \

413 .
u�d
 = 
n
, \

414 .
�loc
 = 
n
, \

415 .
�b�
 = (
mp_m�_�em_t
 *)(
mp_rom_m�_�em_t
 *)
�b�_�me
, \

417 }

	)

419 
	#MP_DEFINE_CONST_DICT
(
di�_�me
, 
�b�_�me
�
	`MP_DEFINE_CONST_DICT_WITH_SIZE
(di�_�me,�ab�_�me, 
	`MP_ARRAY_SIZE
�ab�_�me))

	)

424 
	#MP_DECLARE_CONST_STATICMETHOD_OBJ
(
obj_�me
�
cڡ 
mp_rom_obj_��ic_�ass_m�hod_t
 
	)
obj_name

425 
	#MP_DECLARE_CONST_CLASSMETHOD_OBJ
(
obj_�me
�
cڡ 
mp_rom_obj_��ic_�ass_m�hod_t
 
	)
obj_name

427 
	#MP_DEFINE_CONST_STATICMETHOD_OBJ
(
obj_�me
, 
fun_�me
�cڡ 
mp_rom_obj_��ic_�ass_m�hod_t
 obj_�m��{{&
mp_ty�_��icm�hod
}, fun_�me}

	)

428 
	#MP_DEFINE_CONST_CLASSMETHOD_OBJ
(
obj_�me
, 
fun_�me
�cڡ 
mp_rom_obj_��ic_�ass_m�hod_t
 obj_�m��{{&
mp_ty�_�assm�hod
}, fun_�me}

	)

430 #i�de�
NO_QSTR


435 
	#MP_REGISTER_MODULE
(
modu�_�me
, 
obj_modu�
)

	)

438 
	#MP_REGISTER_EXTENSIBLE_MODULE
(
modu�_�me
, 
obj_modu�
)

	)

442 
	#MP_REGISTER_MODULE_DELEGATION
(
obj_modu�
, 
fun_�me
)

	)

446 
	#MP_REGISTER_ROOT_POINTER
(
v��b�_de���i�
)

	)

452 
	s_mp_m�_�em_t
 {

453 
mp_obj_t
 
key
;

454 
mp_obj_t
 
v�ue
;

455 } 
	tmp_m�_�em_t
;

457 
	s_mp_rom_m�_�em_t
 {

458 
mp_rom_obj_t
 
	mkey
;

459 
mp_rom_obj_t
 
	mv�ue
;

460 } 
	tmp_rom_m�_�em_t
;

462 
	s_mp_m�_t
 {

463 
size_t
 
	m�l_keys_�e_q�rs
 : 1;

464 
size_t
 
	mis_fixed
 : 1;

465 
size_t
 
	mis_�d�ed
 : 1;

466 
size_t
 
	mu�d
 : (8 * (size_t) - 3);

467 
size_t
 
	m�loc
;

468 
mp_m�_�em_t
 *
	m�b�
;

469 } 
	tmp_m�_t
;

472 
	e_mp_m�_lookup_k�d_t
 {

473 
	mMP_MAP_LOOKUP
 = 0,

474 
	mMP_MAP_LOOKUP_ADD_IF_NOT_FOUND
 = 1,

475 
	mMP_MAP_LOOKUP_REMOVE_IF_FOUND
 = 2,

476 
	mMP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND
 = 3,

477 } 
	tmp_m�_lookup_k�d_t
;

479 
�l�e
 
bo�
 
	$mp_m�_��_is_f��d
(cڡ 
mp_m�_t
 *
m�
, 
size_t
 
pos
) {

480 
	`as��
(
pos
 < 
m�
->
�loc
);

481  (
m�
)->
�b�
[
pos
].
key
 !�
MP_OBJ_NULL
 && (m�)->�b�[pos].key !�
MP_OBJ_SENTINEL
;

482 
	}
}

484 
mp_m�_��
(
mp_m�_t
 *
m�
, 
size_t
 
n
);

485 
mp_m�_��_fixed_�b�
(
mp_m�_t
 *
m�
, 
size_t
 
n
, cڡ 
mp_obj_t
 *
�b�
);

486 
mp_m�_t
 *
mp_m�_�w
(
size_t
 
n
);

487 
mp_m�_de��
(
mp_m�_t
 *
m�
);

488 
mp_m�_�
(
mp_m�_t
 *
m�
);

489 
mp_m�_�em_t
 *
mp_m�_lookup
(
mp_m�_t
 *
m�
, 
mp_obj_t
 
�dex
, 
mp_m�_lookup_k�d_t
 
lookup_k�d
);

490 
mp_m�_��r
(
mp_m�_t
 *
m�
);

491 
mp_m�_dump
(
mp_m�_t
 *
m�
);

495 
	s_mp_�t_t
 {

496 
size_t
 
	m�loc
;

497 
size_t
 
	mu�d
;

498 
mp_obj_t
 *
	m�b�
;

499 } 
	tmp_�t_t
;

501 
�l�e
 
bo�
 
	$mp_�t_��_is_f��d
(cڡ 
mp_�t_t
 *
�t
, 
size_t
 
pos
) {

502  (
�t
)->
�b�
[
pos
] !�
MP_OBJ_NULL
 && (�t)->�b�[pos] !�
MP_OBJ_SENTINEL
;

503 
	}
}

505 
mp_�t_��
(
mp_�t_t
 *
�t
, 
size_t
 
n
);

506 
mp_obj_t
 
mp_�t_lookup
(
mp_�t_t
 *
�t
, mp_obj_�
�dex
, 
mp_m�_lookup_k�d_t
 
lookup_k�d
);

507 
mp_obj_t
 
mp_�t_�move_f��
(
mp_�t_t
 *
�t
);

508 
mp_�t_��r
(
mp_�t_t
 *
�t
);

512 
	$mp_obj_t
 (*
	tmp_fun_0_t
)();

513 
	$mp_obj_t
 (*
	tmp_fun_1_t
)(
	tmp_obj_t
);

514 
	$mp_obj_t
 (*
	tmp_fun_2_t
)(
	tmp_obj_t
, mp_obj_t);

515 
	$mp_obj_t
 (*
	tmp_fun_3_t
)(
	tmp_obj_t
, mp_obj_t, mp_obj_t);

516 
	$mp_obj_t
 (*
	tmp_fun_v�_t
)(
	tsize_t
 
	tn
, cڡ 
	tmp_obj_t
 *);

519 
	$mp_obj_t
 (*
	tmp_fun_kw_t
)(
	tsize_t
 
	tn
, cڡ 
	tmp_obj_t
 *, 
	tmp_m�_t
 *);

539 
	#MP_TYPE_FLAG_NONE
 (0x0000)

	)

540 
	#MP_TYPE_FLAG_IS_SUBCLASSED
 (0x0001)

	)

541 
	#MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
 (0x0002)

	)

542 
	#MP_TYPE_FLAG_EQ_NOT_REFLEXIVE
 (0x0004)

	)

543 
	#MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
 (0x0008)

	)

544 
	#MP_TYPE_FLAG_EQ_HAS_NEQ_TEST
 (0x0010)

	)

545 
	#MP_TYPE_FLAG_BINDS_SELF
 (0x0020)

	)

546 
	#MP_TYPE_FLAG_BUILTIN_FUN
 (0x0040)

	)

547 
	#MP_TYPE_FLAG_ITER_IS_GETITER
 (0x0000)

	)

548 
	#MP_TYPE_FLAG_ITER_IS_ITERNEXT
 (0x0080)

	)

549 
	#MP_TYPE_FLAG_ITER_IS_CUSTOM
 (0x0100)

	)

550 
	#MP_TYPE_FLAG_ITER_IS_STREAM
 (
MP_TYPE_FLAG_ITER_IS_ITERNEXT
 | 
MP_TYPE_FLAG_ITER_IS_CUSTOM
)

	)

551 
	#MP_TYPE_FLAG_INSTANCE_TYPE
 (0x0200)

	)

554 
PRINT_STR
 = 0,

555 
PRINT_REPR
 = 1,

556 
PRINT_EXC
 = 2,

557 
PRINT_JSON
 = 3,

558 
PRINT_RAW
 = 4,

559 
PRINT_EXC_SUBCLASS
 = 0x80,

560 } 
	tmp_��t_k�d_t
;

562 
	s_mp_obj_��_buf_t
 {

563 
mp_obj_ba�_t
 
ba�
;

564 
mp_obj_t
 
buf
[3];

565 } 
	tmp_obj_��_buf_t
;

569 
	#MP_OBJ_ITER_BUF_NSLOTS
 (((
mp_obj_��_buf_t
�+ (
mp_obj_t
�- 1�/ (mp_obj_t))

	)

571 (*
	tmp_��t_fun_t
)(cڡ 
	tmp_��t_t
 *
	t��t
, 
	tmp_obj_t
 
	to
, 
	tmp_��t_k�d_t
 
	tk�d
);

572 
	$mp_obj_t
 (*
	tmp_make_�w_fun_t
)(cڡ 
	tmp_obj_ty�_t
 *
	tty�
, 
	tsize_t
 
	tn_�gs
, size_�
	tn_kw
, cڡ 
	tmp_obj_t
 *
	t�gs
);

573 
	$mp_obj_t
 (*
	tmp_��_fun_t
)(
	tmp_obj_t
 
	tfun
, 
	tsize_t
 
	tn_�gs
, size_�
	tn_kw
, cڡ mp_obj_�*
	t�gs
);

574 
	$mp_obj_t
 (*
	tmp_u�ry_�_fun_t
)(
	tmp_u�ry_�_t
 
	t�
, 
	tmp_obj_t
);

575 
	$mp_obj_t
 (*
	tmp_b��y_�_fun_t
)(
	tmp_b��y_�_t
 
	t�
, 
	tmp_obj_t
, mp_obj_t);

576 (*
	tmp_��_fun_t
)(
	tmp_obj_t
 
	t�lf_�
, 
	tq�r
 
	t��
, mp_obj_�*
	tde�
);

577 
	$mp_obj_t
 (*
	tmp_subs�_fun_t
)(
	tmp_obj_t
 
	t�lf_�
, mp_obj_�
	t�dex
, mp_obj_�
	tv�ue
);

578 
	$mp_obj_t
 (*
	tmp_g���_fun_t
)(
	tmp_obj_t
 
	t�lf_�
, 
	tmp_obj_��_buf_t
 *
	t��_buf
);

579 
mp_fun_1_t
 
	tmp_���xt_fun_t
;

582 
	s_mp_g���_���xt_cu�om_t
 {

583 
mp_g���_fun_t
 
g���
;

584 
mp_���xt_fun_t
 
���xt
;

585 } 
	tmp_g���_���xt_cu�om_t
;

589 
	s_mp_buf�r_�fo_t
 {

590 *
buf
;

591 
size_t
 
�n
;

592 
ty�code
;

593 } 
	tmp_buf�r_�fo_t
;

595 
	#MP_BUFFER_READ
 (1)

	)

596 
	#MP_BUFFER_WRITE
 (2)

	)

597 
	#MP_BUFFER_RW
 (
MP_BUFFER_READ
 | 
MP_BUFFER_WRITE
)

	)

598 
	#MP_BUFFER_RAISE_IF_UNSUPPORTED
 (4)

	)

600 
	$mp_�t_t
 (*
	tmp_buf�r_fun_t
)(
	tmp_obj_t
 
	tobj
, 
	tmp_buf�r_�fo_t
 *
	tbuf�fo
, 
	tmp_u�t_t
 
	t�ags
);

602 
bo�
 
	`mp_g�_buf�r
(
mp_obj_t
 
obj
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
);

604 
�l�e
 
	$mp_g�_buf�r_�i�
(
mp_obj_t
 
obj
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
) {

605 
	`mp_g�_buf�r
(
obj
, 
buf�fo
, 
�ags
 | 
MP_BUFFER_RAISE_IF_UNSUPPORTED
);

606 
	}
}

611 
	s_mp_obj_ty�_t
 {

613 
mp_obj_ba�_t
 
	mba�
;

616 
u�t16_t
 
	m�ags
;

619 
u�t16_t
 
	m�me
;

628 
u�t8_t
 
	m��_�dex_make_�w
;

631 
u�t8_t
 
	m��_�dex_��t
;

634 
u�t8_t
 
	m��_�dex_��
;

638 
u�t8_t
 
	m��_�dex_u�ry_�
;

639 
u�t8_t
 
	m��_�dex_b��y_�
;

653 
u�t8_t
 
	m��_�dex_��
;

660 
u�t8_t
 
	m��_�dex_subs�
;

672 
u�t8_t
 
	m��_�dex_��
;

675 
u�t8_t
 
	m��_�dex_buf�r
;

678 
u�t8_t
 
	m��_�dex_��oc�
;

684 
u�t8_t
 
	m��_�dex_���
;

687 
u�t8_t
 
	m��_�dex_lo�ls_di�
;

689 cڡ *
	m��s
[];

696 
	s_mp_obj_em�y_ty�_t
 {

697 
mp_obj_ba�_t
 
	mba�
;

698 
u�t16_t
 
	m�ags
;

699 
u�t16_t
 
	m�me
;

701 
u�t8_t
 
	m��_�dex_make_�w
;

702 
u�t8_t
 
	m��_�dex_��t
;

703 
u�t8_t
 
	m��_�dex_��
;

704 
u�t8_t
 
	m��_�dex_u�ry_�
;

705 
u�t8_t
 
	m��_�dex_b��y_�
;

706 
u�t8_t
 
	m��_�dex_��
;

707 
u�t8_t
 
	m��_�dex_subs�
;

708 
u�t8_t
 
	m��_�dex_��
;

709 
u�t8_t
 
	m��_�dex_buf�r
;

710 
u�t8_t
 
	m��_�dex_��oc�
;

711 
u�t8_t
 
	m��_�dex_���
;

712 
u�t8_t
 
	m��_�dex_lo�ls_di�
;

715 } 
	tmp_obj_em�y_ty�_t
;

717 
	s_mp_obj_fu�_ty�_t
 {

718 
mp_obj_ba�_t
 
	mba�
;

719 
u�t16_t
 
	m�ags
;

720 
u�t16_t
 
	m�me
;

722 
u�t8_t
 
	m��_�dex_make_�w
;

723 
u�t8_t
 
	m��_�dex_��t
;

724 
u�t8_t
 
	m��_�dex_��
;

725 
u�t8_t
 
	m��_�dex_u�ry_�
;

726 
u�t8_t
 
	m��_�dex_b��y_�
;

727 
u�t8_t
 
	m��_�dex_��
;

728 
u�t8_t
 
	m��_�dex_subs�
;

729 
u�t8_t
 
	m��_�dex_��
;

730 
u�t8_t
 
	m��_�dex_buf�r
;

731 
u�t8_t
 
	m��_�dex_��oc�
;

732 
u�t8_t
 
	m��_�dex_���
;

733 
u�t8_t
 
	m��_�dex_lo�ls_di�
;

736 cڡ *
	m��s
[11];

737 } 
	tmp_obj_fu�_ty�_t
;

739 
	#_MP_OBJ_TYPE_SLOT_TYPE_make_�w
 (
mp_make_�w_fun_t
)

	)

740 
	#_MP_OBJ_TYPE_SLOT_TYPE_��t
 (
mp_��t_fun_t
)

	)

741 
	#_MP_OBJ_TYPE_SLOT_TYPE_��
 (
mp_��_fun_t
)

	)

742 
	#_MP_OBJ_TYPE_SLOT_TYPE_u�ry_�
 (
mp_u�ry_�_fun_t
)

	)

743 
	#_MP_OBJ_TYPE_SLOT_TYPE_b��y_�
 (
mp_b��y_�_fun_t
)

	)

744 
	#_MP_OBJ_TYPE_SLOT_TYPE_��
 (
mp_��_fun_t
)

	)

745 
	#_MP_OBJ_TYPE_SLOT_TYPE_subs�
 (
mp_subs�_fun_t
)

	)

746 
	#_MP_OBJ_TYPE_SLOT_TYPE_��
 (cڡ *)

	)

747 
	#_MP_OBJ_TYPE_SLOT_TYPE_buf�r
 (
mp_buf�r_fun_t
)

	)

748 
	#_MP_OBJ_TYPE_SLOT_TYPE_��oc�
 (cڡ *)

	)

749 
	#_MP_OBJ_TYPE_SLOT_TYPE_���
 (cڡ *)

	)

750 
	#_MP_OBJ_TYPE_SLOT_TYPE_lo�ls_di�
 (
_mp_obj_di�_t
 *)

	)

757 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_0
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�m�}

	)

758 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_1
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .
��s
 = { v1, } }

	)

759 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_2
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .
��s
 = { v1, v2, } }

	)

760 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_3
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .
��s
 = { v1, v2, v3, } }

	)

761 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_4
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .
��s
 = { v1, v2, v3, v4, } }

	)

762 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_5
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .
��s
 = { v1, v2, v3, v4, v5, } }

	)

763 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_6
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .
��s
 = { v1, v2, v3, v4, v5, v6, } }

	)

764 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_7
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, } }

	)

765 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_8
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
, 
f8
, 
v8
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .��_�dex_##f8 = 8, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, v8, } }

	)

766 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_9
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
, 
f8
, 
v8
, 
f9
, 
v9
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .��_�dex_##f8 = 8, .��_�dex_##f9 = 9, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, v8, v9, } }

	)

767 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_10
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
, 
f8
, 
v8
, 
f9
, 
v9
, 
f10
, 
v10
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .��_�dex_##f8 = 8, .��_�dex_##f9 = 9, .��_�dex_##f10 = 10, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, } }

	)

768 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_11
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
, 
f8
, 
v8
, 
f9
, 
v9
, 
f10
, 
v10
, 
f11
, 
v11
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .��_�dex_##f8 = 8, .��_�dex_##f9 = 9, .��_�dex_##f10 = 10, .��_�dex_##f11 = 11, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, } }

	)

769 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS_12
(
_�ru�_ty�
, 
_ty��me
, 
_�me
, 
_�ags
, 
f1
, 
v1
, 
f2
, 
v2
, 
f3
, 
v3
, 
f4
, 
v4
, 
f5
, 
v5
, 
f6
, 
v6
, 
f7
, 
v7
, 
f8
, 
v8
, 
f9
, 
v9
, 
f10
, 
v10
, 
f11
, 
v11
, 
f12
, 
v12
�cڡ _�ru�_ty� _ty��m��{ .
ba�
 = { &
mp_ty�_ty�
 }, .
�ags
 = _�ags, .
�me
 = _�me, .
��_�dex_
##f1 = 1, .��_�dex_##f2 = 2, .��_�dex_##f3 = 3, .��_�dex_##f4 = 4, .��_�dex_##f5 = 5, .��_�dex_##f6 = 6, .��_�dex_##f7 = 7, .��_�dex_##f8 = 8, .��_�dex_##f9 = 9, .��_�dex_##f10 = 10, .��_�dex_##f11 = 11, .��_�dex_##f12 = 12, .
��s
 = { v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, } }

	)

777 
	#MP_OBJ_TYPE_HAS_SLOT
(
t
, 
f
�(�)->
��_�dex_
##f)

	)

778 
	#MP_OBJ_TYPE_GET_SLOT
(
t
, 
f
�(
_MP_OBJ_TYPE_SLOT_TYPE_
##
	`f
�)->
��s
[�)->
��_�dex_
##�- 1])

	)

779 
	#MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
t
, 
f
�(
_MP_OBJ_TYPE_SLOT_TYPE_
##
	`f
(
	`MP_OBJ_TYPE_HAS_SLOT
�, f�? 
	`MP_OBJ_TYPE_GET_SLOT
�, f�: 
NULL
))

	)

780 
	#MP_OBJ_TYPE_SET_SLOT
(
t
, 
f
, 
v
, 
n
�(�)->
��_�dex_
##����+ 1, (t)->
��s
[�)] = (*)v)

	)

781 
	#MP_OBJ_TYPE_OFFSETOF_SLOT
(
f
�(
	`off�tof
(
mp_obj_ty�_t
, 
��_�dex_
##f))

	)

782 
	#MP_OBJ_TYPE_HAS_SLOT_BY_OFFSET
(
t
, 
off�t
�(*(
u�t8_t
 *)((*)��+ (off�t)�!�0)

	)

785 
	#MP_DEFINE_CONST_OBJ_TYPE_EXPAND
(
x
�
	)
x

789 
	#MP_DEFINE_CONST_OBJ_TYPE_NARGS
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
_11
, 
_12
, 
_13
, 
_14
, 
_15
, 
_16
, 
_17
, 
_18
, 
_19
, 
_20
, 
_21
, 
_22
, 
_23
, 
_24
, 
_25
, 
_26
, 
_27
, 
_28
, 
N
, ...�
MP_DEFINE_CONST_OBJ_TYPE_NARGS_
##
	)
N

798 
	#MP_DEFINE_CONST_OBJ_TYPE
(...�
	`MP_DEFINE_CONST_OBJ_TYPE_EXPAND
(
	`MP_DEFINE_CONST_OBJ_TYPE_NARGS
(
__VA_ARGS__
, 
_INV
, 12, _INV, 11, _INV, 10, _INV, 9, _INV, 8, _INV, 7, _INV, 6, _INV, 5, _INV, 4, _INV, 3, _INV, 2, _INV, 1, _INV, 0)(
mp_obj_ty�_t
, __VA_ARGS__))

	)

801 
cڡ 
mp_obj_ty�_t
 
mp_ty�_ty�
;

802 
cڡ 
mp_obj_ty�_t
 
mp_ty�_obje�
;

803 
cڡ 
mp_obj_ty�_t
 
mp_ty�_N�eTy�
;

804 
cڡ 
mp_obj_ty�_t
 
mp_ty�_bo�
;

805 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�t
;

806 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�r
;

807 
cڡ 
mp_obj_ty�_t
 
mp_ty�_by�s
;

808 
cڡ 
mp_obj_ty�_t
 
mp_ty�_by���y
;

809 
cڡ 
mp_obj_ty�_t
 
mp_ty�_mem�yv�w
;

810 
cڡ 
mp_obj_ty�_t
 
mp_ty�_��t
;

811 
cڡ 
mp_obj_ty�_t
 
mp_ty�_com�ex
;

812 
cڡ 
mp_obj_ty�_t
 
mp_ty�_tu�e
;

813 
cڡ 
mp_obj_ty�_t
 
mp_ty�_li�
;

814 
cڡ 
mp_obj_ty�_t
 
mp_ty�_m�
;

815 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�um��e
;

816 
cڡ 
mp_obj_ty�_t
 
mp_ty�_f��r
;

817 
cڡ 
mp_obj_ty�_t
 
mp_ty�_deque
;

818 
cڡ 
mp_obj_ty�_t
 
mp_ty�_di�
;

819 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�d�eddi�
;

820 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�nge
;

821 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�t
;

822 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�oz��t
;

823 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�i�
;

824 
cڡ 
mp_obj_ty�_t
 
mp_ty�_z�
;

825 
cڡ 
mp_obj_ty�_t
 
mp_ty�_��y
;

826 
cڡ 
mp_obj_ty�_t
 
mp_ty�_su�r
;

827 
cڡ 
mp_obj_ty�_t
 
mp_ty�_g�_w�p
;

828 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�tive_g�_w�p
;

829 
cڡ 
mp_obj_ty�_t
 
mp_ty�_g�_����
;

830 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bu�t�_0
;

831 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bu�t�_1
;

832 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bu�t�_2
;

833 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bu�t�_3
;

834 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bu�t�_v�
;

835 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_bc
;

836 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_�tive
;

837 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_v��
;

838 
cڡ 
mp_obj_ty�_t
 
mp_ty�_fun_asm
;

839 
cڡ 
mp_obj_ty�_t
 
mp_ty�_modu�
;

840 
cڡ 
mp_obj_ty�_t
 
mp_ty�_��icm�hod
;

841 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�assm�hod
;

842 
cڡ 
mp_obj_ty�_t
 
mp_ty�_bound_m�h
;

843 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�ݔty
;

844 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�r�gio
;

845 
cڡ 
mp_obj_ty�_t
 
mp_ty�_by�sio
;

846 
cڡ 
mp_obj_ty�_t
 
mp_ty�_�v��d
;

847 
cڡ 
mp_obj_ty�_t
 
mp_ty�_p�ym�ph_��
;

848 #i�
MICROPY_ENABLE_FINALISER


849 
cڡ 
mp_obj_ty�_t
 
mp_ty�_p�ym�ph_��_w�h_f��i�r
;

853 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ba�Ex��i�
;

854 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ar�hm�icE��
;

855 
cڡ 
mp_obj_ty�_t
 
mp_ty�_As��i�E��
;

856 
cڡ 
mp_obj_ty�_t
 
mp_ty�_A�ribu�E��
;

857 
cڡ 
mp_obj_ty�_t
 
mp_ty�_EOFE��
;

858 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ex��i�
;

859 
cڡ 
mp_obj_ty�_t
 
mp_ty�_G����Ex�
;

860 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Imp�tE��
;

861 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ind��ti�E��
;

862 
cڡ 
mp_obj_ty�_t
 
mp_ty�_IndexE��
;

863 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Keyb�rdI��ru�
;

864 
cڡ 
mp_obj_ty�_t
 
mp_ty�_KeyE��
;

865 
cڡ 
mp_obj_ty�_t
 
mp_ty�_LookupE��
;

866 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Mem�yE��
;

867 
cڡ 
mp_obj_ty�_t
 
mp_ty�_NameE��
;

868 
cڡ 
mp_obj_ty�_t
 
mp_ty�_N�Im�em��dE��
;

869 
cڡ 
mp_obj_ty�_t
 
mp_ty�_OSE��
;

870 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ov��owE��
;

871 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ru�imeE��
;

872 
cڡ 
mp_obj_ty�_t
 
mp_ty�_St�AsyncI��ti�
;

873 
cڡ 
mp_obj_ty�_t
 
mp_ty�_St�I��ti�
;

874 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Sy�axE��
;

875 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Sy�emEx�
;

876 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Ty�E��
;

877 
cڡ 
mp_obj_ty�_t
 
mp_ty�_UnicodeE��
;

878 
cڡ 
mp_obj_ty�_t
 
mp_ty�_V�ueE��
;

879 
cڡ 
mp_obj_ty�_t
 
mp_ty�_V��Ty�E��
;

880 
cڡ 
mp_obj_ty�_t
 
mp_ty�_Z�oDivisi�E��
;

884 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


886 
	#mp_cڡ_n�e
 
	`MP_OBJ_NEW_IMMEDIATE_OBJ
(0)

	)

887 
	#mp_cڡ_�l�
 
	`MP_OBJ_NEW_IMMEDIATE_OBJ
(1)

	)

888 
	#mp_cڡ_�ue
 
	`MP_OBJ_NEW_IMMEDIATE_OBJ
(3)

	)

890 
	#mp_cڡ_n�e
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_n�e_obj
))

	)

891 
	#mp_cڡ_�l�
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�l�_obj
))

	)

892 
	#mp_cڡ_�ue
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�ue_obj
))

	)

893 
cڡ 
_mp_obj_n�e_t
 
mp_cڡ_n�e_obj
;

894 
cڡ 
_mp_obj_bo�_t
 
mp_cڡ_�l�_obj
;

895 
cڡ 
_mp_obj_bo�_t
 
mp_cڡ_�ue_obj
;

900 
	#mp_cڡ_em�y_by�s
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_em�y_by�s_obj
))

	)

901 
	#mp_cڡ_em�y_tu�e
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_em�y_tu�e_obj
))

	)

902 
	#mp_cڡ_n�im�em��d
 (
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_n�im�em��d_obj
))

	)

903 
cڡ 
_mp_obj_�r_t
 
mp_cڡ_em�y_by�s_obj
;

904 
cڡ 
_mp_obj_tu�e_t
 
mp_cڡ_em�y_tu�e_obj
;

905 
cڡ 
_mp_obj_di�_t
 
mp_cڡ_em�y_di�_obj
;

906 
cڡ 
_mp_obj_s�g�t�_t
 
mp_cڡ_�l�sis_obj
;

907 
cڡ 
_mp_obj_s�g�t�_t
 
mp_cڡ_n�im�em��d_obj
;

908 
cڡ 
_mp_obj_ex��i�_t
 
mp_cڡ_G����Ex�_obj
;

912 
	#mp_cڡ_em�y_m�
 (
mp_cڡ_em�y_di�_obj
.
m�
)

	)

918 
	#mp_obj_m�loc
(
�ru�_ty�
, 
obj_ty�
�((�ru�_ty� *)
	`mp_obj_m�loc_h��r
((�ru�_ty�), obj_ty�))

	)

919 
	#mp_obj_m�loc_v�
(
�ru�_ty�
, 
v�_f�ld
, 
v�_ty�
, 
v�_num
, 
obj_ty�
�((�ru�_ty� *)
	`mp_obj_m�loc_h��r
(
	`off�tof
(�ru�_ty�, v�_f�ld�+ (v�_ty��* (v�_num), obj_ty�))

	)

920 *
mp_obj_m�loc_h��r
(
size_t
 
num_by�s
, cڡ 
mp_obj_ty�_t
 *
ty�
);

923 #i�
MICROPY_ENABLE_FINALISER


924 
	#mp_obj_m�loc_w�h_f��i�r
(
�ru�_ty�
, 
obj_ty�
�((�ru�_ty� *)
	`mp_obj_m�loc_w�h_f��i�r_h��r
((�ru�_ty�), obj_ty�))

	)

925 
	#mp_obj_m�loc_v�_w�h_f��i�r
(
�ru�_ty�
, 
v�_ty�
, 
v�_num
, 
obj_ty�
�((�ru�_ty� *)
	`mp_obj_m�loc_w�h_f��i�r_h��r
((�ru�_ty��+ (v�_ty��* (v�_num), obj_ty�))

	)

926 *
mp_obj_m�loc_w�h_f��i�r_h��r
(
size_t
 
num_by�s
, cڡ 
mp_obj_ty�_t
 *
ty�
);

928 
	#mp_obj_m�loc_w�h_f��i�r
(
�ru�_ty�
, 
obj_ty�
�
	`mp_obj_m�loc
(�ru�_ty�, obj_ty�)

	)

929 
	#mp_obj_m�loc_v�_w�h_f��i�r
(
�ru�_ty�
, 
v�_ty�
, 
v�_num
, 
obj_ty�
�
	`mp_obj_m�loc_v�
(�ru�_ty�, v�_ty�, v�_num, obj_ty�)

	)

938 
	#mp_obj_is_exa�_ty�
(
o
, 
t
�(
	`mp_obj_is_obj
(o�&& (((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(o))->
ty�
 =��)))

	)

943 
	#mp_ty�_as��_n�_bo�_�t_�r_nڑy�
(
t
) ( \

944 
	`MP_STATIC_ASSERT_NONCONSTEXPR
((
t
�!�&
mp_ty�_bo�
), 
	`as��
((t) != &mp_type_bool), \

945 
	`MP_STATIC_ASSERT_NONCONSTEXPR
((
t
�!�&
mp_ty�_�t
), 
	`as��
((t) != &mp_type_int), \

946 
	`MP_STATIC_ASSERT_NONCONSTEXPR
((
t
�!�&
mp_ty�_�r
), 
	`as��
((t) != &mp_type_str), \

947 
	`MP_STATIC_ASSERT_NONCONSTEXPR
((
t
�!�&
mp_ty�_N�eTy�
), 
	`as��
((t) != &mp_type_NoneType), \

948 1)

	)

950 
	#mp_obj_is_ty�
(
o
, 
t
�(
	`mp_ty�_as��_n�_bo�_�t_�r_nڑy�
��&& 
	`mp_obj_is_exa�_ty�
(o,�))

	)

951 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


953 
	#mp_obj_is_bo�
(
o
�((o�=�
mp_cڡ_�l�
 || (o�=�
mp_cڡ_�ue
)

	)

955 
	#mp_obj_is_bo�
(
o
�
	`mp_obj_is_exa�_ty�
(o, &
mp_ty�_bo�
)

	)

957 
	#mp_obj_is_�t
(
o
�(
	`mp_obj_is_sm�l_�t
(o�|| 
	`mp_obj_is_exa�_ty�
(o, &
mp_ty�_�t
))

	)

958 
	#mp_obj_is_�r
(
o
�(
	`mp_obj_is_q�r
(o�|| 
	`mp_obj_is_exa�_ty�
(o, &
mp_ty�_�r
))

	)

959 
	#mp_obj_is_�r_�_by�s
(
o
�(
	`mp_obj_is_q�r
(o�|| (
	`mp_obj_is_obj
(o�&& 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(o))->
ty�
, 
b��y_�
�=�
mp_obj_�r_b��y_�
))

	)

960 
bo�
 
mp_obj_is_di�_�_�d�eddi�
(
mp_obj_t
 
o
);

961 
	#mp_obj_is_fun
(
o
�(
	`mp_obj_is_obj
(o�&& (((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(o))->
ty�
->
�me
 =�
MP_QSTR_fun�i�
))

	)

963 
mp_obj_t
 
mp_obj_�w_ty�
(
q�r
 
�me
, mp_obj_�
ba�s_tu�e
, mp_obj_�
lo�ls_di�
);

964 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_bo�
(
mp_�t_t
 
x
) {

965  
x
 ? 
mp_cڡ_�ue
 : 
mp_cڡ_�l�
;

966 
	}
}

967 
mp_obj_t
 
mp_obj_�w_��
(mp_obj_�
obj
);

968 
mp_obj_t
 
mp_obj_�w_�t
(
mp_�t_t
 
v�ue
);

969 
mp_obj_t
 
mp_obj_�w_�t_�om_u�t
(
mp_u�t_t
 
v�ue
);

970 
mp_obj_t
 
mp_obj_�w_�t_�om_�r_�n
(cڡ **
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
);

971 
mp_obj_t
 
mp_obj_�w_�t_�om_�
(
v�
);

972 
mp_obj_t
 
mp_obj_�w_�t_�om_u�
(
v�
);

973 
mp_obj_t
 
mp_obj_�w_�r
(cڡ *
d�a
, 
size_t
 
�n
);

974 
mp_obj_t
 
mp_obj_�w_�r_�om_c�r
(cڡ *
�r
);

975 
mp_obj_t
 
mp_obj_�w_�r_v�_q�r
(cڡ *
d�a
, 
size_t
 
�n
);

976 
mp_obj_t
 
mp_obj_�w_�r_�om_v�r
(
v�r_t
 *
v�r
);

977 #i�
MICROPY_PY_BUILTINS_STR_UNICODE
 && 
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


978 
mp_obj_t
 
mp_obj_�w_�r_�om_utf8_v�r
(
v�r_t
 *
v�r
);

980 
	#mp_obj_�w_�r_�om_utf8_v�r
 
mp_obj_�w_�r_�om_v�r


	)

982 
mp_obj_t
 
mp_obj_�w_by�s_�om_v�r
(
v�r_t
 *
v�r
);

983 
mp_obj_t
 
mp_obj_�w_by�s
(cڡ 
by�
 *
d�a
, 
size_t
 
�n
);

984 
mp_obj_t
 
mp_obj_�w_by���y
(
size_t
 
n
, cڡ *
�ems
);

985 
mp_obj_t
 
mp_obj_�w_by���y_by_�f
(
size_t
 
n
, *
�ems
);

986 #i�
MICROPY_PY_BUILTINS_FLOAT


987 
mp_obj_t
 
mp_obj_�w_�t_�om_��t
(
mp_��t_t
 
v�
);

988 
mp_obj_t
 
mp_obj_�w_com�ex
(
mp_��t_t
 
��
, mp_��t_�
imag
);

990 
mp_obj_t
 
mp_obj_�w_ex��i�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
);

991 
mp_obj_t
 
mp_obj_�w_ex��i�_�gs
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

992 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NONE


993 
	#mp_obj_�w_ex��i�_msg
(
exc_ty�
, 
msg
�
	`mp_obj_�w_ex��i�
�xc_ty�)

	)

994 
	#mp_obj_�w_ex��i�_msg_v�g
(
exc_ty�
, ...�
	`mp_obj_�w_ex��i�
�xc_ty�)

	)

996 
mp_obj_t
 
mp_obj_�w_ex��i�_msg
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
msg
);

997 
mp_obj_t
 
mp_obj_�w_ex��i�_msg_v�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, ...);

999 #ifde�
va_��t


1000 
mp_obj_t
 
mp_obj_�w_ex��i�_msg_vli�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, 
va_li�
 
�g
);

1002 
mp_obj_t
 
mp_obj_�w_g�_w�p
(mp_obj_�
fun
);

1003 
mp_obj_t
 
mp_obj_�w_�osu�
(mp_obj_�
fun
, 
size_t
 
n_�o�d
, cڡ mp_obj_�*
�o�d
);

1004 
mp_obj_t
 
mp_obj_�w_tu�e
(
size_t
 
n
, cڡ mp_obj_�*
�ems
);

1005 
mp_obj_t
 
mp_obj_�w_li�
(
size_t
 
n
, mp_obj_�*
�ems
);

1006 
mp_obj_t
 
mp_obj_�w_di�
(
size_t
 
n_�gs
);

1007 
mp_obj_t
 
mp_obj_�w_�t
(
size_t
 
n_�gs
, mp_obj_�*
�ems
);

1008 
mp_obj_t
 
mp_obj_�w_�i�
(mp_obj_�
��t
, mp_obj_�
��
, mp_obj_�
��
);

1009 
mp_obj_t
 
mp_obj_�w_bound_m�h
(mp_obj_�
m�h
, mp_obj_�
�lf
);

1010 
mp_obj_t
 
mp_obj_�w_g��em_��
(mp_obj_�*
�gs
, 
mp_obj_��_buf_t
 *
��_buf
);

1011 
mp_obj_t
 
mp_obj_�w_modu�
(
q�r
 
modu�_�me
);

1012 
mp_obj_t
 
mp_obj_�w_mem�yv�w
(
by�
 
ty�code
, 
size_t
 
n�ems
, *
�ems
);

1014 cڡ 
mp_obj_ty�_t
 *
mp_obj_g�_ty�
(
mp_cڡ_obj_t
 
o_�
);

1015 cڡ *
mp_obj_g�_ty�_�r
(
mp_cڡ_obj_t
 
o_�
);

1016 
bo�
 
mp_obj_is_sub�ass_�
(
mp_cڡ_obj_t
 
obje�
, mp_cڡ_obj_�
�ass�fo
);

1017 
mp_obj_t
 
mp_obj_��_to_�tive_ba�
(mp_obj_�
�lf_�
, 
mp_cڡ_obj_t
 
�tive_ty�
);

1019 
mp_obj_��t_h��r
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
);

1020 
mp_obj_��t
(
mp_obj_t
 
o
, 
mp_��t_k�d_t
 
k�d
);

1021 
mp_obj_��t_ex��i�
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
exc
);

1023 
bo�
 
mp_obj_is_�ue
(
mp_obj_t
 
�g
);

1024 
bo�
 
mp_obj_is_��ab�
(
mp_obj_t
 
o_�
);

1025 
mp_obj_t
 
mp_obj_equ�_n�_equ�
(
mp_b��y_�_t
 
�
, mp_obj_�
o1
, mp_obj_�
o2
);

1026 
bo�
 
mp_obj_equ�
(
mp_obj_t
 
o1
, mp_obj_�
o2
);

1029 
�l�e
 
bo�
 
	$mp_obj_is_��g�
(
mp_cڡ_obj_t
 
o
) {

1030  
	`mp_obj_is_�t
(
o
�|| 
	`mp_obj_is_bo�
(o);

1031 
	}
}

1033 
mp_�t_t
 
mp_obj_g�_�t
(
mp_cڡ_obj_t
 
�g
);

1034 
mp_�t_t
 
mp_obj_g�_�t_�un��d
(
mp_cڡ_obj_t
 
�g
);

1035 
bo�
 
mp_obj_g�_�t_maybe
(
mp_cڡ_obj_t
 
�g
, 
mp_�t_t
 *
v�ue
);

1036 #i�
MICROPY_PY_BUILTINS_FLOAT


1037 
mp_��t_t
 
mp_obj_g�_��t
(
mp_obj_t
 
�lf_�
);

1038 
bo�
 
mp_obj_g�_��t_maybe
(
mp_obj_t
 
�g
, 
mp_��t_t
 *
v�ue
);

1039 
mp_obj_g�_com�ex
(
mp_obj_t
 
�lf_�
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
);

1040 
bo�
 
mp_obj_g�_com�ex_maybe
(
mp_obj_t
 
�lf_�
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
);

1042 
mp_obj_g�_��y
(
mp_obj_t
 
o
, 
size_t
 *
�n
, mp_obj_�**
�ems
);

1043 
mp_obj_g�_��y_fixed_n
(
mp_obj_t
 
o
, 
size_t
 
�n
, mp_obj_�**
�ems
);

1044 
size_t
 
mp_g�_�dex
(cڡ 
mp_obj_ty�_t
 *
ty�
, size_�
�n
, 
mp_obj_t
 
�dex
, 
bo�
 
is_�i�
);

1045 
mp_obj_t
 
mp_obj_id
(mp_obj_�
o_�
);

1046 
mp_obj_t
 
mp_obj_�n
(mp_obj_�
o_�
);

1047 
mp_obj_t
 
mp_obj_�n_maybe
(mp_obj_�
o_�
);

1048 
mp_obj_t
 
mp_obj_subs�
(mp_obj_�
ba�
, mp_obj_�
�dex
, mp_obj_�
v�
);

1052 
	s_mp_obj_��_t
 {

1053 
mp_obj_ba�_t
 
	mba�
;

1054 
mp_obj_t
 
	mobj
;

1055 } 
	tmp_obj_��_t
;

1057 
�l�e
 
mp_obj_t
 
	$mp_obj_��_g�
(
mp_obj_t
 
�lf_�
) {

1058 
mp_obj_��_t
 *
�lf
 = (mp_obj_��_�*)
	`MP_OBJ_TO_PTR
(
�lf_�
);

1059  
�lf
->
obj
;

1060 
	}
}

1062 
�l�e
 
	$mp_obj_��_�t
(
mp_obj_t
 
�lf_�
, mp_obj_�
obj
) {

1063 
mp_obj_��_t
 *
�lf
 = (mp_obj_��_�*)
	`MP_OBJ_TO_PTR
(
�lf_�
);

1064 
�lf
->
obj
 = obj;

1065 
	}
}

1069 
mp_�t_t
 
mp_obj_�t_g�_�un��d
(
mp_cڡ_obj_t
 
�lf_�
);

1071 
mp_�t_t
 
mp_obj_�t_g�_checked
(
mp_cڡ_obj_t
 
�lf_�
);

1073 
mp_u�t_t
 
mp_obj_�t_g�_u�t_checked
(
mp_cڡ_obj_t
 
�lf_�
);

1076 
bo�
 
mp_obj_is_�tive_ex��i�_����
(
mp_obj_t
 
�lf_�
);

1077 
bo�
 
mp_obj_is_ex��i�_ty�
(
mp_obj_t
 
�lf_�
);

1078 
bo�
 
mp_obj_is_ex��i�_����
(
mp_obj_t
 
�lf_�
);

1079 
bo�
 
mp_obj_ex��i�_m�ch
(
mp_obj_t
 
exc
, 
mp_cڡ_obj_t
 
exc_ty�
);

1080 
mp_obj_ex��i�_��r_�a�back
(
mp_obj_t
 
�lf_�
);

1081 
mp_obj_ex��i�_add_�a�back
(
mp_obj_t
 
�lf_�
, 
q�r
 
f�e
, 
size_t
 
l�e
, q��
block
);

1082 
mp_obj_ex��i�_g�_�a�back
(
mp_obj_t
 
�lf_�
, 
size_t
 *
n
, size_�**
v�ues
);

1083 
mp_obj_t
 
mp_obj_ex��i�_g�_v�ue
(mp_obj_�
�lf_�
);

1084 
mp_obj_t
 
mp_obj_ex��i�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

1085 
mp_obj_t
 
mp_�loc_em�g�cy_ex��i�_buf
(mp_obj_�
size_�
);

1086 
mp_��_em�g�cy_ex��i�_buf
();

1087 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_ex��i�_�g1
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_obj_t
 
�g
) {

1088 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
exc_ty�
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
);

1089  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 1, 0, &
�g
);

1090 
	}
}

1093 
bo�
 
mp_obj_�r_equ�
(
mp_obj_t
 
s1
, mp_obj_�
s2
);

1094 
q�r
 
mp_obj_�r_g�_q�r
(
mp_obj_t
 
�lf_�
);

1095 cڡ *
mp_obj_�r_g�_�r
(
mp_obj_t
 
�lf_�
);

1096 cڡ *
mp_obj_�r_g�_d�a
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
);

1097 
mp_obj_t
 
mp_obj_�r_���
(mp_obj_�
�r
);

1098 
mp_obj_t
 
mp_obj_�r_���_checked
(mp_obj_�
obj
);

1099 
mp_�r_��t_qu�ed
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�r_d�a
, 
size_t
 
�r_�n
, 
bo�
 
is_by�s
);

1101 #i�
MICROPY_PY_BUILTINS_FLOAT


1103 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


1104 
�l�e
 
	$mp_obj_g�_��t_to_f
(
mp_obj_t
 
o
) {

1105  
	`mp_obj_g�_��t
(
o
);

1106 
	}
}

1108 
�l�e
 
	$mp_obj_g�_��t_to_d
(
mp_obj_t
 
o
) {

1109  ()
	`mp_obj_g�_��t
(
o
);

1110 
	}
}

1112 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t_�om_f
(
o
) {

1113  
	`mp_obj_�w_��t
(
o
);

1114 
	}
}

1116 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t_�om_d
(
o
) {

1117  
	`mp_obj_�w_��t
((
mp_��t_t
)
o
);

1118 
	}
}

1119 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


1120 
�l�e
 
	$mp_obj_g�_��t_to_f
(
mp_obj_t
 
o
) {

1121  ()
	`mp_obj_g�_��t
(
o
);

1122 
	}
}

1124 
�l�e
 
	$mp_obj_g�_��t_to_d
(
mp_obj_t
 
o
) {

1125  
	`mp_obj_g�_��t
(
o
);

1126 
	}
}

1128 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t_�om_f
(
o
) {

1129  
	`mp_obj_�w_��t
((
mp_��t_t
)
o
);

1130 
	}
}

1132 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_��t_�om_d
(
o
) {

1133  
	`mp_obj_�w_��t
(
o
);

1134 
	}
}

1136 #i�
MICROPY_FLOAT_HIGH_QUALITY_HASH


1137 
mp_�t_t
 
mp_��t_hash
(
mp_��t_t
 
v�
);

1139 
�l�e
 
mp_�t_t
 
	$mp_��t_hash
(
mp_��t_t
 
v�
) {

1140  (
mp_�t_t
)
v�
;

1141 
	}
}

1143 
mp_obj_t
 
mp_obj_��t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_��t_t
 
lhs_v�
, mp_obj_�
rhs
);

1146 
mp_obj_com�ex_g�
(
mp_obj_t
 
�lf_�
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
);

1147 
mp_obj_t
 
mp_obj_com�ex_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_��t_t
 
lhs_��
, mp_��t_�
lhs_imag
, mp_obj_�
rhs_�
);

1149 
	#mp_obj_is_��t
(
o
�(
�l�
)

	)

1153 
mp_obj_tu�e_g�
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
, mp_obj_�**
�ems
);

1154 
mp_obj_tu�e_d�
(
mp_obj_t
 
�lf_�
);

1155 
mp_�t_t
 
mp_obj_tu�e_hash
(
mp_obj_t
 
�lf_�
);

1158 
mp_obj_t
 
mp_obj_li�_��nd
(mp_obj_�
�lf_�
, mp_obj_�
�g
);

1159 
mp_obj_t
 
mp_obj_li�_�move
(mp_obj_�
�lf_�
, mp_obj_�
v�ue
);

1160 
mp_obj_li�_g�
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
, mp_obj_�**
�ems
);

1161 
mp_obj_li�_�t_�n
(
mp_obj_t
 
�lf_�
, 
size_t
 
�n
);

1162 
mp_obj_li�_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
);

1163 
mp_obj_t
 
mp_obj_li�_s�t
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, 
mp_m�_t
 *
kw�gs
);

1166 
	s_mp_obj_di�_t
 {

1167 
mp_obj_ba�_t
 
	mba�
;

1168 
mp_m�_t
 
	mm�
;

1169 } 
	tmp_obj_di�_t
;

1170 
mp_obj_t
 
mp_obj_di�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

1171 
mp_obj_di�_��
(
mp_obj_di�_t
 *
di�
, 
size_t
 
n_�gs
);

1172 
size_t
 
mp_obj_di�_�n
(
mp_obj_t
 
�lf_�
);

1173 
mp_obj_t
 
mp_obj_di�_g�
(mp_obj_�
�lf_�
, mp_obj_�
�dex
);

1174 
mp_obj_t
 
mp_obj_di�_��e
(mp_obj_�
�lf_�
, mp_obj_�
key
, mp_obj_�
v�ue
);

1175 
mp_obj_t
 
mp_obj_di�_d��e
(mp_obj_�
�lf_�
, mp_obj_�
key
);

1176 
mp_obj_t
 
mp_obj_di�_c�y
(mp_obj_�
�lf_�
);

1177 
�l�e
 
mp_m�_t
 *
	$mp_obj_di�_g�_m�
(
mp_obj_t
 
di�
) {

1178  &((
mp_obj_di�_t
 *)
	`MP_OBJ_TO_PTR
(
di�
))->
m�
;

1179 
	}
}

1182 
mp_obj_�t_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
);

1186 
mp_�t_t
 
	m��t
;

1187 
mp_�t_t
 
	m��
;

1188 
mp_�t_t
 
	m��
;

1189 } 
	tmp_bound_�i�_t
;

1192 
	s_mp_obj_�i�_t
 {

1193 
mp_obj_ba�_t
 
	mba�
;

1194 
mp_obj_t
 
	m��t
;

1195 
mp_obj_t
 
	m��
;

1196 
mp_obj_t
 
	m��
;

1197 } 
	tmp_obj_�i�_t
;

1198 
mp_obj_�i�_�di�s
(
mp_obj_t
 
�lf_�
, 
mp_�t_t
 
�ngth
, 
mp_bound_�i�_t
 *
�su�
);

1202 
	s_mp_obj_fun_bu�t�_fixed_t
 {

1203 
mp_obj_ba�_t
 
	mba�
;

1205 
mp_fun_0_t
 
	m_0
;

1206 
mp_fun_1_t
 
	m_1
;

1207 
mp_fun_2_t
 
	m_2
;

1208 
mp_fun_3_t
 
	m_3
;

1209 } 
	mfun
;

1210 } 
	tmp_obj_fun_bu�t�_fixed_t
;

1212 
	s_mp_obj_fun_bu�t�_v�_t
 {

1213 
mp_obj_ba�_t
 
	mba�
;

1214 
u�t32_t
 
	msig
;

1216 
mp_fun_v�_t
 
	mv�
;

1217 
mp_fun_kw_t
 
	mkw
;

1218 } 
	mfun
;

1219 } 
	tmp_obj_fun_bu�t�_v�_t
;

1221 
q�r
 
mp_obj_fun_g�_�me
(
mp_cڡ_obj_t
 
fun
);

1223 
mp_obj_t
 
mp_id�t�y
(mp_obj_�
�lf
);

1224 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_id�t�y_obj
);

1227 
	s_mp_obj_modu�_t
 {

1228 
mp_obj_ba�_t
 
	mba�
;

1229 
mp_obj_di�_t
 *
	mglob�s
;

1230 } 
	tmp_obj_modu�_t
;

1231 
�l�e
 
mp_obj_di�_t
 *
	$mp_obj_modu�_g�_glob�s
(
mp_obj_t
 
modu�
) {

1232  ((
mp_obj_modu�_t
 *)
	`MP_OBJ_TO_PTR
(
modu�
))->
glob�s
;

1233 
	}
}

1237 
	s_mp_obj_��ic_�ass_m�hod_t
 {

1238 
mp_obj_ba�_t
 
	mba�
;

1239 
mp_obj_t
 
	mfun
;

1240 } 
	tmp_obj_��ic_�ass_m�hod_t
;

1241 
	s_mp_rom_obj_��ic_�ass_m�hod_t
 {

1242 
mp_obj_ba�_t
 
	mba�
;

1243 
mp_rom_obj_t
 
	mfun
;

1244 } 
	tmp_rom_obj_��ic_�ass_m�hod_t
;

1247 cڡ 
mp_obj_t
 *
mp_obj_�ݔty_g�
(mp_obj_�
�lf_�
);

1251 
mp_�q_muɝly
(cڡ *
�ems
, 
size_t
 
�em_sz
, size_�
�n
, size_�
times
, *
de�
);

1252 #i�
MICROPY_PY_BUILTINS_SLICE


1253 
bo�
 
mp_�q_g�_�_�i�_�dexes
(
mp_u�t_t
 
�n
, 
mp_obj_t
 
�i�
, 
mp_bound_�i�_t
 *
�dexes
);

1255 
	#mp_�q_c�y
(
de�
, 
�c
, 
�n
, 
�em_t
�
	`mem�y
(de�, src,�� * (�em_t))

	)

1256 
	#mp_�q_�t
(
de�
, 
�c1
, 
�n1
, 
�c2
, 
�n2
, 
�em_t
�{ 
	`mem�y
(de�, src1, (�n1�* (�em_t)); mem�y(de� + (�n1), src2, (�n2�* (�em_t)); }

	)

1257 
bo�
 
mp_�q_cmp_by�s
(
mp_u�t_t
 
�
, cڡ 
by�
 *
d�a1
, 
size_t
 
�n1
, cڡ by� *
d�a2
, size_�
�n2
);

1258 
bo�
 
mp_�q_cmp_objs
(
mp_u�t_t
 
�
, cڡ 
mp_obj_t
 *
�ems1
, 
size_t
 
�n1
, cڡ mp_obj_�*
�ems2
, size_�
�n2
);

1259 
mp_obj_t
 
mp_�q_�dex_obj
(cڡ mp_obj_�*
�ems
, 
size_t
 
�n
, size_�
n_�gs
, cڡ mp_obj_�*
�gs
);

1260 
mp_obj_t
 
mp_�q_cou�_obj
(cڡ mp_obj_�*
�ems
, 
size_t
 
�n
, mp_obj_�
v�ue
);

1261 
mp_obj_t
 
mp_�q_ex�a�_�i�
(cڡ mp_obj_�*
�q
, 
mp_bound_�i�_t
 *
�dexes
);

1264 
	#mp_�q_��r
(
��t
, 
�n
, 
�loc_�n
, 
�em_sz
�
	`mem�t
((
by�
 *)(��t�+ (�n�* (�em_sz), 0, (��oc_�n�- (�n)�* (�em_sz))

	)

1267 
	#mp_�q_��a�_�i�_no_grow
(
de�
, 
de�_�n
, 
beg
, 
�d
, 
�i�
, 
�i�_�n
, 
�em_sz
) \

1268 
	`memmove
(((*)
de�
�+ (
beg
�* (
�em_sz
), 
�i�
, 
�i�_�n
 * (item_sz)); \

1269 
	`memmove
(((*)
de�
�+ (
beg
 + 
�i�_�n
�* (
�em_sz
), ((*)de��+ (
�d
�* (�em_sz), (
de�_�n
 -�nd�* (�em_sz));

	)

1272 
	#mp_�q_��a�_�i�_grow_��a�
(
de�
, 
de�_�n
, 
beg
, 
�d
, 
�i�
, 
�i�_�n
, 
�n_adj
, 
�em_sz
) \

1273 
	`memmove
(((*)
de�
�+ (
beg
 + 
�i�_�n
�* (
�em_sz
), ((*)de��+ (
�d
�* (�em_sz), ((
de�_�n
�+ (
�n_adj
) - ((beg) + (slice_len))) * (item_sz)); \

1274 
	`memmove
(((*)
de�
�+ (
beg
�* (
�em_sz
), 
�i�
, 
�i�_�n
 * (�em_sz));

	)

1276 #i�!
MICROPY_PREVIEW_VERSION_2


1279 
	#MP_OBJ_IS_SMALL_INT
 
mp_obj_is_sm�l_�t


	)

1280 
	#MP_OBJ_IS_QSTR
 
mp_obj_is_q�r


	)

1281 
	#MP_OBJ_IS_OBJ
 
mp_obj_is_obj


	)

1282 
	#MP_OBJ_IS_INT
 
mp_obj_is_�t


	)

1283 
	#MP_OBJ_IS_TYPE
 
mp_obj_is_ty�


	)

1284 
	#MP_OBJ_IS_STR
 
mp_obj_is_�r


	)

1285 
	#MP_OBJ_IS_STR_OR_BYTES
 
mp_obj_is_�r_�_by�s


	)

1286 
	#MP_OBJ_IS_FUN
 
mp_obj_is_fun


	)

1287 
	#MP_MAP_SLOT_IS_FILLED
 
mp_m�_��_is_f��d


	)

1288 
	#MP_SET_SLOT_IS_FILLED
 
mp_�t_��_is_f��d


	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objarray.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

30 
	~<�d�t.h
>

32 
	~"py/ru�ime.h
"

33 
	~"py/b��y.h
"

34 
	~"py/obj�r.h
"

35 
	~"py/obj��y.h
"

37 #i�
MICROPY_PY_ARRAY
 || 
MICROPY_PY_BUILTINS_BYTEARRAY
 || 
MICROPY_PY_BUILTINS_MEMORYVIEW


53 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


54 
	#TYPECODE_MASK
 (0x7f)

	)

55 
	#memv�w_off�t
 
�


	)

56 
	#memv�w_off�t_max
 ((1LL << 
MP_OBJ_ARRAY_FREE_SIZE_BITS
�- 1)

	)

59 
	#TYPECODE_MASK
 (~(
size_t
)0)

	)

64 
mp_obj_t
 
��y_����_�w
(mp_obj_�
��y_�
, 
mp_obj_��_buf_t
 *
��_buf
);

65 
mp_obj_t
 
��y_��nd
(mp_obj_�
�lf_�
, mp_obj_�
�g
);

66 
mp_obj_t
 
��y_ex�nd
(mp_obj_�
�lf_�
, mp_obj_�
�g_�
);

67 
mp_�t_t
 
��y_g�_buf�r
(
mp_obj_t
 
o_�
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
);

72 #i�
MICROPY_PY_BUILTINS_BYTEARRAY
 || 
MICROPY_PY_ARRAY


73 
	$��y_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

74 ()
k�d
;

75 
mp_obj_��y_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

76 i�(
o
->
ty�code
 =�
BYTEARRAY_TYPECODE
) {

77 
	`mp_��t_�r
(
��t
, "bytearray(b");

78 
	`mp_�r_��t_qu�ed
(
��t
, 
o
->
�ems
, o->
�n
, 
�ue
);

80 
	`mp_��tf
(
��t
, "��y('%c'", 
o
->
ty�code
);

81 i�(
o
->
�n
 > 0) {

82 
	`mp_��t_�r
(
��t
, ", [");

83 
size_t
 
i
 = 0; i < 
o
->
�n
; i++) {

84 i�(
i
 > 0) {

85 
	`mp_��t_�r
(
��t
, ", ");

87 
	`mp_obj_��t_h��r
(
��t
, 
	`mp_b��y_g�_v�_��y
(
o
->
ty�code
, o->
�ems
, 
i
), 
PRINT_REPR
);

89 
	`mp_��t_�r
(
��t
, "]");

92 
	`mp_��t_�r
(
��t
, ")");

93 
	}
}

96 #i�
MICROPY_PY_BUILTINS_BYTEARRAY
 || 
MICROPY_PY_ARRAY


97 
mp_obj_��y_t
 *
	$��y_�w
(
ty�code
, 
size_t
 
n
) {

98 
ty�code_size
 = 
	`mp_b��y_g�_size
('@', 
ty�code
, 
NULL
);

99 
mp_obj_��y_t
 *
o
 = 
	`m_�w_obj
(mp_obj_array_t);

100 #i�
MICROPY_PY_BUILTINS_BYTEARRAY
 && 
MICROPY_PY_ARRAY


101 
o
->
ba�
.
ty�
 = (
ty�code
 =�
BYTEARRAY_TYPECODE
�? &
mp_ty�_by���y
 : &
mp_ty�_��y
;

102 #�i�
MICROPY_PY_BUILTINS_BYTEARRAY


103 
o
->
ba�
.
ty�
 = &
mp_ty�_by���y
;

105 
o
->
ba�
.
ty�
 = &
mp_ty�_��y
;

107 
o
->
ty�code
 =�ypecode;

108 
o
->
�
 = 0;

109 
o
->
�n
 = 
n
;

110 
o
->
�ems
 = 
	`m_�w
(
by�
, 
ty�code_size
 * o->
�n
);

111  
o
;

112 
	}
}

115 #i�
MICROPY_PY_BUILTINS_BYTEARRAY
 || 
MICROPY_PY_ARRAY


116 
mp_obj_t
 
	$��y_cڡru�
(
ty�code
, 
mp_obj_t
 
���liz�
) {

119 
mp_buf�r_�fo_t
 
buf�fo
;

120 i�(((
MICROPY_PY_BUILTINS_BYTEARRAY


121 && 
ty�code
 =�
BYTEARRAY_TYPECODE
)

122 || (
MICROPY_PY_ARRAY


123 && (
	`mp_obj_is_ty�
(
���liz�
, &
mp_ty�_by�s
)

124 || (
MICROPY_PY_BUILTINS_BYTEARRAY
 && 
	`mp_obj_is_ty�
(
���liz�
, &
mp_ty�_by���y
)))))

125 && 
	`mp_g�_buf�r
(
���liz�
, &
buf�fo
, 
MP_BUFFER_READ
)) {

128 
size_t
 
sz
 = 
	`mp_b��y_g�_size
('@', 
ty�code
, 
NULL
);

129 
size_t
 
�n
 = 
buf�fo
.��/ 
sz
;

130 
mp_obj_��y_t
 *
o
 = 
	`��y_�w
(
ty�code
, 
�n
);

131 
	`mem�y
(
o
->
�ems
, 
buf�fo
.
buf
, 
�n
 * 
sz
);

132  
	`MP_OBJ_FROM_PTR
(
o
);

135 
size_t
 
�n
;

137 
mp_obj_t
 
�n_�
 = 
	`mp_obj_�n_maybe
(
���liz�
);

138 i�(
�n_�
 =�
MP_OBJ_NULL
) {

139 
�n
 = 0;

141 
�n
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�n_�
);

144 
mp_obj_��y_t
 *
��y
 = 
	`��y_�w
(
ty�code
, 
�n
);

146 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
���liz�
, 
NULL
);

147 
mp_obj_t
 
�em
;

148 
size_t
 
i
 = 0;

149 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

150 i�(
�n
 == 0) {

151 
	`��y_��nd
(
	`MP_OBJ_FROM_PTR
(
��y
), 
�em
);

153 
	`mp_b��y_�t_v�_��y
(
ty�code
, 
��y
->
�ems
, 
i
++, 
�em
);

157  
	`MP_OBJ_FROM_PTR
(
��y
);

158 
	}
}

161 #i�
MICROPY_PY_ARRAY


162 
mp_obj_t
 
	$��y_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

163 ()
ty�_�
;

164 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 2, 
�l�
);

167 cڡ *
ty�code
 = 
	`mp_obj_�r_g�_�r
(
�gs
[0]);

169 i�(
n_�gs
 == 1) {

171  
	`MP_OBJ_FROM_PTR
(
	`��y_�w
(*
ty�code
, 0));

174  
	`��y_cڡru�
(*
ty�code
, 
�gs
[1]);

176 
	}
}

179 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


180 
mp_obj_t
 
	$by���y_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

181 ()
ty�_�
;

183 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 3, 
�l�
);

185 i�(
n_�gs
 == 0) {

187  
	`MP_OBJ_FROM_PTR
(
	`��y_�w
(
BYTEARRAY_TYPECODE
, 0));

188 } i�(
	`mp_obj_is_�t
(
�gs
[0])) {

190 
mp_u�t_t
 
�n
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

191 
mp_obj_��y_t
 *
o
 = 
	`��y_�w
(
BYTEARRAY_TYPECODE
, 
�n
);

192 
	`mem�t
(
o
->
�ems
, 0, 
�n
);

193  
	`MP_OBJ_FROM_PTR
(
o
);

196 i�(
	`mp_obj_is_�r
(
�gs
[0]�&& 
n_�gs
 == 1) {

197 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


199 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("wrong�umber of�rguments"));

201 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("string�rgument without�n�ncoding"));

204  
	`��y_cڡru�
(
BYTEARRAY_TYPECODE
, 
�gs
[0]);

206 
	}
}

209 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


211 
mp_obj_t
 
	$mp_obj_�w_mem�yv�w
(
by�
 
ty�code
, 
size_t
 
n�ems
, *
�ems
) {

212 
mp_obj_��y_t
 *
�lf
 = 
	`m_�w_obj
(mp_obj_array_t);

213 
	`mp_obj_mem�yv�w_��
(
�lf
, 
ty�code
, 0, 
n�ems
, 
�ems
);

214  
	`MP_OBJ_FROM_PTR
(
�lf
);

215 
	}
}

217 
mp_obj_t
 
	$mem�yv�w_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

218 ()
ty�_�
;

223 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 1, 
�l�
);

225 
mp_buf�r_�fo_t
 
buf�fo
;

226 
	`mp_g�_buf�r_�i�
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
);

228 
mp_obj_��y_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_mem�yv�w
(
buf�fo
.
ty�code
,

229 
buf�fo
.
�n
 / 
	`mp_b��y_g�_size
('@', buf�fo.
ty�code
, 
NULL
),

230 
buf�fo
.
buf
));

234 i�(
	`mp_obj_g�_ty�
(
�gs
[0]�=�&
mp_ty�_mem�yv�w
) {

235 
mp_obj_��y_t
 *
�h�
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

236 
�lf
->
memv�w_off�t
 = 
�h�
->memview_offset;

237 
�lf
->
�ems
 = 
�h�
->items;

241 i�(
	`mp_g�_buf�r
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_RW
)) {

242 
�lf
->
ty�code
 |�
MP_OBJ_ARRAY_TYPECODE_FLAG_RW
;

245  
	`MP_OBJ_FROM_PTR
(
�lf
);

246 
	}
}

248 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW_ITEMSIZE


249 
	$mem�yv�w_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

250 i�(
de�
[0] !�
MP_OBJ_NULL
) {

253 i�(
��
 =�
MP_QSTR_�emsize
) {

254 
mp_obj_��y_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

255 
de�
[0] = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_b��y_g�_size
('@', 
�lf
->
ty�code
 & 
TYPECODE_MASK
, 
NULL
));

257 #i�
MICROPY_PY_BUILTINS_BYTES_HEX


260 
de�
[1] = 
MP_OBJ_SENTINEL
;

263 
	}
}

268 
mp_obj_t
 
	$��y_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

269 
mp_obj_��y_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

270 
�
) {

271 
MP_UNARY_OP_BOOL
:

272  
	`mp_obj_�w_bo�
(
o
->
�n
 != 0);

273 
MP_UNARY_OP_LEN
:

274  
	`MP_OBJ_NEW_SMALL_INT
(
o
->
�n
);

276  
MP_OBJ_NULL
;

278 
	}
}

280 
	$ty�code_f�_com�ris�
(
ty�code
, 
bo�
 *
is_unsig�d
) {

281 i�(
ty�code
 =�
BYTEARRAY_TYPECODE
) {

282 
ty�code
 = 'B';

284 i�(
ty�code
 <= 'Z') {

285 
ty�code
 += 32;

286 *
is_unsig�d
 = 
�ue
;

288  
ty�code
;

289 
	}
}

291 
mp_obj_t
 
	$��y_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

292 
mp_obj_��y_t
 *
lhs
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

293 
�
) {

294 
MP_BINARY_OP_ADD
: {

295 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


296 i�(
lhs
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

297  
MP_OBJ_NULL
;

302 
mp_buf�r_�fo_t
 
lhs_buf�fo
;

303 
mp_buf�r_�fo_t
 
rhs_buf�fo
;

304 
	`��y_g�_buf�r
(
lhs_�
, &
lhs_buf�fo
, 
MP_BUFFER_READ
);

305 
	`mp_g�_buf�r_�i�
(
rhs_�
, &
rhs_buf�fo
, 
MP_BUFFER_READ
);

307 
size_t
 
sz
 = 
	`mp_b��y_g�_size
('@', 
lhs_buf�fo
.
ty�code
, 
NULL
);

310 
size_t
 
rhs_�n
 = 
rhs_buf�fo
.
�n
 / 
sz
;

313 
mp_obj_��y_t
 *
�s
 = 
	`��y_�w
(
lhs_buf�fo
.
ty�code
, 
lhs
->
�n
 + 
rhs_�n
);

314 
	`mp_�q_�t
((
by�
 *)
�s
->
�ems
, 
lhs_buf�fo
.
buf
,�hs_buf�fo.
�n
, 
rhs_buf�fo
.buf, 
rhs_�n
 * 
sz
, byte);

315  
	`MP_OBJ_FROM_PTR
(
�s
);

318 
MP_BINARY_OP_INPLACE_ADD
: {

319 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


320 i�(
lhs
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

321  
MP_OBJ_NULL
;

324 
	`��y_ex�nd
(
lhs_�
, 
rhs_�
);

325  
lhs_�
;

328 
MP_BINARY_OP_CONTAINS
: {

329 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


331 
mp_buf�r_�fo_t
 
lhs_buf�fo
;

332 
mp_buf�r_�fo_t
 
rhs_buf�fo
;

333 i�(
	`mp_g�_buf�r
(
rhs_�
, &
rhs_buf�fo
, 
MP_BUFFER_READ
)) {

334 i�(!
	`mp_obj_is_ty�
(
lhs_�
, &
mp_ty�_by���y
)) {

335  
mp_cڡ_�l�
;

337 
	`��y_g�_buf�r
(
lhs_�
, &
lhs_buf�fo
, 
MP_BUFFER_READ
);

338  
	`mp_obj_�w_bo�
(

339 
	`f�d_subby�s
(
lhs_buf�fo
.
buf
,�hs_buf�fo.
�n
, 
rhs_buf�fo
.buf,�hs_buf�fo.�n, 1�!�
NULL
);

344 i�(
	`mp_obj_is_�t
(
rhs_�
�|| 
	`mp_obj_is_��t
(rhs_in)) {

345 
	`mp_�i�_N�Im�em��dE��
(
NULL
);

348  
mp_cڡ_�l�
;

351 
MP_BINARY_OP_EQUAL
:

352 
MP_BINARY_OP_LESS
:

353 
MP_BINARY_OP_LESS_EQUAL
:

354 
MP_BINARY_OP_MORE
:

355 
MP_BINARY_OP_MORE_EQUAL
: {

356 
mp_buf�r_�fo_t
 
lhs_buf�fo
;

357 
mp_buf�r_�fo_t
 
rhs_buf�fo
;

358 
	`��y_g�_buf�r
(
lhs_�
, &
lhs_buf�fo
, 
MP_BUFFER_READ
);

359 i�(!
	`mp_g�_buf�r
(
rhs_�
, &
rhs_buf�fo
, 
MP_BUFFER_READ
)) {

360  
mp_cڡ_�l�
;

369 
bo�
 
is_unsig�d
 = 
�l�
;

370 cڡ 
lhs_code
 = 
	`ty�code_f�_com�ris�
(
lhs_buf�fo
.
ty�code
, &
is_unsig�d
);

371 cڡ 
rhs_code
 = 
	`ty�code_f�_com�ris�
(
rhs_buf�fo
.
ty�code
, &
is_unsig�d
);

372 i�(
lhs_code
 =�
rhs_code
 &&�hs_cod�!�'f' &&�hs_cod�!�'d' && (
�
 =�
MP_BINARY_OP_EQUAL
 || 
is_unsig�d
)) {

373  
	`mp_obj_�w_bo�
(
	`mp_�q_cmp_by�s
(
�
, 
lhs_buf�fo
.
buf
,�hs_buf�fo.
�n
, 
rhs_buf�fo
.buf,�hs_bufinfo.len));

377 
	`mp_�i�_N�Im�em��dE��
(
NULL
);

381  
MP_OBJ_NULL
;

383 
	}
}

385 #i�
MICROPY_PY_BUILTINS_BYTEARRAY
 || 
MICROPY_PY_ARRAY


386 
mp_obj_t
 
	$��y_��nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

388 
	`as��
((
MICROPY_PY_BUILTINS_BYTEARRAY
 && 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_by���y
))

389 || (
MICROPY_PY_ARRAY
 && 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_��y
)));

390 
mp_obj_��y_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

392 i�(
�lf
->
�
 == 0) {

393 
size_t
 
�em_sz
 = 
	`mp_b��y_g�_size
('@', 
�lf
->
ty�code
, 
NULL
);

395 
size_t
 
add_�t
 = 8;

396 
�lf
->
�ems
 = 
	`m_��w
(
by�
, s�f->�ems, 
�em_sz
 * s�f->
�n
, i�m_sz * (�lf->��+ 
add_�t
));

397 
�lf
->
�
 = 
add_�t
;

398 
	`mp_�q_��r
(
�lf
->
�ems
, s�f->
�n
 + 1, s�f->��+ s�f->
�
, 
�em_sz
);

400 
	`mp_b��y_�t_v�_��y
(
�lf
->
ty�code
, s�f->
�ems
, s�f->
�n
, 
�g
);

402 
�lf
->
�n
++;

403 
�lf
->
�
--;

404  
mp_cڡ_n�e
;

405 
	}
}

406 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_obj_��y_��nd_obj
, 
��y_��nd
);

408 
mp_obj_t
 
	$��y_ex�nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g_�
) {

410 
	`as��
((
MICROPY_PY_BUILTINS_BYTEARRAY
 && 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_by���y
))

411 || (
MICROPY_PY_ARRAY
 && 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_��y
)));

412 
mp_obj_��y_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

415 
mp_buf�r_�fo_t
 
�g_buf�fo
;

416 
	`mp_g�_buf�r_�i�
(
�g_�
, &
�g_buf�fo
, 
MP_BUFFER_READ
);

418 
size_t
 
sz
 = 
	`mp_b��y_g�_size
('@', 
�lf
->
ty�code
, 
NULL
);

421 
size_t
 
�n
 = 
�g_buf�fo
.��/ 
sz
;

425 i�(
�lf
->
�
 < 
�n
) {

426 
�lf
->
�ems
 = 
	`m_��w
(
by�
, s�f->�ems, (�lf->
�n
 + s�f->
�
�* 
sz
, (self->len +�en) * sz);

427 
�lf
->
�
 = 0;

429 i�(
�lf_�
 =�
�g_�
) {

433 
	`mp_g�_buf�r_�i�
(
�g_�
, &
�g_buf�fo
, 
MP_BUFFER_READ
);

436 
�lf
->
�
 -�
�n
;

440 
	`mp_�q_c�y
((
by�
 *)
�lf
->
�ems
 + s�f->
�n
 * 
sz
, 
�g_buf�fo
.
buf
,�en * sz, byte);

441 
�lf
->
�n
 +=�en;

443  
mp_cڡ_n�e
;

444 
	}
}

445 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_obj_��y_ex�nd_obj
, 
��y_ex�nd
);

448 
mp_obj_t
 
	$��y_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex_�
, mp_obj_�
v�ue
) {

449 i�(
v�ue
 =�
MP_OBJ_NULL
) {

454  
MP_OBJ_NULL
;

456 
mp_obj_��y_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

457 #i�
MICROPY_PY_BUILTINS_SLICE


458 i�(
	`mp_obj_is_ty�
(
�dex_�
, &
mp_ty�_�i�
)) {

459 
mp_bound_�i�_t
 
�i�
;

460 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
o
->
�n
, 
�dex_�
, &
�i�
)) {

461 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("only slices with step=1 (aka None)�re supported"));

463 i�(
v�ue
 !�
MP_OBJ_SENTINEL
) {

464 #i�
MICROPY_PY_ARRAY_SLICE_ASSIGN


466 
size_t
 
�c_�n
;

467 
u�t8_t
 *
�c_�ems
;

468 
size_t
 
�c_offs
 = 0;

469 
size_t
 
�em_sz
 = 
	`mp_b��y_g�_size
('@', 
o
->
ty�code
 & 
TYPECODE_MASK
, 
NULL
);

470 i�(
	`mp_obj_is_obj
(
v�ue
�&& 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(v�ue))->
ty�
, 
subs�
�=�
��y_subs�
) {

472 
mp_obj_��y_t
 *
�c_�i�
 = 
	`MP_OBJ_TO_PTR
(
v�ue
);

473 i�(
�em_sz
 !�
	`mp_b��y_g�_size
('@', 
�c_�i�
->
ty�code
 & 
TYPECODE_MASK
, 
NULL
)) {

474 
com�t_�r�
:

475 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("lhs�nd�hs should be compatible"));

477 
�c_�n
 = 
�c_�i�
->
�n
;

478 
�c_�ems
 = 
�c_�i�
->
�ems
;

479 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


480 i�(
	`mp_obj_is_ty�
(
v�ue
, &
mp_ty�_mem�yv�w
)) {

481 
�c_offs
 = 
�c_�i�
->
memv�w_off�t
 * 
�em_sz
;

484 } i�(
	`mp_obj_is_ty�
(
v�ue
, &
mp_ty�_by�s
)) {

485 i�(
�em_sz
 != 1) {

486 
com�t_�r�
;

488 
mp_buf�r_�fo_t
 
buf�fo
;

489 
	`mp_g�_buf�r_�i�
(
v�ue
, &
buf�fo
, 
MP_BUFFER_READ
);

490 
�c_�n
 = 
buf�fo
.
�n
;

491 
�c_�ems
 = 
buf�fo
.
buf
;

493 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("array/bytes�equired on�ight side"));

497 
mp_�t_t
 
�n_adj
 = 
�c_�n
 - (
�i�
.
��
 - sli�.
��t
);

498 
u�t8_t
 *
de�_�ems
 = 
o
->
�ems
;

499 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


500 i�(
o
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

501 i�(!(
o
->
ty�code
 & 
MP_OBJ_ARRAY_TYPECODE_FLAG_RW
)) {

503  
MP_OBJ_NULL
;

505 i�(
�n_adj
 != 0) {

506 
com�t_�r�
;

508 
de�_�ems
 +�
o
->
memv�w_off�t
 * 
�em_sz
;

511 i�(
�n_adj
 > 0) {

512 i�((
size_t
)
�n_adj
 > 
o
->
�
) {

514 
o
->
�ems
 = 
	`m_��w
(
by�
, o->�ems, (o->
�n
 + o->
�
�* 
�em_sz
, (o->��+ 
�n_adj
) * item_sz);

515 
o
->
�
 = 
�n_adj
;

517 i�(
�c_�ems
 =�
de�_�ems
) {

518 
�c_�ems
 = 
o
->
�ems
;

520 
de�_�ems
 = 
o
->
�ems
;

522 
	`mp_�q_��a�_�i�_grow_��a�
(
de�_�ems
, 
o
->
�n
,

523 
�i�
.
��t
, sli�.
��
, 
�c_�ems
 + 
�c_offs
, 
�c_�n
, 
�n_adj
, 
�em_sz
);

525 
	`mp_�q_��a�_�i�_no_grow
(
de�_�ems
, 
o
->
�n
,

526 
�i�
.
��t
, sli�.
��
, 
�c_�ems
 + 
�c_offs
, 
�c_�n
, 
�em_sz
);

529 
	`mp_�q_��r
(
de�_�ems
, 
o
->
�n
 + 
�n_adj
, o->�n, 
�em_sz
);

532 
o
->
�
 -�
�n_adj
;

533 
o
->
�n
 +�
�n_adj
;

534  
mp_cڡ_n�e
;

536  
MP_OBJ_NULL
;

540 
mp_obj_��y_t
 *
�s
;

541 
size_t
 
sz
 = 
	`mp_b��y_g�_size
('@', 
o
->
ty�code
 & 
TYPECODE_MASK
, 
NULL
);

542 
	`as��
(
sz
 > 0);

543 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


544 i�(
o
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

545 i�(
�i�
.
��t
 > 
memv�w_off�t_max
) {

546 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("memoryview offset�oo�arge"));

548 
�s
 = 
	`m_�w_obj
(
mp_obj_��y_t
);

549 *
�s
 = *
o
;

550 
�s
->
memv�w_off�t
 +�
�i�
.
��t
;

551 
�s
->
�n
 = 
�i�
.
��
 - sli�.
��t
;

555 
�s
 = 
	`��y_�w
(
o
->
ty�code
, 
�i�
.
��
 - sli�.
��t
);

556 
	`mem�y
(
�s
->
�ems
, (
u�t8_t
 *)
o
->�em�+ 
�i�
.
��t
 * 
sz
, (�i�.
��
 - slice.start) * sz);

558  
	`MP_OBJ_FROM_PTR
(
�s
);

562 
size_t
 
�dex
 = 
	`mp_g�_�dex
(
o
->
ba�
.
ty�
, o->
�n
, 
�dex_�
, 
�l�
);

563 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


564 i�(
o
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

565 
�dex
 +�
o
->
memv�w_off�t
;

566 i�(
v�ue
 !�
MP_OBJ_SENTINEL
 && !(
o
->
ty�code
 & 
MP_OBJ_ARRAY_TYPECODE_FLAG_RW
)) {

568  
MP_OBJ_NULL
;

572 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

574  
	`mp_b��y_g�_v�_��y
(
o
->
ty�code
 & 
TYPECODE_MASK
, o->
�ems
, 
�dex
);

577 
	`mp_b��y_�t_v�_��y
(
o
->
ty�code
 & 
TYPECODE_MASK
, o->
�ems
, 
�dex
, 
v�ue
);

578  
mp_cڡ_n�e
;

582 
	}
}

584 
mp_�t_t
 
	$��y_g�_buf�r
(
mp_obj_t
 
o_�
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
) {

585 
mp_obj_��y_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

586 
size_t
 
sz
 = 
	`mp_b��y_g�_size
('@', 
o
->
ty�code
 & 
TYPECODE_MASK
, 
NULL
);

587 
buf�fo
->
buf
 = 
o
->
�ems
;

588 
buf�fo
->
�n
 = 
o
->��* 
sz
;

589 
buf�fo
->
ty�code
 = 
o
->ty�cod�& 
TYPECODE_MASK
;

590 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


591 i�(
o
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

592 i�(!(
o
->
ty�code
 & 
MP_OBJ_ARRAY_TYPECODE_FLAG_RW
�&& (
�ags
 & 
MP_BUFFER_WRITE
)) {

596 
buf�fo
->
buf
 = (
u�t8_t
 *)buf�fo->bu�+ (
size_t
)
o
->
memv�w_off�t
 * 
sz
;

599 ()
�ags
;

602 
	}
}

604 #i�
MICROPY_PY_ARRAY


605 
MP_DEFINE_CONST_OBJ_TYPE
(

606 
mp_ty�_��y
,

607 
MP_QSTR_��y
,

608 
MP_TYPE_FLAG_ITER_IS_GETITER
,

609 
make_�w
, 
��y_make_�w
,

610 
��t
, 
��y_��t
,

611 
��
, 
��y_����_�w
,

612 
u�ry_�
, 
��y_u�ry_�
,

613 
b��y_�
, 
��y_b��y_�
,

614 
subs�
, 
��y_subs�
,

615 
buf�r
, 
��y_g�_buf�r
,

616 
lo�ls_di�
, &
mp_obj_��y_lo�ls_di�


620 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


621 
MP_DEFINE_CONST_OBJ_TYPE
(

622 
mp_ty�_by���y
,

623 
MP_QSTR_by���y
,

624 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
 | 
MP_TYPE_FLAG_ITER_IS_GETITER
,

625 
make_�w
, 
by���y_make_�w
,

626 
��t
, 
��y_��t
,

627 
��
, 
��y_����_�w
,

628 
u�ry_�
, 
��y_u�ry_�
,

629 
b��y_�
, 
��y_b��y_�
,

630 
subs�
, 
��y_subs�
,

631 
buf�r
, 
��y_g�_buf�r
,

632 
lo�ls_di�
, &
mp_obj_by���y_lo�ls_di�


636 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


637 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW_ITEMSIZE


638 
	#MEMORYVIEW_TYPE_ATTR
 
��
, 
mem�yv�w_��
,

	)

640 
	#MEMORYVIEW_TYPE_ATTR


	)

643 #i�
MICROPY_PY_BUILTINS_BYTES_HEX


644 
	#MEMORYVIEW_TYPE_LOCALS_DICT
 
lo�ls_di�
, &
mp_obj_mem�yv�w_lo�ls_di�
,

	)

646 
	#MEMORYVIEW_TYPE_LOCALS_DICT


	)

649 
MP_DEFINE_CONST_OBJ_TYPE
(

650 
mp_ty�_mem�yv�w
,

651 
MP_QSTR_mem�yv�w
,

652 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
 | 
MP_TYPE_FLAG_ITER_IS_GETITER
,

653 
make_�w
, 
mem�yv�w_make_�w
,

654 
��
, 
��y_����_�w
,

655 
u�ry_�
, 
��y_u�ry_�
,

656 
b��y_�
, 
��y_b��y_�
,

657 
MEMORYVIEW_TYPE_LOCALS_DICT


658 
MEMORYVIEW_TYPE_ATTR


659 
subs�
, 
��y_subs�
,

660 
buf�r
, 
��y_g�_buf�r


670 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


671 
mp_obj_t
 
	$mp_obj_�w_by���y
(
size_t
 
n
, cڡ *
�ems
) {

672 
mp_obj_��y_t
 *
o
 = 
	`��y_�w
(
BYTEARRAY_TYPECODE
, 
n
);

673 
	`mem�y
(
o
->
�ems
, i�ms, 
n
);

674  
	`MP_OBJ_FROM_PTR
(
o
);

675 
	}
}

678 
mp_obj_t
 
	$mp_obj_�w_by���y_by_�f
(
size_t
 
n
, *
�ems
) {

679 
mp_obj_��y_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_��y_t, &
mp_ty�_by���y
);

680 
o
->
ty�code
 = 
BYTEARRAY_TYPECODE
;

681 
o
->
�
 = 0;

682 
o
->
�n
 = 
n
;

683 
o
->
�ems
 = items;

684  
	`MP_OBJ_FROM_PTR
(
o
);

685 
	}
}

691 
	s_mp_obj_��y_�_t
 {

692 
mp_obj_ba�_t
 
	mba�
;

693 
mp_obj_��y_t
 *
	m��y
;

694 
size_t
 
	moff�t
;

695 
size_t
 
	mcur
;

696 } 
	tmp_obj_��y_�_t
;

698 
mp_obj_t
 
	$��y_�_���xt
(
mp_obj_t
 
�lf_�
) {

699 
mp_obj_��y_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

700 i�(
�lf
->
cur
 < s�f->
��y
->
�n
) {

701  
	`mp_b��y_g�_v�_��y
(
�lf
->
��y
->
ty�code
 & 
TYPECODE_MASK
, s�f->��y->
�ems
, s�f->
off�t
 + s�f->
cur
++);

703  
MP_OBJ_STOP_ITERATION
;

705 
	}
}

707 
MP_DEFINE_CONST_OBJ_TYPE
(

708 
mp_ty�_��y_�
,

709 
MP_QSTR_����
,

710 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

711 
��
, 
��y_�_���xt


714 
mp_obj_t
 
	$��y_����_�w
(
mp_obj_t
 
��y_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

715 
	`as��
((
mp_obj_��y_t
�<�(
mp_obj_��_buf_t
));

716 
mp_obj_��y_t
 *
��y
 = 
	`MP_OBJ_TO_PTR
(
��y_�
);

717 
mp_obj_��y_�_t
 *
o
 = (mp_obj_��y_�_�*)
��_buf
;

718 
o
->
ba�
.
ty�
 = &
mp_ty�_��y_�
;

719 
o
->
��y
 =�rray;

720 
o
->
off�t
 = 0;

721 
o
->
cur
 = 0;

722 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


723 i�(
��y
->
ba�
.
ty�
 =�&
mp_ty�_mem�yv�w
) {

724 
o
->
off�t
 = 
��y
->
memv�w_off�t
;

727  
	`MP_OBJ_FROM_PTR
(
o
);

728 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objarray.h

27 #i�de�
MICROPY_INCLUDED_PY_OBJARRAY_H


28 
	#MICROPY_INCLUDED_PY_OBJARRAY_H


	)

30 
	~"py/obj.h
"

33 
	#MP_OBJ_ARRAY_TYPECODE_FLAG_RW
 (0x80)

	)

36 
	#MP_OBJ_ARRAY_FREE_SIZE_BITS
 (8 * (
size_t
�- 8)

	)

41 
	s_mp_obj_��y_t
 {

42 
mp_obj_ba�_t
 
	mba�
;

43 
size_t
 
	mty�code
 : 8;

50 
size_t
 
	m�
 : 
MP_OBJ_ARRAY_FREE_SIZE_BITS
;

51 
size_t
 
	m�n
;

52 *
	m�ems
;

53 } 
	tmp_obj_��y_t
;

55 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW


56 
�l�e
 
	$mp_obj_mem�yv�w_��
(
mp_obj_��y_t
 *
�lf
, 
size_t
 
ty�code
, size_�
off�t
, size_�
�n
, *
�ems
) {

57 
�lf
->
ba�
.
ty�
 = &
mp_ty�_mem�yv�w
;

58 
�lf
->
ty�code
 =�ypecode;

59 
�lf
->
�
 = 
off�t
;

60 
�lf
->
�n
 =�en;

61 
�lf
->
�ems
 = items;

62 
	}
}

65 #i�
MICROPY_PY_ARRAY
 || 
MICROPY_PY_BUILTINS_BYTEARRAY


66 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_obj_��y_��nd_obj
);

67 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_obj_��y_ex�nd_obj
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objattrtuple.c

27 
	~"py/objtu�e.h
"

29 #i�
MICROPY_PY_ATTRTUPLE
 || 
MICROPY_PY_COLLECTIONS


32 #i�!
MICROPY_PY_COLLECTIONS


35 
	$mp_obj_��tu�e_��t_h��r
(cڡ 
mp_��t_t
 *
��t
, cڡ 
q�r
 *
f�lds
, 
mp_obj_tu�e_t
 *
o
) {

36 
	`mp_��t_�r
(
��t
, "(");

37 
size_t
 
i
 = 0; i < 
o
->
�n
; i++) {

38 i�(
i
 > 0) {

39 
	`mp_��t_�r
(
��t
, ", ");

41 
	`mp_��tf
(
��t
, "%q=", 
f�lds
[
i
]);

42 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�ems
[
i
], 
PRINT_REPR
);

44 
	`mp_��t_�r
(
��t
, ")");

45 
	}
}

49 #i�
MICROPY_PY_ATTRTUPLE


51 
	$mp_obj_��tu�e_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

52 ()
k�d
;

53 
mp_obj_tu�e_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

54 cڡ 
q�r
 *
f�lds
 = (cڡ q��*)
	`MP_OBJ_TO_PTR
(
o
->
�ems
[o->
�n
]);

55 
	`mp_obj_��tu�e_��t_h��r
(
��t
, 
f�lds
, 
o
);

56 
	}
}

58 
	$mp_obj_��tu�e_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

59 i�(
de�
[0] =�
MP_OBJ_NULL
) {

61 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

62 
size_t
 
�n
 = 
�lf
->len;

63 cڡ 
q�r
 *
f�lds
 = (cڡ q��*)
	`MP_OBJ_TO_PTR
(
�lf
->
�ems
[
�n
]);

64 
size_t
 
i
 = 0; i < 
�n
; i++) {

65 i�(
f�lds
[
i
] =�
��
) {

66 
de�
[0] = 
�lf
->
�ems
[
i
];

71 
	}
}

73 
mp_obj_t
 
	$mp_obj_�w_��tu�e
(cڡ 
q�r
 *
f�lds
, 
size_t
 
n
, cڡ 
mp_obj_t
 *
�ems
) {

74 
mp_obj_tu�e_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_tu�e_t, 
�ems
, 
mp_obj_t
, 
n
 + 1, &
mp_ty�_��tu�e
);

75 
o
->
�n
 = 
n
;

76 
size_t
 
i
 = 0; i < 
n
; i++) {

77 
o
->
�ems
[
i
] = items[i];

79 
o
->
�ems
[
n
] = 
	`MP_OBJ_FROM_PTR
(
f�lds
);

80  
	`MP_OBJ_FROM_PTR
(
o
);

81 
	}
}

83 
MP_DEFINE_CONST_OBJ_TYPE
(

84 
mp_ty�_��tu�e
,

85 
MP_QSTR_tu�e
,

86 
MP_TYPE_FLAG_ITER_IS_GETITER
,

88 
��t
, 
mp_obj_��tu�e_��t
,

89 
u�ry_�
, 
mp_obj_tu�e_u�ry_�
,

90 
b��y_�
, 
mp_obj_tu�e_b��y_�
,

91 
��
, 
mp_obj_��tu�e_��
,

92 
subs�
, 
mp_obj_tu�e_subs�
,

93 
��
, 
mp_obj_tu�e_g���


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objbool.c

27 
	~<�dlib.h
>

29 
	~"py/ru�ime.h
"

31 #i�
MICROPY_OBJ_IMMEDIATE_OBJS


33 
	#BOOL_VALUE
(
o
�((o�=�
mp_cڡ_�l�
 ? 0 : 1)

	)

37 
	#BOOL_VALUE
(
o
�(((
mp_obj_bo�_t
 *)
	`MP_OBJ_TO_PTR
(o))->
v�ue
)

	)

39 
	s_mp_obj_bo�_t
 {

40 
mp_obj_ba�_t
 
	mba�
;

41 
bo�
 
	mv�ue
;

42 } 
	tmp_obj_bo�_t
;

46 
	$bo�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

47 
bo�
 
v�ue
 = 
	`BOOL_VALUE
(
�lf_�
);

48 i�(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
) {

49 i�(
v�ue
) {

50 
	`mp_��t_�r
(
��t
, "true");

52 
	`mp_��t_�r
(
��t
, "false");

55 i�(
v�ue
) {

56 
	`mp_��t_�r
(
��t
, "True");

58 
	`mp_��t_�r
(
��t
, "False");

61 
	}
}

63 
mp_obj_t
 
	$bo�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

64 ()
ty�_�
;

65 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 1, 
�l�
);

67 i�(
n_�gs
 == 0) {

68  
mp_cڡ_�l�
;

70  
	`mp_obj_�w_bo�
(
	`mp_obj_is_�ue
(
�gs
[0]));

72 
	}
}

74 
mp_obj_t
 
	$bo�_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

75 i�(
�
 =�
MP_UNARY_OP_LEN
) {

76  
MP_OBJ_NULL
;

78 
bo�
 
v�ue
 = 
	`BOOL_VALUE
(
o_�
);

79  
	`mp_u�ry_�
(
�
, 
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
));

80 
	}
}

82 
mp_obj_t
 
	$bo�_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

83 
bo�
 
v�ue
 = 
	`BOOL_VALUE
(
lhs_�
);

84  
	`mp_b��y_�
(
�
, 
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
), 
rhs_�
);

85 
	}
}

87 
MP_DEFINE_CONST_OBJ_TYPE
(

89 
mp_ty�_bo�
,

90 
MP_QSTR_bo�
,

91 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
,

92 
make_�w
, 
bo�_make_�w
,

93 
��t
, 
bo�_��t
,

94 
u�ry_�
, 
bo�_u�ry_�
,

95 
b��y_�
, 
bo�_b��y_�


98 #i�!
MICROPY_OBJ_IMMEDIATE_OBJS


99 cڡ 
mp_obj_bo�_t
 
	gmp_cڡ_�l�_obj
 = {{&
mp_ty�_bo�
}, 
�l�
};

100 cڡ 
mp_obj_bo�_t
 
	gmp_cڡ_�ue_obj
 = {{&
mp_ty�_bo�
}, 
�ue
};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objboundmeth.c

27 
	~<�r�g.h
>

29 
	~"py/obj.h
"

30 
	~"py/ru�ime.h
"

32 
	s_mp_obj_bound_m�h_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 
mp_obj_t
 
	mm�h
;

35 
mp_obj_t
 
	m�lf
;

36 } 
	tmp_obj_bound_m�h_t
;

38 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


39 
	$bound_m�h_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

40 ()
k�d
;

41 
mp_obj_bound_m�h_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

42 
	`mp_��tf
(
��t
, "<bound_m�hod %�", 
o
);

43 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�lf
, 
PRINT_REPR
);

44 
	`mp_��t_�r
(
��t
, ".");

45 
	`mp_obj_��t_h��r
(
��t
, 
o
->
m�h
, 
PRINT_REPR
);

46 
	`mp_��t_�r
(
��t
, ">");

47 
	}
}

50 
mp_obj_t
 
	$mp_��_m�hod_�lf_n_kw
(
mp_obj_t
 
m�h
, mp_obj_�
�lf
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

52 
size_t
 
n_tٮ
 = 
n_�gs
 + 2 * 
n_kw
;

53 
mp_obj_t
 *
�gs2
 = 
NULL
;

54 #i�
MICROPY_ENABLE_PYSTACK


55 
�gs2
 = 
	`mp_py�ack_�loc
((
mp_obj_t
�* (1 + 
n_tٮ
));

57 
mp_obj_t
 *
�_�gs2
 = 
NULL
;

58 i�(
n_tٮ
 > 4) {

60 
�gs2
 = 
	`m_�w_maybe
(
mp_obj_t
, 1 + 
n_tٮ
);

61 
�_�gs2
 = 
�gs2
;

63 i�(
�gs2
 =�
NULL
) {

65 
�gs2
 = 
	`�lo�
((
mp_obj_t
�* (1 + 
n_tٮ
));

68 
�gs2
[0] = 
�lf
;

69 
	`mem�y
(
�gs2
 + 1, 
�gs
, 
n_tٮ
 * (
mp_obj_t
));

70 
mp_obj_t
 
�s
 = 
	`mp_��_fun�i�_n_kw
(
m�h
, 
n_�gs
 + 1, 
n_kw
, 
�gs2
);

71 #i�
MICROPY_ENABLE_PYSTACK


72 
	`mp_py�ack_�
(
�gs2
);

74 i�(
�_�gs2
 !�
NULL
) {

75 
	`m_d�
(
mp_obj_t
, 
�_�gs2
, 1 + 
n_tٮ
);

78  
�s
;

79 
	}
}

81 
mp_obj_t
 
	$bound_m�h_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

82 
mp_obj_bound_m�h_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

83  
	`mp_��_m�hod_�lf_n_kw
(
�lf
->
m�h
, s�f->�lf, 
n_�gs
, 
n_kw
, 
�gs
);

84 
	}
}

86 
mp_obj_t
 
	$bound_m�h_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

87 
mp_obj_bound_m�h_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

88 
�
) {

89 
MP_UNARY_OP_HASH
:

90  
	`MP_OBJ_NEW_SMALL_INT
((
mp_u�t_t
)
�lf
->�l�^ (mp_u�t_t)�lf->
m�h
);

92  
MP_OBJ_NULL
;

94 
	}
}

96 
mp_obj_t
 
	$bound_m�h_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

100 i�(
�
 !�
MP_BINARY_OP_EQUAL
) {

101  
MP_OBJ_NULL
;

103 
mp_obj_bound_m�h_t
 *
lhs
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

104 
mp_obj_bound_m�h_t
 *
rhs
 = 
	`MP_OBJ_TO_PTR
(
rhs_�
);

105  
	`mp_obj_�w_bo�
(
lhs
->
�lf
 =�
rhs
->�l�&&�hs->
m�h
 ==�hs->meth);

106 
	}
}

108 #i�
MICROPY_PY_FUNCTION_ATTRS


109 
	$bound_m�h_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

110 i�(
de�
[0] !�
MP_OBJ_NULL
) {

115 
mp_obj_bound_m�h_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

116 
	`mp_l�d_m�hod_maybe
(
�lf
->
m�h
, 
��
, 
de�
);

117 
	}
}

120 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


121 
	#BOUND_METH_TYPE_PRINT
 
��t
, 
bound_m�h_��t
,

	)

123 
	#BOUND_METH_TYPE_PRINT


	)

126 #i�
MICROPY_PY_FUNCTION_ATTRS


127 
	#BOUND_METH_TYPE_ATTR
 
��
, 
bound_m�h_��
,

	)

129 
	#BOUND_METH_TYPE_ATTR


	)

132 
MP_DEFINE_CONST_OBJ_TYPE
(

133 
mp_ty�_bound_m�h
,

134 
MP_QSTR_bound_m�hod
,

135 
MP_TYPE_FLAG_NONE
,

136 
BOUND_METH_TYPE_PRINT


137 
BOUND_METH_TYPE_ATTR


138 
��
, 
bound_m�h_��
,

139 
u�ry_�
, 
bound_m�h_u�ry_�
,

140 
b��y_�
, 
bound_m�h_b��y_�


143 
mp_obj_t
 
	$mp_obj_�w_bound_m�h
(
mp_obj_t
 
m�h
, mp_obj_�
�lf
) {

144 
mp_obj_bound_m�h_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_bound_m�h_t, &
mp_ty�_bound_m�h
);

145 
o
->
m�h
 = meth;

146 
o
->
�lf
 = self;

147  
	`MP_OBJ_FROM_PTR
(
o
);

148 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objcell.c

27 
	~"py/obj.h
"

29 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


30 
	$��_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

31 ()
k�d
;

32 
mp_obj_��_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

33 
	`mp_��tf
(
��t
, "<�� %�", 
o
->
obj
);

34 i�(
o
->
obj
 =�
MP_OBJ_NULL
) {

35 
	`mp_��t_�r
(
��t
, "(nil)");

37 
	`mp_obj_��t_h��r
(
��t
, 
o
->
obj
, 
PRINT_REPR
);

39 
	`mp_��t_�r
(
��t
, ">");

40 
	}
}

43 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


44 
	#CELL_TYPE_PRINT
 , 
��t
, 
��_��t


	)

46 
	#CELL_TYPE_PRINT


	)

49 
MP_DEFINE_CONST_OBJ_TYPE
(

51 
mp_ty�_��
, 
MP_QSTR_
, 
MP_TYPE_FLAG_NONE


52 
CELL_TYPE_PRINT


55 
mp_obj_t
 
	$mp_obj_�w_��
(
mp_obj_t
 
obj
) {

56 
mp_obj_��_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_��_t, &
mp_ty�_��
);

57 
o
->
obj
 = obj;

58  
	`MP_OBJ_FROM_PTR
(
o
);

59 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objclosure.c

27 
	~<�r�g.h
>

29 
	~"py/obj.h
"

30 
	~"py/ru�ime.h
"

32 
	s_mp_obj_�osu�_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 
mp_obj_t
 
	mfun
;

35 
size_t
 
	mn_�o�d
;

36 
mp_obj_t
 
	m�o�d
[];

37 } 
	tmp_obj_�osu�_t
;

39 
mp_obj_t
 
	$�osu�_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

40 
mp_obj_�osu�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

44 
size_t
 
n_tٮ
 = 
�lf
->
n_�o�d
 + 
n_�gs
 + 2 * 
n_kw
;

45 i�(
n_tٮ
 <= 5) {

47 
mp_obj_t
 
�gs2
[5];

48 
	`mem�y
(
�gs2
, 
�lf
->
�o�d
, s�f->
n_�o�d
 * (
mp_obj_t
));

49 
	`mem�y
(
�gs2
 + 
�lf
->
n_�o�d
, 
�gs
, (
n_�gs
 + 2 * 
n_kw
�* (
mp_obj_t
));

50  
	`mp_��_fun�i�_n_kw
(
�lf
->
fun
, s�f->
n_�o�d
 + 
n_�gs
, 
n_kw
, 
�gs2
);

53 
mp_obj_t
 *
�gs2
 = 
	`m_�w
(mp_obj_t, 
n_tٮ
);

54 
	`mem�y
(
�gs2
, 
�lf
->
�o�d
, s�f->
n_�o�d
 * (
mp_obj_t
));

55 
	`mem�y
(
�gs2
 + 
�lf
->
n_�o�d
, 
�gs
, (
n_�gs
 + 2 * 
n_kw
�* (
mp_obj_t
));

56 
mp_obj_t
 
�s
 = 
	`mp_��_fun�i�_n_kw
(
�lf
->
fun
, s�f->
n_�o�d
 + 
n_�gs
, 
n_kw
, 
�gs2
);

57 
	`m_d�
(
mp_obj_t
, 
�gs2
, 
n_tٮ
);

58  
�s
;

60 
	}
}

62 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


63 
	$�osu�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

64 ()
k�d
;

65 
mp_obj_�osu�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

66 
	`mp_��t_�r
(
��t
, "<closure ");

67 
	`mp_obj_��t_h��r
(
��t
, 
o
->
fun
, 
PRINT_REPR
);

68 
	`mp_��tf
(
��t
, "��%p,�_�o�d=%u ", 
o
, ()o->
n_�o�d
);

69 
size_t
 
i
 = 0; i < 
o
->
n_�o�d
; i++) {

70 i�(
o
->
�o�d
[
i
] =�
MP_OBJ_NULL
) {

71 
	`mp_��t_�r
(
��t
, "(nil)");

73 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�o�d
[
i
], 
PRINT_REPR
);

75 
	`mp_��t_�r
(
��t
, " ");

77 
	`mp_��t_�r
(
��t
, ">");

78 
	}
}

81 #i�
MICROPY_PY_FUNCTION_ATTRS


82 
	$mp_obj_�osu�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

84 
mp_obj_�osu�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

85 
	`mp_l�d_m�hod_maybe
(
o
->
fun
, 
��
, 
de�
);

86 
	}
}

87 
	#CLOSURE_TYPE_ATTR
 
��
, 
mp_obj_�osu�_��
,

	)

89 
	#CLOSURE_TYPE_ATTR


	)

92 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


93 
	#CLOSURE_TYPE_PRINT
 
��t
, 
�osu�_��t
,

	)

95 
	#CLOSURE_TYPE_PRINT


	)

98 
MP_DEFINE_CONST_OBJ_TYPE
(

99 
mp_ty�_�osu�
,

100 
MP_QSTR_�osu�
,

101 
MP_TYPE_FLAG_BINDS_SELF
,

102 
CLOSURE_TYPE_ATTR


103 
CLOSURE_TYPE_PRINT


104 
��
, 
�osu�_��


107 
mp_obj_t
 
	$mp_obj_�w_�osu�
(
mp_obj_t
 
fun
, 
size_t
 
n_�o�d_ov�
, cڡ mp_obj_�*
�o�d
) {

108 
mp_obj_�osu�_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_�osu�_t, 
�o�d
, 
mp_obj_t
, 
n_�o�d_ov�
, &
mp_ty�_�osu�
);

109 
o
->
fun
 = fun;

110 
o
->
n_�o�d
 = 
n_�o�d_ov�
;

111 
	`mem�y
(
o
->
�o�d
, clo�d, 
n_�o�d_ov�
 * (
mp_obj_t
));

112  
	`MP_OBJ_FROM_PTR
(
o
);

113 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objcomplex.c

27 
	~<�dlib.h
>

28 
	~<�dio.h
>

29 
	~<as��.h
>

31 
	~"py/�r�num.h
"

32 
	~"py/ru�ime.h
"

34 #i�
MICROPY_PY_BUILTINS_COMPLEX


36 
	~<m�h.h
>

37 
	~"py/f�m���t.h
"

39 
	s_mp_obj_com�ex_t
 {

40 
mp_obj_ba�_t
 
	mba�
;

41 
mp_��t_t
 
	m��
;

42 
mp_��t_t
 
	mimag
;

43 } 
	tmp_obj_com�ex_t
;

45 
	$com�ex_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

46 ()
k�d
;

47 
mp_obj_com�ex_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

48 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


49 
buf
[16];

50 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C


51 cڡ 
�ecisi�
 = 6;

53 cڡ 
�ecisi�
 = 7;

56 
buf
[32];

57 cڡ 
�ecisi�
 = 16;

59 i�(
o
->
��
 == 0) {

60 
	`mp_f�m�_��t
(
o
->
imag
, 
buf
, (buf), 'g', 
�ecisi�
, '\0');

61 
	`mp_��tf
(
��t
, "%sj", 
buf
);

63 
	`mp_f�m�_��t
(
o
->
��
, 
buf
, (buf), 'g', 
�ecisi�
, '\0');

64 
	`mp_��tf
(
��t
, "(%s", 
buf
);

65 i�(
o
->
imag
 >�0 || 
	`i��
(o->imag)) {

66 
	`mp_��t_�r
(
��t
, "+");

68 
	`mp_f�m�_��t
(
o
->
imag
, 
buf
, (buf), 'g', 
�ecisi�
, '\0');

69 
	`mp_��tf
(
��t
, "%sj)", 
buf
);

71 
	}
}

73 
mp_obj_t
 
	$com�ex_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

74 ()
ty�_�
;

75 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 2, 
�l�
);

77 
n_�gs
) {

79  
	`mp_obj_�w_com�ex
(0, 0);

82 i�(
	`mp_obj_is_�r
(
�gs
[0])) {

84 
size_t
 
l
;

85 cڡ *
s
 = 
	`mp_obj_�r_g�_d�a
(
�gs
[0], &
l
);

86  
	`mp_�r�_num_com�ex
(
s
, 
l
, 
NULL
);

87 } i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_com�ex
)) {

89  
�gs
[0];

91 
mp_��t_t
 
��
, 
imag
;

92 
	`mp_obj_g�_com�ex
(
�gs
[0], &
��
, &
imag
);

93  
	`mp_obj_�w_com�ex
(
��
, 
imag
);

98 
mp_��t_t
 
��
, 
imag
;

99 i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_com�ex
)) {

100 
	`mp_obj_com�ex_g�
(
�gs
[0], &
��
, &
imag
);

102 
��
 = 
	`mp_obj_g�_��t
(
�gs
[0]);

103 
imag
 = 0;

105 i�(
	`mp_obj_is_ty�
(
�gs
[1], &
mp_ty�_com�ex
)) {

106 
mp_��t_t
 
��2
, 
imag2
;

107 
	`mp_obj_com�ex_g�
(
�gs
[1], &
��2
, &
imag2
);

108 
��
 -�
imag2
;

109 
imag
 +�
��2
;

111 
imag
 +�
	`mp_obj_g�_��t
(
�gs
[1]);

113  
	`mp_obj_�w_com�ex
(
��
, 
imag
);

116 
	}
}

118 
mp_obj_t
 
	$com�ex_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

119 
mp_obj_com�ex_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

120 
�
) {

121 
MP_UNARY_OP_BOOL
:

122  
	`mp_obj_�w_bo�
(
o
->
��
 !�0 || o->
imag
 != 0);

123 
MP_UNARY_OP_HASH
:

124  
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_��t_hash
(
o
->
��
�^ mp_��t_hash(o->
imag
));

125 
MP_UNARY_OP_POSITIVE
:

126  
o_�
;

127 
MP_UNARY_OP_NEGATIVE
:

128  
	`mp_obj_�w_com�ex
(-
o
->
��
, -o->
imag
);

129 
MP_UNARY_OP_ABS
:

130  
	`mp_obj_�w_��t
(
	`MICROPY_FLOAT_C_FUN
(
sq�
)(
o
->
��
 * o->�� + o->
imag
 * o->imag));

132  
MP_OBJ_NULL
;

134 
	}
}

136 
mp_obj_t
 
	$com�ex_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

137 
mp_obj_com�ex_t
 *
lhs
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

138  
	`mp_obj_com�ex_b��y_�
(
�
, 
lhs
->
��
,�hs->
imag
, 
rhs_�
);

139 
	}
}

141 
	$com�ex_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

142 i�(
de�
[0] !�
MP_OBJ_NULL
) {

146 
mp_obj_com�ex_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

147 i�(
��
 =�
MP_QSTR_��
) {

148 
de�
[0] = 
	`mp_obj_�w_��t
(
�lf
->
��
);

149 } i�(
��
 =�
MP_QSTR_imag
) {

150 
de�
[0] = 
	`mp_obj_�w_��t
(
�lf
->
imag
);

152 
	}
}

154 
MP_DEFINE_CONST_OBJ_TYPE
(

155 
mp_ty�_com�ex
, 
MP_QSTR_com�ex
, 
MP_TYPE_FLAG_EQ_NOT_REFLEXIVE
 | 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
,

156 
make_�w
, 
com�ex_make_�w
,

157 
��t
, 
com�ex_��t
,

158 
u�ry_�
, 
com�ex_u�ry_�
,

159 
b��y_�
, 
com�ex_b��y_�
,

160 
��
, 
com�ex_��


163 
mp_obj_t
 
	$mp_obj_�w_com�ex
(
mp_��t_t
 
��
, mp_��t_�
imag
) {

164 
mp_obj_com�ex_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_com�ex_t, &
mp_ty�_com�ex
);

165 
o
->
��
 =�eal;

166 
o
->
imag
 = imag;

167  
	`MP_OBJ_FROM_PTR
(
o
);

168 
	}
}

170 
	$mp_obj_com�ex_g�
(
mp_obj_t
 
�lf_�
, 
mp_��t_t
 *
��
, mp_��t_�*
imag
) {

171 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_com�ex
));

172 
mp_obj_com�ex_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

173 *
��
 = 
�lf
->real;

174 *
imag
 = 
�lf
->imag;

175 
	}
}

177 
mp_obj_t
 
	$mp_obj_com�ex_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_��t_t
 
lhs_��
, mp_��t_�
lhs_imag
, 
mp_obj_t
 
rhs_�
) {

178 
mp_��t_t
 
rhs_��
, 
rhs_imag
;

179 i�(!
	`mp_obj_g�_com�ex_maybe
(
rhs_�
, &
rhs_��
, &
rhs_imag
)) {

180  
MP_OBJ_NULL
;

183 
�
) {

184 
MP_BINARY_OP_ADD
:

185 
MP_BINARY_OP_INPLACE_ADD
:

186 
lhs_��
 +�
rhs_��
;

187 
lhs_imag
 +�
rhs_imag
;

189 
MP_BINARY_OP_SUBTRACT
:

190 
MP_BINARY_OP_INPLACE_SUBTRACT
:

191 
lhs_��
 -�
rhs_��
;

192 
lhs_imag
 -�
rhs_imag
;

194 
MP_BINARY_OP_MULTIPLY
:

195 
MP_BINARY_OP_INPLACE_MULTIPLY
: {

196 
mp_��t_t
 
��
;

197 
muɝly
:

198 
��
 = 
lhs_��
 * 
rhs_��
 - 
lhs_imag
 * 
rhs_imag
;

199 
lhs_imag
 = 
lhs_��
 * 
rhs_imag
 +�hs_imag * 
rhs_��
;

200 
lhs_��
 = 
��
;

203 
MP_BINARY_OP_FLOOR_DIVIDE
:

204 
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
:

205 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't�runcate-divide� complex�umber"));

207 
MP_BINARY_OP_TRUE_DIVIDE
:

208 
MP_BINARY_OP_INPLACE_TRUE_DIVIDE
:

209 i�(
rhs_imag
 == 0) {

210 i�(
rhs_��
 == 0) {

211 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("complex divide by zero"));

213 
lhs_��
 /�
rhs_��
;

214 
lhs_imag
 /�
rhs_��
;

215 } i�(
rhs_��
 == 0) {

216 
mp_��t_t
 
��
 = 
lhs_imag
 / 
rhs_imag
;

217 
lhs_imag
 = -
lhs_��
 / 
rhs_imag
;

218 
lhs_��
 = 
��
;

220 
mp_��t_t
 
rhs_�n_sq
 = 
rhs_��
 *�hs_�� + 
rhs_imag
 *�hs_imag;

221 
rhs_��
 /�
rhs_�n_sq
;

222 
rhs_imag
 /�-
rhs_�n_sq
;

223 
muɝly
;

227 
MP_BINARY_OP_POWER
:

228 
MP_BINARY_OP_INPLACE_POWER
: {

234 
mp_��t_t
 
abs1
 = 
	`MICROPY_FLOAT_C_FUN
(
sq�
)(
lhs_��
 *�hs_�� + 
lhs_imag
 *�hs_imag);

235 i�(
abs1
 == 0) {

236 i�(
rhs_imag
 =�0 && 
rhs_��
 >= 0) {

237 
lhs_��
 = (
rhs_��
 == 0);

239 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("0.0�o� complex�ower"));

242 
mp_��t_t
 
�1
 = 
	`MICROPY_FLOAT_C_FUN
(
log
)(
abs1
);

243 
mp_��t_t
 
�g1
 = 
	`MICROPY_FLOAT_C_FUN
(
��2
)(
lhs_imag
, 
lhs_��
);

244 
mp_��t_t
 
x3
 = 
rhs_��
 * 
�1
 - 
rhs_imag
 * 
�g1
;

245 
mp_��t_t
 
y3
 = 
rhs_imag
 * 
�1
 + 
rhs_��
 * 
�g1
;

246 
mp_��t_t
 
exp_x3
 = 
	`MICROPY_FLOAT_C_FUN
(
exp
)(
x3
);

247 
lhs_��
 = 
exp_x3
 * 
	`MICROPY_FLOAT_C_FUN
(
cos
)(
y3
);

248 
lhs_imag
 = 
exp_x3
 * 
	`MICROPY_FLOAT_C_FUN
(
s�
)(
y3
);

253 
MP_BINARY_OP_EQUAL
:

254  
	`mp_obj_�w_bo�
(
lhs_��
 =�
rhs_��
 && 
lhs_imag
 =�
rhs_imag
);

257  
MP_OBJ_NULL
;

259  
	`mp_obj_�w_com�ex
(
lhs_��
, 
lhs_imag
);

260 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objdeque.c

27 
	~<uni�d.h
>

29 
	~"py/ru�ime.h
"

31 #i�
MICROPY_PY_COLLECTIONS_DEQUE


33 
	s_mp_obj_deque_t
 {

34 
mp_obj_ba�_t
 
	mba�
;

35 
size_t
 
	m�loc
;

36 
size_t
 
	mi_g�
;

37 
size_t
 
	mi_put
;

38 
mp_obj_t
 *
	m�ems
;

39 
u�t32_t
 
	m�ags
;

40 
	#FLAG_CHECK_OVERFLOW
 1

	)

41 } 
	tmp_obj_deque_t
;

43 
mp_obj_t
 
mp_obj_deque_��nd
(mp_obj_�
�lf_�
, mp_obj_�
�g
);

44 
mp_obj_t
 
mp_obj_deque_ex�nd
(mp_obj_�
�lf_�
, mp_obj_�
�g_�
);

45 #i�
MICROPY_PY_COLLECTIONS_DEQUE_ITER


46 
mp_obj_t
 
mp_obj_�w_deque_�
(mp_obj_�
deque
, 
mp_obj_��_buf_t
 *
��_buf
);

49 
mp_obj_t
 
	$deque_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

50 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 3, 
�l�
);

53 
mp_�t_t
 
max�n
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

54 i�(
max�n
 < 0) {

55 
	`mp_�i�_V�ueE��
(
NULL
);

58 
mp_obj_deque_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_deque_t, 
ty�
);

59 
o
->
�loc
 = 
max�n
 + 1;

60 
o
->
i_g�
 = o->
i_put
 = 0;

61 
o
->
�ems
 = 
	`m_�w0
(
mp_obj_t
, o->
�loc
);

63 i�(
n_�gs
 > 2) {

64 
o
->
�ags
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

67 
	`mp_obj_deque_ex�nd
(
	`MP_OBJ_FROM_PTR
(
o
), 
�gs
[0]);

69  
	`MP_OBJ_FROM_PTR
(
o
);

70 
	}
}

72 
size_t
 
	$deque_�n
(
mp_obj_deque_t
 *
�lf
) {

73 
ssize_t
 
�n
 = 
�lf
->
i_put
 - s�f->
i_g�
;

74 i�(
�n
 < 0) {

75 
�n
 +�
�lf
->
�loc
;

77  
�n
;

78 
	}
}

80 
mp_obj_t
 
	$deque_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

81 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

82 
�
) {

83 
MP_UNARY_OP_BOOL
:

84  
	`mp_obj_�w_bo�
(
�lf
->
i_g�
 !�lf->
i_put
);

85 
MP_UNARY_OP_LEN
:

86  
	`MP_OBJ_NEW_SMALL_INT
(
	`deque_�n
(
�lf
));

88 #i�
MICROPY_PY_SYS_GETSIZEOF


89 
MP_UNARY_OP_SIZEOF
: {

90 
size_t
 
sz
 = (*
�lf
�+ (
mp_obj_t
�* s�f->
�loc
;

91  
	`MP_OBJ_NEW_SMALL_INT
(
sz
);

95  
MP_OBJ_NULL
;

97 
	}
}

99 
mp_obj_t
 
	$mp_obj_deque_��nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

100 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

102 
size_t
 
�w_i_put
 = 
�lf
->
i_put
 + 1;

103 i�(
�w_i_put
 =�
�lf
->
�loc
) {

104 
�w_i_put
 = 0;

107 i�(
�lf
->
�ags
 & 
FLAG_CHECK_OVERFLOW
 && 
�w_i_put
 =�lf->
i_g�
) {

108 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("full"));

111 
�lf
->
�ems
[�lf->
i_put
] = 
�g
;

112 
�lf
->
i_put
 = 
�w_i_put
;

114 i�(
�lf
->
i_g�
 =�
�w_i_put
) {

115 i�(++
�lf
->
i_g�
 =�lf->
�loc
) {

116 
�lf
->
i_g�
 = 0;

120  
mp_cڡ_n�e
;

121 
	}
}

122 
MP_DEFINE_CONST_FUN_OBJ_2
(
deque_��nd_obj
, 
mp_obj_deque_��nd
);

124 
mp_obj_t
 
	$mp_obj_deque_��nd��
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

125 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

127 
size_t
 
�w_i_g�
 = 
�lf
->
i_g�
 - 1;

128 i�(
�lf
->
i_g�
 == 0) {

129 
�w_i_g�
 = 
�lf
->
�loc
 - 1;

132 i�(
�lf
->
�ags
 & 
FLAG_CHECK_OVERFLOW
 && 
�w_i_g�
 =�lf->
i_put
) {

133 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("full"));

136 
�lf
->
i_g�
 = 
�w_i_g�
;

137 
�lf
->
�ems
[�lf->
i_g�
] = 
�g
;

140 i�(
�lf
->
i_put
 =�
�w_i_g�
) {

141 i�(
�lf
->
i_put
 == 0) {

142 
�lf
->
i_put
 = s�f->
�loc
 - 1;

144 
�lf
->
i_put
--;

148  
mp_cڡ_n�e
;

149 
	}
}

150 
MP_DEFINE_CONST_FUN_OBJ_2
(
deque_��nd��_obj
, 
mp_obj_deque_��nd��
);

152 
mp_obj_t
 
	$mp_obj_deque_ex�nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g_�
) {

153 
mp_obj_��_buf_t
 
��_buf
;

154 
mp_obj_t
 
��
 = 
	`mp_g���
(
�g_�
, &
��_buf
);

155 
mp_obj_t
 
�em
;

156 (
�em
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

157 
	`mp_obj_deque_��nd
(
�lf_�
, 
�em
);

159  
mp_cڡ_n�e
;

160 
	}
}

161 
MP_DEFINE_CONST_FUN_OBJ_2
(
deque_ex�nd_obj
, 
mp_obj_deque_ex�nd
);

163 
mp_obj_t
 
	$deque_p���
(
mp_obj_t
 
�lf_�
) {

164 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

166 i�(
�lf
->
i_g�
 =�lf->
i_put
) {

167 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("empty"));

170 
mp_obj_t
 
�t
 = 
�lf
->
�ems
[�lf->
i_g�
];

171 
�lf
->
�ems
[�lf->
i_g�
] = 
MP_OBJ_NULL
;

173 i�(++
�lf
->
i_g�
 =�lf->
�loc
) {

174 
�lf
->
i_g�
 = 0;

177  
�t
;

178 
	}
}

179 
MP_DEFINE_CONST_FUN_OBJ_1
(
deque_p���_obj
, 
deque_p���
);

181 
mp_obj_t
 
	$deque_p�
(
mp_obj_t
 
�lf_�
) {

182 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

184 i�(
�lf
->
i_g�
 =�lf->
i_put
) {

185 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("empty"));

188 i�(
�lf
->
i_put
 == 0) {

189 
�lf
->
i_put
 = s�f->
�loc
 - 1;

191 
�lf
->
i_put
--;

194 
mp_obj_t
 
�t
 = 
�lf
->
�ems
[�lf->
i_put
];

195 
�lf
->
�ems
[�lf->
i_put
] = 
MP_OBJ_NULL
;

197  
�t
;

198 
	}
}

199 
MP_DEFINE_CONST_FUN_OBJ_1
(
deque_p�_obj
, 
deque_p�
);

201 #i�
MICROPY_PY_COLLECTIONS_DEQUE_SUBSCR


202 
mp_obj_t
 
	$deque_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

203 i�(
v�ue
 =�
MP_OBJ_NULL
) {

205  
MP_OBJ_NULL
;

207 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

209 
size_t
 
off�t
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, 
	`deque_�n
(�lf), 
�dex
, 
�l�
);

210 
size_t
 
�dex_v�
 = 
�lf
->
i_g�
 + 
off�t
;

211 i�(
�dex_v�
 > 
�lf
->
�loc
) {

212 
�dex_v�
 -�
�lf
->
�loc
;

215 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

217  
�lf
->
�ems
[
�dex_v�
];

220 
�lf
->
�ems
[
�dex_v�
] = 
v�ue
;

221  
mp_cڡ_n�e
;

223 
	}
}

227 
mp_obj_t
 
	$deque_��r
(
mp_obj_t
 
�lf_�
) {

228 
mp_obj_deque_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

229 
�lf
->
i_g�
 = s�f->
i_put
 = 0;

230 
	`mp_�q_��r
(
�lf
->
�ems
, 0, s�f->
�loc
, (*self->items));

231  
mp_cڡ_n�e
;

232 
	}
}

233 
MP_DEFINE_CONST_FUN_OBJ_1
(
deque_��r_obj
, 
deque_��r
);

236 cڡ 
mp_rom_m�_�em_t
 
	gdeque_lo�ls_di�_�b�
[] = {

237 { 
MP_ROM_QSTR
(
MP_QSTR_��nd
), 
MP_ROM_PTR
(&
deque_��nd_obj
) },

238 { 
MP_ROM_QSTR
(
MP_QSTR_��nd��
), 
MP_ROM_PTR
(&
deque_��nd��_obj
) },

239 { 
MP_ROM_QSTR
(
MP_QSTR_ex�nd
), 
MP_ROM_PTR
(&
deque_ex�nd_obj
) },

241 { 
MP_ROM_QSTR
(
MP_QSTR_��r
), 
MP_ROM_PTR
(&
deque_��r_obj
) },

243 { 
MP_ROM_QSTR
(
MP_QSTR_p�
), 
MP_ROM_PTR
(&
deque_p�_obj
) },

244 { 
MP_ROM_QSTR
(
MP_QSTR_p���
), 
MP_ROM_PTR
(&
deque_p���_obj
) },

247 
MP_DEFINE_CONST_DICT
(
deque_lo�ls_di�
, 
deque_lo�ls_di�_�b�
);

249 #i�
MICROPY_PY_COLLECTIONS_DEQUE_ITER


250 
	#DEQUE_TYPE_FLAGS
 
MP_TYPE_FLAG_ITER_IS_GETITER


	)

251 
	#DEQUE_TYPE_ITER
 
��
, 
mp_obj_�w_deque_�
,

	)

253 
	#DEQUE_TYPE_FLAGS
 
MP_TYPE_FLAG_NONE


	)

254 
	#DEQUE_TYPE_ITER


	)

257 #i�
MICROPY_PY_COLLECTIONS_DEQUE_SUBSCR


258 
	#DEQUE_TYPE_SUBSCR
 
subs�
, 
deque_subs�
,

	)

260 
	#DEQUE_TYPE_SUBSCR


	)

263 
MP_DEFINE_CONST_OBJ_TYPE
(

264 
mp_ty�_deque
,

265 
MP_QSTR_deque
,

266 
DEQUE_TYPE_FLAGS
,

267 
make_�w
, 
deque_make_�w
,

268 
u�ry_�
, 
deque_u�ry_�
,

269 
DEQUE_TYPE_SUBSCR


270 
DEQUE_TYPE_ITER


271 
lo�ls_di�
, &
deque_lo�ls_di�


277 #i�
MICROPY_PY_COLLECTIONS_DEQUE_ITER


279 
	s_mp_obj_deque_�_t
 {

280 
mp_obj_ba�_t
 
	mba�
;

281 
mp_fun_1_t
 
	m���xt
;

282 
mp_obj_t
 
	mdeque
;

283 
size_t
 
	mcur
;

284 } 
	tmp_obj_deque_�_t
;

286 
mp_obj_t
 
	$deque_�_���xt
(
mp_obj_t
 
�lf_�
) {

287 
mp_obj_deque_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

288 
mp_obj_deque_t
 *
deque
 = 
	`MP_OBJ_TO_PTR
(
�lf
->deque);

289 i�(
�lf
->
cur
 !�
deque
->
i_put
) {

290 
mp_obj_t
 
o_out
 = 
deque
->
�ems
[
�lf
->
cur
];

291 i�(++
�lf
->
cur
 =�
deque
->
�loc
) {

292 
�lf
->
cur
 = 0;

294  
o_out
;

296  
MP_OBJ_STOP_ITERATION
;

298 
	}
}

300 
mp_obj_t
 
	$mp_obj_�w_deque_�
(
mp_obj_t
 
deque
, 
mp_obj_��_buf_t
 *
��_buf
) {

301 
mp_obj_deque_t
 *
deque_
 = 
	`MP_OBJ_TO_PTR
(
deque
);

302 
size_t
 
i_g�
 = 
deque_
->i_get;

303 
	`as��
((
mp_obj_deque_�_t
�<�(
mp_obj_��_buf_t
));

304 
mp_obj_deque_�_t
 *
o
 = (mp_obj_deque_�_�*)
��_buf
;

305 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

306 
o
->
���xt
 = 
deque_�_���xt
;

307 
o
->
deque
 = deque;

308 
o
->
cur
 = 
i_g�
;

309  
	`MP_OBJ_FROM_PTR
(
o
);

310 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objdict.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/ru�ime.h
"

32 
	~"py/bu�t�.h
"

33 
	~"py/objty�.h
"

34 
	~"py/obj�r.h
"

36 
bo�
 
	$mp_obj_is_di�_�_�d�eddi�
(
mp_obj_t
 
o
) {

37  
	`mp_obj_is_obj
(
o
�&& 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(o))->
ty�
, 
make_�w
�=�
mp_obj_di�_make_�w
;

38 
	}
}

40 cڡ 
mp_obj_di�_t
 
	gmp_cڡ_em�y_di�_obj
 = {

41 .
ba�
 = { .
ty�
 = &
mp_ty�_di�
 },

42 .
	gm�
 = {

43 .
�l_keys_�e_q�rs
 = 0,

44 .
	gis_fixed
 = 1,

45 .
	gis_�d�ed
 = 1,

46 .
	gu�d
 = 0,

47 .
	g�loc
 = 0,

48 .
	g�b�
 = 
NULL
,

52 
mp_obj_t
 
di�_upd�e
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, 
mp_m�_t
 *
kw�gs
);

57 
mp_m�_�em_t
 *
	$di�_��_�xt
(
mp_obj_di�_t
 *
di�
, 
size_t
 *
cur
) {

58 
size_t
 
max
 = 
di�
->
m�
.
�loc
;

59 
mp_m�_t
 *
m�
 = &
di�
->map;

61 
size_t
 
i
 = *
cur
;

62 ; 
i
 < 
max
; i++) {

63 i�(
	`mp_m�_��_is_f��d
(
m�
, 
i
)) {

64 *
cur
 = 
i
 + 1;

65  &(
m�
->
�b�
[
i
]);

69 
	`as��
(
m�
->
u�d
 =�0 || 
i
 =�
max
);

70  
NULL
;

71 
	}
}

73 
	$di�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

74 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

75 
bo�
 
f��
 = 
�ue
;

76 cڡ *
�em_���t�
 = ", ";

77 cڡ *
key_���t�
 = ": ";

78 i�(!(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
)) {

79 
k�d
 = 
PRINT_REPR
;

81 #i�
MICROPY_PY_JSON_SEPARATORS


82 
�em_���t�
 = 
	`MP_PRINT_GET_EXT
(
��t
)->item_separator;

83 
key_���t�
 = 
	`MP_PRINT_GET_EXT
(
��t
)->key_separator;

86 i�(
MICROPY_PY_COLLECTIONS_ORDEREDDICT
 && 
�lf
->
ba�
.
ty�
 !�&
mp_ty�_di�
 && 
k�d
 !�
PRINT_JSON
) {

87 
	`mp_��tf
(
��t
, "%q(", 
�lf
->
ba�
.
ty�
->
�me
);

89 
	`mp_��t_�r
(
��t
, "{");

90 
size_t
 
cur
 = 0;

91 
mp_m�_�em_t
 *
�xt
 = 
NULL
;

92 (
�xt
 = 
	`di�_��_�xt
(
�lf
, &
cur
)�!�
NULL
) {

93 i�(!
f��
) {

94 
	`mp_��t_�r
(
��t
, 
�em_���t�
);

96 
f��
 = 
�l�
;

97 
bo�
 
add_qu�e
 = 
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
 && !
	`mp_obj_is_�r_�_by�s
(
�xt
->
key
);

98 i�(
add_qu�e
) {

99 
	`mp_��t_�r
(
��t
, "\"");

101 
	`mp_obj_��t_h��r
(
��t
, 
�xt
->
key
, 
k�d
);

102 i�(
add_qu�e
) {

103 
	`mp_��t_�r
(
��t
, "\"");

105 
	`mp_��t_�r
(
��t
, 
key_���t�
);

106 
	`mp_obj_��t_h��r
(
��t
, 
�xt
->
v�ue
, 
k�d
);

108 
	`mp_��t_�r
(
��t
, "}");

109 i�(
MICROPY_PY_COLLECTIONS_ORDEREDDICT
 && 
�lf
->
ba�
.
ty�
 !�&
mp_ty�_di�
 && 
k�d
 !�
PRINT_JSON
) {

110 
	`mp_��t_�r
(
��t
, ")");

112 
	}
}

114 
mp_obj_t
 
	$mp_obj_di�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

115 
mp_obj_t
 
di�_out
 = 
	`mp_obj_�w_di�
(0);

116 
mp_obj_di�_t
 *
di�
 = 
	`MP_OBJ_TO_PTR
(
di�_out
);

117 
di�
->
ba�
.
ty�
 =�ype;

118 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


119 i�(
ty�
 =�&
mp_ty�_�d�eddi�
) {

120 
di�
->
m�
.
is_�d�ed
 = 1;

123 i�(
n_�gs
 > 0 || 
n_kw
 > 0) {

124 
mp_obj_t
 
�gs2
[2] = {
di�_out
, 
�gs
[0]};

125 
mp_m�_t
 
kw�gs
;

126 
	`mp_m�_��_fixed_�b�
(&
kw�gs
, 
n_kw
, 
�gs
 + 
n_�gs
);

127 
	`di�_upd�e
(
n_�gs
 + 1, 
�gs2
, &
kw�gs
);

129  
di�_out
;

130 
	}
}

132 
mp_obj_t
 
	$di�_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

133 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

134 
�
) {

135 
MP_UNARY_OP_BOOL
:

136  
	`mp_obj_�w_bo�
(
�lf
->
m�
.
u�d
 != 0);

137 
MP_UNARY_OP_LEN
:

138  
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
m�
.
u�d
);

139 #i�
MICROPY_PY_SYS_GETSIZEOF


140 
MP_UNARY_OP_SIZEOF
: {

141 
size_t
 
sz
 = (*
�lf
�+ (*�lf->
m�
.
�b�
�* s�f->m�.
�loc
;

142  
	`MP_OBJ_NEW_SMALL_INT
(
sz
);

146  
MP_OBJ_NULL
;

148 
	}
}

150 
mp_obj_t
 
	$di�_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

151 
mp_obj_di�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

152 
�
) {

153 
MP_BINARY_OP_CONTAINS
: {

154 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
o
->
m�
, 
rhs_�
, 
MP_MAP_LOOKUP
);

155  
	`mp_obj_�w_bo�
(
�em
 !�
NULL
);

157 
MP_BINARY_OP_EQUAL
: {

158 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


159 i�(
	`MP_UNLIKELY
(
	`mp_obj_is_ty�
(
lhs_�
, &
mp_ty�_�d�eddi�
�&& mp_obj_is_ty�(
rhs_�
, &mp_type_ordereddict))) {

161 
mp_obj_di�_t
 *
rhs
 = 
	`MP_OBJ_TO_PTR
(
rhs_�
);

162 
size_t
 
c1
 = 0, 
c2
 = 0;

163 
mp_m�_�em_t
 *
e1
 = 
	`di�_��_�xt
(
o
, &
c1
), *
e2
 = di�_��_�xt(
rhs
, &
c2
);

164 ; 
e1
 !�
NULL
 && 
e2
 !�NULL;�1 = 
	`di�_��_�xt
(
o
, &
c1
),�2 = di�_��_�xt(
rhs
, &
c2
)) {

165 i�(!
	`mp_obj_equ�
(
e1
->
key
, 
e2
->key�|| !mp_obj_equ��1->
v�ue
,�2->value)) {

166  
mp_cڡ_�l�
;

169  
e1
 =�
NULL
 && 
e2
 =�NULL ? 
mp_cڡ_�ue
 : 
mp_cڡ_�l�
;

173 i�(
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_di�
)) {

174 
mp_obj_di�_t
 *
rhs
 = 
	`MP_OBJ_TO_PTR
(
rhs_�
);

175 i�(
o
->
m�
.
u�d
 !�
rhs
->map.used) {

176  
mp_cڡ_�l�
;

179 
size_t
 
cur
 = 0;

180 
mp_m�_�em_t
 *
�xt
 = 
NULL
;

181 (
�xt
 = 
	`di�_��_�xt
(
o
, &
cur
)�!�
NULL
) {

182 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
rhs
->
m�
, 
�xt
->
key
, 
MP_MAP_LOOKUP
);

183 i�(
�em
 =�
NULL
 || !
	`mp_obj_equ�
(
�xt
->
v�ue
,�lem->value)) {

184  
mp_cڡ_�l�
;

187  
mp_cڡ_�ue
;

190  
mp_cڡ_�l�
;

193 #i�
MICROPY_CPYTHON_COMPAT


194 
MP_BINARY_OP_INPLACE_OR
:

195 
MP_BINARY_OP_OR
: {

196 i�(
�
 =�
MP_BINARY_OP_OR
) {

197 
lhs_�
 = 
	`mp_obj_di�_c�y
(lhs_in);

199 
mp_obj_t
 
di�s
[2] = {
lhs_�
, 
rhs_�
};

200 
	`di�_upd�e
(2, 
di�s
, (
mp_m�_t
 *)&
mp_cڡ_em�y_m�
);

201  
lhs_�
;

206  
MP_OBJ_NULL
;

208 
	}
}

211 
mp_obj_t
 
	$mp_obj_di�_g�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
) {

212 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

213 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
m�
, 
�dex
, 
MP_MAP_LOOKUP
);

214 i�(
�em
 =�
NULL
) {

215 
	`mp_�i�_ty�_�g
(&
mp_ty�_KeyE��
, 
�dex
);

217  
�em
->
v�ue
;

219 
	}
}

221 
mp_obj_t
 
	$di�_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

222 i�(
v�ue
 =�
MP_OBJ_NULL
) {

224 
	`mp_obj_di�_d��e
(
�lf_�
, 
�dex
);

225  
mp_cڡ_n�e
;

226 } i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

228 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

229 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
m�
, 
�dex
, 
MP_MAP_LOOKUP
);

230 i�(
�em
 =�
NULL
) {

231 
	`mp_�i�_ty�_�g
(&
mp_ty�_KeyE��
, 
�dex
);

233  
�em
->
v�ue
;

237 
	`mp_obj_di�_��e
(
�lf_�
, 
�dex
, 
v�ue
);

238  
mp_cڡ_n�e
;

240 
	}
}

245 
	$mp_�su�_n�_fixed
(cڡ 
mp_obj_di�_t
 *
di�
) {

246 i�(
di�
->
m�
.
is_fixed
) {

247 
	`mp_�i�_Ty�E��
(
NULL
);

249 
	}
}

251 
mp_obj_t
 
	$di�_��r
(
mp_obj_t
 
�lf_�
) {

252 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

253 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

254 
	`mp_�su�_n�_fixed
(
�lf
);

256 
	`mp_m�_��r
(&
�lf
->
m�
);

258  
mp_cڡ_n�e
;

259 
	}
}

260 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_��r_obj
, 
di�_��r
);

262 
mp_obj_t
 
	$mp_obj_di�_c�y
(
mp_obj_t
 
�lf_�
) {

263 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

264 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

265 
mp_obj_t
 
�h�_out
 = 
	`mp_obj_�w_di�
(
�lf
->
m�
.
�loc
);

266 
mp_obj_di�_t
 *
�h�
 = 
	`MP_OBJ_TO_PTR
(
�h�_out
);

267 
�h�
->
ba�
.
ty�
 = 
�lf
->base.type;

268 
�h�
->
m�
.
u�d
 = 
�lf
->map.used;

269 
�h�
->
m�
.
�l_keys_�e_q�rs
 = 
�lf
->map.all_keys_are_qstrs;

270 
�h�
->
m�
.
is_fixed
 = 0;

271 
�h�
->
m�
.
is_�d�ed
 = 
�lf
->map.is_ordered;

272 
	`mem�y
(
�h�
->
m�
.
�b�
, 
�lf
->m�.�b�, s�f->m�.
�loc
 * (
mp_m�_�em_t
));

273  
�h�_out
;

274 
	}
}

275 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_c�y_obj
, 
mp_obj_di�_c�y
);

277 #i�
MICROPY_PY_BUILTINS_DICT_FROMKEYS


279 
mp_obj_t
 
	$di�_�omkeys
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

280 
mp_obj_t
 
��
 = 
	`mp_g���
(
�gs
[1], 
NULL
);

281 
mp_obj_t
 
v�ue
 = 
mp_cڡ_n�e
;

282 
mp_obj_t
 
�xt
 = 
MP_OBJ_NULL
;

284 i�(
n_�gs
 > 2) {

285 
v�ue
 = 
�gs
[2];

289 
mp_obj_t
 
�lf_out
;

290 
mp_obj_t
 
�n
 = 
	`mp_obj_�n_maybe
(
�gs
[1]);

291 i�(
�n
 =�
MP_OBJ_NULL
) {

293 
�lf_out
 = 
	`mp_obj_�w_di�
(0);

295 
�lf_out
 = 
	`mp_obj_�w_di�
(
	`MP_OBJ_SMALL_INT_VALUE
(
�n
));

298 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_out
);

299 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

300 
	`mp_m�_lookup
(&
�lf
->
m�
, 
�xt
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = value;

303  
�lf_out
;

304 
	}
}

305 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
di�_�omkeys_fun_obj
, 2, 3, 
di�_�omkeys
);

306 
MP_DEFINE_CONST_CLASSMETHOD_OBJ
(
di�_�omkeys_obj
, 
MP_ROM_PTR
(&
di�_�omkeys_fun_obj
));

309 
mp_obj_t
 
	$di�_g�_h��r
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_lookup_k�d_t
 
lookup_k�d
) {

310 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�gs
[0]));

311 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

312 i�(
lookup_k�d
 !�
MP_MAP_LOOKUP
) {

313 
	`mp_�su�_n�_fixed
(
�lf
);

315 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
m�
, 
�gs
[1], 
lookup_k�d
);

316 
mp_obj_t
 
v�ue
;

317 i�(
�em
 =�
NULL
 ||��m->
v�ue
 =�
MP_OBJ_NULL
) {

318 i�(
n_�gs
 == 2) {

319 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_REMOVE_IF_FOUND
) {

320 
	`mp_�i�_ty�_�g
(&
mp_ty�_KeyE��
, 
�gs
[1]);

322 
v�ue
 = 
mp_cڡ_n�e
;

325 
v�ue
 = 
�gs
[2];

327 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
) {

328 
�em
->
v�ue
 = value;

331 
v�ue
 = 
�em
->value;

332 i�(
lookup_k�d
 =�
MP_MAP_LOOKUP_REMOVE_IF_FOUND
) {

333 
�em
->
v�ue
 = 
MP_OBJ_NULL
;

336  
v�ue
;

337 
	}
}

339 
mp_obj_t
 
	$di�_g�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

340  
	`di�_g�_h��r
(
n_�gs
, 
�gs
, 
MP_MAP_LOOKUP
);

341 
	}
}

342 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
di�_g�_obj
, 2, 3, 
di�_g�
);

344 
mp_obj_t
 
	$di�_p�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

345  
	`di�_g�_h��r
(
n_�gs
, 
�gs
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

346 
	}
}

347 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
di�_p�_obj
, 2, 3, 
di�_p�
);

349 
mp_obj_t
 
	$di�_�tde�u�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

350  
	`di�_g�_h��r
(
n_�gs
, 
�gs
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

351 
	}
}

352 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
di�_�tde�u�_obj
, 2, 3, 
di�_�tde�u�
);

354 
mp_obj_t
 
	$di�_pݙem
(
mp_obj_t
 
�lf_�
) {

355 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

356 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

357 
	`mp_�su�_n�_fixed
(
�lf
);

358 i�(
�lf
->
m�
.
u�d
 == 0) {

359 
	`mp_�i�_msg
(&
mp_ty�_KeyE��
, 
	`MP_ERROR_TEXT
("popitem(): dictionary is�mpty"));

361 
size_t
 
cur
 = 0;

362 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


363 i�(
�lf
->
m�
.
is_�d�ed
) {

364 
cur
 = 
�lf
->
m�
.
u�d
 - 1;

367 
mp_m�_�em_t
 *
�xt
 = 
	`di�_��_�xt
(
�lf
, &
cur
);

368 
	`as��
(
�xt
);

369 
�lf
->
m�
.
u�d
--;

370 
mp_obj_t
 
�ems
[] = {
�xt
->
key
,�ext->
v�ue
};

371 
�xt
->
key
 = 
MP_OBJ_SENTINEL
;

372 
�xt
->
v�ue
 = 
MP_OBJ_NULL
;

373 
mp_obj_t
 
tu�e
 = 
	`mp_obj_�w_tu�e
(2, 
�ems
);

375  
tu�e
;

376 
	}
}

377 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_pݙem_obj
, 
di�_pݙem
);

379 
mp_obj_t
 
	$di�_upd�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

380 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�gs
[0]));

381 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

382 
	`mp_�su�_n�_fixed
(
�lf
);

384 
	`mp_�g_check_num
(
n_�gs
, 
kw�gs
->
u�d
, 1, 2, 
�ue
);

386 i�(
n_�gs
 == 2) {

389 i�(
	`mp_obj_is_di�_�_�d�eddi�
(
�gs
[1])) {

391 i�(
�gs
[1] !=�rgs[0]) {

392 
size_t
 
cur
 = 0;

393 
mp_m�_�em_t
 *
�em
 = 
NULL
;

394 (
�em
 = 
	`di�_��_�xt
((
mp_obj_di�_t
 *)
	`MP_OBJ_TO_PTR
(
�gs
[1]), &
cur
)�!�
NULL
) {

395 
	`mp_m�_lookup
(&
�lf
->
m�
, 
�em
->
key
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 =�lem->value;

400 
mp_obj_t
 
��
 = 
	`mp_g���
(
�gs
[1], 
NULL
);

401 
mp_obj_t
 
�xt
 = 
MP_OBJ_NULL
;

402 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

403 
mp_obj_t
 
��r��
 = 
	`mp_g���
(
�xt
, 
NULL
);

404 
mp_obj_t
 
key
 = 
	`mp_���xt
(
��r��
);

405 
mp_obj_t
 
v�ue
 = 
	`mp_���xt
(
��r��
);

406 
mp_obj_t
 
��
 = 
	`mp_���xt
(
��r��
);

407 i�(
key
 =�
MP_OBJ_STOP_ITERATION


408 || 
v�ue
 =�
MP_OBJ_STOP_ITERATION


409 || 
��
 !�
MP_OBJ_STOP_ITERATION
) {

410 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("dict update sequence has wrong�ength"));

412 
	`mp_m�_lookup
(&
�lf
->
m�
, 
key
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = value;

419 
size_t
 
i
 = 0; i < 
kw�gs
->
�loc
; i++) {

420 i�(
	`mp_m�_��_is_f��d
(
kw�gs
, 
i
)) {

421 
	`mp_m�_lookup
(&
�lf
->
m�
, 
kw�gs
->
�b�
[
i
].
key
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = kwargs->table[i].value;

425  
mp_cڡ_n�e
;

426 
	}
}

427 
MP_DEFINE_CONST_FUN_OBJ_KW
(
di�_upd�e_obj
, 1, 
di�_upd�e
);

433 cڡ 
mp_obj_ty�_t
 
	gmp_ty�_di�_v�w
;

434 cڡ 
mp_obj_ty�_t
 
	gmp_ty�_di�_v�w_�
;

436 
	e_mp_di�_v�w_k�d_t
 {

437 
	mMP_DICT_VIEW_ITEMS
,

438 
	mMP_DICT_VIEW_KEYS
,

439 
	mMP_DICT_VIEW_VALUES
,

440 } 
	tmp_di�_v�w_k�d_t
;

442 cڡ *cڡ 
	gmp_di�_v�w_�mes
[] = {"dict_items", "dict_keys", "dict_values"};

444 
	s_mp_obj_di�_v�w_�_t
 {

445 
mp_obj_ba�_t
 
	mba�
;

446 
mp_di�_v�w_k�d_t
 
	mk�d
;

447 
mp_obj_t
 
	mdi�
;

448 
size_t
 
	mcur
;

449 } 
	tmp_obj_di�_v�w_�_t
;

451 
	s_mp_obj_di�_v�w_t
 {

452 
mp_obj_ba�_t
 
	mba�
;

453 
mp_obj_t
 
	mdi�
;

454 
mp_di�_v�w_k�d_t
 
	mk�d
;

455 } 
	tmp_obj_di�_v�w_t
;

457 
mp_obj_t
 
	$di�_v�w_�_���xt
(
mp_obj_t
 
�lf_�
) {

458 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_di�_v�w_�
));

459 
mp_obj_di�_v�w_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

460 
mp_m�_�em_t
 *
�xt
 = 
	`di�_��_�xt
(
	`MP_OBJ_TO_PTR
(
�lf
->
di�
), &�lf->
cur
);

462 i�(
�xt
 =�
NULL
) {

463  
MP_OBJ_STOP_ITERATION
;

465 
�lf
->
k�d
) {

466 
MP_DICT_VIEW_ITEMS
:

468 
mp_obj_t
 
�ems
[] = {
�xt
->
key
,�ext->
v�ue
};

469  
	`mp_obj_�w_tu�e
(2, 
�ems
);

471 
MP_DICT_VIEW_KEYS
:

472  
�xt
->
key
;

473 
MP_DICT_VIEW_VALUES
:

474  
�xt
->
v�ue
;

477 
	}
}

479 
MP_DEFINE_CONST_OBJ_TYPE
(

480 
mp_ty�_di�_v�w_�
,

481 
MP_QSTR_����
,

482 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

483 
��
, 
di�_v�w_�_���xt


486 
mp_obj_t
 
	$di�_v�w_g���
(
mp_obj_t
 
v�w_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

487 
	`as��
((
mp_obj_di�_v�w_�_t
�<�(
mp_obj_��_buf_t
));

488 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
v�w_�
, &
mp_ty�_di�_v�w
));

489 
mp_obj_di�_v�w_t
 *
v�w
 = 
	`MP_OBJ_TO_PTR
(
v�w_�
);

490 
mp_obj_di�_v�w_�_t
 *
o
 = (mp_obj_di�_v�w_�_�*)
��_buf
;

491 
o
->
ba�
.
ty�
 = &
mp_ty�_di�_v�w_�
;

492 
o
->
k�d
 = 
v�w
->kind;

493 
o
->
di�
 = 
v�w
->dict;

494 
o
->
cur
 = 0;

495  
	`MP_OBJ_FROM_PTR
(
o
);

496 
	}
}

498 
	$di�_v�w_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

499 ()
k�d
;

500 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_di�_v�w
));

501 
mp_obj_di�_v�w_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

502 
bo�
 
f��
 = 
�ue
;

503 
	`mp_��t_�r
(
��t
, 
mp_di�_v�w_�mes
[
�lf
->
k�d
]);

504 
	`mp_��t_�r
(
��t
, "([");

505 
mp_obj_��_buf_t
 
��_buf
;

506 
mp_obj_t
 
�lf_��
 = 
	`di�_v�w_g���
(
�lf_�
, &
��_buf
);

507 
mp_obj_t
 
�xt
 = 
MP_OBJ_NULL
;

508 (
�xt
 = 
	`di�_v�w_�_���xt
(
�lf_��
)�!�
MP_OBJ_STOP_ITERATION
) {

509 i�(!
f��
) {

510 
	`mp_��t_�r
(
��t
, ", ");

512 
f��
 = 
�l�
;

513 
	`mp_obj_��t_h��r
(
��t
, 
�xt
, 
PRINT_REPR
);

515 
	`mp_��t_�r
(
��t
, "])");

516 
	}
}

518 
mp_obj_t
 
	$di�_v�w_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

519 
mp_obj_di�_v�w_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

521 i�(
�
 =�
MP_UNARY_OP_HASH
 && 
o
->
k�d
 =�
MP_DICT_VIEW_VALUES
) {

522  
	`MP_OBJ_NEW_SMALL_INT
((
mp_u�t_t
)
o_�
);

524  
MP_OBJ_NULL
;

525 
	}
}

527 
mp_obj_t
 
	$di�_v�w_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

529 
mp_obj_di�_v�w_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

530 i�(
o
->
k�d
 !�
MP_DICT_VIEW_KEYS
) {

531  
MP_OBJ_NULL
;

533 i�(
�
 !�
MP_BINARY_OP_CONTAINS
) {

534  
MP_OBJ_NULL
;

536  
	`di�_b��y_�
(
�
, 
o
->
di�
, 
rhs_�
);

537 
	}
}

539 
MP_DEFINE_CONST_OBJ_TYPE
(

540 
mp_ty�_di�_v�w
,

541 
MP_QSTR_di�_v�w
,

542 
MP_TYPE_FLAG_ITER_IS_GETITER
,

543 
��t
, 
di�_v�w_��t
,

544 
u�ry_�
, 
di�_v�w_u�ry_�
,

545 
b��y_�
, 
di�_v�w_b��y_�
,

546 
��
, 
di�_v�w_g���


549 
mp_obj_t
 
	$mp_obj_�w_di�_v�w
(
mp_obj_t
 
di�
, 
mp_di�_v�w_k�d_t
 
k�d
) {

550 
mp_obj_di�_v�w_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_di�_v�w_t, &
mp_ty�_di�_v�w
);

551 
o
->
di�
 = dict;

552 
o
->
k�d
 = kind;

553  
	`MP_OBJ_FROM_PTR
(
o
);

554 
	}
}

556 
mp_obj_t
 
	$di�_v�w
(
mp_obj_t
 
�lf_�
, 
mp_di�_v�w_k�d_t
 
k�d
) {

557 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

558  
	`mp_obj_�w_di�_v�w
(
�lf_�
, 
k�d
);

559 
	}
}

561 
mp_obj_t
 
	$di�_�ems
(
mp_obj_t
 
�lf_�
) {

562  
	`di�_v�w
(
�lf_�
, 
MP_DICT_VIEW_ITEMS
);

563 
	}
}

564 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_�ems_obj
, 
di�_�ems
);

566 
mp_obj_t
 
	$di�_keys
(
mp_obj_t
 
�lf_�
) {

567  
	`di�_v�w
(
�lf_�
, 
MP_DICT_VIEW_KEYS
);

568 
	}
}

569 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_keys_obj
, 
di�_keys
);

571 
mp_obj_t
 
	$di�_v�ues
(
mp_obj_t
 
�lf_�
) {

572  
	`di�_v�w
(
�lf_�
, 
MP_DICT_VIEW_VALUES
);

573 
	}
}

574 
MP_DEFINE_CONST_FUN_OBJ_1
(
di�_v�ues_obj
, 
di�_v�ues
);

579 
mp_obj_t
 
	$di�_g���
(
mp_obj_t
 
�lf_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

580 
	`as��
((
mp_obj_di�_v�w_�_t
�<�(
mp_obj_��_buf_t
));

581 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

582 
mp_obj_di�_v�w_�_t
 *
o
 = (mp_obj_di�_v�w_�_�*)
��_buf
;

583 
o
->
ba�
.
ty�
 = &
mp_ty�_di�_v�w_�
;

584 
o
->
k�d
 = 
MP_DICT_VIEW_KEYS
;

585 
o
->
di�
 = 
�lf_�
;

586 
o
->
cur
 = 0;

587  
	`MP_OBJ_FROM_PTR
(
o
);

588 
	}
}

593 cڡ 
mp_rom_m�_�em_t
 
	gdi�_lo�ls_di�_�b�
[] = {

594 { 
MP_ROM_QSTR
(
MP_QSTR_��r
), 
MP_ROM_PTR
(&
di�_��r_obj
) },

595 { 
MP_ROM_QSTR
(
MP_QSTR_c�y
), 
MP_ROM_PTR
(&
di�_c�y_obj
) },

596 #i�
MICROPY_PY_BUILTINS_DICT_FROMKEYS


597 { 
MP_ROM_QSTR
(
MP_QSTR_�omkeys
), 
MP_ROM_PTR
(&
di�_�omkeys_obj
) },

599 { 
MP_ROM_QSTR
(
MP_QSTR_g�
), 
MP_ROM_PTR
(&
di�_g�_obj
) },

600 { 
MP_ROM_QSTR
(
MP_QSTR_�ems
), 
MP_ROM_PTR
(&
di�_�ems_obj
) },

601 { 
MP_ROM_QSTR
(
MP_QSTR_keys
), 
MP_ROM_PTR
(&
di�_keys_obj
) },

602 { 
MP_ROM_QSTR
(
MP_QSTR_p�
), 
MP_ROM_PTR
(&
di�_p�_obj
) },

603 { 
MP_ROM_QSTR
(
MP_QSTR_pݙem
), 
MP_ROM_PTR
(&
di�_pݙem_obj
) },

604 { 
MP_ROM_QSTR
(
MP_QSTR_�tde�u�
), 
MP_ROM_PTR
(&
di�_�tde�u�_obj
) },

605 { 
MP_ROM_QSTR
(
MP_QSTR_upd�e
), 
MP_ROM_PTR
(&
di�_upd�e_obj
) },

606 { 
MP_ROM_QSTR
(
MP_QSTR_v�ues
), 
MP_ROM_PTR
(&
di�_v�ues_obj
) },

607 { 
MP_ROM_QSTR
(
MP_QSTR___g��em__
), 
MP_ROM_PTR
(&
mp_�_g��em_obj
) },

608 { 
MP_ROM_QSTR
(
MP_QSTR___�t�em__
), 
MP_ROM_PTR
(&
mp_�_�t�em_obj
) },

609 { 
MP_ROM_QSTR
(
MP_QSTR___d��em__
), 
MP_ROM_PTR
(&
mp_�_d��em_obj
) },

612 
MP_DEFINE_CONST_DICT
(
di�_lo�ls_di�
, 
di�_lo�ls_di�_�b�
);

614 
MP_DEFINE_CONST_OBJ_TYPE
(

615 
mp_ty�_di�
,

616 
MP_QSTR_di�
,

617 
MP_TYPE_FLAG_ITER_IS_GETITER
,

618 
make_�w
, 
mp_obj_di�_make_�w
,

619 
��t
, 
di�_��t
,

620 
u�ry_�
, 
di�_u�ry_�
,

621 
b��y_�
, 
di�_b��y_�
,

622 
subs�
, 
di�_subs�
,

623 
��
, 
di�_g���
,

624 
lo�ls_di�
, &
di�_lo�ls_di�


627 #i�
MICROPY_PY_COLLECTIONS_ORDEREDDICT


628 
MP_DEFINE_CONST_OBJ_TYPE
(

629 
mp_ty�_�d�eddi�
,

630 
MP_QSTR_Ord�edDi�
,

631 
MP_TYPE_FLAG_ITER_IS_GETITER
,

632 
make_�w
, 
mp_obj_di�_make_�w
,

633 
��t
, 
di�_��t
,

634 
u�ry_�
, 
di�_u�ry_�
,

635 
b��y_�
, 
di�_b��y_�
,

636 
subs�
, 
di�_subs�
,

637 
��
, 
di�_g���
,

638 
���
, &
mp_ty�_di�
,

639 
lo�ls_di�
, &
di�_lo�ls_di�


643 
	$mp_obj_di�_��
(
mp_obj_di�_t
 *
di�
, 
size_t
 
n_�gs
) {

644 
di�
->
ba�
.
ty�
 = &
mp_ty�_di�
;

645 
	`mp_m�_��
(&
di�
->
m�
, 
n_�gs
);

646 
	}
}

648 
mp_obj_t
 
	$mp_obj_�w_di�
(
size_t
 
n_�gs
) {

649 
mp_obj_di�_t
 *
o
 = 
	`m_�w_obj
(mp_obj_dict_t);

650 
	`mp_obj_di�_��
(
o
, 
n_�gs
);

651  
	`MP_OBJ_FROM_PTR
(
o
);

652 
	}
}

654 
size_t
 
	$mp_obj_di�_�n
(
mp_obj_t
 
�lf_�
) {

655 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

656  
�lf
->
m�
.
u�d
;

657 
	}
}

659 
mp_obj_t
 
	$mp_obj_di�_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
key
, mp_obj_�
v�ue
) {

660 
	`mp_check_�lf
(
	`mp_obj_is_di�_�_�d�eddi�
(
�lf_�
));

661 
mp_obj_di�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

662 
	`mp_�su�_n�_fixed
(
�lf
);

663 
	`mp_m�_lookup
(&
�lf
->
m�
, 
key
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = value;

664  
�lf_�
;

665 
	}
}

667 
mp_obj_t
 
	$mp_obj_di�_d��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
key
) {

668 
mp_obj_t
 
�gs
[2] = {
�lf_�
, 
key
};

669 
	`di�_g�_h��r
(2, 
�gs
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

670  
�lf_�
;

671 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objenumerate.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

32 #i�
MICROPY_PY_BUILTINS_ENUMERATE


34 
	s_mp_obj_�um��e_t
 {

35 
mp_obj_ba�_t
 
	mba�
;

36 
mp_obj_t
 
	m��
;

37 
mp_�t_t
 
	mcur
;

38 } 
	tmp_obj_�um��e_t
;

40 
mp_obj_t
 
�um��e_���xt
(mp_obj_�
�lf_�
);

42 
mp_obj_t
 
	$�um��e_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

43 #i�
MICROPY_CPYTHON_COMPAT


44 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

45 { 
MP_QSTR_��ab�
, 
MP_ARG_REQUIRED
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
} },

46 { 
MP_QSTR_��t
, 
MP_ARG_INT
, {.
u_�t
 = 0} },

51 
mp_�g_v�_t
 
��ab�
, 
��t
;

52 } 
�g_v�s
;

53 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�gs
,

54 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, (
mp_�g_v�_t
 *)&
�g_v�s
);

57 
mp_obj_�um��e_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�um��e_t, 
ty�
);

58 
o
->
��
 = 
	`mp_g���
(
�g_v�s
.
��ab�
.
u_obj
, 
NULL
);

59 
o
->
cur
 = 
�g_v�s
.
��t
.
u_�t
;

61 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 2, 
�l�
);

62 
mp_obj_�um��e_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�um��e_t, 
ty�
);

63 
o
->
��
 = 
	`mp_g���
(
�gs
[0], 
NULL
);

64 
o
->
cur
 = 
n_�gs
 > 1 ? 
	`mp_obj_g�_�t
(
�gs
[1]) : 0;

67  
	`MP_OBJ_FROM_PTR
(
o
);

68 
	}
}

70 
MP_DEFINE_CONST_OBJ_TYPE
(

71 
mp_ty�_�um��e
,

72 
MP_QSTR_�um��e
,

73 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

74 
make_�w
, 
�um��e_make_�w
,

75 
��
, 
�um��e_���xt


78 
mp_obj_t
 
	$�um��e_���xt
(
mp_obj_t
 
�lf_�
) {

79 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�um��e
));

80 
mp_obj_�um��e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

81 
mp_obj_t
 
�xt
 = 
	`mp_���xt
(
�lf
->
��
);

82 i�(
�xt
 =�
MP_OBJ_STOP_ITERATION
) {

83  
MP_OBJ_STOP_ITERATION
;

85 
mp_obj_t
 
�ems
[] = {
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
cur
++), 
�xt
};

86  
	`mp_obj_�w_tu�e
(2, 
�ems
);

88 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objexcept.c

28 
	~<�r�g.h
>

29 
	~<�d�g.h
>

30 
	~<as��.h
>

31 
	~<�dio.h
>

33 
	~"py/objli�.h
"

34 
	~"py/obj�r.h
"

35 
	~"py/objtu�e.h
"

36 
	~"py/objty�.h
"

37 
	~"py/ru�ime.h
"

38 
	~"py/gc.h
"

39 
	~"py/m��no.h
"

41 #i�
MICROPY_ROM_TEXT_COMPRESSION
 && !
def�ed
(
NO_QSTR
)

44 
	#MP_MATCH_COMPRESSED
(...)

45 
	#MP_COMPRESSED_DATA
(...)

46 
	~"g�hdr/com�es�d.d�a.h
"

	)

47 #unde�
MP_MATCH_COMPRESSED


48 #unde�
MP_COMPRESSED_DATA


52 
	#TRACEBACK_ENTRY_LEN
 (3)

	)

56 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


65 
	#EMG_BUF_TRACEBACK_OFFSET
 (0)

	)

66 
	#EMG_BUF_TRACEBACK_SIZE
 (2 * 
TRACEBACK_ENTRY_LEN
 * (
size_t
))

	)

67 
	#EMG_BUF_TUPLE_OFFSET
 (
EMG_BUF_TRACEBACK_OFFSET
 + 
EMG_BUF_TRACEBACK_SIZE
)

	)

68 
	#EMG_BUF_TUPLE_SIZE
(
n_�gs
�((
mp_obj_tu�e_t
�+�_�g�* (
mp_obj_t
))

	)

69 
	#EMG_BUF_STR_OFFSET
 (
EMG_BUF_TUPLE_OFFSET
 + 
	`EMG_BUF_TUPLE_SIZE
(1))

	)

70 
	#EMG_BUF_STR_BUF_OFFSET
 (
EMG_BUF_STR_OFFSET
 + (
mp_obj_�r_t
))

	)

72 #i�
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE
 > 0

73 
	#mp_em�g�cy_ex��i�_buf_size
 
MICROPY_EMERGENCY_EXCEPTION_BUF_SIZE


	)

75 
	$mp_��_em�g�cy_ex��i�_buf
() {

79 
	}
}

82 
	#mp_em�g�cy_ex��i�_buf_size
 
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf_size
)

	)

84 
	~"py/mph�.h
"

86 
	$mp_��_em�g�cy_ex��i�_buf
() {

87 
mp_em�g�cy_ex��i�_buf_size
 = 0;

88 
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
��
NULL
;

89 
	}
}

91 
mp_obj_t
 
	$mp_�loc_em�g�cy_ex��i�_buf
(
mp_obj_t
 
size_�
) {

92 
mp_�t_t
 
size
 = 
	`mp_obj_g�_�t
(
size_�
);

93 *
buf
 = 
NULL
;

94 i�(
size
 > 0) {

95 
buf
 = 
	`m_�w
(
by�
, 
size
);

98 
�d_size
 = 
mp_em�g�cy_ex��i�_buf_size
;

99 *
�d_buf
 = 
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
);

103 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

104 
mp_em�g�cy_ex��i�_buf_size
 = 
size
;

105 
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
��
buf
;

106 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

108 i�(
�d_buf
 !�
NULL
) {

109 
	`m_d�
(
by�
, 
�d_buf
, 
�d_size
);

111  
mp_cڡ_n�e
;

112 
	}
}

116 
bo�
 
	$mp_obj_is_�tive_ex��i�_����
(
mp_obj_t
 
�lf_�
) {

117  
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
	`mp_obj_g�_ty�
(
�lf_�
), 
make_�w
�=�
mp_obj_ex��i�_make_�w
;

118 
	}
}

120 
mp_obj_ex��i�_t
 *
	$g�_�tive_ex��i�
(
mp_obj_t
 
�lf_�
) {

121 
	`as��
(
	`mp_obj_is_ex��i�_����
(
�lf_�
));

122 i�(
	`mp_obj_is_�tive_ex��i�_����
(
�lf_�
)) {

123  
	`MP_OBJ_TO_PTR
(
�lf_�
);

125  
	`MP_OBJ_TO_PTR
(((
mp_obj_����_t
 *)MP_OBJ_TO_PTR(
�lf_�
))->
subobj
[0]);

127 
	}
}

129 
	$decom�ess_�r�_�xt_maybe
(
mp_obj_ex��i�_t
 *
o
) {

130 #i�
MICROPY_ROM_TEXT_COMPRESSION


131 i�(
o
->
�gs
->
�n
 =�1 && 
	`mp_obj_is_exa�_ty�
(o->�gs->
�ems
[0], &
mp_ty�_�r
)) {

132 
mp_obj_�r_t
 *
o_�r
 = 
	`MP_OBJ_TO_PTR
(
o
->
�gs
->
�ems
[0]);

133 i�(
	`MP_IS_COMPRESSED_ROM_STRING
(
o_�r
->
d�a
)) {

134 
by�
 *
buf
 = 
	`m_�w_maybe
(by�, 
MP_MAX_UNCOMPRESSED_TEXT_LEN
 + 1);

135 i�(!
buf
) {

136 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


138 
buf
 = (
by�
 *)((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
EMG_BUF_STR_BUF_OFFSET
);

139 
size_t
 
ava�
 = (
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
mp_em�g�cy_ex��i�_buf_size
 - 
buf
;

140 i�(
ava�
 < 
MP_MAX_UNCOMPRESSED_TEXT_LEN
 + 1) {

142 
o
->
�gs
 = (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
;

146 
o
->
�gs
 = (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
;

150 
	`mp_decom�ess_rom_�r�g
(
buf
, (
mp_rom_�r�_�xt_t
)
o_�r
->
d�a
);

151 
o_�r
->
d�a
 = 
buf
;

152 
o_�r
->
�n
 = 
	`���
((cڡ *)
buf
);

153 
o_�r
->
hash
 = 0;

156 i�(
o_�r
->
hash
 == 0) {

157 
o_�r
->
hash
 = 
	`q�r_compu�_hash
(o_�r->
d�a
, o_�r->
�n
);

161 
	}
}

163 
	$mp_obj_ex��i�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

164 
mp_obj_ex��i�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

165 
mp_��t_k�d_t
 
k
 = 
k�d
 & ~
PRINT_EXC_SUBCLASS
;

166 
bo�
 
is_sub�ass
 = 
k�d
 & 
PRINT_EXC_SUBCLASS
;

167 i�(!
is_sub�ass
 && (
k
 =�
PRINT_REPR
 || k =�
PRINT_EXC
)) {

168 
	`mp_��t_�r
(
��t
, 
	`q�r_�r
(
o
->
ba�
.
ty�
->
�me
));

171 i�(
k
 =�
PRINT_EXC
) {

172 
	`mp_��t_�r
(
��t
, ": ");

175 
	`decom�ess_�r�_�xt_maybe
(
o
);

177 i�(
k
 =�
PRINT_STR
 || k =�
PRINT_EXC
) {

178 i�(
o
->
�gs
 =�
NULL
 || o->�gs->
�n
 == 0) {

179 
	`mp_��t_�r
(
��t
, "");

183 #i�
MICROPY_PY_ERRNO


185 i�(
o
->
ba�
.
ty�
 =�&
mp_ty�_OSE��
 && o->
�gs
->
�n
 > 0 && o->�gs->��< 3 && 
	`mp_obj_is_sm�l_�t
(o->�gs->
�ems
[0])) {

186 
q�r
 
q�
 = 
	`mp_��o_to_�r
(
o
->
�gs
->
�ems
[0]);

187 i�(
q�
 !�
MP_QSTRnu�
) {

188 
	`mp_��tf
(
��t
, "[E�n�" 
INT_FMT
 "] %q", 
	`MP_OBJ_SMALL_INT_VALUE
(
o
->
�gs
->
�ems
[0]), 
q�
);

189 i�(
o
->
�gs
->
�n
 > 1) {

190 
	`mp_��t_�r
(
��t
, ": ");

191 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�gs
->
�ems
[1], 
PRINT_STR
);

198 i�(
o
->
�gs
->
�n
 == 1) {

199 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�gs
->
�ems
[0], 
PRINT_STR
);

204 
	`mp_obj_tu�e_��t
(
��t
, 
	`MP_OBJ_FROM_PTR
(
o
->
�gs
), 
k�d
);

205 
	}
}

207 
mp_obj_t
 
	$mp_obj_ex��i�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

208 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 
MP_OBJ_FUN_ARGS_MAX
, 
�l�
);

211 
mp_obj_ex��i�_t
 *
o_exc
 = 
	`m_�w_obj_maybe
(mp_obj_exception_t);

212 i�(
o_exc
 =�
NULL
) {

213 
o_exc
 = &
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_obj
);

217 
o_exc
->
ba�
.
ty�
 =�ype;

218 
o_exc
->
�a�back_d�a
 = 
NULL
;

220 
mp_obj_tu�e_t
 *
o_tu�e
;

221 i�(
n_�gs
 == 0) {

223 
o_tu�e
 = (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
;

226 
o_tu�e
 = 
	`m_�w_obj_v�_maybe
(
mp_obj_tu�e_t
, 
�ems
, 
mp_obj_t
, 
n_�gs
);

228 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


232 i�(
o_tu�e
 =�
NULL
 && 
mp_em�g�cy_ex��i�_buf_size
 >=

233 (
mp_�t_t
)(
EMG_BUF_TUPLE_OFFSET
 + 
	`EMG_BUF_TUPLE_SIZE
(
n_�gs
))) {

234 
o_tu�e
 = (
mp_obj_tu�e_t
 *)

235 ((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
EMG_BUF_TUPLE_OFFSET
);

239 i�(
o_tu�e
 =�
NULL
) {

241 
o_tu�e
 = (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
;

244 
o_tu�e
->
ba�
.
ty�
 = &
mp_ty�_tu�e
;

245 
o_tu�e
->
�n
 = 
n_�gs
;

246 
	`mem�y
(
o_tu�e
->
�ems
, 
�gs
, 
n_�gs
 * (
mp_obj_t
));

251 
o_exc
->
�gs
 = 
o_tu�e
;

253  
	`MP_OBJ_FROM_PTR
(
o_exc
);

254 
	}
}

257 
mp_obj_t
 
	$mp_obj_ex��i�_g�_v�ue
(
mp_obj_t
 
�lf_�
) {

258 
mp_obj_ex��i�_t
 *
�lf
 = 
	`g�_�tive_ex��i�
(
�lf_�
);

259 i�(
�lf
->
�gs
->
�n
 == 0) {

260  
mp_cڡ_n�e
;

262 
	`decom�ess_�r�_�xt_maybe
(
�lf
);

263  
�lf
->
�gs
->
�ems
[0];

265 
	}
}

267 
	$mp_obj_ex��i�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

268 
mp_obj_ex��i�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

269 i�(
de�
[0] !�
MP_OBJ_NULL
) {

271 i�(
��
 =�
MP_QSTR___�a�back__
 && 
de�
[1] =�
mp_cڡ_n�e
) {

278 
�lf
->
�a�back_�n
 = 0;

279 
de�
[0] = 
MP_OBJ_NULL
;

283 i�(
��
 =�
MP_QSTR_�gs
) {

284 
	`decom�ess_�r�_�xt_maybe
(
�lf
);

285 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
�lf
->
�gs
);

286 } i�(
��
 =�
MP_QSTR_v�ue
 ||���=�
MP_QSTR_��o
) {

289 
de�
[0] = 
	`mp_obj_ex��i�_g�_v�ue
(
�lf_�
);

291 
	}
}

293 
MP_DEFINE_CONST_OBJ_TYPE
(

294 
mp_ty�_Ba�Ex��i�
,

295 
MP_QSTR_Ba�Ex��i�
,

296 
MP_TYPE_FLAG_NONE
,

297 
make_�w
, 
mp_obj_ex��i�_make_�w
,

298 
��t
, 
mp_obj_ex��i�_��t
,

299 
��
, 
mp_obj_ex��i�_��


306 
	$MP_DEFINE_EXCEPTION
(
Sy�emEx�
, 
Ba�Ex��i�
)

307 
	$MP_DEFINE_EXCEPTION
(
Keyb�rdI��ru�
, 
Ba�Ex��i�
)

308 
	$MP_DEFINE_EXCEPTION
(
G����Ex�
, 
Ba�Ex��i�
)

309 
	$MP_DEFINE_EXCEPTION
(
Ex��i�
, 
Ba�Ex��i�
)

310 #i�
MICROPY_PY_ASYNC_AWAIT


311 
	$MP_DEFINE_EXCEPTION
(
St�AsyncI��ti�
, 
Ex��i�
)

313 
	$MP_DEFINE_EXCEPTION
(
St�I��ti�
, 
Ex��i�
)

314 
	$MP_DEFINE_EXCEPTION
(
Ar�hm�icE��
, 
Ex��i�
)

316 
	$MP_DEFINE_EXCEPTION
(
Ov��owE��
, 
Ar�hm�icE��
)

317 
	$MP_DEFINE_EXCEPTION
(
Z�oDivisi�E��
, 
Ar�hm�icE��
)

318 
	$MP_DEFINE_EXCEPTION
(
As��i�E��
, 
Ex��i�
)

319 
	$MP_DEFINE_EXCEPTION
(
A�ribu�E��
, 
Ex��i�
)

321 
	$MP_DEFINE_EXCEPTION
(
EOFE��
, 
Ex��i�
)

322 
	$MP_DEFINE_EXCEPTION
(
Imp�tE��
, 
Ex��i�
)

323 
	$MP_DEFINE_EXCEPTION
(
LookupE��
, 
Ex��i�
)

324 
	$MP_DEFINE_EXCEPTION
(
IndexE��
, 
LookupE��
)

325 
	$MP_DEFINE_EXCEPTION
(
KeyE��
, 
LookupE��
)

326 
	$MP_DEFINE_EXCEPTION
(
Mem�yE��
, 
Ex��i�
)

327 
	$MP_DEFINE_EXCEPTION
(
NameE��
, 
Ex��i�
)

331 
	$MP_DEFINE_EXCEPTION
(
OSE��
, 
Ex��i�
)

350 
	$MP_DEFINE_EXCEPTION
(
Ru�imeE��
, 
Ex��i�
)

351 
	$MP_DEFINE_EXCEPTION
(
N�Im�em��dE��
, 
Ru�imeE��
)

352 
	$MP_DEFINE_EXCEPTION
(
Sy�axE��
, 
Ex��i�
)

353 
	$MP_DEFINE_EXCEPTION
(
Ind��ti�E��
, 
Sy�axE��
)

358 
	$MP_DEFINE_EXCEPTION
(
Ty�E��
, 
Ex��i�
)

359 #i�
MICROPY_EMIT_NATIVE


360 
	$MP_DEFINE_EXCEPTION
(
V��Ty�E��
, 
Ty�E��
)

362 
	$MP_DEFINE_EXCEPTION
(
V�ueE��
, 
Ex��i�
)

363 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


364 
	$MP_DEFINE_EXCEPTION
(
UnicodeE��
, 
V�ueE��
)

383 
mp_obj_t
 
	$mp_obj_�w_ex��i�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
) {

384 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
exc_ty�
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
);

385  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 0, 0, 
NULL
);

386 
	}
}

388 
mp_obj_t
 
	$mp_obj_�w_ex��i�_�gs
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

389 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
exc_ty�
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
);

390  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 
n_�gs
, 0, 
�gs
);

391 
	}
}

393 #i�
MICROPY_ERROR_REPORTING
 !�
MICROPY_ERROR_REPORTING_NONE


395 
mp_obj_t
 
	$mp_obj_�w_ex��i�_msg
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
msg
) {

397 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
exc_ty�
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
);

400 
mp_obj_�r_t
 *
o_�r
 = 
	`m_�w_obj_maybe
(mp_obj_str_t);

402 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


406 i�(
o_�r
 =�
NULL


407 && 
mp_em�g�cy_ex��i�_buf_size
 >�(
mp_�t_t
)(
EMG_BUF_STR_OFFSET
 + (
mp_obj_�r_t
))) {

408 
o_�r
 = (
mp_obj_�r_t
 *)((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
)

409 + 
EMG_BUF_STR_OFFSET
);

413 i�(
o_�r
 =�
NULL
) {

415  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 0, 0, 
NULL
);

419 
o_�r
->
ba�
.
ty�
 = &
mp_ty�_�r
;

420 
o_�r
->
�n
 = 
	`���
((cڡ *)
msg
);

421 
o_�r
->
d�a
 = (cڡ 
by�
 *)
msg
;

422 #i�
MICROPY_ROM_TEXT_COMPRESSION


423 
o_�r
->
hash
 = 0;

425 
o_�r
->
hash
 = 
	`q�r_compu�_hash
(o_�r->
d�a
, o_�r->
�n
);

427 
mp_obj_t
 
�g
 = 
	`MP_OBJ_FROM_PTR
(
o_�r
);

428  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 1, 0, &
�g
);

429 
	}
}

435 
	s_exc_���r_t
 {

436 
bo�
 
	m�low_��loc
;

437 
size_t
 
	m�loc
;

438 
size_t
 
	m�n
;

439 
by�
 *
	mbuf
;

442 
	$exc_add_��
(*
d�a
, cڡ *
�r
, 
size_t
 
�n
) {

443 
_exc_���r_t
 *
�
 = 
d�a
;

444 i�(
�
->
�n
 +�� >�->
�loc
) {

446 i�(
�
->
�low_��loc
) {

447 
size_t
 
�w_�loc
 = 
�
->
�loc
 + 
�n
 + 16;

448 
by�
 *
�w_buf
 = 
	`m_��w_maybe
(by�, 
�
->
buf
,�r->
�loc
, 
�w_�loc
, 
�ue
);

449 i�(
�w_buf
 =�
NULL
) {

450 
�
->
�low_��loc
 = 
�l�
;

451 
�n
 = 
�
->
�loc
 -�r->len - 1;

453 
�
->
�loc
 = 
�w_�loc
;

454 
�
->
buf
 = 
�w_buf
;

457 
�n
 = 
�
->
�loc
 -�r->len - 1;

460 
	`mem�y
(
�
->
buf
 +�r->
�n
, 
�r
,�en);

461 
�
->
�n
 +=�en;

462 
	}
}

464 
mp_obj_t
 
	$mp_obj_�w_ex��i�_msg_v�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, ...) {

465 
va_li�
 
�gs
;

466 
	`va_��t
(
�gs
, 
fmt
);

467 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_msg_vli�
(
exc_ty�
, 
fmt
, 
�gs
);

468 
	`va_�d
(
�gs
);

469  
exc
;

470 
	}
}

472 
mp_obj_t
 
	$mp_obj_�w_ex��i�_msg_vli�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, 
va_li�
 
�gs
) {

473 
	`as��
(
fmt
 !�
NULL
);

476 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
exc_ty�
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
);

479 
mp_obj_�r_t
 *
o_�r
 = 
	`m_�w_obj_maybe
(mp_obj_str_t);

480 
size_t
 
o_�r_�loc
 = 
	`���
((cڡ *)
fmt
) + 1;

481 
by�
 *
o_�r_buf
 = 
	`m_�w_maybe
(by�, 
o_�r_�loc
);

483 
bo�
 
u�d_emg_buf
 = 
�l�
;

484 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


488 i�((
o_�r
 =�
NULL
 || 
o_�r_buf
 == NULL)

489 && 
mp_em�g�cy_ex��i�_buf_size
 >�(
mp_�t_t
)(
EMG_BUF_STR_OFFSET
 + (
mp_obj_�r_t
) + 16)) {

490 
u�d_emg_buf
 = 
�ue
;

491 
o_�r
 = (
mp_obj_�r_t
 *)((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
EMG_BUF_STR_OFFSET
);

492 
o_�r_buf
 = (
by�
 *)((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
EMG_BUF_STR_BUF_OFFSET
);

493 
o_�r_�loc
 = (
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
�+ 
mp_em�g�cy_ex��i�_buf_size
 - 
o_�r_buf
;

497 i�(
o_�r
 =�
NULL
) {

500  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 0, 0, 
NULL
);

503 i�(
o_�r_buf
 =�
NULL
) {

508 
o_�r
->
�n
 = 
o_�r_�loc
 - 1;

509 
o_�r
->
d�a
 = (cڡ 
by�
 *)
fmt
;

513 
_exc_���r_t
 
exc_�
 = {!
u�d_emg_buf
, 
o_�r_�loc
, 0, 
o_�r_buf
};

514 
mp_��t_t
 
��t
 = {&
exc_�
, 
exc_add_��
};

515 cڡ *
fmt2
 = (cڡ *)
fmt
;

516 #i�
MICROPY_ROM_TEXT_COMPRESSION


517 
by�
 
decom�es�d
[
MP_MAX_UNCOMPRESSED_TEXT_LEN
];

518 i�(
	`MP_IS_COMPRESSED_ROM_STRING
(
fmt
)) {

519 
	`mp_decom�ess_rom_�r�g
(
decom�es�d
, 
fmt
);

520 
fmt2
 = (cڡ *)
decom�es�d
;

523 
	`mp_v��tf
(&
��t
, 
fmt2
, 
�gs
);

524 
exc_�
.
buf
[exc_�.
�n
] = '\0';

525 
o_�r
->
�n
 = 
exc_�
.len;

526 
o_�r
->
d�a
 = 
exc_�
.
buf
;

530 
o_�r
->
ba�
.
ty�
 = &
mp_ty�_�r
;

531 #i�
MICROPY_ROM_TEXT_COMPRESSION


532 
o_�r
->
hash
 = 0;

534 
o_�r
->
hash
 = 
	`q�r_compu�_hash
(o_�r->
d�a
, o_�r->
�n
);

536 
mp_obj_t
 
�g
 = 
	`MP_OBJ_FROM_PTR
(
o_�r
);

537  
	`mp_obj_ex��i�_make_�w
(
exc_ty�
, 1, 0, &
�g
);

538 
	}
}

543 
bo�
 
	$mp_obj_is_ex��i�_ty�
(
mp_obj_t
 
�lf_�
) {

544 i�(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_ty�
)) {

546 
mp_obj_ty�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

547 i�(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
�lf
, 
make_�w
�=�
mp_obj_ex��i�_make_�w
) {

548  
�ue
;

551  
	`mp_obj_is_sub�ass_�
(
�lf_�
, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_Ba�Ex��i�
));

552 
	}
}

555 
bo�
 
	$mp_obj_is_ex��i�_����
(
mp_obj_t
 
�lf_�
) {

556  
	`mp_obj_is_ex��i�_ty�
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
�lf_�
)));

557 
	}
}

562 
bo�
 
	$mp_obj_ex��i�_m�ch
(
mp_obj_t
 
exc
, 
mp_cڡ_obj_t
 
exc_ty�
) {

564 i�(
	`mp_obj_is_ex��i�_����
(
exc
)) {

565 
exc
 = 
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(exc));

567  
	`mp_obj_is_sub�ass_�
(
exc
, 
exc_ty�
);

568 
	}
}

572 
	$mp_obj_ex��i�_��r_�a�back
(
mp_obj_t
 
�lf_�
) {

573 
mp_obj_ex��i�_t
 *
�lf
 = 
	`g�_�tive_ex��i�
(
�lf_�
);

576 
�lf
->
�a�back_d�a
 = 
NULL
;

577 
	}
}

579 
	$mp_obj_ex��i�_add_�a�back
(
mp_obj_t
 
�lf_�
, 
q�r
 
f�e
, 
size_t
 
l�e
, q��
block
) {

580 
mp_obj_ex��i�_t
 *
�lf
 = 
	`g�_�tive_ex��i�
(
�lf_�
);

585 #i�
MICROPY_PY_SYS_TRACEBACKLIMIT


586 
mp_�t_t
 
max_�a�back
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`MP_STATE_VM
(
sys_mu�b�
[
MP_SYS_MUTABLE_TRACEBACKLIMIT
]));

587 i�(
max_�a�back
 <= 0) {

589 } i�(
�lf
->
�a�back_d�a
 !�
NULL
 && s�f->
�a�back_�n
 >�
max_�a�back
 * 
TRACEBACK_ENTRY_LEN
) {

590 
�lf
->
�a�back_�n
 -�
TRACEBACK_ENTRY_LEN
;

591 
	`memmove
(
�lf
->
�a�back_d�a
, s�f->�a�back_d��+ 
TRACEBACK_ENTRY_LEN
, s�f->
�a�back_�n
 * (self->traceback_data[0]));

595 i�(
�lf
->
�a�back_d�a
 =�
NULL
) {

596 
�lf
->
�a�back_d�a
 = 
	`m_�w_maybe
(
size_t
, 
TRACEBACK_ENTRY_LEN
);

597 i�(
�lf
->
�a�back_d�a
 =�
NULL
) {

598 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


599 i�(
mp_em�g�cy_ex��i�_buf_size
 >�(
mp_�t_t
)(
EMG_BUF_TRACEBACK_OFFSET
 + 
EMG_BUF_TRACEBACK_SIZE
)) {

601 
size_t
 *
tb
 = (size_�*)((
u�t8_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
)

602 + 
EMG_BUF_TRACEBACK_OFFSET
);

603 
�lf
->
�a�back_d�a
 = 
tb
;

604 
�lf
->
�a�back_�loc
 = 
EMG_BUF_TRACEBACK_SIZE
 / (
size_t
);

615 
�lf
->
�a�back_�loc
 = 
TRACEBACK_ENTRY_LEN
;

617 
�lf
->
�a�back_�n
 = 0;

618 } i�(
�lf
->
�a�back_�n
 + 
TRACEBACK_ENTRY_LEN
 > s�f->
�a�back_�loc
) {

619 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


620 i�(
�lf
->
�a�back_d�a
 =�(
size_t
 *)
	`MP_STATE_VM
(
mp_em�g�cy_ex��i�_buf
)) {

626 
size_t
 *
tb_d�a
 = 
	`m_��w_maybe
(size_t, 
�lf
->
�a�back_d�a
, s�f->
�a�back_�loc
,

627 
�lf
->
�a�back_�loc
 + 
TRACEBACK_ENTRY_LEN
, 
�ue
);

628 i�(
tb_d�a
 =�
NULL
) {

631 
�lf
->
�a�back_d�a
 = 
tb_d�a
;

632 
�lf
->
�a�back_�loc
 +�
TRACEBACK_ENTRY_LEN
;

635 
size_t
 *
tb_d�a
 = &
�lf
->
�a�back_d�a
[�lf->
�a�back_�n
];

636 
�lf
->
�a�back_�n
 +�
TRACEBACK_ENTRY_LEN
;

637 
tb_d�a
[0] = 
f�e
;

638 
tb_d�a
[1] = 
l�e
;

639 
tb_d�a
[2] = 
block
;

640 
	}
}

642 
	$mp_obj_ex��i�_g�_�a�back
(
mp_obj_t
 
�lf_�
, 
size_t
 *
n
, size_�**
v�ues
) {

643 
mp_obj_ex��i�_t
 *
�lf
 = 
	`g�_�tive_ex��i�
(
�lf_�
);

645 i�(
�lf
->
�a�back_d�a
 =�
NULL
) {

646 *
n
 = 0;

647 *
v�ues
 = 
NULL
;

649 *
n
 = 
�lf
->
�a�back_�n
;

650 *
v�ues
 = 
�lf
->
�a�back_d�a
;

652 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objexcept.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJEXCEPT_H


27 
	#MICROPY_INCLUDED_PY_OBJEXCEPT_H


	)

29 
	~"py/obj.h
"

30 
	~"py/objtu�e.h
"

32 
	s_mp_obj_ex��i�_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 
size_t
 
	m�a�back_�loc
 : (8 * (size_t) / 2);

35 
size_t
 
	m�a�back_�n
 : (8 * (size_t) / 2);

36 
size_t
 *
	m�a�back_d�a
;

37 
mp_obj_tu�e_t
 *
	m�gs
;

38 } 
	tmp_obj_ex��i�_t
;

40 
mp_obj_ex��i�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
);

41 
mp_obj_ex��i�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
);

43 
	#MP_DEFINE_EXCEPTION
(
exc_�me
, 
ba�_�me
) \

44 
	`MP_DEFINE_CONST_OBJ_TYPE
(
mp_ty�_
##
exc_�me
, 
MP_QSTR_
##exc_�me, 
MP_TYPE_FLAG_NONE
, \

45 
make_�w
, 
mp_obj_ex��i�_make_�w
, \

46 
��t
, 
mp_obj_ex��i�_��t
, \

47 
��
, 
mp_obj_ex��i�_��
, \

48 
���
, &
mp_ty�_
##
ba�_�me
 \

49 );

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfilter.c

27 
	~"py/ru�ime.h
"

29 #i�
MICROPY_PY_BUILTINS_FILTER


31 
	s_mp_obj_f��r_t
 {

32 
mp_obj_ba�_t
 
	mba�
;

33 
mp_obj_t
 
	mfun
;

34 
mp_obj_t
 
	m��
;

35 } 
	tmp_obj_f��r_t
;

37 
mp_obj_t
 
	$f��r_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

38 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 2, 
�l�
);

39 
mp_obj_f��r_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_f��r_t, 
ty�
);

40 
o
->
fun
 = 
�gs
[0];

41 
o
->
��
 = 
	`mp_g���
(
�gs
[1], 
NULL
);

42  
	`MP_OBJ_FROM_PTR
(
o
);

43 
	}
}

45 
mp_obj_t
 
	$f��r_���xt
(
mp_obj_t
 
�lf_�
) {

46 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_f��r
));

47 
mp_obj_f��r_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

48 
mp_obj_t
 
�xt
;

49 (
�xt
 = 
	`mp_���xt
(
�lf
->
��
)�!�
MP_OBJ_STOP_ITERATION
) {

50 
mp_obj_t
 
v�
;

51 i�(
�lf
->
fun
 !�
mp_cڡ_n�e
) {

52 
v�
 = 
	`mp_��_fun�i�_n_kw
(
�lf
->
fun
, 1, 0, &
�xt
);

54 
v�
 = 
�xt
;

56 i�(
	`mp_obj_is_�ue
(
v�
)) {

57  
�xt
;

60  
MP_OBJ_STOP_ITERATION
;

61 
	}
}

63 
MP_DEFINE_CONST_OBJ_TYPE
(

64 
mp_ty�_f��r
,

65 
MP_QSTR_f��r
,

66 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

67 
make_�w
, 
f��r_make_�w
,

68 
��
, 
f��r_���xt


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfloat.c

27 
	~<�dlib.h
>

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/�r�num.h
"

33 
	~"py/ru�ime.h
"

35 #i�
MICROPY_PY_BUILTINS_FLOAT


37 
	~<m�h.h
>

38 
	~"py/f�m���t.h
"

40 #i�
MICROPY_OBJ_REPR
 !�
MICROPY_OBJ_REPR_C
 && MICROPY_OBJ_REPR !�
MICROPY_OBJ_REPR_D


43 #i�de�
M_E


44 
	#M_E
 (2.7182818284590452354)

	)

46 #i�de�
M_PI


47 
	#M_PI
 (3.14159265358979323846)

	)

50 
	s_mp_obj_��t_t
 {

51 
mp_obj_ba�_t
 
	mba�
;

52 
mp_��t_t
 
	mv�ue
;

53 } 
	tmp_obj_��t_t
;

55 cڡ 
mp_obj_��t_t
 
	gmp_cڡ_��t_e_obj
 = {{&
mp_ty�_��t
}, (
mp_��t_t
)
M_E
};

56 cڡ 
mp_obj_��t_t
 
	gmp_cڡ_��t_pi_obj
 = {{&
mp_ty�_��t
}, (
mp_��t_t
)
M_PI
};

57 #i�
MICROPY_PY_MATH_CONSTANTS


58 #i�de�
NAN


59 #�r� 
NAN
 
ma�o
 
is
 
n�
 
def�ed


61 cڡ 
mp_obj_��t_t
 
	gmp_cڡ_��t_�u_obj
 = {{&
mp_ty�_��t
}, (
mp_��t_t
)(2.0 * 
M_PI
)};

62 cڡ 
mp_obj_��t_t
 
	gmp_cڡ_��t_�f_obj
 = {{&
mp_ty�_��t
}, (
mp_��t_t
)
INFINITY
};

63 cڡ 
mp_obj_��t_t
 
	gmp_cڡ_��t_�n_obj
 = {{&
mp_ty�_��t
}, (
mp_��t_t
)
NAN
};

68 
	#MICROPY_FLOAT_ZERO
 
	`MICROPY_FLOAT_CONST
(0.0)

	)

70 #i�
MICROPY_FLOAT_HIGH_QUALITY_HASH


72 
mp_�t_t
 
	$mp_��t_hash
(
mp_��t_t
 
�c
) {

73 
mp_��t_uni�_t
 
u
 = {.
f
 = 
�c
};

74 
mp_�t_t
 
v�
;

75 cڡ 
adj_exp
 = ()
u
.
p
.
exp
 - 
MP_FLOAT_EXP_BIAS
;

76 i�(
adj_exp
 < 0) {

78 
v�
 = 
u
.
i
;

82 
mp_��t_u�t_t
 
�c
 = 
u
.
p
.��| ((mp_��t_u�t_t)1 << 
MP_FLOAT_FRAC_BITS
);

84 i�(
adj_exp
 <�
MP_FLOAT_FRAC_BITS
) {

86 
v�
 = (
�c
 >> (
MP_FLOAT_FRAC_BITS
 - 
adj_exp
))

87 ^ (
�c
 & (((
mp_��t_u�t_t
)1 << (
MP_FLOAT_FRAC_BITS
 - 
adj_exp
)) - 1));

88 } i�(()
adj_exp
 < 
MP_BITS_PER_BYTE
 * (
mp_�t_t
) - 1) {

90 
v�
 = (
mp_�t_t
)
�c
 << (
adj_exp
 - 
MP_FLOAT_FRAC_BITS
);

93 
v�
 = 
�c
;

97 i�(
u
.
p
.
sgn
) {

98 
v�
 = -(
mp_u�t_t
)val;

101  
v�
;

102 
	}
}

105 
	$��t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

106 ()
k�d
;

107 
mp_��t_t
 
o_v�
 = 
	`mp_obj_��t_g�
(
o_�
);

108 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


109 
buf
[16];

110 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C


111 cڡ 
�ecisi�
 = 6;

113 cڡ 
�ecisi�
 = 7;

116 
buf
[32];

117 cڡ 
�ecisi�
 = 16;

119 
	`mp_f�m�_��t
(
o_v�
, 
buf
, (buf), 'g', 
�ecisi�
, '\0');

120 
	`mp_��t_�r
(
��t
, 
buf
);

121 i�(
	`�rchr
(
buf
, '.'�=�
NULL
 && strchr(buf, 'e') == NULL && strchr(buf, 'n') == NULL) {

123 
	`mp_��t_�r
(
��t
, ".0");

125 
	}
}

127 
mp_obj_t
 
	$��t_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

128 ()
ty�_�
;

129 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 1, 
�l�
);

131 
n_�gs
) {

133  
	`mp_obj_�w_��t
(0);

137 
mp_buf�r_�fo_t
 
buf�fo
;

138 i�(
	`mp_g�_buf�r
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
)) {

140  
	`mp_�r�_num_��t
(
buf�fo
.
buf
, buf�fo.
�n
, 
�l�
, 
NULL
);

141 } i�(
	`mp_obj_is_��t
(
�gs
[0])) {

143  
�gs
[0];

146  
	`mp_obj_�w_��t
(
	`mp_obj_g�_��t
(
�gs
[0]));

150 
	}
}

152 
mp_obj_t
 
	$��t_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

153 
mp_��t_t
 
v�
 = 
	`mp_obj_��t_g�
(
o_�
);

154 
�
) {

155 
MP_UNARY_OP_BOOL
:

156  
	`mp_obj_�w_bo�
(
v�
 != 0);

157 
MP_UNARY_OP_HASH
:

158  
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_��t_hash
(
v�
));

159 
MP_UNARY_OP_POSITIVE
:

160  
o_�
;

161 
MP_UNARY_OP_NEGATIVE
:

162  
	`mp_obj_�w_��t
(-
v�
);

163 
MP_UNARY_OP_ABS
: {

164 i�(
	`signb�
(
v�
)) {

165  
	`mp_obj_�w_��t
(-
v�
);

167  
o_�
;

171  
MP_OBJ_NULL
;

173 
	}
}

175 
mp_obj_t
 
	$��t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

176 
mp_��t_t
 
lhs_v�
 = 
	`mp_obj_��t_g�
(
lhs_�
);

177 #i�
MICROPY_PY_BUILTINS_COMPLEX


178 i�(
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_com�ex
)) {

179  
	`mp_obj_com�ex_b��y_�
(
�
, 
lhs_v�
, 0, 
rhs_�
);

182  
	`mp_obj_��t_b��y_�
(
�
, 
lhs_v�
, 
rhs_�
);

183 
	}
}

185 
MP_DEFINE_CONST_OBJ_TYPE
(

186 
mp_ty�_��t
, 
MP_QSTR_��t
, 
MP_TYPE_FLAG_EQ_NOT_REFLEXIVE
 | 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
,

187 
make_�w
, 
��t_make_�w
,

188 
��t
, 
��t_��t
,

189 
u�ry_�
, 
��t_u�ry_�
,

190 
b��y_�
, 
��t_b��y_�


193 #i�
MICROPY_OBJ_REPR
 !�
MICROPY_OBJ_REPR_C
 && MICROPY_OBJ_REPR !�
MICROPY_OBJ_REPR_D


195 
mp_obj_t
 
	$mp_obj_�w_��t
(
mp_��t_t
 
v�ue
) {

197 
mp_obj_��t_t
 *
o
 = 
	`m_�w_obj
(mp_obj_float_t);

198 
o
->
ba�
.
ty�
 = &
mp_ty�_��t
;

199 
o
->
v�ue
 = value;

200  
	`MP_OBJ_FROM_PTR
(
o
);

201 
	}
}

203 
mp_��t_t
 
	$mp_obj_��t_g�
(
mp_obj_t
 
�lf_�
) {

204 
	`as��
(
	`mp_obj_is_��t
(
�lf_�
));

205 
mp_obj_��t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

206  
�lf
->
v�ue
;

207 
	}
}

211 
	$mp_obj_��t_divmod
(
mp_��t_t
 *
x
, mp_��t_�*
y
) {

216 
mp_��t_t
 
mod
 = 
	`MICROPY_FLOAT_C_FUN
(
fmod
)(*
x
, *
y
);

217 
mp_��t_t
 
div
 = (*
x
 - 
mod
�/ *
y
;

220 i�(
mod
 =�
MICROPY_FLOAT_ZERO
) {

221 
mod
 = 
	`MICROPY_FLOAT_C_FUN
(
c�ysign
)(
MICROPY_FLOAT_ZERO
, *
y
);

223 i�((
mod
 < 
MICROPY_FLOAT_ZERO
�!�(*
y
 < MICROPY_FLOAT_ZERO)) {

224 
mod
 +�*
y
;

225 
div
 -�
	`MICROPY_FLOAT_CONST
(1.0);

229 
mp_��t_t
 
�o�div
;

230 i�(
div
 =�
MICROPY_FLOAT_ZERO
) {

232 
�o�div
 = 
	`MICROPY_FLOAT_C_FUN
(
c�ysign
)(
MICROPY_FLOAT_ZERO
, *
x
 / *
y
);

235 
�o�div
 = 
	`MICROPY_FLOAT_C_FUN
(
�o�
)(
div
);

236 i�(
div
 - 
�o�div
 > 
	`MICROPY_FLOAT_CONST
(0.5)) {

237 
�o�div
 +�
	`MICROPY_FLOAT_CONST
(1.0);

242 *
x
 = 
�o�div
;

243 *
y
 = 
mod
;

244 
	}
}

246 
mp_obj_t
 
	$mp_obj_��t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_��t_t
 
lhs_v�
, 
mp_obj_t
 
rhs_�
) {

247 
mp_��t_t
 
rhs_v�
;

248 i�(!
	`mp_obj_g�_��t_maybe
(
rhs_�
, &
rhs_v�
)) {

249  
MP_OBJ_NULL
;

252 
�
) {

253 
MP_BINARY_OP_ADD
:

254 
MP_BINARY_OP_INPLACE_ADD
:

255 
lhs_v�
 +�
rhs_v�
;

257 
MP_BINARY_OP_SUBTRACT
:

258 
MP_BINARY_OP_INPLACE_SUBTRACT
:

259 
lhs_v�
 -�
rhs_v�
;

261 
MP_BINARY_OP_MULTIPLY
:

262 
MP_BINARY_OP_INPLACE_MULTIPLY
:

263 
lhs_v�
 *�
rhs_v�
;

265 
MP_BINARY_OP_FLOOR_DIVIDE
:

266 
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
:

267 i�(
rhs_v�
 == 0) {

268 
z�o_divisi�_�r�
:

269 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("divide by zero"));

274 
	`mp_obj_��t_divmod
(&
lhs_v�
, &
rhs_v�
);

276 
MP_BINARY_OP_TRUE_DIVIDE
:

277 
MP_BINARY_OP_INPLACE_TRUE_DIVIDE
:

278 i�(
rhs_v�
 == 0) {

279 
z�o_divisi�_�r�
;

281 
lhs_v�
 /�
rhs_v�
;

283 
MP_BINARY_OP_MODULO
:

284 
MP_BINARY_OP_INPLACE_MODULO
:

285 i�(
rhs_v�
 =�
MICROPY_FLOAT_ZERO
) {

286 
z�o_divisi�_�r�
;

288 
lhs_v�
 = 
	`MICROPY_FLOAT_C_FUN
(
fmod
)�hs_v�, 
rhs_v�
);

290 i�(
lhs_v�
 =�
MICROPY_FLOAT_ZERO
) {

291 
lhs_v�
 = 
	`MICROPY_FLOAT_C_FUN
(
c�ysign
)(0.0, 
rhs_v�
);

293 i�((
lhs_v�
 < 
MICROPY_FLOAT_ZERO
�!�(
rhs_v�
 < MICROPY_FLOAT_ZERO)) {

294 
lhs_v�
 +�
rhs_v�
;

298 
MP_BINARY_OP_POWER
:

299 
MP_BINARY_OP_INPLACE_POWER
:

300 i�(
lhs_v�
 =�0 && 
rhs_v�
 < 0 && !
	`is�f
(rhs_val)) {

301 
z�o_divisi�_�r�
;

303 i�(
lhs_v�
 < 0 && 
rhs_v�
 !�
	`MICROPY_FLOAT_C_FUN
(
�o�
)�hs_v��&& !
	`i��
(rhs_val)) {

304 #i�
MICROPY_PY_BUILTINS_COMPLEX


305  
	`mp_obj_com�ex_b��y_�
(
MP_BINARY_OP_POWER
, 
lhs_v�
, 0, 
rhs_�
);

307 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("complex values�ot supported"));

310 #i�
MICROPY_PY_MATH_POW_FIX_NAN


311 i�(
lhs_v�
 =�
	`MICROPY_FLOAT_CONST
(1.0�|| 
rhs_v�
 == MICROPY_FLOAT_CONST(0.0)) {

312 
lhs_v�
 = 
	`MICROPY_FLOAT_CONST
(1.0);

316 
lhs_v�
 = 
	`MICROPY_FLOAT_C_FUN
(
pow
)�hs_v�, 
rhs_v�
);

318 
MP_BINARY_OP_DIVMOD
: {

319 i�(
rhs_v�
 == 0) {

320 
z�o_divisi�_�r�
;

322 
	`mp_obj_��t_divmod
(&
lhs_v�
, &
rhs_v�
);

323 
mp_obj_t
 
tu�e
[2] = {

324 
	`mp_obj_�w_��t
(
lhs_v�
),

325 
	`mp_obj_�w_��t
(
rhs_v�
),

327  
	`mp_obj_�w_tu�e
(2, 
tu�e
);

329 
MP_BINARY_OP_LESS
:

330  
	`mp_obj_�w_bo�
(
lhs_v�
 < 
rhs_v�
);

331 
MP_BINARY_OP_MORE
:

332  
	`mp_obj_�w_bo�
(
lhs_v�
 > 
rhs_v�
);

333 
MP_BINARY_OP_EQUAL
:

334  
	`mp_obj_�w_bo�
(
lhs_v�
 =�
rhs_v�
);

335 
MP_BINARY_OP_LESS_EQUAL
:

336  
	`mp_obj_�w_bo�
(
lhs_v�
 <�
rhs_v�
);

337 
MP_BINARY_OP_MORE_EQUAL
:

338  
	`mp_obj_�w_bo�
(
lhs_v�
 >�
rhs_v�
);

341  
MP_OBJ_NULL
;

343  
	`mp_obj_�w_��t
(
lhs_v�
);

344 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfun.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/objtu�e.h
"

32 
	~"py/objfun.h
"

33 
	~"py/ru�ime.h
"

34 
	~"py/bc.h
"

35 
	~"py/c�ack.h
"

37 #i�
MICROPY_DEBUG_VERBOSE


38 
	#DEBUG_PRINT
 (1)

	)

40 
	#DEBUG_PRINT
 (0)

	)

41 
	#DEBUG_��tf
(...�()0

	)

51 
mp_obj_t
 
	$fun_bu�t�_0_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

52 ()
�gs
;

53 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_fun_bu�t�_0
));

54 
mp_obj_fun_bu�t�_fixed_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

55 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 0, 
�l�
);

56  
�lf
->
fun
.
	`_0
();

57 
	}
}

59 
MP_DEFINE_CONST_OBJ_TYPE
(

60 
mp_ty�_fun_bu�t�_0
, 
MP_QSTR_fun�i�
, 
MP_TYPE_FLAG_BINDS_SELF
 | 
MP_TYPE_FLAG_BUILTIN_FUN
,

61 
��
, 
fun_bu�t�_0_��


64 
mp_obj_t
 
	$fun_bu�t�_1_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

65 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_fun_bu�t�_1
));

66 
mp_obj_fun_bu�t�_fixed_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

67 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 1, 
�l�
);

68  
�lf
->
fun
.
	`_1
(
�gs
[0]);

69 
	}
}

71 
MP_DEFINE_CONST_OBJ_TYPE
(

72 
mp_ty�_fun_bu�t�_1
, 
MP_QSTR_fun�i�
, 
MP_TYPE_FLAG_BINDS_SELF
 | 
MP_TYPE_FLAG_BUILTIN_FUN
,

73 
��
, 
fun_bu�t�_1_��


76 
mp_obj_t
 
	$fun_bu�t�_2_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

77 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_fun_bu�t�_2
));

78 
mp_obj_fun_bu�t�_fixed_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

79 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 2, 
�l�
);

80  
�lf
->
fun
.
	`_2
(
�gs
[0],�rgs[1]);

81 
	}
}

83 
MP_DEFINE_CONST_OBJ_TYPE
(

84 
mp_ty�_fun_bu�t�_2
, 
MP_QSTR_fun�i�
, 
MP_TYPE_FLAG_BINDS_SELF
 | 
MP_TYPE_FLAG_BUILTIN_FUN
,

85 
��
, 
fun_bu�t�_2_��


88 
mp_obj_t
 
	$fun_bu�t�_3_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

89 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_fun_bu�t�_3
));

90 
mp_obj_fun_bu�t�_fixed_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

91 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 3, 3, 
�l�
);

92  
�lf
->
fun
.
	`_3
(
�gs
[0],�rgs[1],�rgs[2]);

93 
	}
}

95 
MP_DEFINE_CONST_OBJ_TYPE
(

96 
mp_ty�_fun_bu�t�_3
, 
MP_QSTR_fun�i�
, 
MP_TYPE_FLAG_BINDS_SELF
 | 
MP_TYPE_FLAG_BUILTIN_FUN
,

97 
��
, 
fun_bu�t�_3_��


100 
mp_obj_t
 
	$fun_bu�t�_v�_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

101 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_fun_bu�t�_v�
));

102 
mp_obj_fun_bu�t�_v�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

105 
	`mp_�g_check_num_sig
(
n_�gs
, 
n_kw
, 
�lf
->
sig
);

107 i�(
�lf
->
sig
 & 1) {

111 
mp_m�_t
 
kw_�gs
;

112 
	`mp_m�_��_fixed_�b�
(&
kw_�gs
, 
n_kw
, 
�gs
 + 
n_�gs
);

114  
�lf
->
fun
.
	`kw
(
n_�gs
, 
�gs
, &
kw_�gs
);

119  
�lf
->
fun
.
	`v�
(
n_�gs
, 
�gs
);

121 
	}
}

123 
MP_DEFINE_CONST_OBJ_TYPE
(

124 
mp_ty�_fun_bu�t�_v�
, 
MP_QSTR_fun�i�
, 
MP_TYPE_FLAG_BINDS_SELF
 | 
MP_TYPE_FLAG_BUILTIN_FUN
,

125 
��
, 
fun_bu�t�_v�_��


131 
q�r
 
	$mp_obj_fun_g�_�me
(
mp_cڡ_obj_t
 
fun_�
) {

132 cڡ 
mp_obj_fun_bc_t
 *
fun
 = 
	`MP_OBJ_TO_PTR
(
fun_�
);

133 cڡ 
by�
 *
bc
 = 
fun
->
by�code
;

135 #i�
MICROPY_EMIT_NATIVE


136 i�(
fun
->
ba�
.
ty�
 =�&
mp_ty�_fun_�tive
 || fun->ba�.ty� =�&
mp_ty�_�tive_g�_w�p
) {

137 
bc
 = 
	`mp_obj_fun_�tive_g�_��ude_�r
(
fun
);

141 
	`MP_BC_PRELUDE_SIG_DECODE
(
bc
);

142 
	`MP_BC_PRELUDE_SIZE_DECODE
(
bc
);

144 
mp_u�t_t
 
�me
 = 
	`mp_decode_u�t_v�ue
(
bc
);

145 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


146 
�me
 = 
fun
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[name];

149  
�me
;

150 
	}
}

152 #i�
MICROPY_CPYTHON_COMPAT


153 
	$fun_bc_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

154 ()
k�d
;

155 
mp_obj_fun_bc_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

156 
	`mp_��tf
(
��t
, "<fun�i� %q��0x%p>", 
	`mp_obj_fun_g�_�me
(
o_�
), 
o
);

157 
	}
}

160 #i�
DEBUG_PRINT


161 
	$dump_�gs
(cڡ 
mp_obj_t
 *
a
, 
size_t
 
sz
) {

162 
	`DEBUG_��tf
("%p: ", 
a
);

163 
size_t
 
i
 = 0; i < 
sz
; i++) {

164 
	`DEBUG_��tf
("%�", 
a
[
i
]);

166 
	`DEBUG_��tf
("\n");

167 
	}
}

169 
	#dump_�gs
(...�()0

	)

175 
	#VM_MAX_STATE_ON_STACK
 ((
mp_u�t_t
�* 11)

	)

177 
	#DECODE_CODESTATE_SIZE
(
by�code
, 
n_��e_out_v�
, 
��e_size_out_v�
) \

179 cڡ 
u�t8_t
 *
�
 = 
by�code
; \

180 
size_t
 
n_exc_�ack
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_�gs
; \

181 
	`MP_BC_PRELUDE_SIG_DECODE_INTO
(
�
, 
n_��e_out_v�
, 
n_exc_�ack
, 
sc�e_�ags
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_�gs
); \

182 ()
sc�e_�ags
; ()
n_pos_�gs
; ()
n_kw�ly_�gs
; ()
n_def_�gs
; \

185 
��e_size_out_v�
 = 
n_��e_out_v�
 * (
mp_obj_t
) \

186 + 
n_exc_�ack
 * (
mp_exc_�ack_t
); \

187 }

	)

189 
	#INIT_CODESTATE
(
code_��e
, 
_fun_bc
, 
_n_��e
, 
n_�gs
, 
n_kw
, 
�gs
) \

190 
code_��e
->
fun_bc
 = 
_fun_bc
; \

191 
code_��e
->
n_��e
 = 
_n_��e
; \

192 
	`mp_�tup_code_��e
(
code_��e
, 
n_�gs
, 
n_kw
, 
�gs
); \

193 
code_��e
->
�d_glob�s
 = 
	`mp_glob�s_g�
();

	)

195 #i�
MICROPY_STACKLESS


196 
mp_code_��e_t
 *
	$mp_obj_fun_bc_���e_code��e
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

197 
	`mp_c�ack_check
();

198 
mp_obj_fun_bc_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

200 
size_t
 
n_��e
, 
��e_size
;

201 
	`DECODE_CODESTATE_SIZE
(
�lf
->
by�code
, 
n_��e
, 
��e_size
);

203 
mp_code_��e_t
 *
code_��e
;

204 #i�
MICROPY_ENABLE_PYSTACK


205 
code_��e
 = 
	`mp_py�ack_�loc
((
mp_code_��e_t
�+ 
��e_size
);

212 
code_��e
 = 
	`m_�w_obj_v�_maybe
(
mp_code_��e_t
, 
��e
, 
by�
, 
��e_size
);

213 i�(!
code_��e
) {

214  
NULL
;

218 
	`INIT_CODESTATE
(
code_��e
, 
�lf
, 
n_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

221 
	`mp_glob�s_�t
(
�lf
->
cڋxt
->
modu�
.
glob�s
);

223  
code_��e
;

224 
	}
}

227 
mp_obj_t
 
	$fun_bc_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

228 
	`mp_c�ack_check
();

230 
	`DEBUG_��tf
("I�u�n_�gs: " 
UINT_FMT
 ",�_kw: " UINT_FMT "\n", 
n_�gs
, 
n_kw
);

231 
	`DEBUG_��tf
("Input�os�rgs: ");

232 
	`dump_�gs
(
�gs
, 
n_�gs
);

233 
	`DEBUG_��tf
("Input kw�rgs: ");

234 
	`dump_�gs
(
�gs
 + 
n_�gs
, 
n_kw
 * 2);

236 
mp_obj_fun_bc_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

238 
size_t
 
n_��e
, 
��e_size
;

239 
	`DECODE_CODESTATE_SIZE
(
�lf
->
by�code
, 
n_��e
, 
��e_size
);

242 
mp_code_��e_t
 *
code_��e
 = 
NULL
;

243 #i�
MICROPY_ENABLE_PYSTACK


244 
code_��e
 = 
	`mp_py�ack_�loc
(
	`off�tof
(
mp_code_��e_t
, 
��e
�+ 
��e_size
);

246 i�(
��e_size
 > 
VM_MAX_STATE_ON_STACK
) {

247 
code_��e
 = 
	`m_�w_obj_v�_maybe
(
mp_code_��e_t
, 
��e
, 
by�
, 
��e_size
);

248 #i�
MICROPY_DEBUG_VM_STACK_OVERFLOW


249 i�(
code_��e
 !�
NULL
) {

250 
	`mem�t
(
code_��e
->
��e
, 0, 
��e_size
);

254 i�(
code_��e
 =�
NULL
) {

255 
code_��e
 = 
	`�lo�
(
	`off�tof
(
mp_code_��e_t
, 
��e
�+ 
��e_size
);

256 #i�
MICROPY_DEBUG_VM_STACK_OVERFLOW


257 
	`mem�t
(
code_��e
->
��e
, 0, 
��e_size
);

259 
��e_size
 = 0;

263 
	`INIT_CODESTATE
(
code_��e
, 
�lf
, 
n_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

266 
	`mp_glob�s_�t
(
�lf
->
cڋxt
->
modu�
.
glob�s
);

267 
mp_vm_�tu�_k�d_t
 
vm_�tu�_k�d
 = 
	`mp_execu�_by�code
(
code_��e
, 
MP_OBJ_NULL
);

268 
	`mp_glob�s_�t
(
code_��e
->
�d_glob�s
);

270 #i�
MICROPY_DEBUG_VM_STACK_OVERFLOW


271 i�(
vm_�tu�_k�d
 =�
MP_VM_RETURN_NORMAL
) {

272 i�(
code_��e
->
�
 < code_��e->
��e
) {

273 
	`mp_��tf
(
MICROPY_DEBUG_PRINTER
, "VM s�ck und��ow: " 
INT_FMT
 "\n", 
code_��e
->
�
 - code_��e->
��e
);

274 
	`as��
(0);

277 cڡ 
by�
 *
by�code_�r
 = 
�lf
->
by�code
;

278 
size_t
 
n_��e_unu�d
, 
n_exc_�ack_unu�d
, 
sc�e_�ags_unu�d
;

279 
size_t
 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_�gs_unu�d
;

280 
	`MP_BC_PRELUDE_SIG_DECODE_INTO
(
by�code_�r
, 
n_��e_unu�d
, 
n_exc_�ack_unu�d
,

281 
sc�e_�ags_unu�d
, 
n_pos_�gs
, 
n_kw�ly_�gs
, 
n_def_�gs_unu�d
);

285 i�(!(
vm_�tu�_k�d
 =�
MP_VM_RETURN_EXCEPTION
 && 
n_pos_�gs
 + 
n_kw�ly_�gs
 == 0)) {

287 
bo�
 
ov��ow
 = 
�ue
;

288 
size_t
 
i
 = 0; i < 
n_��e
 - 
n_pos_�gs
 - 
n_kw�ly_�gs
; ++i) {

289 i�(
code_��e
->
��e
[
i
] =�
MP_OBJ_NULL
) {

290 
ov��ow
 = 
�l�
;

294 i�(
ov��ow
) {

295 
	`mp_��tf
(
MICROPY_DEBUG_PRINTER
, "VM s�ck ov��ow s��=%�n_��e+1=" 
UINT_FMT
 "\n", 
code_��e
->
��e
, 
n_��e
);

296 
	`as��
(0);

301 
mp_obj_t
 
�su�
;

302 i�(
vm_�tu�_k�d
 =�
MP_VM_RETURN_NORMAL
) {

304 
�su�
 = *
code_��e
->
�
;

307 
	`as��
(
vm_�tu�_k�d
 =�
MP_VM_RETURN_EXCEPTION
);

309 
�su�
 = 
code_��e
->
��e
[0];

312 #i�
MICROPY_ENABLE_PYSTACK


313 
	`mp_py�ack_�
(
code_��e
);

316 i�(
��e_size
 != 0) {

317 
	`m_d�_v�
(
mp_code_��e_t
, 
��e
, 
by�
, 
��e_size
, 
code_��e
);

321 i�(
vm_�tu�_k�d
 =�
MP_VM_RETURN_NORMAL
) {

322  
�su�
;

324 
	`�r_�i�
(
�su�
);

326 
	}
}

328 #i�
MICROPY_PY_FUNCTION_ATTRS


329 
	$mp_obj_fun_bc_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

330 i�(
de�
[0] !�
MP_OBJ_NULL
) {

334 i�(
��
 =�
MP_QSTR___�me__
) {

335 
de�
[0] = 
	`MP_OBJ_NEW_QSTR
(
	`mp_obj_fun_g�_�me
(
�lf_�
));

337 i�(
��
 =�
MP_QSTR___glob�s__
) {

338 
mp_obj_fun_bc_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

339 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
�lf
->
cڋxt
->
modu�
.
glob�s
);

341 
	}
}

344 #i�
MICROPY_CPYTHON_COMPAT


345 
	#FUN_BC_TYPE_PRINT
 
��t
, 
fun_bc_��t
,

	)

347 
	#FUN_BC_TYPE_PRINT


	)

350 #i�
MICROPY_PY_FUNCTION_ATTRS


351 
	#FUN_BC_TYPE_ATTR
 
��
, 
mp_obj_fun_bc_��
,

	)

353 
	#FUN_BC_TYPE_ATTR


	)

356 
MP_DEFINE_CONST_OBJ_TYPE
(

357 
mp_ty�_fun_bc
,

358 
MP_QSTR_fun�i�
,

359 
MP_TYPE_FLAG_BINDS_SELF
,

360 
FUN_BC_TYPE_PRINT


361 
FUN_BC_TYPE_ATTR


362 
��
, 
fun_bc_��


365 
mp_obj_t
 
	$mp_obj_�w_fun_bc
(cڡ 
mp_obj_t
 *
def_�gs
, cڡ 
by�
 *
code
, cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, 
_mp_�w_code_t
 *cڡ *
ch�d_�b�
) {

366 
size_t
 
n_def_�gs
 = 0;

367 
size_t
 
n_ex�a_�gs
 = 0;

368 
mp_obj_tu�e_t
 *
def_pos_�gs
 = 
NULL
;

369 
mp_obj_t
 
def_kw_�gs
 = 
MP_OBJ_NULL
;

370 i�(
def_�gs
 !�
NULL
 && def_�gs[0] !�
MP_OBJ_NULL
) {

371 
	`as��
(
	`mp_obj_is_ty�
(
def_�gs
[0], &
mp_ty�_tu�e
));

372 
def_pos_�gs
 = 
	`MP_OBJ_TO_PTR
(
def_�gs
[0]);

373 
n_def_�gs
 = 
def_pos_�gs
->
�n
;

374 
n_ex�a_�gs
 = 
def_pos_�gs
->
�n
;

376 i�(
def_�gs
 !�
NULL
 && def_�gs[1] !�
MP_OBJ_NULL
) {

377 
	`as��
(
	`mp_obj_is_ty�
(
def_�gs
[1], &
mp_ty�_di�
));

378 
def_kw_�gs
 = 
def_�gs
[1];

379 
n_ex�a_�gs
 += 1;

381 
mp_obj_fun_bc_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_fun_bc_t, 
ex�a_�gs
, 
mp_obj_t
, 
n_ex�a_�gs
, &
mp_ty�_fun_bc
);

382 
o
->
by�code
 = 
code
;

383 
o
->
cڋxt
 = context;

384 
o
->
ch�d_�b�
 = child_table;

385 i�(
def_pos_�gs
 !�
NULL
) {

386 
	`mem�y
(
o
->
ex�a_�gs
, 
def_pos_�gs
->
�ems
, 
n_def_�gs
 * (
mp_obj_t
));

388 i�(
def_kw_�gs
 !�
MP_OBJ_NULL
) {

389 
o
->
ex�a_�gs
[
n_def_�gs
] = 
def_kw_�gs
;

391  
	`MP_OBJ_FROM_PTR
(
o
);

392 
	}
}

397 #i�
MICROPY_EMIT_NATIVE


399 
mp_obj_t
 
	$fun_�tive_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

400 
	`mp_c�ack_check
();

401 
mp_obj_fun_bc_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

402 
mp_��_fun_t
 
fun
 = 
	`mp_obj_fun_�tive_g�_fun�i�_��t
(
�lf
);

403  
	`fun
(
�lf_�
, 
n_�gs
, 
n_kw
, 
�gs
);

404 
	}
}

406 #i�
MICROPY_CPYTHON_COMPAT


407 
	#FUN_BC_TYPE_PRINT
 
��t
, 
fun_bc_��t
,

	)

409 
	#FUN_BC_TYPE_PRINT


	)

411 #i�
MICROPY_PY_FUNCTION_ATTRS


412 
	#FUN_BC_TYPE_ATTR
 
��
, 
mp_obj_fun_bc_��
,

	)

414 
	#FUN_BC_TYPE_ATTR


	)

417 
MP_DEFINE_CONST_OBJ_TYPE
(

418 
mp_ty�_fun_�tive
,

419 
MP_QSTR_fun�i�
,

420 
MP_TYPE_FLAG_BINDS_SELF
,

421 
FUN_BC_TYPE_PRINT


422 
FUN_BC_TYPE_ATTR


423 
��
, 
fun_�tive_��


431 #i�
MICROPY_EMIT_NATIVE


433 
mp_obj_t
 
	$fun_v��_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

434 
	`mp_c�ack_check
();

435 
mp_obj_fun_bc_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

436 
mp_��_fun_t
 
fun
 = 
	`MICROPY_MAKE_POINTER_CALLABLE
((*)
�lf
->
by�code
);

437  
	`fun
(
�lf_�
, 
n_�gs
, 
n_kw
, 
�gs
);

438 
	}
}

440 
MP_DEFINE_CONST_OBJ_TYPE
(

441 
mp_ty�_fun_v��
,

442 
MP_QSTR_fun�i�
,

443 
MP_TYPE_FLAG_BINDS_SELF
,

444 
��
, 
fun_v��_��


452 #i�
MICROPY_EMIT_INLINE_ASM


454 
	$mp_u�t_t
 (*
	t�l�e_asm_fun_0_t
)();

455 
	$mp_u�t_t
 (*
	t�l�e_asm_fun_1_t
)(
	tmp_u�t_t
);

456 
	$mp_u�t_t
 (*
	t�l�e_asm_fun_2_t
)(
	tmp_u�t_t
, mp_uint_t);

457 
	$mp_u�t_t
 (*
	t�l�e_asm_fun_3_t
)(
	tmp_u�t_t
, mp_uint_t, mp_uint_t);

458 
	$mp_u�t_t
 (*
	t�l�e_asm_fun_4_t
)(
	tmp_u�t_t
, mp_uint_t, mp_uint_t, mp_uint_t);

461 
mp_u�t_t
 
	$c�v�t_obj_f�_�l�e_asm
(
mp_obj_t
 
obj
) {

463 i�(
	`mp_obj_is_sm�l_�t
(
obj
)) {

464  
	`MP_OBJ_SMALL_INT_VALUE
(
obj
);

465 } i�(
obj
 =�
mp_cڡ_n�e
) {

467 } i�(
obj
 =�
mp_cڡ_�l�
) {

469 } i�(
obj
 =�
mp_cڡ_�ue
) {

471 } i�(
	`mp_obj_is_exa�_ty�
(
obj
, &
mp_ty�_�t
)) {

472  
	`mp_obj_�t_g�_�un��d
(
obj
);

473 } i�(
	`mp_obj_is_�r
(
obj
)) {

475 
size_t
 
l
;

476  (
mp_u�t_t
)
	`mp_obj_�r_g�_d�a
(
obj
, &
l
);

478 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
obj
);

479 #i�
MICROPY_PY_BUILTINS_FLOAT


480 i�(
ty�
 =�&
mp_ty�_��t
) {

482  (
mp_�t_t
)
	`mp_obj_��t_g�
(
obj
);

485 i�(
ty�
 =�&
mp_ty�_tu�e
 ||�y� =�&
mp_ty�_li�
) {

487 
size_t
 
�n
;

488 
mp_obj_t
 *
�ems
;

489 
	`mp_obj_g�_��y
(
obj
, &
�n
, &
�ems
);

490  (
mp_u�t_t
)
�ems
;

492 
mp_buf�r_�fo_t
 
buf�fo
;

493 i�(
	`mp_g�_buf�r
(
obj
, &
buf�fo
, 
MP_BUFFER_READ
)) {

495  (
mp_u�t_t
)
buf�fo
.
buf
;

498  (
mp_u�t_t
)
obj
;

502 
	}
}

504 
mp_obj_t
 
	$fun_asm_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

505 
mp_obj_fun_asm_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

507 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 
�lf
->n_�gs, s�f->n_�gs, 
�l�
);

509 cڡ *
fun
 = 
	`MICROPY_MAKE_POINTER_CALLABLE
(
�lf
->
fun_d�a
);

511 
mp_u�t_t
 
�t
;

512 i�(
n_�gs
 == 0) {

513 
�t
 = ((
�l�e_asm_fun_0_t
)
fun
)();

514 } i�(
n_�gs
 == 1) {

515 
�t
 = ((
�l�e_asm_fun_1_t
)
fun
)(
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[0]));

516 } i�(
n_�gs
 == 2) {

517 
�t
 = ((
�l�e_asm_fun_2_t
)
fun
)(
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[0]), convert_obj_for_inline_asm(args[1]));

518 } i�(
n_�gs
 == 3) {

519 
�t
 = ((
�l�e_asm_fun_3_t
)
fun
)(
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[0]), convert_obj_for_inline_asm(args[1]), convert_obj_for_inline_asm(args[2]));

522 
	`as��
(
n_�gs
 == 4);

523 
�t
 = ((
�l�e_asm_fun_4_t
)
fun
)(

524 
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[0]),

525 
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[1]),

526 
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[2]),

527 
	`c�v�t_obj_f�_�l�e_asm
(
�gs
[3])

531  
	`mp_�tive_to_obj
(
�t
, 
�lf
->
ty�_sig
);

532 
	}
}

534 
MP_DEFINE_CONST_OBJ_TYPE
(

535 
mp_ty�_fun_asm
,

536 
MP_QSTR_fun�i�
,

537 
MP_TYPE_FLAG_BINDS_SELF
,

538 
��
, 
fun_asm_��


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfun.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJFUN_H


27 
	#MICROPY_INCLUDED_PY_OBJFUN_H


	)

29 
	~"py/bc.h
"

30 
	~"py/obj.h
"

32 
	s_mp_obj_fun_bc_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 cڡ 
mp_modu�_cڋxt_t
 *
	mcڋxt
;

35 
_mp_�w_code_t
 *cڡ *
	mch�d_�b�
;

36 cڡ 
by�
 *
	mby�code
;

37 #i�
MICROPY_PY_SYS_SETTRACE


38 cڡ 
_mp_�w_code_t
 *
	mrc
;

43 
mp_obj_t
 
	mex�a_�gs
[];

44 } 
	tmp_obj_fun_bc_t
;

46 
	s_mp_obj_fun_asm_t
 {

47 
mp_obj_ba�_t
 
	mba�
;

48 
size_t
 
	mn_�gs
;

49 cڡ *
	mfun_d�a
;

50 
mp_u�t_t
 
	mty�_sig
;

51 } 
	tmp_obj_fun_asm_t
;

53 
mp_obj_t
 
mp_obj_�w_fun_bc
(cڡ mp_obj_�*
def_�gs
, cڡ 
by�
 *
code
, cڡ 
mp_modu�_cڋxt_t
 *
cm
, 
_mp_�w_code_t
 *cڡ *
�w_code_�b�
);

54 
mp_obj_fun_bc_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
);

56 #i�
MICROPY_EMIT_NATIVE


58 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_fun_�tive
(cڡ 
mp_obj_t
 *
def_�gs
, cڡ *
fun_d�a
, cڡ 
mp_modu�_cڋxt_t
 *
mc
, 
_mp_�w_code_t
 *cڡ *
ch�d_�b�
) {

59 
mp_obj_fun_bc_t
 *
o
 = (mp_obj_fun_bc_�*)
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_fun_bc
(
def_�gs
, (cڡ 
by�
 *)
fun_d�a
, 
mc
, 
ch�d_�b�
));

60 
o
->
ba�
.
ty�
 = &
mp_ty�_fun_�tive
;

61  
	`MP_OBJ_FROM_PTR
(
o
);

62 
	}
}

64 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_fun_v��
(cڡ *
fun_d�a
, cڡ 
mp_modu�_cڋxt_t
 *
mc
, 
_mp_�w_code_t
 *cڡ *
ch�d_�b�
) {

65 
mp_obj_fun_bc_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_fun_bc_t, &
mp_ty�_fun_v��
);

66 
o
->
by�code
 = (cڡ 
by�
 *)
fun_d�a
;

67 
o
->
cڋxt
 = 
mc
;

68 
o
->
ch�d_�b�
 = child_table;

69  
	`MP_OBJ_FROM_PTR
(
o
);

70 
	}
}

72 
�l�e
 cڡ 
u�t8_t
 *
	$mp_obj_fun_�tive_g�_��ude_�r
(cڡ 
mp_obj_fun_bc_t
 *
fun_�tive
) {

74 
u���_t
 
��ude_�r_�dex
 = ((u���_�*)
fun_�tive
->
by�code
)[0];

75 cڡ 
u�t8_t
 *
��ude_�r
;

76 i�(
��ude_�r_�dex
 == 0) {

77 
��ude_�r
 = (cڡ 
u�t8_t
 *)
fun_�tive
->
ch�d_�b�
;

79 
��ude_�r
 = (cڡ 
u�t8_t
 *)
fun_�tive
->
ch�d_�b�
[
��ude_�r_�dex
];

81  
��ude_�r
;

82 
	}
}

84 
�l�e
 *
	$mp_obj_fun_�tive_g�_fun�i�_��t
(cڡ 
mp_obj_fun_bc_t
 *
fun_�tive
) {

86  
	`MICROPY_MAKE_POINTER_CALLABLE
((*)(
fun_�tive
->
by�code
 + (
u���_t
)));

87 
	}
}

89 
�l�e
 *
	$mp_obj_fun_�tive_g�_g����_��t
(cڡ 
mp_obj_fun_bc_t
 *
fun_�tive
) {

91 
u���_t
 
��t_off�t
 = ((u���_�*)
fun_�tive
->
by�code
)[1];

92  
	`MICROPY_MAKE_POINTER_CALLABLE
((*)(
fun_�tive
->
by�code
 + 
��t_off�t
));

93 
	}
}

95 
�l�e
 *
	$mp_obj_fun_�tive_g�_g����_�sume
(cڡ 
mp_obj_fun_bc_t
 *
fun_�tive
) {

97  
	`MICROPY_MAKE_POINTER_CALLABLE
((*)&((
u���_t
 *)
fun_�tive
->
by�code
)[2]);

98 
	}
}

102 #i�
MICROPY_EMIT_INLINE_ASM


103 
�l�e
 
mp_obj_t
 
	$mp_obj_�w_fun_asm
(
size_t
 
n_�gs
, cڡ *
fun_d�a
, 
mp_u�t_t
 
ty�_sig
) {

104 
mp_obj_fun_asm_t
 *
o
 = (mp_obj_fun_asm_�*)
	`mp_obj_m�loc
(mp_obj_fun_asm_t, &
mp_ty�_fun_asm
);

105 
o
->
n_�gs
 =�_args;

106 
o
->
fun_d�a
 = (cڡ 
by�
 *)fun_data;

107 
o
->
ty�_sig
 =�ype_sig;

108  
	`MP_OBJ_FROM_PTR
(
o
);

109 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgenerator.c

28 
	~<�dlib.h
>

29 
	~<as��.h
>

31 
	~"py/ru�ime.h
"

32 
	~"py/bc.h
"

33 
	~"py/obj�r.h
"

34 
	~"py/objg����.h
"

35 
	~"py/objfun.h
"

36 
	~"py/c�ack.h
"

39 cڡ 
mp_obj_ex��i�_t
 
	gmp_cڡ_G����Ex�_obj
 = {{&
mp_ty�_G����Ex�
}, 0, 0, 
NULL
, (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
};

44 
	s_mp_obj_g�_����_t
 {

45 
mp_obj_ba�_t
 
	mba�
;

49 
mp_obj_t
 
	m�nd_exc
;

50 
mp_code_��e_t
 
	mcode_��e
;

51 } 
	tmp_obj_g�_����_t
;

53 
mp_obj_t
 
	$g�_w�p_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

55 
mp_obj_fun_bc_t
 *
�lf_fun
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

58 cڡ 
u�t8_t
 *
�
 = 
�lf_fun
->
by�code
;

59 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

62 
mp_obj_g�_����_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_g�_����_t, 
code_��e
.
��e
, 
by�
,

63 
n_��e
 * (
mp_obj_t
�+ 
n_exc_�ack
 * (
mp_exc_�ack_t
),

64 &
mp_ty�_g�_����
);

66 
o
->
�nd_exc
 = 
mp_cڡ_n�e
;

67 
o
->
code_��e
.
fun_bc
 = 
�lf_fun
;

68 
o
->
code_��e
.
n_��e
 =�_state;

69 
	`mp_�tup_code_��e
(&
o
->
code_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

70  
	`MP_OBJ_FROM_PTR
(
o
);

71 
	}
}

73 #i�
MICROPY_PY_FUNCTION_ATTRS


74 
	#GEN_WRAP_TYPE_ATTR
 
��
, 
mp_obj_fun_bc_��
,

	)

76 
	#GEN_WRAP_TYPE_ATTR


	)

79 
MP_DEFINE_CONST_OBJ_TYPE
(

80 
mp_ty�_g�_w�p
,

81 
MP_QSTR_g����
,

82 
MP_TYPE_FLAG_BINDS_SELF
,

83 
GEN_WRAP_TYPE_ATTR


84 
��
, 
g�_w�p_��


90 #i�
MICROPY_EMIT_NATIVE


93 
	s_mp_obj_g�_����_�tive_t
 {

94 
mp_obj_ba�_t
 
	mba�
;

95 
mp_obj_t
 
	m�nd_exc
;

96 
mp_code_��e_�tive_t
 
	mcode_��e
;

97 } 
	tmp_obj_g�_����_�tive_t
;

99 
mp_obj_t
 
	$�tive_g�_w�p_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

101 
mp_obj_fun_bc_t
 *
�lf_fun
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

104 cڡ 
u�t8_t
 *
��ude_�r
 = 
	`mp_obj_fun_�tive_g�_��ude_�r
(
�lf_fun
);

107 cڡ 
u�t8_t
 *
�
 = 
��ude_�r
;

108 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

111 
mp_obj_g�_����_�tive_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_g�_����_�tive_t, 
code_��e
.
��e
, 
by�
, 
n_��e
 * (
mp_obj_t
), &
mp_ty�_g�_����
);

114 
o
->
�nd_exc
 = 
mp_cڡ_n�e
;

115 
o
->
code_��e
.
fun_bc
 = 
�lf_fun
;

116 
o
->
code_��e
.
n_��e
 =�_state;

117 
	`mp_�tup_code_��e_�tive
(&
o
->
code_��e
, 
n_�gs
, 
n_kw
, 
�gs
);

120 
o
->
code_��e
.
exc_�_idx
 = 
MP_CODE_STATE_EXC_SP_IDX_SENTINEL
;

123 
o
->
code_��e
.
�
 = 
	`mp_obj_fun_�tive_g�_g����_��t
(
�lf_fun
);

125  
	`MP_OBJ_FROM_PTR
(
o
);

126 
	}
}

128 #i�
MICROPY_PY_FUNCTION_ATTRS


129 
	#NATIVE_GEN_WRAP_TYPE_ATTR
 , 
��
, 
mp_obj_fun_bc_��


	)

131 
	#NATIVE_GEN_WRAP_TYPE_ATTR


	)

134 
MP_DEFINE_CONST_OBJ_TYPE
(

135 
mp_ty�_�tive_g�_w�p
,

136 
MP_QSTR_g����
,

137 
MP_TYPE_FLAG_BINDS_SELF
,

138 
��
, 
�tive_g�_w�p_��


139 
NATIVE_GEN_WRAP_TYPE_ATTR


147 
	$g�_����_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

148 ()
k�d
;

149 
mp_obj_g�_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

150 
	`mp_��tf
(
��t
, "<g���� obje� '%q'��%p>", 
	`mp_obj_fun_g�_�me
(
	`MP_OBJ_FROM_PTR
(
�lf
->
code_��e
.
fun_bc
)), self);

151 
	}
}

153 
mp_vm_�tu�_k�d_t
 
	$mp_obj_g�_�sume
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�ue
, mp_obj_�
throw_v�ue
, mp_obj_�*
�t_v�
) {

154 
	`mp_c�ack_check
();

155 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_g�_����
));

156 
mp_obj_g�_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

157 i�(
�lf
->
code_��e
.
�
 == 0) {

160 *
�t_v�
 = 
mp_cڡ_n�e
;

161  
MP_VM_RETURN_NORMAL
;

165 i�(
�lf
->
�nd_exc
 =�
MP_OBJ_NULL
) {

166 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("generator�lready�xecuting"));

169 #i�
MICROPY_PY_GENERATOR_PEND_THROW


171 i�(
�lf
->
�nd_exc
 !�
mp_cڡ_n�e
) {

172 
throw_v�ue
 = 
�lf
->
�nd_exc
;

177 *
��e_��t
 = 
�lf
->
code_��e
.
��e
 - 1;

178 #i�
MICROPY_EMIT_NATIVE


179 i�(
�lf
->
code_��e
.
exc_�_idx
 =�
MP_CODE_STATE_EXC_SP_IDX_SENTINEL
) {

180 
��e_��t
 = ((
mp_obj_g�_����_�tive_t
 *)
�lf
)->
code_��e
.
��e
 - 1;

183 i�(
�lf
->
code_��e
.
�
 =�
��e_��t
) {

184 i�(
�nd_v�ue
 !�
mp_cڡ_n�e
) {

185 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't send�on-None value�o� just-started generator"));

188 *
�lf
->
code_��e
.
�
 = 
�nd_v�ue
;

192 
�lf
->
�nd_exc
 = 
MP_OBJ_NULL
;

195 
�lf
->
code_��e
.
�d_glob�s
 = 
	`mp_glob�s_g�
();

196 
	`mp_glob�s_�t
(
�lf
->
code_��e
.
fun_bc
->
cڋxt
->
modu�
.
glob�s
);

198 
mp_vm_�tu�_k�d_t
 
�t_k�d
;

200 #i�
MICROPY_EMIT_NATIVE


201 i�(
�lf
->
code_��e
.
exc_�_idx
 =�
MP_CODE_STATE_EXC_SP_IDX_SENTINEL
) {

203 
	`u���_t
 (*
	tmp_fun_�tive_g�_t
)(*, 
	tmp_obj_t
);

204 
mp_fun_�tive_g�_t
 
fun
 = 
	`mp_obj_fun_�tive_g�_g����_�sume
(
�lf
->
code_��e
.
fun_bc
);

205 
�t_k�d
 = 
	`fun
((*)&
�lf
->
code_��e
, 
throw_v�ue
);

210 
�t_k�d
 = 
	`mp_execu�_by�code
(&
�lf
->
code_��e
, 
throw_v�ue
);

213 
	`mp_glob�s_�t
(
�lf
->
code_��e
.
�d_glob�s
);

216 
�lf
->
�nd_exc
 = 
mp_cڡ_n�e
;

218 
�t_k�d
) {

219 
MP_VM_RETURN_NORMAL
:

224 
�lf
->
code_��e
.
�
 = 0;

226 *
�t_v�
 = *
�lf
->
code_��e
.
�
;

229 
MP_VM_RETURN_YIELD
:

230 *
�t_v�
 = *
�lf
->
code_��e
.
�
;

231 #i�
MICROPY_PY_GENERATOR_PEND_THROW


232 *
�lf
->
code_��e
.
�
 = 
mp_cڡ_n�e
;

236 
MP_VM_RETURN_EXCEPTION
: {

237 
�lf
->
code_��e
.
�
 = 0;

238 #i�
MICROPY_EMIT_NATIVE


239 i�(
�lf
->
code_��e
.
exc_�_idx
 =�
MP_CODE_STATE_EXC_SP_IDX_SENTINEL
) {

240 *
�t_v�
 = ((
mp_obj_g�_����_�tive_t
 *)
�lf
)->
code_��e
.
��e
[0];

244 *
�t_v�
 = 
�lf
->
code_��e
.
��e
[0];

247 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(*
�t_v�
)), MP_OBJ_FROM_PTR(&
mp_ty�_St�I��ti�
))) {

248 *
�t_v�
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("generator�aised StopIteration"));

254  
�t_k�d
;

255 
	}
}

257 
mp_obj_t
 
	$g�_�sume_�d_�i�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�ue
, mp_obj_�
throw_v�ue
, 
bo�
 
�i�_��_���i�
) {

258 
mp_obj_t
 
�t
;

259 
	`mp_obj_g�_�sume
(
�lf_�
, 
�nd_v�ue
, 
throw_v�ue
, &
�t
)) {

260 
MP_VM_RETURN_NORMAL
:

264 i�(
�t
 =�
mp_cڡ_n�e
) {

265 
�t
 = 
MP_OBJ_NULL
;

267 i�(
�i�_��_���i�
) {

268 
	`mp_�i�_St�I��ti�
(
�t
);

270  
	`mp_make_��_���i�
(
�t
);

273 
MP_VM_RETURN_YIELD
:

274  
�t
;

276 
MP_VM_RETURN_EXCEPTION
:

277 
	`�r_�i�
(
�t
);

279 
	}
}

281 
mp_obj_t
 
	$g�_����_���xt
(
mp_obj_t
 
�lf_�
) {

282  
	`g�_�sume_�d_�i�
(
�lf_�
, 
mp_cڡ_n�e
, 
MP_OBJ_NULL
, 
�l�
);

283 
	}
}

285 
mp_obj_t
 
	$g�_����_�nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�ue
) {

286  
	`g�_�sume_�d_�i�
(
�lf_�
, 
�nd_v�ue
, 
MP_OBJ_NULL
, 
�ue
);

287 
	}
}

288 
MP_DEFINE_CONST_FUN_OBJ_2
(
g�_����_�nd_obj
, 
g�_����_�nd
);

290 
mp_obj_t
 
	$g�_����_throw
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

303 
mp_obj_t
 
exc
 = 
�gs
[1];

304 i�(
n_�gs
 > 2 && 
�gs
[2] !�
mp_cڡ_n�e
) {

305 
exc
 = 
�gs
[2];

308  
	`g�_�sume_�d_�i�
(
�gs
[0], 
mp_cڡ_n�e
, 
exc
, 
�ue
);

309 
	}
}

310 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
g�_����_throw_obj
, 2, 4, 
g�_����_throw
);

312 
mp_obj_t
 
	$g�_����_�o�
(
mp_obj_t
 
�lf_�
) {

313 
mp_obj_t
 
�t
;

314 
	`mp_obj_g�_�sume
(
�lf_�
, 
mp_cڡ_n�e
, 
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_G����Ex�_obj
), &
�t
)) {

315 
MP_VM_RETURN_YIELD
:

316 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("generator ignored GeneratorExit"));

319 
MP_VM_RETURN_EXCEPTION
:

321 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
�t
)), MP_OBJ_FROM_PTR(&
mp_ty�_G����Ex�
))) {

322  
mp_cڡ_n�e
;

324 
	`�r_�i�
(
�t
);

328  
mp_cڡ_n�e
;

330 
	}
}

331 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_����_�o�_obj
, 
g�_����_�o�
);

333 #i�
MICROPY_PY_GENERATOR_PEND_THROW


334 
mp_obj_t
 
	$g�_����_�nd_throw
(
mp_obj_t
 
�lf_�
, mp_obj_�
exc_�
) {

335 
mp_obj_g�_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

336 i�(
�lf
->
�nd_exc
 =�
MP_OBJ_NULL
) {

337 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("generator�lready�xecuting"));

339 
mp_obj_t
 
�ev
 = 
�lf
->
�nd_exc
;

340 
�lf
->
�nd_exc
 = 
exc_�
;

341  
�ev
;

342 
	}
}

343 
MP_DEFINE_CONST_FUN_OBJ_2
(
g�_����_�nd_throw_obj
, 
g�_����_�nd_throw
);

346 cڡ 
mp_rom_m�_�em_t
 
	gg�_����_lo�ls_di�_�b�
[] = {

347 { 
MP_ROM_QSTR
(
MP_QSTR_�o�
), 
MP_ROM_PTR
(&
g�_����_�o�_obj
) },

348 { 
MP_ROM_QSTR
(
MP_QSTR_�nd
), 
MP_ROM_PTR
(&
g�_����_�nd_obj
) },

349 { 
MP_ROM_QSTR
(
MP_QSTR_throw
), 
MP_ROM_PTR
(&
g�_����_throw_obj
) },

350 #i�
MICROPY_PY_GENERATOR_PEND_THROW


351 { 
MP_ROM_QSTR
(
MP_QSTR_�nd_throw
), 
MP_ROM_PTR
(&
g�_����_�nd_throw_obj
) },

355 
MP_DEFINE_CONST_DICT
(
g�_����_lo�ls_di�
, 
g�_����_lo�ls_di�_�b�
);

357 
MP_DEFINE_CONST_OBJ_TYPE
(

358 
mp_ty�_g�_����
,

359 
MP_QSTR_g����
,

360 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

361 
��t
, 
g�_����_��t
,

362 
��
, 
g�_����_���xt
,

363 
lo�ls_di�
, &
g�_����_lo�ls_di�


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgenerator.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJGENERATOR_H


27 
	#MICROPY_INCLUDED_PY_OBJGENERATOR_H


	)

29 
	~"py/obj.h
"

30 
	~"py/ru�ime.h
"

32 
mp_vm_�tu�_k�d_t
 
mp_obj_g�_�sume
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�
, mp_obj_�
throw_v�
, mp_obj_�*
�t_v�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgetitemiter.c

27 
	~<�dlib.h
>

29 
	~"py/ru�ime.h
"

33 
	s_mp_obj_g��em_��_t
 {

34 
mp_obj_ba�_t
 
	mba�
;

35 
mp_obj_t
 
	m�gs
[3];

36 } 
	tmp_obj_g��em_��_t
;

38 
mp_obj_t
 
	$�_���xt
(
mp_obj_t
 
�lf_�
) {

39 
mp_obj_g��em_��_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

40 
�r_buf_t
 
�r
;

41 i�(
	`�r_push
(&
�r
) == 0) {

43 
mp_obj_t
 
v�ue
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
�lf
->
�gs
);

44 
�lf
->
�gs
[2] = 
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_OBJ_SMALL_INT_VALUE
(self->args[2]) + 1);

45 
	`�r_p�
();

46  
v�ue
;

49 
mp_obj_ty�_t
 *
t
 = (mp_obj_ty�_�*)((
mp_obj_ba�_t
 *)
�r
.
�t_v�
)->
ty�
;

50 i�(
t
 =�&
mp_ty�_St�I��ti�
 ||� =�&
mp_ty�_IndexE��
) {

51  
MP_OBJ_STOP_ITERATION
;

54 
	`�r_jump
(
�r
.
�t_v�
);

57 
	}
}

59 
MP_DEFINE_CONST_OBJ_TYPE
(

60 
mp_ty�_�
,

61 
MP_QSTR_����
,

62 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

63 
��
, 
�_���xt


67 
mp_obj_t
 
	$mp_obj_�w_g��em_��
(
mp_obj_t
 *
�gs
, 
mp_obj_��_buf_t
 *
��_buf
) {

68 
	`as��
((
mp_obj_g��em_��_t
�<�(
mp_obj_��_buf_t
));

69 
mp_obj_g��em_��_t
 *
o
 = (mp_obj_g��em_��_�*)
��_buf
;

70 
o
->
ba�
.
ty�
 = &
mp_ty�_�
;

71 
o
->
�gs
[0] =�rgs[0];

72 
o
->
�gs
[1] =�rgs[1];

73 
o
->
�gs
[2] = 
	`MP_OBJ_NEW_SMALL_INT
(0);

74  
	`MP_OBJ_FROM_PTR
(
o
);

75 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

29 
	~<�r�g.h
>

31 
	~"py/�r�num.h
"

32 
	~"py/sm�l�t.h
"

33 
	~"py/obj�t.h
"

34 
	~"py/obj�r.h
"

35 
	~"py/ru�ime.h
"

36 
	~"py/b��y.h
"

38 #i�
MICROPY_PY_BUILTINS_FLOAT


39 
	~<m�h.h
>

43 
mp_obj_t
 
	$mp_obj_�t_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

44 ()
ty�_�
;

45 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 2, 
�l�
);

47 
n_�gs
) {

49  
	`MP_OBJ_NEW_SMALL_INT
(0);

52 
mp_buf�r_�fo_t
 
buf�fo
;

53 
mp_obj_t
 
o
 = 
	`mp_u�ry_�
(
MP_UNARY_OP_INT_MAYBE
, 
�gs
[0]);

54 i�(
o
 !�
MP_OBJ_NULL
) {

55  
o
;

56 } i�(
	`mp_g�_buf�r
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
)) {

58  
	`mp_�r�_num_��g�
(
buf�fo
.
buf
, buf�fo.
�n
, 0, 
NULL
);

59 #i�
MICROPY_PY_BUILTINS_FLOAT


60 } i�(
	`mp_obj_is_��t
(
�gs
[0])) {

61  
	`mp_obj_�w_�t_�om_��t
(
	`mp_obj_��t_g�
(
�gs
[0]));

64 
	`mp_�i�_Ty�E��_�t_c�v�si�
(
�gs
[0]);

71 
size_t
 
l
;

72 cڡ *
s
 = 
	`mp_obj_�r_g�_d�a
(
�gs
[0], &
l
);

73  
	`mp_�r�_num_��g�
(
s
, 
l
, 
	`mp_obj_g�_�t
(
�gs
[1]), 
NULL
);

76 
	}
}

78 #i�
MICROPY_PY_BUILTINS_FLOAT


81 
	mMP_FP_CLASS_FIT_SMALLINT
,

82 
	mMP_FP_CLASS_FIT_LONGINT
,

83 
	mMP_FP_CLASS_OVERFLOW


84 } 
	tmp_�_as_�t_�ass_t
;

86 
mp_�_as_�t_�ass_t
 
	$mp_�assify_�_as_�t
(
mp_��t_t
 
v�
) {

88 
mp_��t_t
 
f
;

89 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


90 
u�t32_t
 
i
;

91 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


92 
u�t32_t
 
i
[2];

94 } 
u
 = {
v�
};

96 
u�t32_t
 
e
;

97 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


98 
e
 = 
u
.
i
;

99 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


100 
e
 = 
u
.
i
[
MP_ENDIANNESS_LITTLE
];

102 
	#MP_FLOAT_SIGN_SHIFT_I32
 ((
MP_FLOAT_FRAC_BITS
 + 
MP_FLOAT_EXP_BITS
�% 32)

	)

103 
	#MP_FLOAT_EXP_SHIFT_I32
 (
MP_FLOAT_FRAC_BITS
 % 32)

	)

105 i�(
e
 & (1U << 
MP_FLOAT_SIGN_SHIFT_I32
)) {

106 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


107 
e
 |�
u
.
i
[
MP_ENDIANNESS_BIG
] != 0;

109 i�((
e
 & ~(1U << 
MP_FLOAT_SIGN_SHIFT_I32
)) == 0) {

111 
e
 = 0;

113 
e
 +�((1U << 
MP_FLOAT_EXP_BITS
�- 1�<< 
MP_FLOAT_EXP_SHIFT_I32
;

116 
e
 &�~((1U << 
MP_FLOAT_EXP_SHIFT_I32
) - 1);

120 i�(
e
 <�((8 * (
u���_t
�+ 
MP_FLOAT_EXP_BIAS
 - 3�<< 
MP_FLOAT_EXP_SHIFT_I32
)) {

121  
MP_FP_CLASS_FIT_SMALLINT
;

123 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


124 i�(
e
 <�((((�* 
MP_BITS_PER_BYTE
�+ 
MP_FLOAT_EXP_BIAS
 - 2�<< 
MP_FLOAT_EXP_SHIFT_I32
)) {

125  
MP_FP_CLASS_FIT_LONGINT
;

128 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_MPZ


129  
MP_FP_CLASS_FIT_LONGINT
;

131  
MP_FP_CLASS_OVERFLOW
;

133 
	}
}

134 #unde�
MP_FLOAT_SIGN_SHIFT_I32


135 #unde�
MP_FLOAT_EXP_SHIFT_I32


137 
mp_obj_t
 
	$mp_obj_�w_�t_�om_��t
(
mp_��t_t
 
v�
) {

138 
mp_��t_uni�_t
 
u
 = {
v�
};

140 i�(
u
.
p
.
exp
 =�((1 << 
MP_FLOAT_EXP_BITS
) - 1)) {

142 i�(
u
.
p
.
�c
 == 0) {

143 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("can't convert inf�o int"));

145 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("can't convert NaN�o int"));

148 
mp_�_as_�t_�ass_t
 
i�
 = 
	`mp_�assify_�_as_�t
(
v�
);

149 i�(
i�
 =�
MP_FP_CLASS_FIT_SMALLINT
) {

150  
	`MP_OBJ_NEW_SMALL_INT
((
mp_�t_t
)
v�
);

151 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_MPZ


153 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_�t_�w_mpz
();

154 
	`mpz_�t_�om_��t
(&
o
->
mpz
, 
v�
);

155  
	`MP_OBJ_FROM_PTR
(
o
);

158 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


159 } i�(
i�
 =�
MP_FP_CLASS_FIT_LONGINT
) {

160  
	`mp_obj_�w_�t_�om_�
(()
v�
);

163 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("float�oo big"));

167 
	}
}

171 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


172 
mp_l�g�t_im�_t
 
	tfmt_�t_t
;

173 
	tfmt_u�t_t
;

175 
mp_�t_t
 
	tfmt_�t_t
;

176 
mp_u�t_t
 
	tfmt_u�t_t
;

179 
	$mp_obj_�t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

180 ()
k�d
;

183 
�ack_buf
[(
fmt_�t_t
) * 4];

184 *
buf
 = 
�ack_buf
;

185 
size_t
 
buf_size
 = (
�ack_buf
);

186 
size_t
 
fmt_size
;

188 *
�r
 = 
	`mp_obj_�t_f�m��d
(&
buf
, &
buf_size
, &
fmt_size
, 
�lf_�
, 10, 
NULL
, '\0', '\0');

189 
	`mp_��t_�r
(
��t
, 
�r
);

191 i�(
buf
 !�
�ack_buf
) {

192 
	`m_d�
(, 
buf
, 
buf_size
);

194 
	}
}

196 cڡ 
u�t8_t
 
	glog_ba�2_�o�
[] = {

209 
size_t
 
	$mp_�t_f�m�_size
(
size_t
 
num_b�s
, 
ba�
, cڡ *
�efix
, 
comma
) {

210 
	`as��
(2 <�
ba�
 && base <= 16);

211 
size_t
 
num_dig�s
 = 
num_b�s
 / 
log_ba�2_�o�
[
ba�
 - 1] + 1;

212 
size_t
 
num_commas
 = 
comma
 ? 
num_dig�s
 / 3 : 0;

213 
size_t
 
�efix_�n
 = 
�efix
 ? 
	`���
(prefix) : 0;

214  
num_dig�s
 + 
num_commas
 + 
�efix_�n
 + 2;

215 
	}
}

224 *
	$mp_obj_�t_f�m��d
(**
buf
, 
size_t
 *
buf_size
, size_�*
fmt_size
, 
mp_cڡ_obj_t
 
�lf_�
,

225 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
) {

226 
fmt_�t_t
 
num
;

227 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_NONE


229 
num
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

231 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

233 
num
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

235 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

237 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


238 cڡ 
mp_obj_�t_t
 *
�lf
 = 
�lf_�
;

240 
num
 = 
�lf
->
v�
;

243  
	`mp_obj_�t_f�m��d_im�
(
buf
, 
buf_size
, 
fmt_size
, 
�lf_�
, 
ba�
, 
�efix
, 
ba�_ch�
, 
comma
);

248 
sign
 = '\0';

249 i�(
num
 < 0) {

250 
num
 = -num;

251 
sign
 = '-';

254 
size_t
 
�eded_size
 = 
	`mp_�t_f�m�_size
((
fmt_�t_t
�* 8, 
ba�
, 
�efix
, 
comma
);

255 i�(
�eded_size
 > *
buf_size
) {

256 *
buf
 = 
	`m_�w
(, 
�eded_size
);

257 *
buf_size
 = 
�eded_size
;

259 *
�r
 = *
buf
;

261 *
b
 = 
�r
 + 
�eded_size
;

262 *(--
b
) = '\0';

263 *
ϡ_comma
 = 
b
;

265 i�(
num
 == 0) {

266 *(--
b
) = '0';

270 
c
 = (
fmt_u�t_t
)
num
 % 
ba�
;

271 
num
 = (
fmt_u�t_t
�um / 
ba�
;

272 i�(
c
 >= 10) {

273 
c
 +�
ba�_ch�
 - 10;

275 
c
 += '0';

277 *(--
b
��
c
;

278 i�(
comma
 && 
num
 !�0 && 
b
 > 
�r
 && (
ϡ_comma
 - b) == 3) {

279 *(--
b
��
comma
;

280 
ϡ_comma
 = 
b
;

283 
b
 > 
�r
 && 
num
 != 0);

285 i�(
�efix
) {

286 
size_t
 
�efix_�n
 = 
	`���
(
�efix
);

287 *
p
 = 
b
 - 
�efix_�n
;

288 i�(
p
 > 
�r
) {

289 
b
 = 
p
;

290 *
�efix
) {

291 *
p
++ = *
�efix
++;

295 i�(
sign
 && 
b
 > 
�r
) {

296 *(--
b
��
sign
;

298 *
fmt_size
 = *
buf
 + 
�eded_size
 - 
b
 - 1;

300  
b
;

301 
	}
}

303 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_NONE


305 
	$mp_obj_�t_sign
(
mp_obj_t
 
�lf_�
) {

306 
mp_�t_t
 
v�
 = 
	`mp_obj_g�_�t
(
�lf_�
);

307 i�(
v�
 < 0) {

309 } i�(
v�
 > 0) {

314 
	}
}

317 
mp_obj_t
 
	$mp_obj_�t_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

318  
MP_OBJ_NULL
;

319 
	}
}

322 
mp_obj_t
 
	$mp_obj_�t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

323  
	`mp_obj_�t_b��y_�_ex�a_��s
(
�
, 
lhs_�
, 
rhs_�
);

324 
	}
}

327 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�r_�n
(cڡ **
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
) {

328 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("long int�ot supported in�his build"));

329  
mp_cڡ_n�e
;

330 
	}
}

333 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�
(
v�
) {

334 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("small int overflow"));

335  
mp_cڡ_n�e
;

336 
	}
}

339 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�
(
v�
) {

340 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("small int overflow"));

341  
mp_cڡ_n�e
;

342 
	}
}

344 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�t
(
mp_u�t_t
 
v�ue
) {

347 i�((
v�ue
 & ~
MP_SMALL_INT_POSITIVE_MASK
) == 0) {

348  
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
);

350 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("small int overflow"));

351  
mp_cڡ_n�e
;

352 
	}
}

354 
mp_obj_t
 
	$mp_obj_�w_�t
(
mp_�t_t
 
v�ue
) {

355 i�(
	`MP_SMALL_INT_FITS
(
v�ue
)) {

356  
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
);

358 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("small int overflow"));

359  
mp_cڡ_n�e
;

360 
	}
}

362 
mp_�t_t
 
	$mp_obj_�t_g�_�un��d
(
mp_cڡ_obj_t
 
�lf_�
) {

363  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

364 
	}
}

366 
mp_�t_t
 
	$mp_obj_�t_g�_checked
(
mp_cڡ_obj_t
 
�lf_�
) {

367  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

368 
	}
}

374 
mp_obj_t
 
	$mp_obj_�t_b��y_�_ex�a_��s
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

375 i�(
rhs_�
 =�
mp_cڡ_�l�
) {

377  
	`mp_b��y_�
(
�
, 
lhs_�
, 
	`MP_OBJ_NEW_SMALL_INT
(0));

378 } i�(
rhs_�
 =�
mp_cڡ_�ue
) {

380  
	`mp_b��y_�
(
�
, 
lhs_�
, 
	`MP_OBJ_NEW_SMALL_INT
(1));

381 } i�(
�
 =�
MP_BINARY_OP_MULTIPLY
) {

382 i�(
	`mp_obj_is_�r_�_by�s
(
rhs_�
�|| 
	`mp_obj_is_ty�
�hs_�, &
mp_ty�_tu�e
�|| mp_obj_is_ty��hs_�, &
mp_ty�_li�
)) {

384  
	`mp_b��y_�
(
�
, 
rhs_�
, 
lhs_�
);

387  
MP_OBJ_NULL
;

388 
	}
}

391 
mp_obj_t
 
	$�t_�om_by�s
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

393 ()
n_�gs
;

396 
mp_buf�r_�fo_t
 
buf�fo
;

397 
	`mp_g�_buf�r_�i�
(
�gs
[1], &
buf�fo
, 
MP_BUFFER_READ
);

399 cڡ 
by�
 *
buf
 = (cڡ by� *)
buf�fo
.buf;

400 
d��
 = 1;

401 i�(
�gs
[2] =�
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_l��e
)) {

402 
buf
 +�
buf�fo
.
�n
 - 1;

403 
d��
 = -1;

406 
mp_u�t_t
 
v�ue
 = 0;

407 
size_t
 
�n
 = 
buf�fo
.len;

408 ; 
�n
--; 
buf
 +�
d��
) {

409 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


410 i�(
v�ue
 > (
MP_SMALL_INT_MAX
 >> 8)) {

412  
	`mp_obj_�t_�om_by�s_im�
(
�gs
[2] !�
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_l��e
), 
buf�fo
.
�n
, buf�fo.
buf
);

415 
v�ue
 = (v�u�<< 8�| *
buf
;

417  
	`mp_obj_�w_�t_�om_u�t
(
v�ue
);

418 
	}
}

420 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�t_�om_by�s_fun_obj
, 3, 4, 
�t_�om_by�s
);

421 
MP_DEFINE_CONST_CLASSMETHOD_OBJ
(
�t_�om_by�s_obj
, 
MP_ROM_PTR
(&
�t_�om_by�s_fun_obj
));

423 
mp_obj_t
 
	$�t_to_by�s
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

425 ()
n_�gs
;

426 
bo�
 
ov��ow
;

428 
mp_�t_t
 
d�n
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

429 i�(
d�n
 < 0) {

430 
	`mp_�i�_V�ueE��
(
NULL
);

432 
bo�
 
big_�d�n
 = 
�gs
[2] !�
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_l��e
);

434 
v�r_t
 
v�r
;

435 
	`v�r_��_�n
(&
v�r
, 
d�n
);

436 
by�
 *
d�a
 = (by� *)
v�r
.
buf
;

438 #i�
MICROPY_LONGINT_IMPL
 !�
MICROPY_LONGINT_IMPL_NONE


439 i�(!
	`mp_obj_is_sm�l_�t
(
�gs
[0])) {

440 
ov��ow
 = !
	`mp_obj_�t_to_by�s_im�
(
�gs
[0], 
big_�d�n
, 
d�n
, 
d�a
);

444 
mp_�t_t
 
v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[0]);

445 
��
 = 0;

448 i�(
v�
 > 0) {

449 
��
 = ((
mp_�t_t
�* 8 - 
	`mp_�z_mpi
(
v�
) + 7) / 8;

450 } i�(
v�
 < -1) {

451 
��
 = ((
mp_�t_t
�* 8 - 
	`mp_�z_mpi
(~
v�
) + 8) / 8;

454 
��
 = -
v�
;

457 i�(
��
 <�
d�n
) {

458 
	`mem�t
(
d�a
, 
v�
 < 0 ? 0xFF : 0x00, 
d�n
);

459 
	`mp_b��y_�t_�t
(
��
, 
big_�d�n
, 
d�a
 + (big_�d��? (
d�n
 - s�n�: 0), 
v�
);

460 
ov��ow
 = 
�l�
;

462 
ov��ow
 = 
�ue
;

466 i�(
ov��ow
) {

467 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("buffer�oo small"));

470  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

471 
	}
}

472 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�t_to_by�s_obj
, 3, 4, 
�t_to_by�s
);

474 cڡ 
mp_rom_m�_�em_t
 
	g�t_lo�ls_di�_�b�
[] = {

475 { 
MP_ROM_QSTR
(
MP_QSTR_�om_by�s
), 
MP_ROM_PTR
(&
�t_�om_by�s_obj
) },

476 { 
MP_ROM_QSTR
(
MP_QSTR_to_by�s
), 
MP_ROM_PTR
(&
�t_to_by�s_obj
) },

479 
MP_DEFINE_CONST_DICT
(
�t_lo�ls_di�
, 
�t_lo�ls_di�_�b�
);

481 
MP_DEFINE_CONST_OBJ_TYPE
(

482 
mp_ty�_�t
,

483 
MP_QSTR_�t
,

484 
MP_TYPE_FLAG_NONE
,

485 
make_�w
, 
mp_obj_�t_make_�w
,

486 
��t
, 
mp_obj_�t_��t
,

487 
u�ry_�
, 
mp_obj_�t_u�ry_�
,

488 
b��y_�
, 
mp_obj_�t_b��y_�
,

489 
lo�ls_di�
, &
�t_lo�ls_di�


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJINT_H


27 
	#MICROPY_INCLUDED_PY_OBJINT_H


	)

29 
	~"py/mpz.h
"

30 
	~"py/obj.h
"

32 
	s_mp_obj_�t_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


35 
mp_l�g�t_im�_t
 
	mv�
;

36 #�i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_MPZ


37 
mpz_t
 
	mmpz
;

39 } 
	tmp_obj_�t_t
;

41 
cڡ 
mp_obj_�t_t
 
mp_sys_maxsize_obj
;

43 #i�
MICROPY_PY_BUILTINS_FLOAT


44 
mp_��t_t
 
mp_obj_�t_as_��t_im�
(
mp_obj_t
 
�lf_�
);

47 
size_t
 
mp_�t_f�m�_size
(size_�
num_b�s
, 
ba�
, cڡ *
�efix
, 
comma
);

49 
mp_obj_�t_t
 *
mp_obj_�t_�w_mpz
();

51 
mp_obj_�t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
);

52 *
mp_obj_�t_f�m��d
(**
buf
, 
size_t
 *
buf_size
, size_�*
fmt_size
, 
mp_cڡ_obj_t
 
�lf_�
,

53 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
);

54 *
mp_obj_�t_f�m��d_im�
(**
buf
, 
size_t
 *
buf_size
, size_�*
fmt_size
, 
mp_cڡ_obj_t
 
�lf_�
,

55 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
);

56 
mp_�t_t
 
mp_obj_�t_hash
(
mp_obj_t
 
�lf_�
);

57 
mp_obj_t
 
mp_obj_�t_�om_by�s_im�
(
bo�
 
big_�d�n
, 
size_t
 
�n
, cڡ 
by�
 *
buf
);

59 
bo�
 
mp_obj_�t_to_by�s_im�
(
mp_obj_t
 
�lf_�
, bo� 
big_�d�n
, 
size_t
 
�n
, 
by�
 *
buf
);

60 
mp_obj_�t_sign
(
mp_obj_t
 
�lf_�
);

61 
mp_obj_t
 
mp_obj_�t_u�ry_�
(
mp_u�ry_�_t
 
�
, mp_obj_�
o_�
);

62 
mp_obj_t
 
mp_obj_�t_b��y_�
(
mp_b��y_�_t
 
�
, mp_obj_�
lhs_�
, mp_obj_�
rhs_�
);

63 
mp_obj_t
 
mp_obj_�t_b��y_�_ex�a_��s
(
mp_b��y_�_t
 
�
, mp_obj_�
lhs_�
, mp_obj_�
rhs_�
);

64 
mp_obj_t
 
mp_obj_�t_pow3
(mp_obj_�
ba�
, mp_obj_�
expڒt
, mp_obj_�
modulus
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint_longlong.c

28 
	~<�dlib.h
>

29 
	~<�r�g.h
>

31 
	~"py/sm�l�t.h
"

32 
	~"py/obj�t.h
"

33 
	~"py/ru�ime.h
"

35 #i�
MICROPY_PY_BUILTINS_FLOAT


36 
	~<m�h.h
>

39 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_LONGLONG


41 #i�
MICROPY_PY_SYS_MAXSIZE


43 cڡ 
mp_obj_�t_t
 
	gmp_sys_maxsize_obj
 = {{&
mp_ty�_�t
}, 
MP_SSIZE_MAX
};

46 
mp_obj_t
 
	$mp_obj_�t_�om_by�s_im�
(
bo�
 
big_�d�n
, 
size_t
 
�n
, cڡ 
by�
 *
buf
) {

47 
d��
 = 1;

48 i�(!
big_�d�n
) {

49 
buf
 +�
�n
 - 1;

50 
d��
 = -1;

53 
mp_l�g�t_im�_t
 
v�ue
 = 0;

54 ; 
�n
--; 
buf
 +�
d��
) {

55 
v�ue
 = (v�u�<< 8�| *
buf
;

57  
	`mp_obj_�w_�t_�om_�
(
v�ue
);

58 
	}
}

60 
bo�
 
	$mp_obj_�t_to_by�s_im�
(
mp_obj_t
 
�lf_�
, 
bo�
 
big_�d�n
, 
size_t
 
�n
, 
by�
 *
buf
) {

61 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

62 
mp_obj_�t_t
 *
�lf
 = 
�lf_�
;

63 
v�
 = 
�lf
->val;

64 
size_t
 
��
;

67 i�(
v�
 > 0) {

68 
��
 = ((�* 8 - 
	`mp_�z�
(
v�
) + 7) / 8;

69 } i�(
v�
 < -1) {

70 
��
 = ((�* 8 - 
	`mp_�z�
(~
v�
) + 8) / 8;

73 
��
 = -
v�
;

76 i�(
��
 > 
�n
) {

77  
�l�
;

81 i�(
big_�d�n
) {

82 
by�
 *
b
 = 
buf
 + 
�n
;

83 
b
 > 
buf
) {

84 *--
b
 = 
v�
;

85 
v�
 >>= 8;

88 ; 
�n
 > 0; --len) {

89 *
buf
++ = 
v�
;

90 
v�
 >>= 8;

93  
�ue
;

94 
	}
}

96 
	$mp_obj_�t_sign
(
mp_obj_t
 
�lf_�
) {

97 
mp_l�g�t_im�_t
 
v�
;

98 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

99 
v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

101 
mp_obj_�t_t
 *
�lf
 = 
�lf_�
;

102 
v�
 = 
�lf
->val;

104 i�(
v�
 < 0) {

106 } i�(
v�
 > 0) {

111 
	}
}

113 
mp_obj_t
 
	$mp_obj_�t_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

114 
mp_obj_�t_t
 *
o
 = 
o_�
;

115 
�
) {

116 
MP_UNARY_OP_BOOL
:

117  
	`mp_obj_�w_bo�
(
o
->
v�
 != 0);

121 
MP_UNARY_OP_HASH
:

122  
	`MP_OBJ_NEW_SMALL_INT
((
mp_�t_t
)
o
->
v�
);

124 
MP_UNARY_OP_POSITIVE
:

125  
o_�
;

126 
MP_UNARY_OP_NEGATIVE
:

127  
	`mp_obj_�w_�t_�om_�
(-
o
->
v�
);

128 
MP_UNARY_OP_INVERT
:

129  
	`mp_obj_�w_�t_�om_�
(~
o
->
v�
);

130 
MP_UNARY_OP_ABS
: {

131 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

132 i�(
�lf
->
v�
 >= 0) {

133  
o_�
;

135 
�lf
 = 
	`mp_obj_�w_�t_�om_�
(�lf->
v�
);

137 
�lf
->
v�
 = -self->val;

138  
	`MP_OBJ_FROM_PTR
(
�lf
);

140 
MP_UNARY_OP_INT_MAYBE
:

141  
o_�
;

143  
MP_OBJ_NULL
;

145 
	}
}

147 
mp_obj_t
 
	$mp_obj_�t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

148 
lhs_v�
;

149 
rhs_v�
;

151 i�(
	`mp_obj_is_sm�l_�t
(
lhs_�
)) {

152 
lhs_v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
lhs_�
);

154 
	`as��
(
	`mp_obj_is_exa�_ty�
(
lhs_�
, &
mp_ty�_�t
));

155 
lhs_v�
 = ((
mp_obj_�t_t
 *)
lhs_�
)->
v�
;

158 i�(
	`mp_obj_is_sm�l_�t
(
rhs_�
)) {

159 
rhs_v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
rhs_�
);

160 } i�(
	`mp_obj_is_exa�_ty�
(
rhs_�
, &
mp_ty�_�t
)) {

161 
rhs_v�
 = ((
mp_obj_�t_t
 *)
rhs_�
)->
v�
;

164  
	`mp_obj_�t_b��y_�_ex�a_��s
(
�
, 
lhs_�
, 
rhs_�
);

167 
�
) {

168 
MP_BINARY_OP_ADD
:

169 
MP_BINARY_OP_INPLACE_ADD
:

170  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 + 
rhs_v�
);

171 
MP_BINARY_OP_SUBTRACT
:

172 
MP_BINARY_OP_INPLACE_SUBTRACT
:

173  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 - 
rhs_v�
);

174 
MP_BINARY_OP_MULTIPLY
:

175 
MP_BINARY_OP_INPLACE_MULTIPLY
:

176  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 * 
rhs_v�
);

177 
MP_BINARY_OP_FLOOR_DIVIDE
:

178 
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
:

179 i�(
rhs_v�
 == 0) {

180 
z�o_divisi�
;

182  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 / 
rhs_v�
);

183 
MP_BINARY_OP_MODULO
:

184 
MP_BINARY_OP_INPLACE_MODULO
:

185 i�(
rhs_v�
 == 0) {

186 
z�o_divisi�
;

188  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 % 
rhs_v�
);

190 
MP_BINARY_OP_AND
:

191 
MP_BINARY_OP_INPLACE_AND
:

192  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 & 
rhs_v�
);

193 
MP_BINARY_OP_OR
:

194 
MP_BINARY_OP_INPLACE_OR
:

195  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 | 
rhs_v�
);

196 
MP_BINARY_OP_XOR
:

197 
MP_BINARY_OP_INPLACE_XOR
:

198  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 ^ 
rhs_v�
);

200 
MP_BINARY_OP_LSHIFT
:

201 
MP_BINARY_OP_INPLACE_LSHIFT
:

202  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 << ()
rhs_v�
);

203 
MP_BINARY_OP_RSHIFT
:

204 
MP_BINARY_OP_INPLACE_RSHIFT
:

205  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
 >> ()
rhs_v�
);

207 
MP_BINARY_OP_POWER
:

208 
MP_BINARY_OP_INPLACE_POWER
: {

209 i�(
rhs_v�
 < 0) {

210 #i�
MICROPY_PY_BUILTINS_FLOAT


211  
	`mp_obj_��t_b��y_�
(
�
, 
lhs_v�
, 
rhs_�
);

213 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative�ower with�o float support"));

216 
�s
 = 1;

217 
rhs_v�
 > 0) {

218 i�(
rhs_v�
 & 1) {

219 
�s
 *�
lhs_v�
;

221 i�(
rhs_v�
 == 1) {

224 
rhs_v�
 /= 2;

225 
lhs_v�
 *=�hs_val;

227  
	`mp_obj_�w_�t_�om_�
(
�s
);

230 
MP_BINARY_OP_LESS
:

231  
	`mp_obj_�w_bo�
(
lhs_v�
 < 
rhs_v�
);

232 
MP_BINARY_OP_MORE
:

233  
	`mp_obj_�w_bo�
(
lhs_v�
 > 
rhs_v�
);

234 
MP_BINARY_OP_LESS_EQUAL
:

235  
	`mp_obj_�w_bo�
(
lhs_v�
 <�
rhs_v�
);

236 
MP_BINARY_OP_MORE_EQUAL
:

237  
	`mp_obj_�w_bo�
(
lhs_v�
 >�
rhs_v�
);

238 
MP_BINARY_OP_EQUAL
:

239  
	`mp_obj_�w_bo�
(
lhs_v�
 =�
rhs_v�
);

242  
MP_OBJ_NULL
;

245 
z�o_divisi�
:

246 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("divide by zero"));

247 
	}
}

249 
mp_obj_t
 
	$mp_obj_�w_�t
(
mp_�t_t
 
v�ue
) {

250  
	`mp_obj_�w_�t_�om_�
(
v�ue
);

251 
	}
}

253 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�t
(
mp_u�t_t
 
v�ue
) {

254  
	`mp_obj_�w_�t_�om_�
(
v�ue
);

255 
	}
}

257 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�
(
v�
) {

258 i�(()(
mp_�t_t
)
v�
 =�v� && 
	`MP_SMALL_INT_FITS
(val)) {

259  
	`MP_OBJ_NEW_SMALL_INT
(
v�
);

262 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�t_t, &
mp_ty�_�t
);

263 
o
->
v�
 = val;

264  
	`MP_OBJ_FROM_PTR
(
o
);

265 
	}
}

267 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�
(
v�
) {

269 i�(
v�
 >> (() * 8 - 1) != 0) {

270 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("ulonglong�oo�arge"));

272  
	`mp_obj_�w_�t_�om_�
(
v�
);

273 
	}
}

275 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�r_�n
(cڡ **
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
) {

278 *
�d�r
;

279 
mp_obj_t
 
�su�
 = 
	`mp_obj_�w_�t_�om_�
(
	`���l
(*
�r
, &
�d�r
, 
ba�
));

280 *
�r
 = 
�d�r
;

281  
�su�
;

282 
	}
}

284 
mp_�t_t
 
	$mp_obj_�t_g�_�un��d
(
mp_cڡ_obj_t
 
�lf_�
) {

285 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

286  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

288 cڡ 
mp_obj_�t_t
 *
�lf
 = 
�lf_�
;

289  
�lf
->
v�
;

291 
	}
}

293 
mp_�t_t
 
	$mp_obj_�t_g�_checked
(
mp_cڡ_obj_t
 
�lf_�
) {

295  
	`mp_obj_�t_g�_�un��d
(
�lf_�
);

296 
	}
}

298 #i�
MICROPY_PY_BUILTINS_FLOAT


299 
mp_��t_t
 
	$mp_obj_�t_as_��t_im�
(
mp_obj_t
 
�lf_�
) {

300 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

301 
mp_obj_�t_t
 *
�lf
 = 
�lf_�
;

302  
�lf
->
v�
;

303 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint_mpz.c

27 
	~<�r�g.h
>

28 
	~<�dio.h
>

29 
	~<as��.h
>

31 
	~"py/�r�numba�.h
"

32 
	~"py/sm�l�t.h
"

33 
	~"py/obj�t.h
"

34 
	~"py/ru�ime.h
"

36 #i�
MICROPY_PY_BUILTINS_FLOAT


37 
	~<m�h.h
>

40 #i�
MICROPY_LONGINT_IMPL
 =�
MICROPY_LONGINT_IMPL_MPZ


42 #i�
MICROPY_PY_SYS_MAXSIZE


45 
	#DIG_MASK
 ((
MPZ_LONG_1
 << 
MPZ_DIG_SIZE
�- 1)

	)

46 cڡ 
mpz_dig_t
 
	gmaxsize_dig
[] = {

47 
	#NUM_DIG
 1

	)

48 (
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 0�& 
DIG_MASK
,

49 #i�(
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 0�> 
DIG_MASK


50 #unde�
NUM_DIG


51 
	#NUM_DIG
 2

	)

52 (
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 1�& 
DIG_MASK
,

53 #i�(
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 1�> 
DIG_MASK


54 #unde�
NUM_DIG


55 
	#NUM_DIG
 3

	)

56 (
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 2�& 
DIG_MASK
,

57 #i�(
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 2�> 
DIG_MASK


58 #unde�
NUM_DIG


59 
	#NUM_DIG
 4

	)

60 (
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 3�& 
DIG_MASK
,

61 #i�(
MP_SSIZE_MAX
 >> 
MPZ_DIG_SIZE
 * 3�> 
DIG_MASK


62 #�r� 
���
 
�code
 
MP_SSIZE_MAX
 
as
 
mpz


69 cڡ 
mp_obj_�t_t
 
	gmp_sys_maxsize_obj
 = {

70 {&
mp_ty�_�t
},

71 {.
fixed_dig
 = 1, .
	g�n
 = 
NUM_DIG
, .
	g�loc
 = NUM_DIG, .
	gdig
 = (
mpz_dig_t
 *)
maxsize_dig
}

73 #unde�
DIG_MASK


74 #unde�
NUM_DIG


77 
mp_obj_�t_t
 *
	$mp_obj_�t_�w_mpz
() {

78 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�t_t, &
mp_ty�_�t
);

79 
	`mpz_��_z�o
(&
o
->
mpz
);

80  
o
;

81 
	}
}

92 *
	$mp_obj_�t_f�m��d_im�
(**
buf
, 
size_t
 *
buf_size
, size_�*
fmt_size
, 
mp_cڡ_obj_t
 
�lf_�
,

93 
ba�
, cڡ *
�efix
, 
ba�_ch�
, 
comma
) {

94 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

95 cڡ 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

97 
size_t
 
�eded_size
 = 
	`mp_�t_f�m�_size
(
	`mpz_max_num_b�s
(&
�lf
->
mpz
), 
ba�
, 
�efix
, 
comma
);

98 i�(
�eded_size
 > *
buf_size
) {

99 *
buf
 = 
	`m_�w
(, 
�eded_size
);

100 *
buf_size
 = 
�eded_size
;

102 *
�r
 = *
buf
;

104 *
fmt_size
 = 
	`mpz_as_�r_��
(&
�lf
->
mpz
, 
ba�
, 
�efix
, 
ba�_ch�
, 
comma
, 
�r
);

106  
�r
;

107 
	}
}

109 
mp_obj_t
 
	$mp_obj_�t_�om_by�s_im�
(
bo�
 
big_�d�n
, 
size_t
 
�n
, cڡ 
by�
 *
buf
) {

110 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_�t_�w_mpz
();

111 
	`mpz_�t_�om_by�s
(&
o
->
mpz
, 
big_�d�n
, 
�n
, 
buf
);

112  
	`MP_OBJ_FROM_PTR
(
o
);

113 
	}
}

115 
bo�
 
	$mp_obj_�t_to_by�s_im�
(
mp_obj_t
 
�lf_�
, 
bo�
 
big_�d�n
, 
size_t
 
�n
, 
by�
 *
buf
) {

116 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

117 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

118  
	`mpz_as_by�s
(&
�lf
->
mpz
, 
big_�d�n
, s�f->mpz.
�g
, 
�n
, 
buf
);

119 
	}
}

121 
	$mp_obj_�t_sign
(
mp_obj_t
 
�lf_�
) {

122 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

123 
mp_�t_t
 
v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

124 i�(
v�
 < 0) {

126 } i�(
v�
 > 0) {

132 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

133 i�(
�lf
->
mpz
.
�n
 == 0) {

135 } i�(
�lf
->
mpz
.
�g
 == 0) {

140 
	}
}

142 
mp_obj_t
 
	$mp_obj_�t_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

143 
mp_obj_�t_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

144 
�
) {

145 
MP_UNARY_OP_BOOL
:

146  
	`mp_obj_�w_bo�
(!
	`mpz_is_z�o
(&
o
->
mpz
));

147 
MP_UNARY_OP_HASH
:

148  
	`MP_OBJ_NEW_SMALL_INT
(
	`mpz_hash
(&
o
->
mpz
));

149 
MP_UNARY_OP_POSITIVE
:

150  
o_�
;

151 
MP_UNARY_OP_NEGATIVE
: { 
mp_obj_�t_t
 *
o2
 = 
	`mp_obj_�t_�w_mpz
();

152 
	`mpz_�g_��
(&
o2
->
mpz
, &
o
->mpz);

153  
	`MP_OBJ_FROM_PTR
(
o2
);

155 
MP_UNARY_OP_INVERT
: { 
mp_obj_�t_t
 *
o2
 = 
	`mp_obj_�t_�w_mpz
();

156 
	`mpz_n�_��
(&
o2
->
mpz
, &
o
->mpz);

157  
	`MP_OBJ_FROM_PTR
(
o2
);

159 
MP_UNARY_OP_ABS
: {

160 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

161 i�(
�lf
->
mpz
.
�g
 == 0) {

162  
o_�
;

164 
mp_obj_�t_t
 *
�lf2
 = 
	`mp_obj_�t_�w_mpz
();

165 
	`mpz_abs_��
(&
�lf2
->
mpz
, &
�lf
->mpz);

166  
	`MP_OBJ_FROM_PTR
(
�lf2
);

168 
MP_UNARY_OP_INT_MAYBE
:

169  
o_�
;

171  
MP_OBJ_NULL
;

173 
	}
}

175 
mp_obj_t
 
	$mp_obj_�t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

176 cڡ 
mpz_t
 *
zlhs
;

177 cڡ 
mpz_t
 *
zrhs
;

178 
mpz_t
 
z_�t
;

179 
mpz_dig_t
 
z_�t_dig
[
MPZ_NUM_DIG_FOR_INT
];

182 i�(
	`mp_obj_is_sm�l_�t
(
lhs_�
)) {

183 
	`mpz_��_fixed_�om_�t
(&
z_�t
, 
z_�t_dig
, 
MPZ_NUM_DIG_FOR_INT
, 
	`MP_OBJ_SMALL_INT_VALUE
(
lhs_�
));

184 
zlhs
 = &
z_�t
;

186 
	`as��
(
	`mp_obj_is_exa�_ty�
(
lhs_�
, &
mp_ty�_�t
));

187 
zlhs
 = &((
mp_obj_�t_t
 *)
	`MP_OBJ_TO_PTR
(
lhs_�
))->
mpz
;

191 i�(
	`mp_obj_is_sm�l_�t
(
rhs_�
)) {

192 
	`mpz_��_fixed_�om_�t
(&
z_�t
, 
z_�t_dig
, 
MPZ_NUM_DIG_FOR_INT
, 
	`MP_OBJ_SMALL_INT_VALUE
(
rhs_�
));

193 
zrhs
 = &
z_�t
;

194 } i�(
	`mp_obj_is_exa�_ty�
(
rhs_�
, &
mp_ty�_�t
)) {

195 
zrhs
 = &((
mp_obj_�t_t
 *)
	`MP_OBJ_TO_PTR
(
rhs_�
))->
mpz
;

196 #i�
MICROPY_PY_BUILTINS_FLOAT


197 } i�(
	`mp_obj_is_��t
(
rhs_�
)) {

198  
	`mp_obj_��t_b��y_�
(
�
, 
	`mpz_as_��t
(
zlhs
), 
rhs_�
);

200 #i�
MICROPY_PY_BUILTINS_COMPLEX


201 } i�(
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_com�ex
)) {

202  
	`mp_obj_com�ex_b��y_�
(
�
, 
	`mpz_as_��t
(
zlhs
), 0, 
rhs_�
);

206  
	`mp_obj_�t_b��y_�_ex�a_��s
(
�
, 
lhs_�
, 
rhs_�
);

209 #i�
MICROPY_PY_BUILTINS_FLOAT


210 i�(
�
 =�
MP_BINARY_OP_TRUE_DIVIDE
 || o�=�
MP_BINARY_OP_INPLACE_TRUE_DIVIDE
) {

211 i�(
	`mpz_is_z�o
(
zrhs
)) {

212 
z�o_divisi�_�r�
;

214 
mp_��t_t
 
�hs
 = 
	`mpz_as_��t
(
zlhs
);

215 
mp_��t_t
 
�hs
 = 
	`mpz_as_��t
(
zrhs
);

216  
	`mp_obj_�w_��t
(
�hs
 / 
�hs
);

220 i�(
�
 >�
MP_BINARY_OP_INPLACE_OR
 && o�< 
MP_BINARY_OP_CONTAINS
) {

221 
mp_obj_�t_t
 *
�s
 = 
	`mp_obj_�t_�w_mpz
();

223 
�
) {

224 
MP_BINARY_OP_ADD
:

225 
MP_BINARY_OP_INPLACE_ADD
:

226 
	`mpz_add_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

228 
MP_BINARY_OP_SUBTRACT
:

229 
MP_BINARY_OP_INPLACE_SUBTRACT
:

230 
	`mpz_sub_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

232 
MP_BINARY_OP_MULTIPLY
:

233 
MP_BINARY_OP_INPLACE_MULTIPLY
:

234 
	`mpz_mul_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

236 
MP_BINARY_OP_FLOOR_DIVIDE
:

237 
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
: {

238 i�(
	`mpz_is_z�o
(
zrhs
)) {

239 
z�o_divisi�_�r�
:

240 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("divide by zero"));

242 
mpz_t
 
�m
;

243 
	`mpz_��_z�o
(&
�m
);

244 
	`mpz_divmod_��
(&
�s
->
mpz
, &
�m
, 
zlhs
, 
zrhs
);

245 
	`mpz_de��
(&
�m
);

248 
MP_BINARY_OP_MODULO
:

249 
MP_BINARY_OP_INPLACE_MODULO
: {

250 i�(
	`mpz_is_z�o
(
zrhs
)) {

251 
z�o_divisi�_�r�
;

253 
mpz_t
 
quo
;

254 
	`mpz_��_z�o
(&
quo
);

255 
	`mpz_divmod_��
(&
quo
, &
�s
->
mpz
, 
zlhs
, 
zrhs
);

256 
	`mpz_de��
(&
quo
);

260 
MP_BINARY_OP_AND
:

261 
MP_BINARY_OP_INPLACE_AND
:

262 
	`mpz_�d_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

264 
MP_BINARY_OP_OR
:

265 
MP_BINARY_OP_INPLACE_OR
:

266 
	`mpz_�_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

268 
MP_BINARY_OP_XOR
:

269 
MP_BINARY_OP_INPLACE_XOR
:

270 
	`mpz_x�_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

273 
MP_BINARY_OP_LSHIFT
:

274 
MP_BINARY_OP_INPLACE_LSHIFT
:

275 
MP_BINARY_OP_RSHIFT
:

276 
MP_BINARY_OP_INPLACE_RSHIFT
: {

277 
mp_�t_t
 
�hs
 = 
	`mp_obj_�t_g�_checked
(
rhs_�
);

278 i�(
�hs
 < 0) {

279 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative shift count"));

281 i�(
�
 =�
MP_BINARY_OP_LSHIFT
 || o�=�
MP_BINARY_OP_INPLACE_LSHIFT
) {

282 
	`mpz_shl_��
(&
�s
->
mpz
, 
zlhs
, 
�hs
);

284 
	`mpz_shr_��
(&
�s
->
mpz
, 
zlhs
, 
�hs
);

289 
MP_BINARY_OP_POWER
:

290 
MP_BINARY_OP_INPLACE_POWER
:

291 i�(
	`mpz_is_�g
(
zrhs
)) {

292 #i�
MICROPY_PY_BUILTINS_FLOAT


293  
	`mp_obj_��t_b��y_�
(
�
, 
	`mpz_as_��t
(
zlhs
), 
rhs_�
);

295 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative�ower with�o float support"));

298 
	`mpz_pow_��
(&
�s
->
mpz
, 
zlhs
, 
zrhs
);

301 
MP_BINARY_OP_DIVMOD
: {

302 i�(
	`mpz_is_z�o
(
zrhs
)) {

303 
z�o_divisi�_�r�
;

305 
mp_obj_�t_t
 *
quo
 = 
	`mp_obj_�t_�w_mpz
();

306 
	`mpz_divmod_��
(&
quo
->
mpz
, &
�s
->mpz, 
zlhs
, 
zrhs
);

307 
mp_obj_t
 
tu�e
[2] = {
	`MP_OBJ_FROM_PTR
(
quo
), MP_OBJ_FROM_PTR(
�s
)};

308  
	`mp_obj_�w_tu�e
(2, 
tu�e
);

312  
MP_OBJ_NULL
;

316 
mp_�t_t
 
�s_sm�l
;

317 i�(
	`mpz_as_�t_checked
(&
�s
->
mpz
, &
�s_sm�l
)) {

318 i�(
	`MP_SMALL_INT_FITS
(
�s_sm�l
)) {

319  
	`MP_OBJ_NEW_SMALL_INT
(
�s_sm�l
);

323  
	`MP_OBJ_FROM_PTR
(
�s
);

326 
cmp
 = 
	`mpz_cmp
(
zlhs
, 
zrhs
);

327 
�
) {

328 
MP_BINARY_OP_LESS
:

329  
	`mp_obj_�w_bo�
(
cmp
 < 0);

330 
MP_BINARY_OP_MORE
:

331  
	`mp_obj_�w_bo�
(
cmp
 > 0);

332 
MP_BINARY_OP_LESS_EQUAL
:

333  
	`mp_obj_�w_bo�
(
cmp
 <= 0);

334 
MP_BINARY_OP_MORE_EQUAL
:

335  
	`mp_obj_�w_bo�
(
cmp
 >= 0);

336 
MP_BINARY_OP_EQUAL
:

337  
	`mp_obj_�w_bo�
(
cmp
 == 0);

340  
MP_OBJ_NULL
;

343 
	}
}

345 #i�
MICROPY_PY_BUILTINS_POW3


346 
mpz_t
 *
	$mp_mpz_f�_�t
(
mp_obj_t
 
�g
, 
mpz_t
 *
�mp
) {

347 i�(
	`mp_obj_is_sm�l_�t
(
�g
)) {

348 
	`mpz_��_�om_�t
(
�mp
, 
	`MP_OBJ_SMALL_INT_VALUE
(
�g
));

349  
�mp
;

351 
mp_obj_�t_t
 *
�p_p
 = 
	`MP_OBJ_TO_PTR
(
�g
);

352  &(
�p_p
->
mpz
);

354 
	}
}

356 
mp_obj_t
 
	$mp_obj_�t_pow3
(
mp_obj_t
 
ba�
, mp_obj_�
expڒt
, mp_obj_�
modulus
) {

357 i�(!
	`mp_obj_is_�t
(
ba�
�|| !mp_obj_is_�t(
expڒt
�|| !mp_obj_is_�t(
modulus
)) {

358 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("pow() with 3�rguments�equires integers"));

360 
mp_obj_t
 
�su�
 = 
	`mp_obj_�w_�t_�om_u�
(0);

361 
mp_obj_�t_t
 *
�s_p
 = (mp_obj_�t_�*)
	`MP_OBJ_TO_PTR
(
�su�
);

363 
mpz_t
 
l_�mp
, 
r_�mp
, 
m_�mp
;

364 
mpz_t
 *
lhs
 = 
	`mp_mpz_f�_�t
(
ba�
, &
l_�mp
);

365 
mpz_t
 *
rhs
 = 
	`mp_mpz_f�_�t
(
expڒt
, &
r_�mp
);

366 
mpz_t
 *
mod
 = 
	`mp_mpz_f�_�t
(
modulus
, &
m_�mp
);

368 
	`mpz_pow3_��
(&(
�s_p
->
mpz
), 
lhs
, 
rhs
, 
mod
);

370 i�(
lhs
 =�&
l_�mp
) {

371 
	`mpz_de��
(
lhs
);

373 i�(
rhs
 =�&
r_�mp
) {

374 
	`mpz_de��
(
rhs
);

376 i�(
mod
 =�&
m_�mp
) {

377 
	`mpz_de��
(
mod
);

379  
�su�
;

381 
	}
}

384 
mp_obj_t
 
	$mp_obj_�w_�t
(
mp_�t_t
 
v�ue
) {

385 i�(
	`MP_SMALL_INT_FITS
(
v�ue
)) {

386  
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
);

388  
	`mp_obj_�w_�t_�om_�
(
v�ue
);

389 
	}
}

391 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�
(
v�
) {

392 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_�t_�w_mpz
();

393 
	`mpz_�t_�om_�
(&
o
->
mpz
, 
v�
, 
�ue
);

394  
	`MP_OBJ_FROM_PTR
(
o
);

395 
	}
}

397 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�
(
v�
) {

398 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_�t_�w_mpz
();

399 
	`mpz_�t_�om_�
(&
o
->
mpz
, 
v�
, 
�l�
);

400  
	`MP_OBJ_FROM_PTR
(
o
);

401 
	}
}

403 
mp_obj_t
 
	$mp_obj_�w_�t_�om_u�t
(
mp_u�t_t
 
v�ue
) {

406 i�((
v�ue
 & ~
MP_SMALL_INT_POSITIVE_MASK
) == 0) {

407  
	`MP_OBJ_NEW_SMALL_INT
(
v�ue
);

409  
	`mp_obj_�w_�t_�om_u�
(
v�ue
);

410 
	}
}

412 
mp_obj_t
 
	$mp_obj_�w_�t_�om_�r_�n
(cڡ **
�r
, 
size_t
 
�n
, 
bo�
 
�g
, 
ba�
) {

413 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_�t_�w_mpz
();

414 
size_t
 
n
 = 
	`mpz_�t_�om_�r
(&
o
->
mpz
, *
�r
, 
�n
, 
�g
, 
ba�
);

415 *
�r
 +�
n
;

416  
	`MP_OBJ_FROM_PTR
(
o
);

417 
	}
}

419 
mp_�t_t
 
	$mp_obj_�t_g�_�un��d
(
mp_cڡ_obj_t
 
�lf_�
) {

420 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

421  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

423 cڡ 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

425  
	`mpz_hash
(&
�lf
->
mpz
);

427 
	}
}

429 
mp_�t_t
 
	$mp_obj_�t_g�_checked
(
mp_cڡ_obj_t
 
�lf_�
) {

430 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

431  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

433 cڡ 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

434 
mp_�t_t
 
v�ue
;

435 i�(
	`mpz_as_�t_checked
(&
�lf
->
mpz
, &
v�ue
)) {

440  
v�ue
;

443 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("overflow converting�ong int�o machine word"));

446 
	}
}

448 
mp_u�t_t
 
	$mp_obj_�t_g�_u�t_checked
(
mp_cڡ_obj_t
 
�lf_�
) {

449 i�(
	`mp_obj_is_sm�l_�t
(
�lf_�
)) {

450 i�(
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
) >= 0) {

451  
	`MP_OBJ_SMALL_INT_VALUE
(
�lf_�
);

454 cڡ 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

455 
mp_u�t_t
 
v�ue
;

456 i�(
	`mpz_as_u�t_checked
(&
�lf
->
mpz
, &
v�ue
)) {

457  
v�ue
;

461 
	`mp_�i�_msg
(&
mp_ty�_Ov��owE��
, 
	`MP_ERROR_TEXT
("overflow converting�ong int�o machine word"));

462 
	}
}

464 #i�
MICROPY_PY_BUILTINS_FLOAT


465 
mp_��t_t
 
	$mp_obj_�t_as_��t_im�
(
mp_obj_t
 
�lf_�
) {

466 
	`as��
(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�t
));

467 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

468  
	`mpz_as_��t
(&
�lf
->
mpz
);

469 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objlist.c

27 
	~<�r�g.h
>

28 
	~<as��.h
>

30 
	~"py/objli�.h
"

31 
	~"py/ru�ime.h
"

32 
	~"py/c�ack.h
"

34 
mp_obj_t
 
mp_obj_�w_li�_����
(mp_obj_�
li�
, 
size_t
 
cur
, 
mp_obj_��_buf_t
 *
��_buf
);

35 
mp_obj_li�_t
 *
li�_�w
(
size_t
 
n
);

36 
mp_obj_t
 
li�_ex�nd
(mp_obj_�
�lf_�
, mp_obj_�
�g_�
);

37 
mp_obj_t
 
li�_p�
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

40 
	#LIST_MIN_ALLOC
 4

	)

45 
	$li�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

46 
mp_obj_li�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

47 cڡ *
�em_���t�
 = ", ";

48 i�(!(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
)) {

49 
k�d
 = 
PRINT_REPR
;

51 #i�
MICROPY_PY_JSON_SEPARATORS


52 
�em_���t�
 = 
	`MP_PRINT_GET_EXT
(
��t
)->item_separator;

55 
	`mp_��t_�r
(
��t
, "[");

56 
size_t
 
i
 = 0; i < 
o
->
�n
; i++) {

57 i�(
i
 > 0) {

58 
	`mp_��t_�r
(
��t
, 
�em_���t�
);

60 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�ems
[
i
], 
k�d
);

62 
	`mp_��t_�r
(
��t
, "]");

63 
	}
}

65 
mp_obj_t
 
	$li�_ex�nd_�om_��
(
mp_obj_t
 
li�
, mp_obj_�
��ab�
) {

66 
mp_obj_t
 
��
 = 
	`mp_g���
(
��ab�
, 
NULL
);

67 
mp_obj_t
 
�em
;

68 (
�em
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

69 
	`mp_obj_li�_��nd
(
li�
, 
�em
);

71  
li�
;

72 
	}
}

74 
mp_obj_t
 
	$mp_obj_li�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

75 ()
ty�_�
;

76 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 1, 
�l�
);

78 
n_�gs
) {

81  
	`mp_obj_�w_li�
(0, 
NULL
);

87 
mp_obj_t
 
li�
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

88  
	`li�_ex�nd_�om_��
(
li�
, 
�gs
[0]);

91 
	}
}

93 
mp_obj_t
 
	$li�_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

94 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

95 
�
) {

96 
MP_UNARY_OP_BOOL
:

97  
	`mp_obj_�w_bo�
(
�lf
->
�n
 != 0);

98 
MP_UNARY_OP_LEN
:

99  
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
�n
);

100 #i�
MICROPY_PY_SYS_GETSIZEOF


101 
MP_UNARY_OP_SIZEOF
: {

102 
size_t
 
sz
 = (*
�lf
�+ (
mp_obj_t
�* s�f->
�loc
;

103  
	`MP_OBJ_NEW_SMALL_INT
(
sz
);

107  
MP_OBJ_NULL
;

109 
	}
}

111 
mp_obj_t
 
	$li�_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs
, mp_obj_�
rhs
) {

112 
mp_obj_li�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
lhs
);

113 
�
) {

114 
MP_BINARY_OP_ADD
: {

115 i�(!
	`mp_obj_is_ty�
(
rhs
, &
mp_ty�_li�
)) {

116  
MP_OBJ_NULL
;

118 
mp_obj_li�_t
 *
p
 = 
	`MP_OBJ_TO_PTR
(
rhs
);

119 
mp_obj_li�_t
 *
s
 = 
	`li�_�w
(
o
->
�n
 + 
p
->len);

120 
	`mp_�q_�t
(
s
->
�ems
, 
o
->�ems, o->
�n
, 
p
->�ems,�->�n, 
mp_obj_t
);

121  
	`MP_OBJ_FROM_PTR
(
s
);

123 
MP_BINARY_OP_INPLACE_ADD
: {

124 
	`li�_ex�nd
(
lhs
, 
rhs
);

125  
lhs
;

127 
MP_BINARY_OP_MULTIPLY
: {

128 
mp_�t_t
 
n
;

129 i�(!
	`mp_obj_g�_�t_maybe
(
rhs
, &
n
)) {

130  
MP_OBJ_NULL
;

132 i�(
n
 < 0) {

133 
n
 = 0;

135 
mp_obj_li�_t
 *
s
 = 
	`li�_�w
(
o
->
�n
 * 
n
);

136 
	`mp_�q_muɝly
(
o
->
�ems
, (*o->�ems), o->
�n
, 
n
, 
s
->items);

137  
	`MP_OBJ_FROM_PTR
(
s
);

139 
MP_BINARY_OP_EQUAL
:

140 
MP_BINARY_OP_LESS
:

141 
MP_BINARY_OP_LESS_EQUAL
:

142 
MP_BINARY_OP_MORE
:

143 
MP_BINARY_OP_MORE_EQUAL
: {

144 i�(!
	`mp_obj_is_ty�
(
rhs
, &
mp_ty�_li�
)) {

145 i�(
�
 =�
MP_BINARY_OP_EQUAL
) {

146  
mp_cڡ_�l�
;

148  
MP_OBJ_NULL
;

151 
mp_obj_li�_t
 *
��h�
 = 
	`MP_OBJ_TO_PTR
(
rhs
);

152 
bo�
 
�s
 = 
	`mp_�q_cmp_objs
(
�
, 
o
->
�ems
, o->
�n
, 
��h�
->items,�nother->len);

153  
	`mp_obj_�w_bo�
(
�s
);

157  
MP_OBJ_NULL
;

159 
	}
}

161 
mp_obj_t
 
	$li�_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

162 i�(
v�ue
 =�
MP_OBJ_NULL
) {

164 #i�
MICROPY_PY_BUILTINS_SLICE


165 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

166 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

167 
mp_bound_�i�_t
 
�i�
;

168 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
�lf
->
�n
, 
�dex
, &
�i�
)) {

169 
	`mp_�i�_N�Im�em��dE��
(
NULL
);

172 
mp_�t_t
 
�n_adj
 = 
�i�
.
��t
 - sli�.
��
;

173 
	`as��
(
�n_adj
 <= 0);

174 
	`mp_�q_��a�_�i�_no_grow
(
�lf
->
�ems
, s�f->
�n
, 
�i�
.
��t
, sli�.
��
, self->items , 0, (*self->items));

176 
	`mp_�q_��r
(
�lf
->
�ems
, s�f->
�n
 + 
�n_adj
, self->len, (*self->items));

177 
�lf
->
�n
 +�
�n_adj
;

178  
mp_cڡ_n�e
;

181 
mp_obj_t
 
�gs
[2] = {
�lf_�
, 
�dex
};

182 
	`li�_p�
(2, 
�gs
);

183  
mp_cڡ_n�e
;

184 } i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

186 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

187 #i�
MICROPY_PY_BUILTINS_SLICE


188 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

189 
mp_bound_�i�_t
 
�i�
;

190 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
�lf
->
�n
, 
�dex
, &
�i�
)) {

191  
	`mp_�q_ex�a�_�i�
(
�lf
->
�ems
, &
�i�
);

193 
mp_obj_li�_t
 *
�s
 = 
	`li�_�w
(
�i�
.
��
 - sli�.
��t
);

194 
	`mp_�q_c�y
(
�s
->
�ems
, 
�lf
->�em�+ 
�i�
.
��t
,�es->
�n
, 
mp_obj_t
);

195  
	`MP_OBJ_FROM_PTR
(
�s
);

198 
size_t
 
�dex_v�
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, s�f->
�n
, 
�dex
, 
�l�
);

199  
�lf
->
�ems
[
�dex_v�
];

201 #i�
MICROPY_PY_BUILTINS_SLICE


202 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

203 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

204 
size_t
 
v�ue_�n
;

205 
mp_obj_t
 *
v�ue_�ems
;

206 
	`mp_obj_g�_��y
(
v�ue
, &
v�ue_�n
, &
v�ue_�ems
);

207 
mp_bound_�i�_t
 
�i�_out
;

208 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
�lf
->
�n
, 
�dex
, &
�i�_out
)) {

209 
	`mp_�i�_N�Im�em��dE��
(
NULL
);

211 
mp_�t_t
 
�n_adj
 = 
v�ue_�n
 - (
�i�_out
.
��
 - sli�_out.
��t
);

212 i�(
�n_adj
 > 0) {

213 i�(
�lf
->
�n
 + 
�n_adj
 > s�f->
�loc
) {

216 
�lf
->
�ems
 = 
	`m_��w
(
mp_obj_t
, s�f->�ems, s�f->
�loc
, s�f->
�n
 + 
�n_adj
);

217 
�lf
->
�loc
 = s�f->
�n
 + 
�n_adj
;

219 
	`mp_�q_��a�_�i�_grow_��a�
(
�lf
->
�ems
, s�f->
�n
,

220 
�i�_out
.
��t
, sli�_out.
��
, 
v�ue_�ems
, 
v�ue_�n
, 
�n_adj
, (*
�lf
->
�ems
));

222 
	`mp_�q_��a�_�i�_no_grow
(
�lf
->
�ems
, s�f->
�n
,

223 
�i�_out
.
��t
, sli�_out.
��
, 
v�ue_�ems
, 
v�ue_�n
, (*
�lf
->
�ems
));

225 
	`mp_�q_��r
(
�lf
->
�ems
, s�f->
�n
 + 
�n_adj
, self->len, (*self->items));

228 
�lf
->
�n
 +�
�n_adj
;

229  
mp_cڡ_n�e
;

232 
	`mp_obj_li�_��e
(
�lf_�
, 
�dex
, 
v�ue
);

233  
mp_cڡ_n�e
;

235 
	}
}

237 
mp_obj_t
 
	$li�_g���
(
mp_obj_t
 
o_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

238  
	`mp_obj_�w_li�_����
(
o_�
, 0, 
��_buf
);

239 
	}
}

241 
mp_obj_t
 
	$mp_obj_li�_��nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

242 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

243 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

244 i�(
�lf
->
�n
 >�lf->
�loc
) {

245 
�lf
->
�ems
 = 
	`m_��w
(
mp_obj_t
, s�f->�ems, s�f->
�loc
, self->alloc * 2);

246 
�lf
->
�loc
 *= 2;

247 
	`mp_�q_��r
(
�lf
->
�ems
, s�f->
�n
 + 1, s�f->
�loc
, (*self->items));

249 
�lf
->
�ems
[�lf->
�n
++] = 
�g
;

250  
mp_cڡ_n�e
;

251 
	}
}

253 
mp_obj_t
 
	$li�_ex�nd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g_�
) {

254 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

255 i�(
	`mp_obj_is_ty�
(
�g_�
, &
mp_ty�_li�
)) {

256 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

257 
mp_obj_li�_t
 *
�g
 = 
	`MP_OBJ_TO_PTR
(
�g_�
);

259 i�(
�lf
->
�n
 + 
�g
->��> s�f->
�loc
) {

261 
�lf
->
�ems
 = 
	`m_��w
(
mp_obj_t
, s�f->�ems, s�f->
�loc
, s�f->
�n
 + 
�g
->len + 4);

262 
�lf
->
�loc
 = s�f->
�n
 + 
�g
->len + 4;

263 
	`mp_�q_��r
(
�lf
->
�ems
, s�f->
�n
 + 
�g
->�n, s�f->
�loc
, (*self->items));

266 
	`mem�y
(
�lf
->
�ems
 + s�f->
�n
, 
�g
->�ems, (
mp_obj_t
) *�rg->len);

267 
�lf
->
�n
 +�
�g
->len;

269 
	`li�_ex�nd_�om_��
(
�lf_�
, 
�g_�
);

271  
mp_cڡ_n�e
;

272 
	}
}

274 
mp_obj_t
 
	$li�_p�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

275 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_li�
));

276 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

277 i�(
�lf
->
�n
 == 0) {

278 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("pop from�mpty�ist"));

280 
size_t
 
�dex
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, s�f->
�n
, 
n_�gs
 =�1 ? 
	`MP_OBJ_NEW_SMALL_INT
(-1�: 
�gs
[1], 
�l�
);

281 
mp_obj_t
 
�t
 = 
�lf
->
�ems
[
�dex
];

282 
�lf
->
�n
 -= 1;

283 
	`memmove
(
�lf
->
�ems
 + 
�dex
, s�f->�em�+ index + 1, (�lf->
�n
 - index�* (
mp_obj_t
));

285 
�lf
->
�ems
[�lf->
�n
] = 
MP_OBJ_NULL
;

286 i�(
�lf
->
�loc
 > 
LIST_MIN_ALLOC
 && s�f->�lo�> 2 * s�f->
�n
) {

287 
�lf
->
�ems
 = 
	`m_��w
(
mp_obj_t
, s�f->�ems, s�f->
�loc
, self->alloc / 2);

288 
�lf
->
�loc
 /= 2;

290  
�t
;

291 
	}
}

293 
	$mp_quicks�t
(
mp_obj_t
 *
h�d
, mp_obj_�*
��
, mp_obj_�
key_�
, mp_obj_�
b��_�ss_�su�
) {

294 
	`mp_c�ack_check
();

295 
h�d
 < 
��
) {

296 
mp_obj_t
 *
h
 = 
h�d
 - 1;

297 
mp_obj_t
 *
t
 = 
��
;

298 
mp_obj_t
 
v
 = 
key_�
 =�
MP_OBJ_NULL
 ? 
��
[0] : 
	`mp_��_fun�i�_1
(key_fn,�ail[0]);

300 d�{++
h
;

301 } 
h
 < 
t
 && 
	`mp_b��y_�
(
MP_BINARY_OP_LESS
, 
key_�
 =�
MP_OBJ_NULL
 ? h[0] : 
	`mp_��_fun�i�_1
(key_�, h[0]), 
v
�=�
b��_�ss_�su�
);

302 d�{--
t
;

303 } 
h
 < 
t
 && 
	`mp_b��y_�
(
MP_BINARY_OP_LESS
, 
v
, 
key_�
 =�
MP_OBJ_NULL
 ?�[0] : 
	`mp_��_fun�i�_1
(key_�,�[0])�=�
b��_�ss_�su�
);

304 i�(
h
 >�
t
) {

307 
mp_obj_t
 
x
 = 
h
[0];

308 
h
[0] = 
t
[0];

309 
t
[0] = 
x
;

311 
mp_obj_t
 
x
 = 
h
[0];

312 
h
[0] = 
��
[0];

313 
��
[0] = 
x
;

315 i�(
t
 - 
h�d
 < 
��
 - 
h
 - 1) {

316 
	`mp_quicks�t
(
h�d
, 
t
, 
key_�
, 
b��_�ss_�su�
);

317 
h�d
 = 
h
 + 1;

319 
	`mp_quicks�t
(
h
 + 1, 
��
, 
key_�
, 
b��_�ss_�su�
);

320 
��
 = 
t
;

323 
	}
}

326 
mp_obj_t
 
	$mp_obj_li�_s�t
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
) {

327 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

328 { 
MP_QSTR_key
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
MP_ROM_NONE
} },

329 { 
MP_QSTR_�v��
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_BOOL
, {.
u_bo�
 = 
�l�
} },

334 
mp_�g_v�_t
 
key
, 
�v��
;

335 } 
�gs
;

336 
	`mp_�g_�r�_�l
(
n_�gs
 - 1, 
pos_�gs
 + 1, 
kw_�gs
,

337 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, (
mp_�g_v�_t
 *)&
�gs
);

339 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
pos_�gs
[0], &
mp_ty�_li�
));

340 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
pos_�gs
[0]);

342 i�(
�lf
->
�n
 > 1) {

343 
	`mp_quicks�t
(
�lf
->
�ems
, s�f->�em�+ s�f->
�n
 - 1,

344 
�gs
.
key
.
u_obj
 =�
mp_cڡ_n�e
 ? 
MP_OBJ_NULL
 :�rgs.key.u_obj,

345 
�gs
.
�v��
.
u_bo�
 ? 
mp_cڡ_�l�
 : 
mp_cڡ_�ue
);

348  
mp_cڡ_n�e
;

349 
	}
}

351 
mp_obj_t
 
	$li�_��r
(
mp_obj_t
 
�lf_�
) {

352 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

353 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

354 
�lf
->
�n
 = 0;

355 
�lf
->
�ems
 = 
	`m_��w
(
mp_obj_t
, s�f->�ems, s�f->
�loc
, 
LIST_MIN_ALLOC
);

356 
�lf
->
�loc
 = 
LIST_MIN_ALLOC
;

357 
	`mp_�q_��r
(
�lf
->
�ems
, 0, s�f->
�loc
, (*self->items));

358  
mp_cڡ_n�e
;

359 
	}
}

361 
mp_obj_t
 
	$li�_c�y
(
mp_obj_t
 
�lf_�
) {

362 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

363 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

364  
	`mp_obj_�w_li�
(
�lf
->
�n
, s�f->
�ems
);

365 
	}
}

367 
mp_obj_t
 
	$li�_cou�
(
mp_obj_t
 
�lf_�
, mp_obj_�
v�ue
) {

368 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

369 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

370  
	`mp_�q_cou�_obj
(
�lf
->
�ems
, s�f->
�n
, 
v�ue
);

371 
	}
}

373 
mp_obj_t
 
	$li�_�dex
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

374 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_li�
));

375 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

376  
	`mp_�q_�dex_obj
(
�lf
->
�ems
, s�f->
�n
, 
n_�gs
, 
�gs
);

377 
	}
}

379 
mp_obj_t
 
	$li�_���
(
mp_obj_t
 
�lf_�
, mp_obj_�
idx
, mp_obj_�
obj
) {

380 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

381 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

383 
mp_�t_t
 
�dex
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
idx
);

384 i�(
�dex
 < 0) {

385 
�dex
 +�
�lf
->
�n
;

387 i�(
�dex
 < 0) {

388 
�dex
 = 0;

390 i�((
size_t
)
�dex
 > 
�lf
->
�n
) {

391 
�dex
 = 
�lf
->
�n
;

394 
	`mp_obj_li�_��nd
(
�lf_�
, 
mp_cڡ_n�e
);

396 
mp_�t_t
 
i
 = 
�lf
->
�n
 - 1; i > 
�dex
; i--) {

397 
�lf
->
�ems
[
i
] = self->items[i - 1];

399 
�lf
->
�ems
[
�dex
] = 
obj
;

401  
mp_cڡ_n�e
;

402 
	}
}

404 
mp_obj_t
 
	$mp_obj_li�_�move
(
mp_obj_t
 
�lf_�
, mp_obj_�
v�ue
) {

405 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

406 
mp_obj_t
 
�gs
[] = {
�lf_�
, 
v�ue
};

407 
�gs
[1] = 
	`li�_�dex
(2,�rgs);

408 
	`li�_p�
(2, 
�gs
);

410  
mp_cڡ_n�e
;

411 
	}
}

413 
mp_obj_t
 
	$li�_�v��
(
mp_obj_t
 
�lf_�
) {

414 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_li�
));

415 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

417 
mp_�t_t
 
�n
 = 
�lf
->len;

418 
mp_�t_t
 
i
 = 0; i < 
�n
 / 2; i++) {

419 
mp_obj_t
 
a
 = 
�lf
->
�ems
[
i
];

420 
�lf
->
�ems
[
i
] = s�f->�ems[
�n
 - i - 1];

421 
�lf
->
�ems
[
�n
 - 
i
 - 1] = 
a
;

424  
mp_cڡ_n�e
;

425 
	}
}

427 
MP_DEFINE_CONST_FUN_OBJ_2
(
li�_��nd_obj
, 
mp_obj_li�_��nd
);

428 
MP_DEFINE_CONST_FUN_OBJ_2
(
li�_ex�nd_obj
, 
li�_ex�nd
);

429 
MP_DEFINE_CONST_FUN_OBJ_1
(
li�_��r_obj
, 
li�_��r
);

430 
MP_DEFINE_CONST_FUN_OBJ_1
(
li�_c�y_obj
, 
li�_c�y
);

431 
MP_DEFINE_CONST_FUN_OBJ_2
(
li�_cou�_obj
, 
li�_cou�
);

432 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
li�_�dex_obj
, 2, 4, 
li�_�dex
);

433 
MP_DEFINE_CONST_FUN_OBJ_3
(
li�_���_obj
, 
li�_���
);

434 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
li�_p�_obj
, 1, 2, 
li�_p�
);

435 
MP_DEFINE_CONST_FUN_OBJ_2
(
li�_�move_obj
, 
mp_obj_li�_�move
);

436 
MP_DEFINE_CONST_FUN_OBJ_1
(
li�_�v��_obj
, 
li�_�v��
);

437 
MP_DEFINE_CONST_FUN_OBJ_KW
(
li�_s�t_obj
, 1, 
mp_obj_li�_s�t
);

439 cڡ 
mp_rom_m�_�em_t
 
	gli�_lo�ls_di�_�b�
[] = {

440 { 
MP_ROM_QSTR
(
MP_QSTR_��nd
), 
MP_ROM_PTR
(&
li�_��nd_obj
) },

441 { 
MP_ROM_QSTR
(
MP_QSTR_��r
), 
MP_ROM_PTR
(&
li�_��r_obj
) },

442 { 
MP_ROM_QSTR
(
MP_QSTR_c�y
), 
MP_ROM_PTR
(&
li�_c�y_obj
) },

443 { 
MP_ROM_QSTR
(
MP_QSTR_cou�
), 
MP_ROM_PTR
(&
li�_cou�_obj
) },

444 { 
MP_ROM_QSTR
(
MP_QSTR_ex�nd
), 
MP_ROM_PTR
(&
li�_ex�nd_obj
) },

445 { 
MP_ROM_QSTR
(
MP_QSTR_�dex
), 
MP_ROM_PTR
(&
li�_�dex_obj
) },

446 { 
MP_ROM_QSTR
(
MP_QSTR_���
), 
MP_ROM_PTR
(&
li�_���_obj
) },

447 { 
MP_ROM_QSTR
(
MP_QSTR_p�
), 
MP_ROM_PTR
(&
li�_p�_obj
) },

448 { 
MP_ROM_QSTR
(
MP_QSTR_�move
), 
MP_ROM_PTR
(&
li�_�move_obj
) },

449 { 
MP_ROM_QSTR
(
MP_QSTR_�v��
), 
MP_ROM_PTR
(&
li�_�v��_obj
) },

450 { 
MP_ROM_QSTR
(
MP_QSTR_s�t
), 
MP_ROM_PTR
(&
li�_s�t_obj
) },

453 
MP_DEFINE_CONST_DICT
(
li�_lo�ls_di�
, 
li�_lo�ls_di�_�b�
);

455 
MP_DEFINE_CONST_OBJ_TYPE
(

456 
mp_ty�_li�
,

457 
MP_QSTR_li�
,

458 
MP_TYPE_FLAG_ITER_IS_GETITER
,

459 
make_�w
, 
mp_obj_li�_make_�w
,

460 
��t
, 
li�_��t
,

461 
u�ry_�
, 
li�_u�ry_�
,

462 
b��y_�
, 
li�_b��y_�
,

463 
subs�
, 
li�_subs�
,

464 
��
, 
li�_g���
,

465 
lo�ls_di�
, &
li�_lo�ls_di�


469 
	$mp_obj_li�_��
(
mp_obj_li�_t
 *
o
, 
size_t
 
n
) {

470 
o
->
ba�
.
ty�
 = &
mp_ty�_li�
;

471 
o
->
�loc
 = 
n
 < 
LIST_MIN_ALLOC
 ? LIST_MIN_ALLOC :�;

472 
o
->
�n
 = 
n
;

473 
o
->
�ems
 = 
	`m_�w
(
mp_obj_t
, o->
�loc
);

474 
	`mp_�q_��r
(
o
->
�ems
, 
n
, o->
�loc
, (*o->items));

475 
	}
}

477 
mp_obj_li�_t
 *
	$li�_�w
(
size_t
 
n
) {

478 
mp_obj_li�_t
 *
o
 = 
	`m_�w_obj
(mp_obj_list_t);

479 
	`mp_obj_li�_��
(
o
, 
n
);

480  
o
;

481 
	}
}

483 
mp_obj_t
 
	$mp_obj_�w_li�
(
size_t
 
n
, 
mp_obj_t
 *
�ems
) {

484 
mp_obj_li�_t
 *
o
 = 
	`li�_�w
(
n
);

485 i�(
�ems
 !�
NULL
) {

486 
size_t
 
i
 = 0; i < 
n
; i++) {

487 
o
->
�ems
[
i
] = items[i];

490  
	`MP_OBJ_FROM_PTR
(
o
);

491 
	}
}

493 
	$mp_obj_li�_g�
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
, mp_obj_�**
�ems
) {

494 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

495 *
�n
 = 
�lf
->len;

496 *
�ems
 = 
�lf
->items;

497 
	}
}

499 
	$mp_obj_li�_�t_�n
(
mp_obj_t
 
�lf_�
, 
size_t
 
�n
) {

502 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

503 
�lf
->
�n
 =�en;

504 
	}
}

506 
	$mp_obj_li�_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

507 
mp_obj_li�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

508 
size_t
 
i
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, s�f->
�n
, 
�dex
, 
�l�
);

509 
�lf
->
�ems
[
i
] = 
v�ue
;

510 
	}
}

515 
	s_mp_obj_li�_�_t
 {

516 
mp_obj_ba�_t
 
	mba�
;

517 
mp_fun_1_t
 
	m���xt
;

518 
mp_obj_t
 
	mli�
;

519 
size_t
 
	mcur
;

520 } 
	tmp_obj_li�_�_t
;

522 
mp_obj_t
 
	$li�_�_���xt
(
mp_obj_t
 
�lf_�
) {

523 
mp_obj_li�_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

524 
mp_obj_li�_t
 *
li�
 = 
	`MP_OBJ_TO_PTR
(
�lf
->list);

525 i�(
�lf
->
cur
 < 
li�
->
�n
) {

526 
mp_obj_t
 
o_out
 = 
li�
->
�ems
[
�lf
->
cur
];

527 
�lf
->
cur
 += 1;

528  
o_out
;

530  
MP_OBJ_STOP_ITERATION
;

532 
	}
}

534 
mp_obj_t
 
	$mp_obj_�w_li�_����
(
mp_obj_t
 
li�
, 
size_t
 
cur
, 
mp_obj_��_buf_t
 *
��_buf
) {

535 
	`as��
((
mp_obj_li�_�_t
�<�(
mp_obj_��_buf_t
));

536 
mp_obj_li�_�_t
 *
o
 = (mp_obj_li�_�_�*)
��_buf
;

537 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

538 
o
->
���xt
 = 
li�_�_���xt
;

539 
o
->
li�
 =�ist;

540 
o
->
cur
 = cur;

541  
	`MP_OBJ_FROM_PTR
(
o
);

542 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objlist.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJLIST_H


27 
	#MICROPY_INCLUDED_PY_OBJLIST_H


	)

29 
	~"py/obj.h
"

31 
	s_mp_obj_li�_t
 {

32 
mp_obj_ba�_t
 
	mba�
;

33 
size_t
 
	m�loc
;

34 
size_t
 
	m�n
;

35 
mp_obj_t
 *
	m�ems
;

36 } 
	tmp_obj_li�_t
;

38 
mp_obj_li�_��
(
mp_obj_li�_t
 *
o
, 
size_t
 
n
);

39 
mp_obj_t
 
mp_obj_li�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmap.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

32 
	s_mp_obj_m�_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 
size_t
 
	mn_��s
;

35 
mp_obj_t
 
	mfun
;

36 
mp_obj_t
 
	m��s
[];

37 } 
	tmp_obj_m�_t
;

39 
mp_obj_t
 
	$m�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

40 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 
MP_OBJ_FUN_ARGS_MAX
, 
�l�
);

41 
mp_obj_m�_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_m�_t, 
��s
, 
mp_obj_t
, 
n_�gs
 - 1, 
ty�
);

42 
o
->
n_��s
 = 
n_�gs
 - 1;

43 
o
->
fun
 = 
�gs
[0];

44 
size_t
 
i
 = 0; i < 
n_�gs
 - 1; i++) {

45 
o
->
��s
[
i
] = 
	`mp_g���
(
�gs
[�+ 1], 
NULL
);

47  
	`MP_OBJ_FROM_PTR
(
o
);

48 
	}
}

50 
mp_obj_t
 
	$m�_���xt
(
mp_obj_t
 
�lf_�
) {

51 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_m�
));

52 
mp_obj_m�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

53 
mp_obj_t
 *
�xt�s
 = 
	`m_�w
(mp_obj_t, 
�lf
->
n_��s
);

55 
size_t
 
i
 = 0; i < 
�lf
->
n_��s
; i++) {

56 
mp_obj_t
 
�xt
 = 
	`mp_���xt
(
�lf
->
��s
[
i
]);

57 i�(
�xt
 =�
MP_OBJ_STOP_ITERATION
) {

58 
	`m_d�
(
mp_obj_t
, 
�xt�s
, 
�lf
->
n_��s
);

59  
MP_OBJ_STOP_ITERATION
;

61 
�xt�s
[
i
] = 
�xt
;

63  
	`mp_��_fun�i�_n_kw
(
�lf
->
fun
, s�f->
n_��s
, 0, 
�xt�s
);

64 
	}
}

66 
MP_DEFINE_CONST_OBJ_TYPE
(

67 
mp_ty�_m�
,

68 
MP_QSTR_m�
,

69 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

70 
make_�w
, 
m�_make_�w
,

71 
��
, 
m�_���xt


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmodule.c

28 
	~<�dlib.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/bc.h
"

33 
	~"py/objmodu�.h
"

34 
	~"py/ru�ime.h
"

35 
	~"py/bu�t�.h
"

37 
	$modu�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

38 ()
k�d
;

39 
mp_obj_modu�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

41 cڡ *
modu�_�me
 = "";

42 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
glob�s
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�me__
), 
MP_MAP_LOOKUP
);

43 i�(
�em
 !�
NULL
) {

44 
modu�_�me
 = 
	`mp_obj_�r_g�_�r
(
�em
->
v�ue
);

47 #i�
MICROPY_PY___FILE__


50 
�em
 = 
	`mp_m�_lookup
(&
�lf
->
glob�s
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___f�e__
), 
MP_MAP_LOOKUP
);

51 i�(
�em
 !�
NULL
) {

52 
	`mp_��tf
(
��t
, "<modu� '%s' from '%s'>", 
modu�_�me
, 
	`mp_obj_�r_g�_�r
(
�em
->
v�ue
));

57 
	`mp_��tf
(
��t
, "<modu� '%s'>", 
modu�_�me
);

58 
	}
}

60 
modu�_��_�y_d�eg�i�
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
);

62 
	$modu�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

63 
mp_obj_modu�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

64 i�(
de�
[0] =�
MP_OBJ_NULL
) {

66 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
glob�s
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP
);

67 i�(
�em
 !�
NULL
) {

68 
de�
[0] = 
�em
->
v�ue
;

69 #i�
MICROPY_CPYTHON_COMPAT


70 } i�(
��
 =�
MP_QSTR___di�__
) {

71 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
�lf
->
glob�s
);

73 #i�
MICROPY_MODULE_GETATTR


74 } i�(
��
 !�
MP_QSTR___g���__
) {

75 
�em
 = 
	`mp_m�_lookup
(&
�lf
->
glob�s
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___g���__
), 
MP_MAP_LOOKUP
);

76 i�(
�em
 !�
NULL
) {

77 
de�
[0] = 
	`mp_��_fun�i�_1
(
�em
->
v�ue
, 
	`MP_OBJ_NEW_QSTR
(
��
));

79 
	`modu�_��_�y_d�eg�i�
(
�lf_�
, 
��
, 
de�
);

83 
	`modu�_��_�y_d�eg�i�
(
�lf_�
, 
��
, 
de�
);

87 
mp_obj_di�_t
 *
di�
 = 
�lf
->
glob�s
;

88 i�(
di�
->
m�
.
is_fixed
) {

89 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


90 i�(
di�
 =�&
mp_modu�_bu�t�s_glob�s
) {

91 i�(
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
�=�
NULL
) {

92 
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
��
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_di�
(1));

94 
di�
 = 
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
);

99 
	`modu�_��_�y_d�eg�i�
(
�lf_�
, 
��
, 
de�
);

103 i�(
de�
[1] =�
MP_OBJ_NULL
) {

105 
	`mp_obj_di�_d��e
(
	`MP_OBJ_FROM_PTR
(
di�
), 
	`MP_OBJ_NEW_QSTR
(
��
));

108 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
di�
), 
	`MP_OBJ_NEW_QSTR
(
��
), 
de�
[1]);

110 
de�
[0] = 
MP_OBJ_NULL
;

112 
	}
}

114 
MP_DEFINE_CONST_OBJ_TYPE
(

115 
mp_ty�_modu�
,

116 
MP_QSTR_modu�
,

117 
MP_TYPE_FLAG_NONE
,

118 
��t
, 
modu�_��t
,

119 
��
, 
modu�_��


122 
mp_obj_t
 
	$mp_obj_�w_modu�
(
q�r
 
modu�_�me
) {

123 
mp_m�_t
 *
mp_l�ded_modu�s_m�
 = &
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
).
m�
;

124 
mp_m�_�em_t
 *
�
 = 
	`mp_m�_lookup
(
mp_l�ded_modu�s_m�
, 
	`MP_OBJ_NEW_QSTR
(
modu�_�me
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

127 i�(
�
->
v�ue
 !�
MP_OBJ_NULL
) {

128  
�
->
v�ue
;

132 
mp_modu�_cڋxt_t
 *
o
 = 
	`m_�w_obj
(mp_module_context_t);

133 
o
->
modu�
.
ba�
.
ty�
 = &
mp_ty�_modu�
;

134 
o
->
modu�
.
glob�s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_di�
(
MICROPY_MODULE_DICT_SIZE
));

137 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
o
->
modu�
.
glob�s
), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�me__
), MP_OBJ_NEW_QSTR(
modu�_�me
));

140 
�
->
v�ue
 = 
	`MP_OBJ_FROM_PTR
(
o
);

143  
	`MP_OBJ_FROM_PTR
(
o
);

144 
	}
}

149 cڡ 
mp_rom_m�_�em_t
 
	gmp_bu�t�_modu�_�b�
[] = {

151 
MICROPY_REGISTERED_MODULES


153 
MP_DEFINE_CONST_MAP
(
mp_bu�t�_modu�_m�
, 
mp_bu�t�_modu�_�b�
);

155 cڡ 
mp_rom_m�_�em_t
 
	gmp_bu�t�_ex�nsib�_modu�_�b�
[] = {

157 
MICROPY_REGISTERED_EXTENSIBLE_MODULES


159 
MP_DEFINE_CONST_MAP
(
mp_bu�t�_ex�nsib�_modu�_m�
, 
mp_bu�t�_ex�nsib�_modu�_�b�
);

161 #i�
MICROPY_MODULE_ATTR_DELEGATION
 && 
def�ed
(
MICROPY_MODULE_DELEGATIONS
)

162 
	s_mp_modu�_d�eg�i�_��y_t
 {

163 
mp_rom_obj_t
 
	mmod
;

164 
mp_��_fun_t
 
	mfun
;

165 } 
	tmp_modu�_d�eg�i�_��y_t
;

167 cڡ 
mp_modu�_d�eg�i�_��y_t
 
	gmp_bu�t�_modu�_d�eg�i�_�b�
[] = {

169 
MICROPY_MODULE_DELEGATIONS


175 
mp_obj_t
 
	$mp_modu�_g�_bu�t�
(
q�r
 
modu�_�me
, 
bo�
 
ex�nsib�
) {

176 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
((
mp_m�_t
 *)(
ex�nsib�
 ? &
mp_bu�t�_ex�nsib�_modu�_m�
 : &
mp_bu�t�_modu�_m�
), 
	`MP_OBJ_NEW_QSTR
(
modu�_�me
), 
MP_MAP_LOOKUP
);

177 i�(!
�em
) {

178 #i�
MICROPY_PY_SYS


181 i�(
modu�_�me
 =�
MP_QSTR_usys
) {

182  
	`MP_OBJ_FROM_PTR
(&
mp_modu�_sys
);

186 i�(
ex�nsib�
) {

190  
MP_OBJ_NULL
;

201 
size_t
 
modu�_�me_�n
;

202 cڡ *
modu�_�me_�r
 = (cڡ *)
	`q�r_d�a
(
modu�_�me
, &
modu�_�me_�n
);

203 i�(
modu�_�me_�r
[0] != 'u') {

204  
MP_OBJ_NULL
;

206 
�em
 = 
	`mp_m�_lookup
((
mp_m�_t
 *)&
mp_bu�t�_ex�nsib�_modu�_m�
, 
	`MP_OBJ_NEW_QSTR
(
	`q�r_�om_��
(
modu�_�me_�r
 + 1, 
modu�_�me_�n
 - 1)), 
MP_MAP_LOOKUP
);

207 i�(!
�em
) {

208  
MP_OBJ_NULL
;

212 #i�
MICROPY_MODULE_BUILTIN_INIT


216 
mp_obj_t
 
de�
[2];

217 
	`mp_l�d_m�hod_maybe
(
�em
->
v�ue
, 
MP_QSTR___��__
, 
de�
);

218 i�(
de�
[0] !�
MP_OBJ_NULL
) {

219 
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

223  
�em
->
v�ue
;

224 
	}
}

226 
	$modu�_��_�y_d�eg�i�
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

227 #i�
MICROPY_MODULE_ATTR_DELEGATION
 && 
	`def�ed
(
MICROPY_MODULE_DELEGATIONS
)

229 
size_t
 
n
 = 
	`MP_ARRAY_SIZE
(
mp_bu�t�_modu�_d�eg�i�_�b�
);

230 
size_t
 
i
 = 0; i < 
n
; ++i) {

231 i�(*(
mp_obj_t
 *)(&
mp_bu�t�_modu�_d�eg�i�_�b�
[
i
].
mod
�=�
�lf_�
) {

232 
mp_bu�t�_modu�_d�eg�i�_�b�
[
i
].
	`fun
(
�lf_�
, 
��
, 
de�
);

237 ()
�lf_�
;

238 ()
��
;

239 ()
de�
;

241 
	}
}

243 
	$mp_modu�_g��ic_��
(
q�r
 
��
, 
mp_obj_t
 *
de�
, cڡ 
u�t16_t
 *
keys
, mp_obj_�*
v�ues
) {

244 
size_t
 
i
 = 0; 
keys
[i] !�
MP_QSTRnu�
; ++i) {

245 i�(
��
 =�
keys
[
i
]) {

246 i�(
de�
[0] =�
MP_OBJ_NULL
) {

248 
de�
[0] = 
v�ues
[
i
];

251 
v�ues
[
i
] = 
de�
[1];

252 
de�
[0] = 
MP_OBJ_NULL
;

257 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmodule.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJMODULE_H


27 
	#MICROPY_INCLUDED_PY_OBJMODULE_H


	)

29 
	~"py/obj.h
"

31 #i�de�
NO_QSTR


34 
	~"g�hdr/modu�defs.h
"

37 
cڡ 
mp_m�_t
 
mp_bu�t�_modu�_m�
;

38 
cڡ 
mp_m�_t
 
mp_bu�t�_ex�nsib�_modu�_m�
;

40 
mp_obj_t
 
mp_modu�_g�_bu�t�
(
q�r
 
modu�_�me
, 
bo�
 
ex�nsib�
);

42 
mp_modu�_g��ic_��
(
q�r
 
��
, 
mp_obj_t
 *
de�
, cڡ 
u�t16_t
 *
keys
, mp_obj_�*
v�ues
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnamedtuple.c

28 
	~<�r�g.h
>

30 
	~"py/objtu�e.h
"

31 
	~"py/ru�ime.h
"

32 
	~"py/obj�r.h
"

33 
	~"py/obj�medtu�e.h
"

35 #i�
MICROPY_PY_COLLECTIONS


37 
size_t
 
	$mp_obj_�medtu�e_f�d_f�ld
(cڡ 
mp_obj_�medtu�e_ty�_t
 *
ty�
, 
q�r
 
�me
) {

38 
size_t
 
i
 = 0; i < 
ty�
->
n_f�lds
; i++) {

39 i�(
ty�
->
f�lds
[
i
] =�
�me
) {

40  
i
;

43  (
size_t
)-1;

44 
	}
}

46 #i�
MICROPY_PY_COLLECTIONS_NAMEDTUPLE__ASDICT


47 
mp_obj_t
 
	$�medtu�e_asdi�
(
mp_obj_t
 
�lf_�
) {

48 
mp_obj_�medtu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

49 cڡ 
q�r
 *
f�lds
 = ((
mp_obj_�medtu�e_ty�_t
 *)
�lf
->
tu�e
.
ba�
.
ty�
)->fields;

50 
mp_obj_t
 
di�
 = 
	`mp_obj_�w_di�
(
�lf
->
tu�e
.
�n
);

52 
mp_obj_di�_t
 *
di�Obj
 = 
	`MP_OBJ_TO_PTR
(
di�
);

53 
di�Obj
->
ba�
.
ty�
 = &
mp_ty�_�d�eddi�
;

54 
di�Obj
->
m�
.
is_�d�ed
 = 1;

55 
size_t
 
i
 = 0; i < 
�lf
->
tu�e
.
�n
; ++i) {

56 
	`mp_obj_di�_��e
(
di�
, 
	`MP_OBJ_NEW_QSTR
(
f�lds
[
i
]), 
�lf
->
tu�e
.
�ems
[i]);

58  
di�
;

59 
	}
}

60 
MP_DEFINE_CONST_FUN_OBJ_1
(
�medtu�e_asdi�_obj
, 
�medtu�e_asdi�
);

63 
	$�medtu�e_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

64 ()
k�d
;

65 
mp_obj_�medtu�e_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

66 
	`mp_��tf
(
��t
, "%q", 
o
->
tu�e
.
ba�
.
ty�
->
�me
);

67 cڡ 
q�r
 *
f�lds
 = ((
mp_obj_�medtu�e_ty�_t
 *)
o
->
tu�e
.
ba�
.
ty�
)->fields;

68 
	`mp_obj_��tu�e_��t_h��r
(
��t
, 
f�lds
, &
o
->
tu�e
);

69 
	}
}

71 
	$�medtu�e_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

72 i�(
de�
[0] =�
MP_OBJ_NULL
) {

74 
mp_obj_�medtu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

75 #i�
MICROPY_PY_COLLECTIONS_NAMEDTUPLE__ASDICT


76 i�(
��
 =�
MP_QSTR__asdi�
) {

77 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(&
�medtu�e_asdi�_obj
);

78 
de�
[1] = 
�lf_�
;

82 
size_t
 
id
 = 
	`mp_obj_�medtu�e_f�d_f�ld
((
mp_obj_�medtu�e_ty�_t
 *)
�lf
->
tu�e
.
ba�
.
ty�
, 
��
);

83 i�(
id
 =�(
size_t
)-1) {

86 
de�
[0] = 
�lf
->
tu�e
.
�ems
[
id
];

90 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("can't set�ttribute"));

92 
	}
}

94 
mp_obj_t
 
	$�medtu�e_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

95 cڡ 
mp_obj_�medtu�e_ty�_t
 *
ty�
 = (cڡ mp_obj_�medtu�e_ty�_�*)
ty�_�
;

96 
size_t
 
num_f�lds
 = 
ty�
->
n_f�lds
;

97 i�(
n_�gs
 + 
n_kw
 !�
num_f�lds
) {

98 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


99 
	`mp_�g_�r�_�r�_mism�ch
();

100 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NORMAL


101 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

102 
	`MP_ERROR_TEXT
("function�akes %d�ositional�rguments but %d were given"),

103 
num_f�lds
, 
n_�gs
 + 
n_kw
);

104 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_DETAILED


105 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

106 
	`MP_ERROR_TEXT
("%q()�akes %d�ositional�rguments but %d were given"),

107 ((
mp_obj_ty�_t
 *)&
ty�
->
ba�
)->
�me
, 
num_f�lds
, 
n_�gs
 + 
n_kw
);

113 
mp_obj_tu�e_t
 *
tu�e
 = 
	`mp_obj_m�loc_v�
(mp_obj_tu�e_t, 
�ems
, 
mp_obj_t
, 
num_f�lds
, 
ty�_�
);

114 
tu�e
->
�n
 = 
num_f�lds
;

117 
	`mem�y
(&
tu�e
->
�ems
[0], 
�gs
, (
mp_obj_t
�* 
n_�gs
);

120 
	`mem�t
(&
tu�e
->
�ems
[
n_�gs
], 0, (
mp_obj_t
�* 
n_kw
);

121 
size_t
 
i
 = 
n_�gs
; i <�_�g�+ 2 * 
n_kw
; i += 2) {

122 
q�r
 
kw
 = 
	`mp_obj_�r_g�_q�r
(
�gs
[
i
]);

123 
size_t
 
id
 = 
	`mp_obj_�medtu�e_f�d_f�ld
(
ty�
, 
kw
);

124 i�(
id
 =�(
size_t
)-1) {

125 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


126 
	`mp_�g_�r�_�r�_mism�ch
();

128 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
, 
	`MP_ERROR_TEXT
("u�x��ed keyw�d�rgum��'%q'"), 
kw
);

131 i�(
tu�e
->
�ems
[
id
] !�
MP_OBJ_NULL
) {

132 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


133 
	`mp_�g_�r�_�r�_mism�ch
();

135 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

136 
	`MP_ERROR_TEXT
("fun�i� g� muɝ� v�ue�f܇rgum��'%q'"), 
kw
);

139 
tu�e
->
�ems
[
id
] = 
�gs
[
i
 + 1];

142  
	`MP_OBJ_FROM_PTR
(
tu�e
);

143 
	}
}

145 
mp_obj_�medtu�e_ty�_t
 *
	$mp_obj_�w_�medtu�e_ba�
(
size_t
 
n_f�lds
, 
mp_obj_t
 *
f�lds
) {

146 
mp_obj_�medtu�e_ty�_t
 *
o
 = 
	`m_�w_obj_v�0
(mp_obj_�medtu�e_ty�_t, 
f�lds
, 
q�r
, 
n_f�lds
);

147 
o
->
n_f�lds
 =�_fields;

148 
size_t
 
i
 = 0; i < 
n_f�lds
; i++) {

149 
o
->
f�lds
[
i
] = 
	`mp_obj_�r_g�_q�r
(fields[i]);

151  
o
;

152 
	}
}

154 
mp_obj_t
 
	$mp_obj_�w_�medtu�e_ty�
(
q�r
 
�me
, 
size_t
 
n_f�lds
, 
mp_obj_t
 *
f�lds
) {

155 
mp_obj_�medtu�e_ty�_t
 *
o
 = 
	`mp_obj_�w_�medtu�e_ba�
(
n_f�lds
, 
f�lds
);

156 
mp_obj_ty�_t
 *
ty�
 = (mp_obj_ty�_�*)&
o
->
ba�
;

157 
ty�
->
ba�
.ty� = &
mp_ty�_ty�
;

158 
ty�
->
�ags
 = 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
;

159 
ty�
->
�me
 =�ame;

160 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
make_�w
, 
�medtu�e_make_�w
, 0);

161 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
��t
, 
�medtu�e_��t
, 1);

162 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
u�ry_�
, 
mp_obj_tu�e_u�ry_�
, 2);

163 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
b��y_�
, 
mp_obj_tu�e_b��y_�
, 3);

164 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
��
, 
�medtu�e_��
, 4);

165 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
subs�
, 
mp_obj_tu�e_subs�
, 5);

166 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
��
, 
mp_obj_tu�e_g���
, 6);

167 
	`MP_OBJ_TYPE_SET_SLOT
(
ty�
, 
���
, &
mp_ty�_tu�e
, 7);

168  
	`MP_OBJ_FROM_PTR
(
o
);

169 
	}
}

171 
mp_obj_t
 
	$�w_�medtu�e_ty�
(
mp_obj_t
 
�me_�
, mp_obj_�
f�lds_�
) {

172 
q�r
 
�me
 = 
	`mp_obj_�r_g�_q�r
(
�me_�
);

173 
size_t
 
n_f�lds
;

174 
mp_obj_t
 *
f�lds
;

175 #i�
MICROPY_CPYTHON_COMPAT


176 i�(
	`mp_obj_is_�r
(
f�lds_�
)) {

177 
f�lds_�
 = 
	`mp_obj_�r_�l�
(1, &fields_in);

180 
	`mp_obj_g�_��y
(
f�lds_�
, &
n_f�lds
, &
f�lds
);

181  
	`mp_obj_�w_�medtu�e_ty�
(
�me
, 
n_f�lds
, 
f�lds
);

182 
	}
}

183 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_�medtu�e_obj
, 
�w_�medtu�e_ty�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnamedtuple.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJNAMEDTUPLE_H


27 
	#MICROPY_INCLUDED_PY_OBJNAMEDTUPLE_H


	)

29 
	~"py/objtu�e.h
"

31 
	s_mp_obj_�medtu�e_ty�_t
 {

33 
mp_obj_em�y_ty�_t
 
	mba�
;

34 *
	m��s
[8];

35 
size_t
 
	mn_f�lds
;

36 
q�r
 
	mf�lds
[];

37 } 
	tmp_obj_�medtu�e_ty�_t
;

39 
	s_mp_obj_�medtu�e_t
 {

40 
mp_obj_tu�e_t
 
	mtu�e
;

41 } 
	tmp_obj_�medtu�e_t
;

43 
size_t
 
mp_obj_�medtu�e_f�d_f�ld
(cڡ 
mp_obj_�medtu�e_ty�_t
 *
ty�
, 
q�r
 
�me
);

44 
mp_obj_�medtu�e_ty�_t
 *
mp_obj_�w_�medtu�e_ba�
(
size_t
 
n_f�lds
, 
mp_obj_t
 *
f�lds
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnone.c

27 
	~<�dlib.h
>

29 
	~"py/obj.h
"

31 #i�!
MICROPY_OBJ_IMMEDIATE_OBJS


32 
	s_mp_obj_n�e_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 } 
	tmp_obj_n�e_t
;

37 
	$n�e_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

38 ()
�lf_�
;

39 i�(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
) {

40 
	`mp_��t_�r
(
��t
, "null");

42 
	`mp_��t_�r
(
��t
, "None");

44 
	}
}

46 
MP_DEFINE_CONST_OBJ_TYPE
(

47 
mp_ty�_N�eTy�
,

48 
MP_QSTR_N�eTy�
,

49 
MP_TYPE_FLAG_NONE
,

50 
��t
, 
n�e_��t


53 #i�!
MICROPY_OBJ_IMMEDIATE_OBJS


54 cڡ 
mp_obj_n�e_t
 
	gmp_cڡ_n�e_obj
 = {{&
mp_ty�_N�eTy�
}};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objobject.c

27 
	~<�dlib.h
>

29 
	~"py/objty�.h
"

30 
	~"py/ru�ime.h
"

32 
	s_mp_obj_obje�_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 } 
	tmp_obj_obje�_t
;

36 
mp_obj_t
 
	$obje�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

37 ()
�gs
;

38 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 0, 
�l�
);

39 
mp_obj_obje�_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_obje�_t, 
ty�
);

40  
	`MP_OBJ_FROM_PTR
(
o
);

41 
	}
}

43 #i�
MICROPY_CPYTHON_COMPAT


44 
mp_obj_t
 
	$obje�___��__
(
mp_obj_t
 
�lf
) {

45 ()
�lf
;

46  
mp_cڡ_n�e
;

47 
	}
}

48 
MP_DEFINE_CONST_FUN_OBJ_1
(
obje�___��___obj
, 
obje�___��__
);

50 
mp_obj_t
 
	$obje�___�w__
(
mp_obj_t
 
�s
) {

51 i�(!
	`mp_obj_is_ty�
(
�s
, &
mp_ty�_ty�
�|| !
	`mp_obj_is_����_ty�
((
mp_obj_ty�_t
 *)
	`MP_OBJ_TO_PTR
(cls))) {

52 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("arg must be user-type"));

58 cڡ 
mp_obj_ty�_t
 *
�tive_ba�
;

59  
	`MP_OBJ_FROM_PTR
(
	`mp_obj_�w_����
(
	`MP_OBJ_TO_PTR
(
�s
), &
�tive_ba�
));

60 
	}
}

61 
MP_DEFINE_CONST_FUN_OBJ_1
(
obje�___�w___fun_obj
, 
obje�___�w__
);

62 
MP_DEFINE_CONST_STATICMETHOD_OBJ
(
obje�___�w___obj
, 
MP_ROM_PTR
(&
obje�___�w___fun_obj
));

64 #i�
MICROPY_PY_DELATTR_SETATTR


65 
mp_obj_t
 
	$obje�___���r__
(
mp_obj_t
 
�lf_�
, mp_obj_�
��
, mp_obj_�
v�ue
) {

66 i�(!
	`mp_obj_is_����_ty�
(
	`mp_obj_g�_ty�
(
�lf_�
))) {

67 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("arg must be user-type"));

70 i�(!
	`mp_obj_is_�r
(
��
)) {

71 
	`mp_�i�_Ty�E��
(
NULL
);

74 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

75 
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
��
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = value;

76  
mp_cڡ_n�e
;

77 
	}
}

78 
MP_DEFINE_CONST_FUN_OBJ_3
(
obje�___���r___obj
, 
obje�___���r__
);

80 
mp_obj_t
 
	$obje�___d���__
(
mp_obj_t
 
�lf_�
, mp_obj_�
��
) {

81 i�(!
	`mp_obj_is_����_ty�
(
	`mp_obj_g�_ty�
(
�lf_�
))) {

82 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("arg must be user-type"));

85 i�(!
	`mp_obj_is_�r
(
��
)) {

86 
	`mp_�i�_Ty�E��
(
NULL
);

89 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

90 i�(
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
��
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
�=�
NULL
) {

91 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("no such�ttribute"));

93  
mp_cڡ_n�e
;

94 
	}
}

95 
MP_DEFINE_CONST_FUN_OBJ_2
(
obje�___d���___obj
, 
obje�___d���__
);

98 cڡ 
mp_rom_m�_�em_t
 
	gobje�_lo�ls_di�_�b�
[] = {

99 #i�
MICROPY_CPYTHON_COMPAT


100 { 
MP_ROM_QSTR
(
MP_QSTR___��__
), 
MP_ROM_PTR
(&
obje�___��___obj
) },

102 #i�
MICROPY_CPYTHON_COMPAT


103 { 
MP_ROM_QSTR
(
MP_QSTR___�w__
), 
MP_ROM_PTR
(&
obje�___�w___obj
) },

105 #i�
MICROPY_PY_DELATTR_SETATTR


106 { 
MP_ROM_QSTR
(
MP_QSTR___���r__
), 
MP_ROM_PTR
(&
obje�___���r___obj
) },

107 { 
MP_ROM_QSTR
(
MP_QSTR___d���__
), 
MP_ROM_PTR
(&
obje�___d���___obj
) },

111 
MP_DEFINE_CONST_DICT
(
obje�_lo�ls_di�
, 
obje�_lo�ls_di�_�b�
);

114 #i�
MICROPY_CPYTHON_COMPAT


115 
	#OBJECT_TYPE_LOCALS_DICT
 , 
lo�ls_di�
, &
obje�_lo�ls_di�


	)

117 
	#OBJECT_TYPE_LOCALS_DICT


	)

120 
MP_DEFINE_CONST_OBJ_TYPE
(

121 
mp_ty�_obje�
,

122 
MP_QSTR_obje�
,

123 
MP_TYPE_FLAG_NONE
,

124 
make_�w
, 
obje�_make_�w


125 
OBJECT_TYPE_LOCALS_DICT


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objpolyiter.c

27 
	~<�dlib.h
>

29 
	~"py/ru�ime.h
"

37 
	s_mp_obj_p�ym�ph_��_t
 {

38 
mp_obj_ba�_t
 
	mba�
;

39 
mp_fun_1_t
 
	m���xt
;

40 } 
	tmp_obj_p�ym�ph_��_t
;

42 
mp_obj_t
 
	$p�ym�ph_�_���xt
(
mp_obj_t
 
�lf_�
) {

43 
mp_obj_p�ym�ph_��_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

45  
�lf
->
	`���xt
(
�lf_�
);

46 
	}
}

48 
MP_DEFINE_CONST_OBJ_TYPE
(

49 
mp_ty�_p�ym�ph_��
,

50 
MP_QSTR_����
,

51 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

52 
��
, 
p�ym�ph_�_���xt


55 #i�
MICROPY_ENABLE_FINALISER


61 
	s_mp_obj_p�ym�ph_��_w�h_f��i�r_t
 {

62 
mp_obj_ba�_t
 
	mba�
;

63 
mp_fun_1_t
 
	m���xt
;

64 
mp_fun_1_t
 
	mf��i�r
;

65 } 
	tmp_obj_p�ym�ph_w�h_f��i�r_��_t
;

67 
mp_obj_t
 
	$mp_obj_p�ym�ph_��_d�
(
mp_obj_t
 
�lf_�
) {

68 
mp_obj_p�ym�ph_w�h_f��i�r_��_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

70  
�lf
->
	`f��i�r
(
�lf_�
);

71 
	}
}

72 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_obj_p�ym�ph_��_d�_obj
, 
mp_obj_p�ym�ph_��_d�
);

74 cڡ 
mp_rom_m�_�em_t
 
	gmp_obj_p�ym�ph_��_lo�ls_di�_�b�
[] = {

75 { 
MP_ROM_QSTR
(
MP_QSTR___d�__
), 
MP_ROM_PTR
(&
mp_obj_p�ym�ph_��_d�_obj
) },

77 
MP_DEFINE_CONST_DICT
(
mp_obj_p�ym�ph_��_lo�ls_di�
, 
mp_obj_p�ym�ph_��_lo�ls_di�_�b�
);

79 
MP_DEFINE_CONST_OBJ_TYPE
(

80 
mp_ty�_p�ym�ph_��_w�h_f��i�r
,

81 
MP_QSTR_����
,

82 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

83 
��
, 
p�ym�ph_�_���xt
,

84 
lo�ls_di�
, &
mp_obj_p�ym�ph_��_lo�ls_di�


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objproperty.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

32 #i�
MICROPY_PY_BUILTINS_PROPERTY


34 
	s_mp_obj_�ݔty_t
 {

35 
mp_obj_ba�_t
 
	mba�
;

36 
mp_obj_t
 
	m�oxy
[3];

37 } 
	tmp_obj_�ݔty_t
;

39 
mp_obj_t
 
	$�ݔty_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

40 �um { 
ARG_fg�
, 
ARG_f�t
, 
ARG_fd�
, 
ARG_doc
 };

41 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

42 { 
MP_QSTR_
, 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
MP_ROM_NONE
} },

43 { 
MP_QSTR_
, 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
MP_ROM_NONE
} },

44 { 
MP_QSTR_
, 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
MP_ROM_NONE
} },

45 { 
MP_QSTR_doc
, 
MP_ARG_OBJ
, {.
u_rom_obj
 = 
MP_ROM_NONE
} },

47 
mp_�g_v�_t
 
v�s
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

48 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
v�s
);

50 
mp_obj_�ݔty_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�ݔty_t, 
ty�
);

51 
o
->
�oxy
[0] = 
v�s
[
ARG_fg�
].
u_obj
;

52 
o
->
�oxy
[1] = 
v�s
[
ARG_f�t
].
u_obj
;

53 
o
->
�oxy
[2] = 
v�s
[
ARG_fd�
].
u_obj
;

55  
	`MP_OBJ_FROM_PTR
(
o
);

56 
	}
}

58 
mp_obj_t
 
	$�ݔty_g��r
(
mp_obj_t
 
�lf_�
, mp_obj_�
g��r
) {

59 
mp_obj_�ݔty_t
 *
p2
 = 
	`m_�w_obj
(mp_obj_property_t);

60 *
p2
 = *(
mp_obj_�ݔty_t
 *)
	`MP_OBJ_TO_PTR
(
�lf_�
);

61 
p2
->
�oxy
[0] = 
g��r
;

62  
	`MP_OBJ_FROM_PTR
(
p2
);

63 
	}
}

65 
MP_DEFINE_CONST_FUN_OBJ_2
(
�ݔty_g��r_obj
, 
�ݔty_g��r
);

67 
mp_obj_t
 
	$�ݔty_���
(
mp_obj_t
 
�lf_�
, mp_obj_�
���
) {

68 
mp_obj_�ݔty_t
 *
p2
 = 
	`m_�w_obj
(mp_obj_property_t);

69 *
p2
 = *(
mp_obj_�ݔty_t
 *)
	`MP_OBJ_TO_PTR
(
�lf_�
);

70 
p2
->
�oxy
[1] = 
���
;

71  
	`MP_OBJ_FROM_PTR
(
p2
);

72 
	}
}

74 
MP_DEFINE_CONST_FUN_OBJ_2
(
�ݔty_���_obj
, 
�ݔty_���
);

76 
mp_obj_t
 
	$�ݔty_d���
(
mp_obj_t
 
�lf_�
, mp_obj_�
d���
) {

77 
mp_obj_�ݔty_t
 *
p2
 = 
	`m_�w_obj
(mp_obj_property_t);

78 *
p2
 = *(
mp_obj_�ݔty_t
 *)
	`MP_OBJ_TO_PTR
(
�lf_�
);

79 
p2
->
�oxy
[2] = 
d���
;

80  
	`MP_OBJ_FROM_PTR
(
p2
);

81 
	}
}

83 
MP_DEFINE_CONST_FUN_OBJ_2
(
�ݔty_d���_obj
, 
�ݔty_d���
);

85 cڡ 
mp_rom_m�_�em_t
 
	g�ݔty_lo�ls_di�_�b�
[] = {

86 { 
MP_ROM_QSTR
(
MP_QSTR_g��r
), 
MP_ROM_PTR
(&
�ݔty_g��r_obj
) },

87 { 
MP_ROM_QSTR
(
MP_QSTR_���
), 
MP_ROM_PTR
(&
�ݔty_���_obj
) },

88 { 
MP_ROM_QSTR
(
MP_QSTR_d���
), 
MP_ROM_PTR
(&
�ݔty_d���_obj
) },

91 
MP_DEFINE_CONST_DICT
(
�ݔty_lo�ls_di�
, 
�ݔty_lo�ls_di�_�b�
);

93 
MP_DEFINE_CONST_OBJ_TYPE
(

94 
mp_ty�_�ݔty
,

95 
MP_QSTR_�ݔty
,

96 
MP_TYPE_FLAG_NONE
,

97 
make_�w
, 
�ݔty_make_�w
,

98 
lo�ls_di�
, &
�ݔty_lo�ls_di�


101 cڡ 
mp_obj_t
 *
	$mp_obj_�ݔty_g�
(
mp_obj_t
 
�lf_�
) {

102 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�ݔty
));

103 
mp_obj_�ݔty_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

104  
�lf
->
�oxy
;

105 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objrange.c

27 
	~<�dlib.h
>

29 
	~"py/ru�ime.h
"

34 
	s_mp_obj_�nge_�_t
 {

35 
mp_obj_ba�_t
 
	mba�
;

36 
mp_�t_t
 
	mcur
;

37 
mp_�t_t
 
	m��
;

38 
mp_�t_t
 
	m��
;

39 } 
	tmp_obj_�nge_�_t
;

41 
mp_obj_t
 
	$�nge_�_���xt
(
mp_obj_t
 
o_�
) {

42 
mp_obj_�nge_�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

43 i�((
o
->
��
 > 0 && o->
cur
 < o->
��
) || (o->step < 0 && o->cur > o->stop)) {

44 
mp_obj_t
 
o_out
 = 
	`MP_OBJ_NEW_SMALL_INT
(
o
->
cur
);

45 
o
->
cur
 +�o->
��
;

46  
o_out
;

48  
MP_OBJ_STOP_ITERATION
;

50 
	}
}

52 
MP_DEFINE_CONST_OBJ_TYPE
(

53 
mp_ty�_�nge_�
,

54 
MP_QSTR_����
,

55 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

56 
��
, 
�nge_�_���xt


59 
mp_obj_t
 
	$mp_obj_�w_�nge_����
(
mp_�t_t
 
cur
, mp_�t_�
��
, mp_�t_�
��
, 
mp_obj_��_buf_t
 *
��_buf
) {

60 
	`as��
((
mp_obj_�nge_�_t
�<�(
mp_obj_��_buf_t
));

61 
mp_obj_�nge_�_t
 *
o
 = (mp_obj_�nge_�_�*)
��_buf
;

62 
o
->
ba�
.
ty�
 = &
mp_ty�_�nge_�
;

63 
o
->
cur
 = cur;

64 
o
->
��
 = stop;

65 
o
->
��
 = step;

66  
	`MP_OBJ_FROM_PTR
(
o
);

67 
	}
}

72 
	s_mp_obj_�nge_t
 {

73 
mp_obj_ba�_t
 
	mba�
;

74 
mp_�t_t
 
	m��t
;

75 
mp_�t_t
 
	m��
;

76 
mp_�t_t
 
	m��
;

77 } 
	tmp_obj_�nge_t
;

79 
	$�nge_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

80 ()
k�d
;

81 
mp_obj_�nge_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

82 
	`mp_��tf
(
��t
, "�nge(" 
INT_FMT
 ", " INT_FMT "", 
�lf
->
��t
, s�f->
��
);

83 i�(
�lf
->
��
 == 1) {

84 
	`mp_��t_�r
(
��t
, ")");

86 
	`mp_��tf
(
��t
, ", " 
INT_FMT
 ")", 
�lf
->
��
);

88 
	}
}

90 
mp_obj_t
 
	$�nge_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

91 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 3, 
�l�
);

93 
mp_obj_�nge_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�nge_t, 
ty�
);

94 
o
->
��t
 = 0;

95 
o
->
��
 = 1;

97 i�(
n_�gs
 == 1) {

98 
o
->
��
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

100 
o
->
��t
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

101 
o
->
��
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

102 i�(
n_�gs
 == 3) {

103 
o
->
��
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

104 i�(
o
->
��
 == 0) {

105 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("zero step"));

110  
	`MP_OBJ_FROM_PTR
(
o
);

111 
	}
}

113 
mp_�t_t
 
	$�nge_�n
(
mp_obj_�nge_t
 *
�lf
) {

115 
mp_�t_t
 
�n
 = 
�lf
->
��
 - s�f->
��t
 + s�f->
��
;

116 i�(
�lf
->
��
 > 0) {

117 
�n
 -= 1;

119 
�n
 += 1;

121 
�n
 =�� / 
�lf
->
��
;

122 i�(
�n
 < 0) {

123 
�n
 = 0;

125  
�n
;

126 
	}
}

128 
mp_obj_t
 
	$�nge_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

129 
mp_obj_�nge_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

130 
mp_�t_t
 
�n
 = 
	`�nge_�n
(
�lf
);

131 
�
) {

132 
MP_UNARY_OP_BOOL
:

133  
	`mp_obj_�w_bo�
(
�n
 > 0);

134 
MP_UNARY_OP_LEN
:

135  
	`MP_OBJ_NEW_SMALL_INT
(
�n
);

137  
MP_OBJ_NULL
;

139 
	}
}

141 #i�
MICROPY_PY_BUILTINS_RANGE_BINOP


142 
mp_obj_t
 
	$�nge_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

143 i�(!
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_�nge
�|| 
�
 !�
MP_BINARY_OP_EQUAL
) {

144  
MP_OBJ_NULL
;

146 
mp_obj_�nge_t
 *
lhs
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

147 
mp_obj_�nge_t
 *
rhs
 = 
	`MP_OBJ_TO_PTR
(
rhs_�
);

148 
mp_�t_t
 
lhs_�n
 = 
	`�nge_�n
(
lhs
);

149 
mp_�t_t
 
rhs_�n
 = 
	`�nge_�n
(
rhs
);

150  
	`mp_obj_�w_bo�
(

151 
lhs_�n
 =�
rhs_�n


152 && (
lhs_�n
 == 0

153 || (
lhs
->
��t
 =�
rhs
->start

154 && (
lhs_�n
 =�1 || 
lhs
->
��
 =�
rhs
->step)))

156 
	}
}

159 
mp_obj_t
 
	$�nge_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

160 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

162 
mp_obj_�nge_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

163 
mp_�t_t
 
�n
 = 
	`�nge_�n
(
�lf
);

164 #i�
MICROPY_PY_BUILTINS_SLICE


165 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

166 
mp_bound_�i�_t
 
�i�
;

167 
	`mp_�q_g�_�_�i�_�dexes
(
�n
, 
�dex
, &
�i�
);

168 
mp_obj_�nge_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�nge_t, &
mp_ty�_�nge
);

169 
o
->
��t
 = 
�lf
->���+ 
�i�
.���* s�f->
��
;

170 
o
->
��
 = 
�lf
->
��t
 + 
�i�
.�� * s�f->
��
;

171 
o
->
��
 = 
�i�
.�� * 
�lf
->step;

172 i�(
�i�
.
��
 < 0) {

174 
o
->
��
 -�
�lf
->
��
;

176  
	`MP_OBJ_FROM_PTR
(
o
);

179 
size_t
 
�dex_v�
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, 
�n
, 
�dex
, 
�l�
);

180  
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
��t
 + 
�dex_v�
 * s�f->
��
);

182  
MP_OBJ_NULL
;

184 
	}
}

186 
mp_obj_t
 
	$�nge_g���
(
mp_obj_t
 
o_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

187 
mp_obj_�nge_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

188  
	`mp_obj_�w_�nge_����
(
o
->
��t
, o->
��
, o->
��
, 
��_buf
);

189 
	}
}

192 #i�
MICROPY_PY_BUILTINS_RANGE_ATTRS


193 
	$�nge_��
(
mp_obj_t
 
o_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

194 i�(
de�
[0] !�
MP_OBJ_NULL
) {

198 
mp_obj_�nge_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

199 i�(
��
 =�
MP_QSTR_��t
) {

200 
de�
[0] = 
	`mp_obj_�w_�t
(
o
->
��t
);

201 } i�(
��
 =�
MP_QSTR_��
) {

202 
de�
[0] = 
	`mp_obj_�w_�t
(
o
->
��
);

203 } i�(
��
 =�
MP_QSTR_��
) {

204 
de�
[0] = 
	`mp_obj_�w_�t
(
o
->
��
);

206 
	}
}

209 #i�
MICROPY_PY_BUILTINS_RANGE_BINOP


210 
	#RANGE_TYPE_BINOP
 
b��y_�
, 
�nge_b��y_�
,

	)

212 
	#RANGE_TYPE_BINOP


	)

215 #i�
MICROPY_PY_BUILTINS_RANGE_ATTRS


216 
	#RANGE_TYPE_ATTR
 
��
, 
�nge_��
,

	)

218 
	#RANGE_TYPE_ATTR


	)

221 
MP_DEFINE_CONST_OBJ_TYPE
(

222 
mp_ty�_�nge
,

223 
MP_QSTR_�nge
,

224 
MP_TYPE_FLAG_NONE
,

225 
make_�w
, 
�nge_make_�w
,

226 
RANGE_TYPE_BINOP


227 
RANGE_TYPE_ATTR


228 
��t
, 
�nge_��t
,

229 
u�ry_�
, 
�nge_u�ry_�
,

230 
subs�
, 
�nge_subs�
,

231 
��
, 
�nge_g���


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objreversed.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

32 #i�
MICROPY_PY_BUILTINS_REVERSED


34 
	s_mp_obj_�v��d_t
 {

35 
mp_obj_ba�_t
 
	mba�
;

36 
mp_obj_t
 
	m�q
;

37 
mp_u�t_t
 
	mcur_�dex
;

38 } 
	tmp_obj_�v��d_t
;

40 
mp_obj_t
 
	$�v��d_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

41 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 1, 
�l�
);

44 
mp_obj_t
 
de�
[2];

45 
	`mp_l�d_m�hod_maybe
(
�gs
[0], 
MP_QSTR___�v��d__
, 
de�
);

46 i�(
de�
[0] !�
MP_OBJ_NULL
) {

47  
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

50 
mp_obj_�v��d_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�v��d_t, 
ty�
);

51 
o
->
�q
 = 
�gs
[0];

52 
o
->
cur_�dex
 = 
	`mp_obj_g�_�t
(
	`mp_obj_�n
(
�gs
[0]));

54  
	`MP_OBJ_FROM_PTR
(
o
);

55 
	}
}

57 
mp_obj_t
 
	$�v��d_���xt
(
mp_obj_t
 
�lf_�
) {

58 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�v��d
));

59 
mp_obj_�v��d_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

62 i�(
�lf
->
cur_�dex
 == 0) {

63  
MP_OBJ_STOP_ITERATION
;

67 
�lf
->
cur_�dex
 -= 1;

68  
	`mp_obj_subs�
(
�lf
->
�q
, 
	`MP_OBJ_NEW_SMALL_INT
(�lf->
cur_�dex
), 
MP_OBJ_SENTINEL
);

69 
	}
}

71 
MP_DEFINE_CONST_OBJ_TYPE
(

72 
mp_ty�_�v��d
,

73 
MP_QSTR_�v��d
,

74 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

75 
make_�w
, 
�v��d_make_�w
,

76 
��
, 
�v��d_���xt


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objset.c

27 
	~<�dbo�.h
>

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/ru�ime.h
"

32 
	~"py/bu�t�.h
"

34 #i�
MICROPY_PY_BUILTINS_SET


36 
	s_mp_obj_�t_t
 {

37 
mp_obj_ba�_t
 
	mba�
;

38 
mp_�t_t
 
	m�t
;

39 } 
	tmp_obj_�t_t
;

41 
	s_mp_obj_�t_�_t
 {

42 
mp_obj_ba�_t
 
	mba�
;

43 
mp_fun_1_t
 
	m���xt
;

44 
mp_obj_�t_t
 *
	m�t
;

45 
size_t
 
	mcur
;

46 } 
	tmp_obj_�t_�_t
;

48 
bo�
 
	$is_�t_�_�oz��t
(
mp_obj_t
 
o
) {

49  
	`mp_obj_is_ty�
(
o
, &
mp_ty�_�t
)

50 #i�
MICROPY_PY_BUILTINS_FROZENSET


51 || 
	`mp_obj_is_ty�
(
o
, &
mp_ty�_�oz��t
)

54 
	}
}

57 
	#check_�t
(
o
�
	`mp_check_�lf
(
	`mp_obj_is_ty�
(o, &
mp_ty�_�t
))

	)

61 
	#check_�t_�_�oz��t
(
o
�
	`mp_check_�lf
(
	`is_�t_�_�oz��t
(o))

	)

63 
	$�t_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

64 ()
k�d
;

65 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

66 #i�
MICROPY_PY_BUILTINS_FROZENSET


67 
bo�
 
is_�oz�
 = 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�oz��t
);

69 i�(
�lf
->
�t
.
u�d
 == 0) {

70 #i�
MICROPY_PY_BUILTINS_FROZENSET


71 i�(
is_�oz�
) {

72 
	`mp_��t_�r
(
��t
, "frozen");

75 
	`mp_��t_�r
(
��t
, "set()");

78 
bo�
 
f��
 = 
�ue
;

79 #i�
MICROPY_PY_BUILTINS_FROZENSET


80 i�(
is_�oz�
) {

81 
	`mp_��t_�r
(
��t
, "frozenset(");

84 
	`mp_��t_�r
(
��t
, "{");

85 
size_t
 
i
 = 0; i < 
�lf
->
�t
.
�loc
; i++) {

86 i�(
	`mp_�t_��_is_f��d
(&
�lf
->
�t
, 
i
)) {

87 i�(!
f��
) {

88 
	`mp_��t_�r
(
��t
, ", ");

90 
f��
 = 
�l�
;

91 
	`mp_obj_��t_h��r
(
��t
, 
�lf
->
�t
.
�b�
[
i
], 
PRINT_REPR
);

94 
	`mp_��t_�r
(
��t
, "}");

95 #i�
MICROPY_PY_BUILTINS_FROZENSET


96 i�(
is_�oz�
) {

97 
	`mp_��t_�r
(
��t
, ")");

100 
	}
}

102 
mp_obj_t
 
	$�t_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

103 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 1, 
�l�
);

105 
n_�gs
) {

108 
mp_obj_�t_t
 *
�t
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_�t
(0, 
NULL
));

110 
�t
->
ba�
.
ty�
 =�ype;

111  
	`MP_OBJ_FROM_PTR
(
�t
);

117 
mp_obj_t
 
�t
 = 
	`mp_obj_�w_�t
(0, 
NULL
);

118 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�gs
[0], 
NULL
);

119 
mp_obj_t
 
�em
;

120 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

121 
	`mp_obj_�t_��e
(
�t
, 
�em
);

124 ((
mp_obj_�t_t
 *)
	`MP_OBJ_TO_PTR
(
�t
))->
ba�
.
ty�
 =�ype;

125  
�t
;

128 
	}
}

130 
mp_obj_t
 
	$�t_�_���xt
(
mp_obj_t
 
�lf_�
) {

131 
mp_obj_�t_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

132 
size_t
 
max
 = 
�lf
->
�t
->�t.
�loc
;

133 
mp_�t_t
 *
�t
 = &
�lf
->set->set;

135 
size_t
 
i
 = 
�lf
->
cur
; i < 
max
; i++) {

136 i�(
	`mp_�t_��_is_f��d
(
�t
, 
i
)) {

137 
�lf
->
cur
 = 
i
 + 1;

138  
�t
->
�b�
[
i
];

142  
MP_OBJ_STOP_ITERATION
;

143 
	}
}

145 
mp_obj_t
 
	$�t_g���
(
mp_obj_t
 
�t_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

146 
	`as��
((
mp_obj_�t_�_t
�<�(
mp_obj_��_buf_t
));

147 
mp_obj_�t_�_t
 *
o
 = (mp_obj_�t_�_�*)
��_buf
;

148 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

149 
o
->
���xt
 = 
�t_�_���xt
;

150 
o
->
�t
 = (
mp_obj_�t_t
 *)
	`MP_OBJ_TO_PTR
(
�t_�
);

151 
o
->
cur
 = 0;

152  
	`MP_OBJ_FROM_PTR
(
o
);

153 
	}
}

158 
mp_obj_t
 
	$�t_add
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
) {

159 
	`check_�t
(
�lf_�
);

160 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

161 
	`mp_�t_lookup
(&
�lf
->
�t
, 
�em
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

162  
mp_cڡ_n�e
;

163 
	}
}

164 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_add_obj
, 
�t_add
);

166 
mp_obj_t
 
	$�t_��r
(
mp_obj_t
 
�lf_�
) {

167 
	`check_�t
(
�lf_�
);

168 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

169 
	`mp_�t_��r
(&
�lf
->
�t
);

170  
mp_cڡ_n�e
;

171 
	}
}

172 
MP_DEFINE_CONST_FUN_OBJ_1
(
�t_��r_obj
, 
�t_��r
);

174 
mp_obj_t
 
	$�t_c�y
(
mp_obj_t
 
�lf_�
) {

175 
	`check_�t_�_�oz��t
(
�lf_�
);

176 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

177 
mp_obj_�t_t
 *
�h�
 = 
	`mp_obj_m�loc
(mp_obj_�t_t, 
�lf
->
ba�
.
ty�
);

178 
	`mp_�t_��
(&
�h�
->
�t
, 
�lf
->�t.
�loc
);

179 
�h�
->
�t
.
u�d
 = 
�lf
->set.used;

180 
	`mem�y
(
�h�
->
�t
.
�b�
, 
�lf
->�t.�b�, s�f->�t.
�loc
 * (
mp_obj_t
));

181  
	`MP_OBJ_FROM_PTR
(
�h�
);

182 
	}
}

183 
MP_DEFINE_CONST_FUN_OBJ_1
(
�t_c�y_obj
, 
�t_c�y
);

185 
mp_obj_t
 
	$�t_dis�rd
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
) {

186 
	`check_�t
(
�lf_�
);

187 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

188 
	`mp_�t_lookup
(&
�lf
->
�t
, 
�em
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

189  
mp_cڡ_n�e
;

190 
	}
}

191 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_dis�rd_obj
, 
�t_dis�rd
);

193 
mp_obj_t
 
	$�t_diff_�t
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
bo�
 
upd�e
) {

194 
mp_obj_t
 
�lf
;

195 i�(
upd�e
) {

196 
	`check_�t
(
�gs
[0]);

197 
�lf
 = 
�gs
[0];

199 
�lf
 = 
	`�t_c�y
(
�gs
[0]);

202 
size_t
 
i
 = 1; i < 
n_�gs
; i++) {

203 
mp_obj_t
 
�h�
 = 
�gs
[
i
];

204 i�(
�lf
 =�
�h�
) {

205 
	`�t_��r
(
�lf
);

207 
mp_�t_t
 *
�lf_�t
 = &((
mp_obj_�t_t
 *)
	`MP_OBJ_TO_PTR
(
�lf
))->
�t
;

208 
mp_obj_t
 
��
 = 
	`mp_g���
(
�h�
, 
NULL
);

209 
mp_obj_t
 
�xt
;

210 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

211 
	`mp_�t_lookup
(
�lf_�t
, 
�xt
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

216  
�lf
;

217 
	}
}

219 
mp_obj_t
 
	$�t_diff
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

220  
	`�t_diff_�t
(
n_�gs
, 
�gs
, 
�l�
);

221 
	}
}

222 
MP_DEFINE_CONST_FUN_OBJ_VAR
(
�t_diff_obj
, 1, 
�t_diff
);

224 
mp_obj_t
 
	$�t_diff_upd�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

225 
	`�t_diff_�t
(
n_�gs
, 
�gs
, 
�ue
);

226  
mp_cڡ_n�e
;

227 
	}
}

228 
MP_DEFINE_CONST_FUN_OBJ_VAR
(
�t_diff_upd�e_obj
, 1, 
�t_diff_upd�e
);

230 
mp_obj_t
 
	$�t_��r��_�t
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�
, 
bo�
 
upd�e
) {

231 i�(
upd�e
) {

232 
	`check_�t
(
�lf_�
);

234 
	`check_�t_�_�oz��t
(
�lf_�
);

237 i�(
�lf_�
 =�
�h�
) {

238  
upd�e
 ? 
mp_cڡ_n�e
 : 
	`�t_c�y
(
�lf_�
);

241 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

242 
mp_obj_�t_t
 *
out
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_�t
(0, 
NULL
));

244 
mp_obj_t
 
��
 = 
	`mp_g���
(
�h�
, 
NULL
);

245 
mp_obj_t
 
�xt
;

246 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

247 i�(
	`mp_�t_lookup
(&
�lf
->
�t
, 
�xt
, 
MP_MAP_LOOKUP
)) {

248 
	`�t_add
(
	`MP_OBJ_FROM_PTR
(
out
), 
�xt
);

252 i�(
upd�e
) {

253 
	`m_d�
(
mp_obj_t
, 
�lf
->
�t
.
�b�
, s�f->�t.
�loc
);

254 
�lf
->
�t
.
�loc
 = 
out
->set.alloc;

255 
�lf
->
�t
.
u�d
 = 
out
->set.used;

256 
�lf
->
�t
.
�b�
 = 
out
->set.table;

259  
upd�e
 ? 
mp_cڡ_n�e
 : 
	`MP_OBJ_FROM_PTR
(
out
);

260 
	}
}

262 
mp_obj_t
 
	$�t_��r��
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�
) {

263  
	`�t_��r��_�t
(
�lf_�
, 
�h�
, 
�l�
);

264 
	}
}

265 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_��r��_obj
, 
�t_��r��
);

267 
mp_obj_t
 
	$�t_��r��_upd�e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�
) {

268  
	`�t_��r��_�t
(
�lf_�
, 
�h�
, 
�ue
);

269 
	}
}

270 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_��r��_upd�e_obj
, 
�t_��r��_upd�e
);

272 
mp_obj_t
 
	$�t_isdisjo�t
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�
) {

273 
	`check_�t_�_�oz��t
(
�lf_�
);

274 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

276 
mp_obj_��_buf_t
 
��_buf
;

277 
mp_obj_t
 
��
 = 
	`mp_g���
(
�h�
, &
��_buf
);

278 
mp_obj_t
 
�xt
;

279 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

280 i�(
	`mp_�t_lookup
(&
�lf
->
�t
, 
�xt
, 
MP_MAP_LOOKUP
)) {

281  
mp_cڡ_�l�
;

284  
mp_cڡ_�ue
;

285 
	}
}

286 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_isdisjo�t_obj
, 
�t_isdisjo�t
);

288 
mp_obj_t
 
	$�t_issub�t_����
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
, 
bo�
 
�ݔ
) {

289 
mp_obj_�t_t
 *
�lf
;

290 
bo�
 
��nup_�lf
 = 
�l�
;

291 i�(
	`is_�t_�_�oz��t
(
�lf_�
)) {

292 
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

294 
�lf
 = 
	`MP_OBJ_TO_PTR
(
	`�t_make_�w
(&
mp_ty�_�t
, 1, 0, &
�lf_�
));

295 
��nup_�lf
 = 
�ue
;

298 
mp_obj_�t_t
 *
�h�
;

299 
bo�
 
��nup_�h�
 = 
�l�
;

300 i�(
	`is_�t_�_�oz��t
(
�h�_�
)) {

301 
�h�
 = 
	`MP_OBJ_TO_PTR
(
�h�_�
);

303 
�h�
 = 
	`MP_OBJ_TO_PTR
(
	`�t_make_�w
(&
mp_ty�_�t
, 1, 0, &
�h�_�
));

304 
��nup_�h�
 = 
�ue
;

306 
mp_obj_t
 
out
 = 
mp_cڡ_�ue
;

307 i�(
�ݔ
 && 
�lf
->
�t
.
u�d
 =�
�h�
->set.used) {

308 
out
 = 
mp_cڡ_�l�
;

310 
mp_obj_��_buf_t
 
��_buf
;

311 
mp_obj_t
 
��
 = 
	`�t_g���
(
	`MP_OBJ_FROM_PTR
(
�lf
), &
��_buf
);

312 
mp_obj_t
 
�xt
;

313 (
�xt
 = 
	`�t_�_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

314 i�(!
	`mp_�t_lookup
(&
�h�
->
�t
, 
�xt
, 
MP_MAP_LOOKUP
)) {

315 
out
 = 
mp_cڡ_�l�
;

321 i�(
��nup_�lf
) {

322 
	`�t_��r
(
	`MP_OBJ_FROM_PTR
(
�lf
));

324 i�(
��nup_�h�
) {

325 
	`�t_��r
(
	`MP_OBJ_FROM_PTR
(
�h�
));

327  
out
;

328 
	}
}

330 
mp_obj_t
 
	$�t_issub�t
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

331  
	`�t_issub�t_����
(
�lf_�
, 
�h�_�
, 
�l�
);

332 
	}
}

333 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_issub�t_obj
, 
�t_issub�t
);

335 
mp_obj_t
 
	$�t_issub�t_�ݔ
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

336  
	`�t_issub�t_����
(
�lf_�
, 
�h�_�
, 
�ue
);

337 
	}
}

339 
mp_obj_t
 
	$�t_issu�r�t
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

340  
	`�t_issub�t_����
(
�h�_�
, 
�lf_�
, 
�l�
);

341 
	}
}

342 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_issu�r�t_obj
, 
�t_issu�r�t
);

344 
mp_obj_t
 
	$�t_issu�r�t_�ݔ
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

345  
	`�t_issub�t_����
(
�h�_�
, 
�lf_�
, 
�ue
);

346 
	}
}

348 
mp_obj_t
 
	$�t_equ�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

349 
	`as��
(
	`is_�t_�_�oz��t
(
�h�_�
));

350 
	`check_�t_�_�oz��t
(
�lf_�
);

351 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

352 
mp_obj_�t_t
 *
�h�
 = 
	`MP_OBJ_TO_PTR
(
�h�_�
);

353 i�(
�lf
->
�t
.
u�d
 !�
�h�
->set.used) {

354  
mp_cڡ_�l�
;

356  
	`�t_issub�t
(
�lf_�
, 
�h�_�
);

357 
	}
}

359 
mp_obj_t
 
	$�t_p�
(
mp_obj_t
 
�lf_�
) {

360 
	`check_�t
(
�lf_�
);

361 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

362 
mp_obj_t
 
obj
 = 
	`mp_�t_�move_f��
(&
�lf
->
�t
);

363 i�(
obj
 =�
MP_OBJ_NULL
) {

364 
	`mp_�i�_msg
(&
mp_ty�_KeyE��
, 
	`MP_ERROR_TEXT
("pop from�n�mpty set"));

366  
obj
;

367 
	}
}

368 
MP_DEFINE_CONST_FUN_OBJ_1
(
�t_p�_obj
, 
�t_p�
);

370 
mp_obj_t
 
	$�t_�move
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
) {

371 
	`check_�t
(
�lf_�
);

372 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

373 i�(
	`mp_�t_lookup
(&
�lf
->
�t
, 
�em
, 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
�=�
MP_OBJ_NULL
) {

374 
	`mp_�i�_ty�_�g
(&
mp_ty�_KeyE��
, 
�em
);

376  
mp_cڡ_n�e
;

377 
	}
}

378 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_�move_obj
, 
�t_�move
);

380 
mp_obj_t
 
	$�t_symm�ric_dif�n�_upd�e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

381 
	`check_�t_�_�oz��t
(
�lf_�
);

382 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

383 
mp_obj_t
 
��
 = 
	`mp_g���
(
�h�_�
, 
NULL
);

384 
mp_obj_t
 
�xt
;

385 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

386 
	`mp_�t_lookup
(&
�lf
->
�t
, 
�xt
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND_OR_REMOVE_IF_FOUND
);

388  
mp_cڡ_n�e
;

389 
	}
}

390 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_symm�ric_dif�n�_upd�e_obj
, 
�t_symm�ric_dif�n�_upd�e
);

392 
mp_obj_t
 
	$�t_symm�ric_dif�n�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

393 
mp_obj_t
 
�lf_out
 = 
	`�t_c�y
(
�lf_�
);

394 
	`�t_symm�ric_dif�n�_upd�e
(
�lf_out
, 
�h�_�
);

395  
�lf_out
;

396 
	}
}

397 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_symm�ric_dif�n�_obj
, 
�t_symm�ric_dif�n�
);

399 
	$�t_upd�e_�t
(
mp_obj_�t_t
 *
�lf
, 
mp_obj_t
 
�h�_�
) {

400 
mp_obj_t
 
��
 = 
	`mp_g���
(
�h�_�
, 
NULL
);

401 
mp_obj_t
 
�xt
;

402 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

403 
	`mp_�t_lookup
(&
�lf
->
�t
, 
�xt
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

405 
	}
}

407 
mp_obj_t
 
	$�t_upd�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

408 
	`check_�t
(
�gs
[0]);

409 
size_t
 
i
 = 1; i < 
n_�gs
; i++) {

410 
	`�t_upd�e_�t
(
	`MP_OBJ_TO_PTR
(
�gs
[0]),�rgs[
i
]);

413  
mp_cڡ_n�e
;

414 
	}
}

415 
MP_DEFINE_CONST_FUN_OBJ_VAR
(
�t_upd�e_obj
, 1, 
�t_upd�e
);

417 
mp_obj_t
 
	$�t_uni�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�h�_�
) {

418 
	`check_�t_�_�oz��t
(
�lf_�
);

419 
mp_obj_t
 
�lf
 = 
	`�t_c�y
(
�lf_�
);

420 
	`�t_upd�e_�t
(
	`MP_OBJ_TO_PTR
(
�lf
), 
�h�_�
);

421  
�lf
;

422 
	}
}

423 
MP_DEFINE_CONST_FUN_OBJ_2
(
�t_uni�_obj
, 
�t_uni�
);

425 
mp_obj_t
 
	$�t_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

426 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

427 
�
) {

428 
MP_UNARY_OP_BOOL
:

429  
	`mp_obj_�w_bo�
(
�lf
->
�t
.
u�d
 != 0);

430 
MP_UNARY_OP_LEN
:

431  
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
�t
.
u�d
);

432 #i�
MICROPY_PY_BUILTINS_FROZENSET


433 
MP_UNARY_OP_HASH
:

434 i�(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�oz��t
)) {

436 
mp_�t_t
 
hash
 = (mp_�t_t)(
u���_t
)&
mp_ty�_�oz��t
;

437 
size_t
 
max
 = 
�lf
->
�t
.
�loc
;

438 
mp_�t_t
 *
�t
 = &
�lf
->set;

440 
size_t
 
i
 = 0; i < 
max
; i++) {

441 i�(
	`mp_�t_��_is_f��d
(
�t
, 
i
)) {

442 
hash
 +�
	`MP_OBJ_SMALL_INT_VALUE
(
	`mp_u�ry_�
(
MP_UNARY_OP_HASH
, 
�t
->
�b�
[
i
]));

445  
	`MP_OBJ_NEW_SMALL_INT
(
hash
);

447 
MP_FALLTHROUGH


450  
MP_OBJ_NULL
;

452 
	}
}

454 
mp_obj_t
 
	$�t_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs
, mp_obj_�
rhs
) {

455 
mp_obj_t
 
�gs
[] = {
lhs
, 
rhs
};

456 #i�
MICROPY_PY_BUILTINS_FROZENSET


457 
bo�
 
upd�e
 = 
	`mp_obj_is_ty�
(
lhs
, &
mp_ty�_�t
);

459 
bo�
 
upd�e
 = 
�ue
;

461 i�(
�
 !�
MP_BINARY_OP_CONTAINS
 && !
	`is_�t_�_�oz��t
(
rhs
)) {

463  
MP_OBJ_NULL
;

465 
�
) {

466 
MP_BINARY_OP_OR
:

467  
	`�t_uni�
(
lhs
, 
rhs
);

468 
MP_BINARY_OP_XOR
:

469  
	`�t_symm�ric_dif�n�
(
lhs
, 
rhs
);

470 
MP_BINARY_OP_AND
:

471  
	`�t_��r��
(
lhs
, 
rhs
);

472 
MP_BINARY_OP_SUBTRACT
:

473  
	`�t_diff
(2, 
�gs
);

474 
MP_BINARY_OP_INPLACE_OR
:

475 i�(
upd�e
) {

476 
	`�t_upd�e
(2, 
�gs
);

477  
lhs
;

479  
	`�t_uni�
(
lhs
, 
rhs
);

481 
MP_BINARY_OP_INPLACE_XOR
:

482 i�(
upd�e
) {

483 
	`�t_symm�ric_dif�n�_upd�e
(
lhs
, 
rhs
);

484  
lhs
;

486  
	`�t_symm�ric_dif�n�
(
lhs
, 
rhs
);

488 
MP_BINARY_OP_INPLACE_AND
:

489 
rhs
 = 
	`�t_��r��_�t
(
lhs
,�hs, 
upd�e
);

490 i�(
upd�e
) {

491  
lhs
;

493  
rhs
;

495 
MP_BINARY_OP_INPLACE_SUBTRACT
:

496  
	`�t_diff_�t
(2, 
�gs
, 
upd�e
);

497 
MP_BINARY_OP_LESS
:

498  
	`�t_issub�t_�ݔ
(
lhs
, 
rhs
);

499 
MP_BINARY_OP_MORE
:

500  
	`�t_issu�r�t_�ݔ
(
lhs
, 
rhs
);

501 
MP_BINARY_OP_EQUAL
:

502  
	`�t_equ�
(
lhs
, 
rhs
);

503 
MP_BINARY_OP_LESS_EQUAL
:

504  
	`�t_issub�t
(
lhs
, 
rhs
);

505 
MP_BINARY_OP_MORE_EQUAL
:

506  
	`�t_issu�r�t
(
lhs
, 
rhs
);

507 
MP_BINARY_OP_CONTAINS
: {

508 
mp_obj_�t_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
lhs
);

509 
mp_obj_t
 
�em
 = 
	`mp_�t_lookup
(&
o
->
�t
, 
rhs
, 
MP_MAP_LOOKUP
);

510  
	`mp_obj_�w_bo�
(
�em
 !�
MP_OBJ_NULL
);

513  
MP_OBJ_NULL
;

515 
	}
}

520 cڡ 
mp_rom_m�_�em_t
 
	g�t_lo�ls_di�_�b�
[] = {

521 { 
MP_ROM_QSTR
(
MP_QSTR_add
), 
MP_ROM_PTR
(&
�t_add_obj
) },

522 { 
MP_ROM_QSTR
(
MP_QSTR_��r
), 
MP_ROM_PTR
(&
�t_��r_obj
) },

523 { 
MP_ROM_QSTR
(
MP_QSTR_c�y
), 
MP_ROM_PTR
(&
�t_c�y_obj
) },

524 { 
MP_ROM_QSTR
(
MP_QSTR_dis�rd
), 
MP_ROM_PTR
(&
�t_dis�rd_obj
) },

525 { 
MP_ROM_QSTR
(
MP_QSTR_dif�n�
), 
MP_ROM_PTR
(&
�t_diff_obj
) },

526 { 
MP_ROM_QSTR
(
MP_QSTR_dif�n�_upd�e
), 
MP_ROM_PTR
(&
�t_diff_upd�e_obj
) },

527 { 
MP_ROM_QSTR
(
MP_QSTR_��r��i�
), 
MP_ROM_PTR
(&
�t_��r��_obj
) },

528 { 
MP_ROM_QSTR
(
MP_QSTR_��r��i�_upd�e
), 
MP_ROM_PTR
(&
�t_��r��_upd�e_obj
) },

529 { 
MP_ROM_QSTR
(
MP_QSTR_isdisjo�t
), 
MP_ROM_PTR
(&
�t_isdisjo�t_obj
) },

530 { 
MP_ROM_QSTR
(
MP_QSTR_issub�t
), 
MP_ROM_PTR
(&
�t_issub�t_obj
) },

531 { 
MP_ROM_QSTR
(
MP_QSTR_issu�r�t
), 
MP_ROM_PTR
(&
�t_issu�r�t_obj
) },

532 { 
MP_ROM_QSTR
(
MP_QSTR_p�
), 
MP_ROM_PTR
(&
�t_p�_obj
) },

533 { 
MP_ROM_QSTR
(
MP_QSTR_�move
), 
MP_ROM_PTR
(&
�t_�move_obj
) },

534 { 
MP_ROM_QSTR
(
MP_QSTR_symm�ric_dif�n�
), 
MP_ROM_PTR
(&
�t_symm�ric_dif�n�_obj
) },

535 { 
MP_ROM_QSTR
(
MP_QSTR_symm�ric_dif�n�_upd�e
), 
MP_ROM_PTR
(&
�t_symm�ric_dif�n�_upd�e_obj
) },

536 { 
MP_ROM_QSTR
(
MP_QSTR_uni�
), 
MP_ROM_PTR
(&
�t_uni�_obj
) },

537 { 
MP_ROM_QSTR
(
MP_QSTR_upd�e
), 
MP_ROM_PTR
(&
�t_upd�e_obj
) },

538 { 
MP_ROM_QSTR
(
MP_QSTR___cڏ�s__
), 
MP_ROM_PTR
(&
mp_�_cڏ�s_obj
) },

540 
MP_DEFINE_CONST_DICT
(
�t_lo�ls_di�
, 
�t_lo�ls_di�_�b�
);

542 
MP_DEFINE_CONST_OBJ_TYPE
(

543 
mp_ty�_�t
,

544 
MP_QSTR_�t
,

545 
MP_TYPE_FLAG_ITER_IS_GETITER
,

546 
make_�w
, 
�t_make_�w
,

547 
��t
, 
�t_��t
,

548 
u�ry_�
, 
�t_u�ry_�
,

549 
b��y_�
, 
�t_b��y_�
,

550 
��
, 
�t_g���
,

551 
lo�ls_di�
, &
�t_lo�ls_di�


554 #i�
MICROPY_PY_BUILTINS_FROZENSET


555 cڡ 
mp_rom_m�_�em_t
 
	g�oz��t_lo�ls_di�_�b�
[] = {

556 { 
MP_ROM_QSTR
(
MP_QSTR_c�y
), 
MP_ROM_PTR
(&
�t_c�y_obj
) },

557 { 
MP_ROM_QSTR
(
MP_QSTR_dif�n�
), 
MP_ROM_PTR
(&
�t_diff_obj
) },

558 { 
MP_ROM_QSTR
(
MP_QSTR_��r��i�
), 
MP_ROM_PTR
(&
�t_��r��_obj
) },

559 { 
MP_ROM_QSTR
(
MP_QSTR_isdisjo�t
), 
MP_ROM_PTR
(&
�t_isdisjo�t_obj
) },

560 { 
MP_ROM_QSTR
(
MP_QSTR_issub�t
), 
MP_ROM_PTR
(&
�t_issub�t_obj
) },

561 { 
MP_ROM_QSTR
(
MP_QSTR_issu�r�t
), 
MP_ROM_PTR
(&
�t_issu�r�t_obj
) },

562 { 
MP_ROM_QSTR
(
MP_QSTR_symm�ric_dif�n�
), 
MP_ROM_PTR
(&
�t_symm�ric_dif�n�_obj
) },

563 { 
MP_ROM_QSTR
(
MP_QSTR_uni�
), 
MP_ROM_PTR
(&
�t_uni�_obj
) },

564 { 
MP_ROM_QSTR
(
MP_QSTR___cڏ�s__
), 
MP_ROM_PTR
(&
mp_�_cڏ�s_obj
) },

566 
MP_DEFINE_CONST_DICT
(
�oz��t_lo�ls_di�
, 
�oz��t_lo�ls_di�_�b�
);

568 
MP_DEFINE_CONST_OBJ_TYPE
(

569 
mp_ty�_�oz��t
,

570 
MP_QSTR_�oz��t
,

571 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE
 | 
MP_TYPE_FLAG_ITER_IS_GETITER
,

572 
make_�w
, 
�t_make_�w
,

573 
��t
, 
�t_��t
,

574 
u�ry_�
, 
�t_u�ry_�
,

575 
b��y_�
, 
�t_b��y_�
,

576 
��
, 
�t_g���
,

577 
lo�ls_di�
, &
�oz��t_lo�ls_di�


581 
mp_obj_t
 
	$mp_obj_�w_�t
(
size_t
 
n_�gs
, 
mp_obj_t
 *
�ems
) {

582 
mp_obj_�t_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�t_t, &
mp_ty�_�t
);

583 
	`mp_�t_��
(&
o
->
�t
, 
n_�gs
);

584 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

585 
	`mp_�t_lookup
(&
o
->
�t
, 
�ems
[
i
], 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

587  
	`MP_OBJ_FROM_PTR
(
o
);

588 
	}
}

590 
	$mp_obj_�t_��e
(
mp_obj_t
 
�lf_�
, mp_obj_�
�em
) {

591 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_�t
));

592 
mp_obj_�t_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

593 
	`mp_�t_lookup
(&
�lf
->
�t
, 
�em
, 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

594 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objsingleton.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/obj.h
"

35 
	s_mp_obj_s�g�t�_t
 {

36 
mp_obj_ba�_t
 
	mba�
;

37 
q�r
 
	m�me
;

38 } 
	tmp_obj_s�g�t�_t
;

40 
	$s�g�t�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

41 ()
k�d
;

42 
mp_obj_s�g�t�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

43 
	`mp_��tf
(
��t
, "%q", 
�lf
->
�me
);

44 
	}
}

46 
MP_DEFINE_CONST_OBJ_TYPE
(

47 
mp_ty�_s�g�t�
, 
MP_QSTR_
, 
MP_TYPE_FLAG_NONE
,

48 
��t
, 
s�g�t�_��t


51 cڡ 
mp_obj_s�g�t�_t
 
	gmp_cڡ_�l�sis_obj
 = {{&
mp_ty�_s�g�t�
}, 
MP_QSTR_EΝsis
};

52 #i�
MICROPY_PY_BUILTINS_NOTIMPLEMENTED


53 cڡ 
mp_obj_s�g�t�_t
 
	gmp_cڡ_n�im�em��d_obj
 = {{&
mp_ty�_s�g�t�
}, 
MP_QSTR_N�Im�em��d
};

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objslice.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

35 #i�
MICROPY_PY_BUILTINS_SLICE


37 
	$�i�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

38 ()
k�d
;

39 
mp_obj_�i�_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

40 
	`mp_��t_�r
(
��t
, "slice(");

41 
	`mp_obj_��t_h��r
(
��t
, 
o
->
��t
, 
PRINT_REPR
);

42 
	`mp_��t_�r
(
��t
, ", ");

43 
	`mp_obj_��t_h��r
(
��t
, 
o
->
��
, 
PRINT_REPR
);

44 
	`mp_��t_�r
(
��t
, ", ");

45 
	`mp_obj_��t_h��r
(
��t
, 
o
->
��
, 
PRINT_REPR
);

46 
	`mp_��t_�r
(
��t
, ")");

47 
	}
}

49 
mp_obj_t
 
	$�i�_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
o_�
) {

52  
MP_OBJ_NULL
;

53 
	}
}

55 #i�
MICROPY_PY_BUILTINS_SLICE_INDICES


56 
mp_obj_t
 
	$�i�_�di�s
(
mp_obj_t
 
�lf_�
, mp_obj_�
�ngth_obj
) {

57 
mp_�t_t
 
�ngth
 = 
	`mp_obj_g�_�t
(
�ngth_obj
);

58 
mp_bound_�i�_t
 
bound_�di�s
;

59 
	`mp_obj_�i�_�di�s
(
�lf_�
, 
�ngth
, &
bound_�di�s
);

61 
mp_obj_t
 
�su�s
[3] = {

62 
	`MP_OBJ_NEW_SMALL_INT
(
bound_�di�s
.
��t
),

63 
	`MP_OBJ_NEW_SMALL_INT
(
bound_�di�s
.
��
),

64 
	`MP_OBJ_NEW_SMALL_INT
(
bound_�di�s
.
��
),

66  
	`mp_obj_�w_tu�e
(3, 
�su�s
);

67 
	}
}

68 
MP_DEFINE_CONST_FUN_OBJ_2
(
�i�_�di�s_obj
, 
�i�_�di�s
);

71 #i�
MICROPY_PY_BUILTINS_SLICE_ATTRS


72 
	$�i�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

73 i�(
de�
[0] !�
MP_OBJ_NULL
) {

77 
mp_obj_�i�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

79 i�(
��
 =�
MP_QSTR_��t
) {

80 
de�
[0] = 
�lf
->
��t
;

81 } i�(
��
 =�
MP_QSTR_��
) {

82 
de�
[0] = 
�lf
->
��
;

83 } i�(
��
 =�
MP_QSTR_��
) {

84 
de�
[0] = 
�lf
->
��
;

85 #i�
MICROPY_PY_BUILTINS_SLICE_INDICES


86 } i�(
��
 =�
MP_QSTR_�di�s
) {

87 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(&
�i�_�di�s_obj
);

88 
de�
[1] = 
�lf_�
;

91 
	}
}

94 #i�
MICROPY_PY_BUILTINS_SLICE_INDICES
 && !
MICROPY_PY_BUILTINS_SLICE_ATTRS


95 cڡ 
mp_rom_m�_�em_t
 
	g�i�_lo�ls_di�_�b�
[] = {

96 { 
MP_ROM_QSTR
(
MP_QSTR_�di�s
), 
MP_ROM_PTR
(&
�i�_�di�s_obj
) },

98 
MP_DEFINE_CONST_DICT
(
�i�_lo�ls_di�
, 
�i�_lo�ls_di�_�b�
);

101 #i�
MICROPY_PY_BUILTINS_SLICE_ATTRS


102 
	#SLICE_TYPE_ATTR_OR_LOCALS_DICT
 
��
, 
�i�_��
,

	)

103 #�i�
MICROPY_PY_BUILTINS_SLICE_INDICES


104 
	#SLICE_TYPE_ATTR_OR_LOCALS_DICT
 
lo�ls_di�
, &
�i�_lo�ls_di�
,

	)

106 
	#SLICE_TYPE_ATTR_OR_LOCALS_DICT


	)

109 
MP_DEFINE_CONST_OBJ_TYPE
(

110 
mp_ty�_�i�
,

111 
MP_QSTR_�i�
,

112 
MP_TYPE_FLAG_NONE
,

113 
u�ry_�
, 
�i�_u�ry_�
,

114 
SLICE_TYPE_ATTR_OR_LOCALS_DICT


115 
��t
, 
�i�_��t


118 
mp_obj_t
 
	$mp_obj_�w_�i�
(
mp_obj_t
 
o��t
, mp_obj_�
o��
, mp_obj_�
o��
) {

119 
mp_obj_�i�_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�i�_t, &
mp_ty�_�i�
);

120 
o
->
��t
 = 
o��t
;

121 
o
->
��
 = 
o��
;

122 
o
->
��
 = 
o��
;

123  
	`MP_OBJ_FROM_PTR
(
o
);

124 
	}
}

129 
	$mp_obj_�i�_�di�s
(
mp_obj_t
 
�lf_�
, 
mp_�t_t
 
�ngth
, 
mp_bound_�i�_t
 *
�su�
) {

130 
mp_obj_�i�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

131 
mp_�t_t
 
��t
, 
��
, 
��
;

133 i�(
�lf
->
��
 =�
mp_cڡ_n�e
) {

134 
��
 = 1;

136 
��
 = 
	`mp_obj_g�_�t
(
�lf
->step);

137 i�(
��
 == 0) {

138 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("slice step can't be zero"));

142 i�(
��
 > 0) {

144 i�(
�lf
->
��t
 =�
mp_cڡ_n�e
) {

145 
��t
 = 0;

147 
��t
 = 
	`mp_obj_g�_�t
(
�lf
->start);

148 i�(
��t
 < 0) {

149 
��t
 +�
�ngth
;

151 
��t
 = 
	`MIN
(
�ngth
, 
	`MAX
(start, 0));

154 i�(
�lf
->
��
 =�
mp_cڡ_n�e
) {

155 
��
 = 
�ngth
;

157 
��
 = 
	`mp_obj_g�_�t
(
�lf
->stop);

158 i�(
��
 < 0) {

159 
��
 +�
�ngth
;

161 
��
 = 
	`MIN
(
�ngth
, 
	`MAX
(stop, 0));

165 i�(
�lf
->
��t
 =�
mp_cڡ_n�e
) {

166 
��t
 = 
�ngth
 - 1;

168 
��t
 = 
	`mp_obj_g�_�t
(
�lf
->start);

169 i�(
��t
 < 0) {

170 
��t
 +�
�ngth
;

172 
��t
 = 
	`MIN
(
�ngth
 - 1, 
	`MAX
(start, -1));

175 i�(
�lf
->
��
 =�
mp_cڡ_n�e
) {

176 
��
 = -1;

178 
��
 = 
	`mp_obj_g�_�t
(
�lf
->stop);

179 i�(
��
 < 0) {

180 
��
 +�
�ngth
;

182 
��
 = 
	`MIN
(
�ngth
 - 1, 
	`MAX
(stop, -1));

186 
�su�
->
��t
 = start;

187 
�su�
->
��
 = stop;

188 
�su�
->
��
 = step;

189 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstr.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/unicode.h
"

32 
	~"py/obj�r.h
"

33 
	~"py/objli�.h
"

34 
	~"py/ru�ime.h
"

35 
	~"py/c�ack.h
"

37 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


38 
mp_obj_t
 
�r_modulo_f�m�
(mp_obj_�
���n
, 
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, mp_obj_�
di�
);

41 
mp_obj_t
 
mp_obj_�w_by�s_����
(mp_obj_�
�r
, 
mp_obj_��_buf_t
 *
��_buf
);

42 
NORETURN
 
bad_im�ic�_c�v�si�
(
mp_obj_t
 
�lf_�
);

44 
mp_obj_t
 
mp_obj_�w_�r_ty�_�om_v�r
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
v�r_t
 *
v�r
);

46 
	$�r_check_�g_ty�
(cڡ 
mp_obj_ty�_t
 *
�lf_ty�
, cڡ 
mp_obj_t
 
�g
) {

50 cڡ 
mp_obj_ty�_t
 *
�g_ty�
 = 
	`mp_obj_g�_ty�
(
�g
);

52 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


53 i�(
�g_ty�
 =�&
mp_ty�_by���y
) {

54 
�g_ty�
 = &
mp_ty�_by�s
;

56 i�(
�lf_ty�
 =�&
mp_ty�_by���y
) {

57 
�lf_ty�
 = &
mp_ty�_by�s
;

61 i�(
�g_ty�
 !�
�lf_ty�
) {

62 
	`bad_im�ic�_c�v�si�
(
�g
);

64 
	}
}

66 
	$check_is_�r_�_by�s
(
mp_obj_t
 
�lf_�
) {

67 
	`mp_check_�lf
(
	`mp_obj_is_�r_�_by�s
(
�lf_�
));

68 
	}
}

73 
	$mp_�r_��t_qu�ed
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�r_d�a
, 
size_t
 
�r_�n
, 
bo�
 
is_by�s
) {

75 
bo�
 
has_s�g�_qu�e
 = 
�l�
;

76 
bo�
 
has_doub�_qu�e
 = 
�l�
;

77 cڡ 
by�
 *
s
 = 
�r_d�a
, *
t�
 = s�_d��+ 
�r_�n
; !
has_doub�_qu�e
 && s <�op; s++) {

78 i�(*
s
 == '\'') {

79 
has_s�g�_qu�e
 = 
�ue
;

80 } i�(*
s
 == '"') {

81 
has_doub�_qu�e
 = 
�ue
;

84 
qu�e_ch�
 = '\'';

85 i�(
has_s�g�_qu�e
 && !
has_doub�_qu�e
) {

86 
qu�e_ch�
 = '"';

88 
	`mp_��tf
(
��t
, "%c", 
qu�e_ch�
);

89 cڡ 
by�
 *
s
 = 
�r_d�a
, *
t�
 = s�_d��+ 
�r_�n
; s <�op; s++) {

90 i�(*
s
 =�
qu�e_ch�
) {

91 
	`mp_��tf
(
��t
, "\\%c", 
qu�e_ch�
);

92 } i�(*
s
 == '\\') {

93 
	`mp_��t_�r
(
��t
, "\\\\");

94 } i�(*
s
 >�0x20 && *�!�0x7�&& (!
is_by�s
 || *s < 0x80)) {

98 
	`mp_��tf
(
��t
, "%c", *
s
);

99 } i�(*
s
 == '\n') {

100 
	`mp_��t_�r
(
��t
, "\\n");

101 } i�(*
s
 == '\r') {

102 
	`mp_��t_�r
(
��t
, "\\r");

103 } i�(*
s
 == '\t') {

104 
	`mp_��t_�r
(
��t
, "\\t");

106 
	`mp_��tf
(
��t
, "\\x%02x", *
s
);

109 
	`mp_��tf
(
��t
, "%c", 
qu�e_ch�
);

110 
	}
}

112 #i�
MICROPY_PY_JSON


113 
	$mp_�r_��t_js�
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�r_d�a
, 
size_t
 
�r_�n
) {

116 
	`mp_��t_�r
(
��t
, "\"");

117 cڡ 
by�
 *
s
 = 
�r_d�a
, *
t�
 = s�_d��+ 
�r_�n
; s <�op; s++) {

118 i�(*
s
 == '"' || *s == '\\') {

119 
	`mp_��tf
(
��t
, "\\%c", *
s
);

120 } i�(*
s
 >= 32) {

122 
	`mp_��tf
(
��t
, "%c", *
s
);

123 } i�(*
s
 == '\n') {

124 
	`mp_��t_�r
(
��t
, "\\n");

125 } i�(*
s
 == '\r') {

126 
	`mp_��t_�r
(
��t
, "\\r");

127 } i�(*
s
 == '\t') {

128 
	`mp_��t_�r
(
��t
, "\\t");

131 
	`mp_��tf
(
��t
, "\\u%04x", *
s
);

134 
	`mp_��t_�r
(
��t
, "\"");

135 
	}
}

138 
	$�r_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

139 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�r_d�a
, 
�r_�n
);

140 #i�
MICROPY_PY_JSON


141 i�(
k�d
 =�
PRINT_JSON
) {

142 
	`mp_�r_��t_js�
(
��t
, 
�r_d�a
, 
�r_�n
);

146 #i�!
MICROPY_PY_BUILTINS_STR_UNICODE


147 
bo�
 
is_by�s
 = 
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_by�s
);

149 
bo�
 
is_by�s
 = 
�ue
;

151 i�(
k�d
 =�
PRINT_RAW
 || (!
MICROPY_PY_BUILTINS_STR_UNICODE
 && k�d =�
PRINT_STR
 && !
is_by�s
)) {

152 
��t
->
	`��t_��
�r�t->
d�a
, (cڡ *)
�r_d�a
, 
�r_�n
);

154 i�(
is_by�s
) {

155 
��t
->
	`��t_��
�r�t->
d�a
, "b", 1);

157 
	`mp_�r_��t_qu�ed
(
��t
, 
�r_d�a
, 
�r_�n
, 
is_by�s
);

159 
	}
}

161 
mp_obj_t
 
	$mp_obj_�r_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

162 #i�
MICROPY_CPYTHON_COMPAT


163 i�(
n_kw
 != 0) {

164 
	`mp_�g_�r�_unim�_kw
();

168 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 3, 
�l�
);

170 
n_�gs
) {

172  
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

175 
v�r_t
 
v�r
;

176 
mp_��t_t
 
��t
;

177 
	`v�r_��_��t
(&
v�r
, 16, &
��t
);

178 
	`mp_obj_��t_h��r
(&
��t
, 
�gs
[0], 
PRINT_STR
);

179  
	`mp_obj_�w_�r_ty�_�om_v�r
(
ty�
, &
v�r
);

184 i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_by�s
)) {

185 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r_d�a
, 
�r_�n
);

186 
	`GET_STR_HASH
(
�gs
[0], 
�r_hash
);

187 i�(
�r_hash
 == 0) {

188 
�r_hash
 = 
	`q�r_compu�_hash
(
�r_d�a
, 
�r_�n
);

190 #i�
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


191 i�(!
	`utf8_check
(
�r_d�a
, 
�r_�n
)) {

192 
	`mp_�i�_msg
(&
mp_ty�_UnicodeE��
, 
NULL
);

197 
q�r
 
q
 = 
	`q�r_f�d_��
((cڡ *)
�r_d�a
, 
�r_�n
);

198 i�(
q
 !�
MP_QSTRnu�
) {

199  
	`MP_OBJ_NEW_QSTR
(
q
);

202 
mp_obj_�r_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_�r_c�y
(
ty�
, 
NULL
, 
�r_�n
));

203 
o
->
d�a
 = 
�r_d�a
;

204 
o
->
hash
 = 
�r_hash
;

205  
	`MP_OBJ_FROM_PTR
(
o
);

207 
mp_buf�r_�fo_t
 
buf�fo
;

208 
	`mp_g�_buf�r_�i�
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
);

210  
	`mp_obj_�w_�r
(
buf�fo
.
buf
, buf�fo.
�n
);

213 
	}
}

215 
mp_obj_t
 
	$by�s_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

216 ()
ty�_�
;

218 #i�
MICROPY_CPYTHON_COMPAT


219 i�(
n_kw
 != 0) {

220 
	`mp_�g_�r�_unim�_kw
();

223 ()
n_kw
;

226 i�(
n_�gs
 == 0) {

227  
mp_cڡ_em�y_by�s
;

230 i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_by�s
)) {

231  
�gs
[0];

234 i�(
	`mp_obj_is_�r
(
�gs
[0])) {

235 i�(
n_�gs
 < 2 ||�_args > 3) {

236 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


237 
wr�g_�gs
;

239 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("string�rgument without�n�ncoding"));

242 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r_d�a
, 
�r_�n
);

243 
	`GET_STR_HASH
(
�gs
[0], 
�r_hash
);

244 i�(
�r_hash
 == 0) {

245 
�r_hash
 = 
	`q�r_compu�_hash
(
�r_d�a
, 
�r_�n
);

247 
mp_obj_�r_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_�r_c�y
(&
mp_ty�_by�s
, 
NULL
, 
�r_�n
));

248 
o
->
d�a
 = 
�r_d�a
;

249 
o
->
hash
 = 
�r_hash
;

250  
	`MP_OBJ_FROM_PTR
(
o
);

253 i�(
n_�gs
 > 1) {

254 
wr�g_�gs
;

257 i�(
	`mp_obj_is_sm�l_�t
(
�gs
[0])) {

258 
mp_�t_t
 
�n
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[0]);

259 i�(
�n
 < 0) {

260 
	`mp_�i�_V�ueE��
(
NULL
);

262 
v�r_t
 
v�r
;

263 
	`v�r_��_�n
(&
v�r
, 
�n
);

264 
	`mem�t
(
v�r
.
buf
, 0, 
�n
);

265  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

269 
mp_buf�r_�fo_t
 
buf�fo
;

270 i�(
	`mp_g�_buf�r
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
)) {

271  
	`mp_obj_�w_by�s
(
buf�fo
.
buf
, buf�fo.
�n
);

274 
v�r_t
 
v�r
;

276 
mp_obj_t
 
�n_�
 = 
	`mp_obj_�n_maybe
(
�gs
[0]);

277 i�(
�n_�
 =�
MP_OBJ_NULL
) {

278 
	`v�r_��
(&
v�r
, 16);

280 
mp_�t_t
 
�n
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�n_�
);

281 
	`v�r_��
(&
v�r
, 
�n
);

284 
mp_obj_��_buf_t
 
��_buf
;

285 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�gs
[0], &
��_buf
);

286 
mp_obj_t
 
�em
;

287 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

288 
mp_�t_t
 
v�
 = 
	`mp_obj_g�_�t
(
�em
);

289 #i�
MICROPY_FULL_CHECKS


290 i�(
v�
 < 0 || val > 255) {

291 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("bytes value out of�ange"));

294 
	`v�r_add_by�
(&
v�r
, 
v�
);

297  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

299 
wr�g_�gs
:

300 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("wrong�umber of�rguments"));

301 
	}
}

305 cڡ 
by�
 *
	$f�d_subby�s
(cڡ 
by�
 *
hay�ack
, 
size_t
 
h�n
, cڡ by� *
�ed�
, size_�
ƒ
, 
d�e�i�
) {

306 i�(
h�n
 >�
ƒ
) {

307 
size_t
 
�r_�dex
, 
�r_�dex_�d
;

308 i�(
d�e�i�
 > 0) {

309 
�r_�dex
 = 0;

310 
�r_�dex_�d
 = 
h�n
 - 
ƒ
;

312 
�r_�dex
 = 
h�n
 - 
ƒ
;

313 
�r_�dex_�d
 = 0;

316 i�(
	`memcmp
(&
hay�ack
[
�r_�dex
], 
�ed�
, 
ƒ
) == 0) {

318  
hay�ack
 + 
�r_�dex
;

320 i�(
�r_�dex
 =�
�r_�dex_�d
) {

324 
�r_�dex
 +�
d�e�i�
;

327  
NULL
;

328 
	}
}

333 
mp_obj_t
 
	$mp_obj_�r_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

335 i�(
�
 =�
MP_BINARY_OP_MODULO
) {

336 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


337 
mp_obj_t
 *
�gs
 = &
rhs_�
;

338 
size_t
 
n_�gs
 = 1;

339 
mp_obj_t
 
di�
 = 
MP_OBJ_NULL
;

340 i�(
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_tu�e
)) {

342 
	`mp_obj_tu�e_g�
(
rhs_�
, &
n_�gs
, &
�gs
);

343 } i�(
	`mp_obj_is_ty�
(
rhs_�
, &
mp_ty�_di�
)) {

344 
di�
 = 
rhs_�
;

346  
	`�r_modulo_f�m�
(
lhs_�
, 
n_�gs
, 
�gs
, 
di�
);

348  
MP_OBJ_NULL
;

353 cڡ 
mp_obj_ty�_t
 *
lhs_ty�
 = 
	`mp_obj_g�_ty�
(
lhs_�
);

354 
	`GET_STR_DATA_LEN
(
lhs_�
, 
lhs_d�a
, 
lhs_�n
);

357 i�(
�
 =�
MP_BINARY_OP_MULTIPLY
) {

358 
mp_�t_t
 
n
;

359 i�(!
	`mp_obj_g�_�t_maybe
(
rhs_�
, &
n
)) {

360  
MP_OBJ_NULL
;

362 i�(
n
 <= 0) {

363 i�(
lhs_ty�
 =�&
mp_ty�_�r
) {

364  
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

366  
mp_cڡ_em�y_by�s
;

369 
v�r_t
 
v�r
;

370 
	`v�r_��_�n
(&
v�r
, 
lhs_�n
 * 
n
);

371 
	`mp_�q_muɝly
(
lhs_d�a
, (*lhs_d�a), 
lhs_�n
, 
n
, 
v�r
.
buf
);

372  
	`mp_obj_�w_�r_ty�_�om_v�r
(
lhs_ty�
, &
v�r
);

390 cڡ 
by�
 *
rhs_d�a
;

391 
size_t
 
rhs_�n
;

392 i�(
lhs_ty�
 =�
	`mp_obj_g�_ty�
(
rhs_�
)) {

393 
	`GET_STR_DATA_LEN
(
rhs_�
, 
rhs_d�a_
, 
rhs_�n_
);

394 
rhs_d�a
 = 
rhs_d�a_
;

395 
rhs_�n
 = 
rhs_�n_
;

396 } i�(
lhs_ty�
 =�&
mp_ty�_by�s
) {

397 
mp_buf�r_�fo_t
 
buf�fo
;

398 i�(!
	`mp_g�_buf�r
(
rhs_�
, &
buf�fo
, 
MP_BUFFER_READ
)) {

399  
MP_OBJ_NULL
;

401 
rhs_d�a
 = 
buf�fo
.
buf
;

402 
rhs_�n
 = 
buf�fo
.
�n
;

409 i�(
�
 =�
MP_BINARY_OP_CONTAINS
) {

410 
	`bad_im�ic�_c�v�si�
(
rhs_�
);

415  
MP_OBJ_NULL
;

418 
�
) {

419 
MP_BINARY_OP_ADD
:

420 
MP_BINARY_OP_INPLACE_ADD
: {

421 i�(
lhs_�n
 =�0 && 
	`mp_obj_g�_ty�
(
rhs_�
�=�
lhs_ty�
) {

422  
rhs_�
;

424 i�(
rhs_�n
 == 0) {

425  
lhs_�
;

428 
v�r_t
 
v�r
;

429 
	`v�r_��_�n
(&
v�r
, 
lhs_�n
 + 
rhs_�n
);

430 
	`mem�y
(
v�r
.
buf
, 
lhs_d�a
, 
lhs_�n
);

431 
	`mem�y
(
v�r
.
buf
 + 
lhs_�n
, 
rhs_d�a
, 
rhs_�n
);

432  
	`mp_obj_�w_�r_ty�_�om_v�r
(
lhs_ty�
, &
v�r
);

435 
MP_BINARY_OP_CONTAINS
:

436  
	`mp_obj_�w_bo�
(
	`f�d_subby�s
(
lhs_d�a
, 
lhs_�n
, 
rhs_d�a
, 
rhs_�n
, 1�!�
NULL
);

439 
MP_BINARY_OP_EQUAL
:

440 
MP_BINARY_OP_LESS
:

441 
MP_BINARY_OP_LESS_EQUAL
:

442 
MP_BINARY_OP_MORE
:

443 
MP_BINARY_OP_MORE_EQUAL
:

444  
	`mp_obj_�w_bo�
(
	`mp_�q_cmp_by�s
(
�
, 
lhs_d�a
, 
lhs_�n
, 
rhs_d�a
, 
rhs_�n
));

447  
MP_OBJ_NULL
;

449 
	}
}

451 #i�!
MICROPY_PY_BUILTINS_STR_UNICODE


453 cڡ 
by�
 *
	$�r_�dex_to_�r
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
�lf_d�a
, 
size_t
 
�lf_�n
,

454 
mp_obj_t
 
�dex
, 
bo�
 
is_�i�
) {

455 
size_t
 
�dex_v�
 = 
	`mp_g�_�dex
(
ty�
, 
�lf_�n
, 
�dex
, 
is_�i�
);

456  
�lf_d�a
 + 
�dex_v�
;

457 
	}
}

461 
mp_obj_t
 
	$by�s_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

462 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

463 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�lf_d�a
, 
�lf_�n
);

464 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

466 #i�
MICROPY_PY_BUILTINS_SLICE


467 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

468 
mp_bound_�i�_t
 
�i�
;

469 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
�lf_�n
, 
�dex
, &
�i�
)) {

470 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("only slices with step=1 (aka None)�re supported"));

472  
	`mp_obj_�w_�r_of_ty�
(
ty�
, 
�lf_d�a
 + 
�i�
.
��t
, sli�.
��
 - slice.start);

475 
size_t
 
�dex_v�
 = 
	`mp_g�_�dex
(
ty�
, 
�lf_�n
, 
�dex
, 
�l�
);

477 i�(
MICROPY_PY_BUILTINS_STR_UNICODE
 || 
ty�
 =�&
mp_ty�_by�s
) {

478  
	`MP_OBJ_NEW_SMALL_INT
(
�lf_d�a
[
�dex_v�
]);

480  
	`mp_obj_�w_�r_v�_q�r
((*)&
�lf_d�a
[
�dex_v�
], 1);

483  
MP_OBJ_NULL
;

485 
	}
}

487 
mp_obj_t
 
	$�r_jo�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

488 
	`check_is_�r_�_by�s
(
�lf_�
);

489 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

490 cڡ 
mp_obj_ty�_t
 *
�t_ty�
 = 
�lf_ty�
;

493 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�p_�r
, 
�p_�n
);

496 
size_t
 
�q_�n
;

497 
mp_obj_t
 *
�q_�ems
;

499 i�(!
	`mp_obj_is_ty�
(
�g
, &
mp_ty�_li�
�&& !mp_obj_is_ty��rg, &
mp_ty�_tu�e
)) {

502 
�g
 = 
	`mp_obj_li�_make_�w
(&
mp_ty�_li�
, 1, 0, &arg);

504 
	`mp_obj_g�_��y
(
�g
, &
�q_�n
, &
�q_�ems
);

507 
size_t
 
�qu�ed_�n
 = 0;

508 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


509 i�(
�lf_ty�
 =�&
mp_ty�_by���y
) {

510 
�lf_ty�
 = &
mp_ty�_by�s
;

513 
size_t
 
i
 = 0; i < 
�q_�n
; i++) {

514 cڡ 
mp_obj_ty�_t
 *
�q_ty�
 = 
	`mp_obj_g�_ty�
(
�q_�ems
[
i
]);

515 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


516 i�(
�q_ty�
 =�&
mp_ty�_by���y
) {

517 
�q_ty�
 = &
mp_ty�_by�s
;

520 i�(
�q_ty�
 !�
�lf_ty�
) {

521 
	`mp_�i�_Ty�E��
(

522 
	`MP_ERROR_TEXT
("join�xpects��ist of str/bytes objects consistent with self object"));

524 i�(
i
 > 0) {

525 
�qu�ed_�n
 +�
�p_�n
;

527 
	`GET_STR_LEN
(
�q_�ems
[
i
], 
l
);

528 
�qu�ed_�n
 +�
l
;

532 
v�r_t
 
v�r
;

533 
	`v�r_��_�n
(&
v�r
, 
�qu�ed_�n
);

534 
by�
 *
d�a
 = (by� *)
v�r
.
buf
;

535 
size_t
 
i
 = 0; i < 
�q_�n
; i++) {

536 i�(
i
 > 0) {

537 
	`mem�y
(
d�a
, 
�p_�r
, 
�p_�n
);

538 
d�a
 +�
�p_�n
;

540 
	`GET_STR_DATA_LEN
(
�q_�ems
[
i
], 
s
, 
l
);

541 
	`mem�y
(
d�a
, 
s
, 
l
);

542 
d�a
 +�
l
;

546  
	`mp_obj_�w_�r_ty�_�om_v�r
(
�t_ty�
, &
v�r
);

547 
	}
}

548 
MP_DEFINE_CONST_FUN_OBJ_2
(
�r_jo�_obj
, 
�r_jo�
);

550 
mp_obj_t
 
	$mp_obj_�r_�l�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

551 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

552 
mp_�t_t
 
�l�s
 = -1;

553 
mp_obj_t
 
�p
 = 
mp_cڡ_n�e
;

554 i�(
n_�gs
 > 1) {

555 
�p
 = 
�gs
[1];

556 i�(
n_�gs
 > 2) {

557 
�l�s
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

561 
mp_obj_t
 
�s
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

562 
	`GET_STR_DATA_LEN
(
�gs
[0], 
s
, 
�n
);

563 cڡ 
by�
 *
t�
 = 
s
 + 
�n
;

565 i�(
�p
 =�
mp_cڡ_n�e
) {

569 
s
 < 
t�
 && 
	`unich�_is�a�
(*s)) {

570 
s
++;

572 
s
 < 
t�
 && 
�l�s
 != 0) {

573 cڡ 
by�
 *
��t
 = 
s
;

574 
s
 < 
t�
 && !
	`unich�_is�a�
(*s)) {

575 
s
++;

577 
	`mp_obj_li�_��nd
(
�s
, 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
��t
, 
s
 - start));

578 i�(
s
 >�
t�
) {

581 
s
 < 
t�
 && 
	`unich�_is�a�
(*s)) {

582 
s
++;

584 i�(
�l�s
 > 0) {

585 
�l�s
--;

589 i�(
s
 < 
t�
) {

590 
	`mp_obj_li�_��nd
(
�s
, 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
s
, 
t�
 - s));

595 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�p
);

597 
size_t
 
�p_�n
;

598 cڡ *
�p_�r
 = 
	`mp_obj_�r_g�_d�a
(
�p
, &
�p_�n
);

600 i�(
�p_�n
 == 0) {

601 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("empty separator"));

605 cڡ 
by�
 *
��t
 = 
s
;

607 i�(
�l�s
 =�0 || 
s
 + 
�p_�n
 > 
t�
) {

608 
s
 = 
t�
;

610 } i�(
	`memcmp
(
s
, 
�p_�r
, 
�p_�n
) == 0) {

613 
s
++;

615 
	`mp_obj_li�_��nd
(
�s
, 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
��t
, 
s
 - start));

616 i�(
s
 >�
t�
) {

619 
s
 +�
�p_�n
;

620 i�(
�l�s
 > 0) {

621 
�l�s
--;

626  
�s
;

627 
	}
}

628 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_�l�_obj
, 1, 3, 
mp_obj_�r_�l�
);

630 #i�
MICROPY_PY_BUILTINS_STR_SPLITLINES


631 
mp_obj_t
 
	$�r_�l�l�es
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
) {

632 �um { 
ARG_k��nds
 };

633 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

634 { 
MP_QSTR_k��nds
, 
MP_ARG_BOOL
, {.
u_bo�
 = 
�l�
} },

638 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

639 
	`mp_�g_�r�_�l
(
n_�gs
 - 1, 
pos_�gs
 + 1, 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

641 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
pos_�gs
[0]);

642 
mp_obj_t
 
�s
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

644 
	`GET_STR_DATA_LEN
(
pos_�gs
[0], 
s
, 
�n
);

645 cڡ 
by�
 *
t�
 = 
s
 + 
�n
;

647 
s
 < 
t�
) {

648 cڡ 
by�
 *
��t
 = 
s
;

649 
size_t
 
m�ch
 = 0;

650 
s
 < 
t�
) {

651 i�(*
s
 == '\n') {

652 
m�ch
 = 1;

654 } i�(*
s
 == '\r') {

655 i�(
s
[1] == '\n') {

656 
m�ch
 = 2;

658 
m�ch
 = 1;

662 
s
++;

664 
size_t
 
sub_�n
 = 
s
 - 
��t
;

665 i�(
�gs
[
ARG_k��nds
].
u_bo�
) {

666 
sub_�n
 +�
m�ch
;

668 
	`mp_obj_li�_��nd
(
�s
, 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
��t
, 
sub_�n
));

669 
s
 +�
m�ch
;

672  
�s
;

673 
	}
}

674 
MP_DEFINE_CONST_FUN_OBJ_KW
(
�r_�l�l�es_obj
, 1, 
�r_�l�l�es
);

677 
mp_obj_t
 
	$�r_r�l�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

678 i�(
n_�gs
 < 3) {

681  
	`mp_obj_�r_�l�
(
n_�gs
, 
�gs
);

683 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

684 
mp_obj_t
 
�p
 = 
�gs
[1];

685 
	`GET_STR_DATA_LEN
(
�gs
[0], 
s
, 
�n
);

687 
mp_�t_t
 
�l�s
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

688 i�(
�l�s
 < 0) {

690  
	`mp_obj_�r_�l�
(
n_�gs
, 
�gs
);

693 
mp_�t_t
 
�g_�l�s
 = 
�l�s
;

696 
mp_obj_li�_t
 *
�s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_li�
(
�l�s
 + 1, 
NULL
));

697 
mp_�t_t
 
idx
 = 
�l�s
;

699 i�(
�p
 =�
mp_cڡ_n�e
) {

700 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("rsplit(None,n)"));

702 
size_t
 
�p_�n
;

703 cڡ *
�p_�r
 = 
	`mp_obj_�r_g�_d�a
(
�p
, &
�p_�n
);

705 i�(
�p_�n
 == 0) {

706 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("empty separator"));

709 cڡ 
by�
 *
beg
 = 
s
;

710 cڡ 
by�
 *
ϡ
 = 
s
 + 
�n
;

712 
s
 = 
ϡ
 - 
�p_�n
;

714 i�(
�l�s
 =�0 || 
s
 < 
beg
) {

716 } i�(
	`memcmp
(
s
, 
�p_�r
, 
�p_�n
) == 0) {

719 
s
--;

721 i�(
s
 < 
beg
 || 
�l�s
 == 0) {

722 
�s
->
�ems
[
idx
] = 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
beg
, 
ϡ
 - beg);

725 
�s
->
�ems
[
idx
--] = 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
s
 + 
�p_�n
, 
ϡ
 - s - sep_len);

726 
ϡ
 = 
s
;

727 
�l�s
--;

729 i�(
idx
 != 0) {

731 
size_t
 
u�d
 = 
�g_�l�s
 + 1 - 
idx
;

732 
	`memmove
(
�s
->
�ems
, &�s->�ems[
idx
], 
u�d
 * (
mp_obj_t
));

733 
	`mp_�q_��r
(
�s
->
�ems
, 
u�d
,�es->
�loc
, (*res->items));

734 
�s
->
�n
 = 
u�d
;

738  
	`MP_OBJ_FROM_PTR
(
�s
);

739 
	}
}

740 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_r�l�_obj
, 1, 3, 
�r_r�l�
);

742 
mp_obj_t
 
	$�r_f�d�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
d�e�i�
, 
bo�
 
is_�dex
) {

743 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

744 
	`check_is_�r_�_by�s
(
�gs
[0]);

747 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�gs
[1]);

749 
	`GET_STR_DATA_LEN
(
�gs
[0], 
hay�ack
, 
hay�ack_�n
);

750 
	`GET_STR_DATA_LEN
(
�gs
[1], 
�ed�
, 
�ed�_�n
);

752 cڡ 
by�
 *
��t
 = 
hay�ack
;

753 cڡ 
by�
 *
�d
 = 
hay�ack
 + 
hay�ack_�n
;

754 i�(
n_�gs
 >�3 && 
�gs
[2] !�
mp_cڡ_n�e
) {

755 
��t
 = 
	`�r_�dex_to_�r
(
�lf_ty�
, 
hay�ack
, 
hay�ack_�n
, 
�gs
[2], 
�ue
);

757 i�(
n_�gs
 >�4 && 
�gs
[3] !�
mp_cڡ_n�e
) {

758 
�d
 = 
	`�r_�dex_to_�r
(
�lf_ty�
, 
hay�ack
, 
hay�ack_�n
, 
�gs
[3], 
�ue
);

761 i�(
�d
 < 
��t
) {

762 
out_�r�
;

765 cڡ 
by�
 *
p
 = 
	`f�d_subby�s
(
��t
, 
�d
 - s��, 
�ed�
, 
�ed�_�n
, 
d�e�i�
);

766 i�(
p
 =�
NULL
) {

767 
out_�r�
:

769 i�(
is_�dex
) {

770 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("substring�ot found"));

772  
	`MP_OBJ_NEW_SMALL_INT
(-1);

776 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


777 i�(
�lf_ty�
 =�&
mp_ty�_�r
) {

778  
	`MP_OBJ_NEW_SMALL_INT
(
	`utf8_�r_to_�dex
(
hay�ack
, 
p
));

781  
	`MP_OBJ_NEW_SMALL_INT
(
p
 - 
hay�ack
);

783 
	}
}

785 
mp_obj_t
 
	$�r_f�d
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

786  
	`�r_f�d�
(
n_�gs
, 
�gs
, 1, 
�l�
);

787 
	}
}

788 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_f�d_obj
, 2, 4, 
�r_f�d
);

790 
mp_obj_t
 
	$�r_rf�d
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

791  
	`�r_f�d�
(
n_�gs
, 
�gs
, -1, 
�l�
);

792 
	}
}

793 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_rf�d_obj
, 2, 4, 
�r_rf�d
);

795 
mp_obj_t
 
	$�r_�dex
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

796  
	`�r_f�d�
(
n_�gs
, 
�gs
, 1, 
�ue
);

797 
	}
}

798 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_�dex_obj
, 2, 4, 
�r_�dex
);

800 
mp_obj_t
 
	$�r_r�dex
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

801  
	`�r_f�d�
(
n_�gs
, 
�gs
, -1, 
�ue
);

802 
	}
}

803 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_r�dex_obj
, 2, 4, 
�r_r�dex
);

806 
mp_obj_t
 
	$�r_��tsw�h
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

807 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

808 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r
, 
�r_�n
);

809 
size_t
 
�efix_�n
;

810 cڡ *
�efix
 = 
	`mp_obj_�r_g�_d�a
(
�gs
[1], &
�efix_�n
);

811 cڡ 
by�
 *
��t
 = 
�r
;

812 i�(
n_�gs
 > 2) {

813 
��t
 = 
	`�r_�dex_to_�r
(
�lf_ty�
, 
�r
, 
�r_�n
, 
�gs
[2], 
�ue
);

815 i�(
�efix_�n
 + (
��t
 - 
�r
�> 
�r_�n
) {

816  
mp_cڡ_�l�
;

818  
	`mp_obj_�w_bo�
(
	`memcmp
(
��t
, 
�efix
, 
�efix_�n
) == 0);

819 
	}
}

820 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_��tsw�h_obj
, 2, 3, 
�r_��tsw�h
);

822 
mp_obj_t
 
	$�r_�dsw�h
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

823 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r
, 
�r_�n
);

824 
size_t
 
suffix_�n
;

825 cڡ *
suffix
 = 
	`mp_obj_�r_g�_d�a
(
�gs
[1], &
suffix_�n
);

826 i�(
n_�gs
 > 2) {

827 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("start/end indices"));

830 i�(
suffix_�n
 > 
�r_�n
) {

831  
mp_cڡ_�l�
;

833  
	`mp_obj_�w_bo�
(
	`memcmp
(
�r
 + (
�r_�n
 - 
suffix_�n
), 
suffix
, suffix_len) == 0);

834 
	}
}

835 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_�dsw�h_obj
, 2, 3, 
�r_�dsw�h
);

837 �um { 
	mLSTRIP
, 
	mRSTRIP
, 
	mSTRIP
 };

839 
mp_obj_t
 
	$�r_uni_�r�
(
ty�
, 
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

840 
	`check_is_�r_�_by�s
(
�gs
[0]);

841 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

843 cڡ 
by�
 *
ch�s_to_d�
;

844 
u�t
 
ch�s_to_d�_�n
;

845 cڡ 
by�
 
wh�e�a�
[] = " \t\n\r\v\f";

847 i�(
n_�gs
 == 1) {

848 
ch�s_to_d�
 = 
wh�e�a�
;

849 
ch�s_to_d�_�n
 = (
wh�e�a�
) - 1;

851 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�gs
[1]);

852 
	`GET_STR_DATA_LEN
(
�gs
[1], 
s
, 
l
);

853 
ch�s_to_d�
 = 
s
;

854 
ch�s_to_d�_�n
 = 
l
;

857 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�ig_�r
, 
�ig_�r_�n
);

859 
size_t
 
f��_good_ch�_pos
 = 0;

860 
bo�
 
f��_good_ch�_pos_�t
 = 
�l�
;

861 
size_t
 
ϡ_good_ch�_pos
 = 0;

862 
size_t
 
i
 = 0;

863 
d��
 = 1;

864 i�(
ty�
 =�
RSTRIP
) {

865 
i
 = 
�ig_�r_�n
 - 1;

866 
d��
 = -1;

868 
size_t
 
�n
 = 
�ig_�r_�n
;�en > 0;�en--) {

869 i�(
	`f�d_subby�s
(
ch�s_to_d�
, 
ch�s_to_d�_�n
, &
�ig_�r
[
i
], 1, 1�=�
NULL
) {

870 i�(!
f��_good_ch�_pos_�t
) {

871 
f��_good_ch�_pos_�t
 = 
�ue
;

872 
f��_good_ch�_pos
 = 
i
;

873 i�(
ty�
 =�
LSTRIP
) {

874 
ϡ_good_ch�_pos
 = 
�ig_�r_�n
 - 1;

876 } i�(
ty�
 =�
RSTRIP
) {

877 
f��_good_ch�_pos
 = 0;

878 
ϡ_good_ch�_pos
 = 
i
;

882 
ϡ_good_ch�_pos
 = 
i
;

884 
i
 +�
d��
;

887 i�(!
f��_good_ch�_pos_�t
) {

889 i�(
�lf_ty�
 =�&
mp_ty�_�r
) {

890  
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

892  
mp_cڡ_em�y_by�s
;

896 
	`as��
(
ϡ_good_ch�_pos
 >�
f��_good_ch�_pos
);

898 
size_t
 
�r��d_�n
 = 
ϡ_good_ch�_pos
 - 
f��_good_ch�_pos
 + 1;

899 i�(
�r��d_�n
 =�
�ig_�r_�n
) {

902 
	`as��
(
f��_good_ch�_pos
 == 0);

903  
�gs
[0];

905  
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
�ig_�r
 + 
f��_good_ch�_pos
, 
�r��d_�n
);

906 
	}
}

908 
mp_obj_t
 
	$�r_�r�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

909  
	`�r_uni_�r�
(
STRIP
, 
n_�gs
, 
�gs
);

910 
	}
}

911 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_�r�_obj
, 1, 2, 
�r_�r�
);

913 
mp_obj_t
 
	$�r_l�r�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

914  
	`�r_uni_�r�
(
LSTRIP
, 
n_�gs
, 
�gs
);

915 
	}
}

916 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_l�r�_obj
, 1, 2, 
�r_l�r�
);

918 
mp_obj_t
 
	$�r_r�r�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

919  
	`�r_uni_�r�
(
RSTRIP
, 
n_�gs
, 
�gs
);

920 
	}
}

921 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_r�r�_obj
, 1, 2, 
�r_r�r�
);

923 #i�
MICROPY_PY_BUILTINS_STR_CENTER


924 
mp_obj_t
 
	$�r_���
(
mp_obj_t
 
�r_�
, mp_obj_�
width_�
) {

925 
	`GET_STR_DATA_LEN
(
�r_�
, 
�r
, 
�r_�n
);

926 
mp_u�t_t
 
width
 = 
	`mp_obj_g�_�t
(
width_�
);

927 i�(
�r_�n
 >�
width
) {

928  
�r_�
;

931 
v�r_t
 
v�r
;

932 
	`v�r_��_�n
(&
v�r
, 
width
);

933 
	`mem�t
(
v�r
.
buf
, ' ', 
width
);

934 
��
 = (
width
 - 
�r_�n
) / 2;

935 
	`mem�y
(
v�r
.
buf
 + 
��
, 
�r
, 
�r_�n
);

936  
	`mp_obj_�w_�r_ty�_�om_v�r
(
	`mp_obj_g�_ty�
(
�r_�
), &
v�r
);

937 
	}
}

938 
MP_DEFINE_CONST_FUN_OBJ_2
(
�r_���_obj
, 
�r_���
);

943 cڡ *
	$�r_to_�t
(cڡ *
�r
, cڡ *
t�
, *
num
) {

944 i�(
�r
 < 
t�
 && '0' <= *str && *str <= '9') {

945 *
num
 = 0;

947 *
num
 = *num * 10 + (*
�r
 - '0');

948 
�r
++;

950 
�r
 < 
t�
 && '0' <= *str && *str <= '9');

952  
�r
;

953 
	}
}

955 
bo�
 
	$i�lignm�t
(
ch
) {

956  
ch
 && 
	`�rchr
("<>=^", ch�!�
NULL
;

957 
	}
}

959 
bo�
 
	$i�y�
(
ch
) {

960  
ch
 && 
	`�rchr
("bcdeEfFgGnosxX%", ch�!�
NULL
;

961 
	}
}

963 
bo�
 
	$�g_looks_��g�
(
mp_obj_t
 
�g
) {

964  
	`mp_obj_is_bo�
(
�g
�|| 
	`mp_obj_is_�t
(arg);

965 
	}
}

967 
bo�
 
	$�g_looks_num�ic
(
mp_obj_t
 
�g
) {

968  
	`�g_looks_��g�
(
�g
)

969 #i�
MICROPY_PY_BUILTINS_FLOAT


970 || 
	`mp_obj_is_��t
(
�g
)

973 
	}
}

975 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


976 
mp_obj_t
 
	$�g_as_�t
(
mp_obj_t
 
�g
) {

977 #i�
MICROPY_PY_BUILTINS_FLOAT


978 i�(
	`mp_obj_is_��t
(
�g
)) {

979  
	`mp_obj_�w_�t_�om_��t
(
	`mp_obj_��t_g�
(
�g
));

982  
�g
;

983 
	}
}

986 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


987 
NORETURN
 
	$�r�_�r_f�m�_v�ue_�r�
() {

988 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("bad format string"));

989 
	}
}

992 
	#�r�_�r_f�m�_v�ue_�r�
()

	)

995 
v�r_t
 
	$mp_obj_�r_f�m�_h��r
(cڡ *
�r
, cڡ *
t�
, *
�g_i
, 
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

996 
v�r_t
 
v�r
;

997 
mp_��t_t
 
��t
;

998 
	`v�r_��_��t
(&
v�r
, 16, &
��t
);

1000 ; 
�r
 < 
t�
; str++) {

1001 i�(*
�r
 == '}') {

1002 
�r
++;

1003 i�(
�r
 < 
t�
 && *str == '}') {

1004 
	`v�r_add_by�
(&
v�r
, '}');

1007 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1008 
	`�r�_�r_f�m�_v�ue_�r�
();

1010 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("single '}'�ncountered in format string"));

1013 i�(*
�r
 != '{') {

1014 
	`v�r_add_by�
(&
v�r
, *
�r
);

1018 
�r
++;

1019 i�(
�r
 < 
t�
 && *str == '{') {

1020 
	`v�r_add_by�
(&
v�r
, '{');

1026 cڡ *
f�ld_�me
 = 
NULL
;

1027 cڡ *
f�ld_�me_t�
 = 
NULL
;

1028 
c�v�si�
 = '\0';

1029 cڡ *
f�m�_�ec
 = 
NULL
;

1031 i�(
�r
 < 
t�
 && *str != '}' && *str != '!' && *str != ':') {

1032 
f�ld_�me
 = (cڡ *)
�r
;

1033 
�r
 < 
t�
 && *str != '}' && *str != '!' && *str != ':') {

1034 ++
�r
;

1036 
f�ld_�me_t�
 = (cڡ *)
�r
;

1041 i�(
�r
 < 
t�
 && *str == '!') {

1042 
�r
++;

1043 i�(
�r
 < 
t�
 && (*str == 'r' || *str == 's')) {

1044 
c�v�si�
 = *
�r
++;

1046 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1047 
	`�r�_�r_f�m�_v�ue_�r�
();

1048 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NORMAL


1049 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("bad conversion specifier"));

1051 i�(
�r
 >�
t�
) {

1052 
	`mp_�i�_V�ueE��
(

1053 
	`MP_ERROR_TEXT
("end of format while�ooking for conversion specifier"));

1055 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

1056 
	`MP_ERROR_TEXT
("unknow�c�v�si� s�cif��%c"), *
�r
);

1062 i�(
�r
 < 
t�
 && *str == ':') {

1063 
�r
++;

1069 i�(*
�r
 != '}') {

1070 
f�m�_�ec
 = 
�r
;

1071 
á
 = 1; 
�r
 < 
t�
;) {

1072 i�(*
�r
 == '{') {

1073 ++
á
;

1074 } i�(*
�r
 == '}') {

1075 i�(--
á
 == 0) {

1079 ++
�r
;

1083 i�(
�r
 >�
t�
) {

1084 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1085 
	`�r�_�r_f�m�_v�ue_�r�
();

1087 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("unmatched '{' in format"));

1090 i�(*
�r
 != '}') {

1091 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1092 
	`�r�_�r_f�m�_v�ue_�r�
();

1094 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("expected ':'�fter format specifier"));

1098 
mp_obj_t
 
�g
 = 
mp_cڡ_n�e
;

1100 i�(
f�ld_�me
) {

1101 
�dex
 = 0;

1102 i�(
	`MP_LIKELY
(
	`unich�_isdig�
(*
f�ld_�me
))) {

1103 i�(*
�g_i
 > 0) {

1104 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1105 
	`�r�_�r_f�m�_v�ue_�r�
();

1107 
	`mp_�i�_V�ueE��
(

1108 
	`MP_ERROR_TEXT
("can't switch from�utomatic field�umbering�o manual field specification"));

1111 
f�ld_�me
 = 
	`�r_to_�t
(f�ld_�me, 
f�ld_�me_t�
, &
�dex
);

1112 i�((
u�t
)
�dex
 >�
n_�gs
 - 1) {

1113 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("tuple index out of�ange"));

1115 
�g
 = 
�gs
[
�dex
 + 1];

1116 *
�g_i
 = -1;

1118 cڡ *
lookup
;

1119 
lookup
 = 
f�ld_�me
;�ooku�< 
f�ld_�me_t�
 && *lookup != '.' && *lookup != '[';�ookup++) {;

1121 
mp_obj_t
 
f�ld_q
 = 
	`mp_obj_�w_�r_v�_q�r
(
f�ld_�me
, 
lookup
 - field_name);

1122 
f�ld_�me
 = 
lookup
;

1123 
mp_m�_�em_t
 *
key_�em
 = 
	`mp_m�_lookup
(
kw�gs
, 
f�ld_q
, 
MP_MAP_LOOKUP
);

1124 i�(
key_�em
 =�
NULL
) {

1125 
	`mp_�i�_ty�_�g
(&
mp_ty�_KeyE��
, 
f�ld_q
);

1127 
�g
 = 
key_�em
->
v�ue
;

1129 i�(
f�ld_�me
 < 
f�ld_�me_t�
) {

1130 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("attributes�ot supported"));

1133 i�(*
�g_i
 < 0) {

1134 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1135 
	`�r�_�r_f�m�_v�ue_�r�
();

1137 
	`mp_�i�_V�ueE��
(

1138 
	`MP_ERROR_TEXT
("can't switch from manual field specification�o�utomatic field�umbering"));

1141 i�((
u�t
)*
�g_i
 >�
n_�gs
 - 1) {

1142 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("tuple index out of�ange"));

1144 
�g
 = 
�gs
[(*
�g_i
) + 1];

1145 (*
�g_i
)++;

1147 i�(!
f�m�_�ec
 && !
c�v�si�
) {

1148 
c�v�si�
 = 's';

1150 i�(
c�v�si�
) {

1151 
mp_��t_k�d_t
 
��t_k�d
;

1152 i�(
c�v�si�
 == 's') {

1153 
��t_k�d
 = 
PRINT_STR
;

1155 
	`as��
(
c�v�si�
 == 'r');

1156 
��t_k�d
 = 
PRINT_REPR
;

1158 
v�r_t
 
�g_v�r
;

1159 
mp_��t_t
 
�g_��t
;

1160 
	`v�r_��_��t
(&
�g_v�r
, 16, &
�g_��t
);

1161 
	`mp_obj_��t_h��r
(&
�g_��t
, 
�g
, 
��t_k�d
);

1162 
�g
 = 
	`mp_obj_�w_�r_ty�_�om_v�r
(&
mp_ty�_�r
, &
�g_v�r
);

1165 
f�l
 = '\0';

1166 
�ign
 = '\0';

1167 
width
 = -1;

1168 
�ecisi�
 = -1;

1169 
ty�
 = '\0';

1170 
�ags
 = 0;

1172 i�(
f�m�_�ec
) {

1184 
	`mp_c�ack_check
();

1185 
v�r_t
 
f�m�_�ec_v�r
 = 
	`mp_obj_�r_f�m�_h��r
(
f�m�_�ec
, 
�r
, 
�g_i
, 
n_�gs
, 
�gs
, 
kw�gs
);

1186 cڡ *
s
 = 
	`v�r_nu�_�rm��ed_�r
(&
f�m�_�ec_v�r
);

1187 cڡ *
��
 = 
s
 + 
f�m�_�ec_v�r
.
�n
;

1188 i�(
	`i�lignm�t
(*
s
)) {

1189 
�ign
 = *
s
++;

1190 } i�(*
s
 && 
	`i�lignm�t
(s[1])) {

1191 
f�l
 = *
s
++;

1192 
�ign
 = *
s
++;

1194 i�(*
s
 == '+' || *s == '-' || *s == ' ') {

1195 i�(*
s
 == '+') {

1196 
�ags
 |�
PF_FLAG_SHOW_SIGN
;

1197 } i�(*
s
 == ' ') {

1198 
�ags
 |�
PF_FLAG_SPACE_SIGN
;

1200 
s
++;

1202 i�(*
s
 == '#') {

1203 
�ags
 |�
PF_FLAG_SHOW_PREFIX
;

1204 
s
++;

1206 i�(*
s
 == '0') {

1207 i�(!
�ign
 && 
	`�g_looks_num�ic
(
�g
)) {

1208 
�ign
 = '=';

1210 i�(!
f�l
) {

1211 
f�l
 = '0';

1214 
s
 = 
	`�r_to_�t
(s, 
��
, &
width
);

1215 i�(*
s
 == ',') {

1216 
�ags
 |�
PF_FLAG_SHOW_COMMA
;

1217 
s
++;

1219 i�(*
s
 == '.') {

1220 
s
++;

1221 
s
 = 
	`�r_to_�t
(s, 
��
, &
�ecisi�
);

1223 i�(
	`i�y�
(*
s
)) {

1224 
ty�
 = *
s
++;

1226 i�(*
s
) {

1227 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1228 
	`�r�_�r_f�m�_v�ue_�r�
();

1230 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("invalid format specifier"));

1233 
	`v�r_��r
(&
f�m�_�ec_v�r
);

1235 i�(!
�ign
) {

1236 i�(
	`�g_looks_num�ic
(
�g
)) {

1237 
�ign
 = '>';

1239 
�ign
 = '<';

1242 i�(!
f�l
) {

1243 
f�l
 = ' ';

1246 i�(
�ags
 & (
PF_FLAG_SHOW_SIGN
 | 
PF_FLAG_SPACE_SIGN
)) {

1247 i�(
ty�
 == 's') {

1248 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1249 
	`�r�_�r_f�m�_v�ue_�r�
();

1251 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("sign�ot�llowed in string format specifier"));

1254 i�(
ty�
 == 'c') {

1255 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1256 
	`�r�_�r_f�m�_v�ue_�r�
();

1258 
	`mp_�i�_V�ueE��
(

1259 
	`MP_ERROR_TEXT
("sign�ot�llowed with integer format specifier 'c'"));

1264 
�ign
) {

1266 
�ags
 |�
PF_FLAG_LEFT_ADJUST
;

1269 
�ags
 |�
PF_FLAG_PAD_AFTER_SIGN
;

1272 
�ags
 |�
PF_FLAG_CENTER_ADJUST
;

1276 i�(
	`�g_looks_��g�
(
�g
)) {

1277 
ty�
) {

1279 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 2, 'a', 
�ags
, 
f�l
, 
width
, 0);

1283 
ch
 = 
	`mp_obj_g�_�t
(
�g
);

1284 
	`mp_��t_��
(&
��t
, &
ch
, 1, 
�ags
, 
f�l
, 
width
);

1291 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 10, 'a', 
�ags
, 
f�l
, 
width
, 0);

1295 i�(
�ags
 & 
PF_FLAG_SHOW_PREFIX
) {

1296 
�ags
 |�
PF_FLAG_SHOW_OCTAL_LETTER
;

1299 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 8, 'a', 
�ags
, 
f�l
, 
width
, 0);

1304 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 16, 
ty�
 - ('X' - 'A'), 
�ags
, 
f�l
, 
width
, 0);

1319 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1320 
	`�r�_�r_f�m�_v�ue_�r�
();

1322 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

1323 
	`MP_ERROR_TEXT
("unknown format code '%c' for object of�ype '%s'"),

1324 
ty�
, 
	`mp_obj_g�_ty�_�r
(
�g
));

1331 i�(
	`�g_looks_num�ic
(
�g
)) {

1332 i�(!
ty�
) {

1361 
ty�
 = 'g';

1363 i�(
ty�
 == 'n') {

1364 
ty�
 = 'g';

1367 
ty�
) {

1368 #i�
MICROPY_PY_BUILTINS_FLOAT


1375 
	`mp_��t_��t
(&
��t
, 
	`mp_obj_g�_��t
(
�g
), 
ty�
, 
�ags
, 
f�l
, 
width
, 
�ecisi�
);

1379 
�ags
 |�
PF_FLAG_ADD_PERCENT
;

1380 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


1381 
	#F100
 100.0F

	)

1383 
	#F100
 100.0

	)

1385 
	`mp_��t_��t
(&
��t
, 
	`mp_obj_g�_��t
(
�g
�* 
F100
, 'f', 
�ags
, 
f�l
, 
width
, 
�ecisi�
);

1386 #unde�
F100


1391 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1392 
	`�r�_�r_f�m�_v�ue_�r�
();

1394 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

1395 
	`MP_ERROR_TEXT
("unknown format code '%c' for object of�ype '%s'"),

1396 
ty�
, 
	`mp_obj_g�_ty�_�r
(
�g
));

1402 i�(
�ign
 == '=') {

1403 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1404 
	`�r�_�r_f�m�_v�ue_�r�
();

1406 
	`mp_�i�_V�ueE��
(

1407 
	`MP_ERROR_TEXT
("'='�lignment�ot�llowed in string format specifier"));

1411 
ty�
) {

1414 
size_t
 
��
;

1415 cڡ *
s
 = 
	`mp_obj_�r_g�_d�a
(
�g
, &
��
);

1416 i�(
�ecisi�
 < 0) {

1417 
�ecisi�
 = 
��
;

1419 i�(
��
 > (
size_t
)
�ecisi�
) {

1420 
��
 = 
�ecisi�
;

1422 
	`mp_��t_��
(&
��t
, 
s
, 
��
, 
�ags
, 
f�l
, 
width
);

1427 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1428 
	`�r�_�r_f�m�_v�ue_�r�
();

1430 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

1431 
	`MP_ERROR_TEXT
("unknown format code '%c' for object of�ype '%s'"),

1432 
ty�
, 
	`mp_obj_g�_ty�_�r
(
�g
));

1438  
v�r
;

1439 
	}
}

1441 
mp_obj_t
 
	$mp_obj_�r_f�m�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
mp_m�_t
 *
kw�gs
) {

1442 
	`check_is_�r_�_by�s
(
�gs
[0]);

1444 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r
, 
�n
);

1445 
�g_i
 = 0;

1446 
v�r_t
 
v�r
 = 
	`mp_obj_�r_f�m�_h��r
((cڡ *)
�r
, (cڡ *)��+ 
�n
, &
�g_i
, 
n_�gs
, 
�gs
, 
kw�gs
);

1447  
	`mp_obj_�w_�r_ty�_�om_v�r
(
	`mp_obj_g�_ty�
(
�gs
[0]), &
v�r
);

1448 
	}
}

1449 
MP_DEFINE_CONST_FUN_OBJ_KW
(
�r_f�m�_obj
, 1, 
mp_obj_�r_f�m�
);

1451 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


1452 
mp_obj_t
 
	$�r_modulo_f�m�
(
mp_obj_t
 
���n
, 
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, mp_obj_�
di�
) {

1453 
	`check_is_�r_�_by�s
(
���n
);

1455 
	`GET_STR_DATA_LEN
(
���n
, 
�r
, 
�n
);

1456 #i�
MICROPY_ERROR_REPORTING
 > 
MICROPY_ERROR_REPORTING_TERSE


1457 cڡ 
by�
 *
��t_�r
 = 
�r
;

1459 
bo�
 
is_by�s
 = 
	`mp_obj_is_ty�
(
���n
, &
mp_ty�_by�s
);

1460 
size_t
 
�g_i
 = 0;

1461 
v�r_t
 
v�r
;

1462 
mp_��t_t
 
��t
;

1463 
	`v�r_��_��t
(&
v�r
, 16, &
��t
);

1465 cڡ 
by�
 *
t�
 = 
�r
 + 
�n
; str <�op; str++) {

1466 
mp_obj_t
 
�g
 = 
MP_OBJ_NULL
;

1467 i�(*
�r
 != '%') {

1468 
	`v�r_add_by�
(&
v�r
, *
�r
);

1471 i�(++
�r
 >�
t�
) {

1472 
�com��e_f�m�
;

1474 i�(*
�r
 == '%') {

1475 
	`v�r_add_by�
(&
v�r
, '%');

1480 i�(*
�r
 == '(') {

1481 i�(
di�
 =�
MP_OBJ_NULL
) {

1482 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("format�eeds� dict"));

1484 
�g_i
 = 1;

1485 cڡ 
by�
 *
key
 = ++
�r
;

1486 *
�r
 != ')') {

1487 i�(
�r
 >�
t�
) {

1488 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1489 
	`�r�_�r_f�m�_v�ue_�r�
();

1491 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("incomplete format key"));

1494 ++
�r
;

1496 
mp_obj_t
 
k_obj
 = 
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
key
, 
�r
 - key);

1497 
�g
 = 
	`mp_obj_di�_g�
(
di�
, 
k_obj
);

1498 
�r
++;

1501 
�ags
 = 0;

1502 
f�l
 = ' ';

1503 
�t
 = 0;

1504 
�r
 < 
t�
) {

1505 i�(*
�r
 == '-') {

1506 
�ags
 |�
PF_FLAG_LEFT_ADJUST
;

1507 } i�(*
�r
 == '+') {

1508 
�ags
 |�
PF_FLAG_SHOW_SIGN
;

1509 } i�(*
�r
 == ' ') {

1510 
�ags
 |�
PF_FLAG_SPACE_SIGN
;

1511 } i�(*
�r
 == '#') {

1512 
�t
 = 
PF_FLAG_SHOW_PREFIX
;

1513 } i�(*
�r
 == '0') {

1514 
�ags
 |�
PF_FLAG_PAD_AFTER_SIGN
;

1515 
f�l
 = '0';

1519 
�r
++;

1522 
width
 = 0;

1523 i�(
�r
 < 
t�
) {

1524 i�(*
�r
 == '*') {

1525 i�(
�g_i
 >�
n_�gs
) {

1526 
n�_�ough_�gs
;

1528 
width
 = 
	`mp_obj_g�_�t
(
�gs
[
�g_i
++]);

1529 
�r
++;

1531 
�r
 = (cڡ 
by�
 *)
	`�r_to_�t
((cڡ *)�r, (cڡ *)
t�
, &
width
);

1534 
�ec
 = -1;

1535 i�(
�r
 < 
t�
 && *str == '.') {

1536 i�(++
�r
 < 
t�
) {

1537 i�(*
�r
 == '*') {

1538 i�(
�g_i
 >�
n_�gs
) {

1539 
n�_�ough_�gs
;

1541 
�ec
 = 
	`mp_obj_g�_�t
(
�gs
[
�g_i
++]);

1542 
�r
++;

1544 
�ec
 = 0;

1545 
�r
 = (cڡ 
by�
 *)
	`�r_to_�t
((cڡ *)�r, (cڡ *)
t�
, &
�ec
);

1550 i�(
�r
 >�
t�
) {

1551 
�com��e_f�m�
:

1552 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1553 
	`�r�_�r_f�m�_v�ue_�r�
();

1555 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("incomplete format"));

1560 i�(
�g
 =�
MP_OBJ_NULL
) {

1561 i�(
�g_i
 >�
n_�gs
) {

1562 
n�_�ough_�gs
:

1563 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("format string�eeds more�rguments"));

1565 
�g
 = 
�gs
[
�g_i
++];

1567 *
�r
) {

1569 i�(
	`mp_obj_is_�r
(
�g
)) {

1570 
size_t
 
��
;

1571 cڡ *
s
 = 
	`mp_obj_�r_g�_d�a
(
�g
, &
��
);

1572 i�(
��
 != 1) {

1573 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("%c�eeds int or char"));

1575 
	`mp_��t_��
(&
��t
, 
s
, 1, 
�ags
, ' ', 
width
);

1576 } i�(
	`�g_looks_��g�
(
�g
)) {

1577 
ch
 = 
	`mp_obj_g�_�t
(
�g
);

1578 
	`mp_��t_��
(&
��t
, &
ch
, 1, 
�ags
, ' ', 
width
);

1580 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("integer�eeded"));

1587 
	`mp_��t_mp_�t
(&
��t
, 
	`�g_as_�t
(
�g
), 10, 'a', 
�ags
, 
f�l
, 
width
, 
�ec
);

1590 #i�
MICROPY_PY_BUILTINS_FLOAT


1597 
	`mp_��t_��t
(&
��t
, 
	`mp_obj_g�_��t
(
�g
), *
�r
, 
�ags
, 
f�l
, 
width
, 
�ec
);

1602 i�(
�t
) {

1603 
�ags
 |�(
PF_FLAG_SHOW_PREFIX
 | 
PF_FLAG_SHOW_OCTAL_LETTER
);

1605 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 8, 'a', 
�ags
, 
f�l
, 
width
, 
�ec
);

1610 
v�r_t
 
�g_v�r
;

1611 
mp_��t_t
 
�g_��t
;

1612 
	`v�r_��_��t
(&
�g_v�r
, 16, &
�g_��t
);

1613 
mp_��t_k�d_t
 
��t_k�d
 = (*
�r
 =�'r' ? 
PRINT_REPR
 : 
PRINT_STR
);

1614 i�(
��t_k�d
 =�
PRINT_STR
 && 
is_by�s
 && 
	`mp_obj_is_ty�
(
�g
, &
mp_ty�_by�s
)) {

1617 
��t_k�d
 = 
PRINT_RAW
;

1619 
	`mp_obj_��t_h��r
(&
�g_��t
, 
�g
, 
��t_k�d
);

1620 
u�t
 
v�n
 = 
�g_v�r
.
�n
;

1621 i�(
�ec
 < 0) {

1622 
�ec
 = 
v�n
;

1624 i�(
v�n
 > (
u�t
)
�ec
) {

1625 
v�n
 = 
�ec
;

1627 
	`mp_��t_��
(&
��t
, 
�g_v�r
.
buf
, 
v�n
, 
�ags
, ' ', 
width
);

1628 
	`v�r_��r
(&
�g_v�r
);

1634 
	`mp_��t_mp_�t
(&
��t
, 
�g
, 16, *
�r
 - ('X' - 'A'), 
�ags
 | 
�t
, 
f�l
, 
width
, 
�ec
);

1638 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1639 
	`�r�_�r_f�m�_v�ue_�r�
();

1641 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
,

1642 
	`MP_ERROR_TEXT
("unsupported format character '%c' (0x%x)�t index %d"),

1643 *
�r
, *�r, s� - 
��t_�r
);

1648 i�(
di�
 =�
MP_OBJ_NULL
 && 
�g_i
 !�
n_�gs
) {

1651 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("format string didn't convert�ll�rguments"));

1654  
	`mp_obj_�w_�r_ty�_�om_v�r
(
is_by�s
 ? &
mp_ty�_by�s
 : &
mp_ty�_�r
, &
v�r
);

1655 
	}
}

1660 
mp_obj_t
 
	$�r_��a�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

1661 
	`check_is_�r_�_by�s
(
�gs
[0]);

1663 
mp_�t_t
 
max_�p
 = -1;

1664 i�(
n_�gs
 == 4) {

1665 
max_�p
 = 
	`mp_obj_g�_�t
(
�gs
[3]);

1666 i�(
max_�p
 == 0) {

1667  
�gs
[0];

1668 } i�(
max_�p
 < 0) {

1669 
max_�p
 = -1;

1677 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

1679 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�gs
[1]);

1680 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�gs
[2]);

1684 
	`GET_STR_DATA_LEN
(
�gs
[0], 
�r
, 
�r_�n
);

1685 
	`GET_STR_DATA_LEN
(
�gs
[1], 
�d
, 
�d_�n
);

1686 
	`GET_STR_DATA_LEN
(
�gs
[2], 
�w
, 
�w_�n
);

1689 i�(
�d_�n
 > 
�r_�n
) {

1690  
�gs
[0];

1694 
by�
 *
d�a
 = 
NULL
;

1695 
v�r_t
 
v�r
;

1701 
size_t
 
��a�d_�r_�dex
 = 0;

1702 
size_t
 
num_��a�m�ts_d�e
 = 0;

1703 cڡ 
by�
 *
�d_occu���
;

1704 cڡ 
by�
 *
off�t_�r
 = 
�r
;

1705 
size_t
 
�r_�n_�ma�
 = 
�r_�n
;

1706 i�(
�d_�n
 == 0) {

1709 i�(
d�a
 !�
NULL
) {

1710 
	`mem�y
(
d�a
, 
�w
, 
�w_�n
);

1712 
��a�d_�r_�dex
 +�
�w_�n
;

1713 
num_��a�m�ts_d�e
++;

1715 
num_��a�m�ts_d�e
 !�(
size_t
)
max_�p
 && 
�r_�n_�ma�
 > 0 && (
�d_occu���
 = 
	`f�d_subby�s
(
off�t_�r
, s�_�n_�ma�, 
�d
, 
�d_�n
, 1)�!�
NULL
) {

1716 i�(
�d_�n
 == 0) {

1717 
�d_occu���
 += 1;

1720 i�(
d�a
 !�
NULL
) {

1721 
	`mem�y
(
d�a
 + 
��a�d_�r_�dex
, 
off�t_�r
, 
�d_occu���
 - offset_ptr);

1723 
��a�d_�r_�dex
 +�
�d_occu���
 - 
off�t_�r
;

1725 i�(
d�a
 !�
NULL
) {

1726 
	`mem�y
(
d�a
 + 
��a�d_�r_�dex
, 
�w
, 
�w_�n
);

1728 
��a�d_�r_�dex
 +�
�w_�n
;

1729 
off�t_�r
 = 
�d_occu���
 + 
�d_�n
;

1730 
�r_�n_�ma�
 = 
�r
 + 
�r_�n
 - 
off�t_�r
;

1731 
num_��a�m�ts_d�e
++;

1735 i�(
d�a
 !�
NULL
) {

1736 
	`mem�y
(
d�a
 + 
��a�d_�r_�dex
, 
off�t_�r
, 
�r_�n_�ma�
);

1738 
��a�d_�r_�dex
 +�
�r_�n_�ma�
;

1740 i�(
d�a
 =�
NULL
) {

1742 i�(
num_��a�m�ts_d�e
 == 0) {

1744  
�gs
[0];

1747 
	`v�r_��_�n
(&
v�r
, 
��a�d_�r_�dex
);

1748 
d�a
 = (
by�
 *)
v�r
.
buf
;

1749 
	`as��
(
d�a
 !�
NULL
);

1757  
	`mp_obj_�w_�r_ty�_�om_v�r
(
�lf_ty�
, &
v�r
);

1758 
	}
}

1759 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_��a�_obj
, 3, 4, 
�r_��a�
);

1761 #i�
MICROPY_PY_BUILTINS_STR_COUNT


1762 
mp_obj_t
 
	$�r_cou�
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

1763 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

1764 
	`check_is_�r_�_by�s
(
�gs
[0]);

1767 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�gs
[1]);

1769 
	`GET_STR_DATA_LEN
(
�gs
[0], 
hay�ack
, 
hay�ack_�n
);

1770 
	`GET_STR_DATA_LEN
(
�gs
[1], 
�ed�
, 
�ed�_�n
);

1772 cڡ 
by�
 *
��t
 = 
hay�ack
;

1773 cڡ 
by�
 *
�d
 = 
hay�ack
 + 
hay�ack_�n
;

1774 i�(
n_�gs
 >�3 && 
�gs
[2] !�
mp_cڡ_n�e
) {

1775 
��t
 = 
	`�r_�dex_to_�r
(
�lf_ty�
, 
hay�ack
, 
hay�ack_�n
, 
�gs
[2], 
�ue
);

1777 i�(
n_�gs
 >�4 && 
�gs
[3] !�
mp_cڡ_n�e
) {

1778 
�d
 = 
	`�r_�dex_to_�r
(
�lf_ty�
, 
hay�ack
, 
hay�ack_�n
, 
�gs
[3], 
�ue
);

1782 i�(
�ed�_�n
 == 0) {

1783  
	`MP_OBJ_NEW_SMALL_INT
(
	`utf8_ch��n
(
��t
, 
�d
 - start) + 1);

1786 
bo�
 
is_�r
 = 
�lf_ty�
 =�&
mp_ty�_�r
;

1789 
mp_�t_t
 
num_occu���s
 = 0;

1790 cڡ 
by�
 *
hay�ack_�r
 = 
��t
; hay�ack_��+ 
�ed�_�n
 <�
�d
;) {

1791 i�(
	`memcmp
(
hay�ack_�r
, 
�ed�
, 
�ed�_�n
) == 0) {

1792 
num_occu���s
++;

1793 
hay�ack_�r
 +�
�ed�_�n
;

1795 
hay�ack_�r
 = 
is_�r
 ? 
	`utf8_�xt_ch�
(haystack_ptr) : haystack_ptr + 1;

1799  
	`MP_OBJ_NEW_SMALL_INT
(
num_occu���s
);

1800 
	}
}

1801 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_cou�_obj
, 2, 4, 
�r_cou�
);

1804 #i�
MICROPY_PY_BUILTINS_STR_PARTITION


1805 
mp_obj_t
 
	$�r_���iڔ
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
, 
d�e�i�
) {

1806 
	`check_is_�r_�_by�s
(
�lf_�
);

1807 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

1808 
	`�r_check_�g_ty�
(
�lf_ty�
, 
�g
);

1810 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�r
, 
�r_�n
);

1811 
	`GET_STR_DATA_LEN
(
�g
, 
�p
, 
�p_�n
);

1813 i�(
�p_�n
 == 0) {

1814 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("empty separator"));

1817 
mp_obj_t
 
�su�
[3];

1818 i�(
�lf_ty�
 =�&
mp_ty�_�r
) {

1819 
�su�
[0] = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

1820 
�su�
[1] = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

1821 
�su�
[2] = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

1823 
�su�
[0] = 
mp_cڡ_em�y_by�s
;

1824 
�su�
[1] = 
mp_cڡ_em�y_by�s
;

1825 
�su�
[2] = 
mp_cڡ_em�y_by�s
;

1828 i�(
d�e�i�
 > 0) {

1829 
�su�
[0] = 
�lf_�
;

1831 
�su�
[2] = 
�lf_�
;

1834 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


1835 i�(
	`mp_obj_g�_ty�
(
�g
�!�
�lf_ty�
) {

1836 
�g
 = 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
�p
, 
�p_�n
);

1840 cڡ 
by�
 *
pos�i�_�r
 = 
	`f�d_subby�s
(
�r
, 
�r_�n
, 
�p
, 
�p_�n
, 
d�e�i�
);

1841 i�(
pos�i�_�r
 !�
NULL
) {

1842 
size_t
 
pos�i�
 = 
pos�i�_�r
 - 
�r
;

1843 
�su�
[0] = 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
�r
, 
pos�i�
);

1844 
�su�
[1] = 
�g
;

1845 
�su�
[2] = 
	`mp_obj_�w_�r_of_ty�
(
�lf_ty�
, 
�r
 + 
pos�i�
 + 
�p_�n
, 
�r_�n
 -�osition - sep_len);

1848  
	`mp_obj_�w_tu�e
(3, 
�su�
);

1849 
	}
}

1851 
mp_obj_t
 
	$�r_���i�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

1852  
	`�r_���iڔ
(
�lf_�
, 
�g
, 1);

1853 
	}
}

1854 
MP_DEFINE_CONST_FUN_OBJ_2
(
�r_���i�_obj
, 
�r_���i�
);

1856 
mp_obj_t
 
	$�r_��t�i�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

1857  
	`�r_���iڔ
(
�lf_�
, 
�g
, -1);

1858 
	}
}

1859 
MP_DEFINE_CONST_FUN_OBJ_2
(
�r_��t�i�_obj
, 
�r_��t�i�
);

1863 
mp_obj_t
 
�r_��c�v
(
	$unich�
 (*
�
)(
unich�
), 
mp_obj_t
 
�lf_�
) {

1864 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�lf_d�a
, 
�lf_�n
);

1865 
v�r_t
 
v�r
;

1866 
	`v�r_��_�n
(&
v�r
, 
�lf_�n
);

1867 
by�
 *
d�a
 = (by� *)
v�r
.
buf
;

1868 
size_t
 
i
 = 0; i < 
�lf_�n
; i++) {

1869 *
d�a
++ = 
	`�
(*
�lf_d�a
++);

1871  
	`mp_obj_�w_�r_ty�_�om_v�r
(
	`mp_obj_g�_ty�
(
�lf_�
), &
v�r
);

1872 
	}
}

1874 
mp_obj_t
 
	$�r_low�
(
mp_obj_t
 
�lf_�
) {

1875  
	`�r_��c�v
(
unich�_t�ow�
, 
�lf_�
);

1876 
	}
}

1877 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_low�_obj
, 
�r_low�
);

1879 
mp_obj_t
 
	$�r_u��
(
mp_obj_t
 
�lf_�
) {

1880  
	`�r_��c�v
(
unich�_tou��
, 
�lf_�
);

1881 
	}
}

1882 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_u��_obj
, 
�r_u��
);

1884 
mp_obj_t
 
�r_uni_i�y�
(
	$bo�
 (*
f
)(
unich�
), 
mp_obj_t
 
�lf_�
) {

1885 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�lf_d�a
, 
�lf_�n
);

1887 i�(
�lf_�n
 == 0) {

1888  
mp_cڡ_�l�
;

1891 i�(
f
 !�
unich�_isu��
 && f !�
unich�_i�ow�
) {

1892 
size_t
 
i
 = 0; i < 
�lf_�n
; i++) {

1893 i�(!
	`f
(*
�lf_d�a
++)) {

1894  
mp_cڡ_�l�
;

1898 
bo�
 
cڏ�s_�pha
 = 
�l�
;

1900 
size_t
 
i
 = 0; i < 
�lf_�n
; i++) {

1901 i�(
	`unich�_i��ha
(*
�lf_d�a
++)) {

1902 
cڏ�s_�pha
 = 
�ue
;

1903 i�(!
	`f
(*(
�lf_d�a
 - 1))) {

1904  
mp_cڡ_�l�
;

1909 i�(!
cڏ�s_�pha
) {

1910  
mp_cڡ_�l�
;

1914  
mp_cڡ_�ue
;

1915 
	}
}

1917 
mp_obj_t
 
	$�r_is�a�
(
mp_obj_t
 
�lf_�
) {

1918  
	`�r_uni_i�y�
(
unich�_is�a�
, 
�lf_�
);

1919 
	}
}

1920 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_is�a�_obj
, 
�r_is�a�
);

1922 
mp_obj_t
 
	$�r_i��ha
(
mp_obj_t
 
�lf_�
) {

1923  
	`�r_uni_i�y�
(
unich�_i��ha
, 
�lf_�
);

1924 
	}
}

1925 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_i��ha_obj
, 
�r_i��ha
);

1927 
mp_obj_t
 
	$�r_isdig�
(
mp_obj_t
 
�lf_�
) {

1928  
	`�r_uni_i�y�
(
unich�_isdig�
, 
�lf_�
);

1929 
	}
}

1930 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_isdig�_obj
, 
�r_isdig�
);

1932 
mp_obj_t
 
	$�r_isu��
(
mp_obj_t
 
�lf_�
) {

1933  
	`�r_uni_i�y�
(
unich�_isu��
, 
�lf_�
);

1934 
	}
}

1935 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_isu��_obj
, 
�r_isu��
);

1937 
mp_obj_t
 
	$�r_i�ow�
(
mp_obj_t
 
�lf_�
) {

1938  
	`�r_uni_i�y�
(
unich�_i�ow�
, 
�lf_�
);

1939 
	}
}

1940 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r_i�ow�_obj
, 
�r_i�ow�
);

1942 #i�
MICROPY_CPYTHON_COMPAT


1946 
mp_obj_t
 
	$by�s_decode
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

1947 
mp_obj_t
 
�w_�gs
[2];

1948 i�(
n_�gs
 == 1) {

1949 
�w_�gs
[0] = 
�gs
[0];

1950 
�w_�gs
[1] = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_utf_hyph�_8
);

1951 
�gs
 = 
�w_�gs
;

1952 
n_�gs
++;

1954  
	`mp_obj_�r_make_�w
(&
mp_ty�_�r
, 
n_�gs
, 0, 
�gs
);

1955 
	}
}

1956 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
by�s_decode_obj
, 1, 3, 
by�s_decode
);

1959 
mp_obj_t
 
	$�r_�code
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

1960 
mp_obj_t
 
�w_�gs
[2];

1961 i�(
n_�gs
 == 1) {

1962 
�w_�gs
[0] = 
�gs
[0];

1963 
�w_�gs
[1] = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_utf_hyph�_8
);

1964 
�gs
 = 
�w_�gs
;

1965 
n_�gs
++;

1967  
	`by�s_make_�w
(
NULL
, 
n_�gs
, 0, 
�gs
);

1968 
	}
}

1969 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�r_�code_obj
, 1, 3, 
�r_�code
);

1972 #i�
MICROPY_PY_BUILTINS_BYTES_HEX


1973 
mp_obj_t
 
	$mp_obj_by�s_hex
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, cڡ 
mp_obj_ty�_t
 *
ty�
) {

1976 cڡ *
�p
 = 
NULL
;

1977 
mp_buf�r_�fo_t
 
buf�fo
;

1978 
	`mp_g�_buf�r_�i�
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
);

1982 i�(
buf�fo
.
�n
 == 0) {

1983  
mp_cڡ_em�y_by�s
;

1986 
v�r_t
 
v�r
;

1987 
size_t
 
out_�n
 = 
buf�fo
.
�n
 * 2;

1988 i�(
n_�gs
 > 1) {

1990 
out_�n
 +�
buf�fo
.
�n
 - 1;

1991 
�p
 = 
	`mp_obj_�r_g�_�r
(
�gs
[1]);

1993 
	`v�r_��_�n
(&
v�r
, 
out_�n
);

1994 
by�
 *
�
 = 
buf�fo
.
buf
, *
out
 = (by� *)
v�r
.buf;

1995 
mp_u�t_t
 
i
 = 
buf�fo
.
�n
; i--;) {

1996 
by�
 
d
 = (*
�
 >> 4);

1997 i�(
d
 > 9) {

1998 
d
 += 'a' - '9' - 1;

2000 *
out
++ = 
d
 + '0';

2001 
d
 = (*
�
++ & 0xf);

2002 i�(
d
 > 9) {

2003 
d
 += 'a' - '9' - 1;

2005 *
out
++ = 
d
 + '0';

2006 i�(
�p
 !�
NULL
 && 
i
 != 0) {

2007 *
out
++ = *
�p
;

2010  
	`mp_obj_�w_�r_ty�_�om_v�r
(
ty�
, &
v�r
);

2011 
	}
}

2013 
mp_obj_t
 
	$mp_obj_by�s_�omhex
(
mp_obj_t
 
ty�_�
, mp_obj_�
d�a
) {

2014 
mp_buf�r_�fo_t
 
buf�fo
;

2015 
	`mp_g�_buf�r_�i�
(
d�a
, &
buf�fo
, 
MP_BUFFER_READ
);

2017 i�((
buf�fo
.
�n
 & 1) != 0) {

2018 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("odd-length string"));

2020 
v�r_t
 
v�r
;

2021 
	`v�r_��_�n
(&
v�r
, 
buf�fo
.
�n
 / 2);

2022 
by�
 *
�
 = 
buf�fo
.
buf
, *
out
 = (by� *)
v�r
.buf;

2023 
by�
 
hex_by�
 = 0;

2024 
mp_u�t_t
 
i
 = 
buf�fo
.
�n
; i--;) {

2025 
by�
 
hex_ch
 = *
�
++;

2026 i�(
	`unich�_isxdig�
(
hex_ch
)) {

2027 
hex_by�
 +�
	`unich�_xdig�_v�ue
(
hex_ch
);

2029 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("non-hex digit found"));

2031 i�(
i
 & 1) {

2032 
hex_by�
 <<= 4;

2034 *
out
++ = 
hex_by�
;

2035 
hex_by�
 = 0;

2038  
	`mp_obj_�w_�r_ty�_�om_v�r
(
	`MP_OBJ_TO_PTR
(
ty�_�
), &
v�r
);

2039 
	}
}

2041 
mp_obj_t
 
	$by�s_hex_as_�r
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

2042  
	`mp_obj_by�s_hex
(
n_�gs
, 
�gs
, &
mp_ty�_�r
);

2043 
	}
}

2044 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
by�s_hex_as_�r_obj
, 1, 2, 
by�s_hex_as_�r
);

2046 
MP_DEFINE_CONST_FUN_OBJ_2
(
by�s_�omhex_obj
, 
mp_obj_by�s_�omhex
);

2047 
MP_DEFINE_CONST_CLASSMETHOD_OBJ
(
by�s_�omhex_�assm�hod_obj
, 
MP_ROM_PTR
(&
by�s_�omhex_obj
));

2050 
mp_�t_t
 
	$mp_obj_�r_g�_buf�r
(
mp_obj_t
 
�lf_�
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
) {

2051 i�(
�ags
 =�
MP_BUFFER_READ
) {

2052 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�r_d�a
, 
�r_�n
);

2053 
buf�fo
->
buf
 = (*)
�r_d�a
;

2054 
buf�fo
->
�n
 = 
�r_�n
;

2055 
buf�fo
->
ty�code
 = 'B';

2061 
	}
}

2063 
	$mp_obj_�r_�t_d�a
(
mp_obj_�r_t
 *
�r
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

2064 
�r
->
d�a
 = data;

2065 
�r
->
�n
 =�en;

2066 
�r
->
hash
 = 
	`q�r_compu�_hash
(
d�a
, 
�n
);

2067 
	}
}

2071 cڡ 
mp_rom_m�_�em_t
 
	g��y_by���y_�r_by�s_lo�ls_�b�
[] = {

2072 #i�
MICROPY_PY_ARRAY
 || 
MICROPY_PY_BUILTINS_BYTEARRAY


2073 { 
MP_ROM_QSTR
(
MP_QSTR_��nd
), 
MP_ROM_PTR
(&
mp_obj_��y_��nd_obj
) },

2074 { 
MP_ROM_QSTR
(
MP_QSTR_ex�nd
), 
MP_ROM_PTR
(&
mp_obj_��y_ex�nd_obj
) },

2076 #i�
MICROPY_PY_BUILTINS_BYTES_HEX


2077 { 
MP_ROM_QSTR
(
MP_QSTR_hex
), 
MP_ROM_PTR
(&
by�s_hex_as_�r_obj
) },

2078 { 
MP_ROM_QSTR
(
MP_QSTR_�omhex
), 
MP_ROM_PTR
(&
by�s_�omhex_�assm�hod_obj
) },

2080 #i�
MICROPY_CPYTHON_COMPAT


2081 { 
MP_ROM_QSTR
(
MP_QSTR_decode
), 
MP_ROM_PTR
(&
by�s_decode_obj
) },

2083 { 
MP_ROM_QSTR
(
MP_QSTR_f�d
), 
MP_ROM_PTR
(&
�r_f�d_obj
) },

2084 { 
MP_ROM_QSTR
(
MP_QSTR_rf�d
), 
MP_ROM_PTR
(&
�r_rf�d_obj
) },

2085 { 
MP_ROM_QSTR
(
MP_QSTR_�dex
), 
MP_ROM_PTR
(&
�r_�dex_obj
) },

2086 { 
MP_ROM_QSTR
(
MP_QSTR_r�dex
), 
MP_ROM_PTR
(&
�r_r�dex_obj
) },

2087 { 
MP_ROM_QSTR
(
MP_QSTR_jo�
), 
MP_ROM_PTR
(&
�r_jo�_obj
) },

2088 { 
MP_ROM_QSTR
(
MP_QSTR_�l�
), 
MP_ROM_PTR
(&
�r_�l�_obj
) },

2089 #i�
MICROPY_PY_BUILTINS_STR_SPLITLINES


2090 { 
MP_ROM_QSTR
(
MP_QSTR_�l�l�es
), 
MP_ROM_PTR
(&
�r_�l�l�es_obj
) },

2092 { 
MP_ROM_QSTR
(
MP_QSTR_r�l�
), 
MP_ROM_PTR
(&
�r_r�l�_obj
) },

2093 { 
MP_ROM_QSTR
(
MP_QSTR_��tsw�h
), 
MP_ROM_PTR
(&
�r_��tsw�h_obj
) },

2094 { 
MP_ROM_QSTR
(
MP_QSTR_�dsw�h
), 
MP_ROM_PTR
(&
�r_�dsw�h_obj
) },

2095 { 
MP_ROM_QSTR
(
MP_QSTR_�r�
), 
MP_ROM_PTR
(&
�r_�r�_obj
) },

2096 { 
MP_ROM_QSTR
(
MP_QSTR_l�r�
), 
MP_ROM_PTR
(&
�r_l�r�_obj
) },

2097 { 
MP_ROM_QSTR
(
MP_QSTR_r�r�
), 
MP_ROM_PTR
(&
�r_r�r�_obj
) },

2098 { 
MP_ROM_QSTR
(
MP_QSTR_f�m�
), 
MP_ROM_PTR
(&
�r_f�m�_obj
) },

2099 { 
MP_ROM_QSTR
(
MP_QSTR_��a�
), 
MP_ROM_PTR
(&
�r_��a�_obj
) },

2100 #i�
MICROPY_PY_BUILTINS_STR_COUNT


2101 { 
MP_ROM_QSTR
(
MP_QSTR_cou�
), 
MP_ROM_PTR
(&
�r_cou�_obj
) },

2103 #i�
MICROPY_PY_BUILTINS_STR_PARTITION


2104 { 
MP_ROM_QSTR
(
MP_QSTR_���i�
), 
MP_ROM_PTR
(&
�r_���i�_obj
) },

2105 { 
MP_ROM_QSTR
(
MP_QSTR_��t�i�
), 
MP_ROM_PTR
(&
�r_��t�i�_obj
) },

2107 #i�
MICROPY_PY_BUILTINS_STR_CENTER


2108 { 
MP_ROM_QSTR
(
MP_QSTR_���
), 
MP_ROM_PTR
(&
�r_���_obj
) },

2110 { 
MP_ROM_QSTR
(
MP_QSTR_low�
), 
MP_ROM_PTR
(&
�r_low�_obj
) },

2111 { 
MP_ROM_QSTR
(
MP_QSTR_u��
), 
MP_ROM_PTR
(&
�r_u��_obj
) },

2112 { 
MP_ROM_QSTR
(
MP_QSTR_is�a�
), 
MP_ROM_PTR
(&
�r_is�a�_obj
) },

2113 { 
MP_ROM_QSTR
(
MP_QSTR_i��ha
), 
MP_ROM_PTR
(&
�r_i��ha_obj
) },

2114 { 
MP_ROM_QSTR
(
MP_QSTR_isdig�
), 
MP_ROM_PTR
(&
�r_isdig�_obj
) },

2115 { 
MP_ROM_QSTR
(
MP_QSTR_isu��
), 
MP_ROM_PTR
(&
�r_isu��_obj
) },

2116 { 
MP_ROM_QSTR
(
MP_QSTR_i�ow�
), 
MP_ROM_PTR
(&
�r_i�ow�_obj
) },

2117 #i�
MICROPY_CPYTHON_COMPAT


2118 { 
MP_ROM_QSTR
(
MP_QSTR_�code
), 
MP_ROM_PTR
(&
�r_�code_obj
) },

2122 #i�
MICROPY_CPYTHON_COMPAT


2123 
	#TABLE_ENTRIES_COMPAT
 1

	)

2125 
	#TABLE_ENTRIES_COMPAT
 0

	)

2128 #i�
MICROPY_PY_BUILTINS_BYTES_HEX


2129 
	#TABLE_ENTRIES_HEX
 2

	)

2131 
	#TABLE_ENTRIES_HEX
 0

	)

2134 #i�
MICROPY_PY_ARRAY
 || 
MICROPY_PY_BUILTINS_BYTEARRAY


2135 
	#TABLE_ENTRIES_ARRAY
 2

	)

2137 
	#TABLE_ENTRIES_ARRAY
 0

	)

2140 
MP_DEFINE_CONST_DICT_WITH_SIZE
(
mp_obj_�r_lo�ls_di�
,

2141 
��y_by���y_�r_by�s_lo�ls_�b�
 + 
TABLE_ENTRIES_ARRAY
 + 
TABLE_ENTRIES_HEX
 + 
TABLE_ENTRIES_COMPAT
,

2142 
MP_ARRAY_SIZE
(
��y_by���y_�r_by�s_lo�ls_�b�
�- (
TABLE_ENTRIES_ARRAY
 + 
TABLE_ENTRIES_HEX
 + 
TABLE_ENTRIES_COMPAT
));

2144 #i�
TABLE_ENTRIES_COMPAT
 == 0

2145 
	#mp_obj_by�s_lo�ls_di�
 
mp_obj_�r_lo�ls_di�


	)

2147 
MP_DEFINE_CONST_DICT_WITH_SIZE
(
mp_obj_by�s_lo�ls_di�
,

2148 
��y_by���y_�r_by�s_lo�ls_�b�
 + 
TABLE_ENTRIES_ARRAY
,

2149 
MP_ARRAY_SIZE
(
��y_by���y_�r_by�s_lo�ls_�b�
�- (
TABLE_ENTRIES_ARRAY
 + 
TABLE_ENTRIES_COMPAT
));

2152 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


2153 
MP_DEFINE_CONST_DICT_WITH_SIZE
(
mp_obj_by���y_lo�ls_di�
,

2154 
��y_by���y_�r_by�s_lo�ls_�b�
,

2155 
MP_ARRAY_SIZE
(
��y_by���y_�r_by�s_lo�ls_�b�
�- 
TABLE_ENTRIES_COMPAT
);

2158 #i�
MICROPY_PY_ARRAY


2159 
MP_DEFINE_CONST_DICT_WITH_SIZE
(
mp_obj_��y_lo�ls_di�
,

2160 
��y_by���y_�r_by�s_lo�ls_�b�
,

2161 
TABLE_ENTRIES_ARRAY
);

2164 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW
 && 
MICROPY_PY_BUILTINS_BYTES_HEX


2165 
MP_DEFINE_CONST_DICT_WITH_SIZE
(
mp_obj_mem�yv�w_lo�ls_di�
,

2166 
��y_by���y_�r_by�s_lo�ls_�b�
 + 
TABLE_ENTRIES_ARRAY
,

2170 #i�!
MICROPY_PY_BUILTINS_STR_UNICODE


2171 
mp_obj_t
 
mp_obj_�w_�r_����
(mp_obj_�
�r
, 
mp_obj_��_buf_t
 *
��_buf
);

2173 
MP_DEFINE_CONST_OBJ_TYPE
(

2174 
mp_ty�_�r
,

2175 
MP_QSTR_�r
,

2176 
MP_TYPE_FLAG_NONE
,

2177 
make_�w
, 
mp_obj_�r_make_�w
,

2178 
��t
, 
�r_��t
,

2179 
b��y_�
, 
mp_obj_�r_b��y_�
,

2180 
subs�
, 
by�s_subs�
,

2181 
��
, 
mp_obj_�w_�r_����
,

2182 
buf�r
, 
mp_obj_�r_g�_buf�r
,

2183 
lo�ls_di�
, &
mp_obj_�r_lo�ls_di�


2188 
MP_DEFINE_CONST_OBJ_TYPE
(

2189 
mp_ty�_by�s
,

2190 
MP_QSTR_by�s
,

2191 
MP_TYPE_FLAG_NONE
,

2192 
make_�w
, 
by�s_make_�w
,

2193 
��t
, 
�r_��t
,

2194 
b��y_�
, 
mp_obj_�r_b��y_�
,

2195 
subs�
, 
by�s_subs�
,

2196 
��
, 
mp_obj_�w_by�s_����
,

2197 
buf�r
, 
mp_obj_�r_g�_buf�r
,

2198 
lo�ls_di�
, &
mp_obj_by�s_lo�ls_di�


2202 cڡ 
mp_obj_�r_t
 
	gmp_cڡ_em�y_by�s_obj
 = {{&
mp_ty�_by�s
}, 0, 0, (cڡ 
by�
 *)""};

2207 
mp_obj_t
 
	$mp_obj_�w_�r_c�y
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

2208 
mp_obj_�r_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�r_t, 
ty�
);

2209 
o
->
�n
 =�en;

2210 i�(
d�a
) {

2211 
o
->
hash
 = 
	`q�r_compu�_hash
(
d�a
, 
�n
);

2212 
by�
 *
p
 = 
	`m_�w
(by�, 
�n
 + 1);

2213 
o
->
d�a
 = 
p
;

2214 
	`mem�y
(
p
, 
d�a
, 
�n
 * (
by�
));

2215 
p
[
�n
] = '\0';

2217  
	`MP_OBJ_FROM_PTR
(
o
);

2218 
	}
}

2223 
mp_obj_t
 
	$mp_obj_�w_�r_of_ty�
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

2224 i�(
ty�
 =�&
mp_ty�_�r
) {

2225  
	`mp_obj_�w_�r
((cڡ *)
d�a
, 
�n
);

2226 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


2227 } i�(
ty�
 =�&
mp_ty�_by���y
) {

2228  
	`mp_obj_�w_by���y
(
�n
, 
d�a
);

2231  
	`mp_obj_�w_by�s
(
d�a
, 
�n
);

2233 
	}
}

2236 
mp_obj_t
 
	$mp_obj_�w_�r_v�_q�r
(cڡ *
d�a
, 
size_t
 
�n
) {

2237  
	`MP_OBJ_NEW_QSTR
(
	`q�r_�om_��
(
d�a
, 
�n
));

2238 
	}
}

2243 
mp_obj_t
 
	$mp_obj_�w_�r_ty�_�om_v�r
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
v�r_t
 *
v�r
) {

2245 i�(
ty�
 =�&
mp_ty�_�r
) {

2246 
q�r
 
q
 = 
	`q�r_f�d_��
(
v�r
->
buf
, v�r->
�n
);

2247 i�(
q
 !�
MP_QSTRnu�
) {

2248 
	`v�r_��r
(
v�r
);

2249 
v�r
->
�loc
 = 0;

2250  
	`MP_OBJ_NEW_QSTR
(
q
);

2254 
by�
 *
d�a
;

2255 i�(
v�r
->
�n
 + 1 =�v�r->
�loc
) {

2256 
d�a
 = (
by�
 *)
v�r
->
buf
;

2258 
d�a
 = (
by�
 *)
	`m_��w
(, 
v�r
->
buf
, v�r->
�loc
, v�r->
�n
 + 1);

2260 
d�a
[
v�r
->
�n
] = '\0';

2261 
v�r
->
buf
 = 
NULL
;

2262 
v�r
->
�loc
 = 0;

2263 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


2264 i�(
ty�
 =�&
mp_ty�_by���y
) {

2265  
	`mp_obj_�w_by���y_by_�f
(
v�r
->
�n
, 
d�a
);

2268 
mp_obj_�r_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�r_t, 
ty�
);

2269 
o
->
�n
 = 
v�r
->len;

2270 
o
->
hash
 = 
	`q�r_compu�_hash
(
d�a
, 
v�r
->
�n
);

2271 
o
->
d�a
 = data;

2272  
	`MP_OBJ_FROM_PTR
(
o
);

2273 
	}
}

2275 
mp_obj_t
 
	$mp_obj_�w_�r_�om_v�r
(
v�r_t
 *
v�r
) {

2276 #i�
MICROPY_PY_BUILTINS_STR_UNICODE
 && 
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


2277 i�(!
	`utf8_check
((
by�
 *)
v�r
->
buf
, v�r->
�n
)) {

2278 
	`mp_�i�_msg
(&
mp_ty�_UnicodeE��
, 
NULL
);

2281  
	`mp_obj_�w_�r_ty�_�om_v�r
(&
mp_ty�_�r
, 
v�r
);

2282 
	}
}

2284 #i�
MICROPY_PY_BUILTINS_STR_UNICODE
 && 
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


2285 
mp_obj_t
 
	$mp_obj_�w_�r_�om_utf8_v�r
(
v�r_t
 *
v�r
) {

2287  
	`mp_obj_�w_�r_ty�_�om_v�r
(&
mp_ty�_�r
, 
v�r
);

2288 
	}
}

2291 
mp_obj_t
 
	$mp_obj_�w_by�s_�om_v�r
(
v�r_t
 *
v�r
) {

2292  
	`mp_obj_�w_�r_ty�_�om_v�r
(&
mp_ty�_by�s
, 
v�r
);

2293 
	}
}

2295 
mp_obj_t
 
	$mp_obj_�w_�r
(cڡ *
d�a
, 
size_t
 
�n
) {

2296 #i�
MICROPY_PY_BUILTINS_STR_UNICODE
 && 
MICROPY_PY_BUILTINS_STR_UNICODE_CHECK


2297 i�(!
	`utf8_check
((
by�
 *)
d�a
, 
�n
)) {

2298 
	`mp_�i�_msg
(&
mp_ty�_UnicodeE��
, 
NULL
);

2301 
q�r
 
q
 = 
	`q�r_f�d_��
(
d�a
, 
�n
);

2302 i�(
q
 !�
MP_QSTRnu�
) {

2304  
	`MP_OBJ_NEW_QSTR
(
q
);

2307  
	`mp_obj_�w_�r_c�y
(&
mp_ty�_�r
, (cڡ 
by�
 *)
d�a
, 
�n
);

2309 
	}
}

2311 
mp_obj_t
 
	$mp_obj_�w_�r_�om_c�r
(cڡ *
�r
) {

2312  
	`mp_obj_�w_�r
(
�r
, 
	`���
(str));

2313 
	}
}

2315 
mp_obj_t
 
	$mp_obj_�r_���
(
mp_obj_t
 
�r
) {

2316 
	`GET_STR_DATA_LEN
(
�r
, 
d�a
, 
�n
);

2317  
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
d�a
, 
�n
);

2318 
	}
}

2320 
mp_obj_t
 
	$mp_obj_�r_���_checked
(
mp_obj_t
 
obj
) {

2321 
size_t
 
�n
;

2322 cڡ *
d�a
 = 
	`mp_obj_�r_g�_d�a
(
obj
, &
�n
);

2323  
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
d�a
, 
�n
);

2324 
	}
}

2326 
mp_obj_t
 
	$mp_obj_�w_by�s
(cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

2327  
	`mp_obj_�w_�r_c�y
(&
mp_ty�_by�s
, 
d�a
, 
�n
);

2328 
	}
}

2330 
bo�
 
	$mp_obj_�r_equ�
(
mp_obj_t
 
s1
, mp_obj_�
s2
) {

2331 i�(
	`mp_obj_is_q�r
(
s1
�&& mp_obj_is_q�r(
s2
)) {

2332  
s1
 =�
s2
;

2334 
	`GET_STR_HASH
(
s1
, 
h1
);

2335 
	`GET_STR_HASH
(
s2
, 
h2
);

2337 i�(
h1
 !�0 && 
h2
 != 0 && h1 != h2) {

2338  
�l�
;

2340 
	`GET_STR_DATA_LEN
(
s1
, 
d1
, 
l1
);

2341 
	`GET_STR_DATA_LEN
(
s2
, 
d2
, 
l2
);

2342 i�(
l1
 !�
l2
) {

2343  
�l�
;

2345  
	`memcmp
(
d1
, 
d2
, 
l1
) == 0;

2347 
	}
}

2349 
NORETURN
 
	$bad_im�ic�_c�v�si�
(
mp_obj_t
 
�lf_�
) {

2350 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


2351 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't convert�o str implicitly"));

2353 cڡ 
q�r
 
�c_�me
 = 
	`mp_obj_g�_ty�
(
�lf_�
)->
�me
;

2354 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

2355 
	`MP_ERROR_TEXT
("can't convert '%q' object�o %q implicitly"),

2356 
�c_�me
, src_�m�=�
MP_QSTR_�r
 ? 
MP_QSTR_by�s
 : MP_QSTR_str);

2358 
	}
}

2362 
q�r
 
	$mp_obj_�r_g�_q�r
(
mp_obj_t
 
�lf_�
) {

2363 i�(
	`mp_obj_is_q�r
(
�lf_�
)) {

2364  
	`MP_OBJ_QSTR_VALUE
(
�lf_�
);

2365 } i�(
	`mp_obj_is_exa�_ty�
(
�lf_�
, &
mp_ty�_�r
)) {

2366 
mp_obj_�r_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

2367  
	`q�r_�om_��
((*)
�lf
->
d�a
, s�f->
�n
);

2369 
	`bad_im�ic�_c�v�si�
(
�lf_�
);

2371 
	}
}

2375 cڡ *
	$mp_obj_�r_g�_�r
(
mp_obj_t
 
�lf_�
) {

2376 i�(
	`mp_obj_is_�r_�_by�s
(
�lf_�
)) {

2377 
	`GET_STR_DATA_LEN
(
�lf_�
, 
s
, 
l
);

2378 ()
l
;

2379  (cڡ *)
s
;

2381 
	`bad_im�ic�_c�v�si�
(
�lf_�
);

2383 
	}
}

2385 cڡ *
	$mp_obj_�r_g�_d�a
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
) {

2386 i�(
	`mp_obj_is_�r_�_by�s
(
�lf_�
)) {

2387 
	`GET_STR_DATA_LEN
(
�lf_�
, 
s
, 
l
);

2388 *
�n
 = 
l
;

2389  (cڡ *)
s
;

2391 
	`bad_im�ic�_c�v�si�
(
�lf_�
);

2393 
	}
}

2395 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C
 || MICROPY_OBJ_REPR =�
MICROPY_OBJ_REPR_D


2396 cڡ 
by�
 *
	$mp_obj_�r_g�_d�a_no_check
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
) {

2397 i�(
	`mp_obj_is_q�r
(
�lf_�
)) {

2398  
	`q�r_d�a
(
	`MP_OBJ_QSTR_VALUE
(
�lf_�
), 
�n
);

2400 
MP_STATIC_ASSERT_STR_ARRAY_COMPATIBLE
;

2401 *
�n
 = ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�lf_�
))->len;

2402  ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�lf_�
))->
d�a
;

2404 
	}
}

2410 
	s_mp_obj_�r8_�_t
 {

2411 
mp_obj_ba�_t
 
	mba�
;

2412 
mp_fun_1_t
 
	m���xt
;

2413 
mp_obj_t
 
	m�r
;

2414 
size_t
 
	mcur
;

2415 } 
	tmp_obj_�r8_�_t
;

2417 #i�!
MICROPY_PY_BUILTINS_STR_UNICODE


2418 
mp_obj_t
 
	$�r_�_���xt
(
mp_obj_t
 
�lf_�
) {

2419 
mp_obj_�r8_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

2420 
	`GET_STR_DATA_LEN
(
�lf
->
�r
, s�, 
�n
);

2421 i�(
�lf
->
cur
 < 
�n
) {

2422 
mp_obj_t
 
o_out
 = 
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
�r
 + 
�lf
->
cur
, 1);

2423 
�lf
->
cur
 += 1;

2424  
o_out
;

2426  
MP_OBJ_STOP_ITERATION
;

2428 
	}
}

2430 
mp_obj_t
 
	$mp_obj_�w_�r_����
(
mp_obj_t
 
�r
, 
mp_obj_��_buf_t
 *
��_buf
) {

2431 
	`as��
((
mp_obj_�r8_�_t
�<�(
mp_obj_��_buf_t
));

2432 
mp_obj_�r8_�_t
 *
o
 = (mp_obj_�r8_�_�*)
��_buf
;

2433 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

2434 
o
->
���xt
 = 
�r_�_���xt
;

2435 
o
->
�r
 = str;

2436 
o
->
cur
 = 0;

2437  
	`MP_OBJ_FROM_PTR
(
o
);

2438 
	}
}

2441 
mp_obj_t
 
	$by�s_�_���xt
(
mp_obj_t
 
�lf_�
) {

2442 
mp_obj_�r8_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

2443 
	`GET_STR_DATA_LEN
(
�lf
->
�r
, s�, 
�n
);

2444 i�(
�lf
->
cur
 < 
�n
) {

2445 
mp_obj_t
 
o_out
 = 
	`MP_OBJ_NEW_SMALL_INT
(
�r
[
�lf
->
cur
]);

2446 
�lf
->
cur
 += 1;

2447  
o_out
;

2449  
MP_OBJ_STOP_ITERATION
;

2451 
	}
}

2453 
mp_obj_t
 
	$mp_obj_�w_by�s_����
(
mp_obj_t
 
�r
, 
mp_obj_��_buf_t
 *
��_buf
) {

2454 
	`as��
((
mp_obj_�r8_�_t
�<�(
mp_obj_��_buf_t
));

2455 
mp_obj_�r8_�_t
 *
o
 = (mp_obj_�r8_�_�*)
��_buf
;

2456 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

2457 
o
->
���xt
 = 
by�s_�_���xt
;

2458 
o
->
�r
 = str;

2459 
o
->
cur
 = 0;

2460  
	`MP_OBJ_FROM_PTR
(
o
);

2461 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstr.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJSTR_H


27 
	#MICROPY_INCLUDED_PY_OBJSTR_H


	)

29 
	~"py/obj.h
"

30 
	~"py/obj��y.h
"

32 
	s_mp_obj_�r_t
 {

33 
mp_obj_ba�_t
 
	mba�
;

34 
size_t
 
	mhash
;

36 
size_t
 
	m�n
;

37 cڡ 
by�
 *
	md�a
;

38 } 
	tmp_obj_�r_t
;

43 
	#MP_STATIC_ASSERT_STR_ARRAY_COMPATIBLE
 \

44 
	`MP_STATIC_ASSERT
(
	`off�tof
(
mp_obj_�r_t
, 
�n
�=�off�tof(
mp_obj_��y_t
,�en) \

45 && 
	`off�tof
(
mp_obj_�r_t
, 
d�a
�=�off�tof(
mp_obj_��y_t
, 
�ems
))

	)

47 
	#MP_DEFINE_STR_OBJ
(
obj_�me
, 
�r
�
mp_obj_�r_t
 obj_�m��{{&
mp_ty�_�r
}, 0, (�r�- 1, (cڡ 
by�
 *)�r}

	)

51 
	#GET_STR_HASH
(
�r_obj_�
, 
�r_hash
) \

52 
size_t
 
�r_hash
; \

53 i�(
	`mp_obj_is_q�r
(
�r_obj_�
)) { \

54 
�r_hash
 = 
	`q�r_hash
(
	`MP_OBJ_QSTR_VALUE
(
�r_obj_�
)); \

56 
�r_hash
 = ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�r_obj_�
))->
hash
; \

57 }

	)

60 
	#GET_STR_LEN
(
�r_obj_�
, 
�r_�n
) \

61 
size_t
 
�r_�n
; \

62 i�(
	`mp_obj_is_q�r
(
�r_obj_�
)) { \

63 
�r_�n
 = 
	`q�r_�n
(
	`MP_OBJ_QSTR_VALUE
(
�r_obj_�
)); \

65 
�r_�n
 = ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�r_obj_�
))->
�n
; \

66 }

	)

69 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_C
 || MICROPY_OBJ_REPR =�
MICROPY_OBJ_REPR_D


70 cڡ 
by�
 *
mp_obj_�r_g�_d�a_no_check
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
);

71 
	#GET_STR_DATA_LEN
(
�r_obj_�
, 
�r_d�a
, 
�r_�n
) \

72 
size_t
 
�r_�n
; \

73 cڡ 
by�
 *
�r_d�a
 = 
	`mp_obj_�r_g�_d�a_no_check
(
�r_obj_�
, &
�r_�n
);

	)

75 
	#GET_STR_DATA_LEN
(
�r_obj_�
, 
�r_d�a
, 
�r_�n
) \

76 cڡ 
by�
 *
�r_d�a
; \

77 
size_t
 
�r_�n
; \

78 i�(
	`mp_obj_is_q�r
(
�r_obj_�
)) { \

79 
�r_d�a
 = 
	`q�r_d�a
(
	`MP_OBJ_QSTR_VALUE
(
�r_obj_�
), &
�r_�n
); \

81 
MP_STATIC_ASSERT_STR_ARRAY_COMPATIBLE
; \

82 
�r_�n
 = ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�r_obj_�
))->
�n
; \

83 
�r_d�a
 = ((
mp_obj_�r_t
 *)
	`MP_OBJ_TO_PTR
(
�r_obj_�
))->
d�a
; \

84 }

	)

87 
mp_obj_t
 
mp_obj_�r_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

88 
mp_�r_��t_js�
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�r_d�a
, 
size_t
 
�r_�n
);

89 
mp_obj_t
 
mp_obj_�r_f�m�
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, 
mp_m�_t
 *
kw�gs
);

90 
mp_obj_t
 
mp_obj_�r_�l�
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
);

91 
mp_obj_t
 
mp_obj_�w_�r_c�y
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
);

92 
mp_obj_t
 
mp_obj_�w_�r_of_ty�
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
);

94 
mp_obj_t
 
mp_obj_�r_b��y_�
(
mp_b��y_�_t
 
�
, mp_obj_�
lhs_�
, mp_obj_�
rhs_�
);

95 
mp_�t_t
 
mp_obj_�r_g�_buf�r
(
mp_obj_t
 
�lf_�
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
);

97 
mp_obj_�r_�t_d�a
(
mp_obj_�r_t
 *
�r
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
);

99 cڡ 
by�
 *
�r_�dex_to_�r
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ by� *
�lf_d�a
, 
size_t
 
�lf_�n
,

100 
mp_obj_t
 
�dex
, 
bo�
 
is_�i�
);

101 cڡ 
by�
 *
f�d_subby�s
(cڡ by� *
hay�ack
, 
size_t
 
h�n
, cڡ by� *
�ed�
, size_�
ƒ
, 
d�e�i�
);

103 
	#MP_DEFINE_BYTES_OBJ
(
obj_�me
, 
�rg�
, 
�n
�
mp_obj_�r_t
 obj_�m��{{&
mp_ty�_by�s
}, 0, (�n), (cڡ 
by�
 *)Ѭg�)}

	)

105 
mp_obj_t
 
mp_obj_by�s_hex
(
size_t
 
n_�gs
, cڡ mp_obj_�*
�gs
, cڡ 
mp_obj_ty�_t
 *
ty�
);

106 
mp_obj_t
 
mp_obj_by�s_�omhex
(mp_obj_�
ty�_�
, mp_obj_�
d�a
);

108 
cڡ 
mp_obj_di�_t
 
mp_obj_�r_lo�ls_di�
;

110 #i�
MICROPY_PY_BUILTINS_MEMORYVIEW
 && 
MICROPY_PY_BUILTINS_BYTES_HEX


111 
cڡ 
mp_obj_di�_t
 
mp_obj_mem�yv�w_lo�ls_di�
;

114 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


115 
cڡ 
mp_obj_di�_t
 
mp_obj_by���y_lo�ls_di�
;

118 #i�
MICROPY_PY_ARRAY


119 
cڡ 
mp_obj_di�_t
 
mp_obj_��y_lo�ls_di�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstringio.c

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

31 
	~"py/obj�r.h
"

32 
	~"py/obj�r�gio.h
"

33 
	~"py/ru�ime.h
"

34 
	~"py/��am.h
"

36 #i�
MICROPY_PY_IO


38 #i�
MICROPY_CPYTHON_COMPAT


39 
	$check_�r�gio_is_ݒ
(cڡ 
mp_obj_�r�gio_t
 *
o
) {

40 i�(
o
->
v�r
 =�
NULL
) {

41 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("I/O operation on closed file"));

43 
	}
}

45 
	#check_�r�gio_is_ݒ
(
o
)

	)

48 
	$�r�gio_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

49 ()
k�d
;

50 
mp_obj_�r�gio_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

51 
	`mp_��tf
(
��t
, 
�lf
->
ba�
.
ty�
 =�&
mp_ty�_�r�gio
 ? "<io.StringIO 0x%x>" : "<io.BytesIO 0x%x>", self);

52 
	}
}

54 
mp_u�t_t
 
	$�r�gio_�ad
(
mp_obj_t
 
o_�
, *
buf
, 
mp_u�t_t
 
size
, *
�rcode
) {

55 ()
�rcode
;

56 
mp_obj_�r�gio_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

57 
	`check_�r�gio_is_ݒ
(
o
);

58 i�(
o
->
v�r
->
�n
 <�o->
pos
) {

61 
mp_u�t_t
 
�ma��g
 = 
o
->
v�r
->
�n
 - o->
pos
;

62 i�(
size
 > 
�ma��g
) {

63 
size
 = 
�ma��g
;

65 
	`mem�y
(
buf
, 
o
->
v�r
->bu�+ o->
pos
, 
size
);

66 
o
->
pos
 +�
size
;

67  
size
;

68 
	}
}

70 
	$�r�gio_c�y_�_wr�e
(
mp_obj_�r�gio_t
 *
o
) {

71 cڡ *
buf
 = 
o
->
v�r
->buf;

72 
o
->
v�r
->
buf
 = 
	`m_�w
(, o->v�r->
�n
);

73 
o
->
v�r
->
fixed_buf
 = 
�l�
;

74 
o
->
�f_obj
 = 
MP_OBJ_NULL
;

75 
	`mem�y
(
o
->
v�r
->
buf
, buf, o->v�r->
�n
);

76 
	}
}

78 
mp_u�t_t
 
	$�r�gio_wr�e
(
mp_obj_t
 
o_�
, cڡ *
buf
, 
mp_u�t_t
 
size
, *
�rcode
) {

79 ()
�rcode
;

80 
mp_obj_�r�gio_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

81 
	`check_�r�gio_is_ݒ
(
o
);

83 i�(
o
->
v�r
->
fixed_buf
) {

84 
	`�r�gio_c�y_�_wr�e
(
o
);

87 
mp_u�t_t
 
�w_pos
 = 
o
->
pos
 + 
size
;

88 i�(
�w_pos
 < 
size
) {

90 *
�rcode
 = 
MP_EFBIG
;

91  
MP_STREAM_ERROR
;

93 
mp_u�t_t
 
�g_�n
 = 
o
->
v�r
->
�n
;

94 i�(
�w_pos
 > 
o
->
v�r
->
�loc
) {

96 
o
->
v�r
->
�n
 = o->v�r->
�loc
;

98 
	`v�r_add_�n
(
o
->
v�r
, 
�w_pos
 - o->v�r->
�loc
);

101 i�(
o
->
pos
 > 
�g_�n
) {

102 
	`mem�t
(
o
->
v�r
->
buf
 + 
�g_�n
, 0, o->
pos
 - org_len);

104 
	`mem�y
(
o
->
v�r
->
buf
 + o->
pos
, buf, 
size
);

105 
o
->
pos
 = 
�w_pos
;

106 i�(
�w_pos
 > 
o
->
v�r
->
�n
) {

107 
o
->
v�r
->
�n
 = 
�w_pos
;

109  
size
;

110 
	}
}

112 
mp_u�t_t
 
	$�r�gio_io�l
(
mp_obj_t
 
o_�
, 
mp_u�t_t
 
�que�
, 
u���_t
 
�g
, *
�rcode
) {

113 ()
�rcode
;

114 
mp_obj_�r�gio_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

115 
�que�
) {

116 
MP_STREAM_SEEK
: {

117 
mp_��am_�ek_t
 *
s
 = (mp_��am_�ek_�*)
�g
;

118 
mp_u�t_t
 
�f
 = 0;

119 
s
->
wh��
) {

120 
MP_SEEK_CUR
:

121 
�f
 = 
o
->
pos
;

123 
MP_SEEK_END
:

124 
�f
 = 
o
->
v�r
->
�n
;

127 
mp_u�t_t
 
�w_pos
 = 
�f
 + 
s
->
off�t
;

130 i�(
s
->
wh��
 !�
MP_SEEK_SET
 && s->
off�t
 < 0) {

131 i�(
�w_pos
 > 
�f
) {

134 
�w_pos
 = 0;

136 } i�(
�w_pos
 < 
�f
) {

138 *
�rcode
 = 
MP_EINVAL
;

139  
MP_STREAM_ERROR
;

141 
s
->
off�t
 = 
o
->
pos
 = 
�w_pos
;

144 
MP_STREAM_FLUSH
:

146 
MP_STREAM_CLOSE
:

147 #i�
MICROPY_CPYTHON_COMPAT


148 
	`v�r_�
(
o
->
v�r
);

149 
o
->
v�r
 = 
NULL
;

151 
	`v�r_��r
(
o
->
v�r
);

152 
o
->
v�r
->
�loc
 = 0;

153 
o
->
v�r
->
�n
 = 0;

154 
o
->
pos
 = 0;

158 *
�rcode
 = 
MP_EINVAL
;

159  
MP_STREAM_ERROR
;

161 
	}
}

163 
	#STREAM_TO_CONTENT_TYPE
(
o
�(((o)->
ba�
.
ty�
 =�&
mp_ty�_�r�gio
�? &
mp_ty�_�r
 : &
mp_ty�_by�s
)

	)

165 
mp_obj_t
 
	$�r�gio_g�v�ue
(
mp_obj_t
 
�lf_�
) {

166 
mp_obj_�r�gio_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

167 
	`check_�r�gio_is_ݒ
(
�lf
);

169  
	`mp_obj_�w_�r_of_ty�
(
	`STREAM_TO_CONTENT_TYPE
(
�lf
), (
by�
 *)�lf->
v�r
->
buf
, s�f->v�r->
�n
);

170 
	}
}

171 
MP_DEFINE_CONST_FUN_OBJ_1
(
�r�gio_g�v�ue_obj
, 
�r�gio_g�v�ue
);

173 
mp_obj_�r�gio_t
 *
	$�r�gio_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
) {

174 
mp_obj_�r�gio_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_�r�gio_t, 
ty�
);

175 
o
->
pos
 = 0;

176 
o
->
�f_obj
 = 
MP_OBJ_NULL
;

177  
o
;

178 
	}
}

180 
mp_obj_t
 
	$�r�gio_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

181 ()
n_kw
;

183 
mp_u�t_t
 
sz
 = 16;

184 
bo�
 
��d�a
 = 
�l�
;

185 
mp_buf�r_�fo_t
 
buf�fo
;

187 
mp_obj_�r�gio_t
 *
o
 = 
	`�r�gio_�w
(
ty�_�
);

189 i�(
n_�gs
 > 0) {

190 i�(
	`mp_obj_is_�t
(
�gs
[0])) {

191 
sz
 = 
	`mp_obj_g�_�t
(
�gs
[0]);

193 
	`mp_g�_buf�r_�i�
(
�gs
[0], &
buf�fo
, 
MP_BUFFER_READ
);

195 i�(
	`mp_obj_is_�r_�_by�s
(
�gs
[0])) {

196 
o
->
v�r
 = 
	`m_�w_obj
(
v�r_t
);

197 
	`v�r_��_fixed_buf
(
o
->
v�r
, 
buf�fo
.
�n
, buf�fo.
buf
);

198 
o
->
v�r
->
�n
 = 
buf�fo
.len;

199 
o
->
�f_obj
 = 
�gs
[0];

200  
	`MP_OBJ_FROM_PTR
(
o
);

203 
sz
 = 
buf�fo
.
�n
;

204 
��d�a
 = 
�ue
;

208 
o
->
v�r
 = 
	`v�r_�w
(
sz
);

210 i�(
��d�a
) {

211 
	`�r�gio_wr�e
(
	`MP_OBJ_FROM_PTR
(
o
), 
buf�fo
.
buf
, buf�fo.
�n
, 
NULL
);

213 
o
->
pos
 = 0;

215  
	`MP_OBJ_FROM_PTR
(
o
);

216 
	}
}

218 cڡ 
mp_rom_m�_�em_t
 
	g�r�gio_lo�ls_di�_�b�
[] = {

219 { 
MP_ROM_QSTR
(
MP_QSTR_�ad
), 
MP_ROM_PTR
(&
mp_��am_�ad_obj
) },

220 { 
MP_ROM_QSTR
(
MP_QSTR_�ad�to
), 
MP_ROM_PTR
(&
mp_��am_�ad�to_obj
) },

221 { 
MP_ROM_QSTR
(
MP_QSTR_�adl�e
), 
MP_ROM_PTR
(&
mp_��am_unbuf�d_�adl�e_obj
) },

222 { 
MP_ROM_QSTR
(
MP_QSTR_wr�e
), 
MP_ROM_PTR
(&
mp_��am_wr�e_obj
) },

223 { 
MP_ROM_QSTR
(
MP_QSTR_�ek
), 
MP_ROM_PTR
(&
mp_��am_�ek_obj
) },

224 { 
MP_ROM_QSTR
(
MP_QSTR_��
), 
MP_ROM_PTR
(&
mp_��am_��_obj
) },

225 { 
MP_ROM_QSTR
(
MP_QSTR_�ush
), 
MP_ROM_PTR
(&
mp_��am_�ush_obj
) },

226 { 
MP_ROM_QSTR
(
MP_QSTR_�o�
), 
MP_ROM_PTR
(&
mp_��am_�o�_obj
) },

227 { 
MP_ROM_QSTR
(
MP_QSTR_g�v�ue
), 
MP_ROM_PTR
(&
�r�gio_g�v�ue_obj
) },

228 { 
MP_ROM_QSTR
(
MP_QSTR___��r__
), 
MP_ROM_PTR
(&
mp_id�t�y_obj
) },

229 { 
MP_ROM_QSTR
(
MP_QSTR___ex�__
), 
MP_ROM_PTR
(&
mp_��am___ex�___obj
) },

232 
MP_DEFINE_CONST_DICT
(
�r�gio_lo�ls_di�
, 
�r�gio_lo�ls_di�_�b�
);

234 cڡ 
mp_��am_p_t
 
	g�r�gio_��am_p
 = {

235 .
�ad
 = 
�r�gio_�ad
,

236 .
	gwr�e
 = 
�r�gio_wr�e
,

237 .
	gio�l
 = 
�r�gio_io�l
,

238 .
	gis_�xt
 = 
�ue
,

241 
MP_DEFINE_CONST_OBJ_TYPE
(

242 
mp_ty�_�r�gio
,

243 
MP_QSTR_S��gIO
,

244 
MP_TYPE_FLAG_ITER_IS_STREAM
,

245 
make_�w
, 
�r�gio_make_�w
,

246 
��t
, 
�r�gio_��t
,

247 
��oc�
, &
�r�gio_��am_p
,

248 
lo�ls_di�
, &
�r�gio_lo�ls_di�


251 #i�
MICROPY_PY_IO_BYTESIO


252 cڡ 
mp_��am_p_t
 
	gby�sio_��am_p
 = {

253 .
�ad
 = 
�r�gio_�ad
,

254 .
	gwr�e
 = 
�r�gio_wr�e
,

255 .
	gio�l
 = 
�r�gio_io�l
,

258 
MP_DEFINE_CONST_OBJ_TYPE
(

259 
mp_ty�_by�sio
,

260 
MP_QSTR_By�sIO
,

261 
MP_TYPE_FLAG_ITER_IS_STREAM
,

262 
make_�w
, 
�r�gio_make_�w
,

263 
��t
, 
�r�gio_��t
,

264 
��oc�
, &
by�sio_��am_p
,

265 
lo�ls_di�
, &
�r�gio_lo�ls_di�


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstringio.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJSTRINGIO_H


27 
	#MICROPY_INCLUDED_PY_OBJSTRINGIO_H


	)

29 
	~"py/obj.h
"

31 
	s_mp_obj_�r�gio_t
 {

32 
mp_obj_ba�_t
 
	mba�
;

33 
v�r_t
 *
	mv�r
;

35 
mp_u�t_t
 
	mpos
;

37 
mp_obj_t
 
	m�f_obj
;

38 } 
	tmp_obj_�r�gio_t
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstrunicode.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/obj�r.h
"

32 
	~"py/objli�.h
"

33 
	~"py/ru�ime.h
"

35 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


37 
mp_obj_t
 
mp_obj_�w_�r_����
(mp_obj_�
�r
, 
mp_obj_��_buf_t
 *
��_buf
);

42 
	$uni_��t_qu�ed
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�r_d�a
, 
u�t
 
�r_�n
) {

44 
bo�
 
has_s�g�_qu�e
 = 
�l�
;

45 
bo�
 
has_doub�_qu�e
 = 
�l�
;

46 cڡ 
by�
 *
s
 = 
�r_d�a
, *
t�
 = s�_d��+ 
�r_�n
; !
has_doub�_qu�e
 && s <�op; s++) {

47 i�(*
s
 == '\'') {

48 
has_s�g�_qu�e
 = 
�ue
;

49 } i�(*
s
 == '"') {

50 
has_doub�_qu�e
 = 
�ue
;

53 
unich�
 
qu�e_ch�
 = '\'';

54 i�(
has_s�g�_qu�e
 && !
has_doub�_qu�e
) {

55 
qu�e_ch�
 = '"';

57 
	`mp_��tf
(
��t
, "%c", 
qu�e_ch�
);

58 cڡ 
by�
 *
s
 = 
�r_d�a
, *
t�
 = s�_d��+ 
�r_�n
;

59 
s
 < 
t�
) {

60 
unich�
 
ch
;

61 
ch
 = 
	`utf8_g�_ch�
(
s
);

62 
s
 = 
	`utf8_�xt_ch�
(s);

63 i�(
ch
 =�
qu�e_ch�
) {

64 
	`mp_��tf
(
��t
, "\\%c", 
qu�e_ch�
);

65 } i�(
ch
 == '\\') {

66 
	`mp_��t_�r
(
��t
, "\\\\");

67 } i�(32 <�
ch
 && ch <= 126) {

68 
	`mp_��tf
(
��t
, "%c", 
ch
);

69 } i�(
ch
 == '\n') {

70 
	`mp_��t_�r
(
��t
, "\\n");

71 } i�(
ch
 == '\r') {

72 
	`mp_��t_�r
(
��t
, "\\r");

73 } i�(
ch
 == '\t') {

74 
	`mp_��t_�r
(
��t
, "\\t");

75 } i�(
ch
 < 0x100) {

76 
	`mp_��tf
(
��t
, "\\x%02x", 
ch
);

77 } i�(
ch
 < 0x10000) {

78 
	`mp_��tf
(
��t
, "\\u%04x", 
ch
);

80 
	`mp_��tf
(
��t
, "\\U%08x", 
ch
);

83 
	`mp_��tf
(
��t
, "%c", 
qu�e_ch�
);

84 
	}
}

86 
	$uni_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

87 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�r_d�a
, 
�r_�n
);

88 #i�
MICROPY_PY_JSON


89 i�(
k�d
 =�
PRINT_JSON
) {

90 
	`mp_�r_��t_js�
(
��t
, 
�r_d�a
, 
�r_�n
);

94 i�(
k�d
 =�
PRINT_STR
) {

95 
��t
->
	`��t_��
�r�t->
d�a
, (cڡ *)
�r_d�a
, 
�r_�n
);

97 
	`uni_��t_qu�ed
(
��t
, 
�r_d�a
, 
�r_�n
);

99 
	}
}

101 
mp_obj_t
 
	$uni_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

102 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�r_d�a
, 
�r_�n
);

103 
�
) {

104 
MP_UNARY_OP_BOOL
:

105  
	`mp_obj_�w_bo�
(
�r_�n
 != 0);

106 
MP_UNARY_OP_LEN
:

107  
	`MP_OBJ_NEW_SMALL_INT
(
	`utf8_ch��n
(
�r_d�a
, 
�r_�n
));

109  
MP_OBJ_NULL
;

111 
	}
}

115 cڡ 
by�
 *
	$�r_�dex_to_�r
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ 
by�
 *
�lf_d�a
, 
size_t
 
�lf_�n
,

116 
mp_obj_t
 
�dex
, 
bo�
 
is_�i�
) {

119 i�(
ty�
 =�&
mp_ty�_by�s


120 #i�
MICROPY_PY_BUILTINS_BYTEARRAY


121 || 
ty�
 =�&
mp_ty�_by���y


125 
size_t
 
�dex_v�
 = 
	`mp_g�_�dex
(
ty�
, 
�lf_�n
, 
�dex
, 
is_�i�
);

126  
�lf_d�a
 + 
�dex_v�
;

129 
mp_�t_t
 
i
;

133 i�(
	`mp_obj_is_sm�l_�t
(
�dex
)) {

134 
i
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�dex
);

135 } i�(!
	`mp_obj_g�_�t_maybe
(
�dex
, &
i
)) {

136 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
, 
	`MP_ERROR_TEXT
("�r�g indi��mu� b���g�s,�� %s"), 
	`mp_obj_g�_ty�_�r
(
�dex
));

138 cڡ 
by�
 *
s
, *
t�
 = 
�lf_d�a
 + 
�lf_�n
;

139 i�(
i
 < 0) {

141 
s
 = 
t�
 - 1; 
i
; --s) {

142 i�(
s
 < 
�lf_d�a
) {

143 i�(
is_�i�
) {

144  
�lf_d�a
;

146 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("string index out of�ange"));

148 i�(!
	`UTF8_IS_CONT
(*
s
)) {

149 ++
i
;

152 ++
s
;

158 
s
 = 
�lf_d�a
;

161 i�(
s
 >�
t�
) {

162 i�(
is_�i�
) {

163  
t�
;

165 
	`mp_�i�_msg
(&
mp_ty�_IndexE��
, 
	`MP_ERROR_TEXT
("string index out of�ange"));

168 i�(
i
-- == 0) {

172 ++
s
;

173 
	`UTF8_IS_CONT
(*
s
)) {

174 ++
s
;

178  
s
;

179 
	}
}

181 
mp_obj_t
 
	$�r_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

182 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

183 
	`as��
(
ty�
 =�&
mp_ty�_�r
);

184 
	`GET_STR_DATA_LEN
(
�lf_�
, 
�lf_d�a
, 
�lf_�n
);

185 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

187 #i�
MICROPY_PY_BUILTINS_SLICE


188 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

189 
mp_obj_t
 
o��t
, 
o��
, 
o��
;

190 
mp_obj_�i�_t
 *
�i�
 = 
	`MP_OBJ_TO_PTR
(
�dex
);

191 
o��t
 = 
�i�
->
��t
;

192 
o��
 = 
�i�
->
��
;

193 
o��
 = 
�i�
->
��
;

195 i�(
o��
 !�
mp_cڡ_n�e
 && o�� !�
	`MP_OBJ_NEW_SMALL_INT
(1)) {

196 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("only slices with step=1 (aka None)�re supported"));

199 cڡ 
by�
 *
p��t
, *
p��
;

200 i�(
o��t
 !�
mp_cڡ_n�e
) {

201 
p��t
 = 
	`�r_�dex_to_�r
(
ty�
, 
�lf_d�a
, 
�lf_�n
, 
o��t
, 
�ue
);

203 
p��t
 = 
�lf_d�a
;

205 i�(
o��
 !�
mp_cڡ_n�e
) {

208 
p��
 = 
	`�r_�dex_to_�r
(
ty�
, 
�lf_d�a
, 
�lf_�n
, 
o��
, 
�ue
);

210 
p��
 = 
�lf_d�a
 + 
�lf_�n
;

212 i�(
p��
 < 
p��t
) {

213  
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
);

215  
	`mp_obj_�w_�r_of_ty�
(
ty�
, (cڡ 
by�
 *)
p��t
, 
p��
 -�start);

218 cڡ 
by�
 *
s
 = 
	`�r_�dex_to_�r
(
ty�
, 
�lf_d�a
, 
�lf_�n
, 
�dex
, 
�l�
);

219 
�n
 = 1;

220 i�(
	`UTF8_IS_NONASCII
(*
s
)) {

222 
mask
 = 0x40; *
s
 & mask; mask >>= 1) {

223 ++
�n
;

226  
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
s
, 
�n
);

228  
MP_OBJ_NULL
;

230 
	}
}

232 
MP_DEFINE_CONST_OBJ_TYPE
(

233 
mp_ty�_�r
,

234 
MP_QSTR_�r
,

235 
MP_TYPE_FLAG_ITER_IS_GETITER
,

236 
make_�w
, 
mp_obj_�r_make_�w
,

237 
��t
, 
uni_��t
,

238 
u�ry_�
, 
uni_u�ry_�
,

239 
b��y_�
, 
mp_obj_�r_b��y_�
,

240 
subs�
, 
�r_subs�
,

241 
��
, 
mp_obj_�w_�r_����
,

242 
buf�r
, 
mp_obj_�r_g�_buf�r
,

243 
lo�ls_di�
, &
mp_obj_�r_lo�ls_di�


249 
	s_mp_obj_�r_�_t
 {

250 
mp_obj_ba�_t
 
	mba�
;

251 
mp_fun_1_t
 
	m���xt
;

252 
mp_obj_t
 
	m�r
;

253 
size_t
 
	mcur
;

254 } 
	tmp_obj_�r_�_t
;

256 
mp_obj_t
 
	$�r_�_���xt
(
mp_obj_t
 
�lf_�
) {

257 
mp_obj_�r_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

258 
	`GET_STR_DATA_LEN
(
�lf
->
�r
, s�, 
�n
);

259 i�(
�lf
->
cur
 < 
�n
) {

260 cڡ 
by�
 *
cur
 = 
�r
 + 
�lf
->cur;

261 cڡ 
by�
 *
�d
 = 
	`utf8_�xt_ch�
(
�r
 + 
�lf
->
cur
);

262 
mp_obj_t
 
o_out
 = 
	`mp_obj_�w_�r_v�_q�r
((cڡ *)
cur
, 
�d
 - cur);

263 
�lf
->
cur
 +�
�d
 - cur;

264  
o_out
;

266  
MP_OBJ_STOP_ITERATION
;

268 
	}
}

270 
mp_obj_t
 
	$mp_obj_�w_�r_����
(
mp_obj_t
 
�r
, 
mp_obj_��_buf_t
 *
��_buf
) {

271 
	`as��
((
mp_obj_�r_�_t
�<�(
mp_obj_��_buf_t
));

272 
mp_obj_�r_�_t
 *
o
 = (mp_obj_�r_�_�*)
��_buf
;

273 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

274 
o
->
���xt
 = 
�r_�_���xt
;

275 
o
->
�r
 = str;

276 
o
->
cur
 = 0;

277  
	`MP_OBJ_FROM_PTR
(
o
);

278 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtuple.c

28 
	~<�r�g.h
>

29 
	~<as��.h
>

31 
	~"py/objtu�e.h
"

32 
	~"py/ru�ime.h
"

35 
	#mp_obj_is_tu�e_com�tib�
(
o
�(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
	`mp_obj_g�_ty�
(o), 
��
�=�
mp_obj_tu�e_g���
)

	)

40 
	$mp_obj_tu�e_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

41 
mp_obj_tu�e_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

42 cڡ *
�em_���t�
 = ", ";

43 i�(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
) {

44 
	`mp_��t_�r
(
��t
, "[");

45 #i�
MICROPY_PY_JSON_SEPARATORS


46 
�em_���t�
 = 
	`MP_PRINT_GET_EXT
(
��t
)->item_separator;

49 
	`mp_��t_�r
(
��t
, "(");

50 
k�d
 = 
PRINT_REPR
;

52 
size_t
 
i
 = 0; i < 
o
->
�n
; i++) {

53 i�(
i
 > 0) {

54 
	`mp_��t_�r
(
��t
, 
�em_���t�
);

56 
	`mp_obj_��t_h��r
(
��t
, 
o
->
�ems
[
i
], 
k�d
);

58 i�(
MICROPY_PY_JSON
 && 
k�d
 =�
PRINT_JSON
) {

59 
	`mp_��t_�r
(
��t
, "]");

61 i�(
o
->
�n
 == 1) {

62 
	`mp_��t_�r
(
��t
, ",");

64 
	`mp_��t_�r
(
��t
, ")");

66 
	}
}

68 
mp_obj_t
 
	$mp_obj_tu�e_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

69 ()
ty�_�
;

71 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 1, 
�l�
);

73 
n_�gs
) {

76  
mp_cڡ_em�y_tu�e
;

81 i�(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_tu�e
)) {

82  
�gs
[0];

87 
size_t
 
�loc
 = 4;

88 
size_t
 
�n
 = 0;

89 
mp_obj_t
 *
�ems
 = 
	`m_�w
(mp_obj_t, 
�loc
);

91 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�gs
[0], 
NULL
);

92 
mp_obj_t
 
�em
;

93 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

94 i�(
�n
 >�
�loc
) {

95 
�ems
 = 
	`m_��w
(
mp_obj_t
, i�ms, 
�loc
,�lloc * 2);

96 
�loc
 *= 2;

98 
�ems
[
�n
++] = 
�em
;

101 
mp_obj_t
 
tu�e
 = 
	`mp_obj_�w_tu�e
(
�n
, 
�ems
);

102 
	`m_d�
(
mp_obj_t
, 
�ems
, 
�loc
);

104  
tu�e
;

107 
	}
}

110 
mp_obj_t
 
	$tu�e_cmp_h��r
(
mp_u�t_t
 
�
, 
mp_obj_t
 
�lf_�
, mp_obj_�
��h�_�
) {

111 
	`mp_check_�lf
(
	`mp_obj_is_tu�e_com�tib�
(
�lf_�
));

112 cڡ 
mp_obj_ty�_t
 *
��h�_ty�
 = 
	`mp_obj_g�_ty�
(
��h�_�
);

113 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

114 i�(
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
��h�_ty�
, 
��
�!�
mp_obj_tu�e_g���
) {

116 
��h�_�
 = 
	`mp_obj_��_to_�tive_ba�
�n�h�_�, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_tu�e
));

117 i�(
��h�_�
 =�
MP_OBJ_NULL
) {

118  
MP_OBJ_NULL
;

121 
mp_obj_tu�e_t
 *
��h�
 = 
	`MP_OBJ_TO_PTR
(
��h�_�
);

123  
	`mp_obj_�w_bo�
(
	`mp_�q_cmp_objs
(
�
, 
�lf
->
�ems
, s�f->
�n
, 
��h�
->items,�nother->len));

124 
	}
}

126 
mp_obj_t
 
	$mp_obj_tu�e_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

127 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

128 
�
) {

129 
MP_UNARY_OP_BOOL
:

130  
	`mp_obj_�w_bo�
(
�lf
->
�n
 != 0);

131 
MP_UNARY_OP_HASH
: {

133 
mp_�t_t
 
hash
 = (mp_�t_t)
mp_cڡ_em�y_tu�e
;

134 
size_t
 
i
 = 0; i < 
�lf
->
�n
; i++) {

135 
hash
 +�
	`MP_OBJ_SMALL_INT_VALUE
(
	`mp_u�ry_�
(
MP_UNARY_OP_HASH
, 
�lf
->
�ems
[
i
]));

137  
	`MP_OBJ_NEW_SMALL_INT
(
hash
);

139 
MP_UNARY_OP_LEN
:

140  
	`MP_OBJ_NEW_SMALL_INT
(
�lf
->
�n
);

142  
MP_OBJ_NULL
;

144 
	}
}

146 
mp_obj_t
 
	$mp_obj_tu�e_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs
, mp_obj_�
rhs
) {

147 
mp_obj_tu�e_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
lhs
);

148 
�
) {

149 
MP_BINARY_OP_ADD
:

150 
MP_BINARY_OP_INPLACE_ADD
: {

151 i�(!
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
rhs
)), MP_OBJ_FROM_PTR(&
mp_ty�_tu�e
))) {

152  
MP_OBJ_NULL
;

154 
mp_obj_tu�e_t
 *
p
 = 
	`MP_OBJ_TO_PTR
(
rhs
);

155 
mp_obj_tu�e_t
 *
s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
o
->
�n
 + 
p
->�n, 
NULL
));

156 
	`mp_�q_�t
(
s
->
�ems
, 
o
->�ems, o->
�n
, 
p
->�ems,�->�n, 
mp_obj_t
);

157  
	`MP_OBJ_FROM_PTR
(
s
);

159 
MP_BINARY_OP_MULTIPLY
:

160 
MP_BINARY_OP_INPLACE_MULTIPLY
: {

161 
mp_�t_t
 
n
;

162 i�(!
	`mp_obj_g�_�t_maybe
(
rhs
, &
n
)) {

163  
MP_OBJ_NULL
;

165 i�(
n
 <= 0) {

166  
mp_cڡ_em�y_tu�e
;

168 
mp_obj_tu�e_t
 *
s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
o
->
�n
 * 
n
, 
NULL
));

169 
	`mp_�q_muɝly
(
o
->
�ems
, (*o->�ems), o->
�n
, 
n
, 
s
->items);

170  
	`MP_OBJ_FROM_PTR
(
s
);

172 
MP_BINARY_OP_EQUAL
:

173 
MP_BINARY_OP_LESS
:

174 
MP_BINARY_OP_LESS_EQUAL
:

175 
MP_BINARY_OP_MORE
:

176 
MP_BINARY_OP_MORE_EQUAL
:

177  
	`tu�e_cmp_h��r
(
�
, 
lhs
, 
rhs
);

180  
MP_OBJ_NULL
;

182 
	}
}

184 
mp_obj_t
 
	$mp_obj_tu�e_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

185 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

187 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

188 #i�
MICROPY_PY_BUILTINS_SLICE


189 i�(
	`mp_obj_is_ty�
(
�dex
, &
mp_ty�_�i�
)) {

190 
mp_bound_�i�_t
 
�i�
;

191 i�(!
	`mp_�q_g�_�_�i�_�dexes
(
�lf
->
�n
, 
�dex
, &
�i�
)) {

192 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("only slices with step=1 (aka None)�re supported"));

194 
mp_obj_tu�e_t
 *
�s
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
�i�
.
��
 - sli�.
��t
, 
NULL
));

195 
	`mp_�q_c�y
(
�s
->
�ems
, 
�lf
->�em�+ 
�i�
.
��t
,�es->
�n
, 
mp_obj_t
);

196  
	`MP_OBJ_FROM_PTR
(
�s
);

199 
size_t
 
�dex_v�ue
 = 
	`mp_g�_�dex
(
�lf
->
ba�
.
ty�
, s�f->
�n
, 
�dex
, 
�l�
);

200  
�lf
->
�ems
[
�dex_v�ue
];

202  
MP_OBJ_NULL
;

204 
	}
}

206 
mp_obj_t
 
	$tu�e_cou�
(
mp_obj_t
 
�lf_�
, mp_obj_�
v�ue
) {

207 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_tu�e
));

208 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

209  
	`mp_�q_cou�_obj
(
�lf
->
�ems
, s�f->
�n
, 
v�ue
);

210 
	}
}

211 
MP_DEFINE_CONST_FUN_OBJ_2
(
tu�e_cou�_obj
, 
tu�e_cou�
);

213 
mp_obj_t
 
	$tu�e_�dex
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

214 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�gs
[0], &
mp_ty�_tu�e
));

215 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

216  
	`mp_�q_�dex_obj
(
�lf
->
�ems
, s�f->
�n
, 
n_�gs
, 
�gs
);

217 
	}
}

218 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
tu�e_�dex_obj
, 2, 4, 
tu�e_�dex
);

220 cڡ 
mp_rom_m�_�em_t
 
	gtu�e_lo�ls_di�_�b�
[] = {

221 { 
MP_ROM_QSTR
(
MP_QSTR_cou�
), 
MP_ROM_PTR
(&
tu�e_cou�_obj
) },

222 { 
MP_ROM_QSTR
(
MP_QSTR_�dex
), 
MP_ROM_PTR
(&
tu�e_�dex_obj
) },

225 
MP_DEFINE_CONST_DICT
(
tu�e_lo�ls_di�
, 
tu�e_lo�ls_di�_�b�
);

227 
MP_DEFINE_CONST_OBJ_TYPE
(

228 
mp_ty�_tu�e
,

229 
MP_QSTR_tu�e
,

230 
MP_TYPE_FLAG_ITER_IS_GETITER
,

231 
make_�w
, 
mp_obj_tu�e_make_�w
,

232 
��t
, 
mp_obj_tu�e_��t
,

233 
u�ry_�
, 
mp_obj_tu�e_u�ry_�
,

234 
b��y_�
, 
mp_obj_tu�e_b��y_�
,

235 
subs�
, 
mp_obj_tu�e_subs�
,

236 
��
, 
mp_obj_tu�e_g���
,

237 
lo�ls_di�
, &
tu�e_lo�ls_di�


241 cڡ 
mp_obj_tu�e_t
 
	gmp_cڡ_em�y_tu�e_obj
 = {{&
mp_ty�_tu�e
}, 0};

243 
mp_obj_t
 
	$mp_obj_�w_tu�e
(
size_t
 
n
, cڡ 
mp_obj_t
 *
�ems
) {

244 i�(
n
 == 0) {

245  
mp_cڡ_em�y_tu�e
;

247 
mp_obj_tu�e_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_tu�e_t, 
�ems
, 
mp_obj_t
, 
n
, &
mp_ty�_tu�e
);

248 
o
->
�n
 = 
n
;

249 i�(
�ems
) {

250 
size_t
 
i
 = 0; i < 
n
; i++) {

251 
o
->
�ems
[
i
] = items[i];

254  
	`MP_OBJ_FROM_PTR
(
o
);

255 
	}
}

257 
	$mp_obj_tu�e_g�
(
mp_obj_t
 
�lf_�
, 
size_t
 *
�n
, mp_obj_�**
�ems
) {

258 
	`as��
(
	`mp_obj_is_tu�e_com�tib�
(
�lf_�
));

259 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

260 *
�n
 = 
�lf
->len;

261 *
�ems
 = &
�lf
->items[0];

262 
	}
}

264 
	$mp_obj_tu�e_d�
(
mp_obj_t
 
�lf_�
) {

265 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_tu�e
));

266 
mp_obj_tu�e_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

267 
	`m_d�_v�
(
mp_obj_tu�e_t
, 
�ems
, 
mp_obj_t
, 
�lf
->
�n
, self);

268 
	}
}

273 
	s_mp_obj_tu�e_�_t
 {

274 
mp_obj_ba�_t
 
	mba�
;

275 
mp_fun_1_t
 
	m���xt
;

276 
mp_obj_tu�e_t
 *
	mtu�e
;

277 
size_t
 
	mcur
;

278 } 
	tmp_obj_tu�e_�_t
;

280 
mp_obj_t
 
	$tu�e_�_���xt
(
mp_obj_t
 
�lf_�
) {

281 
mp_obj_tu�e_�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

282 i�(
�lf
->
cur
 < s�f->
tu�e
->
�n
) {

283 
mp_obj_t
 
o_out
 = 
�lf
->
tu�e
->
�ems
[�lf->
cur
];

284 
�lf
->
cur
 += 1;

285  
o_out
;

287  
MP_OBJ_STOP_ITERATION
;

289 
	}
}

291 
mp_obj_t
 
	$mp_obj_tu�e_g���
(
mp_obj_t
 
o_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

292 
	`as��
((
mp_obj_tu�e_�_t
�<�(
mp_obj_��_buf_t
));

293 
mp_obj_tu�e_�_t
 *
o
 = (mp_obj_tu�e_�_�*)
��_buf
;

294 
o
->
ba�
.
ty�
 = &
mp_ty�_p�ym�ph_��
;

295 
o
->
���xt
 = 
tu�e_�_���xt
;

296 
o
->
tu�e
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

297 
o
->
cur
 = 0;

298  
	`MP_OBJ_FROM_PTR
(
o
);

299 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtuple.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJTUPLE_H


27 
	#MICROPY_INCLUDED_PY_OBJTUPLE_H


	)

29 
	~"py/obj.h
"

31 
	s_mp_obj_tu�e_t
 {

32 
mp_obj_ba�_t
 
	mba�
;

33 
size_t
 
	m�n
;

34 
mp_obj_t
 
	m�ems
[];

35 } 
	tmp_obj_tu�e_t
;

37 
	s_mp_rom_obj_tu�e_t
 {

38 
mp_obj_ba�_t
 
	mba�
;

39 
size_t
 
	m�n
;

40 
mp_rom_obj_t
 
	m�ems
[];

41 } 
	tmp_rom_obj_tu�e_t
;

43 
mp_obj_tu�e_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
);

44 
mp_obj_t
 
mp_obj_tu�e_u�ry_�
(
mp_u�ry_�_t
 
�
, mp_obj_�
�lf_�
);

45 
mp_obj_t
 
mp_obj_tu�e_b��y_�
(
mp_b��y_�_t
 
�
, mp_obj_�
lhs
, mp_obj_�
rhs
);

46 
mp_obj_t
 
mp_obj_tu�e_subs�
(mp_obj_�
ba�
, mp_obj_�
�dex
, mp_obj_�
v�ue
);

47 
mp_obj_t
 
mp_obj_tu�e_g���
(mp_obj_�
o_�
, 
mp_obj_��_buf_t
 *
��_buf
);

49 
cڡ 
mp_obj_ty�_t
 
mp_ty�_��tu�e
;

51 
	#MP_DEFINE_ATTRTUPLE
(
tu�e_obj_�me
, 
f�lds
, 
n�ems
, ...) \

52 cڡ 
mp_rom_obj_tu�e_t
 
tu�e_obj_�me
 = { \

53 .
ba�
 = {&
mp_ty�_��tu�e
}, \

54 .
�n
 = 
n�ems
, \

55 .
�ems
 = { 
__VA_ARGS__
, 
	`MP_ROM_PTR
((*)
f�lds
) } \

56 }

	)

58 #i�
MICROPY_PY_COLLECTIONS


59 
mp_obj_��tu�e_��t_h��r
(cڡ 
mp_��t_t
 *
��t
, cڡ 
q�r
 *
f�lds
, 
mp_obj_tu�e_t
 *
o
);

62 
mp_obj_t
 
mp_obj_�w_��tu�e
(cڡ 
q�r
 *
f�lds
, 
size_t
 
n
, cڡ mp_obj_�*
�ems
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtype.c

28 
	~<�dio.h
>

29 
	~<�ddef.h
>

30 
	~<�r�g.h
>

31 
	~<as��.h
>

33 
	~"py/objty�.h
"

34 
	~"py/ru�ime.h
"

36 #i�
MICROPY_DEBUG_VERBOSE


37 
	#DEBUG_PRINT
 (1)

	)

38 
	#DEBUG_��tf
 
DEBUG_��tf


	)

40 
	#DEBUG_PRINT
 (0)

	)

41 
	#DEBUG_��tf
(...�()0

	)

44 
	#ENABLE_SPECIAL_ACCESSORS
 \

45 (
MICROPY_PY_DESCRIPTORS
 || 
MICROPY_PY_DELATTR_SETATTR
 || 
MICROPY_PY_BUILTINS_PROPERTY
)

	)

47 
mp_obj_t
 
mp_obj_is_sub�ass
(mp_obj_�
obje�
, mp_obj_�
�ass�fo
);

48 
mp_obj_t
 
��ic_�ass_m�hod_make_�w
(cڡ 
mp_obj_ty�_t
 *
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

53 
	$����_cou�_�tive_ba�s
(cڡ 
mp_obj_ty�_t
 *
ty�
, cڡ mp_obj_ty�_�**
ϡ_�tive_ba�
) {

54 
cou�
 = 0;

56 i�(
ty�
 =�&
mp_ty�_obje�
) {

58  
cou�
;

59 } i�(
	`mp_obj_is_�tive_ty�
(
ty�
)) {

61 *
ϡ_�tive_ba�
 = 
ty�
;

62  
cou�
 + 1;

63 } i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
���
)) {

65  
cou�
;

66 #i�
MICROPY_MULTIPLE_INHERITANCE


67 } i�(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
))->ty� =�&
mp_ty�_tu�e
) {

69 cڡ 
mp_obj_tu�e_t
 *
���_tu�e
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
);

70 cڡ 
mp_obj_t
 *
�em
 = 
���_tu�e
->
�ems
;

71 cڡ 
mp_obj_t
 *
t�
 = 
�em
 + 
���_tu�e
->
�n
;

72 ; 
�em
 < 
t�
; ++item) {

73 
	`as��
(
	`mp_obj_is_ty�
(*
�em
, &
mp_ty�_ty�
));

74 cڡ 
mp_obj_ty�_t
 *
bt
 = (cڡ mp_obj_ty�_�*)
	`MP_OBJ_TO_PTR
(*
�em
);

75 
cou�
 +�
	`����_cou�_�tive_ba�s
(
bt
, 
ϡ_�tive_ba�
);

77  
cou�
;

81 
ty�
 = 
	`MP_OBJ_TYPE_GET_SLOT
�y�, 
���
);

84 
	}
}

88 
mp_obj_t
 
	$�tive_ba�_��_w���
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

89 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�gs
[0]);

90 cڡ 
mp_obj_ty�_t
 *
�tive_ba�
 = 
NULL
;

91 
	`����_cou�_�tive_ba�s
(
�lf
->
ba�
.
ty�
, &
�tive_ba�
);

92 
�lf
->
subobj
[0] = 
	`MP_OBJ_TYPE_GET_SLOT
(
�tive_ba�
, 
make_�w
)ҩive_ba�, 
n_�gs
 - 1, 0, 
�gs
 + 1);

93  
mp_cڡ_n�e
;

94 
	}
}

95 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
�tive_ba�_��_w���_obj
, 1, 
MP_OBJ_FUN_ARGS_MAX
, 
�tive_ba�_��_w���
);

97 #i�!
MICROPY_CPYTHON_COMPAT


100 
mp_obj_����_t
 *
	$mp_obj_�w_����
(cڡ 
mp_obj_ty�_t
 *
�ass
, cڡ mp_obj_ty�_�**
�tive_ba�
) {

101 
size_t
 
num_�tive_ba�s
 = 
	`����_cou�_�tive_ba�s
(
�ass
, 
�tive_ba�
);

102 
	`as��
(
num_�tive_ba�s
 < 2);

103 
mp_obj_����_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_����_t, 
subobj
, 
mp_obj_t
, 
num_�tive_ba�s
, 
�ass
);

104 
	`mp_m�_��
(&
o
->
memb�s
, 0);

108 i�(
num_�tive_ba�s
 != 0) {

109 
o
->
subobj
[0] = 
	`MP_OBJ_FROM_PTR
(&
�tive_ba�_��_w���_obj
);

111  
o
;

112 
	}
}

128 
	s�ass_lookup_d�a
 {

129 
mp_obj_����_t
 *
	mobj
;

130 
q�r
 
	m��
;

131 
size_t
 
	m��_off�t
;

132 
mp_obj_t
 *
	mde�
;

133 
bo�
 
	mis_ty�
;

136 
	$mp_obj_�ass_lookup
(
�ass_lookup_d�a
 *
lookup
, cڡ 
mp_obj_ty�_t
 *
ty�
) {

137 
	`as��
(
lookup
->
de�
[0] =�
MP_OBJ_NULL
);

138 
	`as��
(
lookup
->
de�
[1] =�
MP_OBJ_NULL
);

140 
	`DEBUG_��tf
("mp_obj_�ass_lookup: Look�g u�%�� %s\n", 
	`q�r_�r
(
lookup
->
��
), q�r_�r(
ty�
->
�me
));

145 i�(
lookup
->
��_off�t
 !�0 && 
	`mp_obj_is_�tive_ty�
(
ty�
)) {

149 i�(
	`MP_OBJ_TYPE_HAS_SLOT_BY_OFFSET
(
ty�
, 
lookup
->
��_off�t
�|| (lookup->��_off��=�
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
��
�&&�y�->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_STREAM
)) {

150 
	`DEBUG_��tf
("mp_obj_class_lookup: Matched special meth slot (off=%d) for %s\n",

151 
lookup
->
��_off�t
, 
	`q�r_�r
�ookup->
��
));

152 
lookup
->
de�
[0] = 
MP_OBJ_SENTINEL
;

157 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
lo�ls_di�
)) {

159 
	`as��
(
	`mp_obj_is_di�_�_�d�eddi�
(
	`MP_OBJ_FROM_PTR
(
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
lo�ls_di�
))));

160 
mp_m�_t
 *
lo�ls_m�
 = &
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
lo�ls_di�
)->
m�
;

161 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
lo�ls_m�
, 
	`MP_OBJ_NEW_QSTR
(
lookup
->
��
), 
MP_MAP_LOOKUP
);

162 i�(
�em
 !�
NULL
) {

163 i�(
lookup
->
is_ty�
) {

166 cڡ 
mp_obj_ty�_t
 *
�g_ty�
 = (cڡ mp_obj_ty�_�*)
lookup
->
obj
;

167 
	`mp_c�v�t_memb�_lookup
(
MP_OBJ_NULL
, 
�g_ty�
, 
�em
->
v�ue
, 
lookup
->
de�
);

169 
mp_obj_����_t
 *
obj
 = 
lookup
->obj;

170 
mp_obj_t
 
obj_obj
;

171 i�(
obj
 !�
NULL
 && 
	`mp_obj_is_�tive_ty�
(
ty�
�&&�y� !�&
mp_ty�_obje�
 ) {

173 
obj_obj
 = 
obj
->
subobj
[0];

174 #i�
MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG


175 i�(
obj_obj
 =�
	`MP_OBJ_FROM_PTR
(&
�tive_ba�_��_w���_obj
)) {

177 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("call super().__init__() first"));

181 
obj_obj
 = 
	`MP_OBJ_FROM_PTR
(
obj
);

183 
	`mp_c�v�t_memb�_lookup
(
obj_obj
, 
ty�
, 
�em
->
v�ue
, 
lookup
->
de�
);

185 #i�
DEBUG_PRINT


186 
	`DEBUG_��tf
("mp_obj_class_lookup: Returning: ");

187 
	`mp_obj_��t_h��r
(
MICROPY_DEBUG_PRINTER
, 
lookup
->
de�
[0], 
PRINT_REPR
);

188 i�(
lookup
->
de�
[1] !�
MP_OBJ_NULL
) {

190 
	`DEBUG_��tf
(" <%�@%p>", 
	`mp_obj_g�_ty�_�r
(
lookup
->
de�
[1]), 
	`MP_OBJ_TO_PTR
(lookup->dest[1]));

192 
	`DEBUG_��tf
("\n");

201 i�(
lookup
->
obj
 !�
NULL
 && !lookup->
is_ty�
 && 
	`mp_obj_is_�tive_ty�
(
ty�
�&&�y� !�&
mp_ty�_obje�
 ) {

202 
	`mp_l�d_m�hod_maybe
(
lookup
->
obj
->
subobj
[0],�ookup->
��
,�ookup->
de�
);

203 i�(
lookup
->
de�
[0] !�
MP_OBJ_NULL
) {

210 i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
���
)) {

211 
	`DEBUG_��tf
("mp_obj_class_lookup: No more�arents\n");

213 #i�
MICROPY_MULTIPLE_INHERITANCE


214 } i�(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
))->ty� =�&
mp_ty�_tu�e
) {

215 cڡ 
mp_obj_tu�e_t
 *
���_tu�e
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
);

216 cڡ 
mp_obj_t
 *
�em
 = 
���_tu�e
->
�ems
;

217 cڡ 
mp_obj_t
 *
t�
 = 
�em
 + 
���_tu�e
->
�n
 - 1;

218 ; 
�em
 < 
t�
; ++item) {

219 
	`as��
(
	`mp_obj_is_ty�
(*
�em
, &
mp_ty�_ty�
));

220 
mp_obj_ty�_t
 *
bt
 = (mp_obj_ty�_�*)
	`MP_OBJ_TO_PTR
(*
�em
);

221 i�(
bt
 =�&
mp_ty�_obje�
) {

225 
	`mp_obj_�ass_lookup
(
lookup
, 
bt
);

226 i�(
lookup
->
de�
[0] !�
MP_OBJ_NULL
) {

232 
	`as��
(
	`mp_obj_is_ty�
(*
�em
, &
mp_ty�_ty�
));

233 
ty�
 = (
mp_obj_ty�_t
 *)
	`MP_OBJ_TO_PTR
(*
�em
);

236 
ty�
 = 
	`MP_OBJ_TYPE_GET_SLOT
�y�, 
���
);

238 i�(
ty�
 =�&
mp_ty�_obje�
) {

243 
	}
}

245 
	$����_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

246 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

247 
q�r
 
m�h
 = (
k�d
 =�
PRINT_STR
�? 
MP_QSTR___�r__
 : 
MP_QSTR___��__
;

248 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
};

249 
�ass_lookup_d�a
 
lookup
 = {

250 .
obj
 = 
�lf
,

251 .
��
 = 
m�h
,

252 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
��t
),

253 .
de�
 = 
memb�
,

254 .
is_ty�
 = 
�l�
,

256 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

257 i�(
memb�
[0] =�
MP_OBJ_NULL
 && 
k�d
 =�
PRINT_STR
) {

259 
lookup
.
��
 = 
MP_QSTR___��__
;

260 
lookup
.
��_off�t
 = 0;

261 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

264 i�(
memb�
[0] =�
MP_OBJ_SENTINEL
) {

266 i�(
	`mp_obj_is_�tive_ex��i�_����
(
�lf
->
subobj
[0])) {

267 i�(
k�d
 !�
PRINT_STR
) {

268 
	`mp_��t_�r
(
��t
, 
	`q�r_�r
(
�lf
->
ba�
.
ty�
->
�me
));

270 
	`mp_obj_��t_h��r
(
��t
, 
�lf
->
subobj
[0], 
k�d
 | 
PRINT_EXC_SUBCLASS
);

272 
	`mp_obj_��t_h��r
(
��t
, 
�lf
->
subobj
[0], 
k�d
);

277 i�(
memb�
[0] !�
MP_OBJ_NULL
) {

278 
mp_obj_t
 
r
 = 
	`mp_��_fun�i�_1
(
memb�
[0], 
�lf_�
);

279 
	`mp_obj_��t_h��r
(
��t
, 
r
, 
PRINT_STR
);

284 
	`mp_��tf
(
��t
, "<%�obje���%p>", 
	`mp_obj_g�_ty�_�r
(
�lf_�
), 
�lf
);

285 
	}
}

287 
mp_obj_t
 
	$mp_obj_����_make_�w
(cڡ 
mp_obj_ty�_t
 *
�lf
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

288 
	`as��
(
	`mp_obj_is_����_ty�
(
�lf
));

291 
mp_obj_t
 
��_�
[2] = {
MP_OBJ_NULL
};

292 
�ass_lookup_d�a
 
lookup
 = {

293 .
obj
 = 
NULL
,

294 .
��
 = 
MP_QSTR___�w__
,

295 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
make_�w
),

296 .
de�
 = 
��_�
,

297 .
is_ty�
 = 
�l�
,

299 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
);

301 cڡ 
mp_obj_ty�_t
 *
�tive_ba�
 = 
NULL
;

302 
mp_obj_����_t
 *
o
;

303 i�(
��_�
[0] =�
MP_OBJ_NULL
 || in�_�[0] =�
MP_OBJ_SENTINEL
) {

306 
o
 = 
	`mp_obj_�w_����
(
�lf
, &
�tive_ba�
);

316 
mp_obj_t
 
�w_�t
;

317 i�(
n_�gs
 =�0 && 
n_kw
 == 0) {

318 
mp_obj_t
 
�gs2
[1] = {
	`MP_OBJ_FROM_PTR
(
�lf
)};

319 
�w_�t
 = 
	`mp_��_fun�i�_n_kw
(
��_�
[0], 1, 0, 
�gs2
);

321 
mp_obj_t
 *
�gs2
 = 
	`m_�w
(mp_obj_t, 1 + 
n_�gs
 + 2 * 
n_kw
);

322 
�gs2
[0] = 
	`MP_OBJ_FROM_PTR
(
�lf
);

323 
	`mem�y
(
�gs2
 + 1, 
�gs
, (
n_�gs
 + 2 * 
n_kw
�* (
mp_obj_t
));

324 
�w_�t
 = 
	`mp_��_fun�i�_n_kw
(
��_�
[0], 
n_�gs
 + 1, 
n_kw
, 
�gs2
);

325 
	`m_d�
(
mp_obj_t
, 
�gs2
, 1 + 
n_�gs
 + 2 * 
n_kw
);

331 i�(
	`mp_obj_g�_ty�
(
�w_�t
�!�
�lf
) {

332  
�w_�t
;

336 
o
 = 
	`MP_OBJ_TO_PTR
(
�w_�t
);

342 
��_�
[0] = in�_�[1] = 
MP_OBJ_NULL
;

343 
lookup
.
obj
 = 
o
;

344 
lookup
.
��
 = 
MP_QSTR___��__
;

345 
lookup
.
��_off�t
 = 0;

346 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
);

347 i�(
��_�
[0] !�
MP_OBJ_NULL
) {

348 
mp_obj_t
 
��_�t
;

349 i�(
n_�gs
 =�0 && 
n_kw
 == 0) {

350 
��_�t
 = 
	`mp_��_m�hod_n_kw
(0, 0, 
��_�
);

352 
mp_obj_t
 *
�gs2
 = 
	`m_�w
(mp_obj_t, 2 + 
n_�gs
 + 2 * 
n_kw
);

353 
�gs2
[0] = 
��_�
[0];

354 
�gs2
[1] = 
��_�
[1];

355 
	`mem�y
(
�gs2
 + 2, 
�gs
, (
n_�gs
 + 2 * 
n_kw
�* (
mp_obj_t
));

356 
��_�t
 = 
	`mp_��_m�hod_n_kw
(
n_�gs
, 
n_kw
, 
�gs2
);

357 
	`m_d�
(
mp_obj_t
, 
�gs2
, 2 + 
n_�gs
 + 2 * 
n_kw
);

359 i�(
��_�t
 !�
mp_cڡ_n�e
) {

360 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


361 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("__init__() should�eturn None"));

363 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

364 
	`MP_ERROR_TEXT
("__��__(�should��u� N�e,�� '%s'"), 
	`mp_obj_g�_ty�_�r
(
��_�t
));

371 i�(
�tive_ba�
 !�
NULL
 && 
o
->
subobj
[0] =�
	`MP_OBJ_FROM_PTR
(&
�tive_ba�_��_w���_obj
)) {

372 
o
->
subobj
[0] = 
	`MP_OBJ_TYPE_GET_SLOT
(
�tive_ba�
, 
make_�w
)ҩive_ba�, 
n_�gs
, 
n_kw
, 
�gs
);

375  
	`MP_OBJ_FROM_PTR
(
o
);

376 
	}
}

382 cڡ 
by�
 
	gmp_u�ry_�_m�hod_�me
[
MP_UNARY_OP_NUM_RUNTIME
] = {

383 [
MP_UNARY_OP_BOOL
] = 
MP_QSTR___bo�__
,

384 [
MP_UNARY_OP_LEN
] = 
MP_QSTR___�n__
,

385 [
MP_UNARY_OP_HASH
] = 
MP_QSTR___hash__
,

386 [
MP_UNARY_OP_INT_MAYBE
] = 
MP_QSTR___�t__
,

387 #i�
MICROPY_PY_ALL_SPECIAL_METHODS


388 [
MP_UNARY_OP_POSITIVE
] = 
MP_QSTR___pos__
,

389 [
MP_UNARY_OP_NEGATIVE
] = 
MP_QSTR___�g__
,

390 [
MP_UNARY_OP_INVERT
] = 
MP_QSTR___�v�t__
,

391 [
MP_UNARY_OP_ABS
] = 
MP_QSTR___abs__
,

393 #i�
MICROPY_PY_BUILTINS_FLOAT


394 [
MP_UNARY_OP_FLOAT_MAYBE
] = 
MP_QSTR___��t__
,

395 #i�
MICROPY_PY_BUILTINS_COMPLEX


396 [
MP_UNARY_OP_COMPLEX_MAYBE
] = 
MP_QSTR___com�ex__
,

399 #i�
MICROPY_PY_SYS_GETSIZEOF


400 [
MP_UNARY_OP_SIZEOF
] = 
MP_QSTR___sizeof__
,

404 
mp_obj_t
 
	$����_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�lf_�
) {

405 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

407 #i�
MICROPY_PY_SYS_GETSIZEOF


408 i�(
	`MP_UNLIKELY
(
�
 =�
MP_UNARY_OP_SIZEOF
)) {

410 cڡ 
mp_obj_ty�_t
 *
�tive_ba�
;

411 
size_t
 
num_�tive_ba�s
 = 
	`����_cou�_�tive_ba�s
(
	`mp_obj_g�_ty�
(
�lf_�
), &
�tive_ba�
);

413 
size_t
 
sz
 = (*
�lf
�+ (*�lf->
subobj
�* 
num_�tive_ba�s


414 + (*
�lf
->
memb�s
.
�b�
�* s�f->memb�s.
�loc
;

415  
	`MP_OBJ_NEW_SMALL_INT
(
sz
);

419 
q�r
 
�_�me
 = 
mp_u�ry_�_m�hod_�me
[
�
];

425 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
};

426 
�ass_lookup_d�a
 
lookup
 = {

427 .
obj
 = 
�lf
,

428 .
��
 = 
�_�me
,

429 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
u�ry_�
),

430 .
de�
 = 
memb�
,

431 .
is_ty�
 = 
�l�
,

433 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

434 i�(
memb�
[0] =�
MP_OBJ_SENTINEL
) {

435  
	`mp_u�ry_�
(
�
, 
�lf
->
subobj
[0]);

436 } i�(
memb�
[0] !�
MP_OBJ_NULL
) {

437 
mp_obj_t
 
v�
 = 
	`mp_��_fun�i�_1
(
memb�
[0], 
�lf_�
);

439 
�
) {

440 
MP_UNARY_OP_HASH
:

442 
v�
 = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_obj_g�_�t_�un��d
(val));

444 
MP_UNARY_OP_INT_MAYBE
:

446 i�(!
	`mp_obj_is_�t
(
v�
)) {

447 
	`mp_�i�_Ty�E��
(
NULL
);

454  
v�
;

456 i�(
�
 =�
MP_UNARY_OP_HASH
) {

457 
lookup
.
��
 = 
MP_QSTR___eq__
;

458 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

459 i�(
memb�
[0] =�
MP_OBJ_NULL
) {

465  
	`MP_OBJ_NEW_SMALL_INT
((
mp_u�t_t
)
�lf_�
);

471  
MP_OBJ_NULL
;

473 
	}
}

482 cڡ 
by�
 
	gmp_b��y_�_m�hod_�me
[
MP_BINARY_OP_NUM_RUNTIME
] = {

483 [
MP_BINARY_OP_LESS
] = 
MP_QSTR___�__
,

484 [
MP_BINARY_OP_MORE
] = 
MP_QSTR___gt__
,

485 [
MP_BINARY_OP_EQUAL
] = 
MP_QSTR___eq__
,

486 [
MP_BINARY_OP_LESS_EQUAL
] = 
MP_QSTR___�__
,

487 [
MP_BINARY_OP_MORE_EQUAL
] = 
MP_QSTR___ge__
,

488 [
MP_BINARY_OP_NOT_EQUAL
] = 
MP_QSTR___�__
,

489 [
MP_BINARY_OP_CONTAINS
] = 
MP_QSTR___cڏ�s__
,

492 [
MP_BINARY_OP_INPLACE_ADD
] = 
MP_QSTR___�dd__
,

493 [
MP_BINARY_OP_INPLACE_SUBTRACT
] = 
MP_QSTR___isub__
,

494 #i�
MICROPY_PY_ALL_INPLACE_SPECIAL_METHODS


495 [
MP_BINARY_OP_INPLACE_MULTIPLY
] = 
MP_QSTR___imul__
,

496 [
MP_BINARY_OP_INPLACE_MAT_MULTIPLY
] = 
MP_QSTR___im�mul__
,

497 [
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
] = 
MP_QSTR___i�o�div__
,

498 [
MP_BINARY_OP_INPLACE_TRUE_DIVIDE
] = 
MP_QSTR___�ruediv__
,

499 [
MP_BINARY_OP_INPLACE_MODULO
] = 
MP_QSTR___imod__
,

500 [
MP_BINARY_OP_INPLACE_POWER
] = 
MP_QSTR___�ow__
,

501 [
MP_BINARY_OP_INPLACE_OR
] = 
MP_QSTR___i�__
,

502 [
MP_BINARY_OP_INPLACE_XOR
] = 
MP_QSTR___ix�__
,

503 [
MP_BINARY_OP_INPLACE_AND
] = 
MP_QSTR___�nd__
,

504 [
MP_BINARY_OP_INPLACE_LSHIFT
] = 
MP_QSTR___�shi�__
,

505 [
MP_BINARY_OP_INPLACE_RSHIFT
] = 
MP_QSTR___�shi�__
,

508 [
MP_BINARY_OP_ADD
] = 
MP_QSTR___add__
,

509 [
MP_BINARY_OP_SUBTRACT
] = 
MP_QSTR___sub__
,

510 #i�
MICROPY_PY_ALL_SPECIAL_METHODS


511 [
MP_BINARY_OP_MULTIPLY
] = 
MP_QSTR___mul__
,

512 [
MP_BINARY_OP_MAT_MULTIPLY
] = 
MP_QSTR___m�mul__
,

513 [
MP_BINARY_OP_FLOOR_DIVIDE
] = 
MP_QSTR___�o�div__
,

514 [
MP_BINARY_OP_TRUE_DIVIDE
] = 
MP_QSTR___�uediv__
,

515 [
MP_BINARY_OP_MODULO
] = 
MP_QSTR___mod__
,

516 [
MP_BINARY_OP_DIVMOD
] = 
MP_QSTR___divmod__
,

517 [
MP_BINARY_OP_POWER
] = 
MP_QSTR___pow__
,

518 [
MP_BINARY_OP_OR
] = 
MP_QSTR___�__
,

519 [
MP_BINARY_OP_XOR
] = 
MP_QSTR___x�__
,

520 [
MP_BINARY_OP_AND
] = 
MP_QSTR___�d__
,

521 [
MP_BINARY_OP_LSHIFT
] = 
MP_QSTR___lshi�__
,

522 [
MP_BINARY_OP_RSHIFT
] = 
MP_QSTR___rshi�__
,

525 #i�
MICROPY_PY_REVERSE_SPECIAL_METHODS


526 [
MP_BINARY_OP_REVERSE_ADD
] = 
MP_QSTR___�dd__
,

527 [
MP_BINARY_OP_REVERSE_SUBTRACT
] = 
MP_QSTR___rsub__
,

528 #i�
MICROPY_PY_ALL_SPECIAL_METHODS


529 [
MP_BINARY_OP_REVERSE_MULTIPLY
] = 
MP_QSTR___rmul__
,

530 [
MP_BINARY_OP_REVERSE_MAT_MULTIPLY
] = 
MP_QSTR___rm�mul__
,

531 [
MP_BINARY_OP_REVERSE_FLOOR_DIVIDE
] = 
MP_QSTR___r�o�div__
,

532 [
MP_BINARY_OP_REVERSE_TRUE_DIVIDE
] = 
MP_QSTR___�ruediv__
,

533 [
MP_BINARY_OP_REVERSE_MODULO
] = 
MP_QSTR___rmod__
,

534 [
MP_BINARY_OP_REVERSE_POWER
] = 
MP_QSTR___�ow__
,

535 [
MP_BINARY_OP_REVERSE_OR
] = 
MP_QSTR___r�__
,

536 [
MP_BINARY_OP_REVERSE_XOR
] = 
MP_QSTR___rx�__
,

537 [
MP_BINARY_OP_REVERSE_AND
] = 
MP_QSTR___�nd__
,

538 [
MP_BINARY_OP_REVERSE_LSHIFT
] = 
MP_QSTR___�shi�__
,

539 [
MP_BINARY_OP_REVERSE_RSHIFT
] = 
MP_QSTR___�shi�__
,

544 
mp_obj_t
 
	$����_b��y_�
(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

547 
mp_obj_����_t
 *
lhs
 = 
	`MP_OBJ_TO_PTR
(
lhs_�
);

548 
q�r
 
�_�me
 = 
mp_b��y_�_m�hod_�me
[
�
];

554 
mp_obj_t
 
de�
[3] = {
MP_OBJ_NULL
};

555 
�ass_lookup_d�a
 
lookup
 = {

556 .
obj
 = 
lhs
,

557 .
��
 = 
�_�me
,

558 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
b��y_�
),

559 .
de�
 = dest,

560 .
is_ty�
 = 
�l�
,

562 
	`mp_obj_�ass_lookup
(&
lookup
, 
lhs
->
ba�
.
ty�
);

564 
mp_obj_t
 
�s
;

565 i�(
de�
[0] =�
MP_OBJ_SENTINEL
) {

566 
�s
 = 
	`mp_b��y_�
(
�
, 
lhs
->
subobj
[0], 
rhs_�
);

567 } i�(
de�
[0] !�
MP_OBJ_NULL
) {

568 
de�
[2] = 
rhs_�
;

569 
�s
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�
);

570 
�s
 = 
�
 =�
MP_BINARY_OP_CONTAINS
 ? 
	`mp_obj_�w_bo�
(
	`mp_obj_is_�ue
(res)) :�es;

572  
MP_OBJ_NULL
;

575 #i�
MICROPY_PY_BUILTINS_NOTIMPLEMENTED


578 i�(
�s
 =�
mp_cڡ_n�im�em��d
) {

579  
MP_OBJ_NULL
;

583  
�s
;

584 
	}
}

586 
	$mp_obj_����_l�d_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

588 
	`as��
(
	`mp_obj_is_����_ty�
(
	`mp_obj_g�_ty�
(
�lf_�
)));

589 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

592 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP
);

593 i�(
�em
 !�
NULL
) {

595 
de�
[0] = 
�em
->
v�ue
;

598 #i�
MICROPY_CPYTHON_COMPAT


599 i�(
��
 =�
MP_QSTR___di�__
) {

602 
mp_obj_di�_t
 
di�
;

603 
di�
.
ba�
.
ty�
 = &
mp_ty�_di�
;

604 
di�
.
m�
 = 
�lf
->
memb�s
;

605 
de�
[0] = 
	`mp_obj_di�_c�y
(
	`MP_OBJ_FROM_PTR
(&
di�
));

606 
mp_obj_di�_t
 *
de�_di�
 = 
	`MP_OBJ_TO_PTR
(
de�
[0]);

607 
de�_di�
->
m�
.
is_fixed
 = 1;

611 
�ass_lookup_d�a
 
lookup
 = {

612 .
obj
 = 
�lf
,

613 .
��
 =�ttr,

614 .
��_off�t
 = 0,

615 .
de�
 = dest,

616 .
is_ty�
 = 
�l�
,

618 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

619 
mp_obj_t
 
memb�
 = 
de�
[0];

620 i�(
memb�
 !�
MP_OBJ_NULL
) {

621 i�(!(
�lf
->
ba�
.
ty�
->
�ags
 & 
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
)) {

626 #i�
MICROPY_PY_BUILTINS_PROPERTY


627 i�(
	`mp_obj_is_ty�
(
memb�
, &
mp_ty�_�ݔty
)) {

635 cڡ 
mp_obj_t
 *
�oxy
 = 
	`mp_obj_�ݔty_g�
(
memb�
);

636 i�(
�oxy
[0] =�
mp_cڡ_n�e
) {

637 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("unreadable�ttribute"));

639 
de�
[0] = 
	`mp_��_fun�i�_n_kw
(
�oxy
[0], 1, 0, &
�lf_�
);

645 #i�
MICROPY_PY_DESCRIPTORS


650 
mp_obj_t
 
��_g�_m�hod
[4];

651 
	`mp_l�d_m�hod_maybe
(
memb�
, 
MP_QSTR___g�__
, 
��_g�_m�hod
);

652 i�(
��_g�_m�hod
[0] !�
MP_OBJ_NULL
) {

653 
��_g�_m�hod
[2] = 
�lf_�
;

654 
��_g�_m�hod
[3] = 
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
�lf_�
));

655 
de�
[0] = 
	`mp_��_m�hod_n_kw
(2, 0, 
��_g�_m�hod
);

662 i�(
��
 !�
MP_QSTR___g���__
) {

663 #i�
MICROPY_PY_DELATTR_SETATTR


667 i�(
��
 =�
MP_QSTR___���r__
 ||���=�
MP_QSTR___d���__
) {

672 
mp_obj_t
 
de�2
[3];

673 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR___g���__
, 
de�2
);

674 i�(
de�2
[0] !�
MP_OBJ_NULL
) {

676 
de�2
[2] = 
	`MP_OBJ_NEW_QSTR
(
��
);

677 
de�
[0] = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�2
);

681 
	}
}

683 
bo�
 
	$mp_obj_����_��e_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�
v�ue
) {

684 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

686 i�(!(
�lf
->
ba�
.
ty�
->
�ags
 & 
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
)) {

688 
sk�_�ec�l_ac�ss�s
;

691 #i�
MICROPY_PY_BUILTINS_PROPERTY
 || 
MICROPY_PY_DESCRIPTORS


695 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
};

696 
�ass_lookup_d�a
 
lookup
 = {

697 .
obj
 = 
�lf
,

698 .
��
 =�ttr,

699 .
��_off�t
 = 0,

700 .
de�
 = 
memb�
,

701 .
is_ty�
 = 
�l�
,

703 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

705 i�(
memb�
[0] !�
MP_OBJ_NULL
) {

706 #i�
MICROPY_PY_BUILTINS_PROPERTY


707 i�(
	`mp_obj_is_ty�
(
memb�
[0], &
mp_ty�_�ݔty
)) {

715 cڡ 
mp_obj_t
 *
�oxy
 = 
	`mp_obj_�ݔty_g�
(
memb�
[0]);

716 
mp_obj_t
 
de�
[2] = {
�lf_�
, 
v�ue
};

717 i�(
v�ue
 =�
MP_OBJ_NULL
) {

719 i�(
�oxy
[2] =�
mp_cڡ_n�e
) {

721  
�l�
;

723 
	`mp_��_fun�i�_n_kw
(
�oxy
[2], 1, 0, 
de�
);

724  
�ue
;

728 i�(
�oxy
[1] =�
mp_cڡ_n�e
) {

730  
�l�
;

732 
	`mp_��_fun�i�_n_kw
(
�oxy
[1], 2, 0, 
de�
);

733  
�ue
;

739 #i�
MICROPY_PY_DESCRIPTORS


742 i�(
v�ue
 =�
MP_OBJ_NULL
) {

744 
mp_obj_t
 
��_d��e_m�hod
[3];

745 
	`mp_l�d_m�hod_maybe
(
memb�
[0], 
MP_QSTR___d��e__
, 
��_d��e_m�hod
);

746 i�(
��_d��e_m�hod
[0] !�
MP_OBJ_NULL
) {

747 
��_d��e_m�hod
[2] = 
�lf_�
;

748 
	`mp_��_m�hod_n_kw
(1, 0, 
��_d��e_m�hod
);

749  
�ue
;

753 
mp_obj_t
 
��_�t_m�hod
[4];

754 
	`mp_l�d_m�hod_maybe
(
memb�
[0], 
MP_QSTR___�t__
, 
��_�t_m�hod
);

755 i�(
��_�t_m�hod
[0] !�
MP_OBJ_NULL
) {

756 
��_�t_m�hod
[2] = 
�lf_�
;

757 
��_�t_m�hod
[3] = 
v�ue
;

758 
	`mp_��_m�hod_n_kw
(2, 0, 
��_�t_m�hod
);

759  
�ue
;

766 #i�
MICROPY_PY_DELATTR_SETATTR


767 i�(
v�ue
 =�
MP_OBJ_NULL
) {

770 
mp_obj_t
 
��_d���_m�hod
[3];

771 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR___d���__
, 
��_d���_m�hod
);

772 i�(
��_d���_m�hod
[0] !�
MP_OBJ_NULL
) {

774 
��_d���_m�hod
[2] = 
	`MP_OBJ_NEW_QSTR
(
��
);

775 
	`mp_��_m�hod_n_kw
(1, 0, 
��_d���_m�hod
);

776  
�ue
;

781 
mp_obj_t
 
��_���r_m�hod
[4];

782 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR___���r__
, 
��_���r_m�hod
);

783 i�(
��_���r_m�hod
[0] !�
MP_OBJ_NULL
) {

785 
��_���r_m�hod
[2] = 
	`MP_OBJ_NEW_QSTR
(
��
);

786 
��_���r_m�hod
[3] = 
v�ue
;

787 
	`mp_��_m�hod_n_kw
(2, 0, 
��_���r_m�hod
);

788  
�ue
;

793 
sk�_�ec�l_ac�ss�s
:

795 i�(
v�ue
 =�
MP_OBJ_NULL
) {

797 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

798  
�em
 !�
NULL
;

801 
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
)->
v�ue
 = value;

802  
�ue
;

804 
	}
}

806 
	$mp_obj_����_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

807 i�(
de�
[0] =�
MP_OBJ_NULL
) {

808 
	`mp_obj_����_l�d_��
(
�lf_�
, 
��
, 
de�
);

810 i�(
	`mp_obj_����_��e_��
(
�lf_�
, 
��
, 
de�
[1])) {

811 
de�
[0] = 
MP_OBJ_NULL
;

814 
	}
}

816 
mp_obj_t
 
	$����_subs�
(
mp_obj_t
 
�lf_�
, mp_obj_�
�dex
, mp_obj_�
v�ue
) {

817 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

818 
mp_obj_t
 
memb�
[4] = {
MP_OBJ_NULL
, MP_OBJ_NULL, 
�dex
, 
v�ue
};

819 
�ass_lookup_d�a
 
lookup
 = {

820 .
obj
 = 
�lf
,

821 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
subs�
),

822 .
de�
 = 
memb�
,

823 .
is_ty�
 = 
�l�
,

825 i�(
v�ue
 =�
MP_OBJ_NULL
) {

827 
lookup
.
��
 = 
MP_QSTR___d��em__
;

828 } i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

830 
lookup
.
��
 = 
MP_QSTR___g��em__
;

833 
lookup
.
��
 = 
MP_QSTR___�t�em__
;

835 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

836 i�(
memb�
[0] =�
MP_OBJ_SENTINEL
) {

837  
	`mp_obj_subs�
(
�lf
->
subobj
[0], 
�dex
, 
v�ue
);

838 } i�(
memb�
[0] !�
MP_OBJ_NULL
) {

839 
size_t
 
n_�gs
 = 
v�ue
 =�
MP_OBJ_NULL
 || v�u�=�
MP_OBJ_SENTINEL
 ? 1 : 2;

840 
mp_obj_t
 
�t
 = 
	`mp_��_m�hod_n_kw
(
n_�gs
, 0, 
memb�
);

841 i�(
v�ue
 =�
MP_OBJ_SENTINEL
) {

842  
�t
;

844  
mp_cڡ_n�e
;

847  
MP_OBJ_NULL
;

849 
	}
}

851 
mp_obj_t
 
	$mp_obj_����_g�_��
(
mp_obj_t
 
�lf_�
, mp_obj_�*
memb�
) {

852 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

853 
�ass_lookup_d�a
 
lookup
 = {

854 .
obj
 = 
�lf
,

855 .
��
 = 
MP_QSTR___��__
,

856 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
��
),

857 .
de�
 = 
memb�
,

858 .
is_ty�
 = 
�l�
,

860 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

861  
memb�
[0];

862 
	}
}

864 
bo�
 
	$mp_obj_����_is_��ab�
(
mp_obj_t
 
�lf_�
) {

865 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
, MP_OBJ_NULL};

866  
	`mp_obj_����_g�_��
(
�lf_�
, 
memb�
�!�
MP_OBJ_NULL
;

867 
	}
}

869 
mp_obj_t
 
	$mp_obj_����_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

870 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
, MP_OBJ_NULL};

871 
mp_obj_t
 
��
 = 
	`mp_obj_����_g�_��
(
�lf_�
, 
memb�
);

872 i�(
��
 =�
MP_OBJ_NULL
) {

873 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


874 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object�ot callable"));

876 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

877 
	`MP_ERROR_TEXT
("'%s' obje� i�'���ab�"), 
	`mp_obj_g�_ty�_�r
(
�lf_�
));

880 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

881 i�(
��
 =�
MP_OBJ_SENTINEL
) {

882  
	`mp_��_fun�i�_n_kw
(
�lf
->
subobj
[0], 
n_�gs
, 
n_kw
, 
�gs
);

885  
	`mp_��_m�hod_�lf_n_kw
(
memb�
[0], memb�[1], 
n_�gs
, 
n_kw
, 
�gs
);

886 
	}
}

889 
mp_obj_t
 
	$mp_obj_����_g���
(
mp_obj_t
 
�lf_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

890 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

891 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
};

892 
�ass_lookup_d�a
 
lookup
 = {

893 .
obj
 = 
�lf
,

894 .
��
 = 
MP_QSTR___��__
,

895 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
��
),

896 .
de�
 = 
memb�
,

897 .
is_ty�
 = 
�l�
,

899 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

900 i�(
memb�
[0] =�
MP_OBJ_NULL
) {

901  
MP_OBJ_NULL
;

902 } i�(
memb�
[0] =�
MP_OBJ_SENTINEL
) {

903 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf
->
subobj
[0]);

904 i�(
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
) {

905  
�lf
->
subobj
[0];

907 i�(
��_buf
 =�
NULL
) {

908 
��_buf
 = 
	`m_�w_obj
(
mp_obj_��_buf_t
);

910  ((
mp_g���_fun_t
)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
))(
�lf
->
subobj
[0], 
��_buf
);

913  
	`mp_��_m�hod_n_kw
(0, 0, 
memb�
);

915 
	}
}

917 
mp_�t_t
 
	$����_g�_buf�r
(
mp_obj_t
 
�lf_�
, 
mp_buf�r_�fo_t
 *
buf�fo
, 
mp_u�t_t
 
�ags
) {

918 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

919 
mp_obj_t
 
memb�
[2] = {
MP_OBJ_NULL
};

920 
�ass_lookup_d�a
 
lookup
 = {

921 .
obj
 = 
�lf
,

922 .
��
 = 
MP_QSTR_
,

923 .
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
buf�r
),

924 .
de�
 = 
memb�
,

925 .
is_ty�
 = 
�l�
,

927 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
->
ba�
.
ty�
);

928 i�(
memb�
[0] =�
MP_OBJ_SENTINEL
) {

929 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf
->
subobj
[0]);

930  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
buf�r
)(
�lf
->
subobj
[0], 
buf�fo
, 
�ags
);

934 
	}
}

942 #i�
ENABLE_SPECIAL_ACCESSORS


943 
bo�
 
	$check_f�_�ec�l_ac�ss�s
(
mp_obj_t
 
key
, mp_obj_�
v�ue
) {

944 #i�
MICROPY_PY_DELATTR_SETATTR


945 i�(
key
 =�
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___���r__
�|| key =�MP_OBJ_NEW_QSTR(
MP_QSTR___d���__
)) {

946  
�ue
;

949 #i�
MICROPY_PY_BUILTINS_PROPERTY


950 i�(
	`mp_obj_is_ty�
(
v�ue
, &
mp_ty�_�ݔty
)) {

951  
�ue
;

954 #i�
MICROPY_PY_DESCRIPTORS


955 cڡ 
u�t8_t
 
to_check
[] = {

956 
MP_QSTR___g�__
, 
MP_QSTR___�t__
, 
MP_QSTR___d��e__
,

958 
size_t
 
i
 = 0; i < 
	`MP_ARRAY_SIZE
(
to_check
); ++i) {

959 
mp_obj_t
 
de�_�mp
[2];

960 
	`mp_l�d_m�hod_��e�ed
(
v�ue
, 
to_check
[
i
], 
de�_�mp
, 
�ue
);

961 i�(
de�_�mp
[0] !�
MP_OBJ_NULL
) {

962  
�ue
;

966  
�l�
;

967 
	}
}

970 
	$ty�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

971 ()
k�d
;

972 
mp_obj_ty�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

973 
	`mp_��tf
(
��t
, "<�as�'%q'>", 
�lf
->
�me
);

974 
	}
}

976 
mp_obj_t
 
	$ty�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

977 ()
ty�_�
;

979 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 3, 
�l�
);

981 
n_�gs
) {

983  
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
�gs
[0]));

989  
	`mp_obj_�w_ty�
(
	`mp_obj_�r_g�_q�r
(
�gs
[0]),�rgs[1],�rgs[2]);

992 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("type�akes 1 or 3�rguments"));

994 
	}
}

996 
mp_obj_t
 
	$ty�_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

999 
mp_obj_ty�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

1001 i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
�lf
, 
make_�w
)) {

1002 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1003 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't create instance"));

1005 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
, 
	`MP_ERROR_TEXT
("�n'���� '%q' in���s"), 
�lf
->
�me
);

1010 
mp_obj_t
 
o
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
make_�w
)(�lf, 
n_�gs
, 
n_kw
, 
�gs
);

1013  
o
;

1014 
	}
}

1016 
	$ty�_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

1017 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_ty�
));

1018 
mp_obj_ty�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

1020 i�(
de�
[0] =�
MP_OBJ_NULL
) {

1022 #i�
MICROPY_CPYTHON_COMPAT


1023 i�(
��
 =�
MP_QSTR___�me__
) {

1024 
de�
[0] = 
	`MP_OBJ_NEW_QSTR
(
�lf
->
�me
);

1027 #i�
MICROPY_CPYTHON_COMPAT


1028 i�(
��
 =�
MP_QSTR___di�__
) {

1031 cڡ 
mp_obj_di�_t
 *
di�
 = 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(
�lf
, 
lo�ls_di�
);

1032 i�(!
di�
) {

1033 
di�
 = &
mp_cڡ_em�y_di�_obj
;

1035 i�(
di�
->
m�
.
is_fixed
) {

1036 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
di�
);

1038 
de�
[0] = 
	`mp_obj_di�_c�y
(
	`MP_OBJ_FROM_PTR
(
di�
));

1039 
mp_obj_di�_t
 *
di�_c�y
 = 
	`MP_OBJ_TO_PTR
(
de�
[0]);

1040 
di�_c�y
->
m�
.
is_fixed
 = 1;

1045 i�(
��
 =�
MP_QSTR___ba�s__
) {

1046 i�(
�lf
 =�&
mp_ty�_obje�
) {

1047 
de�
[0] = 
mp_cڡ_em�y_tu�e
;

1050 
mp_obj_t
 
���_obj
 = 
	`MP_OBJ_TYPE_HAS_SLOT
(
�lf
, 
���
�? 
	`MP_OBJ_FROM_PTR
(
	`MP_OBJ_TYPE_GET_SLOT
(�lf,���t)�: MP_OBJ_FROM_PTR(&
mp_ty�_obje�
);

1051 #i�
MICROPY_MULTIPLE_INHERITANCE


1052 i�(
	`mp_obj_is_ty�
(
���_obj
, &
mp_ty�_tu�e
)) {

1053 
de�
[0] = 
���_obj
;

1057 
de�
[0] = 
	`mp_obj_�w_tu�e
(1, &
���_obj
);

1061 
�ass_lookup_d�a
 
lookup
 = {

1062 .
obj
 = (
mp_obj_����_t
 *)
�lf
,

1063 .
��
 =�ttr,

1064 .
��_off�t
 = 0,

1065 .
de�
 = dest,

1066 .
is_ty�
 = 
�ue
,

1068 
	`mp_obj_�ass_lookup
(&
lookup
, 
�lf
);

1072 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
�lf
, 
lo�ls_di�
)) {

1073 
	`as��
(
	`mp_obj_is_di�_�_�d�eddi�
(
	`MP_OBJ_FROM_PTR
(
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
lo�ls_di�
))));

1074 
mp_m�_t
 *
lo�ls_m�
 = &
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
lo�ls_di�
)->
m�
;

1075 i�(
lo�ls_m�
->
is_fixed
) {

1079 i�(
de�
[1] =�
MP_OBJ_NULL
) {

1081 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
lo�ls_m�
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP_REMOVE_IF_FOUND
);

1082 i�(
�em
 !�
NULL
) {

1083 
de�
[0] = 
MP_OBJ_NULL
;

1086 #i�
ENABLE_SPECIAL_ACCESSORS


1088 i�(!(
�lf
->
�ags
 & 
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
)) {

1089 i�(
	`check_f�_�ec�l_ac�ss�s
(
	`MP_OBJ_NEW_QSTR
(
��
), 
de�
[1])) {

1090 i�(
�lf
->
�ags
 & 
MP_TYPE_FLAG_IS_SUBCLASSED
) {

1092 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("can't�dd special method�o�lready-subclassed class"));

1094 
�lf
->
�ags
 |�
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
;

1100 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
lo�ls_m�
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

1101 
�em
->
v�ue
 = 
de�
[1];

1102 
de�
[0] = 
MP_OBJ_NULL
;

1106 
	}
}

1108 
MP_DEFINE_CONST_OBJ_TYPE
(

1109 
mp_ty�_ty�
,

1110 
MP_QSTR_ty�
,

1111 
MP_TYPE_FLAG_NONE
,

1112 
make_�w
, 
ty�_make_�w
,

1113 
��t
, 
ty�_��t
,

1114 
��
, 
ty�_��
,

1115 
��
, 
ty�_��


1118 
mp_obj_t
 
	$mp_obj_�w_ty�
(
q�r
 
�me
, 
mp_obj_t
 
ba�s_tu�e
, mp_obj_�
lo�ls_di�
) {

1120 i�(!
	`mp_obj_is_ty�
(
ba�s_tu�e
, &
mp_ty�_tu�e
)) {

1121 
	`mp_�i�_Ty�E��
(
NULL
);

1123 i�(!
	`mp_obj_is_di�_�_�d�eddi�
(
lo�ls_di�
)) {

1124 
	`mp_�i�_Ty�E��
(
NULL
);

1130 
u�t16_t
 
ba�_�ags
 = 
MP_TYPE_FLAG_EQ_NOT_REFLEXIVE


1131 | 
MP_TYPE_FLAG_EQ_CHECKS_OTHER_TYPE


1132 | 
MP_TYPE_FLAG_EQ_HAS_NEQ_TEST


1133 | 
MP_TYPE_FLAG_ITER_IS_GETITER


1134 | 
MP_TYPE_FLAG_INSTANCE_TYPE
;

1135 
size_t
 
ba�s_�n
;

1136 
mp_obj_t
 *
ba�s_�ems
;

1137 
	`mp_obj_tu�e_g�
(
ba�s_tu�e
, &
ba�s_�n
, &
ba�s_�ems
);

1138 
size_t
 
i
 = 0; i < 
ba�s_�n
; i++) {

1139 i�(!
	`mp_obj_is_ty�
(
ba�s_�ems
[
i
], &
mp_ty�_ty�
)) {

1140 
	`mp_�i�_Ty�E��
(
NULL
);

1142 
mp_obj_ty�_t
 *
t
 = 
	`MP_OBJ_TO_PTR
(
ba�s_�ems
[
i
]);

1144 i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
t
, 
make_�w
)) {

1145 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1146 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("type isn't�n�cceptable base�ype"));

1148 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1149 
	`MP_ERROR_TEXT
("ty� '%q' i�'���c��ab� ba��y�"), 
t
->
�me
);

1152 #i�
ENABLE_SPECIAL_ACCESSORS


1153 i�(
	`mp_obj_is_����_ty�
(
t
)) {

1154 
t
->
�ags
 |�
MP_TYPE_FLAG_IS_SUBCLASSED
;

1155 
ba�_�ags
 |�
t
->
�ags
 & 
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
;

1160 cڡ *
ba�_��oc�
 = 
NULL
;

1161 i�(
ba�s_�n
 > 0) {

1162 
ba�_��oc�
 = 
	`MP_OBJ_TYPE_GET_SLOT_OR_NULL
(((
mp_obj_ty�_t
 *)
	`MP_OBJ_TO_PTR
(
ba�s_�ems
[0])), 
��oc�
);

1169 
mp_obj_ty�_t
 *
o
 = 
	`m_�w_obj_v�0
(mp_obj_ty�_t, 
��s
, *, 10 + (
ba�s_�n
 ? 1 : 0�+ (
ba�_��oc�
 ? 1 : 0));

1170 
o
->
ba�
.
ty�
 = &
mp_ty�_ty�
;

1171 
o
->
�ags
 = 
ba�_�ags
;

1172 
o
->
�me
 =�ame;

1173 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
make_�w
, 
mp_obj_����_make_�w
, 0);

1174 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
��t
, 
����_��t
, 1);

1175 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
��
, 
mp_obj_����_��
, 2);

1176 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
u�ry_�
, 
����_u�ry_�
, 3);

1177 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
b��y_�
, 
����_b��y_�
, 4);

1178 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
��
, 
mp_obj_����_��
, 5);

1179 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
subs�
, 
����_subs�
, 6);

1180 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
��
, 
mp_obj_����_g���
, 7);

1181 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
buf�r
, 
����_g�_buf�r
, 8);

1183 
mp_obj_di�_t
 *
lo�ls_�r
 = 
	`MP_OBJ_TO_PTR
(
lo�ls_di�
);

1184 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
lo�ls_di�
, 
lo�ls_�r
, 9);

1186 i�(
ba�s_�n
 > 0) {

1187 i�(
ba�s_�n
 >= 2) {

1188 #i�
MICROPY_MULTIPLE_INHERITANCE


1189 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
���
, 
	`MP_OBJ_TO_PTR
(
ba�s_tu�e
), 10);

1191 
	`mp_�i�_N�Im�em��dE��
(
	`MP_ERROR_TEXT
("multiple inheritance�ot supported"));

1194 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
���
, 
	`MP_OBJ_TO_PTR
(
ba�s_�ems
[0]), 10);

1201 i�(
ba�_��oc�
) {

1202 
	`MP_OBJ_TYPE_SET_SLOT
(
o
, 
��oc�
, 
ba�_��oc�
, 11);

1206 #i�
ENABLE_SPECIAL_ACCESSORS


1208 i�(!(
o
->
�ags
 & 
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
)) {

1209 
size_t
 
i
 = 0; i < 
lo�ls_�r
->
m�
.
�loc
; i++) {

1210 i�(
	`mp_m�_��_is_f��d
(&
lo�ls_�r
->
m�
, 
i
)) {

1211 cڡ 
mp_m�_�em_t
 *
�em
 = &
lo�ls_�r
->
m�
.
�b�
[
i
];

1212 i�(
	`check_f�_�ec�l_ac�ss�s
(
�em
->
key
,��m->
v�ue
)) {

1213 
o
->
�ags
 |�
MP_TYPE_FLAG_HAS_SPECIAL_ACCESSORS
;

1221 cڡ 
mp_obj_ty�_t
 *
�tive_ba�
;

1222 
size_t
 
num_�tive_ba�s
 = 
	`����_cou�_�tive_ba�s
(
o
, &
�tive_ba�
);

1223 i�(
num_�tive_ba�s
 > 1) {

1224 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("multiple bases have instance�ay-out conflict"));

1227 
mp_m�_t
 *
lo�ls_m�
 = &
	`MP_OBJ_TYPE_GET_SLOT
(
o
, 
lo�ls_di�
)->
m�
;

1228 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
lo�ls_m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�w__
), 
MP_MAP_LOOKUP
);

1229 i�(
�em
 !�
NULL
) {

1231 i�(
	`mp_obj_is_fun
(
�em
->
v�ue
)) {

1233 
�em
->
v�ue
 = 
	`��ic_�ass_m�hod_make_�w
(&
mp_ty�_��icm�hod
, 1, 0, &elem->value);

1237  
	`MP_OBJ_FROM_PTR
(
o
);

1238 
	}
}

1243 
	s_mp_obj_su�r_t
 {

1244 
mp_obj_ba�_t
 
	mba�
;

1245 
mp_obj_t
 
	mty�
;

1246 
mp_obj_t
 
	mobj
;

1247 } 
	tmp_obj_su�r_t
;

1249 
	$su�r_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

1250 ()
k�d
;

1251 
mp_obj_su�r_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

1252 
	`mp_��t_�r
(
��t
, "<super: ");

1253 
	`mp_obj_��t_h��r
(
��t
, 
�lf
->
ty�
, 
PRINT_STR
);

1254 
	`mp_��t_�r
(
��t
, ", ");

1255 
	`mp_obj_��t_h��r
(
��t
, 
�lf
->
obj
, 
PRINT_STR
);

1256 
	`mp_��t_�r
(
��t
, ">");

1257 
	}
}

1259 
mp_obj_t
 
	$su�r_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

1260 ()
ty�_�
;

1263 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 2, 2, 
�l�
);

1267 cڡ 
mp_obj_ty�_t
 *
�c�d_�g_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[1]);

1268 
mp_obj_t
 
�c�d_�g_obj
 = 
�c�d_�g_ty�
 =�&
mp_ty�_ty�
 ? 
�gs
[1] : 
	`MP_OBJ_FROM_PTR
(second_arg_type);

1269 i�(
	`mp_obj_is_sub�ass
(
�c�d_�g_obj
, 
�gs
[0]�=�
mp_cڡ_�l�
) {

1270 
	`mp_�i�_Ty�E��
(
NULL
);

1273 
mp_obj_su�r_t
 *
o
 = 
	`m_�w_obj
(mp_obj_super_t);

1274 *
o
 = (
mp_obj_su�r_t
�{{
ty�_�
}, 
�gs
[0],�rgs[1]};

1275  
	`MP_OBJ_FROM_PTR
(
o
);

1276 
	}
}

1278 
	$su�r_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

1279 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1284 
	`as��
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_su�r
));

1285 
mp_obj_su�r_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

1287 
	`as��
(
	`mp_obj_is_ty�
(
�lf
->
ty�
, &
mp_ty�_ty�
));

1289 
mp_obj_ty�_t
 *
ty�
 = 
	`MP_OBJ_TO_PTR
(
�lf
->type);

1291 
�ass_lookup_d�a
 
lookup
 = {

1292 .
obj
 = 
	`MP_OBJ_TO_PTR
(
�lf
->obj),

1293 .
��
 =�ttr,

1294 .
��_off�t
 = 0,

1295 .
de�
 = dest,

1296 .
is_ty�
 = 
�l�
,

1300 i�(
��
 =�
MP_QSTR___��__
) {

1301 
lookup
.
��_off�t
 = 
	`MP_OBJ_TYPE_OFFSETOF_SLOT
(
make_�w
);

1304 i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
���
)) {

1306 #i�
MICROPY_MULTIPLE_INHERITANCE


1307 } i�(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
))->ty� =�&
mp_ty�_tu�e
) {

1308 cڡ 
mp_obj_tu�e_t
 *
���_tu�e
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
);

1309 
size_t
 
�n
 = 
���_tu�e
->len;

1310 cڡ 
mp_obj_t
 *
�ems
 = 
���_tu�e
->items;

1311 
size_t
 
i
 = 0; i < 
�n
; i++) {

1312 
	`as��
(
	`mp_obj_is_ty�
(
�ems
[
i
], &
mp_ty�_ty�
));

1313 i�(
	`MP_OBJ_TO_PTR
(
�ems
[
i
]�=�&
mp_ty�_obje�
) {

1319 
	`mp_obj_�ass_lookup
(&
lookup
, (
mp_obj_ty�_t
 *)
	`MP_OBJ_TO_PTR
(
�ems
[
i
]));

1320 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1325 } i�(
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
�!�&
mp_ty�_obje�
) {

1326 
	`mp_obj_�ass_lookup
(&
lookup
, 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
���
));

1329 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1330 i�(
de�
[0] =�
MP_OBJ_SENTINEL
) {

1332 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(&
�tive_ba�_��_w���_obj
);

1333 
de�
[1] = 
�lf
->
obj
;

1340 
lookup
.
��_off�t
 = 0;

1342 
	`mp_obj_�ass_lookup
(&
lookup
, &
mp_ty�_obje�
);

1343 
	}
}

1345 
MP_DEFINE_CONST_OBJ_TYPE
(

1346 
mp_ty�_su�r
,

1347 
MP_QSTR_su�r
,

1348 
MP_TYPE_FLAG_NONE
,

1349 
make_�w
, 
su�r_make_�w
,

1350 
��t
, 
su�r_��t
,

1351 
��
, 
su�r_��


1354 
	$mp_l�d_su�r_m�hod
(
q�r
 
��
, 
mp_obj_t
 *
de�
) {

1355 
mp_obj_su�r_t
 
su�r
 = {{&
mp_ty�_su�r
}, 
de�
[1], dest[2]};

1356 
	`mp_l�d_m�hod
(
	`MP_OBJ_FROM_PTR
(&
su�r
), 
��
, 
de�
);

1357 
	}
}

1364 
bo�
 
	$mp_obj_is_sub�ass_�
(
mp_cڡ_obj_t
 
obje�
, mp_cڡ_obj_�
�ass�fo
) {

1366 i�(
obje�
 =�
�ass�fo
) {

1367  
�ue
;

1373 i�(!
	`mp_obj_is_ty�
(
obje�
, &
mp_ty�_ty�
)) {

1374  
�l�
;

1377 cڡ 
mp_obj_ty�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
obje�
);

1379 i�(!
	`MP_OBJ_TYPE_HAS_SLOT
(
�lf
, 
���
)) {

1381  
�l�
;

1382 #i�
MICROPY_MULTIPLE_INHERITANCE


1383 } i�(((
mp_obj_ba�_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
���
))->
ty�
 =�&
mp_ty�_tu�e
) {

1385 cڡ 
mp_obj_tu�e_t
 *
���_tu�e
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
���
);

1386 cڡ 
mp_obj_t
 *
�em
 = 
���_tu�e
->
�ems
;

1387 cڡ 
mp_obj_t
 *
t�
 = 
�em
 + 
���_tu�e
->
�n
 - 1;

1390 ; 
�em
 < 
t�
; ++item) {

1391 i�(
	`mp_obj_is_sub�ass_�
(*
�em
, 
�ass�fo
)) {

1392  
�ue
;

1397 
obje�
 = *
�em
;

1401 
obje�
 = 
	`MP_OBJ_FROM_PTR
(
	`MP_OBJ_TYPE_GET_SLOT
(
�lf
, 
���
));

1404 
	}
}

1406 
mp_obj_t
 
	$mp_obj_is_sub�ass
(
mp_obj_t
 
obje�
, mp_obj_�
�ass�fo
) {

1407 
size_t
 
�n
;

1408 
mp_obj_t
 *
�ems
;

1409 i�(
	`mp_obj_is_ty�
(
�ass�fo
, &
mp_ty�_ty�
)) {

1410 
�n
 = 1;

1411 
�ems
 = &
�ass�fo
;

1412 } i�(
	`mp_obj_is_ty�
(
�ass�fo
, &
mp_ty�_tu�e
)) {

1413 
	`mp_obj_tu�e_g�
(
�ass�fo
, &
�n
, &
�ems
);

1415 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("issubclass()�rg 2 must be� class or��uple of classes"));

1418 
size_t
 
i
 = 0; i < 
�n
; i++) {

1420 i�(
�ems
[
i
] =�
	`MP_OBJ_FROM_PTR
(&
mp_ty�_obje�
�|| 
	`mp_obj_is_sub�ass_�
(
obje�
, items[i])) {

1421  
mp_cڡ_�ue
;

1424  
mp_cڡ_�l�
;

1425 
	}
}

1427 
mp_obj_t
 
	$mp_bu�t�_issub�ass
(
mp_obj_t
 
obje�
, mp_obj_�
�ass�fo
) {

1428 i�(!
	`mp_obj_is_ty�
(
obje�
, &
mp_ty�_ty�
)) {

1429 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("issubclass()�rg 1 must be� class"));

1431  
	`mp_obj_is_sub�ass
(
obje�
, 
�ass�fo
);

1432 
	}
}

1434 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_bu�t�_issub�ass_obj
, 
mp_bu�t�_issub�ass
);

1436 
mp_obj_t
 
	$mp_bu�t�_is����
(
mp_obj_t
 
obje�
, mp_obj_�
�ass�fo
) {

1437  
	`mp_obj_is_sub�ass
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
obje�
)), 
�ass�fo
);

1438 
	}
}

1440 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_bu�t�_is����_obj
, 
mp_bu�t�_is����
);

1442 
mp_obj_t
 
	$mp_obj_��_to_�tive_ba�
(
mp_obj_t
 
�lf_�
, 
mp_cڡ_obj_t
 
�tive_ty�
) {

1443 cڡ 
mp_obj_ty�_t
 *
�lf_ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

1445 i�(
	`MP_OBJ_FROM_PTR
(
�lf_ty�
�=�
�tive_ty�
) {

1446  
�lf_�
;

1447 } i�(!
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
�lf_ty�
), 
�tive_ty�
)) {

1448  
MP_OBJ_NULL
;

1450 
mp_obj_����_t
 *
�lf
 = (mp_obj_����_�*)
	`MP_OBJ_TO_PTR
(
�lf_�
);

1451  
�lf
->
subobj
[0];

1453 
	}
}

1458 
mp_obj_t
 
	$��ic_�ass_m�hod_make_�w
(cڡ 
mp_obj_ty�_t
 *
�lf
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

1459 
	`as��
(
�lf
 =�&
mp_ty�_��icm�hod
 || s��=�&
mp_ty�_�assm�hod
);

1461 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 1, 1, 
�l�
);

1463 
mp_obj_��ic_�ass_m�hod_t
 *
o
 = 
	`m_�w_obj
(mp_obj_static_class_method_t);

1464 *
o
 = (
mp_obj_��ic_�ass_m�hod_t
�{{
�lf
}, 
�gs
[0]};

1465  
	`MP_OBJ_FROM_PTR
(
o
);

1466 
	}
}

1468 
MP_DEFINE_CONST_OBJ_TYPE
(

1469 
mp_ty�_��icm�hod
,

1470 
MP_QSTR_��icm�hod
,

1471 
MP_TYPE_FLAG_NONE
,

1472 
make_�w
, 
��ic_�ass_m�hod_make_�w


1475 
MP_DEFINE_CONST_OBJ_TYPE
(

1476 
mp_ty�_�assm�hod
,

1477 
MP_QSTR_�assm�hod
,

1478 
MP_TYPE_FLAG_NONE
,

1479 
make_�w
, 
��ic_�ass_m�hod_make_�w


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtype.h

26 #i�de�
MICROPY_INCLUDED_PY_OBJTYPE_H


27 
	#MICROPY_INCLUDED_PY_OBJTYPE_H


	)

29 
	~"py/obj.h
"

33 
	s_mp_obj_����_t
 {

34 
mp_obj_ba�_t
 
	mba�
;

35 
mp_m�_t
 
	mmemb�s
;

36 
mp_obj_t
 
	msubobj
[];

38 } 
	tmp_obj_����_t
;

40 #i�
MICROPY_CPYTHON_COMPAT


42 
mp_obj_����_t
 *
mp_obj_�w_����
(cڡ 
mp_obj_ty�_t
 *
�s
, cڡ mp_obj_ty�_�**
�tive_ba�
);

46 
bo�
 
mp_obj_����_is_��ab�
(
mp_obj_t
 
�lf_�
);

47 
mp_obj_t
 
mp_obj_����_��
(mp_obj_�
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

49 
	#mp_obj_is_����_ty�
(
ty�
�(�y�)->
�ags
 & 
MP_TYPE_FLAG_INSTANCE_TYPE
)

	)

50 
	#mp_obj_is_�tive_ty�
(
ty�
�(!(�y�)->
�ags
 & 
MP_TYPE_FLAG_INSTANCE_TYPE
))

	)

53 
mp_obj_t
 
mp_obj_����_g���
(mp_obj_�
�lf_�
, 
mp_obj_��_buf_t
 *
��_buf
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objzip.c

27 
	~<�dlib.h
>

28 
	~<as��.h
>

30 
	~"py/objtu�e.h
"

31 
	~"py/ru�ime.h
"

33 
	s_mp_obj_z�_t
 {

34 
mp_obj_ba�_t
 
	mba�
;

35 
size_t
 
	mn_��s
;

36 
mp_obj_t
 
	m��s
[];

37 } 
	tmp_obj_z�_t
;

39 
mp_obj_t
 
	$z�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

40 
	`mp_�g_check_num
(
n_�gs
, 
n_kw
, 0, 
MP_OBJ_FUN_ARGS_MAX
, 
�l�
);

42 
mp_obj_z�_t
 *
o
 = 
	`mp_obj_m�loc_v�
(mp_obj_z�_t, 
��s
, 
mp_obj_t
, 
n_�gs
, 
ty�
);

43 
o
->
n_��s
 = 
n_�gs
;

44 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

45 
o
->
��s
[
i
] = 
	`mp_g���
(
�gs
[i], 
NULL
);

47  
	`MP_OBJ_FROM_PTR
(
o
);

48 
	}
}

50 
mp_obj_t
 
	$z�_���xt
(
mp_obj_t
 
�lf_�
) {

51 
	`mp_check_�lf
(
	`mp_obj_is_ty�
(
�lf_�
, &
mp_ty�_z�
));

52 
mp_obj_z�_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

53 i�(
�lf
->
n_��s
 == 0) {

54  
MP_OBJ_STOP_ITERATION
;

56 
mp_obj_tu�e_t
 *
tu�e
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
�lf
->
n_��s
, 
NULL
));

58 
size_t
 
i
 = 0; i < 
�lf
->
n_��s
; i++) {

59 
mp_obj_t
 
�xt
 = 
	`mp_���xt
(
�lf
->
��s
[
i
]);

60 i�(
�xt
 =�
MP_OBJ_STOP_ITERATION
) {

61 
	`mp_obj_tu�e_d�
(
	`MP_OBJ_FROM_PTR
(
tu�e
));

62  
MP_OBJ_STOP_ITERATION
;

64 
tu�e
->
�ems
[
i
] = 
�xt
;

66  
	`MP_OBJ_FROM_PTR
(
tu�e
);

67 
	}
}

69 
MP_DEFINE_CONST_OBJ_TYPE
(

70 
mp_ty�_z�
,

71 
MP_QSTR_z�
,

72 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
,

73 
make_�w
, 
z�_make_�w
,

74 
��
, 
z�_���xt


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\opmethods.c

27 
	~"py/obj.h
"

28 
	~"py/bu�t�.h
"

30 
mp_obj_t
 
	$�_g��em
(
mp_obj_t
 
�lf_�
, mp_obj_�
key_�
) {

31 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

33  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
subs�
)(
�lf_�
, 
key_�
, 
MP_OBJ_SENTINEL
);

34 
	}
}

35 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_�_g��em_obj
, 
�_g��em
);

37 
mp_obj_t
 
	$�_�t�em
(
mp_obj_t
 
�lf_�
, mp_obj_�
key_�
, mp_obj_�
v�ue_�
) {

38 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

40  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
subs�
)(
�lf_�
, 
key_�
, 
v�ue_�
);

41 
	}
}

42 
MP_DEFINE_CONST_FUN_OBJ_3
(
mp_�_�t�em_obj
, 
�_�t�em
);

44 
mp_obj_t
 
	$�_d��em
(
mp_obj_t
 
�lf_�
, mp_obj_�
key_�
) {

45 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

47  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
subs�
)(
�lf_�
, 
key_�
, 
MP_OBJ_NULL
);

48 
	}
}

49 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_�_d��em_obj
, 
�_d��em
);

51 
mp_obj_t
 
	$�_cڏ�s
(
mp_obj_t
 
lhs_�
, mp_obj_�
rhs_�
) {

52 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
lhs_�
);

54  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
b��y_�
)(
MP_BINARY_OP_CONTAINS
, 
lhs_�
, 
rhs_�
);

55 
	}
}

56 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_�_cڏ�s_obj
, 
�_cڏ�s
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pairheap.c

27 
	~"py/��h�p.h
"

34 
	#NEXT_MAKE_RIGHTMOST_PARENT
(
���
�((*)((
u���_t
)լ�t�| 1))

	)

35 
	#NEXT_IS_RIGHTMOST_PARENT
(
�xt
�((
u���_t
)�ext�& 1)

	)

36 
	#NEXT_GET_RIGHTMOST_PARENT
(
�xt
�((*)((
u���_t
)�ext�& ~1))

	)

39 
mp_��h�p_t
 *
	$mp_��h�p_m�d
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p1
, mp_��h�p_�*
h�p2
) {

40 i�(
h�p1
 =�
NULL
) {

41  
h�p2
;

43 i�(
h�p2
 =�
NULL
) {

44  
h�p1
;

46 i�(
	`�
(
h�p1
, 
h�p2
)) {

47 i�(
h�p1
->
ch�d
 =�
NULL
) {

48 
h�p1
->
ch�d
 = 
h�p2
;

50 
h�p1
->
ch�d_ϡ
->
�xt
 = 
h�p2
;

52 
h�p1
->
ch�d_ϡ
 = 
h�p2
;

53 
h�p2
->
�xt
 = 
	`NEXT_MAKE_RIGHTMOST_PARENT
(
h�p1
);

54  
h�p1
;

56 
h�p1
->
�xt
 = 
h�p2
->
ch�d
;

57 
h�p2
->
ch�d
 = 
h�p1
;

58 i�(
h�p1
->
�xt
 =�
NULL
) {

59 
h�p2
->
ch�d_ϡ
 = 
h�p1
;

60 
h�p1
->
�xt
 = 
	`NEXT_MAKE_RIGHTMOST_PARENT
(
h�p2
);

62  
h�p2
;

64 
	}
}

67 
mp_��h�p_t
 *
	$mp_��h�p_���g
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
ch�d
) {

68 i�(
ch�d
 =�
NULL
) {

69  
NULL
;

71 
mp_��h�p_t
 *
h�p
 = 
NULL
;

72 !
	`NEXT_IS_RIGHTMOST_PARENT
(
ch�d
)) {

73 
mp_��h�p_t
 *
n1
 = 
ch�d
;

74 
ch�d
 = ch�d->
�xt
;

75 
n1
->
�xt
 = 
NULL
;

76 i�(!
	`NEXT_IS_RIGHTMOST_PARENT
(
ch�d
)) {

77 
mp_��h�p_t
 *
n2
 = 
ch�d
;

78 
ch�d
 = ch�d->
�xt
;

79 
n2
->
�xt
 = 
NULL
;

80 
n1
 = 
	`mp_��h�p_m�d
(
�
,�1, 
n2
);

82 
h�p
 = 
	`mp_��h�p_m�d
(
�
, h�p, 
n1
);

84 
h�p
->
�xt
 = 
NULL
;

85  
h�p
;

86 
	}
}

89 
mp_��h�p_t
 *
	$mp_��h�p_d��e
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p
, mp_��h�p_�*
node
) {

91 i�(
node
 =�
h�p
) {

92 
mp_��h�p_t
 *
ch�d
 = 
h�p
->child;

93 
node
->
ch�d
 = 
NULL
;

94  
	`mp_��h�p_���g
(
�
, 
ch�d
);

98 i�(
node
->
�xt
 =�
NULL
) {

99  
h�p
;

103 
mp_��h�p_t
 *
���
 = 
node
;

104 !
	`NEXT_IS_RIGHTMOST_PARENT
(
���
->
�xt
)) {

105 
���
 =���t->
�xt
;

107 
���
 = 
	`NEXT_GET_RIGHTMOST_PARENT
լ�t->
�xt
);

110 
mp_��h�p_t
 *
�xt
;

111 i�(
node
 =�
���
->
ch�d
 &&�ode->ch�d =�
NULL
) {

112 i�(
	`NEXT_IS_RIGHTMOST_PARENT
(
node
->
�xt
)) {

113 
���
->
ch�d
 = 
NULL
;

115 
���
->
ch�d
 = 
node
->
�xt
;

117 
node
->
�xt
 = 
NULL
;

118  
h�p
;

119 } i�(
node
 =�
���
->
ch�d
) {

120 
mp_��h�p_t
 *
ch�d
 = 
node
->child;

121 
�xt
 = 
node
->next;

122 
node
->
ch�d
 = 
NULL
;

123 
node
->
�xt
 = 
NULL
;

124 
node
 = 
	`mp_��h�p_���g
(
�
, 
ch�d
);

125 
���
->
ch�d
 = 
node
;

127 
mp_��h�p_t
 *
n
 = 
���
->
ch�d
;

128 
node
 !�
n
->
�xt
) {

129 
n
 =�->
�xt
;

131 
mp_��h�p_t
 *
ch�d
 = 
node
->child;

132 
�xt
 = 
node
->next;

133 
node
->
ch�d
 = 
NULL
;

134 
node
->
�xt
 = 
NULL
;

135 
node
 = 
	`mp_��h�p_���g
(
�
, 
ch�d
);

136 i�(
node
 =�
NULL
) {

137 
node
 = 
n
;

139 
n
->
�xt
 = 
node
;

142 
node
->
�xt
 =�ext;

143 i�(
	`NEXT_IS_RIGHTMOST_PARENT
(
�xt
)) {

144 
���
->
ch�d_ϡ
 = 
node
;

146  
h�p
;

147 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pairheap.h

26 #i�de�
MICROPY_INCLUDED_PY_PAIRHEAP_H


27 
	#MICROPY_INCLUDED_PY_PAIRHEAP_H


	)

38 
	~<as��.h
>

39 
	~"py/obj.h
"

46 
	s_mp_��h�p_t
 {

47 
mp_obj_ba�_t
 
	mba�
;

48 
_mp_��h�p_t
 *
	mch�d
;

49 
_mp_��h�p_t
 *
	mch�d_ϡ
;

50 
_mp_��h�p_t
 *
	m�xt
;

51 } 
	tmp_��h�p_t
;

54 (*
	tmp_��h�p_�_t
)(
	tmp_��h�p_t
 *, mp_pairheap_t *);

57 
mp_��h�p_t
 *
	`mp_��h�p_m�d
(
mp_��h�p_�_t
 
�
, mp_��h�p_�*
h�p1
, mp_��h�p_�*
h�p2
);

58 
mp_��h�p_t
 *
	`mp_��h�p_���g
(
mp_��h�p_�_t
 
�
, mp_��h�p_�*
ch�d
);

59 
mp_��h�p_t
 *
	`mp_��h�p_d��e
(
mp_��h�p_�_t
 
�
, mp_��h�p_�*
h�p
, mp_��h�p_�*
node
);

62 
�l�e
 
mp_��h�p_t
 *
	$mp_��h�p_�w
(
mp_��h�p_�_t
 
�
) {

63 ()
�
;

64  
NULL
;

65 
	}
}

68 
�l�e
 
	$mp_��h�p_��_node
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
node
) {

69 ()
�
;

70 
node
->
ch�d
 = 
NULL
;

71 
node
->
�xt
 = 
NULL
;

72 
	}
}

75 
�l�e
 
bo�
 
	$mp_��h�p_is_em�y
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p
) {

76 ()
�
;

77  
h�p
 =�
NULL
;

78 
	}
}

81 
�l�e
 
mp_��h�p_t
 *
	$mp_��h�p_�ek
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p
) {

82 ()
�
;

83  
h�p
;

84 
	}
}

87 
�l�e
 
mp_��h�p_t
 *
	$mp_��h�p_push
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p
, mp_��h�p_�*
node
) {

88 
	`as��
(
node
->
ch�d
 =�
NULL
 &&�ode->
�xt
 == NULL);

89  
	`mp_��h�p_m�d
(
�
, 
node
, 
h�p
);

90 
	}
}

93 
�l�e
 
mp_��h�p_t
 *
	$mp_��h�p_p�
(
mp_��h�p_�_t
 
�
, 
mp_��h�p_t
 *
h�p
) {

94 
	`as��
(
h�p
->
�xt
 =�
NULL
);

95 
mp_��h�p_t
 *
ch�d
 = 
h�p
->child;

96 
h�p
->
ch�d
 = 
NULL
;

97  
	`mp_��h�p_���g
(
�
, 
ch�d
);

98 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parse.c

27 
	~<�dbo�.h
>

28 
	~<�d�t.h
>

29 
	~<�dio.h
>

30 
	~<uni�d.h
>

31 
	~<as��.h
>

32 
	~<�r�g.h
>

34 
	~"py/�x�.h
"

35 
	~"py/�r�.h
"

36 
	~"py/�r�num.h
"

37 
	~"py/ru�ime.h
"

38 
	~"py/obj�t.h
"

39 
	~"py/obj�r.h
"

40 
	~"py/bu�t�.h
"

42 #i�
MICROPY_ENABLE_COMPILER


44 
	#RULE_ACT_ARG_MASK
 (0x0f)

	)

45 
	#RULE_ACT_KIND_MASK
 (0x30)

	)

46 
	#RULE_ACT_ALLOW_IDENT
 (0x40)

	)

47 
	#RULE_ACT_ADD_BLANK
 (0x80)

	)

48 
	#RULE_ACT_OR
 (0x10)

	)

49 
	#RULE_ACT_AND
 (0x20)

	)

50 
	#RULE_ACT_LIST
 (0x30)

	)

52 
	#RULE_ARG_KIND_MASK
 (0xf000)

	)

53 
	#RULE_ARG_ARG_MASK
 (0x0fff)

	)

54 
	#RULE_ARG_TOK
 (0x1000)

	)

55 
	#RULE_ARG_RULE
 (0x2000)

	)

56 
	#RULE_ARG_OPT_RULE
 (0x3000)

	)

62 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
RULE_
##ru�,

	)

63 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

64 
	~"py/g�mm�.h
"

65 #unde�
DEF_RULE


66 #unde�
DEF_RULE_NC


67 
	mRULE_cڡ_obje�
,

70 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

71 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
RULE_
##ru�,

	)

72 
	~"py/g�mm�.h
"

73 #unde�
DEF_RULE


74 #unde�
DEF_RULE_NC


78 cڡ 
u�t8_t
 
	gru�_a�_�b�
[] = {

79 
	#�
(
n
�(
RULE_ACT_OR
 |�)

	)

80 
	#�d
(
n
�(
RULE_ACT_AND
 |�)

	)

81 
	#�d_id�t
(
n
�(
RULE_ACT_AND
 |� | 
RULE_ACT_ALLOW_IDENT
)

	)

82 
	#�d_b�nk
(
n
�(
RULE_ACT_AND
 |� | 
RULE_ACT_ADD_BLANK
)

	)

83 
	#�e_�_m�e
 (
RULE_ACT_LIST
 | 2)

	)

84 
	#li�
 (
RULE_ACT_LIST
 | 1)

	)

85 
	#li�_w�h_�d
 (
RULE_ACT_LIST
 | 3)

	)

87 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�k�d,

	)

88 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

89 
	~"py/g�mm�.h
"

90 #unde�
DEF_RULE


91 #unde�
DEF_RULE_NC


95 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

96 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�k�d,

	)

97 
	~"py/g�mm�.h
"

98 #unde�
DEF_RULE


99 #unde�
DEF_RULE_NC


101 #unde�
�


102 #unde�
�d


103 #unde�
�d_id�t


104 #unde�
�d_b�nk


105 #unde�
�e_�_m�e


106 #unde�
li�


107 #unde�
li�_w�h_�d


111 cڡ 
u�t16_t
 
	gru�_�g_comb�ed_�b�
[] = {

112 
	#tok
(
t
�(
RULE_ARG_TOK
 | 
MP_TOKEN_
##t)

	)

113 
	#ru�
(
r
�(
RULE_ARG_RULE
 | 
RULE_
##r)

	)

114 
	#�t_ru�
(
r
�(
RULE_ARG_OPT_RULE
 | 
RULE_
##r)

	)

116 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
__VA_ARGS__
,

	)

117 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

118 
	~"py/g�mm�.h
"

119 #unde�
DEF_RULE


120 #unde�
DEF_RULE_NC


122 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

123 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
__VA_ARGS__
,

	)

124 
	~"py/g�mm�.h
"

125 #unde�
DEF_RULE


126 #unde�
DEF_RULE_NC


128 #unde�
tok


129 #unde�
ru�


130 #unde�
�t_ru�


134 
	#RULE_EXPAND
(
x
�
	)
x

135 
	#RULE_PADDING
(
ru�
, ...�
	`RULE_PADDING2
�u�, 
__VA_ARGS__
, 
	`RULE_PADDING_IDS
�u�))

	)

136 
	#RULE_PADDING2
(
ru�
, ...�
	`RULE_EXPAND
(
	`RULE_PADDING3
�u�, 
__VA_ARGS__
))

	)

137 
	#RULE_PADDING3
(
ru�
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
_11
, 
_12
, 
_13
, ...�
__VA_ARGS__


	)

138 
	#RULE_PADDING_IDS
(
r
�
PAD13_
##r, 
PAD12_
##r, 
PAD11_
##r, 
PAD10_
##r, 
PAD9_
##r, 
PAD8_
##r, 
PAD7_
##r, 
PAD6_
##r, 
PAD5_
##r, 
PAD4_
##r, 
PAD3_
##r, 
PAD2_
##r, 
PAD1_
##r,

	)

142 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
	`RULE_PADDING
�u�, 
__VA_ARGS__
)

	)

143 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

144 
	~"py/g�mm�.h
"

145 #unde�
DEF_RULE


146 #unde�
DEF_RULE_NC


147 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

148 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
	`RULE_PADDING
�u�, 
__VA_ARGS__
)

	)

149 
	~"py/g�mm�.h
"

150 #unde�
DEF_RULE


151 #unde�
DEF_RULE_NC


155 
	#RULE_ARG_OFFSET
(
ru�
, ...�
	`RULE_ARG_OFFSET2
�u�, 
__VA_ARGS__
, 
	`RULE_ARG_OFFSET_IDS
�u�))

	)

156 
	#RULE_ARG_OFFSET2
(
ru�
, ...�
	`RULE_EXPAND
(
	`RULE_ARG_OFFSET3
�u�, 
__VA_ARGS__
))

	)

157 
	#RULE_ARG_OFFSET3
(
ru�
, 
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, 
_10
, 
_11
, 
_12
, 
_13
, 
_14
, ...�
	)
_14

158 
	#RULE_ARG_OFFSET_IDS
(
r
�
PAD13_
##r, 
PAD12_
##r, 
PAD11_
##r, 
PAD10_
##r, 
PAD9_
##r, 
PAD8_
##r, 
PAD7_
##r, 
PAD6_
##r, 
PAD5_
##r, 
PAD4_
##r, 
PAD3_
##r, 
PAD2_
##r, 
PAD1_
##r, 
PAD0_
##r,

	)

164 cڡ 
u�t8_t
 
	gru�_�g_off�t_�b�
[] = {

165 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
	`RULE_ARG_OFFSET
�u�, 
__VA_ARGS__
�& 0xff,

	)

166 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

167 
	~"py/g�mm�.h
"

168 #unde�
DEF_RULE


169 #unde�
DEF_RULE_NC


171 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

172 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
	`RULE_ARG_OFFSET
�u�, 
__VA_ARGS__
�& 0xff,

	)

173 
	~"py/g�mm�.h
"

174 #unde�
DEF_RULE


175 #unde�
DEF_RULE_NC


179 cڡ 
size_t
 
	gFIRST_RULE_WITH_OFFSET_ABOVE_255
 =

180 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�
	`RULE_ARG_OFFSET
�u�, 
__VA_ARGS__
�>�0x100 ? 
RULE_
##ru� :

	)

181 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

182 
	~"py/g�mm�.h
"

183 #unde�
DEF_RULE


184 #unde�
DEF_RULE_NC


185 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

186 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�
	`RULE_ARG_OFFSET
�u�, 
__VA_ARGS__
�>�0x100 ? 
RULE_
##ru� :

	)

187 
	~"py/g�mm�.h
"

188 #unde�
DEF_RULE


189 #unde�
DEF_RULE_NC


192 #i�
MICROPY_DEBUG_PARSE_RULE_NAME


194 cڡ *cڡ 
	gru�_�me_�b�
[] = {

195 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...�#ru�,

	)

196 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...)

	)

197 
	~"py/g�mm�.h
"

198 #unde�
DEF_RULE


199 #unde�
DEF_RULE_NC


201 
	#DEF_RULE
(
ru�
, 
comp
, 
k�d
, ...)

	)

202 
	#DEF_RULE_NC
(
ru�
, 
k�d
, ...�#ru�,

	)

203 
	~"py/g�mm�.h
"

204 #unde�
DEF_RULE


205 #unde�
DEF_RULE_NC


211 
	s_ru�_�ack_t
 {

212 
size_t
 
	m�c_l�e
 : (8 * (size_t) - 8);

213 
size_t
 
	mru�_id
 : 8;

214 
size_t
 
	m�g_i
;

215 } 
	tru�_�ack_t
;

217 
	s_mp_�r�_chunk_t
 {

218 
size_t
 
	m�loc
;

220 
size_t
 
	mu�d
;

221 
_mp_�r�_chunk_t
 *
	m�xt
;

222 } 
	muni�_
;

223 
by�
 
	md�a
[];

224 } 
	tmp_�r�_chunk_t
;

226 
	s_�r�r_t
 {

227 
size_t
 
	mru�_�ack_�loc
;

228 
size_t
 
	mru�_�ack_t�
;

229 
ru�_�ack_t
 *
	mru�_�ack
;

231 
size_t
 
	m�su�_�ack_�loc
;

232 
size_t
 
	m�su�_�ack_t�
;

233 
mp_�r�_node_t
 *
	m�su�_�ack
;

235 
mp_�x�_t
 *
	m�x�
;

237 
mp_�r�_��_t
 
	m��
;

238 
mp_�r�_chunk_t
 *
	mcur_chunk
;

240 #i�
MICROPY_COMP_CONST


241 
mp_m�_t
 
	mcڡs
;

243 } 
	t�r�r_t
;

245 
push_�su�_ru�
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
u�t8_t
 
ru�_id
, size_�
num_�gs
);

247 cڡ 
u�t16_t
 *
	$g�_ru�_�g
(
u�t8_t
 
r_id
) {

248 
size_t
 
off
 = 
ru�_�g_off�t_�b�
[
r_id
];

249 i�(
r_id
 >�
FIRST_RULE_WITH_OFFSET_ABOVE_255
) {

250 
off
 |= 0x100;

252  &
ru�_�g_comb�ed_�b�
[
off
];

253 
	}
}

255 *
	$�r�r_�loc
(
�r�r_t
 *
�r�r
, 
size_t
 
num_by�s
) {

258 
mp_�r�_chunk_t
 *
chunk
 = 
�r�r
->
cur_chunk
;

260 i�(
chunk
 !�
NULL
 && chunk->
uni�_
.
u�d
 + 
num_by�s
 > chunk->
�loc
) {

262 
mp_�r�_chunk_t
 *
�w_d�a
 = (mp_�r�_chunk_�*)
	`m_��w_maybe
(
by�
, 
chunk
,

263 (
mp_�r�_chunk_t
�+ 
chunk
->
�loc
,

264 (
mp_�r�_chunk_t
�+ 
chunk
->
�loc
 + 
num_by�s
, 
�l�
);

265 i�(
�w_d�a
 =�
NULL
) {

267 ()
	`m_��w_maybe
(
by�
, 
chunk
, (
mp_�r�_chunk_t
�+ chunk->
�loc
,

268 (
mp_�r�_chunk_t
�+ 
chunk
->
uni�_
.
u�d
, 
�l�
);

269 
chunk
->
�loc
 = chunk->
uni�_
.
u�d
;

270 
chunk
->
uni�_
.
�xt
 = 
�r�r
->
��
.chunk;

271 
�r�r
->
��
.
chunk
 = chunk;

272 
chunk
 = 
NULL
;

275 
chunk
->
�loc
 +�
num_by�s
;

279 i�(
chunk
 =�
NULL
) {

281 
size_t
 
�loc
 = 
MICROPY_ALLOC_PARSE_CHUNK_INIT
;

282 i�(
�loc
 < 
num_by�s
) {

283 
�loc
 = 
num_by�s
;

285 
chunk
 = (
mp_�r�_chunk_t
 *)
	`m_�w
(
by�
, (mp_�r�_chunk_t�+ 
�loc
);

286 
chunk
->
�loc
 =�lloc;

287 
chunk
->
uni�_
.
u�d
 = 0;

288 
�r�r
->
cur_chunk
 = 
chunk
;

291 
by�
 *
�t
 = 
chunk
->
d�a
 + chunk->
uni�_
.
u�d
;

292 
chunk
->
uni�_
.
u�d
 +�
num_by�s
;

293  
�t
;

294 
	}
}

296 #i�
MICROPY_COMP_CONST_TUPLE


297 
	$�r�r_�_�r�_node_�ru�
(
�r�r_t
 *
�r�r
, 
mp_�r�_node_�ru�_t
 *
�s
) {

298 
mp_�r�_chunk_t
 *
chunk
 = 
�r�r
->
cur_chunk
;

299 i�(
chunk
->
d�a
 <�(
by�
 *)
�s
 && (by� *�n�< chunk->d��+ chunk->
uni�_
.
u�d
) {

300 
size_t
 
num_by�s
 = (
mp_�r�_node_�ru�_t
�+ (
mp_�r�_node_t
�* 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

301 
chunk
->
uni�_
.
u�d
 -�
num_by�s
;

303 
	}
}

306 
	$push_ru�
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
u�t8_t
 
ru�_id
, size_�
�g_i
) {

307 i�(
�r�r
->
ru�_�ack_t�
 >�r�r->
ru�_�ack_�loc
) {

308 
ru�_�ack_t
 *
rs
 = 
	`m_��w
�u�_�ack_t, 
�r�r
->
ru�_�ack
,���r->
ru�_�ack_�loc
,���r->ru�_�ack_�lo�+ 
MICROPY_ALLOC_PARSE_RULE_INC
);

309 
�r�r
->
ru�_�ack
 = 
rs
;

310 
�r�r
->
ru�_�ack_�loc
 +�
MICROPY_ALLOC_PARSE_RULE_INC
;

312 
ru�_�ack_t
 *
rs
 = &
�r�r
->
ru�_�ack
[�r�r->
ru�_�ack_t�
++];

313 
rs
->
�c_l�e
 = src_line;

314 
rs
->
ru�_id
 =�ule_id;

315 
rs
->
�g_i
 =�rg_i;

316 
	}
}

318 
	$push_ru�_�om_�g
(
�r�r_t
 *
�r�r
, 
size_t
 
�g
) {

319 
	`as��
((
�g
 & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_RULE
 || (�g & RULE_ARG_KIND_MASK�=�
RULE_ARG_OPT_RULE
);

320 
size_t
 
ru�_id
 = 
�g
 & 
RULE_ARG_ARG_MASK
;

321 
	`push_ru�
(
�r�r
,���r->
�x�
->
tok_l�e
, 
ru�_id
, 0);

322 
	}
}

324 
u�t8_t
 
	$p�_ru�
(
�r�r_t
 *
�r�r
, 
size_t
 *
�g_i
, size_�*
�c_l�e
) {

325 
�r�r
->
ru�_�ack_t�
 -= 1;

326 
u�t8_t
 
ru�_id
 = 
�r�r
->
ru�_�ack
[�r�r->
ru�_�ack_t�
].rule_id;

327 *
�g_i
 = 
�r�r
->
ru�_�ack
[�r�r->
ru�_�ack_t�
].arg_i;

328 *
�c_l�e
 = 
�r�r
->
ru�_�ack
[�r�r->
ru�_�ack_t�
].src_line;

329  
ru�_id
;

330 
	}
}

332 #i�
MICROPY_COMP_CONST_TUPLE


333 
u�t8_t
 
	$�ek_ru�
(
�r�r_t
 *
�r�r
, 
size_t
 
n
) {

334 
	`as��
(
�r�r
->
ru�_�ack_t�
 > 
n
);

335  
�r�r
->
ru�_�ack
[�r�r->
ru�_�ack_t�
 - 1 - 
n
].
ru�_id
;

336 
	}
}

339 
bo�
 
	$mp_�r�_node_g�_�t_maybe
(
mp_�r�_node_t
 
�
, 
mp_obj_t
 *
o
) {

340 i�(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
)) {

341 *
o
 = 
	`MP_OBJ_NEW_SMALL_INT
(
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�
));

342  
�ue
;

343 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_cڡ_obje�
)) {

344 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

345 *
o
 = 
	`mp_�r�_node_ex�a�_cڡ_obje�
(
�s
);

346  
	`mp_obj_is_�t
(*
o
);

348  
�l�
;

350 
	}
}

352 #i�
MICROPY_COMP_CONST_TUPLE
 || 
MICROPY_COMP_CONST


353 
bo�
 
	$mp_�r�_node_is_cڡ
(
mp_�r�_node_t
 
�
) {

354 i�(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
)) {

356  
�ue
;

357 } i�(
	`MP_PARSE_NODE_IS_LEAF
(
�
)) {

359 
u���_t
 
k�d
 = 
	`MP_PARSE_NODE_LEAF_KIND
(
�
);

360 i�(
k�d
 =�
MP_PARSE_NODE_STRING
) {

361  
�ue
;

362 } i�(
k�d
 =�
MP_PARSE_NODE_TOKEN
) {

363 
u���_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

364  
�g
 =�
MP_TOKEN_KW_NONE


365 || 
�g
 =�
MP_TOKEN_KW_FALSE


366 || 
�g
 =�
MP_TOKEN_KW_TRUE


367 || 
�g
 =�
MP_TOKEN_ELLIPSIS
;

369 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_cڡ_obje�
)) {

371  
�ue
;

372 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_�om_��n
)) {

374 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

375  
	`MP_PARSE_NODE_IS_NULL
(
�s
->
nodes
[0]);

377  
�l�
;

378 
	}
}

380 
mp_obj_t
 
	$mp_�r�_node_c�v�t_to_obj
(
mp_�r�_node_t
 
�
) {

381 
	`as��
(
	`mp_�r�_node_is_cڡ
(
�
));

382 i�(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
)) {

383 
mp_�t_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�
);

384 #i�
MICROPY_DYNAMIC_COMPILER


385 
mp_u�t_t
 
sign_mask
 = -((mp_u�t_t)1 << (
mp_dy�mic_comp��
.
sm�l_�t_b�s
 - 1));

386 i�(!((
�g
 & 
sign_mask
) == 0 || (arg & sign_mask) == sign_mask)) {

388  
	`mp_obj_�w_�t_�om_�
(
�g
);

391  
	`MP_OBJ_NEW_SMALL_INT
(
�g
);

392 } i�(
	`MP_PARSE_NODE_IS_LEAF
(
�
)) {

393 
u���_t
 
k�d
 = 
	`MP_PARSE_NODE_LEAF_KIND
(
�
);

394 
u���_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

395 i�(
k�d
 =�
MP_PARSE_NODE_STRING
) {

396  
	`MP_OBJ_NEW_QSTR
(
�g
);

398 
	`as��
(
	`MP_PARSE_NODE_LEAF_KIND
(
�
�=�
MP_PARSE_NODE_TOKEN
);

399 
�g
) {

400 
MP_TOKEN_KW_NONE
:

401  
mp_cڡ_n�e
;

402 
MP_TOKEN_KW_FALSE
:

403  
mp_cڡ_�l�
;

404 
MP_TOKEN_KW_TRUE
:

405  
mp_cڡ_�ue
;

407 
	`as��
(
�g
 =�
MP_TOKEN_ELLIPSIS
);

408  
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�l�sis_obj
);

411 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_cڡ_obje�
)) {

412 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

413  
	`mp_�r�_node_ex�a�_cڡ_obje�
(
�s
);

415 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_�om_��n
));

416 
	`as��
(
	`MP_PARSE_NODE_IS_NULL
(((
mp_�r�_node_�ru�_t
 *)
�
)->
nodes
[0]));

417  
mp_cڡ_em�y_tu�e
;

419 
	}
}

422 
bo�
 
	$�r�_node_is_cڡ_bo�
(
mp_�r�_node_t
 
�
, 
bo�
 
v�ue
) {

424 #i�
MICROPY_COMP_CONST_TUPLE
 || 
MICROPY_COMP_CONST


425  
	`mp_�r�_node_is_cڡ
(
�
�&& 
	`mp_obj_is_�ue
(
	`mp_�r�_node_c�v�t_to_obj
�n)�=�
v�ue
;

427  
	`MP_PARSE_NODE_IS_TOKEN_KIND
(
�
, 
v�ue
 ? 
MP_TOKEN_KW_TRUE
 : 
MP_TOKEN_KW_FALSE
)

428 || (
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
�&& !!
	`MP_PARSE_NODE_LEAF_SMALL_INT
�n�=�
v�ue
);

430 
	}
}

432 
bo�
 
	$mp_�r�_node_is_cڡ_�l�
(
mp_�r�_node_t
 
�
) {

433  
	`�r�_node_is_cڡ_bo�
(
�
, 
�l�
);

434 
	}
}

436 
bo�
 
	$mp_�r�_node_is_cڡ_�ue
(
mp_�r�_node_t
 
�
) {

437  
	`�r�_node_is_cڡ_bo�
(
�
, 
�ue
);

438 
	}
}

440 
size_t
 
	$mp_�r�_node_ex�a�_li�
(
mp_�r�_node_t
 *
�
, 
size_t
 
�_k�d
, mp_�r�_node_�**
nodes
) {

441 i�(
	`MP_PARSE_NODE_IS_NULL
(*
�
)) {

442 *
nodes
 = 
NULL
;

444 } i�(
	`MP_PARSE_NODE_IS_LEAF
(*
�
)) {

445 *
nodes
 = 
�
;

448 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)(*
�
);

449 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�!�
�_k�d
) {

450 *
nodes
 = 
�
;

453 *
nodes
 = 
�s
->nodes;

454  
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

457 
	}
}

459 #i�
MICROPY_DEBUG_PRINTERS


460 
	$mp_�r�_node_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_�r�_node_t
 
�
, 
size_t
 
�d�t
) {

461 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

462 
	`mp_��tf
(
��t
, "[% 4d] ", ()((
mp_�r�_node_�ru�_t
 *)
�
)->
sour�_l�e
);

464 
	`mp_��tf
(
��t
, " ");

466 
size_t
 
i
 = 0; i < 
�d�t
; i++) {

467 
	`mp_��tf
(
��t
, " ");

469 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

470 
	`mp_��tf
(
��t
, "NULL\n");

471 } i�(
	`MP_PARSE_NODE_IS_SMALL_INT
(
�
)) {

472 
mp_�t_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_SMALL_INT
(
�
);

473 
	`mp_��tf
(
��t
, "�t(" 
INT_FMT
 ")\n", 
�g
);

474 } i�(
	`MP_PARSE_NODE_IS_LEAF
(
�
)) {

475 
u���_t
 
�g
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�
);

476 
	`MP_PARSE_NODE_LEAF_KIND
(
�
)) {

477 
MP_PARSE_NODE_ID
:

478 
	`mp_��tf
(
��t
, "id(%s)\n", 
	`q�r_�r
(
�g
));

480 
MP_PARSE_NODE_STRING
:

481 
	`mp_��tf
(
��t
, "�r(%s)\n", 
	`q�r_�r
(
�g
));

484 
	`as��
(
	`MP_PARSE_NODE_LEAF_KIND
(
�
�=�
MP_PARSE_NODE_TOKEN
);

485 
	`mp_��tf
(
��t
, "tok(%u)\n", (
u�t
)
�g
);

490 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

491 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
RULE_cڡ_obje�
) {

492 
mp_obj_t
 
obj
 = 
	`mp_�r�_node_ex�a�_cڡ_obje�
(
�s
);

493 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


494 
	`mp_��tf
(
��t
, "l��� cڡ(%016�x)=", 
obj
);

496 
	`mp_��tf
(
��t
, "l��� cڡ(%p)=", 
obj
);

498 
	`mp_obj_��t_h��r
(
��t
, 
obj
, 
PRINT_REPR
);

499 
	`mp_��tf
(
��t
, "\n");

501 
size_t
 
n
 = 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
);

502 #i�
MICROPY_DEBUG_PARSE_RULE_NAME


503 
	`mp_��tf
(
��t
, "%s(%u��=%u)\n", 
ru�_�me_�b�
[
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
)], (
u�t
)MP_PARSE_NODE_STRUCT_KIND�ns), (u�t)
n
);

505 
	`mp_��tf
(
��t
, "ru�(%u��=%u)\n", (
u�t
)
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
), (u�t)
n
);

507 
size_t
 
i
 = 0; i < 
n
; i++) {

508 
	`mp_�r�_node_��t
(
��t
, 
�s
->
nodes
[
i
], 
�d�t
 + 2);

512 
	}
}

524 
mp_�r�_node_t
 
	$p�_�su�
(
�r�r_t
 *
�r�r
) {

525 
	`as��
(
�r�r
->
�su�_�ack_t�
 > 0);

526  
�r�r
->
�su�_�ack
[--�r�r->
�su�_�ack_t�
];

527 
	}
}

529 
mp_�r�_node_t
 
	$�ek_�su�
(
�r�r_t
 *
�r�r
, 
size_t
 
pos
) {

530 
	`as��
(
�r�r
->
�su�_�ack_t�
 > 
pos
);

531  
�r�r
->
�su�_�ack
[�r�r->
�su�_�ack_t�
 - 1 - 
pos
];

532 
	}
}

534 
	$push_�su�_node
(
�r�r_t
 *
�r�r
, 
mp_�r�_node_t
 
�
) {

535 i�(
�r�r
->
�su�_�ack_t�
 >�r�r->
�su�_�ack_�loc
) {

536 
mp_�r�_node_t
 *
�ack
 = 
	`m_��w
(mp_�r�_node_t, 
�r�r
->
�su�_�ack
,���r->
�su�_�ack_�loc
,���r->�su�_�ack_�lo�+ 
MICROPY_ALLOC_PARSE_RESULT_INC
);

537 
�r�r
->
�su�_�ack
 = 
�ack
;

538 
�r�r
->
�su�_�ack_�loc
 +�
MICROPY_ALLOC_PARSE_RESULT_INC
;

540 
�r�r
->
�su�_�ack
[�r�r->
�su�_�ack_t�
++] = 
�
;

541 
	}
}

543 
mp_�r�_node_t
 
	$make_node_cڡ_obje�
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
mp_obj_t
 
obj
) {

544 
mp_�r�_node_�ru�_t
 *
�
 = 
	`�r�r_�loc
(
�r�r
, (mp_�r�_node_�ru�_t�+ (
mp_obj_t
));

545 
�
->
sour�_l�e
 = 
�c_l�e
;

546 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


548 
�
->
k�d_num_nodes
 = 
RULE_cڡ_obje�
 | (2 << 8);

549 
�
->
nodes
[0] = (
u�t64_t
)
obj
;

550 
�
->
nodes
[1] = (
u�t64_t
)
obj
 >> 32;

552 
�
->
k�d_num_nodes
 = 
RULE_cڡ_obje�
 | (1 << 8);

553 
�
->
nodes
[0] = (
u���_t
)
obj
;

555  (
mp_�r�_node_t
)
�
;

556 
	}
}

560 
mp_�r�_node_t
 
	$make_node_cڡ_obje�_�timi�d
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
mp_obj_t
 
obj
) {

561 i�(
	`mp_obj_is_sm�l_�t
(
obj
)) {

562 
mp_�t_t
 
v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
obj
);

563 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


565 i�(((
v�
 ^ (val << 1)) & 0xffffffff80000000) != 0) {

566  
	`make_node_cڡ_obje�
(
�r�r
, 
�c_l�e
, 
obj
);

569 #i�
MICROPY_DYNAMIC_COMPILER


571 
mp_u�t_t
 
sign_mask
 = -((mp_u�t_t)1 << (
mp_dy�mic_comp��
.
sm�l_�t_b�s
 - 1));

572 i�(!((
v�
 & 
sign_mask
) == 0 || (val & sign_mask) == sign_mask)) {

573  
	`make_node_cڡ_obje�
(
�r�r
, 
�c_l�e
, 
obj
);

576  
	`mp_�r�_node_�w_sm�l_�t
(
v�
);

578  
	`make_node_cڡ_obje�
(
�r�r
, 
�c_l�e
, 
obj
);

580 
	}
}

582 
	$push_�su�_tok�
(
�r�r_t
 *
�r�r
, 
u�t8_t
 
ru�_id
) {

583 
mp_�r�_node_t
 
�
;

584 
mp_�x�_t
 *
�x
 = 
�r�r
->
�x�
;

585 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_NAME
) {

586 
q�r
 
id
 = 
	`q�r_�om_��
(
�x
->
v�r
.
buf
,�ex->v�r.
�n
);

587 #i�
MICROPY_COMP_CONST


589 
mp_m�_�em_t
 *
�em
;

590 i�(
ru�_id
 =�
RULE_�om


591 && (
�em
 = 
	`mp_m�_lookup
(&
�r�r
->
cڡs
, 
	`MP_OBJ_NEW_QSTR
(
id
), 
MP_MAP_LOOKUP
)�!�
NULL
) {

592 
�
 = 
	`make_node_cڡ_obje�_�timi�d
(
�r�r
, 
�x
->
tok_l�e
, 
�em
->
v�ue
);

594 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_ID
, 
id
);

597 ()
ru�_id
;

598 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_ID
, 
id
);

600 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_INTEGER
) {

601 
mp_obj_t
 
o
 = 
	`mp_�r�_num_��g�
(
�x
->
v�r
.
buf
,�ex->v�r.
�n
, 0,�ex);

602 
�
 = 
	`make_node_cڡ_obje�_�timi�d
(
�r�r
, 
�x
->
tok_l�e
, 
o
);

603 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_FLOAT_OR_IMAG
) {

604 
mp_obj_t
 
o
 = 
	`mp_�r�_num_��t
(
�x
->
v�r
.
buf
,�ex->v�r.
�n
, 
�ue
,�ex);

605 
�
 = 
	`make_node_cڡ_obje�
(
�r�r
, 
�x
->
tok_l�e
, 
o
);

606 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_STRING
) {

609 
q�r
 
q�
 = 
MP_QSTRnu�
;

610 i�(
�x
->
v�r
.
�n
 <�
MICROPY_ALLOC_PARSE_INTERN_STRING_LEN
) {

612 
q�
 = 
	`q�r_�om_��
(
�x
->
v�r
.
buf
,�ex->v�r.
�n
);

615 
q�
 = 
	`q�r_f�d_��
(
�x
->
v�r
.
buf
,�ex->v�r.
�n
);

617 i�(
q�
 !�
MP_QSTRnu�
) {

619 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_STRING
, 
q�
);

622 
mp_obj_t
 
o
 = 
	`mp_obj_�w_�r_c�y
(&
mp_ty�_�r
, (cڡ 
by�
 *)
�x
->
v�r
.
buf
,�ex->v�r.
�n
);

623 
�
 = 
	`make_node_cڡ_obje�
(
�r�r
, 
�x
->
tok_l�e
, 
o
);

625 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_BYTES
) {

627 
mp_obj_t
 
o
 = 
	`mp_obj_�w_by�s
((cڡ 
by�
 *)
�x
->
v�r
.
buf
,�ex->v�r.
�n
);

628 
�
 = 
	`make_node_cڡ_obje�
(
�r�r
, 
�x
->
tok_l�e
, 
o
);

630 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_TOKEN
, 
�x
->
tok_k�d
);

632 
	`push_�su�_node
(
�r�r
, 
�
);

633 
	}
}

635 #i�
MICROPY_COMP_CONST_FOLDING


637 #i�
MICROPY_COMP_MODULE_CONST


638 cڡ 
mp_rom_m�_�em_t
 
	gmp_cڡ�ts_�b�
[] = {

639 #i�
MICROPY_PY_ERRNO


640 { 
MP_ROM_QSTR
(
MP_QSTR_��o
), 
MP_ROM_PTR
(&
mp_modu�_��o
) },

642 #i�
MICROPY_PY_UCTYPES


643 { 
MP_ROM_QSTR
(
MP_QSTR_u�y�s
), 
MP_ROM_PTR
(&
mp_modu�_u�y�s
) },

646 
MICROPY_PORT_CONSTANTS


648 
MP_DEFINE_CONST_MAP
(
mp_cڡ�ts_m�
, 
mp_cڡ�ts_�b�
);

651 #i�
MICROPY_COMP_CONST_FOLDING_COMPILER_WORKAROUND


654 
	gMP_NOINLINE


656 
bo�
 
	$f�d_logi�l_cڡ�ts
(
�r�r_t
 *
�r�r
, 
u�t8_t
 
ru�_id
, 
size_t
 *
num_�gs
) {

657 i�(
ru�_id
 =�
RULE_�_��


658 || 
ru�_id
 =�
RULE_�d_��
) {

660 
size_t
 
c�y_to
 = *
num_�gs
;

661 
size_t
 
i
 = 
c�y_to
; i > 0;) {

662 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, --
i
);

663 
�r�r
->
�su�_�ack
[�r�r->
�su�_�ack_t�
 - 
c�y_to
] = 
�
;

664 i�(
i
 == 0) {

668 i�(
ru�_id
 =�
RULE_�_��
) {

669 i�(
	`mp_�r�_node_is_cڡ_�ue
(
�
)) {

672 } i�(!
	`mp_�r�_node_is_cڡ_�l�
(
�
)) {

673 
c�y_to
 -= 1;

677 i�(
	`mp_�r�_node_is_cڡ_�l�
(
�
)) {

679 } i�(!
	`mp_�r�_node_is_cڡ_�ue
(
�
)) {

680 
c�y_to
 -= 1;

684 
c�y_to
 -= 1;

687 
size_t
 
i
 = 0; i < 
c�y_to
; ++i) {

688 
	`p�_�su�
(
�r�r
);

690 *
num_�gs
 -�
c�y_to
;

693  *
num_�gs
 == 1;

695 } i�(
ru�_id
 =�
RULE_n�_��_2
) {

697 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 0);

698 i�(
	`mp_�r�_node_is_cڡ_�l�
(
�
)) {

699 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_TOKEN
, 
MP_TOKEN_KW_TRUE
);

700 } i�(
	`mp_�r�_node_is_cڡ_�ue
(
�
)) {

701 
�
 = 
	`mp_�r�_node_�w_�af
(
MP_PARSE_NODE_TOKEN
, 
MP_TOKEN_KW_FALSE
);

703  
�l�
;

705 
	`p�_�su�
(
�r�r
);

706 
	`push_�su�_node
(
�r�r
, 
�
);

707  
�ue
;

710  
�l�
;

711 
	}
}

713 
bo�
 
	$f�d_cڡ�ts
(
�r�r_t
 *
�r�r
, 
u�t8_t
 
ru�_id
, 
size_t
 
num_�gs
) {

717 
mp_obj_t
 
�g0
;

718 i�(
ru�_id
 =�
RULE_ex�


719 || 
ru�_id
 =�
RULE_x�_ex�


720 || 
ru�_id
 =�
RULE_�d_ex�


721 || 
ru�_id
 =�
RULE_pow�
) {

723 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 
num_�gs
 - 1);

724 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
�g0
)) {

725  
�l�
;

727 
mp_b��y_�_t
 
�
;

728 i�(
ru�_id
 =�
RULE_ex�
) {

729 
�
 = 
MP_BINARY_OP_OR
;

730 } i�(
ru�_id
 =�
RULE_x�_ex�
) {

731 
�
 = 
MP_BINARY_OP_XOR
;

732 } i�(
ru�_id
 =�
RULE_�d_ex�
) {

733 
�
 = 
MP_BINARY_OP_AND
;

735 
�
 = 
MP_BINARY_OP_POWER
;

737 
ssize_t
 
i
 = 
num_�gs
 - 2; i >= 0; --i) {

738 
�
 = 
	`�ek_�su�
(
�r�r
, 
i
);

739 
mp_obj_t
 
�g1
;

740 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
�g1
)) {

741  
�l�
;

743 i�(
�
 =�
MP_BINARY_OP_POWER
 && 
	`mp_obj_�t_sign
(
�g1
) < 0) {

745  
�l�
;

747 
�g0
 = 
	`mp_b��y_�
(
�
,�rg0, 
�g1
);

749 } i�(
ru�_id
 =�
RULE_shi�_ex�


750 || 
ru�_id
 =�
RULE_��h_ex�


751 || 
ru�_id
 =�
RULE_�rm
) {

753 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 
num_�gs
 - 1);

754 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
�g0
)) {

755  
�l�
;

757 
ssize_t
 
i
 = 
num_�gs
 - 2; i >= 1; i -= 2) {

758 
�
 = 
	`�ek_�su�
(
�r�r
, 
i
 - 1);

759 
mp_obj_t
 
�g1
;

760 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
�g1
)) {

761  
�l�
;

763 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
	`�ek_�su�
(
�r�r
, 
i
));

764 i�(
tok
 =�
MP_TOKEN_OP_AT
 ||�ok =�
MP_TOKEN_OP_SLASH
) {

766  
�l�
;

768 
mp_b��y_�_t
 
�
 = 
MP_BINARY_OP_LSHIFT
 + (
tok
 - 
MP_TOKEN_OP_DBL_LESS
);

769 
rhs_sign
 = 
	`mp_obj_�t_sign
(
�g1
);

770 i�(
�
 <�
MP_BINARY_OP_RSHIFT
) {

772 i�(
rhs_sign
 < 0) {

773  
�l�
;

775 } i�(
�
 >�
MP_BINARY_OP_FLOOR_DIVIDE
) {

777 i�(
rhs_sign
 == 0) {

778  
�l�
;

781 
�g0
 = 
	`mp_b��y_�
(
�
,�rg0, 
�g1
);

783 } i�(
ru�_id
 =�
RULE_���_2
) {

785 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 0);

786 i�(!
	`mp_�r�_node_g�_�t_maybe
(
�
, &
�g0
)) {

787  
�l�
;

789 
mp_tok�_k�d_t
 
tok
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
	`�ek_�su�
(
�r�r
, 1));

790 
mp_u�ry_�_t
 
�
;

791 i�(
tok
 =�
MP_TOKEN_OP_TILDE
) {

792 
�
 = 
MP_UNARY_OP_INVERT
;

794 
	`as��
(
tok
 =�
MP_TOKEN_OP_PLUS
 ||�ok =�
MP_TOKEN_OP_MINUS
);

795 
�
 = 
MP_UNARY_OP_POSITIVE
 + (
tok
 - 
MP_TOKEN_OP_PLUS
);

797 
�g0
 = 
	`mp_u�ry_�
(
�
,�rg0);

799 #i�
MICROPY_COMP_CONST


800 } i�(
ru�_id
 =�
RULE_ex�_�mt
) {

801 
mp_�r�_node_t
 
�1
 = 
	`�ek_�su�
(
�r�r
, 0);

802 i�(!
	`MP_PARSE_NODE_IS_NULL
(
�1
)

803 && !(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�1
, 
RULE_ex�_�mt_augassign
)

804 || 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�1
, 
RULE_ex�_�mt_assign_li�
))) {

806 
mp_�r�_node_t
 
�0
 = 
	`�ek_�su�
(
�r�r
, 1);

807 i�(
	`MP_PARSE_NODE_IS_ID
(
�0
)

808 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�1
, 
RULE_�om_ex�_n�m�
)

809 && 
	`MP_PARSE_NODE_IS_ID
(((
mp_�r�_node_�ru�_t
 *)
�1
)->
nodes
[0])

810 && 
	`MP_PARSE_NODE_LEAF_ARG
(((
mp_�r�_node_�ru�_t
 *)
�1
)->
nodes
[0]�=�
MP_QSTR_cڡ


811 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(((
mp_�r�_node_�ru�_t
 *)
�1
)->
nodes
[1], 
RULE_�a��_��n
)

816 
q�r
 
id
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�0
);

819 
mp_�r�_node_t
 
�_v�ue
 = ((
mp_�r�_node_�ru�_t
 *)((mp_�r�_node_�ru�_�*)
�1
)->
nodes
[1])->nodes[0];

820 i�(!
	`mp_�r�_node_is_cڡ
(
�_v�ue
)) {

821 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
,

822 
	`MP_ERROR_TEXT
("not� constant"));

823 
	`mp_obj_ex��i�_add_�a�back
(
exc
, 
�r�r
->
�x�
->
sour�_�me
,

824 ((
mp_�r�_node_�ru�_t
 *)
�1
)->
sour�_l�e
, 
MP_QSTRnu�
);

825 
	`�r_�i�
(
exc
);

827 
mp_obj_t
 
v�ue
 = 
	`mp_�r�_node_c�v�t_to_obj
(
�_v�ue
);

830 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
�r�r
->
cڡs
, 
	`MP_OBJ_NEW_QSTR
(
id
), 
MP_MAP_LOOKUP_ADD_IF_NOT_FOUND
);

831 
	`as��
(
�em
->
v�ue
 =�
MP_OBJ_NULL
);

832 
�em
->
v�ue
 = value;

836 i�(
	`q�r_�r
(
id
)[0] == '_') {

837 
	`p�_�su�
(
�r�r
);

838 
	`p�_�su�
(
�r�r
);

839 
	`push_�su�_ru�
(
�r�r
, 0, 
RULE_�ss_�mt
, 0);

840  
�ue
;

844 
	`p�_�su�
(
�r�r
);

845 
	`push_�su�_node
(
�r�r
, 
�_v�ue
);

848  
�l�
;

851  
�l�
;

854 #i�
MICROPY_COMP_MODULE_CONST


855 } i�(
ru�_id
 =�
RULE_�om_ex�_n�m�
) {

856 
mp_�r�_node_t
 
�0
 = 
	`�ek_�su�
(
�r�r
, 1);

857 
mp_�r�_node_t
 
�1
 = 
	`�ek_�su�
(
�r�r
, 0);

858 i�(!(
	`MP_PARSE_NODE_IS_ID
(
�0
)

859 && 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�1
, 
RULE_�a��_�riod
))) {

860  
�l�
;

864 
mp_�r�_node_�ru�_t
 *
�s1
 = (mp_�r�_node_�ru�_�*)
�1
;

865 
	`as��
(
	`MP_PARSE_NODE_IS_ID
(
�s1
->
nodes
[0]));

866 
q�r
 
q_ba�
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�0
);

867 
q�r
 
q_��
 = 
	`MP_PARSE_NODE_LEAF_ARG
(
�s1
->
nodes
[0]);

868 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
((
mp_m�_t
 *)&
mp_cڡ�ts_m�
, 
	`MP_OBJ_NEW_QSTR
(
q_ba�
), 
MP_MAP_LOOKUP
);

869 i�(
�em
 =�
NULL
) {

870  
�l�
;

872 
mp_obj_t
 
de�
[2];

873 
	`mp_l�d_m�hod_maybe
(
�em
->
v�ue
, 
q_��
, 
de�
);

874 i�(!(
de�
[0] !�
MP_OBJ_NULL
 && 
	`mp_obj_is_�t
(dest[0]) && dest[1] == MP_OBJ_NULL)) {

875  
�l�
;

877 
�g0
 = 
de�
[0];

881  
�l�
;

886 
size_t
 
i
 = 
num_�gs
; i > 0; i--) {

887 
	`p�_�su�
(
�r�r
);

889 
	`push_�su�_node
(
�r�r
, 
	`make_node_cڡ_obje�_�timi�d
լ�r, 0, 
�g0
));

891  
�ue
;

892 
	}
}

896 #i�
MICROPY_COMP_CONST_TUPLE


897 
bo�
 
	$bu�d_tu�e_�om_�ack
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, size_�
num_�gs
) {

898 
size_t
 
i
 = 
num_�gs
; i > 0;) {

899 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, --
i
);

900 i�(!
	`mp_�r�_node_is_cڡ
(
�
)) {

901  
�l�
;

904 
mp_obj_tu�e_t
 *
tu�e
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
num_�gs
, 
NULL
));

905 
size_t
 
i
 = 
num_�gs
; i > 0;) {

906 
mp_�r�_node_t
 
�
 = 
	`p�_�su�
(
�r�r
);

907 
tu�e
->
�ems
[--
i
] = 
	`mp_�r�_node_c�v�t_to_obj
(
�
);

908 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

909 
	`�r�r_�_�r�_node_�ru�
(
�r�r
, (
mp_�r�_node_�ru�_t
 *)
�
);

912 
	`push_�su�_node
(
�r�r
, 
	`make_node_cڡ_obje�
լ�r, 
�c_l�e
, 
	`MP_OBJ_FROM_PTR
(
tu�e
)));

913  
�ue
;

914 
	}
}

916 
bo�
 
	$bu�d_tu�e
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
u�t8_t
 
ru�_id
, size_�
num_�gs
) {

917 i�(
ru�_id
 =�
RULE_��li�_comp
) {

918 i�(
	`�ek_ru�
(
�r�r
, 0�=�
RULE_�om_��n
) {

920  
	`bu�d_tu�e_�om_�ack
(
�r�r
, 
�c_l�e
, 
num_�gs
);

923 i�(
ru�_id
 =�
RULE_��li�_comp_3c
) {

924 
	`as��
(
	`�ek_ru�
(
�r�r
, 0�=�
RULE_��li�_comp_3b
);

925 
	`as��
(
	`�ek_ru�
(
�r�r
, 1�=�
RULE_��li�_comp
);

926 i�(
	`�ek_ru�
(
�r�r
, 2�=�
RULE_�om_��n
) {

928 i�(
	`bu�d_tu�e_�om_�ack
(
�r�r
, 
�c_l�e
, 
num_�gs
)) {

929 
�r�r
->
ru�_�ack_t�
 -= 2;

930  
�ue
;

934 i�(
ru�_id
 =�
RULE_��li�_��_ex�


935 || 
ru�_id
 =�
RULE_��li�


936 || 
ru�_id
 =�
RULE_subs���i�
) {

942  
	`bu�d_tu�e_�om_�ack
(
�r�r
, 
�c_l�e
, 
num_�gs
);

945  
�l�
;

946 
	}
}

949 
	$push_�su�_ru�
(
�r�r_t
 *
�r�r
, 
size_t
 
�c_l�e
, 
u�t8_t
 
ru�_id
, size_�
num_�gs
) {

951 i�(
ru�_id
 =�
RULE_�om_��n
) {

955 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 0);

956 i�(
	`MP_PARSE_NODE_IS_NULL
(
�
)) {

958 } i�(
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
RULE_��li�_comp
)) {

964 } i�(
ru�_id
 =�
RULE_��li�_comp
) {

967 
	`as��
(
num_�gs
 == 2);

968 
mp_�r�_node_t
 
�
 = 
	`�ek_�su�
(
�r�r
, 0);

969 i�(
	`MP_PARSE_NODE_IS_STRUCT
(
�
)) {

970 
mp_�r�_node_�ru�_t
 *
�s
 = (mp_�r�_node_�ru�_�*)
�
;

971 i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
RULE_��li�_comp_3b
) {

973 
	`p�_�su�
(
�r�r
);

974 --
num_�gs
;

975 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
RULE_��li�_comp_3c
) {

977 
	`p�_�su�
(
�r�r
);

978 
	`as��
(
�
 =�
	`�ek_�su�
(
�r�r
, 0));

979 
�s
->
k�d_num_nodes
 = 
ru�_id
 | 
	`MP_PARSE_NODE_STRUCT_NUM_NODES
(pns) << 8;

981 } i�(
	`MP_PARSE_NODE_STRUCT_KIND
(
�s
�=�
RULE_comp_f�
) {

989 } i�(
ru�_id
 =�
RULE_��li�_comp_3c
) {

991 ++
num_�gs
;

994 #i�
MICROPY_COMP_CONST_FOLDING


995 i�(
	`f�d_logi�l_cڡ�ts
(
�r�r
, 
ru�_id
, &
num_�gs
)) {

999 i�(
	`f�d_cڡ�ts
(
�r�r
, 
ru�_id
, 
num_�gs
)) {

1005 #i�
MICROPY_COMP_CONST_TUPLE


1006 i�(
	`bu�d_tu�e
(
�r�r
, 
�c_l�e
, 
ru�_id
, 
num_�gs
)) {

1012 
mp_�r�_node_�ru�_t
 *
�
 = 
	`�r�r_�loc
(
�r�r
, (mp_�r�_node_�ru�_t�+ (
mp_�r�_node_t
�* 
num_�gs
);

1013 
�
->
sour�_l�e
 = 
�c_l�e
;

1014 
�
->
k�d_num_nodes
 = (
ru�_id
 & 0xff�| (
num_�gs
 << 8);

1015 
size_t
 
i
 = 
num_�gs
; i > 0; i--) {

1016 
�
->
nodes
[
i
 - 1] = 
	`p�_�su�
(
�r�r
);

1018 i�(
ru�_id
 =�
RULE_��li�_comp_3c
) {

1020 
	`push_�su�_node
(
�r�r
, (
mp_�r�_node_t
)
�
);

1022 
	`push_�su�_node
(
�r�r
, (
mp_�r�_node_t
)
�
);

1023 
	}
}

1025 
mp_�r�_��_t
 
	$mp_�r�
(
mp_�x�_t
 *
�x
, 
mp_�r�_�put_k�d_t
 
�put_k�d
) {

1027 
	`MP_DEFINE_NLR_JUMP_CALLBACK_FUNCTION_1
(
�x
, 
mp_�x�_�
, 
�x
);

1028 
	`�r_push_jump_��back
(&
�x
.
��back
, 
mp_��_fun�i�_1_�om_�r_jump_��back
);

1032 
�r�r_t
 
�r�r
;

1034 
�r�r
.
ru�_�ack_�loc
 = 
MICROPY_ALLOC_PARSE_RULE_INIT
;

1035 
�r�r
.
ru�_�ack_t�
 = 0;

1036 
�r�r
.
ru�_�ack
 = 
	`m_�w
(
ru�_�ack_t
,���r.
ru�_�ack_�loc
);

1038 
�r�r
.
�su�_�ack_�loc
 = 
MICROPY_ALLOC_PARSE_RESULT_INIT
;

1039 
�r�r
.
�su�_�ack_t�
 = 0;

1040 
�r�r
.
�su�_�ack
 = 
	`m_�w
(
mp_�r�_node_t
,���r.
�su�_�ack_�loc
);

1042 
�r�r
.
�x�
 = 
�x
;

1044 
�r�r
.
��
.
chunk
 = 
NULL
;

1045 
�r�r
.
cur_chunk
 = 
NULL
;

1047 #i�
MICROPY_COMP_CONST


1048 
	`mp_m�_��
(&
�r�r
.
cڡs
, 0);

1052 
size_t
 
t�_�v�_ru�
;

1053 
�put_k�d
) {

1054 
MP_PARSE_SINGLE_INPUT
:

1055 
t�_�v�_ru�
 = 
RULE_s�g�_�put
;

1057 
MP_PARSE_EVAL_INPUT
:

1058 
t�_�v�_ru�
 = 
RULE_ev�_�put
;

1061 
t�_�v�_ru�
 = 
RULE_f�e_�put
;

1063 
	`push_ru�
(&
�r�r
, 
�x
->
tok_l�e
, 
t�_�v�_ru�
, 0);

1067 
bo�
 
back�ack
 = 
�l�
;

1070 
�xt_ru�
:

1071 i�(
�r�r
.
ru�_�ack_t�
 == 0) {

1076 
size_t
 
i
;

1077 
size_t
 
ru�_�c_l�e
;

1078 
u�t8_t
 
ru�_id
 = 
	`p�_ru�
(&
�r�r
, &
i
, &
ru�_�c_l�e
);

1079 
u�t8_t
 
ru�_a�
 = 
ru�_a�_�b�
[
ru�_id
];

1080 cڡ 
u�t16_t
 *
ru�_�g
 = 
	`g�_ru�_�g
(
ru�_id
);

1081 
size_t
 
n
 = 
ru�_a�
 & 
RULE_ACT_ARG_MASK
;

1085 
	`��tf
("d�th=" 
UINT_FMT
 " ", 
�r�r
.
ru�_�ack_t�
);

1086 
j
 = 0; j < 
�r�r
.
ru�_�ack_t�
; ++j) {

1087 
	`��tf
(" ");

1089 
	`��tf
("%�n=" 
UINT_FMT
 " i=" UINT_FMT " bt=%d\n", 
ru�_�me_�b�
[
ru�_id
], 
n
, 
i
, 
back�ack
);

1092 
ru�_a�
 & 
RULE_ACT_KIND_MASK
) {

1093 
RULE_ACT_OR
:

1094 i�(
i
 > 0 && !
back�ack
) {

1095 
�xt_ru�
;

1097 
back�ack
 = 
�l�
;

1099 ; 
i
 < 
n
; ++i) {

1100 
u�t16_t
 
k�d
 = 
ru�_�g
[
i
] & 
RULE_ARG_KIND_MASK
;

1101 i�(
k�d
 =�
RULE_ARG_TOK
) {

1102 i�(
�x
->
tok_k�d
 =�(
ru�_�g
[
i
] & 
RULE_ARG_ARG_MASK
)) {

1103 
	`push_�su�_tok�
(&
�r�r
, 
ru�_id
);

1104 
	`mp_�x�_to_�xt
(
�x
);

1105 
�xt_ru�
;

1108 
	`as��
(
k�d
 =�
RULE_ARG_RULE
);

1109 i�(
i
 + 1 < 
n
) {

1110 
	`push_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
 + 1);

1112 
	`push_ru�_�om_�g
(&
�r�r
, 
ru�_�g
[
i
]);

1113 
�xt_ru�
;

1116 
back�ack
 = 
�ue
;

1119 
RULE_ACT_AND
: {

1122 i�(
back�ack
) {

1123 
	`as��
(
i
 > 0);

1124 i�((
ru�_�g
[
i
 - 1] & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_OPT_RULE
) {

1126 
	`push_�su�_node
(&
�r�r
, 
MP_PARSE_NODE_NULL
);

1127 
back�ack
 = 
�l�
;

1130 i�(
i
 > 1) {

1132 
sy�ax_�r�
;

1134 
�xt_ru�
;

1140 ; 
i
 < 
n
; ++i) {

1141 i�((
ru�_�g
[
i
] & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_TOK
) {

1143 
mp_tok�_k�d_t
 
tok_k�d
 = 
ru�_�g
[
i
] & 
RULE_ARG_ARG_MASK
;

1144 i�(
�x
->
tok_k�d
 ==�ok_kind) {

1146 i�(
tok_k�d
 =�
MP_TOKEN_NAME
) {

1147 
	`push_�su�_tok�
(&
�r�r
, 
ru�_id
);

1149 
	`mp_�x�_to_�xt
(
�x
);

1152 i�(
i
 > 0) {

1154 
sy�ax_�r�
;

1157 
back�ack
 = 
�ue
;

1158 
�xt_ru�
;

1162 
	`push_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
 + 1);

1163 
	`push_ru�_�om_�g
(&
�r�r
, 
ru�_�g
[
i
]);

1164 
�xt_ru�
;

1168 
	`as��
(
i
 =�
n
);

1172 #i�!
MICROPY_ENABLE_DOC_STRING


1174 i�(
�put_k�d
 !�
MP_PARSE_SINGLE_INPUT
 && 
ru�_id
 =�
RULE_ex�_�mt
 && 
	`�ek_�su�
(&
�r�r
, 0�=�
MP_PARSE_NODE_NULL
) {

1175 
mp_�r�_node_t
 
p
 = 
	`�ek_�su�
(&
�r�r
, 1);

1176 i�((
	`MP_PARSE_NODE_IS_LEAF
(
p
�&& !
	`MP_PARSE_NODE_IS_ID
(p))

1177 || 
	`MP_PARSE_NODE_IS_STRUCT_KIND
(
p
, 
RULE_cڡ_obje�
)) {

1178 
	`p�_�su�
(&
�r�r
);

1179 
	`p�_�su�
(&
�r�r
);

1183 
	`push_�su�_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
RULE_�ss_�mt
, 0);

1190 
i
 = 0;

1191 
size_t
 
num_n�_n�
 = 0;

1192 
size_t
 
x
 = 
n
; x > 0;) {

1193 --
x
;

1194 i�((
ru�_�g
[
x
] & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_TOK
) {

1195 
mp_tok�_k�d_t
 
tok_k�d
 = 
ru�_�g
[
x
] & 
RULE_ARG_ARG_MASK
;

1196 i�(
tok_k�d
 =�
MP_TOKEN_NAME
) {

1198 
i
 += 1;

1199 
num_n�_n�
 += 1;

1203 i�(
	`�ek_�su�
(&
�r�r
, 
i
�!�
MP_PARSE_NODE_NULL
) {

1204 
num_n�_n�
 += 1;

1206 
i
 += 1;

1210 i�(
num_n�_n�
 =�1 && (
ru�_a�
 & 
RULE_ACT_ALLOW_IDENT
)) {

1212 
mp_�r�_node_t
 
�
 = 
MP_PARSE_NODE_NULL
;

1213 
size_t
 
x
 = 0; x < 
i
; ++x) {

1214 
mp_�r�_node_t
 
�2
 = 
	`p�_�su�
(&
�r�r
);

1215 i�(
�2
 !�
MP_PARSE_NODE_NULL
) {

1216 
�
 = 
�2
;

1219 
	`push_�su�_node
(&
�r�r
, 
�
);

1223 i�(
ru�_a�
 & 
RULE_ACT_ADD_BLANK
) {

1225 
	`push_�su�_node
(&
�r�r
, 
MP_PARSE_NODE_NULL
);

1226 
i
 += 1;

1229 
	`push_�su�_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
);

1235 
	`as��
((
ru�_a�
 & 
RULE_ACT_KIND_MASK
�=�
RULE_ACT_LIST
);

1240 
bo�
 
had_�a��g_�p
;

1241 i�(
back�ack
) {

1242 
li�_back�ack
:

1243 
had_�a��g_�p
 = 
�l�
;

1244 i�(
n
 == 2) {

1245 i�(
i
 == 1) {

1247 
�xt_ru�
;

1250 
back�ack
 = 
�l�
;

1253 i�(
i
 == 1) {

1255 
�xt_ru�
;

1256 } i�((
i
 & 1) == 1) {

1258 i�(
n
 == 3) {

1260 
had_�a��g_�p
 = 
�ue
;

1261 
back�ack
 = 
�l�
;

1264 
sy�ax_�r�
;

1268 
back�ack
 = 
�l�
;

1273 
size_t
 
�g
 = 
ru�_�g
[
i
 & 1 & 
n
];

1274 i�((
�g
 & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_TOK
) {

1275 i�(
�x
->
tok_k�d
 =�(
�g
 & 
RULE_ARG_ARG_MASK
)) {

1276 i�(
i
 & 1 & 
n
) {

1279 
	`push_�su�_tok�
(&
�r�r
, 
ru�_id
);

1281 
	`mp_�x�_to_�xt
(
�x
);

1283 
i
 += 1;

1286 
i
 += 1;

1287 
back�ack
 = 
�ue
;

1288 
li�_back�ack
;

1291 
	`as��
((
�g
 & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_RULE
);

1292 
	`push_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
 + 1);

1293 
	`push_ru�_�om_�g
(&
�r�r
, 
�g
);

1294 
�xt_ru�
;

1298 
	`as��
(
i
 >= 1);

1301 
i
 -= 1;

1302 i�((
n
 & 1�&& (
ru�_�g
[1] & 
RULE_ARG_KIND_MASK
�=�
RULE_ARG_TOK
) {

1304 
i
 = (i + 1) / 2;

1307 i�(
i
 == 1) {

1309 i�(
had_�a��g_�p
) {

1311 
	`push_�su�_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
);

1316 
	`push_�su�_ru�
(&
�r�r
, 
ru�_�c_l�e
, 
ru�_id
, 
i
);

1323 #i�
MICROPY_COMP_CONST


1324 
	`mp_m�_de��
(&
�r�r
.
cڡs
);

1328 i�(
�r�r
.
cur_chunk
 !�
NULL
) {

1329 ()
	`m_��w_maybe
(
by�
, 
�r�r
.
cur_chunk
,

1330 (
mp_�r�_chunk_t
�+ 
�r�r
.
cur_chunk
->
�loc
,

1331 (
mp_�r�_chunk_t
�+ 
�r�r
.
cur_chunk
->
uni�_
.
u�d
,

1332 
�l�
);

1333 
�r�r
.
cur_chunk
->
�loc
 =���r.cur_chunk->
uni�_
.
u�d
;

1334 
�r�r
.
cur_chunk
->
uni�_
.
�xt
 =���r.
��
.
chunk
;

1335 
�r�r
.
��
.
chunk
 =���r.
cur_chunk
;

1339 
�x
->
tok_k�d
 !�
MP_TOKEN_END


1340 || 
�r�r
.
�su�_�ack_t�
 == 0

1342 
sy�ax_�r�
:;

1343 
mp_obj_t
 
exc
;

1344 i�(
�x
->
tok_k�d
 =�
MP_TOKEN_INDENT
) {

1345 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ind��ti�E��
,

1346 
	`MP_ERROR_TEXT
("unexpected indent"));

1347 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_DEDENT_MISMATCH
) {

1348 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ind��ti�E��
,

1349 
	`MP_ERROR_TEXT
("unindent doesn't match�ny outer indent�evel"));

1350 #i�
MICROPY_PY_FSTRINGS


1351 } i�(
�x
->
tok_k�d
 =�
MP_TOKEN_MALFORMED_FSTRING
) {

1352 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
,

1353 
	`MP_ERROR_TEXT
("malformed f-string"));

1356 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Sy�axE��
,

1357 
	`MP_ERROR_TEXT
("invalid syntax"));

1361 
	`mp_obj_ex��i�_add_�a�back
(
exc
, 
�x
->
sour�_�me
,�ex->
tok_l�e
, 
MP_QSTRnu�
);

1362 
	`�r_�i�
(
exc
);

1366 
	`as��
(
�r�r
.
�su�_�ack_t�
 == 1);

1367 
�r�r
.
��
.
ro�
 =���r.
�su�_�ack
[0];

1370 
	`m_d�
(
ru�_�ack_t
, 
�r�r
.
ru�_�ack
,���r.
ru�_�ack_�loc
);

1371 
	`m_d�
(
mp_�r�_node_t
, 
�r�r
.
�su�_�ack
,���r.
�su�_�ack_�loc
);

1374 
	`�r_p�_jump_��back
(
�ue
);

1376  
�r�r
.
��
;

1377 
	}
}

1379 
	$mp_�r�_��_��r
(
mp_�r�_��_t
 *
��
) {

1380 
mp_�r�_chunk_t
 *
chunk
 = 
��
->chunk;

1381 
chunk
 !�
NULL
) {

1382 
mp_�r�_chunk_t
 *
�xt
 = 
chunk
->
uni�_
.next;

1383 
	`m_d�
(
by�
, 
chunk
, (
mp_�r�_chunk_t
�+ chunk->
�loc
);

1384 
chunk
 = 
�xt
;

1386 
��
->
chunk
 = 
NULL
;

1387 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parse.h

26 #i�de�
MICROPY_INCLUDED_PY_PARSE_H


27 
	#MICROPY_INCLUDED_PY_PARSE_H


	)

29 
	~<�ddef.h
>

30 
	~<�d�t.h
>

32 
	~"py/obj.h
"

34 
	g_mp_�x�_t
;

44 
	#MP_PARSE_NODE_NULL
 (0)

	)

45 
	#MP_PARSE_NODE_SMALL_INT
 (0x1)

	)

46 
	#MP_PARSE_NODE_ID
 (0x02)

	)

47 
	#MP_PARSE_NODE_STRING
 (0x06)

	)

48 
	#MP_PARSE_NODE_TOKEN
 (0x0a)

	)

50 
u���_t
 
	tmp_�r�_node_t
;

52 
	s_mp_�r�_node_�ru�_t
 {

53 
u�t32_t
 
	msour�_l�e
;

54 
u�t32_t
 
	mk�d_num_nodes
;

55 
mp_�r�_node_t
 
	mnodes
[];

56 } 
	tmp_�r�_node_�ru�_t
;

61 
	#MP_PARSE_NODE_IS_NULL
(
�
�(�n�=�
MP_PARSE_NODE_NULL
)

	)

62 
	#MP_PARSE_NODE_IS_LEAF
(
�
�(�n�& 3)

	)

63 
	#MP_PARSE_NODE_IS_STRUCT
(
�
�(�n�!�
MP_PARSE_NODE_NULL
 && (�n�& 3�=�0)

	)

64 
	#MP_PARSE_NODE_IS_STRUCT_KIND
(
�
, 
k
�(�n�!�
MP_PARSE_NODE_NULL
 && (�n�& 3�=�0 && 
	`MP_PARSE_NODE_STRUCT_KIND
((
mp_�r�_node_�ru�_t
 *)�n)�=�(k))

	)

66 
	#MP_PARSE_NODE_IS_SMALL_INT
(
�
�((�n�& 0x1�=�
MP_PARSE_NODE_SMALL_INT
)

	)

67 
	#MP_PARSE_NODE_IS_ID
(
�
�((�n�& 0x0f�=�
MP_PARSE_NODE_ID
)

	)

68 
	#MP_PARSE_NODE_IS_TOKEN
(
�
�((�n�& 0x0f�=�
MP_PARSE_NODE_TOKEN
)

	)

69 
	#MP_PARSE_NODE_IS_TOKEN_KIND
(
�
, 
k
�(�n�=�(
MP_PARSE_NODE_TOKEN
 | ((k�<< 4)))

	)

71 
	#MP_PARSE_NODE_LEAF_KIND
(
�
�(�n�& 0x0f)

	)

72 
	#MP_PARSE_NODE_LEAF_ARG
(
�
�(((
u���_t
)�n)�>> 4)

	)

73 
	#MP_PARSE_NODE_LEAF_SMALL_INT
(
�
�(((
mp_�t_t
)(
���_t
)�n)�>> 1)

	)

74 
	#MP_PARSE_NODE_STRUCT_KIND
(
�s
�(�ns)->
k�d_num_nodes
 & 0xff)

	)

75 
	#MP_PARSE_NODE_STRUCT_NUM_NODES
(
�s
�(�ns)->
k�d_num_nodes
 >> 8)

	)

77 
�l�e
 
mp_�r�_node_t
 
	$mp_�r�_node_�w_sm�l_�t
(
mp_�t_t
 
v�
) {

78  (
mp_�r�_node_t
)(
MP_PARSE_NODE_SMALL_INT
 | ((
mp_u�t_t
)
v�
 << 1));

79 
	}
}

81 
�l�e
 
mp_�r�_node_t
 
	$mp_�r�_node_�w_�af
(
size_t
 
k�d
, 
mp_�t_t
 
�g
) {

82  (
mp_�r�_node_t
)(
k�d
 | ((
mp_u�t_t
)
�g
 << 4));

83 
	}
}

85 
�l�e
 
mp_obj_t
 
	$mp_�r�_node_ex�a�_cڡ_obje�
(
mp_�r�_node_�ru�_t
 *
�s
) {

86 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


88  (
u�t64_t
)
�s
->
nodes
[0] | ((uint64_t)pns->nodes[1] << 32);

90  (
mp_obj_t
)
�s
->
nodes
[0];

92 
	}
}

94 
bo�
 
mp_�r�_node_is_cڡ_�l�
(
mp_�r�_node_t
 
�
);

95 
bo�
 
mp_�r�_node_is_cڡ_�ue
(
mp_�r�_node_t
 
�
);

96 
bo�
 
mp_�r�_node_g�_�t_maybe
(
mp_�r�_node_t
 
�
, 
mp_obj_t
 *
o
);

97 
size_t
 
mp_�r�_node_ex�a�_li�
(
mp_�r�_node_t
 *
�
, size_�
�_k�d
, mp_�r�_node_�**
nodes
);

98 
mp_�r�_node_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_�r�_node_t
 
�
, 
size_t
 
�d�t
);

101 
	mMP_PARSE_SINGLE_INPUT
,

102 
	mMP_PARSE_FILE_INPUT
,

103 
	mMP_PARSE_EVAL_INPUT
,

104 } 
	tmp_�r�_�put_k�d_t
;

106 
	s_mp_�r�_t
 {

107 
mp_�r�_node_t
 
	mro�
;

108 
_mp_�r�_chunk_t
 *
	mchunk
;

109 } 
	tmp_�r�_��_t
;

113 
mp_�r�_��_t
 
mp_�r�
(
_mp_�x�_t
 *
�x
, 
mp_�r�_�put_k�d_t
 
�put_k�d
);

114 
mp_�r�_��_��r
(
mp_�r�_��_t
 *
��
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenum.c

27 
	~<�dbo�.h
>

28 
	~<�dlib.h
>

30 
	~"py/ru�ime.h
"

31 
	~"py/�r�numba�.h
"

32 
	~"py/�r�num.h
"

33 
	~"py/sm�l�t.h
"

35 #i�
MICROPY_PY_BUILTINS_FLOAT


36 
	~<m�h.h
>

39 
NORETURN
 
	$�i�_exc
(
mp_obj_t
 
exc
, 
mp_�x�_t
 *
�x
) {

42 i�(
�x
 !�
NULL
) {

43 ((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
exc
))->
ty�
 = &
mp_ty�_Sy�axE��
;

44 
	`mp_obj_ex��i�_add_�a�back
(
exc
, 
�x
->
sour�_�me
,�ex->
tok_l�e
, 
MP_QSTRnu�
);

46 
	`�r_�i�
(
exc
);

47 
	}
}

49 
mp_obj_t
 
	$mp_�r�_num_��g�
(cڡ *
��ri�
 
�r_
, 
size_t
 
�n
, 
ba�
, 
mp_�x�_t
 *
�x
) {

50 cڡ 
by�
 *
��ri�
 
�r
 = (cڡ by� *)
�r_
;

51 cڡ 
by�
 *
��ri�
 
t�
 = 
�r
 + 
�n
;

52 
bo�
 
�g
 = 
�l�
;

53 
mp_obj_t
 
�t_v�
;

56 i�((
ba�
 != 0 && base < 2) || base > 36) {

58 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("int()�rg 2 must be >= 2�nd <= 36"));

62 ; 
�r
 < 
t�
 && 
	`unich�_is�a�
(*str); str++) {

66 i�(
�r
 < 
t�
) {

67 i�(*
�r
 == '+') {

68 
�r
++;

69 } i�(*
�r
 == '-') {

70 
�r
++;

71 
�g
 = 
�ue
;

76 
�r
 +�
	`mp_�r�_num_ba�
((cڡ *)�r, 
t�
 - s�, &
ba�
);

79 
mp_�t_t
 
�t_v�
 = 0;

80 cڡ 
by�
 *
��ri�
 
�r_v�_��t
 = 
�r
;

81 ; 
�r
 < 
t�
; str++) {

83 
mp_u�t_t
 
dig
 = *
�r
;

84 i�('0' <�
dig
 && dig <= '9') {

85 
dig
 -= '0';

86 } i�(
dig
 == '_') {

89 
dig
 |= 0x20;

90 i�('a' <�
dig
 && dig <= 'z') {

91 
dig
 -= 'a' - 10;

97 i�(
dig
 >�(
mp_u�t_t
)
ba�
) {

102 i�(
	`mp_sm�l_�t_mul_ov��ow
(
�t_v�
, 
ba�
)) {

103 
ov��ow
;

105 
�t_v�
 = i�_v� * 
ba�
 + 
dig
;

106 i�(!
	`MP_SMALL_INT_FITS
(
�t_v�
)) {

107 
ov��ow
;

112 i�(
�g
) {

113 
�t_v�
 = -int_val;

117 
�t_v�
 = 
	`MP_OBJ_NEW_SMALL_INT
(
�t_v�
);

119 
have_�t_v�
:

121 i�(
�r
 =�
�r_v�_��t
) {

122 
v�ue_�r�
;

126 ; 
�r
 < 
t�
 && 
	`unich�_is�a�
(*str); str++) {

130 i�(
�r
 !�
t�
) {

131 
v�ue_�r�
;

135  
�t_v�
;

137 
ov��ow
:

140 cڡ *
s2
 = (cڡ *)
�r_v�_��t
;

141 
�t_v�
 = 
	`mp_obj_�w_�t_�om_�r_�n
(&
s2
, 
t�
 - 
�r_v�_��t
, 
�g
, 
ba�
);

142 
�r
 = (cڡ 
by�
 *)
s2
;

143 
have_�t_v�
;

146 
v�ue_�r�
:

148 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


149 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_V�ueE��
,

150 
	`MP_ERROR_TEXT
("invalid syntax for integer"));

151 
	`�i�_exc
(
exc
, 
�x
);

152 #�i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NORMAL


153 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_msg_v�g
(&
mp_ty�_V�ueE��
,

154 
	`MP_ERROR_TEXT
("�v�id sy�ax f� i�eg� w�h ba� %d"), 
ba�
);

155 
	`�i�_exc
(
exc
, 
�x
);

157 
v�r_t
 
v�r
;

158 
mp_��t_t
 
��t
;

159 
	`v�r_��_��t
(&
v�r
, 50, &
��t
);

160 
	`mp_��tf
(&
��t
, "�v�id sy�ax f� i�eg� w�h ba� %d: ", 
ba�
);

161 
	`mp_�r_��t_qu�ed
(&
��t
, 
�r_v�_��t
, 
t�
 - s�_v�_��t, 
�ue
);

162 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_�g1
(&
mp_ty�_V�ueE��
,

163 
	`mp_obj_�w_�r_�om_utf8_v�r
(&
v�r
));

164 
	`�i�_exc
(
exc
, 
�x
);

167 
	}
}

170 
	mREAL_IMAG_STATE_START
 = 0,

171 
	mREAL_IMAG_STATE_HAVE_REAL
 = 1,

172 
	mREAL_IMAG_STATE_HAVE_IMAG
 = 2,

176 
	mPARSE_DEC_IN_INTG
,

177 
	mPARSE_DEC_IN_FRAC
,

178 
	mPARSE_DEC_IN_EXP
,

179 } 
	t�r�_dec_�_t
;

181 #i�
MICROPY_PY_BUILTINS_FLOAT


188 #i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_FLOAT


189 
	#DEC_VAL_MAX
 1e20F

	)

190 
	#SMALL_NORMAL_VAL
 (1e-37F)

	)

191 
	#SMALL_NORMAL_EXP
 (-37)

	)

192 
	#EXACT_POWER_OF_10
 (9)

	)

193 #�i�
MICROPY_FLOAT_IMPL
 =�
MICROPY_FLOAT_IMPL_DOUBLE


194 
	#DEC_VAL_MAX
 1e200

	)

195 
	#SMALL_NORMAL_VAL
 (1e-307)

	)

196 
	#SMALL_NORMAL_EXP
 (-307)

	)

197 
	#EXACT_POWER_OF_10
 (22)

	)

201 
	$ac��_dig�
(
mp_��t_t
 *
p_dec_v�
, 
dig
, *
p_exp_ex�a
, 
�
) {

203 i�(*
p_dec_v�
 < 
DEC_VAL_MAX
) {

205 *
p_dec_v�
 = 10 * *p_dec_v� + 
dig
;

206 i�(
�
 =�
PARSE_DEC_IN_FRAC
) {

207 --(*
p_exp_ex�a
);

212 i�(
�
 =�
PARSE_DEC_IN_INTG
) {

213 ++(*
p_exp_ex�a
);

216 
	}
}

219 #i�
MICROPY_PY_BUILTINS_COMPLEX


220 
mp_obj_t
 
	$mp_�r�_num_decim�
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�low_imag
, bo� 
f��_com�ex
, 
mp_�x�_t
 *
�x
)

222 
mp_obj_t
 
	$mp_�r�_num_��t
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�low_imag
, 
mp_�x�_t
 *
�x
)

225 #i�
MICROPY_PY_BUILTINS_FLOAT


227 cڡ *
t�
 = 
�r
 + 
�n
;

228 
mp_��t_t
 
dec_v�
 = 0;

229 
bo�
 
dec_�g
 = 
�l�
;

231 #i�
MICROPY_PY_BUILTINS_COMPLEX


232 
��_imag_��e
 = 
REAL_IMAG_STATE_START
;

233 
mp_��t_t
 
dec_��
 = 0;

234 
�r�_��t
:

238 ; 
�r
 < 
t�
 && 
	`unich�_is�a�
(*str); str++) {

242 i�(
�r
 < 
t�
) {

243 i�(*
�r
 == '+') {

244 
�r
++;

245 } i�(*
�r
 == '-') {

246 
�r
++;

247 
dec_�g
 = 
�ue
;

251 cڡ *
�r_v�_��t
 = 
�r
;

254 i�(
�r
 < 
t�
 && (str[0] | 0x20) == 'i') {

256 i�(
�r
 + 2 < 
t�
 && (str[1] | 0x20) == 'n' && (str[2] | 0x20) == 'f') {

258 
�r
 += 3;

259 
dec_v�
 = (
mp_��t_t
)
INFINITY
;

260 i�(
�r
 + 4 < 
t�
 && (str[0] | 0x20) == 'i' && (str[1] | 0x20) == 'n' && (str[2] | 0x20) == 'i' && (str[3] | 0x20) == 't' && (str[4] | 0x20) == 'y') {

262 
�r
 += 5;

265 } i�(
�r
 < 
t�
 && (str[0] | 0x20) == 'n') {

267 i�(
�r
 + 2 < 
t�
 && (str[1] | 0x20) == 'a' && (str[2] | 0x20) == 'n') {

269 
�r
 += 3;

270 
dec_v�
 = 
	`MICROPY_FLOAT_C_FUN
(
�n
)("");

274 
�r�_dec_�_t
 
�
 = 
PARSE_DEC_IN_INTG
;

275 
bo�
 
exp_�g
 = 
�l�
;

276 
exp_v�
 = 0;

277 
exp_ex�a
 = 0;

278 
�a��g_z�os_�tg
 = 0, 
�a��g_z�os_�ac
 = 0;

279 
�r
 < 
t�
) {

280 
dig
 = *
�r
++;

281 i�('0' <�
dig
 && dig <= '9') {

282 
dig
 -= '0';

283 i�(
�
 =�
PARSE_DEC_IN_EXP
) {

287 i�(
exp_v�
 < (
INT_MAX
 / 2 - 9) / 10) {

288 
exp_v�
 = 10 *�xp_v� + 
dig
;

291 i�(
dig
 =�0 || 
dec_v�
 >�
DEC_VAL_MAX
) {

294 i�(
�
 =�
PARSE_DEC_IN_INTG
) {

295 ++
�a��g_z�os_�tg
;

297 ++
�a��g_z�os_�ac
;

301 
�a��g_z�os_�tg
) {

302 
	`ac��_dig�
(&
dec_v�
, 0, &
exp_ex�a
, 
PARSE_DEC_IN_INTG
);

303 --
�a��g_z�os_�tg
;

305 
�a��g_z�os_�ac
) {

306 
	`ac��_dig�
(&
dec_v�
, 0, &
exp_ex�a
, 
PARSE_DEC_IN_FRAC
);

307 --
�a��g_z�os_�ac
;

309 
	`ac��_dig�
(&
dec_v�
, 
dig
, &
exp_ex�a
, 
�
);

312 } i�(
�
 =�
PARSE_DEC_IN_INTG
 && 
dig
 == '.') {

313 
�
 = 
PARSE_DEC_IN_FRAC
;

314 } i�(
�
 !�
PARSE_DEC_IN_EXP
 && ((
dig
 | 0x20) == 'e')) {

315 
�
 = 
PARSE_DEC_IN_EXP
;

316 i�(
�r
 < 
t�
) {

317 i�(
�r
[0] == '+') {

318 
�r
++;

319 } i�(
�r
[0] == '-') {

320 
�r
++;

321 
exp_�g
 = 
�ue
;

324 i�(
�r
 =�
t�
) {

325 
v�ue_�r�
;

327 } i�(
dig
 == '_') {

331 
�r
--;

337 i�(
exp_�g
) {

338 
exp_v�
 = -exp_val;

342 
exp_v�
 +�
exp_ex�a
 + 
�a��g_z�os_�tg
;

343 i�(
exp_v�
 < 
SMALL_NORMAL_EXP
) {

344 
exp_v�
 -�
SMALL_NORMAL_EXP
;

345 
dec_v�
 *�
SMALL_NORMAL_VAL
;

353 i�(
exp_v�
 < 0 &&�xp_v� >�-
EXACT_POWER_OF_10
) {

354 
dec_v�
 /�
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, -
exp_v�
);

356 
dec_v�
 *�
	`MICROPY_FLOAT_C_FUN
(
pow
)(10, 
exp_v�
);

360 i�(
�low_imag
 && 
�r
 < 
t�
 && (*str | 0x20) == 'j') {

361 #i�
MICROPY_PY_BUILTINS_COMPLEX


362 i�(
�r
 =�
�r_v�_��t
) {

364 
dec_v�
 = 1;

366 ++
�r
;

367 
��_imag_��e
 |�
REAL_IMAG_STATE_HAVE_IMAG
;

369 
	`�i�_exc
(
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("com�ex v�ue�n� su�܋d")), 
�x
);

374 i�(
dec_�g
) {

375 
dec_v�
 = -dec_val;

379 i�(
�r
 =�
�r_v�_��t
) {

380 
v�ue_�r�
;

384 ; 
�r
 < 
t�
 && 
	`unich�_is�a�
(*str); str++) {

388 i�(
�r
 !�
t�
) {

389 #i�
MICROPY_PY_BUILTINS_COMPLEX


390 i�(
f��_com�ex
 && 
��_imag_��e
 =�
REAL_IMAG_STATE_START
) {

392 
dec_��
 = 
dec_v�
;

393 
dec_v�
 = 0;

394 
��_imag_��e
 |�
REAL_IMAG_STATE_HAVE_REAL
;

395 
�r�_��t
;

398 
v�ue_�r�
;

401 #i�
MICROPY_PY_BUILTINS_COMPLEX


402 i�(
��_imag_��e
 =�
REAL_IMAG_STATE_HAVE_REAL
) {

404 
v�ue_�r�
;

410 #i�
MICROPY_PY_BUILTINS_COMPLEX


411 i�(
��_imag_��e
 !�
REAL_IMAG_STATE_START
) {

412  
	`mp_obj_�w_com�ex
(
dec_��
, 
dec_v�
);

413 } i�(
f��_com�ex
) {

414  
	`mp_obj_�w_com�ex
(
dec_v�
, 0);

418  
	`mp_obj_�w_��t
(
dec_v�
);

420 
v�ue_�r�
:

421 
	`�i�_exc
(
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("�v�id sy�ax f܂umb�")), 
�x
);

424 
	`�i�_exc
(
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("decim��umb��n� su�܋d")), 
�x
);

426 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenum.h

26 #i�de�
MICROPY_INCLUDED_PY_PARSENUM_H


27 
	#MICROPY_INCLUDED_PY_PARSENUM_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/�x�.h
"

31 
	~"py/obj.h
"

35 
mp_obj_t
 
mp_�r�_num_��g�
(cڡ *
��ri�
 
�r
, 
size_t
 
�n
, 
ba�
, 
mp_�x�_t
 *
�x
);

37 #i�
MICROPY_PY_BUILTINS_COMPLEX


38 
mp_obj_t
 
mp_�r�_num_decim�
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�low_imag
, bo� 
f��_com�ex
, 
mp_�x�_t
 *
�x
);

40 
�l�e
 
mp_obj_t
 
	$mp_�r�_num_��t
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�low_imag
, 
mp_�x�_t
 *
�x
) {

41  
	`mp_�r�_num_decim�
(
�r
, 
�n
, 
�low_imag
, 
�l�
, 
�x
);

42 
	}
}

44 
�l�e
 
mp_obj_t
 
	$mp_�r�_num_com�ex
(cڡ *
�r
, 
size_t
 
�n
, 
mp_�x�_t
 *
�x
) {

45  
	`mp_�r�_num_decim�
(
�r
, 
�n
, 
�ue
,�rue, 
�x
);

46 
	}
}

48 
mp_obj_t
 
mp_�r�_num_��t
(cڡ *
�r
, 
size_t
 
�n
, 
bo�
 
�low_imag
, 
mp_�x�_t
 *
�x
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenumbase.c

27 
	~"py/mpc�fig.h
"

28 
	~"py/misc.h
"

29 
	~"py/�r�numba�.h
"

33 
size_t
 
	$mp_�r�_num_ba�
(cڡ *
�r
, 
size_t
 
�n
, *
ba�
) {

34 cڡ 
by�
 *
p
 = (cڡ by� *)
�r
;

35 i�(
�n
 <= 1) {

36 
no_�efix
;

38 
unich�
 
c
 = *(
p
++);

39 i�((*
ba�
 =�0 || *ba� =�16�&& 
c
 == '0') {

40 
c
 = *(
p
++);

41 i�((
c
 | 32) == 'x') {

42 *
ba�
 = 16;

43 } i�(*
ba�
 =�0 && (
c
 | 32) == 'o') {

44 *
ba�
 = 8;

45 } i�(*
ba�
 =�0 && (
c
 | 32) == 'b') {

46 *
ba�
 = 2;

48 i�(*
ba�
 == 0) {

49 *
ba�
 = 10;

51 
p
 -= 2;

53 } i�(*
ba�
 =�8 && 
c
 == '0') {

54 
c
 = *(
p
++);

55 i�((
c
 | 32) != 'o') {

56 
p
 -= 2;

58 } i�(*
ba�
 =�2 && 
c
 == '0') {

59 
c
 = *(
p
++);

60 i�((
c
 | 32) != 'b') {

61 
p
 -= 2;

64 
p
--;

65 
no_�efix
:

66 i�(*
ba�
 == 0) {

67 *
ba�
 = 10;

70  
p
 - (cڡ 
by�
 *)
�r
;

71 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenumbase.h

26 #i�de�
MICROPY_INCLUDED_PY_PARSENUMBASE_H


27 
	#MICROPY_INCLUDED_PY_PARSENUMBASE_H


	)

29 
	~"py/mpc�fig.h
"

31 
size_t
 
mp_�r�_num_ba�
(cڡ *
�r
, size_�
�n
, *
ba�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\persistentcode.c

27 
	~<�d�t.h
>

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/�ad�.h
"

33 
	~"py/�tiveglue.h
"

34 
	~"py/�rsi��tcode.h
"

35 
	~"py/bc0.h
"

36 
	~"py/obj�r.h
"

37 
	~"py/m�h�ad.h
"

39 #i�
MICROPY_PERSISTENT_CODE_LOAD
 || 
MICROPY_PERSISTENT_CODE_SAVE


41 
	~"py/sm�l�t.h
"

48 
	#QSTR_LAST_STATIC
 
MP_QSTR_z�


	)

50 #i�
MICROPY_DYNAMIC_COMPILER


51 
	#MPY_FEATURE_ARCH_DYNAMIC
 
mp_dy�mic_comp��
.
�tive_�ch


	)

53 
	#MPY_FEATURE_ARCH_DYNAMIC
 
MPY_FEATURE_ARCH


	)

56 
	s_by�code_��ude_t
 {

57 
u�t
 
	mn_��e
;

58 
u�t
 
	mn_exc_�ack
;

59 
u�t
 
	msc�e_�ags
;

60 
u�t
 
	mn_pos_�gs
;

61 
u�t
 
	mn_kw�ly_�gs
;

62 
u�t
 
	mn_def_pos_�gs
;

63 
u�t
 
	mcode_�fo_size
;

64 } 
	tby�code_��ude_t
;

68 #i�
MICROPY_PERSISTENT_CODE_LOAD


70 
	~"py/�r�num.h
"

72 
�ad_by�
(
mp_�ad�_t
 *
�ad�
);

73 
size_t
 
�ad_u�t
(
mp_�ad�_t
 *
�ad�
);

75 #i�
MICROPY_EMIT_MACHINE_CODE


77 
	s_�loc_�fo_t
 {

78 
mp_�ad�_t
 *
	m�ad�
;

79 
mp_modu�_cڋxt_t
 *
	mcڋxt
;

80 
u�t8_t
 *
	mrod�a
;

81 
u�t8_t
 *
	mbss
;

82 } 
	t�loc_�fo_t
;

84 
	$mp_�tive_�lo��
(*
ri_�
, 
u�t8_t
 *
�xt
, 
u���_t
 
�loc_�xt
) {

86 
�loc_�fo_t
 *
ri
 = 
ri_�
;

87 
u�t8_t
 
�
;

88 
u���_t
 *
addr_to_adju�
 = 
NULL
;

89 (
�
 = 
	`�ad_by�
(
ri
->
�ad�
)) != 0xff) {

90 i�(
�
 & 1) {

92 
size_t
 
addr
 = 
	`�ad_u�t
(
ri
->
�ad�
);

93 i�((
addr
 & 1) == 0) {

95 
addr_to_adju�
 = &((
u���_t
 *)
�xt
)[
addr
 >> 1];

98 
addr_to_adju�
 = &((
u���_t
 *)
ri
->
rod�a
)[
addr
 >> 1];

101 
�
 >>= 1;

102 
u���_t
 
de�
;

103 
size_t
 
n
 = 1;

104 i�(
�
 <= 5) {

105 i�(
�
 & 1) {

107 
n
 = 
	`�ad_u�t
(
ri
->
�ad�
);

109 
�
 >>= 1;

110 i�(
�
 == 0) {

112 
de�
 = 
�loc_�xt
;

113 } i�(
�
 == 1) {

115 
de�
 = (
u���_t
)
ri
->
rod�a
;

118 
de�
 = (
u���_t
)
ri
->
bss
;

120 } i�(
�
 == 6) {

122 
de�
 = (
u���_t
)
ri
->
cڋxt
->
cڡ�ts
.
q�r_�b�
;

123 } i�(
�
 == 7) {

125 
de�
 = (
u���_t
)
ri
->
cڋxt
->
cڡ�ts
.
obj_�b�
;

126 } i�(
�
 == 8) {

128 
de�
 = (
u���_t
)&
mp_fun_�b�
;

131 
de�
 = ((
u���_t
 *)&
mp_fun_�b�
)[
�
 - 9];

133 
n
--) {

134 *
addr_to_adju�
++ +�
de�
;

137 
	}
}

141 
	$�ad_by�
(
mp_�ad�_t
 *
�ad�
) {

142  
�ad�
->
	`�adby�
ԗd�->
d�a
);

143 
	}
}

145 
	$�ad_by�s
(
mp_�ad�_t
 *
�ad�
, 
by�
 *
buf
, 
size_t
 
�n
) {

146 
�n
-- > 0) {

147 *
buf
++ = 
�ad�
->
	`�adby�
ԗd�->
d�a
);

149 
	}
}

151 
size_t
 
	$�ad_u�t
(
mp_�ad�_t
 *
�ad�
) {

152 
size_t
 
unum
 = 0;

154 
by�
 
b
 = 
�ad�
->
	`�adby�
ԗd�->
d�a
);

155 
unum
 = (unum << 7�| (
b
 & 0x7f);

156 i�((
b
 & 0x80) == 0) {

160  
unum
;

161 
	}
}

163 
q�r
 
	$l�d_q�r
(
mp_�ad�_t
 *
�ad�
) {

164 
size_t
 
�n
 = 
	`�ad_u�t
(
�ad�
);

165 i�(
�n
 & 1) {

167  
�n
 >> 1;

169 
�n
 >>= 1;

170 *
�r
 = 
	`m_�w
(, 
�n
);

171 
	`�ad_by�s
(
�ad�
, (
by�
 *)
�r
, 
�n
);

172 
	`�ad_by�
(
�ad�
);

173 
q�r
 
q�
 = 
	`q�r_�om_��
(
�r
, 
�n
);

174 
	`m_d�
(, 
�r
, 
�n
);

175  
q�
;

176 
	}
}

178 
mp_obj_t
 
	$l�d_obj
(
mp_�ad�_t
 *
�ad�
) {

179 
by�
 
obj_ty�
 = 
	`�ad_by�
(
�ad�
);

180 #i�
MICROPY_EMIT_MACHINE_CODE


181 i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_FUN_TABLE
) {

182  
	`MP_OBJ_FROM_PTR
(&
mp_fun_�b�
);

185 i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_NONE
) {

186  
mp_cڡ_n�e
;

187 } i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_FALSE
) {

188  
mp_cڡ_�l�
;

189 } i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_TRUE
) {

190  
mp_cڡ_�ue
;

191 } i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_ELLIPSIS
) {

192  
	`MP_OBJ_FROM_PTR
(&
mp_cڡ_�l�sis_obj
);

194 
size_t
 
�n
 = 
	`�ad_u�t
(
�ad�
);

195 i�(
�n
 =�0 && 
obj_ty�
 =�
MP_PERSISTENT_OBJ_BYTES
) {

196 
	`�ad_by�
(
�ad�
);

197  
mp_cڡ_em�y_by�s
;

198 } i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_TUPLE
) {

199 
mp_obj_tu�e_t
 *
tu�e
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
�n
, 
NULL
));

200 
size_t
 
i
 = 0; i < 
�n
; ++i) {

201 
tu�e
->
�ems
[
i
] = 
	`l�d_obj
(
�ad�
);

203  
	`MP_OBJ_FROM_PTR
(
tu�e
);

205 
v�r_t
 
v�r
;

206 
	`v�r_��_�n
(&
v�r
, 
�n
);

207 
	`�ad_by�s
(
�ad�
, (
by�
 *)
v�r
.
buf
, 
�n
);

208 i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_STR
 || obj_ty� =�
MP_PERSISTENT_OBJ_BYTES
) {

209 
	`�ad_by�
(
�ad�
);

210 i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_STR
) {

211  
	`mp_obj_�w_�r_�om_utf8_v�r
(&
v�r
);

213  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

215 } i�(
obj_ty�
 =�
MP_PERSISTENT_OBJ_INT
) {

216  
	`mp_�r�_num_��g�
(
v�r
.
buf
, v�r.
�n
, 10, 
NULL
);

218 
	`as��
(
obj_ty�
 =�
MP_PERSISTENT_OBJ_FLOAT
 || obj_ty� =�
MP_PERSISTENT_OBJ_COMPLEX
);

219  
	`mp_�r�_num_��t
(
v�r
.
buf
, v�r.
�n
, 
obj_ty�
 =�
MP_PERSISTENT_OBJ_COMPLEX
, 
NULL
);

222 
	}
}

224 
mp_�w_code_t
 *
	$l�d_�w_code
(
mp_�ad�_t
 *
�ad�
, 
mp_modu�_cڋxt_t
 *
cڋxt
) {

226 
size_t
 
k�d_�n
 = 
	`�ad_u�t
(
�ad�
);

227 
k�d
 = (
k�d_�n
 & 3�+ 
MP_CODE_BYTECODE
;

228 
bo�
 
has_ch�d�n
 = !!(
k�d_�n
 & 4);

229 
size_t
 
fun_d�a_�n
 = 
k�d_�n
 >> 3;

231 #i�!
MICROPY_EMIT_MACHINE_CODE


232 i�(
k�d
 !�
MP_CODE_BYTECODE
) {

233 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("incompatible .mpy file"));

237 
u�t8_t
 *
fun_d�a
 = 
NULL
;

238 #i�
MICROPY_EMIT_MACHINE_CODE


239 
size_t
 
��ude_off�t
 = 0;

240 
mp_u�t_t
 
�tive_sc�e_�ags
 = 0;

241 
mp_u�t_t
 
�tive_n_pos_�gs
 = 0;

242 
mp_u�t_t
 
�tive_ty�_sig
 = 0;

245 i�(
k�d
 =�
MP_CODE_BYTECODE
) {

247 
fun_d�a
 = 
	`m_�w
(
u�t8_t
, 
fun_d�a_�n
);

249 
	`�ad_by�s
(
�ad�
, 
fun_d�a
, 
fun_d�a_�n
);

251 #i�
MICROPY_EMIT_MACHINE_CODE


254 
size_t
 
fun_�loc
;

255 
	`MP_PLAT_ALLOC_EXEC
(
fun_d�a_�n
, (**)&
fun_d�a
, &
fun_�loc
);

256 
	`�ad_by�s
(
�ad�
, 
fun_d�a
, 
fun_d�a_�n
);

258 i�(
k�d
 =�
MP_CODE_NATIVE_PY
) {

260 
��ude_off�t
 = 
	`�ad_u�t
(
�ad�
);

261 cڡ 
by�
 *
�
 = 
fun_d�a
 + 
��ude_off�t
;

262 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

263 
�tive_sc�e_�ags
 = 
sc�e_�ags
;

266 
�tive_sc�e_�ags
 = 
	`�ad_u�t
(
�ad�
);

267 i�(
k�d
 =�
MP_CODE_NATIVE_ASM
) {

268 
�tive_n_pos_�gs
 = 
	`�ad_u�t
(
�ad�
);

269 
�tive_ty�_sig
 = 
	`�ad_u�t
(
�ad�
);

275 
size_t
 
n_ch�d�n
 = 0;

276 
mp_�w_code_t
 **
ch�d�n
 = 
NULL
;

278 #i�
MICROPY_EMIT_MACHINE_CODE


280 
u�t8_t
 *
rod�a
 = 
NULL
;

281 
u�t8_t
 *
bss
 = 
NULL
;

282 i�(
k�d
 =�
MP_CODE_NATIVE_VIPER
) {

283 
size_t
 
rod�a_size
 = 0;

284 i�(
�tive_sc�e_�ags
 & 
MP_SCOPE_FLAG_VIPERRODATA
) {

285 
rod�a_size
 = 
	`�ad_u�t
(
�ad�
);

288 
size_t
 
bss_size
 = 0;

289 i�(
�tive_sc�e_�ags
 & 
MP_SCOPE_FLAG_VIPERBSS
) {

290 
bss_size
 = 
	`�ad_u�t
(
�ad�
);

293 i�(
rod�a_size
 + 
bss_size
 != 0) {

294 
bss_size
 = (
u���_t
)
	`MP_ALIGN
(bss_size, (uintptr_t));

295 
u�t8_t
 *
d�a
 = 
	`m_�w0
(u�t8_t, 
bss_size
 + 
rod�a_size
);

296 
bss
 = 
d�a
;

297 
rod�a
 = 
bss
 + 
bss_size
;

298 i�(
�tive_sc�e_�ags
 & 
MP_SCOPE_FLAG_VIPERRODATA
) {

299 
	`�ad_by�s
(
�ad�
, 
rod�a
, 
rod�a_size
);

305 
	`as��
(!
has_ch�d�n
);

306 
ch�d�n
 = (*)
d�a
;

312 i�(
has_ch�d�n
) {

313 
n_ch�d�n
 = 
	`�ad_u�t
(
�ad�
);

314 
ch�d�n
 = 
	`m_�w
(
mp_�w_code_t
 *, 
n_ch�d�n
 + (
k�d
 =�
MP_CODE_NATIVE_PY
));

315 
size_t
 
i
 = 0; i < 
n_ch�d�n
; ++i) {

316 
ch�d�n
[
i
] = 
	`l�d_�w_code
(
�ad�
, 
cڋxt
);

321 
mp_�w_code_t
 *
rc
 = 
	`mp_em�_glue_�w_�w_code
();

322 i�(
k�d
 =�
MP_CODE_BYTECODE
) {

323 cڡ 
by�
 *
�
 = 
fun_d�a
;

324 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

326 
	`mp_em�_glue_assign_by�code
(
rc
, 
fun_d�a
,

327 
ch�d�n
,

328 #i�
MICROPY_PERSISTENT_CODE_SAVE


329 
fun_d�a_�n
,

330 
n_ch�d�n
,

332 
sc�e_�ags
);

334 #i�
MICROPY_EMIT_MACHINE_CODE


336 cڡ 
u�t8_t
 *
��ude_�r
;

337 #i�
MICROPY_EMIT_NATIVE_PRELUDE_SEPARATE_FROM_MACHINE_CODE


338 i�(
k�d
 =�
MP_CODE_NATIVE_PY
) {

341 *
buf
 = 
fun_d�a
 + 
��ude_off�t
;

342 
size_t
 
n
 = 
fun_d�a_�n
 - 
��ude_off�t
;

343 
��ude_�r
 = 
	`mem�y
(
	`m_�w
(
u�t8_t
, 
n
), 
buf
,�);

348 
�loc_�fo_t
 
ri
 = {
�ad�
, 
cڋxt
, 
rod�a
, 
bss
};

349 #i�
	`def�ed
(
MP_PLAT_COMMIT_EXEC
)

350 *
�t_ri
 = (
�tive_sc�e_�ags
 & 
MP_SCOPE_FLAG_VIPERRELOC
�? &
ri
 : 
NULL
;

351 
fun_d�a
 = 
	`MP_PLAT_COMMIT_EXEC
(fun_d�a, 
fun_d�a_�n
, 
�t_ri
);

353 i�(
�tive_sc�e_�ags
 & 
MP_SCOPE_FLAG_VIPERRELOC
) {

354 #i�
MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE


360 i�(
	`MP_STATE_PORT
(
�ack_�loc_code_li�
�=�
MP_OBJ_NULL
) {

361 
	`MP_STATE_PORT
(
�ack_�loc_code_li�
��
	`mp_obj_�w_li�
(0, 
NULL
);

363 
	`mp_obj_li�_��nd
(
	`MP_STATE_PORT
(
�ack_�loc_code_li�
), 
	`MP_OBJ_FROM_PTR
(
fun_d�a
));

366 
	`mp_�tive_�lo��
(&
ri
, 
fun_d�a
, (
u���_t
)fun_data);

370 i�(
k�d
 =�
MP_CODE_NATIVE_PY
) {

371 #i�!
MICROPY_EMIT_NATIVE_PRELUDE_SEPARATE_FROM_MACHINE_CODE


372 
��ude_�r
 = 
fun_d�a
 + 
��ude_off�t
;

374 i�(
n_ch�d�n
 == 0) {

375 
ch�d�n
 = (*)
��ude_�r
;

377 
ch�d�n
[
n_ch�d�n
] = (*)
��ude_�r
;

382 
	`mp_em�_glue_assign_�tive
(
rc
, 
k�d
,

383 
fun_d�a
, 
fun_d�a_�n
,

384 
ch�d�n
,

385 #i�
MICROPY_PERSISTENT_CODE_SAVE


386 
n_ch�d�n
,

387 
��ude_off�t
,

389 
�tive_sc�e_�ags
, 
�tive_n_pos_�gs
, 
�tive_ty�_sig


393  
rc
;

394 
	}
}

396 
	$mp_�w_code_l�d
(
mp_�ad�_t
 *
�ad�
, 
mp_comp�ed_modu�_t
 *
cm
) {

398 
	`MP_DEFINE_NLR_JUMP_CALLBACK_FUNCTION_1
(
�x
, 
�ad�
->
�o�
,��d�->
d�a
);

399 
	`�r_push_jump_��back
(&
�x
.
��back
, 
mp_��_fun�i�_1_�om_�r_jump_��back
);

401 
by�
 
h�d�
[4];

402 
	`�ad_by�s
(
�ad�
, 
h�d�
, (header));

403 
by�
 
�ch
 = 
	`MPY_FEATURE_DECODE_ARCH
(
h�d�
[2]);

404 i�(
h�d�
[0] != 'M'

405 || 
h�d�
[1] !�
MPY_VERSION


406 || (
�ch
 !�
MP_NATIVE_ARCH_NONE
 && 
	`MPY_FEATURE_DECODE_SUB_VERSION
(
h�d�
[2]�!�
MPY_SUB_VERSION
)

407 || 
h�d�
[3] > 
MP_SMALL_INT_BITS
) {

408 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("incompatible .mpy file"));

410 i�(
	`MPY_FEATURE_DECODE_ARCH
(
h�d�
[2]�!�
MP_NATIVE_ARCH_NONE
) {

411 i�(!
	`MPY_FEATURE_ARCH_TEST
(
�ch
)) {

412 i�(
	`MPY_FEATURE_ARCH_TEST
(
MP_NATIVE_ARCH_NONE
)) {

415 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("native code in .mpy unsupported"));

417 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("incompatible .mpy�rch"));

422 
size_t
 
n_q�r
 = 
	`�ad_u�t
(
�ad�
);

423 
size_t
 
n_obj
 = 
	`�ad_u�t
(
�ad�
);

424 
	`mp_modu�_cڋxt_�loc_�b�s
(
cm
->
cڋxt
, 
n_q�r
, 
n_obj
);

427 
size_t
 
i
 = 0; i < 
n_q�r
; ++i) {

428 
cm
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[
i
] = 
	`l�d_q�r
(
�ad�
);

432 
size_t
 
i
 = 0; i < 
n_obj
; ++i) {

433 
cm
->
cڋxt
->
cڡ�ts
.
obj_�b�
[
i
] = 
	`l�d_obj
(
�ad�
);

437 
cm
->
rc
 = 
	`l�d_�w_code
(
�ad�
, cm->
cڋxt
);

439 #i�
MICROPY_PERSISTENT_CODE_SAVE


440 
cm
->
has_�tive
 = 
	`MPY_FEATURE_DECODE_ARCH
(
h�d�
[2]�!�
MP_NATIVE_ARCH_NONE
;

441 
cm
->
n_q�r
 =�_qstr;

442 
cm
->
n_obj
 =�_obj;

446 
	`�r_p�_jump_��back
(
�ue
);

447 
	}
}

449 
	$mp_�w_code_l�d_mem
(cڡ 
by�
 *
buf
, 
size_t
 
�n
, 
mp_comp�ed_modu�_t
 *
cڋxt
) {

450 
mp_�ad�_t
 
�ad�
;

451 
	`mp_�ad�_�w_mem
(&
�ad�
, 
buf
, 
�n
, 0);

452 
	`mp_�w_code_l�d
(&
�ad�
, 
cڋxt
);

453 
	}
}

455 #i�
MICROPY_HAS_FILE_READER


457 
	$mp_�w_code_l�d_f�e
(
q�r
 
f��ame
, 
mp_comp�ed_modu�_t
 *
cڋxt
) {

458 
mp_�ad�_t
 
�ad�
;

459 
	`mp_�ad�_�w_f�e
(&
�ad�
, 
f��ame
);

460 
	`mp_�w_code_l�d
(&
�ad�
, 
cڋxt
);

461 
	}
}

467 #i�
MICROPY_PERSISTENT_CODE_SAVE


469 
	~"py/obj�r.h
"

471 
	$mp_��t_by�s
(
mp_��t_t
 *
��t
, cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

472 
��t
->
	`��t_��
�r�t->
d�a
, (cڡ *)d�a, 
�n
);

473 
	}
}

475 
	#BYTES_FOR_INT
 ((
MP_BYTES_PER_OBJ_WORD
 * 8 + 6�/ 7)

	)

476 
	$mp_��t_u�t
(
mp_��t_t
 *
��t
, 
size_t
 
n
) {

477 
by�
 
buf
[
BYTES_FOR_INT
];

478 
by�
 *
p
 = 
buf
 + (buf);

479 *--
p
 = 
n
 & 0x7f;

480 
n
 >>= 7;

481 ; 
n
 != 0;� >>= 7) {

482 *--
p
 = 0x80 | (
n
 & 0x7f);

484 
��t
->
	`��t_��
�r�t->
d�a
, (*)
p
, 
buf
 + (buf) -�);

485 
	}
}

487 
	$�ve_q�r
(
mp_��t_t
 *
��t
, 
q�r
 
q�
) {

488 i�(
q�
 <�
QSTR_LAST_STATIC
) {

490 
	`mp_��t_u�t
(
��t
, 
q�
 << 1 | 1);

493 
size_t
 
�n
;

494 cڡ 
by�
 *
�r
 = 
	`q�r_d�a
(
q�
, &
�n
);

495 
	`mp_��t_u�t
(
��t
, 
�n
 << 1);

496 
	`mp_��t_by�s
(
��t
, 
�r
, 
�n
 + 1);

497 
	}
}

499 
	$�ve_obj
(
mp_��t_t
 *
��t
, 
mp_obj_t
 
o
) {

500 #i�
MICROPY_EMIT_MACHINE_CODE


501 i�(
o
 =�
	`MP_OBJ_FROM_PTR
(&
mp_fun_�b�
)) {

502 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_FUN_TABLE
;

503 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

506 i�(
	`mp_obj_is_�r_�_by�s
(
o
)) {

507 
by�
 
obj_ty�
;

508 i�(
	`mp_obj_is_�r
(
o
)) {

509 
obj_ty�
 = 
MP_PERSISTENT_OBJ_STR
;

511 
obj_ty�
 = 
MP_PERSISTENT_OBJ_BYTES
;

513 
size_t
 
�n
;

514 cڡ *
�r
 = 
	`mp_obj_�r_g�_d�a
(
o
, &
�n
);

515 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

516 
	`mp_��t_u�t
(
��t
, 
�n
);

517 
	`mp_��t_by�s
(
��t
, (cڡ 
by�
 *)
�r
, 
�n
 + 1);

518 } i�(
o
 =�
mp_cڡ_n�e
) {

519 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_NONE
;

520 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

521 } i�(
o
 =�
mp_cڡ_�l�
) {

522 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_FALSE
;

523 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

524 } i�(
o
 =�
mp_cڡ_�ue
) {

525 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_TRUE
;

526 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

527 } i�(
	`MP_OBJ_TO_PTR
(
o
�=�&
mp_cڡ_�l�sis_obj
) {

528 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_ELLIPSIS
;

529 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

530 } i�(
	`mp_obj_is_ty�
(
o
, &
mp_ty�_tu�e
)) {

531 
size_t
 
�n
;

532 
mp_obj_t
 *
�ems
;

533 
	`mp_obj_tu�e_g�
(
o
, &
�n
, &
�ems
);

534 
by�
 
obj_ty�
 = 
MP_PERSISTENT_OBJ_TUPLE
;

535 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

536 
	`mp_��t_u�t
(
��t
, 
�n
);

537 
size_t
 
i
 = 0; i < 
�n
; ++i) {

538 
	`�ve_obj
(
��t
, 
�ems
[
i
]);

543 
by�
 
obj_ty�
;

544 i�(
	`mp_obj_is_�t
(
o
)) {

545 
obj_ty�
 = 
MP_PERSISTENT_OBJ_INT
;

546 #i�
MICROPY_PY_BUILTINS_COMPLEX


547 } i�(
	`mp_obj_is_ty�
(
o
, &
mp_ty�_com�ex
)) {

548 
obj_ty�
 = 
MP_PERSISTENT_OBJ_COMPLEX
;

551 
	`as��
(
	`mp_obj_is_��t
(
o
));

552 
obj_ty�
 = 
MP_PERSISTENT_OBJ_FLOAT
;

554 
v�r_t
 
v�r
;

555 
mp_��t_t
 
�
;

556 
	`v�r_��_��t
(&
v�r
, 10, &
�
);

557 
	`mp_obj_��t_h��r
(&
�
, 
o
, 
PRINT_REPR
);

558 
	`mp_��t_by�s
(
��t
, &
obj_ty�
, 1);

559 
	`mp_��t_u�t
(
��t
, 
v�r
.
�n
);

560 
	`mp_��t_by�s
(
��t
, (cڡ 
by�
 *)
v�r
.
buf
, v�r.
�n
);

561 
	`v�r_��r
(&
v�r
);

563 
	}
}

565 
	$�ve_�w_code
(
mp_��t_t
 *
��t
, cڡ 
mp_�w_code_t
 *
rc
) {

567 
	`mp_��t_u�t
(
��t
, (
rc
->
fun_d�a_�n
 << 3�| (�c->
n_ch�d�n
 !�0�<< 2�| (rc->
k�d
 - 
MP_CODE_BYTECODE
));

570 
	`mp_��t_by�s
(
��t
, 
rc
->
fun_d�a
,�c->
fun_d�a_�n
);

572 #i�
MICROPY_EMIT_MACHINE_CODE


573 i�(
rc
->
k�d
 =�
MP_CODE_NATIVE_PY
) {

575 
	`mp_��t_u�t
(
��t
, 
rc
->
��ude_off�t
);

576 } i�(
rc
->
k�d
 =�
MP_CODE_NATIVE_VIPER
 ||�c->k�d =�
MP_CODE_NATIVE_ASM
) {

580 
	`mp_��t_u�t
(
��t
, 0);

581 #i�
MICROPY_EMIT_INLINE_ASM


582 i�(
rc
->
k�d
 =�
MP_CODE_NATIVE_ASM
) {

583 
	`mp_��t_u�t
(
��t
, 
rc
->
asm_n_pos_�gs
);

584 
	`mp_��t_u�t
(
��t
, 
rc
->
asm_ty�_sig
);

590 i�(
rc
->
n_ch�d�n
) {

591 
	`mp_��t_u�t
(
��t
, 
rc
->
n_ch�d�n
);

592 
size_t
 
i
 = 0; i < 
rc
->
n_ch�d�n
; ++i) {

593 
	`�ve_�w_code
(
��t
, 
rc
->
ch�d�n
[
i
]);

596 
	}
}

598 
	$mp_�w_code_�ve
(
mp_comp�ed_modu�_t
 *
cm
, 
mp_��t_t
 *
��t
) {

604 
by�
 
h�d�
[4] = {

606 
MPY_VERSION
,

607 
cm
->
has_�tive
 ? 
	`MPY_FEATURE_ENCODE_SUB_VERSION
(
MPY_SUB_VERSION
�| 
	`MPY_FEATURE_ENCODE_ARCH
(
MPY_FEATURE_ARCH_DYNAMIC
) : 0,

608 #i�
MICROPY_DYNAMIC_COMPILER


609 
mp_dy�mic_comp��
.
sm�l_�t_b�s
,

611 
MP_SMALL_INT_BITS
,

614 
	`mp_��t_by�s
(
��t
, 
h�d�
, (header));

617 
	`mp_��t_u�t
(
��t
, 
cm
->
n_q�r
);

618 
	`mp_��t_u�t
(
��t
, 
cm
->
n_obj
);

621 
size_t
 
i
 = 0; i < 
cm
->
n_q�r
; ++i) {

622 
	`�ve_q�r
(
��t
, 
cm
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[
i
]);

626 
size_t
 
i
 = 0; i < 
cm
->
n_obj
; ++i) {

627 
	`�ve_obj
(
��t
, (
mp_obj_t
)
cm
->
cڋxt
->
cڡ�ts
.
obj_�b�
[
i
]);

631 
	`�ve_�w_code
(
��t
, 
cm
->
rc
);

632 
	}
}

634 #i�
MICROPY_PERSISTENT_CODE_SAVE_FILE


636 
	~<uni�d.h
>

637 
	~<sys/��.h
>

638 
	~<f��.h
>

640 
	$fd_��t_��
(*
�v
, cڡ *
�r
, 
size_t
 
�n
) {

641 
fd
 = (
���_t
)
�v
;

642 
	`MP_THREAD_GIL_EXIT
();

643 
ssize_t
 
�t
 = 
	`wr�e
(
fd
, 
�r
, 
�n
);

644 
	`MP_THREAD_GIL_ENTER
();

645 ()
�t
;

646 
	}
}

648 
	$mp_�w_code_�ve_f�e
(
mp_comp�ed_modu�_t
 *
cm
, 
q�r
 
f��ame
) {

649 
	`MP_THREAD_GIL_EXIT
();

650 
fd
 = 
	`ݒ
(
	`q�r_�r
(
f��ame
), 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

651 
	`MP_THREAD_GIL_ENTER
();

652 i�(
fd
 < 0) {

653 
	`mp_�i�_OSE��_w�h_f��ame
(
��o
, 
	`q�r_�r
(
f��ame
));

655 
mp_��t_t
 
fd_��t
 = {(*)(
���_t
)
fd
, 
fd_��t_��
};

656 
	`mp_�w_code_�ve
(
cm
, &
fd_��t
);

657 
	`MP_THREAD_GIL_EXIT
();

658 
	`�o�
(
fd
);

659 
	`MP_THREAD_GIL_ENTER
();

660 
	}
}

666 #i�
MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE


668 
MP_REGISTER_ROOT_POINTER
(
mp_obj_t
 
�ack_�loc_code_li�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\persistentcode.h

26 #i�de�
MICROPY_INCLUDED_PY_PERSISTENTCODE_H


27 
	#MICROPY_INCLUDED_PY_PERSISTENTCODE_H


	)

29 
	~"py/m�r�t.h
"

30 
	~"py/�ad�.h
"

31 
	~"py/em�glue.h
"

37 
	#MPY_VERSION
 6

	)

38 
	#MPY_SUB_VERSION
 3

	)

43 
	#MPY_FEATURE_ENCODE_SUB_VERSION
(
v�si�
�(v�si�)

	)

44 
	#MPY_FEATURE_DECODE_SUB_VERSION
(
�
�((��& 3)

	)

47 
	#MPY_FEATURE_ENCODE_ARCH
(
�ch
�(�rch�<< 2)

	)

48 
	#MPY_FEATURE_DECODE_ARCH
(
�
�((��>> 2)

	)

51 #i�
MICROPY_EMIT_X86


52 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_X86
)

	)

53 #�i�
MICROPY_EMIT_X64


54 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_X64
)

	)

55 #�i�
MICROPY_EMIT_THUMB


56 #i�
def�ed
(
__thumb2__
)

57 #i�
def�ed
(
__ARM_FP
) && (__ARM_FP & 8) == 8

58 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_ARMV7EMDP
)

	)

59 #�i�
def�ed
(
__ARM_FP
) && (__ARM_FP & 4) == 4

60 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_ARMV7EMSP
)

	)

62 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_ARMV7EM
)

	)

65 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_ARMV6M
)

	)

67 
	#MPY_FEATURE_ARCH_TEST
(
x
�(
MP_NATIVE_ARCH_ARMV6M
 <�(x�&& (x�<�
MPY_FEATURE_ARCH
)

	)

68 #�i�
MICROPY_EMIT_ARM


69 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_ARMV6
)

	)

70 #�i�
MICROPY_EMIT_XTENSA


71 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_XTENSA
)

	)

72 #�i�
MICROPY_EMIT_XTENSAWIN


73 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_XTENSAWIN
)

	)

74 #�i�
MICROPY_EMIT_RV32


75 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_RV32IMC
)

	)

77 
	#MPY_FEATURE_ARCH
 (
MP_NATIVE_ARCH_NONE
)

	)

80 #i�de�
MPY_FEATURE_ARCH_TEST


81 
	#MPY_FEATURE_ARCH_TEST
(
x
�((x�=�
MPY_FEATURE_ARCH
)

	)

85 
	#MPY_FILE_HEADER_INT
 (
MPY_VERSION
 \

86 | (
	`MPY_FEATURE_ENCODE_SUB_VERSION
(
MPY_SUB_VERSION
�| 
	`MPY_FEATURE_ENCODE_ARCH
(
MPY_FEATURE_ARCH
)�<< 8)

	)

89 
	mMP_NATIVE_ARCH_NONE
 = 0,

90 
	mMP_NATIVE_ARCH_X86
,

91 
	mMP_NATIVE_ARCH_X64
,

92 
	mMP_NATIVE_ARCH_ARMV6
,

93 
	mMP_NATIVE_ARCH_ARMV6M
,

94 
	mMP_NATIVE_ARCH_ARMV7M
,

95 
	mMP_NATIVE_ARCH_ARMV7EM
,

96 
	mMP_NATIVE_ARCH_ARMV7EMSP
,

97 
	mMP_NATIVE_ARCH_ARMV7EMDP
,

98 
	mMP_NATIVE_ARCH_XTENSA
,

99 
	mMP_NATIVE_ARCH_XTENSAWIN
,

100 
	mMP_NATIVE_ARCH_RV32IMC
,

101 
	mMP_NATIVE_ARCH_DEBUG
,

105 
	mMP_PERSISTENT_OBJ_FUN_TABLE
 = 0,

106 
	mMP_PERSISTENT_OBJ_NONE
,

107 
	mMP_PERSISTENT_OBJ_FALSE
,

108 
	mMP_PERSISTENT_OBJ_TRUE
,

109 
	mMP_PERSISTENT_OBJ_ELLIPSIS
,

110 
	mMP_PERSISTENT_OBJ_STR
,

111 
	mMP_PERSISTENT_OBJ_BYTES
,

112 
	mMP_PERSISTENT_OBJ_INT
,

113 
	mMP_PERSISTENT_OBJ_FLOAT
,

114 
	mMP_PERSISTENT_OBJ_COMPLEX
,

115 
	mMP_PERSISTENT_OBJ_TUPLE
,

118 
mp_�w_code_l�d
(
mp_�ad�_t
 *
�ad�
, 
mp_comp�ed_modu�_t
 *
�x
);

119 
mp_�w_code_l�d_mem
(cڡ 
by�
 *
buf
, 
size_t
 
�n
, 
mp_comp�ed_modu�_t
 *
�x
);

120 
mp_�w_code_l�d_f�e
(
q�r
 
f��ame
, 
mp_comp�ed_modu�_t
 *
�x
);

122 
mp_�w_code_�ve
(
mp_comp�ed_modu�_t
 *
cm
, 
mp_��t_t
 *
��t
);

123 
mp_�w_code_�ve_f�e
(
mp_comp�ed_modu�_t
 *
cm
, 
q�r
 
f��ame
);

125 
mp_�tive_�lo��
(*
�loc
, 
u�t8_t
 *
�xt
, 
u���_t
 
�loc_�xt
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\profile.c

27 
	~"py/�of�e.h
"

28 
	~"py/bc0.h
"

29 
	~"py/gc.h
"

30 
	~"py/objfun.h
"

32 #i�
MICROPY_PY_SYS_SETTRACE


34 #i�!
MICROPY_PERSISTENT_CODE_SAVE


40 
	#�of_�a�_cb
 
	`MP_STATE_THREAD
(
�of_�a�_��back
)

	)

41 
	#QSTR_MAP
(
cڋxt
, 
idx
�(cڋxt->
cڡ�ts
.
q�r_�b�
[idx])

	)

43 
u�t
 
	$mp_�of_by�code_l��o
(cڡ 
mp_�w_code_t
 *
rc
, 
size_t
 
bc
) {

44 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

45  
	`mp_by�code_g�_sour�_l�e
(
��ude
->
l�e_�fo
,��lude->
l�e_�fo_t�
, 
bc
);

46 
	}
}

48 
	$mp_�of_ex�a�_��ude
(cڡ 
by�
 *
by�code
, 
mp_by�code_��ude_t
 *
��ude
) {

49 cڡ 
by�
 *
�
 = 
by�code
;

51 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

52 
��ude
->
n_��e
 =�_state;

53 
��ude
->
n_exc_�ack
 =�_exc_stack;

54 
��ude
->
sc�e_�ags
 = scope_flags;

55 
��ude
->
n_pos_�gs
 =�_pos_args;

56 
��ude
->
n_kw�ly_�gs
 =�_kwonly_args;

57 
��ude
->
n_def_pos_�gs
 =�_def_pos_args;

59 
	`MP_BC_PRELUDE_SIZE_DECODE
(
�
);

61 
��ude
->
l�e_�fo_t�
 = 
�
 + 
n_�fo
;

62 
��ude
->
�codes
 = 
�
 + 
n_�fo
 + 
n_��
;

64 
��ude
->
q�r_block_�me_idx
 = 
	`mp_decode_u�t_v�ue
(
�
);

65 
size_t
 
i
 = 0; i < 1 + 
n_pos_�gs
 + 
n_kw�ly_�gs
; ++i) {

66 
�
 = 
	`mp_decode_u�t_sk�
(ip);

68 
��ude
->
l�e_�fo
 = 
�
;

69 
	}
}

74 
	$code_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

75 ()
k�d
;

76 
mp_obj_code_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

77 cڡ 
mp_�w_code_t
 *
rc
 = 
o
->rc;

78 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

79 
	`mp_��tf
(
��t
,

81 
	`QSTR_MAP
(
o
->
cڋxt
, 
��ude
->
q�r_block_�me_idx
),

82 
o
,

83 
	`QSTR_MAP
(
o
->
cڋxt
, 0),

84 
rc
->
l�e_of_def��i�


86 
	}
}

88 
mp_obj_tu�e_t
 *
	$code_cڡs
(cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, cڡ 
mp_�w_code_t
 *
rc
) {

89 
mp_obj_tu�e_t
 *
cڡs
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(
rc
->
n_ch�d�n
 + 1, 
NULL
));

91 
size_t
 
cڡ_no
 = 0;

92 
size_t
 
i
 = 0; i < 
rc
->
n_ch�d�n
; ++i) {

93 
mp_obj_t
 
code
 = 
	`mp_obj_�w_code
(
cڋxt
, 
rc
->
ch�d�n
[
i
]);

94 i�(
code
 =�
MP_OBJ_NULL
) {

95 
	`m_m�loc_�
((
mp_obj_code_t
));

97 
cڡs
->
�ems
[
cڡ_no
++] = 
code
;

99 
cڡs
->
�ems
[
cڡ_no
++] = 
mp_cڡ_n�e
;

101  
cڡs
;

102 
	}
}

104 
mp_obj_t
 
	$�w_code_��ab
(cڡ 
mp_�w_code_t
 *
rc
) {

106 
u�t
 
��t
 = 0;

107 
u�t
 
��
 = 
rc
->
fun_d�a_�n
 - 
��t
;

109 
u�t
 
ϡ_l��o
 = 
	`mp_�of_by�code_l��o
(
rc
, 
��t
);

110 
u�t
 
ϡi
 = 0;

112 cڡ 
u�t
 
buf�r_chunk_size
 = (
��
 - 
��t
) >> 2;

113 
u�t
 
buf�r_size
 = 
buf�r_chunk_size
;

114 
by�
 *
buf�r
 = 
	`m_�w
(by�, 
buf�r_size
);

115 
u�t
 
buf�r_�dex
 = 0;

117 
u�t
 
i
 = 
��t
; i < 
��
; ++i) {

118 
u�t
 
l��o
 = 
	`mp_�of_by�code_l��o
(
rc
, 
i
);

119 
size_t
 
l�e_diff
 = 
l��o
 - 
ϡ_l��o
;

120 i�(
l�e_diff
 > 0) {

121 
u�t
 
��r_diff
 = (
i
 - 
��t
�- 
ϡi
;

123 
	`as��
(
��r_diff
 < 256);

124 
	`as��
(
l�e_diff
 < 256);

126 i�(
buf�r_�dex
 + 2 > 
buf�r_size
) {

127 
buf�r
 = 
	`m_��w
(
by�
, buf�r, 
buf�r_size
, buf�r_siz�+ 
buf�r_chunk_size
);

128 
buf�r_size
 = buf�r_siz�+ 
buf�r_chunk_size
;

130 
ϡ_l��o
 = 
l��o
;

131 
ϡi
 = 
i
 - 
��t
;

132 
buf�r
[
buf�r_�dex
++] = 
��r_diff
;

133 
buf�r
[
buf�r_�dex
++] = 
l�e_diff
;

137 
mp_obj_t
 
o
 = 
	`mp_obj_�w_by�s
(
buf�r
, 
buf�r_�dex
);

138 
	`m_d�
(
by�
, 
buf�r
, 
buf�r_size
);

139  
o
;

140 
	}
}

142 
	$code_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

143 i�(
de�
[0] !�
MP_OBJ_NULL
) {

147 
mp_obj_code_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

148 cڡ 
mp_�w_code_t
 *
rc
 = 
o
->rc;

149 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

150 
��
) {

151 
MP_QSTR_co_code
:

152 
de�
[0] = 
	`mp_obj_�w_by�s
(

153 (*)
��ude
->
�codes
,

154 
rc
->
fun_d�a_�n
 - (
��ude
->
�codes
 - (cڡ 
by�
 *�c->
fun_d�a
)

157 
MP_QSTR_co_cڡs
:

158 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
	`code_cڡs
(
o
->
cڋxt
, 
rc
));

160 
MP_QSTR_co_f��ame
:

161 
de�
[0] = 
	`MP_OBJ_NEW_QSTR
(
	`QSTR_MAP
(
o
->
cڋxt
, 0));

163 
MP_QSTR_co_f��l��o
:

164 
de�
[0] = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_�of_by�code_l��o
(
rc
, 0));

166 
MP_QSTR_co_�me
:

167 
de�
[0] = 
	`MP_OBJ_NEW_QSTR
(
	`QSTR_MAP
(
o
->
cڋxt
, 
��ude
->
q�r_block_�me_idx
));

169 
MP_QSTR_co_�mes
:

170 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
o
->
di�_lo�ls
);

172 
MP_QSTR_co_��ab
:

173 i�(!
o
->
��ab
) {

174 
o
->
��ab
 = 
	`�w_code_��ab
(
rc
);

176 
de�
[0] = 
o
->
��ab
;

179 
	}
}

181 
MP_DEFINE_CONST_OBJ_TYPE
(

182 
mp_ty�_����_codeobj
,

183 
MP_QSTR_code
,

184 
MP_TYPE_FLAG_NONE
,

185 
��t
, 
code_��t
,

186 
��
, 
code_��


189 
mp_obj_t
 
	$mp_obj_�w_code
(cڡ 
mp_modu�_cڋxt_t
 *
cڋxt
, cڡ 
mp_�w_code_t
 *
rc
) {

190 
mp_obj_code_t
 *
o
 = 
	`m_�w_obj_maybe
(mp_obj_code_t);

191 i�(
o
 =�
NULL
) {

192  
MP_OBJ_NULL
;

194 
o
->
ba�
.
ty�
 = &
mp_ty�_����_codeobj
;

195 
o
->
cڋxt
 = context;

196 
o
->
rc
 =�c;

197 
o
->
di�_lo�ls
 = 
	`mp_lo�ls_g�
();

198 
o
->
��ab
 = 
MP_OBJ_NULL
;

199  
	`MP_OBJ_FROM_PTR
(
o
);

200 
	}
}

205 
	$�ame_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
o_�
, 
mp_��t_k�d_t
 
k�d
) {

206 ()
k�d
;

207 
mp_obj_�ame_t
 *
�ame
 = 
	`MP_OBJ_TO_PTR
(
o_�
);

208 
mp_obj_code_t
 *
code
 = 
�ame
->code;

209 cڡ 
mp_�w_code_t
 *
rc
 = 
code
->rc;

210 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

211 
	`mp_��tf
(
��t
,

213 
�ame
,

214 
	`QSTR_MAP
(
code
->
cڋxt
, 0),

215 
�ame
->
l��o
,

216 
	`QSTR_MAP
(
code
->
cڋxt
, 
��ude
->
q�r_block_�me_idx
)

218 
	}
}

220 
	$�ame_��
(
mp_obj_t
 
�lf_�
, 
q�r
 
��
, mp_obj_�*
de�
) {

221 i�(
de�
[0] !�
MP_OBJ_NULL
) {

226 
mp_obj_�ame_t
 *
o
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

228 
��
) {

229 
MP_QSTR_f_back
:

230 
de�
[0] = 
mp_cڡ_n�e
;

231 i�(
o
->
code_��e
->
�ev_��e
) {

232 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
o
->
code_��e
->
�ev_��e
->
�ame
);

235 
MP_QSTR_f_code
:

236 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
o
->
code
);

238 
MP_QSTR_f_glob�s
:

239 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
o
->
code_��e
->
fun_bc
->
cڋxt
->
modu�
.
glob�s
);

241 
MP_QSTR_f_ϡi
:

242 
de�
[0] = 
	`MP_OBJ_NEW_SMALL_INT
(
o
->
ϡi
);

244 
MP_QSTR_f_l��o
:

245 
de�
[0] = 
	`MP_OBJ_NEW_SMALL_INT
(
o
->
l��o
);

248 
	}
}

250 
MP_DEFINE_CONST_OBJ_TYPE
(

251 
mp_ty�_�ame
,

252 
MP_QSTR_�ame
,

253 
MP_TYPE_FLAG_NONE
,

254 
��t
, 
�ame_��t
,

255 
��
, 
�ame_��


258 
mp_obj_t
 
	$mp_obj_�w_�ame
(cڡ 
mp_code_��e_t
 *
code_��e
) {

259 i�(
	`gc_is_locked
()) {

260  
MP_OBJ_NULL
;

263 
mp_obj_�ame_t
 *
o
 = 
	`m_�w_obj_maybe
(mp_obj_frame_t);

264 i�(
o
 =�
NULL
) {

265  
MP_OBJ_NULL
;

268 
mp_obj_code_t
 *
code
 = 
o
->cod��
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_code
(
code_��e
->
fun_bc
->
cڋxt
, code_��e->fun_bc->
rc
));

269 i�(
code
 =�
NULL
) {

270  
MP_OBJ_NULL
;

273 cڡ 
mp_�w_code_t
 *
rc
 = 
code
->rc;

274 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

275 
o
->
code_��e
 = code_state;

276 
o
->
ba�
.
ty�
 = &
mp_ty�_�ame
;

277 
o
->
back
 = 
NULL
;

278 
o
->
code
 = code;

279 
o
->
ϡi
 = 
code_��e
->
�
 - 
��ude
->
�codes
;

280 
o
->
l��o
 = 
	`mp_�of_by�code_l��o
(
rc
, o->
ϡi
);

281 
o
->
�a�_�codes
 = 
�l�
;

282 
o
->
��back
 = 
MP_OBJ_NULL
;

284  
	`MP_OBJ_FROM_PTR
(
o
);

285 
	}
}

292 
_mp_obj_�ame_t
 *
	m�ame
;

293 
mp_obj_t
 
	mev�t
;

294 
mp_obj_t
 
	m�g
;

295 } 
	t�of_��back_�gs_t
;

297 
mp_obj_t
 
	$mp_�of_��back_�voke
(
mp_obj_t
 
��back
, 
�of_��back_�gs_t
 *
�gs
) {

298 
	`as��
(
	`mp_obj_is_��ab�
(
��back
));

300 
mp_�of_is_execut�g
 = 
�ue
;

302 
mp_obj_t
 
a
[3] = {
	`MP_OBJ_FROM_PTR
(
�gs
->
�ame
),�rgs->
ev�t
,�rgs->
�g
};

303 
mp_obj_t
 
t�
 = 
	`mp_��_fun�i�_n_kw
(
��back
, 3, 0, 
a
);

305 
mp_�of_is_execut�g
 = 
�l�
;

307 i�(
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
�!�
MP_OBJ_NULL
) {

308 
	`mp_h�d�_�nd�g
(
�ue
);

310  
t�
;

311 
	}
}

313 
mp_obj_t
 
	$mp_�of_����
(
mp_obj_t
 
��back
) {

314 i�(
	`mp_obj_is_��ab�
(
��back
)) {

315 
�of_�a�_cb
 = 
��back
;

317 
�of_�a�_cb
 = 
MP_OBJ_NULL
;

319  
mp_cڡ_n�e
;

320 
	}
}

322 
mp_obj_t
 
	$mp_�of_�ame_��r
(
mp_code_��e_t
 *
code_��e
) {

323 
	`as��
(!
mp_�of_is_execut�g
);

325 
mp_obj_�ame_t
 *
�ame
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_�ame
(
code_��e
));

326 i�(
�ame
 =�
NULL
) {

328  
MP_OBJ_NULL
;

331 i�(
code_��e
->
�ev_��e
 && code_��e->
�ame
 =�
NULL
) {

335 cڡ 
mp_�w_code_t
 *
rc
 = 
code_��e
->
fun_bc
->rc;

336 
�ame
->
l��o
 = 
rc
->
l�e_of_def��i�
;

337 i�(!
rc
->
l�e_of_def��i�
) {

338 
�ame
->
l��o
 = 
	`mp_�of_by�code_l��o
(
rc
, 0);

341 
code_��e
->
�ame
 = frame;

343 i�(!
�of_�a�_cb
) {

344  
MP_OBJ_NULL
;

347 
mp_obj_t
 
t�
;

348 
�of_��back_�gs_t
 
_�gs
, *
�gs
 = &_args;

349 
�gs
->
�ame
 = 
code_��e
->frame;

352 
�gs
->
ev�t
 = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_��
);

353 
�gs
->
�g
 = 
mp_cڡ_n�e
;

354 
t�
 = 
	`mp_�of_��back_�voke
(
�of_�a�_cb
, 
�gs
);

356 
code_��e
->
�ame
->
��back
 = 
	`mp_obj_is_��ab�
(
t�
�?�� : 
MP_OBJ_NULL
;

359 
�ame
->
l��o
 = 0;

361  
t�
;

362 
	}
}

364 
mp_obj_t
 
	$mp_�of_�ame_upd�e
(cڡ 
mp_code_��e_t
 *
code_��e
) {

365 
mp_obj_�ame_t
 *
�ame
 = 
code_��e
->frame;

366 i�(
�ame
 =�
NULL
) {

368  
MP_OBJ_NULL
;

371 
mp_obj_�ame_t
 *
o
 = 
�ame
;

372 
mp_obj_code_t
 *
code
 = 
o
->code;

373 cڡ 
mp_�w_code_t
 *
rc
 = 
code
->rc;

374 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

376 
	`as��
(
o
->
code_��e
 == code_state);

378 
o
->
ϡi
 = 
code_��e
->
�
 - 
��ude
->
�codes
;

379 
o
->
l��o
 = 
	`mp_�of_by�code_l��o
(
rc
, o->
ϡi
);

381  
	`MP_OBJ_FROM_PTR
(
o
);

382 
	}
}

384 
mp_obj_t
 
	$mp_�of_��r_tick
(
mp_code_��e_t
 *
code_��e
, 
bo�
 
is_ex��i�
) {

386 
	`as��
(!
mp_�of_is_execut�g
);

387 
	`as��
(
code_��e
->
�ame
);

388 
	`as��
(
	`mp_obj_g�_ty�
(
code_��e
->
�ame
�=�&
mp_ty�_�ame
);

391 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
);

393 
mp_obj_t
 
t�
 = 
mp_cڡ_n�e
;

394 
mp_obj_t
 
��back
 = 
code_��e
->
�ame
->callback;

396 
�of_��back_�gs_t
 
_�gs
, *
�gs
 = &_args;

397 
�gs
->
�ame
 = 
code_��e
->frame;

398 
�gs
->
ev�t
 = 
mp_cڡ_n�e
;

399 
�gs
->
�g
 = 
mp_cڡ_n�e
;

404 i�(
is_ex��i�
) {

405 
�gs
->
ev�t
 = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_ex��i�
);

406 
t�
 = 
	`mp_�of_��back_�voke
(
��back
, 
�gs
);

407  
t�
;

411 cڡ 
mp_�w_code_t
 *
rc
 = 
code_��e
->
fun_bc
->rc;

412 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

413 
size_t
 
�ev_l�e_no
 = 
�gs
->
�ame
->
l��o
;

414 
size_t
 
cu��t_l�e_no
 = 
	`mp_�of_by�code_l��o
(
rc
, 
code_��e
->
�
 - 
��ude
->
�codes
);

415 i�(
�ev_l�e_no
 !�
cu��t_l�e_no
) {

416 
�gs
->
�ame
->
l��o
 = 
cu��t_l�e_no
;

417 
�gs
->
ev�t
 = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_l�e
);

418 
t�
 = 
	`mp_�of_��back_�voke
(
��back
, 
�gs
);

422 cڡ 
by�
 *
�
 = 
code_��e
->ip;

423 i�(*
�
 =�
MP_BC_RETURN_VALUE
 || *� =�
MP_BC_YIELD_VALUE
) {

424 
�gs
->
ev�t
 = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_�tu�
);

425 
t�
 = 
	`mp_�of_��back_�voke
(
��back
, 
�gs
);

426 i�(
code_��e
->
�ev_��e
 && *
�
 =�
MP_BC_RETURN_VALUE
) {

427 
code_��e
->
�ame
->
��back
 = 
MP_OBJ_NULL
;

433 i�(
�l�
) {

434 
�gs
->
ev�t
 = 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_�code
);

437  
t�
;

438 
	}
}

447 #i�
MICROPY_PROF_INSTR_DEBUG_PRINT_ENABLE


449 
	~"ru�ime0.h
"

451 
	#DECODE_UINT
 { \

452 
unum
 = 0; \

454 
unum
 = (unum << 7�+ (*
�
 & 0x7f); \

455 } (*
�
++ & 0x80) != 0); \

456 }

	)

457 
	#DECODE_ULABEL
 d�{ 
unum
 = (
�
[0] | (�[1] << 8)); i�+�2; } 0)

	)

458 
	#DECODE_SLABEL
 d�{ 
unum
 = (
�
[0] | (�[1] << 8)�- 0x8000; i�+�2; } 0)

	)

460 
	#DECODE_QSTR
 \

461 
q�
 = 
�
[0] | ip[1] << 8; \

462 
�
 +�2;

	)

463 
	#DECODE_PTR
 \

464 
DECODE_UINT
; \

465 
�r
 = (cڡ 
by�
 *)
cڡ_�b�
[
unum
]

	)

466 
	#DECODE_OBJ
 \

467 
DECODE_UINT
; \

468 
obj
 = (
mp_obj_t
)
cڡ_�b�
[
unum
]

	)

470 
	s_mp_dis_��ru�i�_t
 {

471 
mp_u�t_t
 
	mq�r_��me
;

472 
mp_u�t_t
 
	m�g
;

473 
mp_obj_t
 
	m�gobj
;

474 
mp_obj_t
 
	m�gobjex_�che
;

475 } 
	tmp_dis_��ru�i�_t
;

477 cڡ 
by�
 *
	$mp_�of_�code_decode
(cڡ 
by�
 *
�
, cڡ 
mp_u�t_t
 *
cڡ_�b�
, 
mp_dis_��ru�i�_t
 *
��ru�i�
) {

478 
mp_u�t_t
 
unum
;

479 cڡ 
by�
 *
�r
;

480 
mp_obj_t
 
obj
;

481 
q�r
 
q�
;

483 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_
;

484 
��ru�i�
->
�g
 = 0;

485 
��ru�i�
->
�gobj
 = 
mp_cڡ_n�e
;

486 
��ru�i�
->
�gobjex_�che
 = 
mp_cڡ_n�e
;

488 *
�
++) {

489 
MP_BC_LOAD_CONST_FALSE
:

490 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_FALSE
;

493 
MP_BC_LOAD_CONST_NONE
:

494 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_NONE
;

497 
MP_BC_LOAD_CONST_TRUE
:

498 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_TRUE
;

501 
MP_BC_LOAD_CONST_SMALL_INT
: {

502 
mp_�t_t
 
num
 = 0;

503 i�((
�
[0] & 0x40) != 0) {

505 
num
--;

508 
num
 = (num << 7�| (*
�
 & 0x7f);

509 } (*
�
++ & 0x80) != 0);

510 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_SMALL_INT
;

511 
��ru�i�
->
�g
 = 
num
;

515 
MP_BC_LOAD_CONST_STRING
:

516 
DECODE_QSTR
;

517 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_STRING
;

518 
��ru�i�
->
�g
 = 
q�
;

519 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

522 
MP_BC_LOAD_CONST_OBJ
:

523 
DECODE_OBJ
;

524 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_OBJ
;

525 
��ru�i�
->
�g
 = 
unum
;

526 
��ru�i�
->
�gobj
 = 
obj
;

529 
MP_BC_LOAD_NULL
:

530 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_NULL
;

533 
MP_BC_LOAD_FAST_N
:

534 
DECODE_UINT
;

535 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_FAST_N
;

536 
��ru�i�
->
�g
 = 
unum
;

539 
MP_BC_LOAD_DEREF
:

540 
DECODE_UINT
;

541 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_DEREF
;

542 
��ru�i�
->
�g
 = 
unum
;

545 
MP_BC_LOAD_NAME
:

546 
DECODE_QSTR
;

547 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_NAME
;

548 
��ru�i�
->
�g
 = 
q�
;

549 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

552 
MP_BC_LOAD_GLOBAL
:

553 
DECODE_QSTR
;

554 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_GLOBAL
;

555 
��ru�i�
->
�g
 = 
q�
;

556 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

559 
MP_BC_LOAD_ATTR
:

560 
DECODE_QSTR
;

561 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_ATTR
;

562 
��ru�i�
->
�g
 = 
q�
;

563 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

566 
MP_BC_LOAD_METHOD
:

567 
DECODE_QSTR
;

568 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_METHOD
;

569 
��ru�i�
->
�g
 = 
q�
;

570 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

573 
MP_BC_LOAD_SUPER_METHOD
:

574 
DECODE_QSTR
;

575 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_SUPER_METHOD
;

576 
��ru�i�
->
�g
 = 
q�
;

577 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

580 
MP_BC_LOAD_BUILD_CLASS
:

581 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_BUILD_CLASS
;

584 
MP_BC_LOAD_SUBSCR
:

585 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_SUBSCR
;

588 
MP_BC_STORE_FAST_N
:

589 
DECODE_UINT
;

590 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_FAST_N
;

591 
��ru�i�
->
�g
 = 
unum
;

594 
MP_BC_STORE_DEREF
:

595 
DECODE_UINT
;

596 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_DEREF
;

597 
��ru�i�
->
�g
 = 
unum
;

600 
MP_BC_STORE_NAME
:

601 
DECODE_QSTR
;

602 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_NAME
;

603 
��ru�i�
->
�g
 = 
q�
;

604 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

607 
MP_BC_STORE_GLOBAL
:

608 
DECODE_QSTR
;

609 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_GLOBAL
;

610 
��ru�i�
->
�g
 = 
q�
;

611 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

614 
MP_BC_STORE_ATTR
:

615 
DECODE_QSTR
;

616 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_ATTR
;

617 
��ru�i�
->
�g
 = 
q�
;

618 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

621 
MP_BC_STORE_SUBSCR
:

622 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_SUBSCR
;

625 
MP_BC_DELETE_FAST
:

626 
DECODE_UINT
;

627 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DELETE_FAST
;

628 
��ru�i�
->
�g
 = 
unum
;

631 
MP_BC_DELETE_DEREF
:

632 
DECODE_UINT
;

633 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DELETE_DEREF
;

634 
��ru�i�
->
�g
 = 
unum
;

637 
MP_BC_DELETE_NAME
:

638 
DECODE_QSTR
;

639 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DELETE_NAME
;

640 
��ru�i�
->
�g
 = 
q�
;

641 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

644 
MP_BC_DELETE_GLOBAL
:

645 
DECODE_QSTR
;

646 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DELETE_GLOBAL
;

647 
��ru�i�
->
�g
 = 
q�
;

648 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

651 
MP_BC_DUP_TOP
:

652 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DUP_TOP
;

655 
MP_BC_DUP_TOP_TWO
:

656 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_DUP_TOP_TWO
;

659 
MP_BC_POP_TOP
:

660 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_POP_TOP
;

663 
MP_BC_ROT_TWO
:

664 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_ROT_TWO
;

667 
MP_BC_ROT_THREE
:

668 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_ROT_THREE
;

671 
MP_BC_JUMP
:

672 
DECODE_SLABEL
;

673 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_JUMP
;

674 
��ru�i�
->
�g
 = 
unum
;

677 
MP_BC_POP_JUMP_IF_TRUE
:

678 
DECODE_SLABEL
;

679 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_POP_JUMP_IF_TRUE
;

680 
��ru�i�
->
�g
 = 
unum
;

683 
MP_BC_POP_JUMP_IF_FALSE
:

684 
DECODE_SLABEL
;

685 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_POP_JUMP_IF_FALSE
;

686 
��ru�i�
->
�g
 = 
unum
;

689 
MP_BC_JUMP_IF_TRUE_OR_POP
:

690 
DECODE_SLABEL
;

691 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_JUMP_IF_TRUE_OR_POP
;

692 
��ru�i�
->
�g
 = 
unum
;

695 
MP_BC_JUMP_IF_FALSE_OR_POP
:

696 
DECODE_SLABEL
;

697 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_JUMP_IF_FALSE_OR_POP
;

698 
��ru�i�
->
�g
 = 
unum
;

701 
MP_BC_SETUP_WITH
:

702 
DECODE_ULABEL
;

703 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_SETUP_WITH
;

704 
��ru�i�
->
�g
 = 
unum
;

707 
MP_BC_WITH_CLEANUP
:

708 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_WITH_CLEANUP
;

711 
MP_BC_UNWIND_JUMP
:

712 
DECODE_SLABEL
;

713 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_UNWIND_JUMP
;

714 
��ru�i�
->
�g
 = 
unum
;

717 
MP_BC_SETUP_EXCEPT
:

718 
DECODE_ULABEL
;

719 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_SETUP_EXCEPT
;

720 
��ru�i�
->
�g
 = 
unum
;

723 
MP_BC_SETUP_FINALLY
:

724 
DECODE_ULABEL
;

725 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_SETUP_FINALLY
;

726 
��ru�i�
->
�g
 = 
unum
;

729 
MP_BC_END_FINALLY
:

734 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_END_FINALLY
;

737 
MP_BC_GET_ITER
:

738 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_GET_ITER
;

741 
MP_BC_GET_ITER_STACK
:

742 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_GET_ITER_STACK
;

745 
MP_BC_FOR_ITER
:

746 
DECODE_ULABEL
;

747 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_FOR_ITER
;

748 
��ru�i�
->
�g
 = 
unum
;

751 
MP_BC_BUILD_TUPLE
:

752 
DECODE_UINT
;

753 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BUILD_TUPLE
;

754 
��ru�i�
->
�g
 = 
unum
;

757 
MP_BC_BUILD_LIST
:

758 
DECODE_UINT
;

759 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BUILD_LIST
;

760 
��ru�i�
->
�g
 = 
unum
;

763 
MP_BC_BUILD_MAP
:

764 
DECODE_UINT
;

765 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BUILD_MAP
;

766 
��ru�i�
->
�g
 = 
unum
;

769 
MP_BC_STORE_MAP
:

770 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_MAP
;

773 
MP_BC_BUILD_SET
:

774 
DECODE_UINT
;

775 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BUILD_SET
;

776 
��ru�i�
->
�g
 = 
unum
;

779 #i�
MICROPY_PY_BUILTINS_SLICE


780 
MP_BC_BUILD_SLICE
:

781 
DECODE_UINT
;

782 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BUILD_SLICE
;

783 
��ru�i�
->
�g
 = 
unum
;

787 
MP_BC_STORE_COMP
:

788 
DECODE_UINT
;

789 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_COMP
;

790 
��ru�i�
->
�g
 = 
unum
;

793 
MP_BC_UNPACK_SEQUENCE
:

794 
DECODE_UINT
;

795 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_UNPACK_SEQUENCE
;

796 
��ru�i�
->
�g
 = 
unum
;

799 
MP_BC_UNPACK_EX
:

800 
DECODE_UINT
;

801 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_UNPACK_EX
;

802 
��ru�i�
->
�g
 = 
unum
;

805 
MP_BC_MAKE_FUNCTION
:

806 
DECODE_PTR
;

807 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_MAKE_FUNCTION
;

808 
��ru�i�
->
�g
 = 
unum
;

809 
��ru�i�
->
�gobj
 = 
	`mp_obj_�w_�t_�om_u�
((
u�t64_t
)
�r
);

812 
MP_BC_MAKE_FUNCTION_DEFARGS
:

813 
DECODE_PTR
;

814 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_MAKE_FUNCTION_DEFARGS
;

815 
��ru�i�
->
�g
 = 
unum
;

816 
��ru�i�
->
�gobj
 = 
	`mp_obj_�w_�t_�om_u�
((
u�t64_t
)
�r
);

819 
MP_BC_MAKE_CLOSURE
: {

820 
DECODE_PTR
;

821 
mp_u�t_t
 
n_�o�d_ov�
 = *
�
++;

822 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_MAKE_CLOSURE
;

823 
��ru�i�
->
�g
 = 
unum
;

824 
��ru�i�
->
�gobj
 = 
	`mp_obj_�w_�t_�om_u�
((
u�t64_t
)
�r
);

825 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
(
n_�o�d_ov�
);

829 
MP_BC_MAKE_CLOSURE_DEFARGS
: {

830 
DECODE_PTR
;

831 
mp_u�t_t
 
n_�o�d_ov�
 = *
�
++;

832 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_MAKE_CLOSURE_DEFARGS
;

833 
��ru�i�
->
�g
 = 
unum
;

834 
��ru�i�
->
�gobj
 = 
	`mp_obj_�w_�t_�om_u�
((
u�t64_t
)
�r
);

835 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
(
n_�o�d_ov�
);

839 
MP_BC_CALL_FUNCTION
:

840 
DECODE_UINT
;

841 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_CALL_FUNCTION
;

842 
��ru�i�
->
�g
 = 
unum
 & 0xff;

843 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
((
unum
 >> 8) & 0xff);

846 
MP_BC_CALL_FUNCTION_VAR_KW
:

847 
DECODE_UINT
;

848 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_CALL_FUNCTION_VAR_KW
;

849 
��ru�i�
->
�g
 = 
unum
 & 0xff;

850 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
((
unum
 >> 8) & 0xff);

853 
MP_BC_CALL_METHOD
:

854 
DECODE_UINT
;

855 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_CALL_METHOD
;

856 
��ru�i�
->
�g
 = 
unum
 & 0xff;

857 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
((
unum
 >> 8) & 0xff);

860 
MP_BC_CALL_METHOD_VAR_KW
:

861 
DECODE_UINT
;

862 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_CALL_METHOD_VAR_KW
;

863 
��ru�i�
->
�g
 = 
unum
 & 0xff;

864 
��ru�i�
->
�gobjex_�che
 = 
	`MP_OBJ_NEW_SMALL_INT
((
unum
 >> 8) & 0xff);

867 
MP_BC_RETURN_VALUE
:

868 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_RETURN_VALUE
;

871 
MP_BC_RAISE_LAST
:

872 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_RAISE_LAST
;

875 
MP_BC_RAISE_OBJ
:

876 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_RAISE_OBJ
;

879 
MP_BC_RAISE_FROM
:

880 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_RAISE_FROM
;

883 
MP_BC_YIELD_VALUE
:

884 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_YIELD_VALUE
;

887 
MP_BC_YIELD_FROM
:

888 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_YIELD_FROM
;

891 
MP_BC_IMPORT_NAME
:

892 
DECODE_QSTR
;

893 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_IMPORT_NAME
;

894 
��ru�i�
->
�g
 = 
q�
;

895 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

898 
MP_BC_IMPORT_FROM
:

899 
DECODE_QSTR
;

900 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_IMPORT_FROM
;

901 
��ru�i�
->
�g
 = 
q�
;

902 
��ru�i�
->
�gobj
 = 
	`MP_OBJ_NEW_QSTR
(
q�
);

905 
MP_BC_IMPORT_STAR
:

906 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_IMPORT_STAR
;

910 i�(
�
[-1] < 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 + 64) {

911 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_CONST_SMALL_INT
;

912 
��ru�i�
->
�g
 = (
mp_�t_t
)
�
[-1] - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 - 16;

913 } i�(
�
[-1] < 
MP_BC_LOAD_FAST_MULTI
 + 16) {

914 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_LOAD_FAST
;

915 
��ru�i�
->
�g
 = (
mp_u�t_t
)
�
[-1] - 
MP_BC_LOAD_FAST_MULTI
;

916 } i�(
�
[-1] < 
MP_BC_STORE_FAST_MULTI
 + 16) {

917 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_STORE_FAST
;

918 
��ru�i�
->
�g
 = (
mp_u�t_t
)
�
[-1] - 
MP_BC_STORE_FAST_MULTI
;

919 } i�(
�
[-1] < 
MP_BC_UNARY_OP_MULTI
 + 
MP_UNARY_OP_NUM_BYTECODE
) {

920 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_UNARY_OP
;

921 
��ru�i�
->
�g
 = (
mp_u�t_t
)
�
[-1] - 
MP_BC_UNARY_OP_MULTI
;

922 } i�(
�
[-1] < 
MP_BC_BINARY_OP_MULTI
 + 
MP_BINARY_OP_NUM_BYTECODE
) {

923 
mp_u�t_t
 
�
 = 
�
[-1] - 
MP_BC_BINARY_OP_MULTI
;

924 
��ru�i�
->
q�r_��me
 = 
MP_QSTR_BINARY_OP
;

925 
��ru�i�
->
�g
 = 
�
;

927 
	`mp_��tf
(&
mp_��_��t
, "cod�%p, opcod�0x%02x�� im�em��d\n", 
�
 - 1, ip[-1]);

928 
	`as��
(0);

929  
�
;

934  
�
;

935 
	}
}

937 
	$mp_�of_��t_��r
(cڡ 
by�
 *
�
, 
mp_code_��e_t
 *
code_��e
) {

938 
mp_dis_��ru�i�_t
 
_��ru�i�
, *
��ru�i�
 = &_instruction;

939 
	`mp_�of_�code_decode
(
�
, 
code_��e
->
fun_bc
->
rc
->
cڡ_�b�
, 
��ru�i�
);

940 cڡ 
mp_�w_code_t
 *
rc
 = 
code_��e
->
fun_bc
->rc;

941 cڡ 
mp_by�code_��ude_t
 *
��ude
 = &
rc
->prelude;

943 
mp_u�t_t
 
off�t
 = 
�
 - 
��ude
->
�codes
;

944 
	`mp_��tf
(&
mp_��_��t
, "instr");

947 
	`mp_��tf
(&
mp_��_��t
,

949 
�
,

950 
��ude
->
q�r_sour�_f�e
,

951 
��ude
->
q�r_block_�me
,

952 
off�t
,

953 
	`mp_�of_by�code_l��o
(
rc
, 
off�t
)

958 
	`mp_��tf
(&
mp_��_��t
, " %02x %02x %02x %02x", 
�
[0], ip[1], ip[2], ip[3]);

961 
	`mp_��tf
(&
mp_��_��t
, " 0x%02x %q [%d]", *
�
, 
��ru�i�
->
q�r_��me
, in�ru�i�->
�g
);

963 i�(
��ru�i�
->
�gobj
 !�
mp_cڡ_n�e
) {

964 
	`mp_��tf
(&
mp_��_��t
, " $");

965 
	`mp_obj_��t_h��r
(&
mp_��_��t
, 
��ru�i�
->
�gobj
, 
PRINT_REPR
);

967 i�(
��ru�i�
->
�gobjex_�che
 !�
mp_cڡ_n�e
) {

968 
	`mp_��tf
(&
mp_��_��t
, " #");

969 
	`mp_obj_��t_h��r
(&
mp_��_��t
, 
��ru�i�
->
�gobjex_�che
, 
PRINT_REPR
);

972 
	`mp_��tf
(&
mp_��_��t
, "\n");

973 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\profile.h

27 #i�de�
MICROPY_INCLUDED_PY_PROFILING_H


28 
	#MICROPY_INCLUDED_PY_PROFILING_H


	)

30 
	~"py/em�glue.h
"

32 #i�
MICROPY_PY_SYS_SETTRACE


34 
	#mp_�of_is_execut�g
 
	`MP_STATE_THREAD
(
�of_��back_is_execut�g
)

	)

36 
	s_mp_obj_code_t
 {

38 
mp_obj_ba�_t
 
	mba�
;

39 cڡ 
mp_modu�_cڋxt_t
 *
	mcڋxt
;

40 cڡ 
mp_�w_code_t
 *
	mrc
;

41 
mp_obj_di�_t
 *
	mdi�_lo�ls
;

42 
mp_obj_t
 
	m��ab
;

43 } 
	tmp_obj_code_t
;

45 
	s_mp_obj_�ame_t
 {

46 
mp_obj_ba�_t
 
	mba�
;

47 cڡ 
mp_code_��e_t
 *
	mcode_��e
;

48 
_mp_obj_�ame_t
 *
	mback
;

49 
mp_obj_t
 
	m��back
;

50 
mp_obj_code_t
 *
	mcode
;

51 
mp_u�t_t
 
	mϡi
;

52 
mp_u�t_t
 
	ml��o
;

53 
bo�
 
	m�a�_�codes
;

54 } 
	tmp_obj_�ame_t
;

56 
mp_�of_ex�a�_��ude
(cڡ 
by�
 *
by�code
, 
mp_by�code_��ude_t
 *
��ude
);

58 
mp_obj_t
 
mp_obj_�w_code
(cڡ 
mp_modu�_cڋxt_t
 *
mc
, cڡ 
mp_�w_code_t
 *
rc
);

59 
mp_obj_t
 
mp_obj_�w_�ame
(cڡ 
mp_code_��e_t
 *
code_��e
);

62 
mp_obj_t
 
mp_�of_����
(mp_obj_�
��back
);

64 
mp_obj_t
 
mp_�of_�ame_��r
(
mp_code_��e_t
 *
code_��e
);

65 
mp_obj_t
 
mp_�of_�ame_upd�e
(cڡ 
mp_code_��e_t
 *
code_��e
);

68 
mp_obj_t
 
mp_�of_��r_tick
(
mp_code_��e_t
 *
code_��e
, 
bo�
 
is_ex��i�
);

72 
	#MICROPY_PROF_INSTR_DEBUG_PRINT_ENABLE
 0

	)

73 #i�
MICROPY_PROF_INSTR_DEBUG_PRINT_ENABLE


74 
mp_�of_��t_��r
(cڡ 
by�
 *
�
, 
mp_code_��e_t
 *
code_��e
);

75 
	#MP_PROF_INSTR_DEBUG_PRINT
(
cu��t_�
�
	`mp_�of_��t_��r
((cu��t_�), 
code_��e
)

	)

77 
	#MP_PROF_INSTR_DEBUG_PRINT
(
cu��t_�
)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pystack.c

27 
	~<�dio.h
>

29 
	~"py/ru�ime.h
"

31 #i�
MICROPY_ENABLE_PYSTACK


33 
	$mp_py�ack_��
(*
��t
, *
�d
) {

34 
	`MP_STATE_THREAD
(
py�ack_��t
��
��t
;

35 
	`MP_STATE_THREAD
(
py�ack_�d
��
�d
;

36 
	`MP_STATE_THREAD
(
py�ack_cur
��
��t
;

37 
	}
}

39 *
	$mp_py�ack_�loc
(
size_t
 
n_by�s
) {

40 
n_by�s
 = (n_by��+ (
MICROPY_PYSTACK_ALIGN
 - 1)) & ~(MICROPY_PYSTACK_ALIGN - 1);

41 #i�
MP_PYSTACK_DEBUG


42 
n_by�s
 +�
MICROPY_PYSTACK_ALIGN
;

44 i�(
	`MP_STATE_THREAD
(
py�ack_cur
�+ 
n_by�s
 > MP_STATE_THREAD(
py�ack_�d
)) {

46 
	`mp_�i�_ty�_�g
(&
mp_ty�_Ru�imeE��
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_py�ack_�a�_exhau�ed
));

48 *
�r
 = 
	`MP_STATE_THREAD
(
py�ack_cur
);

49 
	`MP_STATE_THREAD
(
py�ack_cur
�+�
n_by�s
;

50 #i�
MP_PYSTACK_DEBUG


51 *(
size_t
 *)(
	`MP_STATE_THREAD
(
py�ack_cur
�- 
MICROPY_PYSTACK_ALIGN
��
n_by�s
;

53  
�r
;

54 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pystack.h

26 #i�de�
MICROPY_INCLUDED_PY_PYSTACK_H


27 
	#MICROPY_INCLUDED_PY_PYSTACK_H


	)

29 
	~"py/mp��e.h
"

33 
	#MP_PYSTACK_DEBUG
 (0)

	)

35 #i�
MICROPY_ENABLE_PYSTACK


37 
mp_py�ack_��
(*
��t
, *
�d
);

38 *
mp_py�ack_�loc
(
size_t
 
n_by�s
);

43 
�l�e
 
	$mp_py�ack_�
(*
�r
) {

44 
	`as��
((
u�t8_t
 *)
�r
 >�
	`MP_STATE_THREAD
(
py�ack_��t
));

45 
	`as��
((
u�t8_t
 *)
�r
 <�
	`MP_STATE_THREAD
(
py�ack_cur
));

46 #i�
MP_PYSTACK_DEBUG


47 
size_t
 
n_by�s_to_�
 = 
	`MP_STATE_THREAD
(
py�ack_cur
�- (
u�t8_t
 *)
�r
;

48 
size_t
 
n_by�s
 = *(size_�*)(
	`MP_STATE_THREAD
(
py�ack_cur
�- 
MICROPY_PYSTACK_ALIGN
);

49 
n_by�s
 < 
n_by�s_to_�
) {

50 
n_by�s
 +�*(
size_t
 *)(
	`MP_STATE_THREAD
(
py�ack_cur
�-�_by��- 
MICROPY_PYSTACK_ALIGN
);

52 i�(
n_by�s
 !�
n_by�s_to_�
) {

53 
	`mp_��tf
(&
mp_��_��t
, "mp_py�ack_�(��ed: %u !�%u\n", (
u�t
)
n_by�s_to_�
,

54 (
u�t
)*(
size_t
 *)(
	`MP_STATE_THREAD
(
py�ack_cur
�- 
MICROPY_PYSTACK_ALIGN
));

55 
	`as��
(0);

58 
	`MP_STATE_THREAD
(
py�ack_cur
��(
u�t8_t
 *)
�r
;

59 
	}
}

61 
�l�e
 
	$mp_py�ack_��loc
(*
�r
, 
size_t
 
n_by�s
) {

62 
	`mp_py�ack_�
(
�r
);

63 
	`mp_py�ack_�loc
(
n_by�s
);

64 
	}
}

66 
�l�e
 
size_t
 
	$mp_py�ack_u�ge
() {

67  
	`MP_STATE_THREAD
(
py�ack_cur
�- MP_STATE_THREAD(
py�ack_��t
);

68 
	}
}

70 
�l�e
 
size_t
 
	$mp_py�ack_lim�
() {

71  
	`MP_STATE_THREAD
(
py�ack_�d
�- MP_STATE_THREAD(
py�ack_��t
);

72 
	}
}

76 #i�!
MICROPY_ENABLE_PYSTACK


78 
	#mp_lo�l_�loc
(
n_by�s
�
	`�lo�
�_by�s)

	)

80 
�l�e
 
	$mp_lo�l_�
(*
�r
) {

81 ()
�r
;

82 
	}
}

84 
�l�e
 *
	$mp_n�lo�l_�loc
(
size_t
 
n_by�s
) {

85  
	`m_�w
(
u�t8_t
, 
n_by�s
);

86 
	}
}

88 
�l�e
 *
	$mp_n�lo�l_��loc
(*
�r
, 
size_t
 
�d_n_by�s
, size_�
�w_n_by�s
) {

89  
	`m_��w
(
u�t8_t
, 
�r
, 
�d_n_by�s
, 
�w_n_by�s
);

90 
	}
}

92 
�l�e
 
	$mp_n�lo�l_�
(*
�r
, 
size_t
 
n_by�s
) {

93 
	`m_d�
(
u�t8_t
, 
�r
, 
n_by�s
);

94 
	}
}

98 
�l�e
 *
	$mp_lo�l_�loc
(
size_t
 
n_by�s
) {

99  
	`mp_py�ack_�loc
(
n_by�s
);

100 
	}
}

102 
�l�e
 
	$mp_lo�l_�
(*
�r
) {

103 
	`mp_py�ack_�
(
�r
);

104 
	}
}

106 
�l�e
 *
	$mp_n�lo�l_�loc
(
size_t
 
n_by�s
) {

107  
	`mp_py�ack_�loc
(
n_by�s
);

108 
	}
}

110 
�l�e
 *
	$mp_n�lo�l_��loc
(*
�r
, 
size_t
 
�d_n_by�s
, size_�
�w_n_by�s
) {

111 ()
�d_n_by�s
;

112 
	`mp_py�ack_��loc
(
�r
, 
�w_n_by�s
);

113  
�r
;

114 
	}
}

116 
�l�e
 
	$mp_n�lo�l_�
(*
�r
, 
size_t
 
n_by�s
) {

117 ()
n_by�s
;

118 
	`mp_py�ack_�
(
�r
);

119 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstr.c

27 
	~<as��.h
>

28 
	~<�r�g.h
>

29 
	~<�dio.h
>

31 
	~"py/mp��e.h
"

32 
	~"py/q�r.h
"

33 
	~"py/gc.h
"

34 
	~"py/ru�ime.h
"

36 #i�
MICROPY_DEBUG_VERBOSE


37 
	#DEBUG_��tf
 
DEBUG_��tf


	)

39 
	#DEBUG_��tf
(...�()0

	)

45 #i�
MICROPY_QSTR_BYTES_IN_HASH


46 
	#Q_HASH_MASK
 ((1 << (8 * 
MICROPY_QSTR_BYTES_IN_HASH
)�- 1)

	)

48 
	#Q_HASH_MASK
 (0xffff)

	)

51 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


52 
	#QSTR_ENTER
(�
	`mp_th�ad_mu�x_lock
(&
	`MP_STATE_VM
(
q�r_mu�x
), 1)

	)

53 
	#QSTR_EXIT
(�
	`mp_th�ad_mu�x_u�ock
(&
	`MP_STATE_VM
(
q�r_mu�x
))

	)

55 
	#QSTR_ENTER
()

	)

56 
	#QSTR_EXIT
()

	)

61 
	#MICROPY_ALLOC_QSTR_ENTRIES_INIT
 (10)

	)

64 
size_t
 
	$q�r_compu�_hash
(cڡ 
by�
 *
d�a
, 
size_t
 
�n
) {

66 
size_t
 
hash
 = 5381;

67 cڡ 
by�
 *
t�
 = 
d�a
 + 
�n
; data <�op; data++) {

68 
hash
 = ((hash << 5�+ hash�^ (*
d�a
);

70 
hash
 &�
Q_HASH_MASK
;

72 i�(
hash
 == 0) {

73 
hash
++;

75  
hash
;

76 
	}
}

84 #i�
MICROPY_QSTR_BYTES_IN_HASH


85 cڡ 
q�r_hash_t
 
	gmp_q�r_cڡ_hashes_��ic
[] = {

86 #i�de�
NO_QSTR


87 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
�hash,

	)

88 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
)

	)

89 
	~"g�hdr/q�rdefs.g���ed.h
"

90 #unde�
QDEF0


91 #unde�
QDEF1


96 cڡ 
q�r_�n_t
 
	gmp_q�r_cڡ_�ngths_��ic
[] = {

97 #i�de�
NO_QSTR


98 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
��n,

	)

99 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
)

	)

100 
	~"g�hdr/q�rdefs.g���ed.h
"

101 #unde�
QDEF0


102 #unde�
QDEF1


106 cڡ 
q�r_po�_t
 
	gmp_q�r_cڡ_po�_��ic
 = {

107 
NULL
,

109 
�l�
,

110 
MICROPY_ALLOC_QSTR_ENTRIES_INIT
,

111 
MP_QSTRnumb�_of_��ic
,

112 #i�
MICROPY_QSTR_BYTES_IN_HASH


113 (
q�r_hash_t
 *)
mp_q�r_cڡ_hashes_��ic
,

115 (
q�r_�n_t
 *)
mp_q�r_cڡ_�ngths_��ic
,

117 #i�de�
NO_QSTR


118 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
�r,

	)

119 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
)

	)

120 
	~"g�hdr/q�rdefs.g���ed.h
"

121 #unde�
QDEF0


122 #unde�
QDEF1


129 #i�
MICROPY_QSTR_BYTES_IN_HASH


130 cڡ 
q�r_hash_t
 
	gmp_q�r_cڡ_hashes
[] = {

131 #i�de�
NO_QSTR


132 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
)

	)

133 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
�hash,

	)

134 
	~"g�hdr/q�rdefs.g���ed.h
"

135 #unde�
QDEF0


136 #unde�
QDEF1


141 cڡ 
q�r_�n_t
 
	gmp_q�r_cڡ_�ngths
[] = {

142 #i�de�
NO_QSTR


143 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
)

	)

144 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
��n,

	)

145 
	~"g�hdr/q�rdefs.g���ed.h
"

146 #unde�
QDEF0


147 #unde�
QDEF1


151 cڡ 
q�r_po�_t
 
	gmp_q�r_cڡ_po�
 = {

152 &
mp_q�r_cڡ_po�_��ic
,

153 
MP_QSTRnumb�_of_��ic
,

154 
�ue
,

155 
MICROPY_ALLOC_QSTR_ENTRIES_INIT
,

156 
MP_QSTRnumb�_of
 - 
MP_QSTRnumb�_of_��ic
,

157 #i�
MICROPY_QSTR_BYTES_IN_HASH


158 (
q�r_hash_t
 *)
mp_q�r_cڡ_hashes
,

160 (
q�r_�n_t
 *)
mp_q�r_cڡ_�ngths
,

162 #i�de�
NO_QSTR


163 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
)

	)

164 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
�r,

	)

165 
	~"g�hdr/q�rdefs.g���ed.h
"

166 #unde�
QDEF0


167 #unde�
QDEF1


174 #ifde�
MICROPY_QSTR_EXTRA_POOL


175 
cڡ 
q�r_po�_t
 
MICROPY_QSTR_EXTRA_POOL
;

176 
	#CONST_POOL
 
MICROPY_QSTR_EXTRA_POOL


	)

178 
	#CONST_POOL
 
mp_q�r_cڡ_po�


	)

181 
	$q�r_��
() {

182 
	`MP_STATE_VM
(
ϡ_po�
��(
q�r_po�_t
 *)&
CONST_POOL
;

183 
	`MP_STATE_VM
(
q�r_ϡ_chunk
��
NULL
;

185 #i�
MICROPY_PY_THREAD
 && !
MICROPY_PY_THREAD_GIL


186 
	`mp_th�ad_mu�x_��
(&
	`MP_STATE_VM
(
q�r_mu�x
));

188 
	}
}

190 cڡ 
q�r_po�_t
 *
	$f�d_q�r
(
q�r
 *
q
) {

193 cڡ 
q�r_po�_t
 *
po�
 = 
	`MP_STATE_VM
(
ϡ_po�
);

194 *
q
 < 
po�
->
tٮ_�ev_�n
) {

195 
po�
 =�o�->
�ev
;

197 *
q
 -�
po�
->
tٮ_�ev_�n
;

198 
	`as��
(*
q
 < 
po�
->
�n
);

199  
po�
;

200 
	}
}

203 
q�r
 
	$q�r_add
(
mp_u�t_t
 
�n
, cڡ *
q_�r
) {

204 #i�
MICROPY_QSTR_BYTES_IN_HASH


205 
mp_u�t_t
 
hash
 = 
	`q�r_compu�_hash
((cڡ 
by�
 *)
q_�r
, 
�n
);

206 
	`DEBUG_��tf
("QSTR:�dd hash=%d��=%d d�a=%.*s\n", 
hash
, 
�n
,��, 
q_�r
);

208 
	`DEBUG_��tf
("QSTR:�dd��=%d d�a=%.*s\n", 
�n
,��, 
q_�r
);

212 i�(
	`MP_STATE_VM
(
ϡ_po�
)->
�n
 >�MP_STATE_VM�a�_po�)->
�loc
) {

213 
size_t
 
�w_�loc
 = 
	`MP_STATE_VM
(
ϡ_po�
)->
�loc
 * 2;

214 #ifde�
MICROPY_QSTR_EXTRA_POOL


216 
�w_�loc
 = 
	`MAX
(
MICROPY_ALLOC_QSTR_ENTRIES_INIT
,�ew_alloc);

218 
mp_u�t_t
 
po�_size
 = (
q�r_po�_t
)

220 #i�
MICROPY_QSTR_BYTES_IN_HASH


221 + (
q�r_hash_t
)

223 + (
q�r_�n_t
)�* 
�w_�loc
;

224 
q�r_po�_t
 *
po�
 = (q�r_po�_�*)
	`m_m�loc_maybe
(
po�_size
);

225 i�(
po�
 =�
NULL
) {

231 
	`MP_STATE_VM
(
q�r_ϡ_chunk
��
NULL
;

232 
	`QSTR_EXIT
();

233 
	`m_m�loc_�
(
�w_�loc
);

235 #i�
MICROPY_QSTR_BYTES_IN_HASH


236 
po�
->
hashes
 = (
q�r_hash_t
 *)�o�->
q�rs
 + 
�w_�loc
);

237 
po�
->
�ngths
 = (
q�r_�n_t
 *)�o�->
hashes
 + 
�w_�loc
);

239 
po�
->
�ngths
 = (
q�r_�n_t
 *)�o�->
q�rs
 + 
�w_�loc
);

241 
po�
->
�ev
 = 
	`MP_STATE_VM
(
ϡ_po�
);

242 
po�
->
tٮ_�ev_�n
 = 
	`MP_STATE_VM
(
ϡ_po�
)->tٮ_�ev_��+ MP_STATE_VM�a�_po�)->
�n
;

243 
po�
->
�loc
 = 
�w_�loc
;

244 
po�
->
�n
 = 0;

245 
	`MP_STATE_VM
(
ϡ_po�
��
po�
;

246 
	`DEBUG_��tf
("QSTR:��o���ew�o� o�siz�%d\n", 
	`MP_STATE_VM
(
ϡ_po�
)->
�loc
);

250 
mp_u�t_t
 
�
 = 
	`MP_STATE_VM
(
ϡ_po�
)->
�n
;

251 #i�
MICROPY_QSTR_BYTES_IN_HASH


252 
	`MP_STATE_VM
(
ϡ_po�
)->
hashes
[
�
] = 
hash
;

254 
	`MP_STATE_VM
(
ϡ_po�
)->
�ngths
[
�
] = 
�n
;

255 
	`MP_STATE_VM
(
ϡ_po�
)->
q�rs
[
�
] = 
q_�r
;

256 
	`MP_STATE_VM
(
ϡ_po�
)->
�n
++;

259  
	`MP_STATE_VM
(
ϡ_po�
)->
tٮ_�ev_�n
 + 
�
;

260 
	}
}

262 
q�r
 
	$q�r_f�d_��
(cڡ *
�r
, 
size_t
 
�r_�n
) {

263 i�(
�r_�n
 == 0) {

265  
MP_QSTR_
;

268 #i�
MICROPY_QSTR_BYTES_IN_HASH


270 
size_t
 
�r_hash
 = 
	`q�r_compu�_hash
((cڡ 
by�
 *)
�r
, 
�r_�n
);

274 cڡ 
q�r_po�_t
 *
po�
 = 
	`MP_STATE_VM
(
ϡ_po�
);�o� !�
NULL
;�o� =�o�->
�ev
) {

275 
size_t
 
low
 = 0;

276 
size_t
 
high
 = 
po�
->
�n
 - 1;

279 i�(
po�
->
is_s܋d
) {

280 
high
 - 
low
 > 1) {

281 
size_t
 
mid
 = (
low
 + 
high
) / 2;

282 
cmp
 = 
	`��cmp
(
�r
, 
po�
->
q�rs
[
mid
], 
�r_�n
);

283 i�(
cmp
 <= 0) {

284 
high
 = 
mid
;

286 
low
 = 
mid
;

292 
mp_u�t_t
 
�
 = 
low
;��< 
high
 + 1;�t++) {

294 #i�
MICROPY_QSTR_BYTES_IN_HASH


295 
po�
->
hashes
[
�
] =�
�r_hash
 &&

297 
po�
->
�ngths
[
�
] =�
�r_�n


298 && 
	`memcmp
(
po�
->
q�rs
[
�
], 
�r
, 
�r_�n
) == 0) {

299  
po�
->
tٮ_�ev_�n
 + 
�
;

305  
MP_QSTRnu�
;

306 
	}
}

308 
q�r
 
	$q�r_�om_�r
(cڡ *
�r
) {

309  
	`q�r_�om_��
(
�r
, 
	`���
(str));

310 
	}
}

312 
q�r
 
	$q�r_�om_��
(cڡ *
�r
, 
size_t
 
�n
) {

313 
	`QSTR_ENTER
();

314 
q�r
 
q
 = 
	`q�r_f�d_��
(
�r
, 
�n
);

315 i�(
q
 == 0) {

319 i�(
�n
 >�(1 << (8 * 
MICROPY_QSTR_BYTES_IN_LEN
))) {

320 
	`QSTR_EXIT
();

321 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("name�oo�ong"));

325 
size_t
 
n_by�s
 = 
�n
 + 1;

327 i�(
	`MP_STATE_VM
(
q�r_ϡ_chunk
�!�
NULL
 && MP_STATE_VM(
q�r_ϡ_u�d
�+ 
n_by�s
 > MP_STATE_VM(
q�r_ϡ_�loc
)) {

329 *
�w_p
 = 
	`m_��w_maybe
(, 
	`MP_STATE_VM
(
q�r_ϡ_chunk
), MP_STATE_VM(
q�r_ϡ_�loc
), MP_STATE_VM(q�r_ϡ_�loc�+ 
n_by�s
, 
�l�
);

330 i�(
�w_p
 =�
NULL
) {

332 ()
	`m_��w_maybe
(, 
	`MP_STATE_VM
(
q�r_ϡ_chunk
), MP_STATE_VM(
q�r_ϡ_�loc
), MP_STATE_VM(
q�r_ϡ_u�d
), 
�l�
);

333 
	`MP_STATE_VM
(
q�r_ϡ_chunk
��
NULL
;

336 
	`MP_STATE_VM
(
q�r_ϡ_�loc
�+�
n_by�s
;

340 i�(
	`MP_STATE_VM
(
q�r_ϡ_chunk
�=�
NULL
) {

342 
size_t
 
�
 = 
n_by�s
;

343 i�(
�
 < 
MICROPY_ALLOC_QSTR_CHUNK_INIT
) {

344 
�
 = 
MICROPY_ALLOC_QSTR_CHUNK_INIT
;

346 
	`MP_STATE_VM
(
q�r_ϡ_chunk
��
	`m_�w_maybe
(, 
�
);

347 i�(
	`MP_STATE_VM
(
q�r_ϡ_chunk
�=�
NULL
) {

349 
	`MP_STATE_VM
(
q�r_ϡ_chunk
��
	`m_�w_maybe
(, 
n_by�s
);

350 i�(
	`MP_STATE_VM
(
q�r_ϡ_chunk
�=�
NULL
) {

351 
	`QSTR_EXIT
();

352 
	`m_m�loc_�
(
n_by�s
);

354 
�
 = 
n_by�s
;

356 
	`MP_STATE_VM
(
q�r_ϡ_�loc
��
�
;

357 
	`MP_STATE_VM
(
q�r_ϡ_u�d
) = 0;

361 *
q_�r
 = 
	`MP_STATE_VM
(
q�r_ϡ_chunk
�+ MP_STATE_VM(
q�r_ϡ_u�d
);

362 
	`MP_STATE_VM
(
q�r_ϡ_u�d
�+�
n_by�s
;

365 
	`mem�y
(
q_�r
, 
�r
, 
�n
);

366 
q_�r
[
�n
] = '\0';

367 
q
 = 
	`q�r_add
(
�n
, 
q_�r
);

369 
	`QSTR_EXIT
();

370  
q
;

371 
	}
}

373 
mp_u�t_t
 
	$q�r_hash
(
q�r
 
q
) {

374 cڡ 
q�r_po�_t
 *
po�
 = 
	`f�d_q�r
(&
q
);

375 #i�
MICROPY_QSTR_BYTES_IN_HASH


376  
po�
->
hashes
[
q
];

378  
	`q�r_compu�_hash
((
by�
 *)
po�
->
q�rs
[
q
],�o�->
�ngths
[q]);

380 
	}
}

382 
size_t
 
	$q�r_�n
(
q�r
 
q
) {

383 cڡ 
q�r_po�_t
 *
po�
 = 
	`f�d_q�r
(&
q
);

384  
po�
->
�ngths
[
q
];

385 
	}
}

387 cڡ *
	$q�r_�r
(
q�r
 
q
) {

388 cڡ 
q�r_po�_t
 *
po�
 = 
	`f�d_q�r
(&
q
);

389  
po�
->
q�rs
[
q
];

390 
	}
}

392 cڡ 
by�
 *
	$q�r_d�a
(
q�r
 
q
, 
size_t
 *
�n
) {

393 cڡ 
q�r_po�_t
 *
po�
 = 
	`f�d_q�r
(&
q
);

394 *
�n
 = 
po�
->
�ngths
[
q
];

395  (
by�
 *)
po�
->
q�rs
[
q
];

396 
	}
}

398 
	$q�r_po�_�fo
(
size_t
 *
n_po�
, size_�*
n_q�r
, size_�*
n_�r_d�a_by�s
, size_�*
n_tٮ_by�s
) {

399 
	`QSTR_ENTER
();

400 *
n_po�
 = 0;

401 *
n_q�r
 = 0;

402 *
n_�r_d�a_by�s
 = 0;

403 *
n_tٮ_by�s
 = 0;

404 cڡ 
q�r_po�_t
 *
po�
 = 
	`MP_STATE_VM
(
ϡ_po�
);�o� !�
NULL
 &&�o� !�&
CONST_POOL
;�o� =�o�->
�ev
) {

405 *
n_po�
 += 1;

406 *
n_q�r
 +�
po�
->
�n
;

407 
q�r_�n_t
 *
l
 = 
po�
->
�ngths
, *
l_t�
 =�o�->�ngth�+�o�->
�n
;� <�_top;�++) {

408 *
n_�r_d�a_by�s
 +�*
l
 + 1;

410 #i�
MICROPY_ENABLE_GC


411 *
n_tٮ_by�s
 +�
	`gc_nby�s
(
po�
);

413 *
n_tٮ_by�s
 +�(
q�r_po�_t
)

415 #i�
MICROPY_QSTR_BYTES_IN_HASH


416 + (
q�r_hash_t
)

418 + (
q�r_�n_t
)�* 
po�
->
�loc
;

421 *
n_tٮ_by�s
 +�*
n_�r_d�a_by�s
;

422 
	`QSTR_EXIT
();

423 
	}
}

425 #i�
MICROPY_PY_MICROPYTHON_MEM_INFO


426 
	$q�r_dump_d�a
() {

427 
	`QSTR_ENTER
();

428 cڡ 
q�r_po�_t
 *
po�
 = 
	`MP_STATE_VM
(
ϡ_po�
);�o� !�
NULL
 &&�o� !�&
CONST_POOL
;�o� =�o�->
�ev
) {

429 cڡ *cڡ *
q
 = 
po�
->
q�rs
, *cڡ *
q_t�
 =�o�->q�r�+�o�->
�n
; q < q_top; q++) {

430 
	`mp_��tf
(&
mp_��_��t
, "Q(%s)\n", *
q
);

433 
	`QSTR_EXIT
();

434 
	}
}

437 #i�
MICROPY_ROM_TEXT_COMPRESSION


439 #ifde�
NO_QSTR


447 
	#MP_COMPRESSED_DATA
(
x
�cڡ *
com�es�d_�r�g_d�a
 = x;

	)

448 
	#MP_MATCH_COMPRESSED
(
a
, 
b
)

	)

449 
	~"g�hdr/com�es�d.d�a.h
"

450 #unde�
MP_COMPRESSED_DATA


451 #unde�
MP_MATCH_COMPRESSED


461 cڡ 
by�
 *
	$f�d_uncom�es�d_�r�g
(
u�t8_t
 
n
) {

462 cڡ 
by�
 *
c
 = (by� *)
com�es�d_�r�g_d�a
;

463 
n
 > 0) {

464 (*
c
 & 0x80) == 0) {

465 ++
c
;

467 ++
c
;

468 --
n
;

470  
c
;

471 
	}
}

475 
	$mp_decom�ess_rom_�r�g
(
by�
 *
d�
, cڡ 
mp_rom_�r�_�xt_t
 
�c_chr
) {

477 cڡ 
by�
 *
�c
 = (by� *)
�c_chr
 + 1;

480 
��e
 = 0;

481 *
�c
) {

482 i�((
by�
�* 
�c
 >= 128) {

483 i�(
��e
 != 0) {

484 *
d�
++ = ' ';

486 
��e
 = 1;

489 cڡ 
by�
 *
w�d
 = 
	`f�d_uncom�es�d_�r�g
(*
�c
 & 0x7f);

491 (*
w�d
 & 0x80) == 0) {

492 *
d�
++ = *
w�d
++;

494 *
d�
++ = (*
w�d
 & 0x7f);

497 i�(
��e
 == 1) {

498 *
d�
++ = ' ';

500 
��e
 = 2;

502 *
d�
++ = *
�c
;

504 ++
�c
;

507 *
d�
 = 0;

508 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstr.h

26 #i�de�
MICROPY_INCLUDED_PY_QSTR_H


27 
	#MICROPY_INCLUDED_PY_QSTR_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

40 #i�de�
NO_QSTR


41 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
�id,

	)

42 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
)

	)

43 
	~"g�hdr/q�rdefs.g���ed.h
"

44 #unde�
QDEF0


45 #unde�
QDEF1


47 
	mMP_QSTRnumb�_of_��ic
,

48 
	mMP_QSTR��t_of_ma�
 = 
MP_QSTRnumb�_of_��ic
 - 1,

50 #i�de�
NO_QSTR


51 
	#QDEF0
(
id
, 
hash
, 
�n
, 
�r
)

	)

52 
	#QDEF1
(
id
, 
hash
, 
�n
, 
�r
�id,

	)

53 
	~"g�hdr/q�rdefs.g���ed.h
"

54 #unde�
QDEF0


55 #unde�
QDEF1


57 
	mMP_QSTRnumb�_of
,

60 
size_t
 
	tq�r
;

61 
u�t16_t
 
	tq�r_sh�t_t
;

63 #i�
MICROPY_QSTR_BYTES_IN_HASH
 == 0

65 #�i�
MICROPY_QSTR_BYTES_IN_HASH
 == 1

66 
u�t8_t
 
	tq�r_hash_t
;

67 #�i�
MICROPY_QSTR_BYTES_IN_HASH
 == 2

68 
u�t16_t
 
	tq�r_hash_t
;

70 #�r� 
unim�em��d
 
q�r
 
hash
 
decod�g


73 #i�
MICROPY_QSTR_BYTES_IN_LEN
 == 1

74 
u�t8_t
 
	tq�r_�n_t
;

75 #�i�
MICROPY_QSTR_BYTES_IN_LEN
 == 2

76 
u�t16_t
 
	tq�r_�n_t
;

78 #�r� 
unim�em��d
 
q�r
 
�ngth
 
decod�g


81 
	s_q�r_po�_t
 {

82 cڡ 
_q�r_po�_t
 *
	m�ev
;

83 
size_t
 
	mtٮ_�ev_�n
 : (8 * (size_t) - 1);

84 
size_t
 
	mis_s܋d
 : 1;

85 
size_t
 
	m�loc
;

86 
size_t
 
	m�n
;

87 #i�
MICROPY_QSTR_BYTES_IN_HASH


88 
q�r_hash_t
 *
	mhashes
;

90 
q�r_�n_t
 *
	m�ngths
;

91 cڡ *
	mq�rs
[];

92 } 
	tq�r_po�_t
;

94 
	#QSTR_TOTAL
(�(
	`MP_STATE_VM
(
ϡ_po�
)->
tٮ_�ev_�n
 + MP_STATE_VM�a�_po�)->
�n
)

	)

96 
q�r_��
();

98 
size_t
 
q�r_compu�_hash
(cڡ 
by�
 *
d�a
, size_�
�n
);

100 
q�r
 
q�r_f�d_��
(cڡ *
�r
, 
size_t
 
�r_�n
);

102 
q�r
 
q�r_�om_�r
(cڡ *
�r
);

103 
q�r
 
q�r_�om_��
(cڡ *
�r
, 
size_t
 
�n
);

105 
mp_u�t_t
 
q�r_hash
(
q�r
 
q
);

106 cڡ *
q�r_�r
(
q�r
 
q
);

107 
size_t
 
q�r_�n
(
q�r
 
q
);

108 cڡ 
by�
 *
q�r_d�a
(
q�r
 
q
, 
size_t
 *
�n
);

110 
q�r_po�_�fo
(
size_t
 *
n_po�
, size_�*
n_q�r
, size_�*
n_�r_d�a_by�s
, size_�*
n_tٮ_by�s
);

111 
q�r_dump_d�a
();

113 #i�
MICROPY_ROM_TEXT_COMPRESSION


114 
mp_decom�ess_rom_�r�g
(
by�
 *
d�
, cڡ 
mp_rom_�r�_�xt_t
 
�c
);

115 
	#MP_IS_COMPRESSED_ROM_STRING
(
s
�(*(
by�
 *)(s�=�0xff)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstrdefs.h

29 
	~"py/mpc�fig.h
"

35 
	$QCFG
(
BYTES_IN_LEN
, 
MICROPY_QSTR_BYTES_IN_LEN
)

36 
	$QCFG
(
BYTES_IN_HASH
, 
MICROPY_QSTR_BYTES_IN_HASH
)

38 
	$Q
()

39 
	$Q
(*)

40 
	$Q
(
_
)

41 
	`Q
(/)

42 #i�
MICROPY_PY_SYS_PS1_PS2


43 
	`Q
(>>> )

44 
	$Q
(... )

46 #i�
MICROPY_PY_BUILTINS_STR_OP_MODULO


47 
	`Q
(%#o)

48 
	`Q
(%#x)

50 
	`Q
({:#o
	}
})

51 
Q
({:#x})

53 
Q
({:#b})

54 
	$Q
( )

55 
	`Q
(\
n
)

56 
	$Q
(
maximum
 
�cursi�
 
d�th
 
ex�eded
)

57 
	`Q
(<
modu�
>)

58 
	`Q
(<
�mbda
>)

59 
	`Q
(<
li�comp
>)

60 
	`Q
(<
di�comp
>)

61 
	`Q
(<
�tcomp
>)

62 
	`Q
(<
g�ex�
>)

63 
	`Q
(<
�r�g
>)

64 
	`Q
(<
�d�
>)

65 
	`Q
(
utf
-8)

67 #i�
MICROPY_MODULE_FROZEN


68 
	$Q
(.
�oz�
)

71 #i�
MICROPY_ENABLE_PYSTACK


72 
	$Q
(
py�ack
 
exhau�ed
)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\reader.c

27 
	~<�dio.h
>

28 
	~<as��.h
>

30 
	~"py/ru�ime.h
"

31 
	~"py/m��no.h
"

32 
	~"py/m�h�ad.h
"

33 
	~"py/�ad�.h
"

35 
	s_mp_�ad�_mem_t
 {

36 
size_t
 
	m�_�n
;

37 cڡ 
by�
 *
	mbeg
;

38 cڡ 
by�
 *
	mcur
;

39 cڡ 
by�
 *
	m�d
;

40 } 
	tmp_�ad�_mem_t
;

42 
mp_u�t_t
 
	$mp_�ad�_mem_�adby�
(*
d�a
) {

43 
mp_�ad�_mem_t
 *
�ad�
 = (mp_�ad�_mem_�*)
d�a
;

44 i�(
�ad�
->
cur
 <��d�->
�d
) {

45  *
�ad�
->
cur
++;

47  
MP_READER_EOF
;

49 
	}
}

51 
	$mp_�ad�_mem_�o�
(*
d�a
) {

52 
mp_�ad�_mem_t
 *
�ad�
 = (mp_�ad�_mem_�*)
d�a
;

53 i�(
�ad�
->
�_�n
 > 0) {

54 
	`m_d�
(, (*)
�ad�
->
beg
,��d�->
�_�n
);

56 
	`m_d�_obj
(
mp_�ad�_mem_t
, 
�ad�
);

57 
	}
}

59 
	$mp_�ad�_�w_mem
(
mp_�ad�_t
 *
�ad�
, cڡ 
by�
 *
buf
, 
size_t
 
�n
, size_�
�_�n
) {

60 
mp_�ad�_mem_t
 *
rm
 = 
	`m_�w_obj
(mp_reader_mem_t);

61 
rm
->
�_�n
 = free_len;

62 
rm
->
beg
 = 
buf
;

63 
rm
->
cur
 = 
buf
;

64 
rm
->
�d
 = 
buf
 + 
�n
;

65 
�ad�
->
d�a
 = 
rm
;

66 
�ad�
->
�adby�
 = 
mp_�ad�_mem_�adby�
;

67 
�ad�
->
�o�
 = 
mp_�ad�_mem_�o�
;

68 
	}
}

70 #i�
MICROPY_READER_POSIX


72 
	~<sys/��.h
>

73 
	~<f��.h
>

74 
	~<uni�d.h
>

76 
	s_mp_�ad�_posix_t
 {

77 
bo�
 
	m�o�_fd
;

78 
	mfd
;

79 
size_t
 
	m�n
;

80 
size_t
 
	mpos
;

81 
by�
 
	mbuf
[20];

82 } 
	tmp_�ad�_posix_t
;

84 
mp_u�t_t
 
	$mp_�ad�_posix_�adby�
(*
d�a
) {

85 
mp_�ad�_posix_t
 *
�ad�
 = (mp_�ad�_posix_�*)
d�a
;

86 i�(
�ad�
->
pos
 >�ad�->
�n
) {

87 i�(
�ad�
->
�n
 == 0) {

88  
MP_READER_EOF
;

90 
	`MP_THREAD_GIL_EXIT
();

91 
n
 = 
	`�ad
(
�ad�
->
fd
,��d�->
buf
, (reader->buf));

92 
	`MP_THREAD_GIL_ENTER
();

93 i�(
n
 <= 0) {

94 
�ad�
->
�n
 = 0;

95  
MP_READER_EOF
;

97 
�ad�
->
�n
 = 
n
;

98 
�ad�
->
pos
 = 0;

101  
�ad�
->
buf
[�ad�->
pos
++];

102 
	}
}

104 
	$mp_�ad�_posix_�o�
(*
d�a
) {

105 
mp_�ad�_posix_t
 *
�ad�
 = (mp_�ad�_posix_�*)
d�a
;

106 i�(
�ad�
->
�o�_fd
) {

107 
	`MP_THREAD_GIL_EXIT
();

108 
	`�o�
(
�ad�
->
fd
);

109 
	`MP_THREAD_GIL_ENTER
();

111 
	`m_d�_obj
(
mp_�ad�_posix_t
, 
�ad�
);

112 
	}
}

114 
	$mp_�ad�_�w_f�e_�om_fd
(
mp_�ad�_t
 *
�ad�
, 
fd
, 
bo�
 
�o�_fd
) {

115 
mp_�ad�_posix_t
 *
�
 = 
	`m_�w_obj
(mp_reader_posix_t);

116 
�
->
�o�_fd
 = close_fd;

117 
�
->
fd
 = fd;

118 
	`MP_THREAD_GIL_EXIT
();

119 
n
 = 
	`�ad
(
�
->
fd
,�p->
buf
, (rp->buf));

120 i�(
n
 == -1) {

121 i�(
�o�_fd
) {

122 
	`�o�
(
fd
);

124 
	`MP_THREAD_GIL_ENTER
();

125 
	`mp_�i�_OSE��
(
��o
);

127 
	`MP_THREAD_GIL_ENTER
();

128 
�
->
�n
 = 
n
;

129 
�
->
pos
 = 0;

130 
�ad�
->
d�a
 = 
�
;

131 
�ad�
->
�adby�
 = 
mp_�ad�_posix_�adby�
;

132 
�ad�
->
�o�
 = 
mp_�ad�_posix_�o�
;

133 
	}
}

135 #i�!
MICROPY_VFS_POSIX


137 
	$mp_�ad�_�w_f�e
(
mp_�ad�_t
 *
�ad�
, 
q�r
 
f��ame
) {

138 
	`MP_THREAD_GIL_EXIT
();

139 
fd
 = 
	`ݒ
(
	`q�r_�r
(
f��ame
), 
O_RDONLY
, 0644);

140 
	`MP_THREAD_GIL_ENTER
();

141 i�(
fd
 < 0) {

142 
	`mp_�i�_OSE��_w�h_f��ame
(
��o
, 
	`q�r_�r
(
f��ame
));

144 
	`mp_�ad�_�w_f�e_�om_fd
(
�ad�
, 
fd
, 
�ue
);

145 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\reader.h

26 #i�de�
MICROPY_INCLUDED_PY_READER_H


27 
	#MICROPY_INCLUDED_PY_READER_H


	)

29 
	~"py/obj.h
"

34 
	#MP_READER_EOF
 ((
mp_u�t_t
)(-1))

	)

36 
	s_mp_�ad�_t
 {

37 *
	md�a
;

38 
mp_u�t_t
 (*
�adby�
)(*
	md�a
);

39 (*
	m�o�
)(*
	md�a
);

40 } 
	tmp_�ad�_t
;

42 
mp_�ad�_�w_mem
(
mp_�ad�_t
 *
�ad�
, cڡ 
by�
 *
buf
, 
size_t
 
�n
, size_�
�_�n
);

43 
mp_�ad�_�w_f�e
(
mp_�ad�_t
 *
�ad�
, 
q�r
 
f��ame
);

44 
mp_�ad�_�w_f�e_�om_fd
(
mp_�ad�_t
 *
�ad�
, 
fd
, 
bo�
 
�o�_fd
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\repl.c

27 
	~<�r�g.h
>

28 
	~"py/obj.h
"

29 
	~"py/objmodu�.h
"

30 
	~"py/ru�ime.h
"

31 
	~"py/bu�t�.h
"

32 
	~"py/��.h
"

34 #i�
MICROPY_HELPER_REPL


36 #i�
MICROPY_PY_SYS_PS1_PS2


37 cڡ *
	$mp_��_g�_psx
(
��y
) {

38 i�(
	`mp_obj_is_�r
(
	`MP_STATE_VM
(
sys_mu�b�
)[
��y
])) {

39  
	`mp_obj_�r_g�_�r
(
	`MP_STATE_VM
(
sys_mu�b�
)[
��y
]);

43 
	}
}

46 
bo�
 
	$�r_��tsw�h_w�d
(cڡ *
�r
, cڡ *
h�d
) {

47 
size_t
 
i
;

48 
i
 = 0; 
�r
[i] && 
h�d
[i]; i++) {

49 i�(
�r
[
i
] !�
h�d
[i]) {

50  
�l�
;

53  
h�d
[
i
] =�'\0' && (
�r
[i] =�'\0' || !
	`unich�_isid�t
(str[i]));

54 
	}
}

56 
bo�
 
	$mp_��_c�t�ue_w�h_�put
(cڡ *
�put
) {

58 i�(
�put
[0] == '\0') {

59  
�l�
;

63 
bo�
 
��ts_w�h_compound_keyw�d
 =

64 
�put
[0] == '@'

65 || 
	`�r_��tsw�h_w�d
(
�put
, "if")

66 || 
	`�r_��tsw�h_w�d
(
�put
, "while")

67 || 
	`�r_��tsw�h_w�d
(
�put
, "for")

68 || 
	`�r_��tsw�h_w�d
(
�put
, "try")

69 || 
	`�r_��tsw�h_w�d
(
�put
, "with")

70 || 
	`�r_��tsw�h_w�d
(
�put
, "def")

71 || 
	`�r_��tsw�h_w�d
(
�put
, "class")

72 #i�
MICROPY_PY_ASYNC_AWAIT


73 || 
	`�r_��tsw�h_w�d
(
�put
, "async")

78 
	#Q_NONE
 (0)

	)

79 
	#Q_1_SINGLE
 (1)

	)

80 
	#Q_1_DOUBLE
 (2)

	)

81 
	#Q_3_SINGLE
 (3)

	)

82 
	#Q_3_DOUBLE
 (4)

	)

83 
n_��n
 = 0;

84 
n_b�ck
 = 0;

85 
n_b��
 = 0;

86 
�_qu�e
 = 
Q_NONE
;

87 cڡ *
i
;

88 
i
 = 
�put
; *i; i++) {

89 i�(*
i
 == '\'') {

90 i�((
�_qu�e
 =�
Q_NONE
 || in_quِ=�
Q_3_SINGLE
�&& 
i
[1] == '\'' && i[2] == '\'') {

91 
i
 += 2;

92 
�_qu�e
 = 
Q_3_SINGLE
 - in_quote;

93 } i�(
�_qu�e
 =�
Q_NONE
 || in_quِ=�
Q_1_SINGLE
) {

94 
�_qu�e
 = 
Q_1_SINGLE
 - in_quote;

96 } i�(*
i
 == '"') {

97 i�((
�_qu�e
 =�
Q_NONE
 || in_quِ=�
Q_3_DOUBLE
�&& 
i
[1] == '"' && i[2] == '"') {

98 
i
 += 2;

99 
�_qu�e
 = 
Q_3_DOUBLE
 - in_quote;

100 } i�(
�_qu�e
 =�
Q_NONE
 || in_quِ=�
Q_1_DOUBLE
) {

101 
�_qu�e
 = 
Q_1_DOUBLE
 - in_quote;

103 } i�(*
i
 == '\\' && (i[1] == '\'' || i[1] == '"' || i[1] == '\\')) {

104 i�(
�_qu�e
 !�
Q_NONE
) {

105 
i
++;

107 } i�(
�_qu�e
 =�
Q_NONE
) {

108 *
i
) {

110 
n_��n
 += 1;

113 
n_��n
 -= 1;

116 
n_b�ck
 += 1;

119 
n_b�ck
 -= 1;

122 
n_b��
 += 1;

125 
n_b��
 -= 1;

134 i�(
�_qu�e
 =�
Q_3_SINGLE
 || in_quِ=�
Q_3_DOUBLE
) {

135  
�ue
;

139 i�((
n_��n
 > 0 || 
n_b�ck
 > 0 || 
n_b��
 > 0�&& 
�_qu�e
 =�
Q_NONE
) {

140  
�ue
;

144 i�(
i
[-1] == '\\') {

145  
�ue
;

149 i�(
��ts_w�h_compound_keyw�d
 && 
i
[-1] != '\n') {

150  
�ue
;

154  
�l�
;

155 
	}
}

157 
bo�
 
	$��_q�r
(
mp_obj_t
 
obj
, 
q�r
 
�me
) {

158 i�(
obj
) {

160 
mp_obj_t
 
de�
[2];

161 
	`mp_l�d_m�hod_��e�ed
(
obj
, 
�me
, 
de�
, 
�ue
);

162  
de�
[0] !�
MP_OBJ_NULL
;

165  
	`mp_m�_lookup
((
mp_m�_t
 *)&
mp_bu�t�_modu�_m�
, 
	`MP_OBJ_NEW_QSTR
(
�me
), 
MP_MAP_LOOKUP
) ||

166 
	`mp_m�_lookup
((
mp_m�_t
 *)&
mp_bu�t�_ex�nsib�_modu�_m�
, 
	`MP_OBJ_NEW_QSTR
(
�me
), 
MP_MAP_LOOKUP
);

168 
	}
}

170 cڡ *
	$f�d_com��i�s
(cڡ *
s_��t
, 
size_t
 
s_�n
,

171 
mp_obj_t
 
obj
, 
size_t
 *
m�ch_�n
, 
q�r
 *
q_f��
, q��*
q_ϡ
) {

173 cڡ *
m�ch_�r
 = 
NULL
;

174 *
m�ch_�n
 = 0;

175 *
q_f��
 = *
q_ϡ
 = 0;

176 
size_t
 
nq�r
 = 
	`QSTR_TOTAL
();

177 
q�r
 
q
 = 
MP_QSTR_
 + 1; q < 
nq�r
; ++q) {

178 
size_t
 
d_�n
;

179 cڡ *
d_�r
 = (cڡ *)
	`q�r_d�a
(
q
, &
d_�n
);

182 i�(
s_�n
 =�0 && 
d_�r
[0] == '_') {

185 i�(
s_�n
 <�
d_�n
 && 
	`��cmp
(
s_��t
, 
d_�r
, s_len) == 0) {

186 i�(
	`��_q�r
(
obj
, 
q
)) {

187 i�(
m�ch_�r
 =�
NULL
) {

188 
m�ch_�r
 = 
d_�r
;

189 *
m�ch_�n
 = 
d_�n
;

193 
size_t
 
j
 = 
s_�n
; j <�*
m�ch_�n
 && j <�
d_�n
; ++j) {

194 i�(
m�ch_�r
[
j
] !�
d_�r
[j]) {

195 *
m�ch_�n
 = 
j
;

200 i�(*
q_f��
 == 0) {

201 *
q_f��
 = 
q
;

203 *
q_ϡ
 = 
q
;

207  
m�ch_�r
;

208 
	}
}

210 
	$��t_com��i�s
(cڡ 
mp_��t_t
 *
��t
,

211 cڡ *
s_��t
, 
size_t
 
s_�n
,

212 
mp_obj_t
 
obj
, 
q�r
 
q_f��
, q��
q_ϡ
) {

214 
	#WORD_SLOT_LEN
 (16)

	)

215 
	#MAX_LINE_LEN
 (4 * 
WORD_SLOT_LEN
)

	)

217 
l�e_�n
 = 
MAX_LINE_LEN
;

218 
q�r
 
q
 = 
q_f��
; q <�
q_ϡ
; ++q) {

219 
size_t
 
d_�n
;

220 cڡ *
d_�r
 = (cڡ *)
	`q�r_d�a
(
q
, &
d_�n
);

221 i�(
s_�n
 <�
d_�n
 && 
	`��cmp
(
s_��t
, 
d_�r
, s_len) == 0) {

222 i�(
	`��_q�r
(
obj
, 
q
)) {

223 
g�
 = (
l�e_�n
 + 
WORD_SLOT_LEN
 - 1) / WORD_SLOT_LEN * WORD_SLOT_LEN -�ine_len;

224 i�(
g�
 < 2) {

225 
g�
 +�
WORD_SLOT_LEN
;

227 i�(
l�e_�n
 + 
g�
 + 
d_�n
 <�
MAX_LINE_LEN
) {

228 
j
 = 0; j < 
g�
; ++j) {

229 
	`mp_��t_�r
(
��t
, " ");

231 
	`mp_��t_�r
(
��t
, 
d_�r
);

232 
l�e_�n
 +�
g�
 + 
d_�n
;

234 
	`mp_��tf
(
��t
, "\n%s", 
d_�r
);

235 
l�e_�n
 = 
d_�n
;

240 
	`mp_��t_�r
(
��t
, "\n");

241 
	}
}

243 
size_t
 
	$mp_��_autocom��e
(cڡ *
�r
, 
size_t
 
�n
, cڡ 
mp_��t_t
 *
��t
, cڡ **
com�_�r
) {

245 cڡ *
�g_�r
 = 
�r
;

246 cڡ *
t�
 = 
�r
 + 
�n
;

247 cڡ *
s
 = 
t�
; --�>�
�r
;) {

248 i�(!(
	`unich�_i��ha
(*
s
�|| 
	`unich�_isdig�
(*s) || *s == '_' || *s == '.')) {

249 ++
s
;

250 
�r
 = 
s
;

256 
mp_obj_t
 
obj
 = 
	`MP_OBJ_FROM_PTR
(&
mp_modu�___ma�__
);

257 
mp_obj_t
 
de�
[2];

259 cڡ *
s_��t
;

260 
size_t
 
s_�n
;

264 
s_��t
 = 
�r
;

265 
�r
 < 
t�
 && *str != '.') {

266 ++
�r
;

268 
s_�n
 = 
�r
 - 
s_��t
;

270 i�(
�r
 =�
t�
) {

276 
q�r
 
q
 = 
	`q�r_f�d_��
(
s_��t
, 
s_�n
);

277 i�(
q
 =�
MP_QSTRnu�
) {

281 
	`mp_l�d_m�hod_��e�ed
(
obj
, 
q
, 
de�
, 
�ue
);

282 
obj
 = 
de�
[0];

284 i�(
obj
 =�
MP_OBJ_NULL
) {

290 ++
�r
;

294 cڡ 
imp�t_�r
[] = "import ";

295 i�(
�n
 >�7 && !
	`memcmp
(
�g_�r
, 
imp�t_�r
, 7)) {

296 
obj
 = 
MP_OBJ_NULL
;

300 
size_t
 
m�ch_�n
;

301 
q�r
 
q_f��
, 
q_ϡ
;

302 cڡ *
m�ch_�r
 =

303 
	`f�d_com��i�s
(
s_��t
, 
s_�n
, 
obj
, &
m�ch_�n
, &
q_f��
, &
q_ϡ
);

306 i�(
q_f��
 == 0) {

309 i�(
s_��t
 =�
�g_�r
 && 
s_�n
 > 0 && s_��< (
imp�t_�r
) - 1) {

310 i�(
	`memcmp
(
s_��t
, 
imp�t_�r
, 
s_�n
) == 0) {

311 *
com�_�r
 = 
imp�t_�r
 + 
s_�n
;

312  (
imp�t_�r
�- 1 - 
s_�n
;

319 i�(
q_f��
 =�
q_ϡ
 || 
m�ch_�n
 > 
s_�n
) {

320 *
com�_�r
 = 
m�ch_�r
 + 
s_�n
;

321  
m�ch_�n
 - 
s_�n
;

325 
	`��t_com��i�s
(
��t
, 
s_��t
, 
s_�n
, 
obj
, 
q_f��
, 
q_ϡ
);

327  (
size_t
)(-1);

328 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\repl.h

26 #i�de�
MICROPY_INCLUDED_PY_REPL_H


27 
	#MICROPY_INCLUDED_PY_REPL_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

31 
	~"py/m�r�t.h
"

33 #i�
MICROPY_HELPER_REPL


35 #i�
MICROPY_PY_SYS_PS1_PS2


37 cڡ *
mp_��_g�_psx
(
��y
);

39 
�l�e
 cڡ *
	$mp_��_g�_ps1
() {

40  
	`mp_��_g�_psx
(
MP_SYS_MUTABLE_PS1
);

41 
	}
}

43 
�l�e
 cڡ *
	$mp_��_g�_ps2
() {

44  
	`mp_��_g�_psx
(
MP_SYS_MUTABLE_PS2
);

45 
	}
}

49 
�l�e
 cڡ *
	$mp_��_g�_ps1
() {

51 
	}
}

53 
�l�e
 cڡ *
	$mp_��_g�_ps2
() {

55 
	}
}

59 
bo�
 
mp_��_c�t�ue_w�h_�put
(cڡ *
�put
);

60 
size_t
 
mp_��_autocom��e
(cڡ *
�r
, size_�
�n
, cڡ 
mp_��t_t
 *
��t
, cڡ **
com�_�r
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\ringbuf.c

27 
	~<�r�g.h
>

29 
	~"r�gbuf.h
"

31 
	$r�gbuf_g�16
(
r�gbuf_t
 *
r
) {

32 
v
 = 
	`r�gbuf_�ek16
(
r
);

33 i�(
v
 == -1) {

34  
v
;

36 
r
->
ig�
 += 2;

37 i�(
r
->
ig�
 >�r->
size
) {

38 
r
->
ig�
 -�r->
size
;

40  
v
;

41 
	}
}

43 
	$r�gbuf_�ek16
(
r�gbuf_t
 *
r
) {

44 i�(
r
->
ig�
 =�r->
�ut
) {

47 
u�t32_t
 
ig�_a
 = 
r
->
ig�
 + 1;

48 i�(
ig�_a
 =�
r
->
size
) {

49 
ig�_a
 = 0;

51 i�(
ig�_a
 =�
r
->
�ut
) {

54  (
r
->
buf
[r->
ig�
] << 8�| (r->buf[
ig�_a
]);

55 
	}
}

57 
	$r�gbuf_put16
(
r�gbuf_t
 *
r
, 
u�t16_t
 
v
) {

58 
u�t32_t
 
�ut_a
 = 
r
->
�ut
 + 1;

59 i�(
�ut_a
 =�
r
->
size
) {

60 
�ut_a
 = 0;

62 i�(
�ut_a
 =�
r
->
ig�
) {

65 
u�t32_t
 
�ut_b
 = 
�ut_a
 + 1;

66 i�(
�ut_b
 =�
r
->
size
) {

67 
�ut_b
 = 0;

69 i�(
�ut_b
 =�
r
->
ig�
) {

72 
r
->
buf
[r->
�ut
] = (
v
 >> 8) & 0xff;

73 
r
->
buf
[
�ut_a
] = 
v
 & 0xff;

74 
r
->
�ut
 = 
�ut_b
;

76 
	}
}

82 
	$r�gbuf_g�_by�s
(
r�gbuf_t
 *
r
, 
u�t8_t
 *
d�a
, 
size_t
 
d�a_�n
) {

83 i�(
	`r�gbuf_ava�
(
r
�< 
d�a_�n
) {

84  (
r
->
size
 <�
d�a_�n
) ? -2 : -1;

86 
u�t32_t
 
ig�
 = 
r
->iget;

87 
u�t32_t
 
ig�_a
 = (
ig�
 + 
d�a_�n
�% 
r
->
size
;

88 
u�t8_t
 *
d��
 = 
d�a
;

89 i�(
ig�_a
 < 
ig�
) {

91 
	`mem�y
(
d��
, 
r
->
buf
 + 
ig�
,�->
size
 - iget);

92 
d��
 +�(
r
->
size
 - 
ig�
);

93 
ig�
 = 0;

95 
	`mem�y
(
d��
, 
r
->
buf
 + 
ig�
, 
ig�_a
 - iget);

96 
r
->
ig�
 = 
ig�_a
;

98 
	}
}

104 
	$r�gbuf_put_by�s
(
r�gbuf_t
 *
r
, cڡ 
u�t8_t
 *
d�a
, 
size_t
 
d�a_�n
) {

105 i�(
	`r�gbuf_�
(
r
�< 
d�a_�n
) {

106  (
r
->
size
 <�
d�a_�n
) ? -2 : -1;

108 
u�t32_t
 
�ut
 = 
r
->iput;

109 
u�t32_t
 
�ut_a
 = (
�ut
 + 
d�a_�n
�% 
r
->
size
;

110 cڡ 
u�t8_t
 *
d��
 = 
d�a
;

111 i�(
�ut_a
 < 
�ut
) {

113 
	`mem�y
(
r
->
buf
 + 
�ut
, 
d��
,�->
size
 - iput);

114 
d��
 +�(
r
->
size
 - 
�ut
);

115 
�ut
 = 0;

117 
	`mem�y
(
r
->
buf
 + 
�ut
, 
d��
, 
�ut_a
 - iput);

118 
r
->
�ut
 = 
�ut_a
;

120 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\ringbuf.h

26 #i�de�
MICROPY_INCLUDED_PY_RINGBUF_H


27 
	#MICROPY_INCLUDED_PY_RINGBUF_H


	)

29 
	~<�ddef.h
>

30 
	~<�d�t.h
>

32 #ifde�
_MSC_VER


33 
	~"py/mpc�fig.h
"

36 
	s_r�gbuf_t
 {

37 
u�t8_t
 *
	mbuf
;

38 
u�t16_t
 
	msize
;

39 
u�t16_t
 
	mig�
;

40 
u�t16_t
 
	m�ut
;

41 } 
	tr�gbuf_t
;

48 
	#r�gbuf_�loc
(
r
, 
sz
) \

50 (
r
)->
buf
 = 
	`m_�w
(
u�t8_t
, 
sz
); \

51 (
r
)->
size
 = 
sz
; \

52 (
r
)->
ig�
 = (r)->
�ut
 = 0; \

53 }

	)

55 
�l�e
 
	$r�gbuf_g�
(
r�gbuf_t
 *
r
) {

56 i�(
r
->
ig�
 =�r->
�ut
) {

59 
u�t8_t
 
v
 = 
r
->
buf
[r->
ig�
++];

60 i�(
r
->
ig�
 >�r->
size
) {

61 
r
->
ig�
 = 0;

63  
v
;

64 
	}
}

66 
�l�e
 
	$r�gbuf_�ek
(
r�gbuf_t
 *
r
) {

67 i�(
r
->
ig�
 =�r->
�ut
) {

70  
r
->
buf
[r->
ig�
];

71 
	}
}

73 
�l�e
 
	$r�gbuf_put
(
r�gbuf_t
 *
r
, 
u�t8_t
 
v
) {

74 
u�t32_t
 
�ut_�w
 = 
r
->
�ut
 + 1;

75 i�(
�ut_�w
 >�
r
->
size
) {

76 
�ut_�w
 = 0;

78 i�(
�ut_�w
 =�
r
->
ig�
) {

81 
r
->
buf
[r->
�ut
] = 
v
;

82 
r
->
�ut
 = 
�ut_�w
;

84 
	}
}

86 
�l�e
 
size_t
 
	$r�gbuf_�
(
r�gbuf_t
 *
r
) {

87  (
r
->
size
 +�->
ig�
 -�->
�ut
 - 1) %�->size;

88 
	}
}

90 
�l�e
 
size_t
 
	$r�gbuf_ava�
(
r�gbuf_t
 *
r
) {

91  (
r
->
size
 +�->
�ut
 -�->
ig�
) %�->size;

92 
	}
}

95 
r�gbuf_g�16
(
r�gbuf_t
 *
r
);

96 
r�gbuf_�ek16
(
r�gbuf_t
 *
r
);

97 
r�gbuf_put16
(
r�gbuf_t
 *
r
, 
u�t16_t
 
v
);

99 
r�gbuf_g�_by�s
(
r�gbuf_t
 *
r
, 
u�t8_t
 *
d�a
, 
size_t
 
d�a_�n
);

100 
r�gbuf_put_by�s
(
r�gbuf_t
 *
r
, cڡ 
u�t8_t
 *
d�a
, 
size_t
 
d�a_�n
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime.c

28 
	~<as��.h
>

29 
	~<�d�g.h
>

30 
	~<�dio.h
>

31 
	~<�r�g.h
>

32 
	~<uni�d.h
>

34 
	~"py/�r�num.h
"

35 
	~"py/comp�e.h
"

36 
	~"py/obj�r.h
"

37 
	~"py/objtu�e.h
"

38 
	~"py/objli�.h
"

39 
	~"py/objty�.h
"

40 
	~"py/objmodu�.h
"

41 
	~"py/objg����.h
"

42 
	~"py/sm�l�t.h
"

43 
	~"py/��am.h
"

44 
	~"py/ru�ime.h
"

45 
	~"py/bu�t�.h
"

46 
	~"py/c�ack.h
"

47 
	~"py/gc.h
"

49 #i�
MICROPY_DEBUG_VERBOSE


50 
	#DEBUG_PRINT
 (1)

	)

51 
	#DEBUG_��tf
 
DEBUG_��tf


	)

52 
	#DEBUG_OP_��tf
(...�
	`DEBUG_��tf
(
__VA_ARGS__
)

	)

54 
	#DEBUG_��tf
(...�()0

	)

55 
	#DEBUG_OP_��tf
(...�()0

	)

58 cڡ 
mp_obj_modu�_t
 
	gmp_modu�___ma�__
 = {

59 .
ba�
 = { &
mp_ty�_modu�
 },

60 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
MP_STATE_VM
(
di�_ma�
),

63 
MP_REGISTER_MODULE
(
MP_QSTR___ma�__
, 
mp_modu�___ma�__
);

65 
	#TYPE_HAS_ITERNEXT
(
ty�
��y�->
�ags
 & (
MP_TYPE_FLAG_ITER_IS_ITERNEXT
 | 
MP_TYPE_FLAG_ITER_IS_CUSTOM
 | 
MP_TYPE_FLAG_ITER_IS_STREAM
))

	)

67 
	$mp_��
() {

68 
	`q�r_��
();

71 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
��
MP_OBJ_NULL
;

72 #i�
MICROPY_ENABLE_SCHEDULER


74 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_IDLE
;

75 #i�
MICROPY_SCHEDULER_STATIC_NODES


76 i�(
	`MP_STATE_VM
(
sched_h�d
�!�
NULL
) {

78 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_PENDING
;

81 
	`MP_STATE_VM
(
sched_idx
) = 0;

82 
	`MP_STATE_VM
(
sched_�n
) = 0;

85 #i�
MICROPY_ENABLE_EMERGENCY_EXCEPTION_BUF


86 
	`mp_��_em�g�cy_ex��i�_buf
();

89 #i�
MICROPY_KBD_EXCEPTION


91 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
ba�
.
ty�
 = &
mp_ty�_Keyb�rdI��ru�
;

92 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
�a�back_�loc
 = 0;

93 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
�a�back_�n
 = 0;

94 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
�a�back_d�a
 = 
NULL
;

95 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
�gs
 = (
mp_obj_tu�e_t
 *)&
mp_cڡ_em�y_tu�e_obj
;

98 #i�
MICROPY_ENABLE_COMPILER


100 
	`MP_STATE_VM
(
mp_�timi�_v�ue
) = 0;

101 #i�
MICROPY_EMIT_NATIVE


102 
	`MP_STATE_VM
(
de�u�_em�_�t
��
MP_EMIT_OPT_NONE
;

107 
	`mp_obj_di�_��
(&
	`MP_STATE_VM
(
mp_l�ded_modu�s_di�
), 
MICROPY_LOADED_MODULES_DICT_SIZE
);

110 
	`mp_obj_di�_��
(&
	`MP_STATE_VM
(
di�_ma�
), 1);

111 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(&
	`MP_STATE_VM
(
di�_ma�
)), 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___�me__
), MP_OBJ_NEW_QSTR(
MP_QSTR___ma�__
));

114 
	`mp_lo�ls_�t
(&
	`MP_STATE_VM
(
di�_ma�
));

115 
	`mp_glob�s_�t
(&
	`MP_STATE_VM
(
di�_ma�
));

117 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


119 
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
��
NULL
;

122 #i�
MICROPY_PERSISTENT_CODE_TRACK_RELOC_CODE


123 
	`MP_STATE_VM
(
�ack_�loc_code_li�
��
MP_OBJ_NULL
;

126 #i�
MICROPY_PY_OS_DUPTERM


127 
size_t
 
i
 = 0; i < 
MICROPY_PY_OS_DUPTERM
; ++i) {

128 
	`MP_STATE_VM
(
du��m_objs
[
i
]��
MP_OBJ_NULL
;

132 #i�
MICROPY_VFS


134 
	`MP_STATE_VM
(
vfs_cur
��
NULL
;

135 
	`MP_STATE_VM
(
vfs_mou�_�b�
��
NULL
;

138 #i�
MICROPY_PY_SYS_PATH_ARGV_DEFAULTS


139 #i�
MICROPY_PY_SYS_PATH


140 
mp_sys_�th
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

141 
	`mp_obj_li�_��nd
(
mp_sys_�th
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_
));

142 #i�
MICROPY_MODULE_FROZEN


143 
	`mp_obj_li�_��nd
(
mp_sys_�th
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__d�_�oz�
));

146 #i�
MICROPY_PY_SYS_ARGV


147 
	`mp_obj_li�_��
(
	`MP_OBJ_TO_PTR
(
mp_sys_�gv
), 0);

151 #i�
MICROPY_PY_SYS_ATEXIT


152 
	`MP_STATE_VM
(
sys_ex�func
��
mp_cڡ_n�e
;

155 #i�
MICROPY_PY_SYS_PS1_PS2


156 
	`MP_STATE_VM
(
sys_mu�b�
[
MP_SYS_MUTABLE_PS1
]��
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__gt__gt__gt__�a�_
);

157 
	`MP_STATE_VM
(
sys_mu�b�
[
MP_SYS_MUTABLE_PS2
]��
	`MP_OBJ_NEW_QSTR
(
MP_QSTR__d�__d�__d�__�a�_
);

160 #i�
MICROPY_PY_SYS_SETTRACE


161 
	`MP_STATE_THREAD
(
�of_�a�_��back
��
MP_OBJ_NULL
;

162 
	`MP_STATE_THREAD
(
�of_��back_is_execut�g
��
�l�
;

163 
	`MP_STATE_THREAD
(
cu��t_code_��e
��
NULL
;

166 #i�
MICROPY_PY_SYS_TRACEBACKLIMIT


167 
	`MP_STATE_VM
(
sys_mu�b�
[
MP_SYS_MUTABLE_TRACEBACKLIMIT
]��
	`MP_OBJ_NEW_SMALL_INT
(1000);

170 #i�
MICROPY_PY_BLUETOOTH


171 
	`MP_STATE_VM
(
blu�o�h
��
MP_OBJ_NULL
;

174 #i�
MICROPY_HW_ENABLE_USB_RUNTIME_DEVICE


175 
	`MP_STATE_VM
(
usbd
��
MP_OBJ_NULL
;

178 #i�
MICROPY_PY_THREAD_GIL


179 
	`mp_th�ad_mu�x_��
(&
	`MP_STATE_VM
(
g�_mu�x
));

183 #ifde�
MICROPY_PORT_INIT_FUNC


184 
MICROPY_PORT_INIT_FUNC
;

187 
	`MP_THREAD_GIL_ENTER
();

188 
	}
}

190 
	$mp_de��
() {

191 
	`MP_THREAD_GIL_EXIT
();

194 #ifde�
MICROPY_PORT_DEINIT_FUNC


195 
MICROPY_PORT_DEINIT_FUNC
;

197 
	}
}

199 
	$mp_glob�s_lo�ls_�t_�om_�r_jump_��back
(*
�x_�
) {

200 
�r_jump_��back_node_glob�s_lo�ls_t
 *
�x
 = 
�x_�
;

201 
	`mp_glob�s_�t
(
�x
->
glob�s
);

202 
	`mp_lo�ls_�t
(
�x
->
lo�ls
);

203 
	}
}

205 
	$mp_��_fun�i�_1_�om_�r_jump_��back
(*
�x_�
) {

206 
�r_jump_��back_node_��_fun�i�_1_t
 *
�x
 = 
�x_�
;

207 
�x
->
	`func
(�x->
�g
);

208 
	}
}

210 
mp_obj_t
 
	$MICROPY_WRAP_MP_LOAD_NAME
(
mp_l�d_�me
)(
q�r
 
q�
) {

212 
	`DEBUG_OP_��tf
("l�d�am�%s\n", 
	`q�r_�r
(
q�
));

214 i�(
	`mp_lo�ls_g�
(�!�
	`mp_glob�s_g�
()) {

215 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
	`mp_lo�ls_g�
()->
m�
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP
);

216 i�(
�em
 !�
NULL
) {

217  
�em
->
v�ue
;

220  
	`mp_l�d_glob�
(
q�
);

221 
	}
}

223 
mp_obj_t
 
	$MICROPY_WRAP_MP_LOAD_GLOBAL
(
mp_l�d_glob�
)(
q�r
 
q�
) {

225 
	`DEBUG_OP_��tf
("l�d glob� %s\n", 
	`q�r_�r
(
q�
));

226 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
	`mp_glob�s_g�
()->
m�
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP
);

227 i�(
�em
 =�
NULL
) {

228 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


229 i�(
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
�!�
NULL
) {

231 
�em
 = 
	`mp_m�_lookup
(&
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
)->
m�
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP
);

232 i�(
�em
 !�
NULL
) {

233  
�em
->
v�ue
;

237 
�em
 = 
	`mp_m�_lookup
((
mp_m�_t
 *)&
mp_modu�_bu�t�s_glob�s
.
m�
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP
);

238 i�(
�em
 =�
NULL
) {

239 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


240 
	`mp_�i�_msg
(&
mp_ty�_NameE��
, 
	`MP_ERROR_TEXT
("name�ot defined"));

242 
	`mp_�i�_msg_v�g
(&
mp_ty�_NameE��
, 
	`MP_ERROR_TEXT
("�m�'%q' i�'�def�ed"), 
q�
);

246  
�em
->
v�ue
;

247 
	}
}

249 
mp_obj_t
 
	$mp_l�d_bu�d_�ass
() {

250 
	`DEBUG_OP_��tf
("load_build_class\n");

251 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


252 i�(
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
�!�
NULL
) {

254 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(&
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
)->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___bu�d_�ass__
), 
MP_MAP_LOOKUP
);

255 i�(
�em
 !�
NULL
) {

256  
�em
->
v�ue
;

260  
	`MP_OBJ_FROM_PTR
(&
mp_bu�t�___bu�d_�ass___obj
);

261 
	}
}

263 
	$mp_��e_�me
(
q�r
 
q�
, 
mp_obj_t
 
obj
) {

264 
	`DEBUG_OP_��tf
("�ܐ�m�%�<- %p\n", 
	`q�r_�r
(
q�
), 
obj
);

265 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
	`mp_lo�ls_g�
()), 
	`MP_OBJ_NEW_QSTR
(
q�
), 
obj
);

266 
	}
}

268 
	$mp_d��e_�me
(
q�r
 
q�
) {

269 
	`DEBUG_OP_��tf
("d����m�%s\n", 
	`q�r_�r
(
q�
));

271 
	`mp_obj_di�_d��e
(
	`MP_OBJ_FROM_PTR
(
	`mp_lo�ls_g�
()), 
	`MP_OBJ_NEW_QSTR
(
q�
));

272 
	}
}

274 
	$mp_��e_glob�
(
q�r
 
q�
, 
mp_obj_t
 
obj
) {

275 
	`DEBUG_OP_��tf
("�ܐglob� %�<- %p\n", 
	`q�r_�r
(
q�
), 
obj
);

276 
	`mp_obj_di�_��e
(
	`MP_OBJ_FROM_PTR
(
	`mp_glob�s_g�
()), 
	`MP_OBJ_NEW_QSTR
(
q�
), 
obj
);

277 
	}
}

279 
	$mp_d��e_glob�
(
q�r
 
q�
) {

280 
	`DEBUG_OP_��tf
("d���glob� %s\n", 
	`q�r_�r
(
q�
));

282 
	`mp_obj_di�_d��e
(
	`MP_OBJ_FROM_PTR
(
	`mp_glob�s_g�
()), 
	`MP_OBJ_NEW_QSTR
(
q�
));

283 
	}
}

285 
mp_obj_t
 
	$mp_u�ry_�
(
mp_u�ry_�_t
 
�
, 
mp_obj_t
 
�g
) {

286 
	`DEBUG_OP_��tf
("u�ry " 
UINT_FMT
 " %q %p\n", 
�
, 
mp_u�ry_�_m�hod_�me
[�], 
�g
);

288 i�(
�
 =�
MP_UNARY_OP_NOT
) {

290  
	`mp_obj_�w_bo�
(
	`mp_obj_is_�ue
(
�g
) == 0);

291 } i�(
	`mp_obj_is_sm�l_�t
(
�g
)) {

292 
mp_�t_t
 
v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�g
);

293 
�
) {

294 
MP_UNARY_OP_BOOL
:

295  
	`mp_obj_�w_bo�
(
v�
 != 0);

296 
MP_UNARY_OP_HASH
:

297  
�g
;

298 
MP_UNARY_OP_POSITIVE
:

299 
MP_UNARY_OP_INT_MAYBE
:

300  
�g
;

301 
MP_UNARY_OP_NEGATIVE
:

303 i�(
v�
 =�
MP_SMALL_INT_MIN
) {

304  
	`mp_obj_�w_�t
(-
v�
);

306  
	`MP_OBJ_NEW_SMALL_INT
(-
v�
);

308 
MP_UNARY_OP_ABS
:

309 i�(
v�
 >= 0) {

310  
�g
;

311 } i�(
v�
 =�
MP_SMALL_INT_MIN
) {

313  
	`mp_obj_�w_�t
(-
v�
);

315  
	`MP_OBJ_NEW_SMALL_INT
(-
v�
);

318 
	`as��
(
�
 =�
MP_UNARY_OP_INVERT
);

319  
	`MP_OBJ_NEW_SMALL_INT
(~
v�
);

321 } i�(
�
 =�
MP_UNARY_OP_HASH
 && 
	`mp_obj_is_�r_�_by�s
(
�g
)) {

323 
	`GET_STR_HASH
(
�g
, 
h
);

324 i�(
h
 == 0) {

325 
	`GET_STR_DATA_LEN
(
�g
, 
d�a
, 
�n
);

326 
h
 = 
	`q�r_compu�_hash
(
d�a
, 
�n
);

328  
	`MP_OBJ_NEW_SMALL_INT
(
h
);

330 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�g
);

331 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
u�ry_�
)) {

332 
mp_obj_t
 
�su�
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
u�ry_�
)(
�
, 
�g
);

333 i�(
�su�
 !�
MP_OBJ_NULL
) {

334  
�su�
;

336 } i�(
�
 =�
MP_UNARY_OP_HASH
) {

338  
	`MP_OBJ_NEW_SMALL_INT
((
mp_u�t_t
)
�g
);

340 i�(
�
 =�
MP_UNARY_OP_BOOL
) {

344  
mp_cڡ_�ue
;

346 i�(
�
 =�
MP_UNARY_OP_INT_MAYBE


347 #i�
MICROPY_PY_BUILTINS_FLOAT


348 || 
�
 =�
MP_UNARY_OP_FLOAT_MAYBE


349 #i�
MICROPY_PY_BUILTINS_COMPLEX


350 || 
�
 =�
MP_UNARY_OP_COMPLEX_MAYBE


355  
MP_OBJ_NULL
;

357 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


358 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("unsupported�ype for operator"));

360 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

361 
	`MP_ERROR_TEXT
("unsupported�ype for %q: '%s'"),

362 
mp_u�ry_�_m�hod_�me
[
�
], 
	`mp_obj_g�_ty�_�r
(
�g
));

365 
	}
}

367 
mp_obj_t
 
	$MICROPY_WRAP_MP_BINARY_OP
(
mp_b��y_�
)(
mp_b��y_�_t
 
�
, 
mp_obj_t
 
lhs
, mp_obj_�
rhs
) {

368 
	`DEBUG_OP_��tf
("b��y " 
UINT_FMT
 " %q %�%p\n", 
�
, 
mp_b��y_�_m�hod_�me
[�], 
lhs
, 
rhs
);

380 i�(
�
 =�
MP_BINARY_OP_IS
) {

381  
	`mp_obj_�w_bo�
(
lhs
 =�
rhs
);

385 i�(
�
 =�
MP_BINARY_OP_EQUAL
 || o�=�
MP_BINARY_OP_NOT_EQUAL
) {

387  
	`mp_obj_equ�_n�_equ�
(
�
, 
lhs
, 
rhs
);

391 i�(
�
 =�
MP_BINARY_OP_EXCEPTION_MATCH
) {

393 i�(
	`mp_obj_is_ex��i�_ty�
(
rhs
)) {

394 i�(
	`mp_obj_ex��i�_m�ch
(
lhs
, 
rhs
)) {

395  
mp_cڡ_�ue
;

397  
mp_cڡ_�l�
;

399 } i�(
	`mp_obj_is_ty�
(
rhs
, &
mp_ty�_tu�e
)) {

400 
mp_obj_tu�e_t
 *
tu�e
 = 
	`MP_OBJ_TO_PTR
(
rhs
);

401 
size_t
 
i
 = 0; i < 
tu�e
->
�n
; i++) {

402 
rhs
 = 
tu�e
->
�ems
[
i
];

403 i�(!
	`mp_obj_is_ex��i�_ty�
(
rhs
)) {

404 
unsu�܋d_�
;

406 i�(
	`mp_obj_ex��i�_m�ch
(
lhs
, 
rhs
)) {

407  
mp_cڡ_�ue
;

410  
mp_cڡ_�l�
;

412 
unsu�܋d_�
;

415 i�(
	`mp_obj_is_sm�l_�t
(
lhs
)) {

416 
mp_�t_t
 
lhs_v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
lhs
);

417 i�(
	`mp_obj_is_sm�l_�t
(
rhs
)) {

418 
mp_�t_t
 
rhs_v�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
rhs
);

428 
�
) {

429 
MP_BINARY_OP_OR
:

430 
MP_BINARY_OP_INPLACE_OR
:

431 
lhs_v�
 |�
rhs_v�
;

433 
MP_BINARY_OP_XOR
:

434 
MP_BINARY_OP_INPLACE_XOR
:

435 
lhs_v�
 ^�
rhs_v�
;

437 
MP_BINARY_OP_AND
:

438 
MP_BINARY_OP_INPLACE_AND
:

439 
lhs_v�
 &�
rhs_v�
;

441 
MP_BINARY_OP_LSHIFT
:

442 
MP_BINARY_OP_INPLACE_LSHIFT
: {

443 i�(
rhs_v�
 < 0) {

445 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative shift count"));

446 } i�(
rhs_v�
 >�(
mp_�t_t
)((
lhs_v�
�* 
MP_BITS_PER_BYTE
)

447 || 
lhs_v�
 > (
MP_SMALL_INT_MAX
 >> 
rhs_v�
)

448 || 
lhs_v�
 < (
MP_SMALL_INT_MIN
 >> 
rhs_v�
)) {

450 
lhs
 = 
	`mp_obj_�w_�t_�om_�
(
lhs_v�
);

451 
g��ic_b��y_�
;

454 
lhs_v�
 = (
mp_u�t_t
�hs_v� << 
rhs_v�
;

458 
MP_BINARY_OP_RSHIFT
:

459 
MP_BINARY_OP_INPLACE_RSHIFT
:

460 i�(
rhs_v�
 < 0) {

462 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative shift count"));

465 i�(
rhs_v�
 >�(
mp_�t_t
)((
lhs_v�
�* 
MP_BITS_PER_BYTE
)) {

468 
rhs_v�
 = (
lhs_v�
�* 
MP_BITS_PER_BYTE
 - 1;

470 
lhs_v�
 >>�
rhs_v�
;

473 
MP_BINARY_OP_ADD
:

474 
MP_BINARY_OP_INPLACE_ADD
:

475 
lhs_v�
 +�
rhs_v�
;

477 
MP_BINARY_OP_SUBTRACT
:

478 
MP_BINARY_OP_INPLACE_SUBTRACT
:

479 
lhs_v�
 -�
rhs_v�
;

481 
MP_BINARY_OP_MULTIPLY
:

482 
MP_BINARY_OP_INPLACE_MULTIPLY
: {

489 
�s
 = ()
lhs_v�
 * ()
rhs_v�
;

490 i�(
�s
 > 
MP_SMALL_INT_MAX
 ||�e�< 
MP_SMALL_INT_MIN
) {

492  
	`mp_obj_�w_�t_�om_�
(
�s
);

495 
lhs_v�
 = (
mp_�t_t
)
�s
;

499 i�(
	`mp_sm�l_�t_mul_ov��ow
(
lhs_v�
, 
rhs_v�
)) {

501 
lhs
 = 
	`mp_obj_�w_�t_�om_�
(
lhs_v�
);

502 
g��ic_b��y_�
;

505  
	`MP_OBJ_NEW_SMALL_INT
(
lhs_v�
 * 
rhs_v�
);

508 
MP_BINARY_OP_FLOOR_DIVIDE
:

509 
MP_BINARY_OP_INPLACE_FLOOR_DIVIDE
:

510 i�(
rhs_v�
 == 0) {

511 
z�o_divisi�
;

513 
lhs_v�
 = 
	`mp_sm�l_�t_�o�_divide
�hs_v�, 
rhs_v�
);

516 #i�
MICROPY_PY_BUILTINS_FLOAT


517 
MP_BINARY_OP_TRUE_DIVIDE
:

518 
MP_BINARY_OP_INPLACE_TRUE_DIVIDE
:

519 i�(
rhs_v�
 == 0) {

520 
z�o_divisi�
;

522  
	`mp_obj_�w_��t
((
mp_��t_t
)
lhs_v�
 / (mp_��t_t)
rhs_v�
);

525 
MP_BINARY_OP_MODULO
:

526 
MP_BINARY_OP_INPLACE_MODULO
: {

527 i�(
rhs_v�
 == 0) {

528 
z�o_divisi�
;

530 
lhs_v�
 = 
	`mp_sm�l_�t_modulo
�hs_v�, 
rhs_v�
);

534 
MP_BINARY_OP_POWER
:

535 
MP_BINARY_OP_INPLACE_POWER
:

536 i�(
rhs_v�
 < 0) {

537 #i�
MICROPY_PY_BUILTINS_FLOAT


538  
	`mp_obj_��t_b��y_�
(
�
, (
mp_��t_t
)
lhs_v�
, 
rhs
);

540 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("negative�ower with�o float support"));

543 
mp_�t_t
 
�s
 = 1;

544 
rhs_v�
 > 0) {

545 i�(
rhs_v�
 & 1) {

546 i�(
	`mp_sm�l_�t_mul_ov��ow
(
�s
, 
lhs_v�
)) {

547 
pow�_ov��ow
;

549 
�s
 *�
lhs_v�
;

551 i�(
rhs_v�
 == 1) {

554 
rhs_v�
 /= 2;

555 i�(
	`mp_sm�l_�t_mul_ov��ow
(
lhs_v�
,�hs_val)) {

556 
pow�_ov��ow
;

558 
lhs_v�
 *=�hs_val;

560 
lhs_v�
 = 
�s
;

564 
pow�_ov��ow
:

566 
lhs
 = 
	`mp_obj_�w_�t_�om_�
(
	`MP_OBJ_SMALL_INT_VALUE
(lhs));

567 
g��ic_b��y_�
;

569 
MP_BINARY_OP_DIVMOD
: {

570 i�(
rhs_v�
 == 0) {

571 
z�o_divisi�
;

574 
mp_obj_tu�e_t
 *
tu�e
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_tu�e
(2, 
NULL
));

575 
tu�e
->
�ems
[0] = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_sm�l_�t_�o�_divide
(
lhs_v�
, 
rhs_v�
));

576 
tu�e
->
�ems
[1] = 
	`MP_OBJ_NEW_SMALL_INT
(
	`mp_sm�l_�t_modulo
(
lhs_v�
, 
rhs_v�
));

577  
	`MP_OBJ_FROM_PTR
(
tu�e
);

580 
MP_BINARY_OP_LESS
:

581  
	`mp_obj_�w_bo�
(
lhs_v�
 < 
rhs_v�
);

582 
MP_BINARY_OP_MORE
:

583  
	`mp_obj_�w_bo�
(
lhs_v�
 > 
rhs_v�
);

584 
MP_BINARY_OP_LESS_EQUAL
:

585  
	`mp_obj_�w_bo�
(
lhs_v�
 <�
rhs_v�
);

586 
MP_BINARY_OP_MORE_EQUAL
:

587  
	`mp_obj_�w_bo�
(
lhs_v�
 >�
rhs_v�
);

590 
unsu�܋d_�
;

593 i�(
	`MP_SMALL_INT_FITS
(
lhs_v�
)) {

594  
	`MP_OBJ_NEW_SMALL_INT
(
lhs_v�
);

596  
	`mp_obj_�w_�t_�om_�
(
lhs_v�
);

598 #i�
MICROPY_PY_BUILTINS_FLOAT


599 } i�(
	`mp_obj_is_��t
(
rhs
)) {

600 
mp_obj_t
 
�s
 = 
	`mp_obj_��t_b��y_�
(
�
, (
mp_��t_t
)
lhs_v�
, 
rhs
);

601 i�(
�s
 =�
MP_OBJ_NULL
) {

602 
unsu�܋d_�
;

604  
�s
;

607 #i�
MICROPY_PY_BUILTINS_COMPLEX


608 } i�(
	`mp_obj_is_ty�
(
rhs
, &
mp_ty�_com�ex
)) {

609 
mp_obj_t
 
�s
 = 
	`mp_obj_com�ex_b��y_�
(
�
, (
mp_��t_t
)
lhs_v�
, 0, 
rhs
);

610 i�(
�s
 =�
MP_OBJ_NULL
) {

611 
unsu�܋d_�
;

613  
�s
;

620 i�(
�
 =�
MP_BINARY_OP_IN
) {

621 
�
 = 
MP_BINARY_OP_CONTAINS
;

622 
mp_obj_t
 
�mp
 = 
lhs
;

623 
lhs
 = 
rhs
;

624 
rhs
 = 
�mp
;

628 cڡ 
mp_obj_ty�_t
 *
ty�
;

629 
g��ic_b��y_�
:

630 
ty�
 = 
	`mp_obj_g�_ty�
(
lhs
);

631 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
b��y_�
)) {

632 
mp_obj_t
 
�su�
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
b��y_�
)(
�
, 
lhs
, 
rhs
);

633 i�(
�su�
 !�
MP_OBJ_NULL
) {

634  
�su�
;

642 i�(
�
 >�
MP_BINARY_OP_INPLACE_OR
 && o�<�
MP_BINARY_OP_INPLACE_POWER
) {

643 
�
 +�
MP_BINARY_OP_OR
 - 
MP_BINARY_OP_INPLACE_OR
;

644 
g��ic_b��y_�
;

647 #i�
MICROPY_PY_REVERSE_SPECIAL_METHODS


648 i�(
�
 >�
MP_BINARY_OP_OR
 && o�<�
MP_BINARY_OP_POWER
) {

649 
mp_obj_t
 
t
 = 
rhs
;

650 
rhs
 = 
lhs
;

651 
lhs
 = 
t
;

652 
�
 +�
MP_BINARY_OP_REVERSE_OR
 - 
MP_BINARY_OP_OR
;

653 
g��ic_b��y_�
;

654 } i�(
�
 >�
MP_BINARY_OP_REVERSE_OR
) {

656 
mp_obj_t
 
t
 = 
rhs
;

657 
rhs
 = 
lhs
;

658 
lhs
 = 
t
;

659 
�
 -�
MP_BINARY_OP_REVERSE_OR
 - 
MP_BINARY_OP_OR
;

663 i�(
�
 =�
MP_BINARY_OP_CONTAINS
) {

666 
mp_obj_��_buf_t
 
��_buf
;

667 
mp_obj_t
 
��
 = 
	`mp_g���
(
lhs
, &
��_buf
);

668 
mp_obj_t
 
�xt
;

669 (
�xt
 = 
	`mp_���xt
(
��
)�!�
MP_OBJ_STOP_ITERATION
) {

670 i�(
	`mp_obj_equ�
(
�xt
, 
rhs
)) {

671  
mp_cڡ_�ue
;

674  
mp_cڡ_�l�
;

677 
unsu�܋d_�
:

678 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


679 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("unsupported�ype for operator"));

681 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

682 
	`MP_ERROR_TEXT
("unsupported�ypes for %q: '%s', '%s'"),

683 
mp_b��y_�_m�hod_�me
[
�
], 
	`mp_obj_g�_ty�_�r
(
lhs
), mp_obj_g�_ty�_�r(
rhs
));

686 
z�o_divisi�
:

687 
	`mp_�i�_msg
(&
mp_ty�_Z�oDivisi�E��
, 
	`MP_ERROR_TEXT
("divide by zero"));

688 
	}
}

690 
mp_obj_t
 
	$mp_��_fun�i�_0
(
mp_obj_t
 
fun
) {

691  
	`mp_��_fun�i�_n_kw
(
fun
, 0, 0, 
NULL
);

692 
	}
}

694 
mp_obj_t
 
	$mp_��_fun�i�_1
(
mp_obj_t
 
fun
, mp_obj_�
�g
) {

695  
	`mp_��_fun�i�_n_kw
(
fun
, 1, 0, &
�g
);

696 
	}
}

698 
mp_obj_t
 
	$mp_��_fun�i�_2
(
mp_obj_t
 
fun
, mp_obj_�
�g1
, mp_obj_�
�g2
) {

699 
mp_obj_t
 
�gs
[2];

700 
�gs
[0] = 
�g1
;

701 
�gs
[1] = 
�g2
;

702  
	`mp_��_fun�i�_n_kw
(
fun
, 2, 0, 
�gs
);

703 
	}
}

706 
mp_obj_t
 
	$mp_��_fun�i�_n_kw
(
mp_obj_t
 
fun_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

710 
	`DEBUG_OP_��tf
("�Κg fun�i� %p�_�gs=" 
UINT_FMT
 ",�_kw=" UINT_FMT ",�rgs=%p)\n", 
fun_�
, 
n_�gs
, 
n_kw
, 
�gs
);

713 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
fun_�
);

716 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��
)) {

717  
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
)(
fun_�
, 
n_�gs
, 
n_kw
, 
�gs
);

720 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


721 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object�ot callable"));

723 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

724 
	`MP_ERROR_TEXT
("'%s' obje� i�'���ab�"), 
	`mp_obj_g�_ty�_�r
(
fun_�
));

726 
	}
}

730 
mp_obj_t
 
	$mp_��_m�hod_n_kw
(
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

731 
	`DEBUG_OP_��tf
("�� m�hod (fun=%p, s�f=%p,�_�gs=" 
UINT_FMT
 ",�_kw=" UINT_FMT ",�rgs=%p)\n", 
�gs
[0],�rgs[1], 
n_�gs
, 
n_kw
,�rgs);

732 
adju�
 = (
�gs
[1] =�
MP_OBJ_NULL
) ? 0 : 1;

733  
	`mp_��_fun�i�_n_kw
(
�gs
[0], 
n_�gs
 + 
adju�
, 
n_kw
,�rgs + 2 -�djust);

734 
	}
}

737 #i�!
MICROPY_STACKLESS


740 
	$mp_��_���e_�gs_n_kw_v�
(
bo�
 
have_�lf
, 
size_t
 
n_�gs_n_kw
, cڡ 
mp_obj_t
 *
�gs
, 
mp_��_�gs_t
 *
out_�gs
) {

741 
mp_obj_t
 
fun
 = *
�gs
++;

742 
mp_obj_t
 
�lf
 = 
MP_OBJ_NULL
;

743 i�(
have_�lf
) {

744 
�lf
 = *
�gs
++;

746 
size_t
 
n_�gs
 = 
n_�gs_n_kw
 & 0xff;

747 
size_t
 
n_kw
 = (
n_�gs_n_kw
 >> 8) & 0xff;

748 
mp_u�t_t
 
��_�gs
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[
n_�gs
 + 2 * 
n_kw
]);

750 
	`DEBUG_OP_��tf
("�� m�hod v� (fun=%p, s�f=%p,�_�gs=%u,�_kw=%u,�rgs=%p, m�=%u)\n", 
fun
, 
�lf
, 
n_�gs
, 
n_kw
, 
�gs
, 
��_�gs
);

757 
mp_obj_t
 *
�gs2
;

758 
size_t
 
�gs2_�loc
;

759 
size_t
 
�gs2_�n
 = 0;

762 
ssize_t
 
li�_�n
 = 0;

764 i�(
��_�gs
 != 0) {

765 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

766 i�((
��_�gs
 >> 
i
) & 1) {

767 
mp_obj_t
 
�n
 = 
	`mp_obj_�n_maybe
(
�gs
[
i
]);

768 i�(
�n
 !�
MP_OBJ_NULL
) {

770 
li�_�n
 +�
	`mp_obj_g�_�t
(
�n
) - 1;

777 
ssize_t
 
kw_di�_�n
 = 0;

779 
size_t
 
i
 = 0; i < 
n_kw
; i++) {

780 
mp_obj_t
 
key
 = 
�gs
[
n_�gs
 + 
i
 * 2];

781 
mp_obj_t
 
v�ue
 = 
�gs
[
n_�gs
 + 
i
 * 2 + 1];

782 i�(
key
 =�
MP_OBJ_NULL
 && 
v�ue
 !�MP_OBJ_NULL && 
	`mp_obj_is_ty�
(v�ue, &
mp_ty�_di�
)) {

784 
kw_di�_�n
 +�
	`mp_obj_di�_�n
(
v�ue
) - 1;

790 i�(
��_�gs
 == 0) {

794 
�gs2_�loc
 = 1 + 
n_�gs
 + 2 * (
n_kw
 + 
kw_di�_�n
);

795 
�gs2
 = 
	`mp_n�lo�l_�loc
(
�gs2_�loc
 * (
mp_obj_t
));

798 i�(
�lf
 !�
MP_OBJ_NULL
) {

799 
�gs2
[
�gs2_�n
++] = 
�lf
;

803 
	`mp_�q_c�y
(
�gs2
 + 
�gs2_�n
, 
�gs
, 
n_�gs
, 
mp_obj_t
);

804 
�gs2_�n
 +�
n_�gs
;

809 
�gs2_�loc
 = 1 + 
n_�gs
 + 
li�_�n
 + 2 * (
n_kw
 + 
kw_di�_�n
);

810 
�gs2
 = 
	`mp_n�lo�l_�loc
(
�gs2_�loc
 * (
mp_obj_t
));

813 i�(
�lf
 !�
MP_OBJ_NULL
) {

814 
�gs2
[
�gs2_�n
++] = 
�lf
;

817 
size_t
 
i
 = 0; i < 
n_�gs
; i++) {

818 
mp_obj_t
 
�g
 = 
�gs
[
i
];

819 i�((
��_�gs
 >> 
i
) & 1) {

821 i�(
	`mp_obj_is_ty�
(
�g
, &
mp_ty�_tu�e
�|| mp_obj_is_ty��rg, &
mp_ty�_li�
)) {

825 
size_t
 
�n
;

826 
mp_obj_t
 *
�ems
;

827 
	`mp_obj_g�_��y
(
�g
, &
�n
, &
�ems
);

830 
	`as��
(
�gs2_�n
 + 
�n
 <�
�gs2_�loc
);

831 
	`mp_�q_c�y
(
�gs2
 + 
�gs2_�n
, 
�ems
, 
�n
, 
mp_obj_t
);

832 
�gs2_�n
 +�
�n
;

837 
mp_obj_��_buf_t
 
��_buf
;

838 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�g
, &
��_buf
);

839 
mp_obj_t
 
�em
;

840 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

841 i�(
�gs2_�n
 + (
n_�gs
 - 
i
�>�
�gs2_�loc
) {

842 
�gs2
 = 
	`mp_n�lo�l_��loc
�rgs2, 
�gs2_�loc
 * (
mp_obj_t
),

843 
�gs2_�loc
 * 2 * (
mp_obj_t
));

844 
�gs2_�loc
 *= 2;

846 
�gs2
[
�gs2_�n
++] = 
�em
;

851 
	`as��
(
�gs2_�n
 < 
�gs2_�loc
);

852 
�gs2
[
�gs2_�n
++] = 
�g
;

858 
size_t
 
pos_�gs_�n
 = 
�gs2_�n
;

861 i�(
�gs2_�n
 + 2 * (
n_kw
 + 
kw_di�_�n
�> 
�gs2_�loc
) {

862 
size_t
 
�w_�loc
 = 
�gs2_�n
 + 2 * (
n_kw
 + 
kw_di�_�n
);

863 
�gs2
 = 
	`mp_n�lo�l_��loc
�rgs2, 
�gs2_�loc
 * (
mp_obj_t
),

864 
�w_�loc
 * (
mp_obj_t
));

865 
�gs2_�loc
 = 
�w_�loc
;

869 
size_t
 
i
 = 0; i < 
n_kw
; i++) {

870 
mp_obj_t
 
kw_key
 = 
�gs
[
n_�gs
 + 
i
 * 2];

871 
mp_obj_t
 
kw_v�ue
 = 
�gs
[
n_�gs
 + 
i
 * 2 + 1];

872 i�(
kw_key
 =�
MP_OBJ_NULL
) {

874 i�(
	`mp_obj_is_ty�
(
kw_v�ue
, &
mp_ty�_di�
)) {

876 
mp_m�_t
 *
m�
 = 
	`mp_obj_di�_g�_m�
(
kw_v�ue
);

878 
	`as��
(
�gs2_�n
 + 2 * 
m�
->
u�d
 <�
�gs2_�loc
);

879 
size_t
 
j
 = 0; j < 
m�
->
�loc
; j++) {

880 i�(
	`mp_m�_��_is_f��d
(
m�
, 
j
)) {

882 
mp_obj_t
 
key
 = 
m�
->
�b�
[
j
].key;

883 i�(!
	`mp_obj_is_q�r
(
key
)) {

884 
key
 = 
	`mp_obj_�r_���_checked
(key);

886 
�gs2
[
�gs2_�n
++] = 
key
;

887 
�gs2
[
�gs2_�n
++] = 
m�
->
�b�
[
j
].
v�ue
;

896 
mp_obj_t
 
de�
[3];

897 
	`mp_l�d_m�hod
(
kw_v�ue
, 
MP_QSTR_keys
, 
de�
);

898 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
	`mp_��_m�hod_n_kw
(0, 0, 
de�
), 
NULL
);

900 
mp_obj_t
 
key
;

901 (
key
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

903 i�(
�gs2_�n
 + 1 >�
�gs2_�loc
) {

904 
size_t
 
�w_�loc
 = 
�gs2_�loc
 * 2;

905 
�gs2
 = 
	`mp_n�lo�l_��loc
�rgs2, 
�gs2_�loc
 * (
mp_obj_t
), 
�w_�loc
 * (mp_obj_t));

906 
�gs2_�loc
 = 
�w_�loc
;

910 i�(!
	`mp_obj_is_q�r
(
key
)) {

911 
key
 = 
	`mp_obj_�r_���_checked
(key);

915 
	`mp_l�d_m�hod
(
kw_v�ue
, 
MP_QSTR___g��em__
, 
de�
);

916 
de�
[2] = 
key
;

917 
mp_obj_t
 
v�ue
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�
);

920 
�gs2
[
�gs2_�n
++] = 
key
;

921 
�gs2
[
�gs2_�n
++] = 
v�ue
;

926 
	`as��
(
�gs2_�n
 + 2 <�
�gs2_�loc
);

927 
�gs2
[
�gs2_�n
++] = 
kw_key
;

928 
�gs2
[
�gs2_�n
++] = 
kw_v�ue
;

932 
out_�gs
->
fun
 = fun;

933 
out_�gs
->
�gs
 = 
�gs2
;

934 
out_�gs
->
n_�gs
 = 
pos_�gs_�n
;

935 
out_�gs
->
n_kw
 = (
�gs2_�n
 - 
pos_�gs_�n
) / 2;

936 
out_�gs
->
n_�loc
 = 
�gs2_�loc
;

937 
	}
}

939 
mp_obj_t
 
	$mp_��_m�hod_n_kw_v�
(
bo�
 
have_�lf
, 
size_t
 
n_�gs_n_kw
, cڡ 
mp_obj_t
 *
�gs
) {

940 
mp_��_�gs_t
 
out_�gs
;

941 
	`mp_��_���e_�gs_n_kw_v�
(
have_�lf
, 
n_�gs_n_kw
, 
�gs
, &
out_�gs
);

943 
mp_obj_t
 
�s
 = 
	`mp_��_fun�i�_n_kw
(
out_�gs
.
fun
, out_�gs.
n_�gs
, out_�gs.
n_kw
, out_�gs.
�gs
);

944 
	`mp_n�lo�l_�
(
out_�gs
.
�gs
, out_�gs.
n_�loc
 * (
mp_obj_t
));

946  
�s
;

947 
	}
}

950 
	$mp_u�ack_�qu��
(
mp_obj_t
 
�q_�
, 
size_t
 
num
, mp_obj_�*
�ems
) {

951 
size_t
 
�q_�n
;

952 i�(
	`mp_obj_is_ty�
(
�q_�
, &
mp_ty�_tu�e
�|| mp_obj_is_ty�(�q_�, &
mp_ty�_li�
)) {

953 
mp_obj_t
 *
�q_�ems
;

954 
	`mp_obj_g�_��y
(
�q_�
, &
�q_�n
, &
�q_�ems
);

955 i�(
�q_�n
 < 
num
) {

956 
too_sh�t
;

957 } i�(
�q_�n
 > 
num
) {

958 
too_l�g
;

960 
size_t
 
i
 = 0; i < 
num
; i++) {

961 
�ems
[
i
] = 
�q_�ems
[
num
 - 1 - i];

964 
mp_obj_��_buf_t
 
��_buf
;

965 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�q_�
, &
��_buf
);

967 
�q_�n
 = 0; seq_��< 
num
; seq_len++) {

968 
mp_obj_t
 
�
 = 
	`mp_���xt
(
��ab�
);

969 i�(
�
 =�
MP_OBJ_STOP_ITERATION
) {

970 
too_sh�t
;

972 
�ems
[
num
 - 1 - 
�q_�n
] = 
�
;

974 i�(
	`mp_���xt
(
��ab�
�!�
MP_OBJ_STOP_ITERATION
) {

975 
too_l�g
;

980 
too_sh�t
:

981 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


982 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("wrong�umber of values�o unpack"));

984 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("�ed mܐth� %d v�ue�t�u�ack"), ()
�q_�n
);

986 
too_l�g
:

987 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


988 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("wrong�umber of values�o unpack"));

990 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("to�m�y v�ue�t�u�ack (ex��ed %d)"), ()
num
);

992 
	}
}

995 
	$mp_u�ack_ex
(
mp_obj_t
 
�q_�
, 
size_t
 
num_�
, mp_obj_�*
�ems
) {

996 
size_t
 
num_��
 = 
num_�
 & 0xff;

997 
size_t
 
num_right
 = (
num_�
 >> 8) & 0xff;

998 
	`DEBUG_OP_��tf
("u�ack�x " 
UINT_FMT
 " " UINT_FMT "\n", 
num_��
, 
num_right
);

999 
size_t
 
�q_�n
;

1000 i�(
	`mp_obj_is_ty�
(
�q_�
, &
mp_ty�_tu�e
�|| mp_obj_is_ty�(�q_�, &
mp_ty�_li�
)) {

1004 vީ��
mp_obj_t
 
�q
 = 
�q_�
;

1005 
mp_obj_t
 *
�q_�ems
;

1006 
	`mp_obj_g�_��y
(
�q
, &
�q_�n
, &
�q_�ems
);

1007 i�(
�q_�n
 < 
num_��
 + 
num_right
) {

1008 
too_sh�t
;

1010 
size_t
 
i
 = 0; i < 
num_right
; i++) {

1011 
�ems
[
i
] = 
�q_�ems
[
�q_�n
 - 1 - i];

1013 
�ems
[
num_right
] = 
	`mp_obj_�w_li�
(
�q_�n
 - 
num_��
 -�um_right, 
�q_�ems
 +�um_left);

1014 
size_t
 
i
 = 0; i < 
num_��
; i++) {

1015 
�ems
[
num_right
 + 1 + 
i
] = 
�q_�ems
[
num_��
 - 1 - i];

1017 
�q
 = 
MP_OBJ_NULL
;

1023 
mp_obj_t
 
��ab�
 = 
	`mp_g���
(
�q_�
, 
NULL
);

1024 
mp_obj_t
 
�em
;

1025 
�q_�n
 = 0; seq_��< 
num_��
; seq_len++) {

1026 
�em
 = 
	`mp_���xt
(
��ab�
);

1027 i�(
�em
 =�
MP_OBJ_STOP_ITERATION
) {

1028 
too_sh�t
;

1030 
�ems
[
num_��
 + 
num_right
 + 1 - 1 - 
�q_�n
] = 
�em
;

1032 
mp_obj_li�_t
 *
��
 = 
	`MP_OBJ_TO_PTR
(
	`mp_obj_�w_li�
(0, 
NULL
));

1033 (
�em
 = 
	`mp_���xt
(
��ab�
)�!�
MP_OBJ_STOP_ITERATION
) {

1034 
	`mp_obj_li�_��nd
(
	`MP_OBJ_FROM_PTR
(
��
), 
�em
);

1036 i�(
��
->
�n
 < 
num_right
) {

1037 
too_sh�t
;

1039 
�ems
[
num_right
] = 
	`MP_OBJ_FROM_PTR
(
��
);

1040 
size_t
 
i
 = 0; i < 
num_right
; i++) {

1041 
�ems
[
num_right
 - 1 - 
i
] = 
��
->�ems[��->
�n
 -�um_right + i];

1043 
	`mp_obj_li�_�t_�n
(
	`MP_OBJ_FROM_PTR
(
��
),�e�->
�n
 - 
num_right
);

1047 
too_sh�t
:

1048 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1049 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("wrong�umber of values�o unpack"));

1051 
	`mp_�i�_msg_v�g
(&
mp_ty�_V�ueE��
, 
	`MP_ERROR_TEXT
("�ed mܐth� %d v�ue�t�u�ack"), ()
�q_�n
);

1053 
	}
}

1055 
mp_obj_t
 
	$mp_l�d_��
(
mp_obj_t
 
ba�
, 
q�r
 
��
) {

1056 
	`DEBUG_OP_��tf
("l�d���%p.%s\n", 
ba�
, 
	`q�r_�r
(
��
));

1058 
mp_obj_t
 
de�
[2];

1059 
	`mp_l�d_m�hod
(
ba�
, 
��
, 
de�
);

1060 i�(
de�
[1] =�
MP_OBJ_NULL
) {

1062  
de�
[0];

1065  
	`mp_obj_�w_bound_m�h
(
de�
[0], dest[1]);

1067 
	}
}

1069 #i�
MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG


1075 
	s_mp_obj_checked_fun_t
 {

1076 
mp_obj_ba�_t
 
	mba�
;

1077 cڡ 
mp_obj_ty�_t
 *
	mty�
;

1078 
mp_obj_t
 
	mfun
;

1079 } 
	tmp_obj_checked_fun_t
;

1081 
mp_obj_t
 
	$checked_fun_��
(
mp_obj_t
 
�lf_�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
) {

1082 
mp_obj_checked_fun_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

1083 i�(
n_�gs
 > 0) {

1084 cڡ 
mp_obj_ty�_t
 *
�g0_ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

1085 i�(
�g0_ty�
 !�
�lf
->
ty�
) {

1086 #i�
MICROPY_ERROR_REPORTING
 !�
MICROPY_ERROR_REPORTING_DETAILED


1087 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("argument has wrong�ype"));

1089 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1090 
	`MP_ERROR_TEXT
("�gum��should b��'%q'�ه '%q'"), 
�lf
->
ty�
->
�me
, 
�g0_ty�
->name);

1094  
	`mp_��_fun�i�_n_kw
(
�lf
->
fun
, 
n_�gs
, 
n_kw
, 
�gs
);

1095 
	}
}

1097 
MP_DEFINE_CONST_OBJ_TYPE
(

1098 
mp_ty�_checked_fun
,

1099 
MP_QSTR_fun�i�
,

1100 
MP_TYPE_FLAG_BINDS_SELF
,

1101 
��
, 
checked_fun_��


1104 
mp_obj_t
 
	$mp_obj_�w_checked_fun
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
mp_obj_t
 
fun
) {

1105 
mp_obj_checked_fun_t
 *
o
 = 
	`mp_obj_m�loc
(mp_obj_checked_fun_t, &
mp_ty�_checked_fun
);

1106 
o
->
ty�
 =�ype;

1107 
o
->
fun
 = fun;

1108  
	`MP_OBJ_FROM_PTR
(
o
);

1109 
	}
}

1118 
	$mp_c�v�t_memb�_lookup
(
mp_obj_t
 
�lf
, cڡ 
mp_obj_ty�_t
 *
ty�
, mp_obj_�
memb�
, mp_obj_�*
de�
) {

1119 i�(
	`mp_obj_is_obj
(
memb�
)) {

1120 cڡ 
mp_obj_ty�_t
 *
m_ty�
 = ((
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
memb�
))->
ty�
;

1121 i�(
m_ty�
->
�ags
 & 
MP_TYPE_FLAG_BINDS_SELF
) {

1123 i�(
m_ty�
->
�ags
 & 
MP_TYPE_FLAG_BUILTIN_FUN
) {

1125 i�(
	`mp_obj_is_����_ty�
(
ty�
)) {

1127 
de�
[0] = 
memb�
;

1129 #i�
MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG


1130 i�(
�lf
 =�
MP_OBJ_NULL
 && 
ty�
 !�&
mp_ty�_obje�
) {

1134 
de�
[0] = 
	`mp_obj_�w_checked_fun
(
ty�
, 
memb�
);

1139 
de�
[0] = 
memb�
;

1140 
de�
[1] = 
�lf
;

1144 
de�
[0] = 
memb�
;

1145 
de�
[1] = 
�lf
;

1147 } i�(
m_ty�
 =�&
mp_ty�_��icm�hod
) {

1149 
de�
[0] = ((
mp_obj_��ic_�ass_m�hod_t
 *)
	`MP_OBJ_TO_PTR
(
memb�
))->
fun
;

1150 } i�(
m_ty�
 =�&
mp_ty�_�assm�hod
) {

1154 i�(
�lf
 !�
MP_OBJ_NULL
) {

1155 
ty�
 = 
	`mp_obj_g�_ty�
(
�lf
);

1156 i�(
ty�
 =�&
mp_ty�_ty�
) {

1158 
ty�
 = 
	`MP_OBJ_TO_PTR
(
�lf
);

1161 
de�
[0] = ((
mp_obj_��ic_�ass_m�hod_t
 *)
	`MP_OBJ_TO_PTR
(
memb�
))->
fun
;

1162 
de�
[1] = 
	`MP_OBJ_FROM_PTR
(
ty�
);

1165 
de�
[0] = 
memb�
;

1169 
de�
[0] = 
memb�
;

1171 
	}
}

1176 
	$mp_l�d_m�hod_maybe
(
mp_obj_t
 
obj
, 
q�r
 
��
, mp_obj_�*
de�
) {

1178 
de�
[0] = 
MP_OBJ_NULL
;

1179 
de�
[1] = 
MP_OBJ_NULL
;

1186 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
obj
);

1189 #i�
MICROPY_CPYTHON_COMPAT


1190 i�(
��
 =�
MP_QSTR___�ass__
) {

1192 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(
ty�
);

1197 i�(
��
 =�
MP_QSTR___�xt__
 && 
	`TYPE_HAS_ITERNEXT
(
ty�
)) {

1198 
de�
[0] = 
	`MP_OBJ_FROM_PTR
(&
mp_bu�t�_�xt_obj
);

1199 
de�
[1] = 
obj
;

1202 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��
)) {

1204 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
)(
obj
,��r, 
de�
);

1207 i�(
de�
[1] !�
MP_OBJ_SENTINEL
) {

1211 
de�
[1] = 
MP_OBJ_NULL
;

1213 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
lo�ls_di�
)) {

1216 
	`as��
(
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
lo�ls_di�
)->
ba�
.ty� =�&
mp_ty�_di�
);

1217 
mp_m�_t
 *
lo�ls_m�
 = &
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
lo�ls_di�
)->
m�
;

1218 
mp_m�_�em_t
 *
�em
 = 
	`mp_m�_lookup
(
lo�ls_m�
, 
	`MP_OBJ_NEW_QSTR
(
��
), 
MP_MAP_LOOKUP
);

1219 i�(
�em
 !�
NULL
) {

1220 
	`mp_c�v�t_memb�_lookup
(
obj
, 
ty�
, 
�em
->
v�ue
, 
de�
);

1224 
	}
}

1226 
	$mp_l�d_m�hod
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�*
de�
) {

1227 
	`DEBUG_OP_��tf
("l�d m�hod %p.%s\n", 
ba�
, 
	`q�r_�r
(
��
));

1229 
	`mp_l�d_m�hod_maybe
(
ba�
, 
��
, 
de�
);

1231 i�(
de�
[0] =�
MP_OBJ_NULL
) {

1233 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1234 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("no such�ttribute"));

1237 i�(
	`mp_obj_is_ty�
(
ba�
, &
mp_ty�_ty�
)) {

1238 
	`mp_�i�_msg_v�g
(&
mp_ty�_A�ribu�E��
,

1239 
	`MP_ERROR_TEXT
("type object '%q' has�o�ttribute '%q'"),

1240 ((
mp_obj_ty�_t
 *)
	`MP_OBJ_TO_PTR
(
ba�
))->
�me
, 
��
);

1242 
	`mp_�i�_msg_v�g
(&
mp_ty�_A�ribu�E��
,

1243 
	`MP_ERROR_TEXT
("'%s' object has�o�ttribute '%q'"),

1244 
	`mp_obj_g�_ty�_�r
(
ba�
), 
��
);

1248 
	}
}

1251 
	$mp_l�d_m�hod_��e�ed
(
mp_obj_t
 
obj
, 
q�r
 
��
, mp_obj_�*
de�
, 
bo�
 
�tch_�l_exc
) {

1252 
�r_buf_t
 
�r
;

1253 i�(
	`�r_push
(&
�r
) == 0) {

1254 
	`mp_l�d_m�hod_maybe
(
obj
, 
��
, 
de�
);

1255 
	`�r_p�
();

1257 i�(!
�tch_�l_exc


1258 && !
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(((
mp_obj_ba�_t
 *)
�r
.
�t_v�
)->
ty�
),

1259 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_A�ribu�E��
))) {

1261 
	`�r_�i�
(
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
));

1264 
	}
}

1266 
	$mp_��e_��
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�
v�ue
) {

1267 
	`DEBUG_OP_��tf
("�ܐ�� %p.%�<- %p\n", 
ba�
, 
	`q�r_�r
(
��
), 
v�ue
);

1268 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
ba�
);

1269 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��
)) {

1270 
mp_obj_t
 
de�
[2] = {
MP_OBJ_SENTINEL
, 
v�ue
};

1271 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
)(
ba�
,��r, 
de�
);

1272 i�(
de�
[0] =�
MP_OBJ_NULL
) {

1277 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1278 
	`mp_�i�_msg
(&
mp_ty�_A�ribu�E��
, 
	`MP_ERROR_TEXT
("no such�ttribute"));

1280 
	`mp_�i�_msg_v�g
(&
mp_ty�_A�ribu�E��
,

1281 
	`MP_ERROR_TEXT
("'%s' object has�o�ttribute '%q'"),

1282 
	`mp_obj_g�_ty�_�r
(
ba�
), 
��
);

1284 
	}
}

1286 
mp_obj_t
 
	$mp_g���
(
mp_obj_t
 
o_�
, 
mp_obj_��_buf_t
 *
��_buf
) {

1287 
	`as��
(
o_�
);

1288 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o_�
);

1292 i�((
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
�=�MP_TYPE_FLAG_ITER_IS_ITERNEXT || (ty�->�ag�& 
MP_TYPE_FLAG_ITER_IS_STREAM
) == MP_TYPE_FLAG_ITER_IS_STREAM) {

1293  
o_�
;

1296 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��
)) {

1298 i�(
��_buf
 =�
NULL
 && 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
�!�
mp_obj_����_g���
) {

1301 
��_buf
 = 
	`m_�w_obj
(
mp_obj_��_buf_t
);

1303 
mp_g���_fun_t
 
g���
;

1304 i�(
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_CUSTOM
) {

1305 
g���
 = ((
mp_g���_���xt_cu�om_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
))->getiter;

1307 
g���
 = (
mp_g���_fun_t
)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
);

1309 
mp_obj_t
 
��
 = 
	`g���
(
o_�
, 
��_buf
);

1310 i�(
��
 !�
MP_OBJ_NULL
) {

1311  
��
;

1316 
mp_obj_t
 
de�
[2];

1317 
	`mp_l�d_m�hod_maybe
(
o_�
, 
MP_QSTR___g��em__
, 
de�
);

1318 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1320 i�(
��_buf
 =�
NULL
) {

1322 
��_buf
 = 
	`m_�w_obj
(
mp_obj_��_buf_t
);

1324  
	`mp_obj_�w_g��em_��
(
de�
, 
��_buf
);

1328 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1329 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object�ot iterable"));

1331 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1332 
	`MP_ERROR_TEXT
("'%s' obje� i�'���ab�"), 
	`mp_obj_g�_ty�_�r
(
o_�
));

1335 
	}
}

1337 
mp_fun_1_t
 
	$ty�_g�_���xt
(cڡ 
mp_obj_ty�_t
 *
ty�
) {

1338 i�((
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_STREAM
) == MP_TYPE_FLAG_ITER_IS_STREAM) {

1339  
mp_��am_unbuf�d_��
;

1340 } i�(
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_ITERNEXT
) {

1341  (
mp_fun_1_t
)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
);

1342 } i�(
ty�
->
�ags
 & 
MP_TYPE_FLAG_ITER_IS_CUSTOM
) {

1343  ((
mp_g���_���xt_cu�om_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��
))->
���xt
;

1345  
NULL
;

1347 
	}
}

1351 
mp_obj_t
 
	$mp_���xt_�low_�i�
(
mp_obj_t
 
o_�
) {

1352 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o_�
);

1353 i�(
	`TYPE_HAS_ITERNEXT
(
ty�
)) {

1354 
	`MP_STATE_THREAD
(
��_���i�_�g
��
MP_OBJ_NULL
;

1355  
	`ty�_g�_���xt
(
ty�
)(
o_�
);

1358 
mp_obj_t
 
de�
[2];

1359 
	`mp_l�d_m�hod_maybe
(
o_�
, 
MP_QSTR___�xt__
, 
de�
);

1360 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1362  
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

1364 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1365 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object�ot�n iterator"));

1367 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1368 
	`MP_ERROR_TEXT
("'%s' obje� i�'�� i��t�"), 
	`mp_obj_g�_ty�_�r
(
o_�
));

1372 
	}
}

1376 
mp_obj_t
 
	$mp_���xt
(
mp_obj_t
 
o_�
) {

1377 
	`mp_c�ack_check
();

1378 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
o_�
);

1379 i�(
	`TYPE_HAS_ITERNEXT
(
ty�
)) {

1380 
	`MP_STATE_THREAD
(
��_���i�_�g
��
MP_OBJ_NULL
;

1381  
	`ty�_g�_���xt
(
ty�
)(
o_�
);

1384 
mp_obj_t
 
de�
[2];

1385 
	`mp_l�d_m�hod_maybe
(
o_�
, 
MP_QSTR___�xt__
, 
de�
);

1386 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1388 
�r_buf_t
 
�r
;

1389 i�(
	`�r_push
(&
�r
) == 0) {

1390 
mp_obj_t
 
�t
 = 
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

1391 
	`�r_p�
();

1392  
�t
;

1394 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(((
mp_obj_ba�_t
 *)
�r
.
�t_v�
)->
ty�
), MP_OBJ_FROM_PTR(&
mp_ty�_St�I��ti�
))) {

1395  
	`mp_make_��_���i�
(
	`mp_obj_ex��i�_g�_v�ue
(
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
)));

1397 
	`�r_jump
(
�r
.
�t_v�
);

1401 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1402 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("object�ot�n iterator"));

1404 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1405 
	`MP_ERROR_TEXT
("'%s' obje� i�'�� i��t�"), 
	`mp_obj_g�_ty�_�r
(
o_�
));

1409 
	}
}

1411 
mp_vm_�tu�_k�d_t
 
	$mp_�sume
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�ue
, mp_obj_�
throw_v�ue
, mp_obj_�*
�t_v�
) {

1412 
	`as��
((
�nd_v�ue
 !�
MP_OBJ_NULL
�^ (
throw_v�ue
 != MP_OBJ_NULL));

1413 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

1415 i�(
ty�
 =�&
mp_ty�_g�_����
) {

1416  
	`mp_obj_g�_�sume
(
�lf_�
, 
�nd_v�ue
, 
throw_v�ue
, 
�t_v�
);

1419 i�(
	`TYPE_HAS_ITERNEXT
(
ty�
�&& 
�nd_v�ue
 =�
mp_cڡ_n�e
) {

1420 
	`MP_STATE_THREAD
(
��_���i�_�g
��
MP_OBJ_NULL
;

1421 
mp_obj_t
 
�t
 = 
	`ty�_g�_���xt
(
ty�
)(
�lf_�
);

1422 *
�t_v�
 = 
�t
;

1423 i�(
�t
 !�
MP_OBJ_STOP_ITERATION
) {

1424  
MP_VM_RETURN_YIELD
;

1428 *
�t_v�
 = 
	`MP_STATE_THREAD
(
��_���i�_�g
);

1429 i�(*
�t_v�
 =�
MP_OBJ_NULL
) {

1430 *
�t_v�
 = 
mp_cڡ_n�e
;

1432  
MP_VM_RETURN_NORMAL
;

1436 
mp_obj_t
 
de�
[3];

1439 i�(
�nd_v�ue
 =�
mp_cڡ_n�e
) {

1440 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR___�xt__
, 
de�
);

1441 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1442 *
�t_v�
 = 
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

1443  
MP_VM_RETURN_YIELD
;

1449 i�(
�nd_v�ue
 !�
MP_OBJ_NULL
) {

1450 
	`mp_l�d_m�hod
(
�lf_�
, 
MP_QSTR_�nd
, 
de�
);

1451 
de�
[2] = 
�nd_v�ue
;

1452 *
�t_v�
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�
);

1453  
MP_VM_RETURN_YIELD
;

1456 
	`as��
(
throw_v�ue
 !�
MP_OBJ_NULL
);

1458 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(
throw_v�ue
)), MP_OBJ_FROM_PTR(&
mp_ty�_G����Ex�
))) {

1459 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR_�o�
, 
de�
);

1460 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1463 *
�t_v�
 = 
	`mp_��_m�hod_n_kw
(0, 0, 
de�
);

1465  
MP_VM_RETURN_NORMAL
;

1468 
	`mp_l�d_m�hod_maybe
(
�lf_�
, 
MP_QSTR_throw
, 
de�
);

1469 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1470 
de�
[2] = 
throw_v�ue
;

1471 *
�t_v�
 = 
	`mp_��_m�hod_n_kw
(1, 0, 
de�
);

1474  
MP_VM_RETURN_YIELD
;

1482 i�(
	`mp_obj_ex��i�_m�ch
(
throw_v�ue
, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_St�I��ti�
))) {

1484 *
�t_v�
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("generator�aised StopIteration"));

1486 *
�t_v�
 = 
	`mp_make_�i�_obj
(
throw_v�ue
);

1488  
MP_VM_RETURN_EXCEPTION
;

1490 
	}
}

1492 
mp_obj_t
 
	$mp_make_�i�_obj
(
mp_obj_t
 
o
) {

1493 
	`DEBUG_��tf
("�i� %p\n", 
o
);

1494 i�(
	`mp_obj_is_ex��i�_ty�
(
o
)) {

1499 
o
 = 
	`mp_��_fun�i�_n_kw
(o, 0, 0, 
NULL
);

1502 i�(
	`mp_obj_is_ex��i�_����
(
o
)) {

1504  
o
;

1507  
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ty�E��
, 
	`MP_ERROR_TEXT
("exceptions must derive from BaseException"));

1509 
	}
}

1511 
mp_obj_t
 
	$mp_imp�t_�me
(
q�r
 
�me
, 
mp_obj_t
 
�omli�
, mp_obj_�
�v�
) {

1512 
	`DEBUG_��tf
("imp܈�m�'%s'�ev�=%d\n", 
	`q�r_�r
(
�me
), 
	`MP_OBJ_SMALL_INT_VALUE
(
�v�
));

1515 
mp_obj_t
 
�gs
[5];

1516 
�gs
[0] = 
	`MP_OBJ_NEW_QSTR
(
�me
);

1517 
�gs
[1] = 
mp_cڡ_n�e
;

1518 
�gs
[2] = 
mp_cڡ_n�e
;

1519 
�gs
[3] = 
�omli�
;

1520 
�gs
[4] = 
�v�
;

1522 #i�
MICROPY_CAN_OVERRIDE_BUILTINS


1524 
mp_obj_di�_t
 *
bo_di�
 = 
	`MP_STATE_VM
(
mp_modu�_bu�t�s_ov�ride_di�
);

1525 i�(
bo_di�
 !�
NULL
) {

1526 
mp_m�_�em_t
 *
imp�t
 = 
	`mp_m�_lookup
(&
bo_di�
->
m�
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR___imp�t__
), 
MP_MAP_LOOKUP
);

1527 i�(
imp�t
 !�
NULL
) {

1528  
	`mp_��_fun�i�_n_kw
(
imp�t
->
v�ue
, 5, 0, 
�gs
);

1533  
	`mp_bu�t�___imp�t__
(5, 
�gs
);

1534 
	}
}

1536 
mp_obj_t
 
	$mp_imp�t_�om
(
mp_obj_t
 
modu�
, 
q�r
 
�me
) {

1537 
	`DEBUG_��tf
("imp܈�om %�%s\n", 
modu�
, 
	`q�r_�r
(
�me
));

1539 
mp_obj_t
 
de�
[2];

1541 
	`mp_l�d_m�hod_maybe
(
modu�
, 
�me
, 
de�
);

1543 i�(
de�
[1] !�
MP_OBJ_NULL
) {

1545 
imp�t_�r�
:

1546 
	`mp_�i�_msg_v�g
(&
mp_ty�_Imp�tE��
, 
	`MP_ERROR_TEXT
("�n'�imp܈�m�%q"), 
�me
);

1549 i�(
de�
[0] !�
MP_OBJ_NULL
) {

1550  
de�
[0];

1553 #i�
MICROPY_ENABLE_EXTERNAL_IMPORT


1556 
	`mp_l�d_m�hod_maybe
(
modu�
, 
MP_QSTR___�th__
, 
de�
);

1557 i�(
de�
[0] =�
MP_OBJ_NULL
) {

1558 
imp�t_�r�
;

1561 
	`mp_l�d_m�hod_maybe
(
modu�
, 
MP_QSTR___�me__
, 
de�
);

1562 
size_t
 
pkg_�me_�n
;

1563 cڡ *
pkg_�me
 = 
	`mp_obj_�r_g�_d�a
(
de�
[0], &
pkg_�me_�n
);

1565 cڡ 
u�t
 
d�_�me_�n
 = 
pkg_�me_�n
 + 1 + 
	`q�r_�n
(
�me
);

1566 *
d�_�me
 = 
	`mp_lo�l_�loc
(
d�_�me_�n
);

1567 
	`mem�y
(
d�_�me
, 
pkg_�me
, 
pkg_�me_�n
);

1568 
d�_�me
[
pkg_�me_�n
] = '.';

1569 
	`mem�y
(
d�_�me
 + 
pkg_�me_�n
 + 1, 
	`q�r_�r
(
�me
), 
	`q�r_�n
(name));

1570 
q�r
 
d�_�me_q
 = 
	`q�r_�om_��
(
d�_�me
, 
d�_�me_�n
);

1571 
	`mp_lo�l_�
(
d�_�me
);

1574  
	`mp_imp�t_�me
(
d�_�me_q
, 
mp_cڡ_�ue
, 
	`MP_OBJ_NEW_SMALL_INT
(0));

1579 
imp�t_�r�
;

1582 
	}
}

1584 
	$mp_imp�t_�l
(
mp_obj_t
 
modu�
) {

1585 
	`DEBUG_��tf
("imp܈��%p\n", 
modu�
);

1588 
mp_m�_t
 *
m�
 = &
	`mp_obj_modu�_g�_glob�s
(
modu�
)->map;

1589 
size_t
 
i
 = 0; i < 
m�
->
�loc
; i++) {

1590 i�(
	`mp_m�_��_is_f��d
(
m�
, 
i
)) {

1594 cڡ *
�me
 = 
	`mp_obj_�r_g�_�r
(
m�
->
�b�
[
i
].
key
);

1595 i�(*
�me
 != '_') {

1596 
q�r
 
q�me
 = 
	`mp_obj_�r_g�_q�r
(
m�
->
�b�
[
i
].
key
);

1597 
	`mp_��e_�me
(
q�me
, 
m�
->
�b�
[
i
].
v�ue
);

1601 
	}
}

1603 #i�
MICROPY_ENABLE_COMPILER


1605 
mp_obj_t
 
	$mp_�r�_comp�e_execu�
(
mp_�x�_t
 *
�x
, 
mp_�r�_�put_k�d_t
 
�r�_�put_k�d
, 
mp_obj_di�_t
 *
glob�s
, mp_obj_di�_�*
lo�ls
) {

1607 
�r_jump_��back_node_glob�s_lo�ls_t
 
�x
;

1608 
�x
.
glob�s
 = 
	`mp_glob�s_g�
();

1609 
�x
.
lo�ls
 = 
	`mp_lo�ls_g�
();

1612 
	`mp_glob�s_�t
(
glob�s
);

1613 
	`mp_lo�ls_�t
(
lo�ls
);

1616 
	`�r_push_jump_��back
(&
�x
.
��back
, 
mp_glob�s_lo�ls_�t_�om_�r_jump_��back
);

1618 
q�r
 
sour�_�me
 = 
�x
->source_name;

1619 
mp_�r�_��_t
 
�r�_��
 = 
	`mp_�r�
(
�x
, 
�r�_�put_k�d
);

1620 
mp_obj_t
 
modu�_fun
 = 
	`mp_comp�e
(&
�r�_��
, 
sour�_�me
, 
�r�_�put_k�d
 =�
MP_PARSE_SINGLE_INPUT
);

1622 
mp_obj_t
 
�t
;

1623 i�(
MICROPY_PY_BUILTINS_COMPILE
 && 
glob�s
 =�
NULL
) {

1625 
�t
 = 
modu�_fun
;

1628 
�t
 = 
	`mp_��_fun�i�_0
(
modu�_fun
);

1632 
	`�r_p�_jump_��back
(
�ue
);

1635  
�t
;

1636 
	}
}

1640 
NORETURN
 
	$m_m�loc_�
(
size_t
 
num_by�s
) {

1641 
	`DEBUG_��tf
("mem�y��o�ti� fa�ed,��o�t�g %u by�s\n", (
u�t
)
num_by�s
);

1642 #i�
MICROPY_ENABLE_GC


1643 i�(
	`gc_is_locked
()) {

1644 
	`mp_�i�_msg
(&
mp_ty�_Mem�yE��
, 
	`MP_ERROR_TEXT
("memory�llocation failed, heap is�ocked"));

1647 
	`mp_�i�_msg_v�g
(&
mp_ty�_Mem�yE��
,

1648 
	`MP_ERROR_TEXT
("mem�y��o�ti� fa�ed,��o�t�g %u by�s"), (
u�t
)
num_by�s
);

1649 
	}
}

1651 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NONE


1653 
NORETURN
 
	$mp_�i�_ty�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
) {

1654 
	`�r_�i�
(
	`mp_obj_�w_ex��i�
(
exc_ty�
));

1655 
	}
}

1657 
NORETURN
 
	$mp_�i�_V�ueE��_no_msg
() {

1658 
	`mp_�i�_ty�
(&
mp_ty�_V�ueE��
);

1659 
	}
}

1661 
NORETURN
 
	$mp_�i�_Ty�E��_no_msg
() {

1662 
	`mp_�i�_ty�
(&
mp_ty�_Ty�E��
);

1663 
	}
}

1665 
NORETURN
 
	$mp_�i�_N�Im�em��dE��_no_msg
() {

1666 
	`mp_�i�_ty�
(&
mp_ty�_N�Im�em��dE��
);

1667 
	}
}

1671 
NORETURN
 
	$mp_�i�_msg
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
msg
) {

1672 i�(
msg
 =�
NULL
) {

1673 
	`�r_�i�
(
	`mp_obj_�w_ex��i�
(
exc_ty�
));

1675 
	`�r_�i�
(
	`mp_obj_�w_ex��i�_msg
(
exc_ty�
, 
msg
));

1677 
	}
}

1679 
NORETURN
 
	$mp_�i�_msg_v�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, ...) {

1680 
va_li�
 
�gs
;

1681 
	`va_��t
(
�gs
, 
fmt
);

1682 
mp_obj_t
 
exc
 = 
	`mp_obj_�w_ex��i�_msg_vli�
(
exc_ty�
, 
fmt
, 
�gs
);

1683 
	`va_�d
(
�gs
);

1684 
	`�r_�i�
(
exc
);

1685 
	}
}

1687 
NORETURN
 
	$mp_�i�_V�ueE��
(
mp_rom_�r�_�xt_t
 
msg
) {

1688 
	`mp_�i�_msg
(&
mp_ty�_V�ueE��
, 
msg
);

1689 
	}
}

1691 
NORETURN
 
	$mp_�i�_Ty�E��
(
mp_rom_�r�_�xt_t
 
msg
) {

1692 
	`mp_�i�_msg
(&
mp_ty�_Ty�E��
, 
msg
);

1693 
	}
}

1695 
NORETURN
 
	$mp_�i�_N�Im�em��dE��
(
mp_rom_�r�_�xt_t
 
msg
) {

1696 
	`mp_�i�_msg
(&
mp_ty�_N�Im�em��dE��
, 
msg
);

1697 
	}
}

1701 
NORETURN
 
	$mp_�i�_ty�_�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_obj_t
 
�g
) {

1702 
	`�r_�i�
(
	`mp_obj_�w_ex��i�_�g1
(
exc_ty�
, 
�g
));

1703 
	}
}

1705 
NORETURN
 
	$mp_�i�_St�I��ti�
(
mp_obj_t
 
�g
) {

1706 i�(
�g
 =�
MP_OBJ_NULL
) {

1707 
	`mp_�i�_ty�
(&
mp_ty�_St�I��ti�
);

1709 
	`mp_�i�_ty�_�g
(&
mp_ty�_St�I��ti�
, 
�g
);

1711 
	}
}

1713 
NORETURN
 
	$mp_�i�_Ty�E��_�t_c�v�si�
(
mp_cڡ_obj_t
 
�g
) {

1714 #i�
MICROPY_ERROR_REPORTING
 <�
MICROPY_ERROR_REPORTING_TERSE


1715 ()
�g
;

1716 
	`mp_�i�_Ty�E��
(
	`MP_ERROR_TEXT
("can't convert�o int"));

1718 
	`mp_�i�_msg_v�g
(&
mp_ty�_Ty�E��
,

1719 
	`MP_ERROR_TEXT
("�n'�c�v��%�tؚt"), 
	`mp_obj_g�_ty�_�r
(
�g
));

1721 
	}
}

1723 
NORETURN
 
	$mp_�i�_OSE��
(
��o_
) {

1724 
	`mp_�i�_ty�_�g
(&
mp_ty�_OSE��
, 
	`MP_OBJ_NEW_SMALL_INT
(
��o_
));

1725 
	}
}

1727 
NORETURN
 
	$mp_�i�_OSE��_w�h_f��ame
(
��o_
, cڡ *
f��ame
) {

1728 
v�r_t
 
v�r
;

1729 
	`v�r_��
(&
v�r
, 32);

1730 
	`v�r_��tf
(&
v�r
, "�n'�ݒ %s", 
f��ame
);

1731 
mp_obj_t
 
o_�r
 = 
	`mp_obj_�w_�r_�om_v�r
(&
v�r
);

1732 
mp_obj_t
 
�gs
[2] = { 
	`MP_OBJ_NEW_SMALL_INT
(
��o_
), 
	`MP_OBJ_FROM_PTR
(
o_�r
)};

1733 
	`�r_�i�
(
	`mp_obj_ex��i�_make_�w
(&
mp_ty�_OSE��
, 2, 0, 
�gs
));

1734 
	}
}

1736 #i�
MICROPY_STACK_CHECK
 || 
MICROPY_ENABLE_PYSTACK


1737 
NORETURN
 
	$mp_�i�_�cursi�_d�th
() {

1738 
	`mp_�i�_ty�_�g
(&
mp_ty�_Ru�imeE��
, 
	`MP_OBJ_NEW_QSTR
(
MP_QSTR_maximum_�a�_�cursi�_�a�_d�th_�a�_ex�eded
));

1739 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime.h

26 #i�de�
MICROPY_INCLUDED_PY_RUNTIME_H


27 
	#MICROPY_INCLUDED_PY_RUNTIME_H


	)

29 
	~"py/mp��e.h
"

30 
	~"py/py�ack.h
"

31 
	~"py/c�ack.h
"

34 
	#MP_DEFINE_NLR_JUMP_CALLBACK_FUNCTION_1
(
�x
, 
f
, 
a
) \

35 
�r_jump_��back_node_��_fun�i�_1_t
 
�x
 = { \

36 .
func
 = ((*)(*))(
f
), \

37 .
�g
 = (
a
), \

38 }

	)

41 
	mMP_VM_RETURN_NORMAL
,

42 
	mMP_VM_RETURN_YIELD
,

43 
	mMP_VM_RETURN_EXCEPTION
,

44 } 
	tmp_vm_�tu�_k�d_t
;

47 
	mMP_ARG_BOOL
 = 0x001,

48 
	mMP_ARG_INT
 = 0x002,

49 
	mMP_ARG_OBJ
 = 0x003,

50 
	mMP_ARG_KIND_MASK
 = 0x0ff,

51 
	mMP_ARG_REQUIRED
 = 0x100,

52 
	mMP_ARG_KW_ONLY
 = 0x200,

53 } 
	tmp_�g_�ag_t
;

55 
	u_mp_�g_v�_t
 {

56 
bo�
 
	mu_bo�
;

57 
mp_�t_t
 
	mu_�t
;

58 
mp_obj_t
 
	mu_obj
;

59 
mp_rom_obj_t
 
	mu_rom_obj
;

60 } 
	tmp_�g_v�_t
;

62 
	s_mp_�g_t
 {

63 
u�t16_t
 
	mq�
;

64 
u�t16_t
 
	m�ags
;

65 
mp_�g_v�_t
 
	mdefv�
;

66 } 
	tmp_�g_t
;

68 
	g_mp_sched_node_t
;

70 (*
	tmp_sched_��back_t
)(
	t_mp_sched_node_t
 *);

72 
	s_mp_sched_node_t
 {

73 
mp_sched_��back_t
 
��back
;

74 
_mp_sched_node_t
 *
�xt
;

75 } 
	tmp_sched_node_t
;

78 
	s_�r_jump_��back_node_glob�s_lo�ls_t
 {

79 
�r_jump_��back_node_t
 
��back
;

80 
mp_obj_di�_t
 *
glob�s
;

81 
mp_obj_di�_t
 *
lo�ls
;

82 } 
	t�r_jump_��back_node_glob�s_lo�ls_t
;

85 
	s_�r_jump_��back_node_��_fun�i�_1_t
 {

86 
�r_jump_��back_node_t
 
��back
;

87 (*
func
)(*);

88 *
�g
;

89 } 
	t�r_jump_��back_node_��_fun�i�_1_t
;

92 
cڡ 
by�
 
mp_u�ry_�_m�hod_�me
[];

93 
cڡ 
by�
 
mp_b��y_�_m�hod_�me
[];

95 
	`mp_��
();

96 
	`mp_de��
();

98 
	`mp_sched_ex��i�
(
mp_obj_t
 
exc
);

99 
	`mp_sched_keyb�rd_���u�
();

100 #i�
MICROPY_ENABLE_VM_ABORT


101 
	`mp_sched_vm_ab�t
();

103 
	`mp_h�d�_�nd�g
(
bo�
 
�i�_exc
);

105 #i�
MICROPY_ENABLE_SCHEDULER


106 
	`mp_sched_lock
();

107 
	`mp_sched_u�ock
();

108 
	#mp_sched_num_�nd�g
(�(
	`MP_STATE_VM
(
sched_�n
))

	)

109 
bo�
 
	`mp_sched_schedu�
(
mp_obj_t
 
fun�i�
, mp_obj_�
�g
);

110 
bo�
 
	`mp_sched_schedu�_node
(
mp_sched_node_t
 *
node
, 
mp_sched_��back_t
 
��back
);

114 
	`mp_ev�t_h�d�_nowa�
();

122 
	`mp_ev�t_wa�_�def��e
();

128 
	`mp_ev�t_wa�_ms
(
mp_u�t_t
 
timeout_ms
);

131 
	`mp_��t_mp_�t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
x
, 
ba�
, 
ba�_ch�
, 
�ags
, 
f�l
, 
width
, 
�ec
);

133 
	`mp_�g_check_num_sig
(
size_t
 
n_�gs
, size_�
n_kw
, 
u�t32_t
 
sig
);

134 
�l�e
 
	$mp_�g_check_num
(
size_t
 
n_�gs
, size_�
n_kw
, size_�
n_�gs_m�
, size_�
n_�gs_max
, 
bo�
 
�kes_kw
) {

135 
	`mp_�g_check_num_sig
(
n_�gs
, 
n_kw
, 
	`MP_OBJ_FUN_MAKE_SIG
(
n_�gs_m�
, 
n_�gs_max
, 
�kes_kw
));

136 
	}
}

137 
mp_�g_�r�_�l
(
size_t
 
n_pos
, cڡ 
mp_obj_t
 *
pos
, 
mp_m�_t
 *
kws
, size_�
n_�lowed
, cڡ 
mp_�g_t
 *
�lowed
, 
mp_�g_v�_t
 *
out_v�s
);

138 
mp_�g_�r�_�l_kw_��y
(
size_t
 
n_pos
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�gs
, size_�
n_�lowed
, cڡ 
mp_�g_t
 *
�lowed
, 
mp_�g_v�_t
 *
out_v�s
);

139 
NORETURN
 
mp_�g_�r�_�r�_mism�ch
();

140 
NORETURN
 
mp_�g_�r�_unim�_kw
();

142 
�l�e
 
mp_obj_di�_t
 *
	$mp_lo�ls_g�
() {

143  
	`MP_STATE_THREAD
(
di�_lo�ls
);

144 
	}
}

145 
�l�e
 
	$mp_lo�ls_�t
(
mp_obj_di�_t
 *
d
) {

146 
	`MP_STATE_THREAD
(
di�_lo�ls
��
d
;

147 
	}
}

148 
�l�e
 
mp_obj_di�_t
 *
	$mp_glob�s_g�
() {

149  
	`MP_STATE_THREAD
(
di�_glob�s
);

150 
	}
}

151 
�l�e
 
	$mp_glob�s_�t
(
mp_obj_di�_t
 *
d
) {

152 
	`MP_STATE_THREAD
(
di�_glob�s
��
d
;

153 
	}
}

155 
mp_glob�s_lo�ls_�t_�om_�r_jump_��back
(*
�x_�
);

156 
mp_��_fun�i�_1_�om_�r_jump_��back
(*
�x_�
);

158 #i�
MICROPY_PY_THREAD


159 
�l�e
 
	$mp_th�ad_��_��e
(
mp_��e_th�ad_t
 *
ts
, 
size_t
 
�ack_size
, 
mp_obj_di�_t
 *
lo�ls
, mp_obj_di�_�*
glob�s
) {

160 
	`mp_th�ad_�t_��e
(
ts
);

162 
	`mp_c�ack_��_w�h_t�
(
ts
 + 1, 
�ack_size
);

165 
ts
->
gc_lock_d�th
 = 0;

168 
ts
->
�r_jump_��back_t�
 = 
NULL
;

169 
ts
->
mp_�nd�g_ex��i�
 = 
MP_OBJ_NULL
;

172 i�(
lo�ls
 =�
NULL
) {

173 
lo�ls
 = 
mp_��e_�x
.
th�ad
.
di�_lo�ls
;

175 i�(
glob�s
 =�
NULL
) {

176 
glob�s
 = 
mp_��e_�x
.
th�ad
.
di�_glob�s
;

178 
	`mp_lo�ls_�t
(
lo�ls
);

179 
	`mp_glob�s_�t
(
glob�s
);

180 
	}
}

183 
mp_obj_t
 
mp_l�d_�me
(
q�r
 
q�
);

184 
mp_obj_t
 
mp_l�d_glob�
(
q�r
 
q�
);

185 
mp_obj_t
 
mp_l�d_bu�d_�ass
();

186 
mp_��e_�me
(
q�r
 
q�
, 
mp_obj_t
 
obj
);

187 
mp_��e_glob�
(
q�r
 
q�
, 
mp_obj_t
 
obj
);

188 
mp_d��e_�me
(
q�r
 
q�
);

189 
mp_d��e_glob�
(
q�r
 
q�
);

191 
mp_obj_t
 
mp_u�ry_�
(
mp_u�ry_�_t
 
�
, mp_obj_�
�g
);

192 
mp_obj_t
 
mp_b��y_�
(
mp_b��y_�_t
 
�
, mp_obj_�
lhs
, mp_obj_�
rhs
);

194 
mp_obj_t
 
mp_��_fun�i�_0
(mp_obj_�
fun
);

195 
mp_obj_t
 
mp_��_fun�i�_1
(mp_obj_�
fun
, mp_obj_�
�g
);

196 
mp_obj_t
 
mp_��_fun�i�_2
(mp_obj_�
fun
, mp_obj_�
�g1
, mp_obj_�
�g2
);

197 
mp_obj_t
 
mp_��_fun�i�_n_kw
(mp_obj_�
fun
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

198 
mp_obj_t
 
mp_��_m�hod_n_kw
(
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

199 
mp_obj_t
 
mp_��_m�hod_n_kw_v�
(
bo�
 
have_�lf
, 
size_t
 
n_�gs_n_kw
, cڡ mp_obj_�*
�gs
);

200 
mp_obj_t
 
mp_��_m�hod_�lf_n_kw
(mp_obj_�
m�h
, mp_obj_�
�lf
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�gs
);

203 
mp_obj_t
 
mp_��_fun�i�_1_��e�ed
(mp_obj_�
fun
, mp_obj_�
�g
);

204 
mp_obj_t
 
mp_��_fun�i�_2_��e�ed
(mp_obj_�
fun
, mp_obj_�
�g1
, mp_obj_�
�g2
);

206 
	s_mp_��_�gs_t
 {

207 
mp_obj_t
 
	mfun
;

208 
size_t
 
	mn_�gs
, 
	mn_kw
, 
	mn_�loc
;

209 
mp_obj_t
 *
	m�gs
;

210 } 
	tmp_��_�gs_t
;

212 #i�
MICROPY_STACKLESS


217 
mp_��_���e_�gs_n_kw_v�
(
bo�
 
have_�lf
, 
size_t
 
n_�gs_n_kw
, cڡ 
mp_obj_t
 *
�gs
, 
mp_��_�gs_t
 *
out_�gs
);

220 
mp_u�ack_�qu��
(
mp_obj_t
 
�q
, 
size_t
 
num
, mp_obj_�*
�ems
);

221 
mp_u�ack_ex
(
mp_obj_t
 
�q
, 
size_t
 
num
, mp_obj_�*
�ems
);

222 
mp_obj_t
 
mp_��e_m�
(mp_obj_�
m�
, mp_obj_�
key
, mp_obj_�
v�ue
);

223 
mp_obj_t
 
mp_l�d_��
(mp_obj_�
ba�
, 
q�r
 
��
);

224 
mp_c�v�t_memb�_lookup
(
mp_obj_t
 
obj
, cڡ 
mp_obj_ty�_t
 *
ty�
, mp_obj_�
memb�
, mp_obj_�*
de�
);

225 
mp_l�d_m�hod
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�*
de�
);

226 
mp_l�d_m�hod_maybe
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�*
de�
);

227 
mp_l�d_m�hod_��e�ed
(
mp_obj_t
 
obj
, 
q�r
 
��
, mp_obj_�*
de�
, 
bo�
 
�tch_�l_exc
);

228 
mp_l�d_su�r_m�hod
(
q�r
 
��
, 
mp_obj_t
 *
de�
);

229 
mp_��e_��
(
mp_obj_t
 
ba�
, 
q�r
 
��
, mp_obj_�
v�
);

231 
mp_obj_t
 
mp_g���
(mp_obj_�
o
, 
mp_obj_��_buf_t
 *
��_buf
);

232 
mp_obj_t
 
mp_���xt_�low_�i�
(mp_obj_�
o
);

233 
mp_obj_t
 
mp_���xt
(mp_obj_�
o
);

234 
mp_vm_�tu�_k�d_t
 
mp_�sume
(
mp_obj_t
 
�lf_�
, mp_obj_�
�nd_v�ue
, mp_obj_�
throw_v�ue
, mp_obj_�*
�t_v�
);

236 
�l�e
 
mp_obj_t
 
	$mp_make_��_���i�
(
mp_obj_t
 
o
) {

237 
	`MP_STATE_THREAD
(
��_���i�_�g
��
o
;

238  
MP_OBJ_STOP_ITERATION
;

239 
	}
}

241 
mp_obj_t
 
mp_make_�i�_obj
(mp_obj_�
o
);

243 
mp_obj_t
 
mp_imp�t_�me
(
q�r
 
�me
, mp_obj_�
�omli�
, mp_obj_�
�v�
);

244 
mp_obj_t
 
mp_imp�t_�om
(mp_obj_�
modu�
, 
q�r
 
�me
);

245 
mp_imp�t_�l
(
mp_obj_t
 
modu�
);

247 #i�
MICROPY_ERROR_REPORTING
 =�
MICROPY_ERROR_REPORTING_NONE


248 
NORETURN
 
mp_�i�_ty�
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
);

249 
NORETURN
 
mp_�i�_V�ueE��_no_msg
();

250 
NORETURN
 
mp_�i�_Ty�E��_no_msg
();

251 
NORETURN
 
mp_�i�_N�Im�em��dE��_no_msg
();

252 
	#mp_�i�_msg
(
exc_ty�
, 
msg
�
	`mp_�i�_ty�
�xc_ty�)

	)

253 
	#mp_�i�_msg_v�g
(
exc_ty�
, ...�
	`mp_�i�_ty�
�xc_ty�)

	)

254 
	#mp_�i�_V�ueE��
(
msg
�
	`mp_�i�_V�ueE��_no_msg
()

	)

255 
	#mp_�i�_Ty�E��
(
msg
�
	`mp_�i�_Ty�E��_no_msg
()

	)

256 
	#mp_�i�_N�Im�em��dE��
(
msg
�
	`mp_�i�_N�Im�em��dE��_no_msg
()

	)

258 
	#mp_�i�_ty�
(
exc_ty�
�
	`mp_�i�_msg
�xc_ty�, 
NULL
)

	)

259 
NORETURN
 
mp_�i�_msg
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
msg
);

260 
NORETURN
 
mp_�i�_msg_v�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_rom_�r�_�xt_t
 
fmt
, ...);

261 
NORETURN
 
mp_�i�_V�ueE��
(
mp_rom_�r�_�xt_t
 
msg
);

262 
NORETURN
 
mp_�i�_Ty�E��
(
mp_rom_�r�_�xt_t
 
msg
);

263 
NORETURN
 
mp_�i�_N�Im�em��dE��
(
mp_rom_�r�_�xt_t
 
msg
);

266 
NORETURN
 
mp_�i�_ty�_�g
(cڡ 
mp_obj_ty�_t
 *
exc_ty�
, 
mp_obj_t
 
�g
);

267 
NORETURN
 
mp_�i�_St�I��ti�
(
mp_obj_t
 
�g
);

268 
NORETURN
 
mp_�i�_Ty�E��_�t_c�v�si�
(
mp_cڡ_obj_t
 
�g
);

269 
NORETURN
 
mp_�i�_OSE��
(
��o_
);

270 
NORETURN
 
mp_�i�_OSE��_w�h_f��ame
(
��o_
, cڡ *
f��ame
);

271 
NORETURN
 
mp_�i�_�cursi�_d�th
();

273 #i�
MICROPY_BUILTIN_METHOD_CHECK_SELF_ARG


274 #unde�
mp_check_�lf


275 
	#mp_check_�lf
(
�ed
)

	)

278 #i�de�
mp_check_�lf


279 
	#mp_check_�lf
(
�ed
�
	`as��
ջd)

	)

284 
mp_�tive_ty�_�om_q�r
(
q�r
 
q�
);

285 
mp_u�t_t
 
mp_�tive_�om_obj
(
mp_obj_t
 
obj
, mp_u�t_�
ty�
);

286 
mp_obj_t
 
mp_�tive_to_obj
(
mp_u�t_t
 
v�
, mp_u�t_�
ty�
);

288 #i�
MICROPY_PY_SYS_PATH


289 
	#mp_sys_�th
 (
	`MP_STATE_VM
(
sys_mu�b�
[
MP_SYS_MUTABLE_PATH
]))

	)

292 #i�
MICROPY_PY_SYS_ARGV


293 
	#mp_sys_�gv
 (
	`MP_OBJ_FROM_PTR
(&
	`MP_STATE_VM
(
mp_sys_�gv_obj
)))

	)

296 #i�
MICROPY_WARNINGS


297 #i�de�
mp_w�n�g


298 
mp_w�n�g
(cڡ *
��g�y
, cڡ *
msg
, ...);

301 
	#mp_w�n�g
(...)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime0.h

26 #i�de�
MICROPY_INCLUDED_PY_RUNTIME0_H


27 
	#MICROPY_INCLUDED_PY_RUNTIME0_H


	)

34 
	#MP_SCOPE_FLAG_ALL_SIG
 (0x0f)

	)

35 
	#MP_SCOPE_FLAG_GENERATOR
 (0x01)

	)

36 
	#MP_SCOPE_FLAG_VARKEYWORDS
 (0x02)

	)

37 
	#MP_SCOPE_FLAG_VARARGS
 (0x04)

	)

38 
	#MP_SCOPE_FLAG_DEFKWARGS
 (0x08)

	)

39 
	#MP_SCOPE_FLAG_REFGLOBALS
 (0x10)

40 
	#MP_SCOPE_FLAG_HASCONSTS
 (0x20)

41 
	#MP_SCOPE_FLAG_VIPERRET_POS
 (6)

42 
	#MP_SCOPE_FLAG_VIPERRELOC
 (0x10)

43 
	#MP_SCOPE_FLAG_VIPERRODATA
 (0x20)

44 
	#MP_SCOPE_FLAG_VIPERBSS
 (0x40)

45 

	)

47 
	#MP_NATIVE_TYPE_OBJ
 (0x00)

	)

48 
	#MP_NATIVE_TYPE_BOOL
 (0x01)

	)

49 
	#MP_NATIVE_TYPE_INT
 (0x02)

	)

50 
	#MP_NATIVE_TYPE_UINT
 (0x03)

	)

51 
	#MP_NATIVE_TYPE_PTR
 (0x04)

	)

52 
	#MP_NATIVE_TYPE_PTR8
 (0x05)

	)

53 
	#MP_NATIVE_TYPE_PTR16
 (0x06)

	)

54 
	#MP_NATIVE_TYPE_PTR32
 (0x07)

	)

57 
	#MP_NATIVE_TYPE_QSTR
 (0x08)

	)

60 
	#MP_UNARY_OP_NUM_BYTECODE
 (
MP_UNARY_OP_NOT
 + 1)

	)

61 
	#MP_UNARY_OP_NUM_RUNTIME
 (
MP_UNARY_OP_SIZEOF
 + 1)

	)

64 
	#MP_BINARY_OP_NUM_BYTECODE
 (
MP_BINARY_OP_POWER
 + 1)

	)

65 #i�
MICROPY_PY_REVERSE_SPECIAL_METHODS


66 
	#MP_BINARY_OP_NUM_RUNTIME
 (
MP_BINARY_OP_REVERSE_POWER
 + 1)

	)

68 
	#MP_BINARY_OP_NUM_RUNTIME
 (
MP_BINARY_OP_CONTAINS
 + 1)

	)

74 
	mMP_UNARY_OP_POSITIVE
,

75 
	mMP_UNARY_OP_NEGATIVE
,

76 
	mMP_UNARY_OP_INVERT
,

77 
	mMP_UNARY_OP_NOT
,

80 
	mMP_UNARY_OP_BOOL
,

81 
	mMP_UNARY_OP_LEN
,

82 
	mMP_UNARY_OP_HASH
,

83 
	mMP_UNARY_OP_ABS
,

84 
	mMP_UNARY_OP_INT_MAYBE
,

85 
	mMP_UNARY_OP_FLOAT_MAYBE
,

86 
	mMP_UNARY_OP_COMPLEX_MAYBE
,

87 
	mMP_UNARY_OP_SIZEOF
,

88 } 
	tmp_u�ry_�_t
;

95 
	mMP_BINARY_OP_LESS
,

96 
	mMP_BINARY_OP_MORE
,

97 
	mMP_BINARY_OP_EQUAL
,

98 
	mMP_BINARY_OP_LESS_EQUAL
,

99 
	mMP_BINARY_OP_MORE_EQUAL
,

100 
	mMP_BINARY_OP_NOT_EQUAL
,

101 
	mMP_BINARY_OP_IN
,

102 
	mMP_BINARY_OP_IS
,

103 
	mMP_BINARY_OP_EXCEPTION_MATCH
,

106 
	mMP_BINARY_OP_INPLACE_OR
,

107 
	mMP_BINARY_OP_INPLACE_XOR
,

108 
	mMP_BINARY_OP_INPLACE_AND
,

109 
	mMP_BINARY_OP_INPLACE_LSHIFT
,

110 
	mMP_BINARY_OP_INPLACE_RSHIFT
,

111 
	mMP_BINARY_OP_INPLACE_ADD
,

112 
	mMP_BINARY_OP_INPLACE_SUBTRACT
,

113 
	mMP_BINARY_OP_INPLACE_MULTIPLY
,

114 
	mMP_BINARY_OP_INPLACE_MAT_MULTIPLY
,

115 
	mMP_BINARY_OP_INPLACE_FLOOR_DIVIDE
,

116 
	mMP_BINARY_OP_INPLACE_TRUE_DIVIDE
,

117 
	mMP_BINARY_OP_INPLACE_MODULO
,

118 
	mMP_BINARY_OP_INPLACE_POWER
,

121 
	mMP_BINARY_OP_OR
,

122 
	mMP_BINARY_OP_XOR
,

123 
	mMP_BINARY_OP_AND
,

124 
	mMP_BINARY_OP_LSHIFT
,

125 
	mMP_BINARY_OP_RSHIFT
,

126 
	mMP_BINARY_OP_ADD
,

127 
	mMP_BINARY_OP_SUBTRACT
,

128 
	mMP_BINARY_OP_MULTIPLY
,

129 
	mMP_BINARY_OP_MAT_MULTIPLY
,

130 
	mMP_BINARY_OP_FLOOR_DIVIDE
,

131 
	mMP_BINARY_OP_TRUE_DIVIDE
,

132 
	mMP_BINARY_OP_MODULO
,

133 
	mMP_BINARY_OP_POWER
,

140 
	mMP_BINARY_OP_DIVMOD
,

144 
	mMP_BINARY_OP_CONTAINS
,

148 
	mMP_BINARY_OP_REVERSE_OR
,

149 
	mMP_BINARY_OP_REVERSE_XOR
,

150 
	mMP_BINARY_OP_REVERSE_AND
,

151 
	mMP_BINARY_OP_REVERSE_LSHIFT
,

152 
	mMP_BINARY_OP_REVERSE_RSHIFT
,

153 
	mMP_BINARY_OP_REVERSE_ADD
,

154 
	mMP_BINARY_OP_REVERSE_SUBTRACT
,

155 
	mMP_BINARY_OP_REVERSE_MULTIPLY
,

156 
	mMP_BINARY_OP_REVERSE_MAT_MULTIPLY
,

157 
	mMP_BINARY_OP_REVERSE_FLOOR_DIVIDE
,

158 
	mMP_BINARY_OP_REVERSE_TRUE_DIVIDE
,

159 
	mMP_BINARY_OP_REVERSE_MODULO
,

160 
	mMP_BINARY_OP_REVERSE_POWER
,

163 
	mMP_BINARY_OP_NOT_IN
,

164 
	mMP_BINARY_OP_IS_NOT
,

165 } 
	tmp_b��y_�_t
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime_utils.c

28 
	~"py/ru�ime.h
"

30 
mp_obj_t
 
	$mp_��_fun�i�_1_��e�ed
(
mp_obj_t
 
fun
, mp_obj_�
�g
) {

31 
�r_buf_t
 
�r
;

32 i�(
	`�r_push
(&
�r
) == 0) {

33 
mp_obj_t
 
�t
 = 
	`mp_��_fun�i�_1
(
fun
, 
�g
);

34 
	`�r_p�
();

35  
�t
;

37 
	`mp_obj_��t_ex��i�
(&
mp_��_��t
, 
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
));

38  
MP_OBJ_NULL
;

40 
	}
}

42 
mp_obj_t
 
	$mp_��_fun�i�_2_��e�ed
(
mp_obj_t
 
fun
, mp_obj_�
�g1
, mp_obj_�
�g2
) {

43 
�r_buf_t
 
�r
;

44 i�(
	`�r_push
(&
�r
) == 0) {

45 
mp_obj_t
 
�t
 = 
	`mp_��_fun�i�_2
(
fun
, 
�g1
, 
�g2
);

46 
	`�r_p�
();

47  
�t
;

49 
	`mp_obj_��t_ex��i�
(&
mp_��_��t
, 
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
));

50  
MP_OBJ_NULL
;

52 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scheduler.c

27 
	~<�dio.h
>

29 
	~"py/mph�.h
"

30 
	~"py/ru�ime.h
"

34 
	$MICROPY_WRAP_MP_SCHED_EXCEPTION
(
mp_sched_ex��i�
)(
mp_obj_t
 
exc
) {

35 
	`MP_STATE_MAIN_THREAD
(
mp_�nd�g_ex��i�
��
exc
;

37 #i�
MICROPY_ENABLE_SCHEDULER
 && !
MICROPY_PY_THREAD


41 i�(
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_IDLE
) {

42 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_PENDING
;

45 
	}
}

47 #i�
MICROPY_KBD_EXCEPTION


49 
	$MICROPY_WRAP_MP_SCHED_KEYBOARD_INTERRUPT
(
mp_sched_keyb�rd_���u�
)() {

50 
	`MP_STATE_VM
(
mp_kbd_ex��i�
).
�a�back_d�a
 = 
NULL
;

51 
	`mp_sched_ex��i�
(
	`MP_OBJ_FROM_PTR
(&
	`MP_STATE_VM
(
mp_kbd_ex��i�
)));

52 
	}
}

55 #i�
MICROPY_ENABLE_VM_ABORT


56 
	$MICROPY_WRAP_MP_SCHED_VM_ABORT
(
mp_sched_vm_ab�t
)() {

57 
	`MP_STATE_VM
(
vm_ab�t
��
�ue
;

58 
	}
}

61 #i�
MICROPY_ENABLE_SCHEDULER


63 
	#IDX_MASK
(
i
�((i�& (
MICROPY_SCHEDULER_DEPTH
 - 1))

	)

67 
	#mp_sched_fu�
(�(
	`mp_sched_num_�nd�g
(�=�
MICROPY_SCHEDULER_DEPTH
)

	)

69 
�l�e
 
bo�
 
	$mp_sched_em�y
() {

70 
	`MP_STATIC_ASSERT
(
MICROPY_SCHEDULER_DEPTH
 <= 255);

71 
	`MP_STATIC_ASSERT
((
	`IDX_MASK
(
MICROPY_SCHEDULER_DEPTH
) == 0));

73  
	`mp_sched_num_�nd�g
() == 0;

74 
	}
}

76 
�l�e
 
	$mp_sched_run_�nd�g
() {

77 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

78 i�(
	`MP_STATE_VM
(
sched_��e
�!�
MP_SCHED_PENDING
) {

81 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

87 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_LOCKED
;

89 #i�
MICROPY_SCHEDULER_STATIC_NODES


91 
	`MP_STATE_VM
(
sched_h�d
�!�
NULL
) {

92 
mp_sched_node_t
 *
node
 = 
	`MP_STATE_VM
(
sched_h�d
);

93 
	`MP_STATE_VM
(
sched_h�d
��
node
->
�xt
;

94 i�(
	`MP_STATE_VM
(
sched_h�d
�=�
NULL
) {

95 
	`MP_STATE_VM
(
sched_��
��
NULL
;

97 
mp_sched_��back_t
 
��back
 = 
node
->callback;

98 
node
->
��back
 = 
NULL
;

99 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

100 
	`��back
(
node
);

101 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

106 i�(!
	`mp_sched_em�y
()) {

107 
mp_sched_�em_t
 
�em
 = 
	`MP_STATE_VM
(
sched_queue
)[MP_STATE_VM(
sched_idx
)];

108 
	`MP_STATE_VM
(
sched_idx
��
	`IDX_MASK
(MP_STATE_VM(sched_idx) + 1);

109 --
	`MP_STATE_VM
(
sched_�n
);

110 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

111 
	`mp_��_fun�i�_1_��e�ed
(
�em
.
func
, i�m.
�g
);

113 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

118 
	`mp_sched_u�ock
();

119 
	}
}

124 
	$mp_sched_lock
() {

125 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

126 i�(
	`MP_STATE_VM
(
sched_��e
) < 0) {

128 --
	`MP_STATE_VM
(
sched_��e
);

131 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_LOCKED
;

133 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

134 
	}
}

136 
	$mp_sched_u�ock
() {

137 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

138 
	`as��
(
	`MP_STATE_VM
(
sched_��e
) < 0);

139 i�(++
	`MP_STATE_VM
(
sched_��e
) == 0) {

143 #i�!
MICROPY_PY_THREAD


145 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
�!�
MP_OBJ_NULL
 ||

147 #i�
MICROPY_SCHEDULER_STATIC_NODES


148 
	`MP_STATE_VM
(
sched_h�d
�!�
NULL
 ||

150 
	`mp_sched_num_�nd�g
()) {

151 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_PENDING
;

153 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_IDLE
;

156 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

157 
	}
}

159 
bo�
 
	$MICROPY_WRAP_MP_SCHED_SCHEDULE
(
mp_sched_schedu�
)(
mp_obj_t
 
fun�i�
, mp_obj_�
�g
) {

160 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

161 
bo�
 
�t
;

162 i�(!
	`mp_sched_fu�
()) {

163 i�(
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_IDLE
) {

164 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_PENDING
;

166 
u�t8_t
 
�ut
 = 
	`IDX_MASK
(
	`MP_STATE_VM
(
sched_idx
�+ MP_STATE_VM(
sched_�n
)++);

167 
	`MP_STATE_VM
(
sched_queue
)[
�ut
].
func
 = 
fun�i�
;

168 
	`MP_STATE_VM
(
sched_queue
)[
�ut
].
�g
 =�rg;

169 
MICROPY_SCHED_HOOK_SCHEDULED
;

170 
�t
 = 
�ue
;

173 
�t
 = 
�l�
;

175 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

176  
�t
;

177 
	}
}

179 #i�
MICROPY_SCHEDULER_STATIC_NODES


180 
bo�
 
	$mp_sched_schedu�_node
(
mp_sched_node_t
 *
node
, 
mp_sched_��back_t
 
��back
) {

181 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

182 
bo�
 
�t
;

183 i�(
node
->
��back
 =�
NULL
) {

184 i�(
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_IDLE
) {

185 
	`MP_STATE_VM
(
sched_��e
��
MP_SCHED_PENDING
;

187 
node
->
��back
 = callback;

188 
node
->
�xt
 = 
NULL
;

189 i�(
	`MP_STATE_VM
(
sched_��
�=�
NULL
) {

190 
	`MP_STATE_VM
(
sched_h�d
��
node
;

192 
	`MP_STATE_VM
(
sched_��
)->
�xt
 = 
node
;

194 
	`MP_STATE_VM
(
sched_��
��
node
;

195 
MICROPY_SCHED_HOOK_SCHEDULED
;

196 
�t
 = 
�ue
;

199 
�t
 = 
�l�
;

201 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

202  
�t
;

203 
	}
}

206 
MP_REGISTER_ROOT_POINTER
(
mp_sched_�em_t
 
sched_queue
[
MICROPY_SCHEDULER_DEPTH
]);

212 
	$mp_h�d�_�nd�g
(
bo�
 
�i�_exc
) {

214 #i�
MICROPY_ENABLE_VM_ABORT


215 i�(
	`MP_STATE_VM
(
vm_ab�t
�&& 
	`mp_th�ad_is_ma�_th�ad
()) {

216 
	`MP_STATE_VM
(
vm_ab�t
��
�l�
;

217 i�(
�i�_exc
 && 
	`�r_g�_ab�t
(�!�
NULL
) {

218 
	`�r_jump_ab�t
();

224 i�(
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
�!�
MP_OBJ_NULL
) {

225 
mp_u�t_t
 
�omic_��e
 = 
	`MICROPY_BEGIN_ATOMIC_SECTION
();

226 
mp_obj_t
 
obj
 = 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
);

227 i�(
obj
 !�
MP_OBJ_NULL
) {

228 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
��
MP_OBJ_NULL
;

229 i�(
�i�_exc
) {

230 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

231 
	`�r_�i�
(
obj
);

234 
	`MICROPY_END_ATOMIC_SECTION
(
�omic_��e
);

238 #i�
MICROPY_ENABLE_SCHEDULER


239 i�(
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_PENDING
) {

240 
	`mp_sched_run_�nd�g
();

243 
	}
}

246 
	$mp_ev�t_h�d�_nowa�
() {

247 #i�
	`def�ed
(
MICROPY_EVENT_POLL_HOOK_FAST
�&& !
MICROPY_PREVIEW_VERSION_2


249 
MICROPY_EVENT_POLL_HOOK_FAST


252 
MICROPY_INTERNAL_EVENT_HOOK
;

253 
	`mp_h�d�_�nd�g
(
�ue
);

255 
	}
}

259 
	$mp_ev�t_wa�_�def��e
() {

260 #i�
	`def�ed
(
MICROPY_EVENT_POLL_HOOK
�&& !
MICROPY_PREVIEW_VERSION_2


262 
MICROPY_EVENT_POLL_HOOK


264 
	`mp_ev�t_h�d�_nowa�
();

265 
	`MICROPY_INTERNAL_WFE
(-1);

267 
	}
}

271 
	$mp_ev�t_wa�_ms
(
mp_u�t_t
 
timeout_ms
) {

272 #i�
	`def�ed
(
MICROPY_EVENT_POLL_HOOK
�&& !
MICROPY_PREVIEW_VERSION_2


274 
MICROPY_EVENT_POLL_HOOK


276 
	`mp_ev�t_h�d�_nowa�
();

277 
	`MICROPY_INTERNAL_WFE
(
timeout_ms
);

279 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scope.c

27 
	~<as��.h
>

29 
	~"py/sc�e.h
"

31 #i�
MICROPY_ENABLE_COMPILER


36 cڡ 
u�t8_t
 
	gsc�e_sim�e_�me_�b�
[] = {

37 [
SCOPE_MODULE
] = 
MP_QSTR__�_modu�_gt_
,

38 [
SCOPE_LAMBDA
] = 
MP_QSTR__�_�mbda_gt_
,

39 [
SCOPE_LIST_COMP
] = 
MP_QSTR__�_li�comp_gt_
,

40 [
SCOPE_DICT_COMP
] = 
MP_QSTR__�_di�comp_gt_
,

41 [
SCOPE_SET_COMP
] = 
MP_QSTR__�_�tcomp_gt_
,

42 [
SCOPE_GEN_EXPR
] = 
MP_QSTR__�_g�ex�_gt_
,

45 
sc�e_t
 *
	$sc�e_�w
(
sc�e_k�d_t
 
k�d
, 
mp_�r�_node_t
 
�
, 
mp_u�t_t
 
em�_�ti�s
) {

47 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_modu�_gt_
 <�
UINT8_MAX
);

48 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_�mbda_gt_
 <�
UINT8_MAX
);

49 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_li�comp_gt_
 <�
UINT8_MAX
);

50 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_di�comp_gt_
 <�
UINT8_MAX
);

51 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_�tcomp_gt_
 <�
UINT8_MAX
);

52 
	`MP_STATIC_ASSERT
(
MP_QSTR__�_g�ex�_gt_
 <�
UINT8_MAX
);

54 
sc�e_t
 *
sc�e
 = 
	`m_�w0
(scope_t, 1);

55 
sc�e
->
k�d
 = kind;

56 
sc�e
->
�
 =�n;

57 i�(
k�d
 =�
SCOPE_FUNCTION
 || k�d =�
SCOPE_CLASS
) {

58 
	`as��
(
	`MP_PARSE_NODE_IS_STRUCT
(
�
));

59 
sc�e
->
sim�e_�me
 = 
	`MP_PARSE_NODE_LEAF_ARG
(((
mp_�r�_node_�ru�_t
 *)
�
)->
nodes
[0]);

61 
sc�e
->
sim�e_�me
 = 
sc�e_sim�e_�me_�b�
[
k�d
];

63 
sc�e
->
�w_code
 = 
	`mp_em�_glue_�w_�w_code
();

64 
sc�e
->
em�_�ti�s
 =�mit_options;

65 
sc�e
->
id_�fo_�loc
 = 
MICROPY_ALLOC_SCOPE_ID_INIT
;

66 
sc�e
->
id_�fo
 = 
	`m_�w
(
id_�fo_t
, sc�e->
id_�fo_�loc
);

68  
sc�e
;

69 
	}
}

71 
	$sc�e_�
(
sc�e_t
 *
sc�e
) {

72 
	`m_d�
(
id_�fo_t
, 
sc�e
->
id_�fo
, sc�e->
id_�fo_�loc
);

73 
	`m_d�
(
sc�e_t
, 
sc�e
, 1);

74 
	}
}

76 
id_�fo_t
 *
	$sc�e_f�d_�_add_id
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
, 
id_�fo_k�d_t
 
k�d
) {

77 
id_�fo_t
 *
id_�fo
 = 
	`sc�e_f�d
(
sc�e
, 
q�
);

78 i�(
id_�fo
 !�
NULL
) {

79  
id_�fo
;

83 i�(
sc�e
->
id_�fo_�n
 >�sc�e->
id_�fo_�loc
) {

84 
sc�e
->
id_�fo
 = 
	`m_��w
(
id_�fo_t
, sc�e->id_�fo, sc�e->
id_�fo_�loc
, sc�e->id_�fo_�lo�+ 
MICROPY_ALLOC_SCOPE_ID_INC
);

85 
sc�e
->
id_�fo_�loc
 +�
MICROPY_ALLOC_SCOPE_ID_INC
;

91 
id_�fo
 = &
sc�e
->id_�fo[sc�e->
id_�fo_�n
++];

93 
id_�fo
->
k�d
 = kind;

94 
id_�fo
->
�ags
 = 0;

95 
id_�fo
->
lo�l_num
 = 0;

96 
id_�fo
->
q�
 = qst;

97  
id_�fo
;

98 
	}
}

100 
id_�fo_t
 *
	$sc�e_f�d
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

101 
mp_u�t_t
 
i
 = 0; i < 
sc�e
->
id_�fo_�n
; i++) {

102 i�(
sc�e
->
id_�fo
[
i
].
q�
 == qst) {

103  &
sc�e
->
id_�fo
[
i
];

106  
NULL
;

107 
	}
}

109 
id_�fo_t
 *
	$sc�e_f�d_glob�
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

110 
sc�e
->
���
 !�
NULL
) {

111 
sc�e
 = sc�e->
���
;

113  
	`sc�e_f�d
(
sc�e
, 
q�
);

114 
	}
}

116 
	$sc�e_�o�_ov�_�_���s
(
sc�e_t
 *
sc�e
, 
q�r
 
q�
) {

117 
	`as��
(
sc�e
->
���
 !�
NULL
);

118 
sc�e_t
 *
s
 = 
sc�e
->
���
;; s = s->parent) {

119 
	`as��
(
s
->
���
 !�
NULL
);

120 
id_�fo_t
 *
id
 = 
	`sc�e_f�d_�_add_id
(
s
, 
q�
, 
ID_INFO_KIND_UNDECIDED
);

121 i�(
id
->
k�d
 =�
ID_INFO_KIND_UNDECIDED
) {

123 
id
->
k�d
 = 
ID_INFO_KIND_FREE
;

126 i�(
id
->
k�d
 =�
ID_INFO_KIND_LOCAL
) {

128 
id
->
k�d
 = 
ID_INFO_KIND_CELL
;

132 
	`as��
(
id
->
k�d
 =�
ID_INFO_KIND_FREE
 || id->k�d =�
ID_INFO_KIND_CELL
);

137 
	}
}

139 
	$sc�e_check_to_�o�_ov�
(
sc�e_t
 *
sc�e
, 
id_�fo_t
 *
id
) {

140 i�(
sc�e
->
���
 !�
NULL
) {

141 
sc�e_t
 *
s
 = 
sc�e
->
���
; s->��� !�
NULL
; s = s->parent) {

142 
id_�fo_t
 *
id2
 = 
	`sc�e_f�d
(
s
, 
id
->
q�
);

143 i�(
id2
 !�
NULL
) {

144 i�(
id2
->
k�d
 =�
ID_INFO_KIND_LOCAL
 || id2->k�d =�
ID_INFO_KIND_CELL
 || id2->k�d =�
ID_INFO_KIND_FREE
) {

145 
id
->
k�d
 = 
ID_INFO_KIND_FREE
;

146 
	`sc�e_�o�_ov�_�_���s
(
sc�e
, 
id
->
q�
);

152 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scope.h

26 #i�de�
MICROPY_INCLUDED_PY_SCOPE_H


27 
	#MICROPY_INCLUDED_PY_SCOPE_H


	)

29 
	~"py/�r�.h
"

30 
	~"py/em�glue.h
"

33 
	mID_INFO_KIND_UNDECIDED
,

34 
	mID_INFO_KIND_GLOBAL_IMPLICIT
,

35 
	mID_INFO_KIND_GLOBAL_IMPLICIT_ASSIGNED
,

36 
	mID_INFO_KIND_GLOBAL_EXPLICIT
,

37 
	mID_INFO_KIND_LOCAL
,

38 
	mID_INFO_KIND_CELL
,

39 
	mID_INFO_KIND_FREE
,

40 } 
	tid_�fo_k�d_t
;

43 
	mID_FLAG_IS_PARAM
 = 0x01,

44 
	mID_FLAG_IS_STAR_PARAM
 = 0x02,

45 
	mID_FLAG_IS_DBL_STAR_PARAM
 = 0x04,

46 
	mID_FLAG_VIPER_TYPE_POS
 = 4,

49 
	s_id_�fo_t
 {

50 
u�t8_t
 
	mk�d
;

51 
u�t8_t
 
	m�ags
;

54 
u�t16_t
 
	mlo�l_num
;

55 
q�r
 
	mq�
;

56 } 
	tid_�fo_t
;

58 
	#SCOPE_IS_FUNC_LIKE
(
s
�((s�>�
SCOPE_LAMBDA
)

	)

59 
	#SCOPE_IS_COMP_LIKE
(
s
�(
SCOPE_LIST_COMP
 <�(s�&& (s�<�
SCOPE_GEN_EXPR
)

	)

63 
	mSCOPE_MODULE
,

64 
	mSCOPE_CLASS
,

65 
	mSCOPE_LAMBDA
,

66 
	mSCOPE_LIST_COMP
,

67 
	mSCOPE_DICT_COMP
,

68 
	mSCOPE_SET_COMP
,

69 
	mSCOPE_GEN_EXPR
,

70 
	mSCOPE_FUNCTION
,

71 } 
	tsc�e_k�d_t
;

73 
	s_sc�e_t
 {

74 
sc�e_k�d_t
 
	mk�d
;

75 
_sc�e_t
 *
	m���
;

76 
_sc�e_t
 *
	m�xt
;

77 
mp_�r�_node_t
 
	m�
;

78 
mp_�w_code_t
 *
	m�w_code
;

79 #i�
MICROPY_DEBUG_PRINTERS


80 
size_t
 
	m�w_code_d�a_�n
;

82 
u�t16_t
 
	msim�e_�me
;

83 
u�t16_t
 
	msc�e_�ags
;

84 
u�t16_t
 
	mem�_�ti�s
;

85 
u�t16_t
 
	mnum_pos_�gs
;

86 
u�t16_t
 
	mnum_kw�ly_�gs
;

87 
u�t16_t
 
	mnum_def_pos_�gs
;

88 
u�t16_t
 
	mnum_lo�ls
;

89 
u�t16_t
 
	m�ack_size
;

90 
u�t16_t
 
	mexc_�ack_size
;

91 
u�t16_t
 
	mid_�fo_�loc
;

92 
u�t16_t
 
	mid_�fo_�n
;

93 
id_�fo_t
 *
	mid_�fo
;

94 } 
	tsc�e_t
;

96 
sc�e_t
 *
sc�e_�w
(
sc�e_k�d_t
 
k�d
, 
mp_�r�_node_t
 
�
, 
mp_u�t_t
 
em�_�ti�s
);

97 
sc�e_�
(
sc�e_t
 *
sc�e
);

98 
id_�fo_t
 *
sc�e_f�d_�_add_id
(
sc�e_t
 *
sc�e
, 
q�r
 q�r, 
id_�fo_k�d_t
 
k�d
);

99 
id_�fo_t
 *
sc�e_f�d
(
sc�e_t
 *
sc�e
, 
q�r
 qstr);

100 
id_�fo_t
 *
sc�e_f�d_glob�
(
sc�e_t
 *
sc�e
, 
q�r
 qstr);

101 
sc�e_check_to_�o�_ov�
(
sc�e_t
 *
sc�e
, 
id_�fo_t
 *
id
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\sequence.c

28 
	~<�r�g.h
>

30 
	~"py/ru�ime.h
"

34 
	#SWAP
(
ty�
, 
v�1
, 
v�2
�{�y� 
t
 = v�2; v�2 = v�1; v�1 =�; }

	)

38 
	$mp_�q_muɝly
(cڡ *
�ems
, 
size_t
 
�em_sz
, size_�
�n
, size_�
times
, *
de�
) {

39 
size_t
 
i
 = 0; i < 
times
; i++) {

40 
size_t
 
c�y_sz
 = 
�em_sz
 * 
�n
;

41 
	`mem�y
(
de�
, 
�ems
, 
c�y_sz
);

42 
de�
 = (*)de� + 
c�y_sz
;

44 
	}
}

46 #i�
MICROPY_PY_BUILTINS_SLICE


48 
bo�
 
	$mp_�q_g�_�_�i�_�dexes
(
mp_u�t_t
 
�n
, 
mp_obj_t
 
�i�
, 
mp_bound_�i�_t
 *
�dexes
) {

49 
	`mp_obj_�i�_�di�s
(
�i�
, 
�n
, 
�dexes
);

52 i�(
�dexes
->
��
 < 0) {

53 
�dexes
->
��
++;

57 i�(
�dexes
->
��
 > 0 && indexes->
��t
 > indexes->
��
) {

58 
�dexes
->
��
 = indexes->
��t
;

59 } i�(
�dexes
->
��
 < 0 && indexes->
��t
 < indexes->
��
) {

60 
�dexes
->
��
 = indexes->
��t
 + 1;

63  
�dexes
->
��
 == 1;

64 
	}
}

66 
mp_obj_t
 
	$mp_�q_ex�a�_�i�
(cڡ 
mp_obj_t
 *
�q
, 
mp_bound_�i�_t
 *
�dexes
) {

67 
mp_�t_t
 
��t
 = 
�dexes
->��t, 
��
 = indexes->stop;

68 
mp_�t_t
 
��
 = 
�dexes
->step;

70 
mp_obj_t
 
�s
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

72 i�(
��
 < 0) {

73 
��t
 >�
��
) {

74 
	`mp_obj_li�_��nd
(
�s
, 
�q
[
��t
]);

75 
��t
 +�
��
;

78 
��t
 < 
��
) {

79 
	`mp_obj_li�_��nd
(
�s
, 
�q
[
��t
]);

80 
��t
 +�
��
;

83  
�s
;

84 
	}
}

90 
bo�
 
	$mp_�q_cmp_by�s
(
mp_u�t_t
 
�
, cڡ 
by�
 *
d�a1
, 
size_t
 
�n1
, cڡ by� *
d�a2
, size_�
�n2
) {

91 i�(
�
 =�
MP_BINARY_OP_EQUAL
 && 
�n1
 !�
�n2
) {

92  
�l�
;

96 i�(
�
 =�
MP_BINARY_OP_LESS
 || o�=�
MP_BINARY_OP_LESS_EQUAL
) {

97 
	`SWAP
(cڡ 
by�
 *, 
d�a1
, 
d�a2
);

98 
	`SWAP
(
size_t
, 
�n1
, 
�n2
);

99 i�(
�
 =�
MP_BINARY_OP_LESS
) {

100 
�
 = 
MP_BINARY_OP_MORE
;

102 
�
 = 
MP_BINARY_OP_MORE_EQUAL
;

105 
size_t
 
m�_�n
 = 
�n1
 < 
�n2
 ?�en1 :�en2;

106 
�s
 = 
	`memcmp
(
d�a1
, 
d�a2
, 
m�_�n
);

107 i�(
�
 =�
MP_BINARY_OP_EQUAL
) {

109  
�s
 == 0;

111 i�(
�s
 < 0) {

112  
�l�
;

114 i�(
�s
 > 0) {

115  
�ue
;

120 i�(
�n1
 !�
�n2
) {

121 i�(
�n1
 < 
�n2
) {

123  
�l�
;

125 } i�(
�
 =�
MP_BINARY_OP_MORE
) {

127  
�l�
;

129  
�ue
;

130 
	}
}

134 
bo�
 
	$mp_�q_cmp_objs
(
mp_u�t_t
 
�
, cڡ 
mp_obj_t
 *
�ems1
, 
size_t
 
�n1
, cڡ mp_obj_�*
�ems2
, size_�
�n2
) {

135 i�(
�
 =�
MP_BINARY_OP_EQUAL
 && 
�n1
 !�
�n2
) {

136  
�l�
;

140 i�(
�
 =�
MP_BINARY_OP_LESS
 || o�=�
MP_BINARY_OP_LESS_EQUAL
) {

141 
	`SWAP
(cڡ 
mp_obj_t
 *, 
�ems1
, 
�ems2
);

142 
	`SWAP
(
size_t
, 
�n1
, 
�n2
);

143 i�(
�
 =�
MP_BINARY_OP_LESS
) {

144 
�
 = 
MP_BINARY_OP_MORE
;

146 
�
 = 
MP_BINARY_OP_MORE_EQUAL
;

150 
size_t
 
�n
 = 
�n1
 < 
�n2
 ?�en1 :�en2;

151 
size_t
 
i
 = 0; i < 
�n
; i++) {

153 i�(
	`mp_obj_equ�
(
�ems1
[
i
], 
�ems2
[i])) {

158 i�(
�
 =�
MP_BINARY_OP_EQUAL
) {

160  
�l�
;

164  
	`mp_b��y_�
(
�
, 
�ems1
[
i
], 
�ems2
[i]�=�
mp_cڡ_�ue
;

169 i�(
�n1
 !�
�n2
) {

170 i�(
�n1
 < 
�n2
) {

172  
�l�
;

174 } i�(
�
 =�
MP_BINARY_OP_MORE
) {

176  
�l�
;

179  
�ue
;

180 
	}
}

183 
mp_obj_t
 
	$mp_�q_�dex_obj
(cڡ 
mp_obj_t
 *
�ems
, 
size_t
 
�n
, size_�
n_�gs
, cڡ mp_obj_�*
�gs
) {

184 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�gs
[0]);

185 
mp_obj_t
 
v�ue
 = 
�gs
[1];

186 
size_t
 
��t
 = 0;

187 
size_t
 
��
 = 
�n
;

189 i�(
n_�gs
 >= 3) {

190 
��t
 = 
	`mp_g�_�dex
(
ty�
, 
�n
, 
�gs
[2], 
�ue
);

191 i�(
n_�gs
 >= 4) {

192 
��
 = 
	`mp_g�_�dex
(
ty�
, 
�n
, 
�gs
[3], 
�ue
);

196 
size_t
 
i
 = 
��t
; i < 
��
; i++) {

197 i�(
	`mp_obj_equ�
(
�ems
[
i
], 
v�ue
)) {

199  
	`MP_OBJ_NEW_SMALL_INT
(
i
);

203 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("object�ot in sequence"));

204 
	}
}

206 
mp_obj_t
 
	$mp_�q_cou�_obj
(cڡ 
mp_obj_t
 *
�ems
, 
size_t
 
�n
, mp_obj_�
v�ue
) {

207 
size_t
 
cou�
 = 0;

208 
size_t
 
i
 = 0; i < 
�n
; i++) {

209 i�(
	`mp_obj_equ�
(
�ems
[
i
], 
v�ue
)) {

210 
cou�
++;

215  
	`MP_OBJ_NEW_SMALL_INT
(
cou�
);

216 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\showbc.c

27 
	~<�dio.h
>

28 
	~<as��.h
>

30 
	~"py/bc0.h
"

31 
	~"py/em�glue.h
"

33 #i�
MICROPY_DEBUG_PRINTERS


35 
	#DECODE_UINT
 { \

36 
unum
 = 0; \

38 
unum
 = (unum << 7�+ (*
�
 & 0x7f); \

39 } (*
�
++ & 0x80) != 0); \

40 }

	)

42 
	#DECODE_ULABEL
 \

44 i�(
�
[0] & 0x80) { \

45 
unum
 = ((
�
[0] & 0x7f) | (ip[1] << 7)); \

46 
�
 += 2; \

48 
unum
 = 
�
[0]; \

49 
�
 += 1; \

51 } 0)

	)

53 
	#DECODE_SLABEL
 \

55 i�(
�
[0] & 0x80) { \

56 
unum
 = ((
�
[0] & 0x7f) | (ip[1] << 7)) - 0x4000; \

57 
�
 += 2; \

59 
unum
 = 
�
[0] - 0x40; \

60 
�
 += 1; \

62 } 0)

	)

64 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


66 
	#DECODE_QSTR
 \

67 
DECODE_UINT
; \

68 
q�
 = 
q�r_�b�
[
unum
]

	)

72 
	#DECODE_QSTR
 \

73 
DECODE_UINT
; \

74 
q�
 = 
unum
;

	)

78 
	#DECODE_PTR
 \

79 
DECODE_UINT
; \

80 
unum
 = (
mp_u�t_t
)(
u���_t
)
ch�d_�b�
[unum]

	)

82 
	#DECODE_OBJ
 \

83 
DECODE_UINT
; \

84 
unum
 = (
mp_u�t_t
)
obj_�b�
[unum]

	)

86 
	$mp_by�code_��t
(cڡ 
mp_��t_t
 *
��t
, cڡ 
mp_�w_code_t
 *
rc
, 
size_t
 
fun_d�a_�n
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
) {

87 cڡ 
by�
 *
�_��t
 = 
rc
->
fun_d�a
;

88 cڡ 
by�
 *
�
 = 
rc
->
fun_d�a
;

91 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

92 
	`MP_BC_PRELUDE_SIZE_DECODE
(
�
);

93 cڡ 
by�
 *
code_�fo
 = 
�
;

95 
q�r
 
block_�me
 = 
	`mp_decode_u�t
(&
code_�fo
);

96 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


97 
block_�me
 = 
cm
->
q�r_�b�
[block_name];

98 
q�r
 
sour�_f�e
 = 
cm
->
q�r_�b�
[0];

100 
q�r
 
sour�_f�e
 = 
cm
->source_file;

102 
	`mp_��tf
(
��t
, "File %s, code block '%s' (descriptor: %p, bytecode @%p %u bytes)\n",

103 
	`q�r_�r
(
sour�_f�e
), q�r_�r(
block_�me
), 
rc
, 
�_��t
, ()
fun_d�a_�n
);

106 
size_t
 
��ude_size
 = 
�
 - 
�_��t
 + 
n_�fo
 + 
n_��
;

107 
	`mp_��tf
(
��t
, "Raw bytecode (code_info_size=%u, bytecode_size=%u):\n",

108 ()
��ude_size
, ()(
fun_d�a_�n
 -�relude_size));

109 
size_t
 
i
 = 0; i < 
fun_d�a_�n
; i++) {

110 i�(
i
 > 0 && i % 16 == 0) {

111 
	`mp_��tf
(
��t
, "\n");

113 
	`mp_��tf
(
��t
, " %02x", 
�_��t
[
i
]);

115 
	`mp_��tf
(
��t
, "\n");

118 
	`mp_��tf
(
��t
, "arg�ames:");

119 
mp_u�t_t
 
i
 = 0; i < 
n_pos_�gs
 + 
n_kw�ly_�gs
; i++) {

120 
q�r
 
q�
 = 
	`mp_decode_u�t
(&
code_�fo
);

121 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


122 
q�
 = 
cm
->
q�r_�b�
[qst];

124 
	`mp_��tf
(
��t
, " %s", 
	`q�r_�r
(
q�
));

126 
	`mp_��tf
(
��t
, "\n");

128 
	`mp_��tf
(
��t
, "(N_STATE %u)\n", ()
n_��e
);

129 
	`mp_��tf
(
��t
, "(N_EXC_STACK %u)\n", ()
n_exc_�ack
);

132 
�
 +�
n_�fo
;

133 cڡ 
by�
 *
l�e_�fo_t�
 = 
�
;

136 
size_t
 
i
 = 0; i < 
n_��
; ++i) {

137 
u�t
 
lo�l_num
 = *
�
++;

138 
	`mp_��tf
(
��t
, "(INIT_CELL %u)\n", 
lo�l_num
);

143 
mp_�t_t
 
bc
 = 0;

144 
mp_u�t_t
 
sour�_l�e
 = 1;

145 
	`mp_��tf
(
��t
, " bc=" 
INT_FMT
 "��e=" 
UINT_FMT
 "\n", 
bc
, 
sour�_l�e
);

146 cڡ 
by�
 *
ci
 = 
code_�fo
; c�< 
l�e_�fo_t�
;) {

147 i�((
ci
[0] & 0x80) == 0) {

149 
bc
 +�
ci
[0] & 0x1f;

150 
sour�_l�e
 +�
ci
[0] >> 5;

151 
ci
 += 1;

154 
bc
 +�
ci
[0] & 0xf;

155 
sour�_l�e
 +�((
ci
[0] << 4) & 0x700) | ci[1];

156 
ci
 += 2;

158 
	`mp_��tf
(
��t
, " bc=" 
INT_FMT
 "��e=" 
UINT_FMT
 "\n", 
bc
, 
sour�_l�e
);

161 
	`mp_by�code_��t2
(
��t
, 
�
, 
fun_d�a_�n
 - 
��ude_size
, 
rc
->
ch�d�n
, 
cm
);

162 
	}
}

164 cڡ 
by�
 *
	$mp_by�code_��t_�r
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�_��t
, cڡ by� *
�
, 
mp_�w_code_t
 *cڡ *
ch�d_�b�
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
) {

165 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


166 cڡ 
q�r_sh�t_t
 *
q�r_�b�
 = 
cm
->qstr_table;

168 cڡ 
mp_obj_t
 *
obj_�b�
 = 
cm
->obj_table;

169 
mp_u�t_t
 
unum
;

170 
q�r
 
q�
;

172 *
�
++) {

173 
MP_BC_LOAD_CONST_FALSE
:

174 
	`mp_��tf
(
��t
, "LOAD_CONST_FALSE");

177 
MP_BC_LOAD_CONST_NONE
:

178 
	`mp_��tf
(
��t
, "LOAD_CONST_NONE");

181 
MP_BC_LOAD_CONST_TRUE
:

182 
	`mp_��tf
(
��t
, "LOAD_CONST_TRUE");

185 
MP_BC_LOAD_CONST_SMALL_INT
: {

186 
mp_�t_t
 
num
 = 0;

187 i�((
�
[0] & 0x40) != 0) {

189 
num
--;

192 
num
 = ((
mp_u�t_t
�um << 7�| (*
�
 & 0x7f);

193 } (*
�
++ & 0x80) != 0);

194 
	`mp_��tf
(
��t
, "LOAD_CONST_SMALL_INT " 
INT_FMT
, 
num
);

198 
MP_BC_LOAD_CONST_STRING
:

199 
DECODE_QSTR
;

200 
	`mp_��tf
(
��t
, "LOAD_CONST_STRING '%s'", 
	`q�r_�r
(
q�
));

203 
MP_BC_LOAD_CONST_OBJ
:

204 
DECODE_OBJ
;

205 
	`mp_��tf
(
��t
, "LOAD_CONST_OBJ %p=", 
	`MP_OBJ_TO_PTR
(
unum
));

206 
	`mp_obj_��t_h��r
(
��t
, (
mp_obj_t
)
unum
, 
PRINT_REPR
);

209 
MP_BC_LOAD_NULL
:

210 
	`mp_��tf
(
��t
, "LOAD_NULL");

213 
MP_BC_LOAD_FAST_N
:

214 
DECODE_UINT
;

215 
	`mp_��tf
(
��t
, "LOAD_FAST_N " 
UINT_FMT
, 
unum
);

218 
MP_BC_LOAD_DEREF
:

219 
DECODE_UINT
;

220 
	`mp_��tf
(
��t
, "LOAD_DEREF " 
UINT_FMT
, 
unum
);

223 
MP_BC_LOAD_NAME
:

224 
DECODE_QSTR
;

225 
	`mp_��tf
(
��t
, "LOAD_NAME %s", 
	`q�r_�r
(
q�
));

228 
MP_BC_LOAD_GLOBAL
:

229 
DECODE_QSTR
;

230 
	`mp_��tf
(
��t
, "LOAD_GLOBAL %s", 
	`q�r_�r
(
q�
));

233 
MP_BC_LOAD_ATTR
:

234 
DECODE_QSTR
;

235 
	`mp_��tf
(
��t
, "LOAD_ATTR %s", 
	`q�r_�r
(
q�
));

238 
MP_BC_LOAD_METHOD
:

239 
DECODE_QSTR
;

240 
	`mp_��tf
(
��t
, "LOAD_METHOD %s", 
	`q�r_�r
(
q�
));

243 
MP_BC_LOAD_SUPER_METHOD
:

244 
DECODE_QSTR
;

245 
	`mp_��tf
(
��t
, "LOAD_SUPER_METHOD %s", 
	`q�r_�r
(
q�
));

248 
MP_BC_LOAD_BUILD_CLASS
:

249 
	`mp_��tf
(
��t
, "LOAD_BUILD_CLASS");

252 
MP_BC_LOAD_SUBSCR
:

253 
	`mp_��tf
(
��t
, "LOAD_SUBSCR");

256 
MP_BC_STORE_FAST_N
:

257 
DECODE_UINT
;

258 
	`mp_��tf
(
��t
, "STORE_FAST_N " 
UINT_FMT
, 
unum
);

261 
MP_BC_STORE_DEREF
:

262 
DECODE_UINT
;

263 
	`mp_��tf
(
��t
, "STORE_DEREF " 
UINT_FMT
, 
unum
);

266 
MP_BC_STORE_NAME
:

267 
DECODE_QSTR
;

268 
	`mp_��tf
(
��t
, "STORE_NAME %s", 
	`q�r_�r
(
q�
));

271 
MP_BC_STORE_GLOBAL
:

272 
DECODE_QSTR
;

273 
	`mp_��tf
(
��t
, "STORE_GLOBAL %s", 
	`q�r_�r
(
q�
));

276 
MP_BC_STORE_ATTR
:

277 
DECODE_QSTR
;

278 
	`mp_��tf
(
��t
, "STORE_ATTR %s", 
	`q�r_�r
(
q�
));

281 
MP_BC_STORE_SUBSCR
:

282 
	`mp_��tf
(
��t
, "STORE_SUBSCR");

285 
MP_BC_DELETE_FAST
:

286 
DECODE_UINT
;

287 
	`mp_��tf
(
��t
, "DELETE_FAST " 
UINT_FMT
, 
unum
);

290 
MP_BC_DELETE_DEREF
:

291 
DECODE_UINT
;

292 
	`mp_��tf
(
��t
, "DELETE_DEREF " 
UINT_FMT
, 
unum
);

295 
MP_BC_DELETE_NAME
:

296 
DECODE_QSTR
;

297 
	`mp_��tf
(
��t
, "DELETE_NAME %s", 
	`q�r_�r
(
q�
));

300 
MP_BC_DELETE_GLOBAL
:

301 
DECODE_QSTR
;

302 
	`mp_��tf
(
��t
, "DELETE_GLOBAL %s", 
	`q�r_�r
(
q�
));

305 
MP_BC_DUP_TOP
:

306 
	`mp_��tf
(
��t
, "DUP_TOP");

309 
MP_BC_DUP_TOP_TWO
:

310 
	`mp_��tf
(
��t
, "DUP_TOP_TWO");

313 
MP_BC_POP_TOP
:

314 
	`mp_��tf
(
��t
, "POP_TOP");

317 
MP_BC_ROT_TWO
:

318 
	`mp_��tf
(
��t
, "ROT_TWO");

321 
MP_BC_ROT_THREE
:

322 
	`mp_��tf
(
��t
, "ROT_THREE");

325 
MP_BC_JUMP
:

326 
DECODE_SLABEL
;

327 
	`mp_��tf
(
��t
, "JUMP " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

330 
MP_BC_POP_JUMP_IF_TRUE
:

331 
DECODE_SLABEL
;

332 
	`mp_��tf
(
��t
, "POP_JUMP_IF_TRUE " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

335 
MP_BC_POP_JUMP_IF_FALSE
:

336 
DECODE_SLABEL
;

337 
	`mp_��tf
(
��t
, "POP_JUMP_IF_FALSE " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

340 
MP_BC_JUMP_IF_TRUE_OR_POP
:

341 
DECODE_ULABEL
;

342 
	`mp_��tf
(
��t
, "JUMP_IF_TRUE_OR_POP " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

345 
MP_BC_JUMP_IF_FALSE_OR_POP
:

346 
DECODE_ULABEL
;

347 
	`mp_��tf
(
��t
, "JUMP_IF_FALSE_OR_POP " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

350 
MP_BC_SETUP_WITH
:

351 
DECODE_ULABEL
;

352 
	`mp_��tf
(
��t
, "SETUP_WITH " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

355 
MP_BC_WITH_CLEANUP
:

356 
	`mp_��tf
(
��t
, "WITH_CLEANUP");

359 
MP_BC_UNWIND_JUMP
:

360 
DECODE_SLABEL
;

361 
	`mp_��tf
(
��t
, "UNWIND_JUMP " 
UINT_FMT
 " %d", (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
), *ip);

362 
�
 += 1;

365 
MP_BC_SETUP_EXCEPT
:

366 
DECODE_ULABEL
;

367 
	`mp_��tf
(
��t
, "SETUP_EXCEPT " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

370 
MP_BC_SETUP_FINALLY
:

371 
DECODE_ULABEL
;

372 
	`mp_��tf
(
��t
, "SETUP_FINALLY " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

375 
MP_BC_END_FINALLY
:

380 
	`mp_��tf
(
��t
, "END_FINALLY");

383 
MP_BC_GET_ITER
:

384 
	`mp_��tf
(
��t
, "GET_ITER");

387 
MP_BC_GET_ITER_STACK
:

388 
	`mp_��tf
(
��t
, "GET_ITER_STACK");

391 
MP_BC_FOR_ITER
:

392 
DECODE_ULABEL
;

393 
	`mp_��tf
(
��t
, "FOR_ITER " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

396 
MP_BC_POP_EXCEPT_JUMP
:

397 
DECODE_ULABEL
;

398 
	`mp_��tf
(
��t
, "POP_EXCEPT_JUMP " 
UINT_FMT
, (
mp_u�t_t
)(
�
 + 
unum
 - 
�_��t
));

401 
MP_BC_BUILD_TUPLE
:

402 
DECODE_UINT
;

403 
	`mp_��tf
(
��t
, "BUILD_TUPLE " 
UINT_FMT
, 
unum
);

406 
MP_BC_BUILD_LIST
:

407 
DECODE_UINT
;

408 
	`mp_��tf
(
��t
, "BUILD_LIST " 
UINT_FMT
, 
unum
);

411 
MP_BC_BUILD_MAP
:

412 
DECODE_UINT
;

413 
	`mp_��tf
(
��t
, "BUILD_MAP " 
UINT_FMT
, 
unum
);

416 
MP_BC_STORE_MAP
:

417 
	`mp_��tf
(
��t
, "STORE_MAP");

420 
MP_BC_BUILD_SET
:

421 
DECODE_UINT
;

422 
	`mp_��tf
(
��t
, "BUILD_SET " 
UINT_FMT
, 
unum
);

425 #i�
MICROPY_PY_BUILTINS_SLICE


426 
MP_BC_BUILD_SLICE
:

427 
DECODE_UINT
;

428 
	`mp_��tf
(
��t
, "BUILD_SLICE " 
UINT_FMT
, 
unum
);

432 
MP_BC_STORE_COMP
:

433 
DECODE_UINT
;

434 
	`mp_��tf
(
��t
, "STORE_COMP " 
UINT_FMT
, 
unum
);

437 
MP_BC_UNPACK_SEQUENCE
:

438 
DECODE_UINT
;

439 
	`mp_��tf
(
��t
, "UNPACK_SEQUENCE " 
UINT_FMT
, 
unum
);

442 
MP_BC_UNPACK_EX
:

443 
DECODE_UINT
;

444 
	`mp_��tf
(
��t
, "UNPACK_EX " 
UINT_FMT
, 
unum
);

447 
MP_BC_MAKE_FUNCTION
:

448 
DECODE_PTR
;

449 
	`mp_��tf
(
��t
, "MAKE_FUNCTION %p", (*)(
u���_t
)
unum
);

452 
MP_BC_MAKE_FUNCTION_DEFARGS
:

453 
DECODE_PTR
;

454 
	`mp_��tf
(
��t
, "MAKE_FUNCTION_DEFARGS %p", (*)(
u���_t
)
unum
);

457 
MP_BC_MAKE_CLOSURE
: {

458 
DECODE_PTR
;

459 
mp_u�t_t
 
n_�o�d_ov�
 = *
�
++;

460 
	`mp_��tf
(
��t
, "MAKE_CLOSURE %�" 
UINT_FMT
, (*)(
u���_t
)
unum
, 
n_�o�d_ov�
);

464 
MP_BC_MAKE_CLOSURE_DEFARGS
: {

465 
DECODE_PTR
;

466 
mp_u�t_t
 
n_�o�d_ov�
 = *
�
++;

467 
	`mp_��tf
(
��t
, "MAKE_CLOSURE_DEFARGS %�" 
UINT_FMT
, (*)(
u���_t
)
unum
, 
n_�o�d_ov�
);

471 
MP_BC_CALL_FUNCTION
:

472 
DECODE_UINT
;

473 
	`mp_��tf
(
��t
, "CALL_FUNCTION�=" 
UINT_FMT
 "�kw=" UINT_FMT, 
unum
 & 0xff, (unum >> 8) & 0xff);

476 
MP_BC_CALL_FUNCTION_VAR_KW
:

477 
DECODE_UINT
;

478 
	`mp_��tf
(
��t
, "CALL_FUNCTION_VAR_KW�=" 
UINT_FMT
 "�kw=" UINT_FMT, 
unum
 & 0xff, (unum >> 8) & 0xff);

481 
MP_BC_CALL_METHOD
:

482 
DECODE_UINT
;

483 
	`mp_��tf
(
��t
, "CALL_METHOD�=" 
UINT_FMT
 "�kw=" UINT_FMT, 
unum
 & 0xff, (unum >> 8) & 0xff);

486 
MP_BC_CALL_METHOD_VAR_KW
:

487 
DECODE_UINT
;

488 
	`mp_��tf
(
��t
, "CALL_METHOD_VAR_KW�=" 
UINT_FMT
 "�kw=" UINT_FMT, 
unum
 & 0xff, (unum >> 8) & 0xff);

491 
MP_BC_RETURN_VALUE
:

492 
	`mp_��tf
(
��t
, "RETURN_VALUE");

495 
MP_BC_RAISE_LAST
:

496 
	`mp_��tf
(
��t
, "RAISE_LAST");

499 
MP_BC_RAISE_OBJ
:

500 
	`mp_��tf
(
��t
, "RAISE_OBJ");

503 
MP_BC_RAISE_FROM
:

504 
	`mp_��tf
(
��t
, "RAISE_FROM");

507 
MP_BC_YIELD_VALUE
:

508 
	`mp_��tf
(
��t
, "YIELD_VALUE");

511 
MP_BC_YIELD_FROM
:

512 
	`mp_��tf
(
��t
, "YIELD_FROM");

515 
MP_BC_IMPORT_NAME
:

516 
DECODE_QSTR
;

517 
	`mp_��tf
(
��t
, "IMPORT_NAME '%s'", 
	`q�r_�r
(
q�
));

520 
MP_BC_IMPORT_FROM
:

521 
DECODE_QSTR
;

522 
	`mp_��tf
(
��t
, "IMPORT_FROM '%s'", 
	`q�r_�r
(
q�
));

525 
MP_BC_IMPORT_STAR
:

526 
	`mp_��tf
(
��t
, "IMPORT_STAR");

530 i�(
�
[-1] < 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 + 64) {

531 
	`mp_��tf
(
��t
, "LOAD_CONST_SMALL_INT " 
INT_FMT
, (
mp_�t_t
)
�
[-1] - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 - 16);

532 } i�(
�
[-1] < 
MP_BC_LOAD_FAST_MULTI
 + 16) {

533 
	`mp_��tf
(
��t
, "LOAD_FAST " 
UINT_FMT
, (
mp_u�t_t
)
�
[-1] - 
MP_BC_LOAD_FAST_MULTI
);

534 } i�(
�
[-1] < 
MP_BC_STORE_FAST_MULTI
 + 16) {

535 
	`mp_��tf
(
��t
, "STORE_FAST " 
UINT_FMT
, (
mp_u�t_t
)
�
[-1] - 
MP_BC_STORE_FAST_MULTI
);

536 } i�(
�
[-1] < 
MP_BC_UNARY_OP_MULTI
 + 
MP_UNARY_OP_NUM_BYTECODE
) {

537 
mp_u�t_t
 
�
 = 
�
[-1] - 
MP_BC_UNARY_OP_MULTI
;

538 
	`mp_��tf
(
��t
, "UNARY_OP " 
UINT_FMT
 " %s", 
�
, 
	`q�r_�r
(
mp_u�ry_�_m�hod_�me
[op]));

539 } i�(
�
[-1] < 
MP_BC_BINARY_OP_MULTI
 + 
MP_BINARY_OP_NUM_BYTECODE
) {

540 
mp_u�t_t
 
�
 = 
�
[-1] - 
MP_BC_BINARY_OP_MULTI
;

541 
	`mp_��tf
(
��t
, "BINARY_OP " 
UINT_FMT
 " %s", 
�
, 
	`q�r_�r
(
mp_b��y_�_m�hod_�me
[op]));

543 
	`mp_��tf
(
��t
, "cod�%p, by� cod�0x%02x�� im�em��d\n", 
�
 - 1, ip[-1]);

544 
	`as��
(0);

545  
�
;

550  
�
;

551 
	}
}

553 
	$mp_by�code_��t2
(cڡ 
mp_��t_t
 *
��t
, cڡ 
by�
 *
�
, 
size_t
 
�n
, 
mp_�w_code_t
 *cڡ *
ch�d_�b�
, cڡ 
mp_modu�_cڡ�ts_t
 *
cm
) {

554 cڡ 
by�
 *
�_��t
 = 
�
;

555 
�
 < 
�_��t
 + 
�n
) {

556 
	`mp_��tf
(
��t
, "%02u ", (
u�t
)(
�
 - 
�_��t
));

557 
�
 = 
	`mp_by�code_��t_�r
(
��t
, 
�_��t
, ip, 
ch�d_�b�
, 
cm
);

558 
	`mp_��tf
(
��t
, "\n");

560 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\smallint.c

27 
	~"py/sm�l�t.h
"

29 
bo�
 
	$mp_sm�l_�t_mul_ov��ow
(
mp_�t_t
 
x
, mp_�t_�
y
) {

31 i�(
x
 > 0) {

32 i�(
y
 > 0) {

33 i�(
x
 > (
MP_SMALL_INT_MAX
 / 
y
)) {

34  
�ue
;

37 i�(
y
 < (
MP_SMALL_INT_MIN
 / 
x
)) {

38  
�ue
;

42 i�(
y
 > 0) {

43 i�(
x
 < (
MP_SMALL_INT_MIN
 / 
y
)) {

44  
�ue
;

47 i�(
x
 !�0 && 
y
 < (
MP_SMALL_INT_MAX
 / x)) {

48  
�ue
;

52  
�l�
;

53 
	}
}

55 
mp_�t_t
 
	$mp_sm�l_�t_modulo
(
mp_�t_t
 
divid�d
, mp_�t_�
divis�
) {

57 
divid�d
 %�
divis�
;

58 i�((
divid�d
 < 0 && 
divis�
 > 0) || (dividend > 0 && divisor < 0)) {

59 
divid�d
 +�
divis�
;

61  
divid�d
;

62 
	}
}

64 
mp_�t_t
 
	$mp_sm�l_�t_�o�_divide
(
mp_�t_t
 
num
, mp_�t_�
d�om
) {

65 i�(
num
 >= 0) {

66 i�(
d�om
 < 0) {

67 
num
 +�-
d�om
 - 1;

70 i�(
d�om
 >= 0) {

71 
num
 +�-
d�om
 + 1;

74  
num
 / 
d�om
;

75 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\smallint.h

26 #i�de�
MICROPY_INCLUDED_PY_SMALLINT_H


27 
	#MICROPY_INCLUDED_PY_SMALLINT_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

34 #i�de�
MP_SMALL_INT_MIN


37 #i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_A
 || MICROPY_OBJ_REPR =�
MICROPY_OBJ_REPR_C


39 
	#MP_SMALL_INT_MIN
 ((
mp_�t_t
)(((mp_�t_t)
MP_OBJ_WORD_MSBIT_HIGH
�>> 1))

	)

40 
	#MP_SMALL_INT_FITS
(
n
�(((��^ ((
mp_u�t_t
)��<< 1)�& 
MP_OBJ_WORD_MSBIT_HIGH
�=�0)

	)

42 
	#MP_SMALL_INT_POSITIVE_MASK
 ~(
MP_OBJ_WORD_MSBIT_HIGH
 | (MP_OBJ_WORD_MSBIT_HIGH >> 1))

	)

44 #�i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_B


46 
	#MP_SMALL_INT_MIN
 ((
mp_�t_t
)(((mp_�t_t)
MP_OBJ_WORD_MSBIT_HIGH
�>> 2))

	)

47 
	#MP_SMALL_INT_FITS
(
n
�(((��& 
MP_SMALL_INT_MIN
�=�0�|| ((��& MP_SMALL_INT_MIN�=�MP_SMALL_INT_MIN))

	)

49 
	#MP_SMALL_INT_POSITIVE_MASK
 ~(
MP_OBJ_WORD_MSBIT_HIGH
 | (MP_OBJ_WORD_MSBIT_HIGH >> 1�| (MP_OBJ_WORD_MSBIT_HIGH >> 2))

	)

51 #�i�
MICROPY_OBJ_REPR
 =�
MICROPY_OBJ_REPR_D


53 
	#MP_SMALL_INT_MIN
 ((
mp_�t_t
)(((mp_�t_t)0xffff800000000000�>> 1))

	)

54 
	#MP_SMALL_INT_FITS
(
n
�(((��^ (��<< 1)�& 0xffff800000000000�=�0)

	)

56 
	#MP_SMALL_INT_POSITIVE_MASK
 ~(0xffff800000000000 | (0xffff800000000000 >> 1))

	)

62 
	#MP_SMALL_INT_MAX
 ((
mp_�t_t
)(~(
MP_SMALL_INT_MIN
)))

	)

66 
	#MP_IMAX_BITS
(
m
�((m�/ ((m�% 255 + 1�/ 255 % 255 * 8 + 7 - 86 / ((m�% 255 + 12))

	)

69 
	#MP_SMALL_INT_BITS
 (
	`MP_IMAX_BITS
(
MP_SMALL_INT_MAX
�+ 1)

	)

71 
bo�
 
mp_sm�l_�t_mul_ov��ow
(
mp_�t_t
 
x
, mp_�t_�
y
);

72 
mp_�t_t
 
mp_sm�l_�t_modulo
(mp_�t_�
divid�d
, mp_�t_�
divis�
);

73 
mp_�t_t
 
mp_sm�l_�t_�o�_divide
(mp_�t_�
num
, mp_�t_�
d�om
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stackctrl.c

29 
	~"py/ru�ime.h
"

31 #i�!
MICROPY_PREVIEW_VERSION_2


33 
	~"py/�ack��.h
"

35 
	$mp_�ack_��_��
() {

36 #i�
__GNUC__
 >= 13

37 #�agm�
GCC
 
d�gno�ic
 
push


38 #�agm�
GCC
 
d�gno�ic
 
ign�ed
 "-Wdangling-pointer"

40 vީ��
�ack_dummy
;

41 
	`MP_STATE_THREAD
(
�ack_t�
��(*)&
�ack_dummy
;

42 #i�
__GNUC__
 >= 13

43 #�agm�
GCC
 
d�gno�ic
 
p�


45 
	}
}

47 
	$mp_�ack_�t_t�
(*
t�
) {

48 
	`MP_STATE_THREAD
(
�ack_t�
��
t�
;

49 
	}
}

51 
mp_u�t_t
 
	$mp_�ack_u�ge
() {

53 vީ��
�ack_dummy
;

54  
	`MP_STATE_THREAD
(
�ack_t�
�- (*)&
�ack_dummy
;

55 
	}
}

57 #i�
MICROPY_STACK_CHECK


59 
	$mp_�ack_�t_lim�
(
mp_u�t_t
 
lim�
) {

60 
	`MP_STATE_THREAD
(
�ack_lim�
��
lim�
;

61 
	}
}

63 
	$mp_�ack_check
() {

64 i�(
	`mp_�ack_u�ge
(�>�
	`MP_STATE_THREAD
(
�ack_lim�
)) {

65 
	`mp_�i�_�cursi�_d�th
();

67 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stackctrl.h

26 #i�de�
MICROPY_INCLUDED_PY_STACKCTRL_H


27 
	#MICROPY_INCLUDED_PY_STACKCTRL_H


	)

31 
	~"py/mpc�fig.h
"

33 #i�!
MICROPY_PREVIEW_VERSION_2


35 
mp_�ack_��_��
();

36 
mp_�ack_�t_t�
(*
t�
);

37 
mp_u�t_t
 
mp_�ack_u�ge
();

39 #i�
MICROPY_STACK_CHECK


41 
mp_�ack_�t_lim�
(
mp_u�t_t
 
lim�
);

42 
mp_�ack_check
();

43 
	#MP_STACK_CHECK
(�
	`mp_�ack_check
()

	)

47 
	#mp_�ack_�t_lim�
(
lim�
�()�im�)

	)

48 
	#MP_STACK_CHECK
()

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stream.c

28 
	~<�r�g.h
>

29 
	~<uni�d.h
>

31 
	~"py/obj�r.h
"

32 
	~"py/��am.h
"

33 
	~"py/ru�ime.h
"

39 
	#DEFAULT_BUFFER_SIZE
 256

	)

41 
mp_obj_t
 
��am_�ad�l
(mp_obj_�
�lf_�
);

46 
mp_u�t_t
 
	$mp_��am_rw
(
mp_obj_t
 
��am
, *
buf_
, 
mp_u�t_t
 
size
, *
�rcode
, 
by�
 
�ags
) {

47 
by�
 *
buf
 = 
buf_
;

48 
	`mp_u�t_t
 (*
	tio_func_t
)(
	tmp_obj_t
 
	tobj
, *
	tbuf
, 
	tmp_u�t_t
 
	tsize
, *
	t�rcode
);

49 
io_func_t
 
io_func
;

50 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
��am
);

51 i�(
�ags
 & 
MP_STREAM_RW_WRITE
) {

52 
io_func
 = (
io_func_t
)
��am_p
->
wr�e
;

54 
io_func
 = 
��am_p
->
�ad
;

57 *
�rcode
 = 0;

58 
mp_u�t_t
 
d�e
 = 0;

59 
size
 > 0) {

60 
mp_u�t_t
 
out_sz
 = 
	`io_func
(
��am
, 
buf
, 
size
, 
�rcode
);

64 i�(
out_sz
 == 0) {

65  
d�e
;

67 i�(
out_sz
 =�
MP_STREAM_ERROR
) {

69 i�(
	`mp_is_n�block�g_�r�
(*
�rcode
�&& 
d�e
 != 0) {

70 *
�rcode
 = 0;

72  
d�e
;

74 i�(
�ags
 & 
MP_STREAM_RW_ONCE
) {

75  
out_sz
;

78 
buf
 +�
out_sz
;

79 
size
 -�
out_sz
;

80 
d�e
 +�
out_sz
;

82  
d�e
;

83 
	}
}

85 
mp_off_t
 
	$mp_��am_�ek
(
mp_obj_t
 
��am
, 
mp_off_t
 
off�t
, 
wh��
, *
�rcode
) {

86 
mp_��am_�ek_t
 
�ek_s
;

87 
�ek_s
.
off�t
 = offset;

88 
�ek_s
.
wh��
 = whence;

89 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
��am
);

90 
mp_u�t_t
 
�s
 = 
��am_p
->
	`io�l
(
	`MP_OBJ_FROM_PTR
(
��am
), 
MP_STREAM_SEEK
, (mp_u�t_t)(
u���_t
)&
�ek_s
, 
�rcode
);

91 i�(
�s
 =�
MP_STREAM_ERROR
) {

92  (
mp_off_t
)-1;

94  
�ek_s
.
off�t
;

95 
	}
}

97 cڡ 
mp_��am_p_t
 *
	$mp_g�_��am_�i�
(
mp_obj_t
 
�lf_�
, 
�ags
) {

98 cڡ 
mp_obj_ty�_t
 *
ty�
 = 
	`mp_obj_g�_ty�
(
�lf_�
);

99 i�(
	`MP_OBJ_TYPE_HAS_SLOT
(
ty�
, 
��oc�
)) {

100 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
ty�
, 
��oc�
);

101 i�(!((
�ags
 & 
MP_STREAM_OP_READ
�&& 
��am_p
->
�ad
 =�
NULL
)

102 && !((
�ags
 & 
MP_STREAM_OP_WRITE
�&& 
��am_p
->
wr�e
 =�
NULL
)

103 && !((
�ags
 & 
MP_STREAM_OP_IOCTL
�&& 
��am_p
->
io�l
 =�
NULL
)) {

104  
��am_p
;

108 
	`mp_�i�_msg
(&
mp_ty�_OSE��
, 
	`MP_ERROR_TEXT
("stream operation�ot supported"));

109 
	}
}

111 
mp_obj_t
 
	$��am_�ad_g��ic
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
, 
by�
 
�ags
) {

115 
mp_�t_t
 
sz
;

116 i�(
n_�gs
 =�1 || ((
sz
 = 
	`mp_obj_g�_�t
(
�gs
[1])) == -1)) {

117  
	`��am_�ad�l
(
�gs
[0]);

120 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
�gs
[0]);

122 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


123 i�(
��am_p
->
is_�xt
) {

133 
v�r_t
 
v�r
;

134 
	`v�r_��
(&
v�r
, 
sz
);

135 
mp_u�t_t
 
m�e_by�s
 = 
sz
;

136 
mp_u�t_t
 
ϡ_buf_off�t
 = 0;

137 
m�e_by�s
 > 0) {

138 *
p
 = 
	`v�r_add_�n
(&
v�r
, 
m�e_by�s
);

139 
�r�
;

140 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_�ad_exa�ly
(
�gs
[0], 
p
, 
m�e_by�s
, &
�r�
);

141 i�(
�r�
 != 0) {

142 
	`v�r_cut_��_by�s
(&
v�r
, 
m�e_by�s
);

143 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

148 i�(
v�r
.
�n
 == 0) {

149 
	`v�r_��r
(&
v�r
);

150  
mp_cڡ_n�e
;

154 
	`mp_�i�_OSE��
(
�r�
);

157 i�(
out_sz
 < 
m�e_by�s
) {

160 
	`v�r_cut_��_by�s
(&
v�r
, 
m�e_by�s
 - 
out_sz
);

161 i�(
out_sz
 == 0) {

167 
mp_u�t_t
 
off
 = 
ϡ_buf_off�t
;;) {

168 
by�
 
b
 = 
v�r
.
buf
[
off
];

169 
n
;

170 i�(!
	`UTF8_IS_NONASCII
(
b
)) {

172 
n
 = 1;

173 } i�((
b
 & 0xe0) == 0xc0) {

175 
n
 = 2;

176 } i�((
b
 & 0xf0) == 0xe0) {

178 
n
 = 3;

179 } i�((
b
 & 0xf8) == 0xf0) {

181 
n
 = 4;

184 
n
 = 5;

186 i�(
off
 + 
n
 <�
v�r
.
�n
) {

188 
off
 +�
n
;

189 
sz
 -= 1;

190 
ϡ_buf_off�t
 = 
off
;

191 i�(
off
 >�
v�r
.
�n
) {

192 
m�e_by�s
 = 
sz
;

198 
m�e_by�s
 = (
off
 + 
n
 - 
v�r
.
�n
�+ (
sz
 - 1);

204  
	`mp_obj_�w_�r_�om_v�r
(&
v�r
);

208 
v�r_t
 
v�r
;

209 
	`v�r_��_�n
(&
v�r
, 
sz
);

210 
�r�
;

211 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_rw
(
�gs
[0], 
v�r
.
buf
, 
sz
, &
�r�
, 
�ags
);

212 i�(
�r�
 != 0) {

213 
	`v�r_��r
(&
v�r
);

214 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

220  
mp_cڡ_n�e
;

222 
	`mp_�i�_OSE��
(
�r�
);

224 
v�r
.
�n
 = 
out_sz
;

225 i�(
��am_p
->
is_�xt
) {

226  
	`mp_obj_�w_�r_�om_v�r
(&
v�r
);

228  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

231 
	}
}

233 
mp_obj_t
 
	$��am_�ad
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

234  
	`��am_�ad_g��ic
(
n_�gs
, 
�gs
, 
MP_STREAM_RW_READ
);

235 
	}
}

236 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad_obj
, 1, 2, 
��am_�ad
);

238 
mp_obj_t
 
	$��am_�ad1
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

239  
	`��am_�ad_g��ic
(
n_�gs
, 
�gs
, 
MP_STREAM_RW_READ
 | 
MP_STREAM_RW_ONCE
);

240 
	}
}

241 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad1_obj
, 1, 2, 
��am_�ad1
);

243 
mp_obj_t
 
	$mp_��am_wr�e
(
mp_obj_t
 
�lf_�
, cڡ *
buf
, 
size_t
 
�n
, 
by�
 
�ags
) {

244 
�r�
;

245 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_rw
(
�lf_�
, (*)
buf
, 
�n
, &
�r�
, 
�ags
);

246 i�(
�r�
 != 0) {

247 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

251  
mp_cڡ_n�e
;

253 
	`mp_�i�_OSE��
(
�r�
);

255  
	`MP_OBJ_NEW_SMALL_INT
(
out_sz
);

257 
	}
}

260 
	$mp_��am_wr�e_ad�t�
(*
�lf
, cڡ *
buf
, 
size_t
 
�n
) {

261 
	`mp_��am_wr�e
(
	`MP_OBJ_FROM_PTR
(
�lf
), 
buf
, 
�n
, 
MP_STREAM_RW_WRITE
);

262 
	}
}

264 
mp_obj_t
 
	$��am_wr�e_m�hod
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

265 
mp_buf�r_�fo_t
 
buf�fo
;

266 
	`mp_g�_buf�r_�i�
(
�gs
[1], &
buf�fo
, 
MP_BUFFER_READ
);

267 
size_t
 
max_�n
 = (size_t)-1;

268 
size_t
 
off
 = 0;

269 i�(
n_�gs
 == 3) {

270 
max_�n
 = 
	`mp_obj_g�_�t_�un��d
(
�gs
[2]);

271 } i�(
n_�gs
 == 4) {

272 
off
 = 
	`mp_obj_g�_�t_�un��d
(
�gs
[2]);

273 
max_�n
 = 
	`mp_obj_g�_�t_�un��d
(
�gs
[3]);

274 i�(
off
 > 
buf�fo
.
�n
) {

275 
off
 = 
buf�fo
.
�n
;

278 
buf�fo
.
�n
 -�
off
;

279  
	`mp_��am_wr�e
(
�gs
[0], (
by�
 *)
buf�fo
.
buf
 + 
off
, 
	`MIN
(buf�fo.
�n
, 
max_�n
), 
MP_STREAM_RW_WRITE
);

280 
	}
}

281 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_wr�e_obj
, 2, 4, 
��am_wr�e_m�hod
);

283 
mp_obj_t
 
	$��am_wr�e1_m�hod
(
mp_obj_t
 
�lf_�
, mp_obj_�
�g
) {

284 
mp_buf�r_�fo_t
 
buf�fo
;

285 
	`mp_g�_buf�r_�i�
(
�g
, &
buf�fo
, 
MP_BUFFER_READ
);

286  
	`mp_��am_wr�e
(
�lf_�
, 
buf�fo
.
buf
, buf�fo.
�n
, 
MP_STREAM_RW_WRITE
 | 
MP_STREAM_RW_ONCE
);

287 
	}
}

288 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_��am_wr�e1_obj
, 
��am_wr�e1_m�hod
);

290 
mp_obj_t
 
	$��am_�ad�to
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

291 
mp_buf�r_�fo_t
 
buf�fo
;

292 
	`mp_g�_buf�r_�i�
(
�gs
[1], &
buf�fo
, 
MP_BUFFER_WRITE
);

297 
mp_u�t_t
 
�n
 = 
buf�fo
.len;

298 i�(
n_�gs
 > 2) {

299 
�n
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

300 i�(
�n
 > 
buf�fo
.len) {

301 
�n
 = 
buf�fo
.len;

305 
�r�
;

306 
mp_u�t_t
 
out_sz
 = 
	`mp_��am_�ad_exa�ly
(
�gs
[0], 
buf�fo
.
buf
, 
�n
, &
�r�
);

307 i�(
�r�
 != 0) {

308 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

309  
mp_cڡ_n�e
;

311 
	`mp_�i�_OSE��
(
�r�
);

313  
	`MP_OBJ_NEW_SMALL_INT
(
out_sz
);

315 
	}
}

316 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad�to_obj
, 2, 3, 
��am_�ad�to
);

318 
mp_obj_t
 
	$��am_�ad�l
(
mp_obj_t
 
�lf_�
) {

319 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
�lf_�
);

321 
mp_u�t_t
 
tٮ_size
 = 0;

322 
v�r_t
 
v�r
;

323 
	`v�r_��
(&
v�r
, 
DEFAULT_BUFFER_SIZE
);

324 *
p
 = 
v�r
.
buf
;

325 
mp_u�t_t
 
cu��t_�ad
 = 
DEFAULT_BUFFER_SIZE
;

326 
�ue
) {

327 
�r�
;

328 
mp_u�t_t
 
out_sz
 = 
��am_p
->
	`�ad
(
�lf_�
, 
p
, 
cu��t_�ad
, &
�r�
);

329 i�(
out_sz
 =�
MP_STREAM_ERROR
) {

330 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

334 i�(
tٮ_size
 == 0) {

335  
mp_cڡ_n�e
;

339 
	`mp_�i�_OSE��
(
�r�
);

341 i�(
out_sz
 == 0) {

344 
tٮ_size
 +�
out_sz
;

345 i�(
out_sz
 < 
cu��t_�ad
) {

346 
cu��t_�ad
 -�
out_sz
;

347 
p
 +�
out_sz
;

349 
p
 = 
	`v�r_ex�nd
(&
v�r
, 
DEFAULT_BUFFER_SIZE
);

350 
cu��t_�ad
 = 
DEFAULT_BUFFER_SIZE
;

354 
v�r
.
�n
 = 
tٮ_size
;

355 i�(
��am_p
->
is_�xt
) {

356  
	`mp_obj_�w_�r_�om_v�r
(&
v�r
);

358  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

360 
	}
}

363 
mp_obj_t
 
	$��am_unbuf�d_�adl�e
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

364 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
�gs
[0]);

366 
mp_�t_t
 
max_size
 = -1;

367 i�(
n_�gs
 > 1) {

368 
max_size
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
�gs
[1]);

371 
v�r_t
 
v�r
;

372 i�(
max_size
 != -1) {

373 
	`v�r_��
(&
v�r
, 
max_size
);

375 
	`v�r_��
(&
v�r
, 16);

378 
max_size
 == -1 || max_size-- != 0) {

379 *
p
 = 
	`v�r_add_�n
(&
v�r
, 1);

380 
�r�
;

381 
mp_u�t_t
 
out_sz
 = 
��am_p
->
	`�ad
(
�gs
[0], 
p
, 1, &
�r�
);

382 i�(
out_sz
 =�
MP_STREAM_ERROR
) {

383 i�(
	`mp_is_n�block�g_�r�
(
�r�
)) {

384 i�(
v�r
.
�n
 == 1) {

391 
	`v�r_��r
(&
v�r
);

392  
mp_cڡ_n�e
;

394 
d�e
;

397 
	`mp_�i�_OSE��
(
�r�
);

399 i�(
out_sz
 == 0) {

400 
d�e
:

404 
	`v�r_cut_��_by�s
(&
v�r
, 1);

407 i�(*
p
 == '\n') {

412 i�(
��am_p
->
is_�xt
) {

413  
	`mp_obj_�w_�r_�om_v�r
(&
v�r
);

415  
	`mp_obj_�w_by�s_�om_v�r
(&
v�r
);

417 
	}
}

418 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_unbuf�d_�adl�e_obj
, 1, 2, 
��am_unbuf�d_�adl�e
);

421 
mp_obj_t
 
	$��am_unbuf�d_�adl�es
(
mp_obj_t
 
�lf
) {

422 
mp_obj_t
 
l�es
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

424 
mp_obj_t
 
l�e
 = 
	`��am_unbuf�d_�adl�e
(1, &
�lf
);

425 i�(!
	`mp_obj_is_�ue
(
l�e
)) {

428 
	`mp_obj_li�_��nd
(
l�es
, 
l�e
);

430  
l�es
;

431 
	}
}

432 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_��am_unbuf�d_�adl�es_obj
, 
��am_unbuf�d_�adl�es
);

434 
mp_obj_t
 
	$mp_��am_unbuf�d_��
(
mp_obj_t
 
�lf
) {

435 
mp_obj_t
 
l_�
 = 
	`��am_unbuf�d_�adl�e
(1, &
�lf
);

436 i�(
	`mp_obj_is_�ue
(
l_�
)) {

437  
l_�
;

439  
MP_OBJ_STOP_ITERATION
;

440 
	}
}

442 
mp_obj_t
 
	$mp_��am_�o�
(
mp_obj_t
 
��am
) {

443 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
��am
);

444 
�r�
;

445 
mp_u�t_t
 
�s
 = 
��am_p
->
	`io�l
(
��am
, 
MP_STREAM_CLOSE
, 0, &
�r�
);

446 i�(
�s
 =�
MP_STREAM_ERROR
) {

447 
	`mp_�i�_OSE��
(
�r�
);

449  
mp_cڡ_n�e
;

450 
	}
}

451 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_��am_�o�_obj
, 
mp_��am_�o�
);

453 
mp_obj_t
 
	$mp_��am___ex�__
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

454 ()
n_�gs
;

455  
	`mp_��am_�o�
(
�gs
[0]);

456 
	}
}

457 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am___ex�___obj
, 4, 4, 
mp_��am___ex�__
);

459 
mp_obj_t
 
	$��am_�ek
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

461 
mp_off_t
 
off�t
 = 
	`mp_obj_g�_�t
(
�gs
[1]);

462 
wh��
 = 
SEEK_SET
;

463 i�(
n_�gs
 == 3) {

464 
wh��
 = 
	`mp_obj_g�_�t
(
�gs
[2]);

468 i�(
wh��
 =�
SEEK_SET
 && 
off�t
 < 0) {

469 
	`mp_�i�_OSE��
(
MP_EINVAL
);

472 
�r�
;

473 
mp_off_t
 
�s
 = 
	`mp_��am_�ek
(
�gs
[0], 
off�t
, 
wh��
, &
�r�
);

474 i�(
�s
 =�(
mp_off_t
)-1) {

475 
	`mp_�i�_OSE��
(
�r�
);

479  
	`mp_obj_�w_�t_�om_u�t
(
�s
);

480 
	}
}

481 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ek_obj
, 2, 3, 
��am_�ek
);

483 
mp_obj_t
 
	$��am_��
(
mp_obj_t
 
�lf
) {

484 
mp_obj_t
 
off�t
 = 
	`MP_OBJ_NEW_SMALL_INT
(0);

485 
mp_obj_t
 
wh��
 = 
	`MP_OBJ_NEW_SMALL_INT
(
SEEK_CUR
);

486 cڡ 
mp_obj_t
 
�gs
[3] = {
�lf
, 
off�t
, 
wh��
};

487  
	`��am_�ek
(3, 
�gs
);

488 
	}
}

489 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_��am_��_obj
, 
��am_��
);

491 
mp_obj_t
 
	$��am_�ush
(
mp_obj_t
 
�lf
) {

492 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
�lf
);

493 
�r�
;

494 
mp_u�t_t
 
�s
 = 
��am_p
->
	`io�l
(
�lf
, 
MP_STREAM_FLUSH
, 0, &
�r�
);

495 i�(
�s
 =�
MP_STREAM_ERROR
) {

496 
	`mp_�i�_OSE��
(
�r�
);

498  
mp_cڡ_n�e
;

499 
	}
}

500 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_��am_�ush_obj
, 
��am_�ush
);

502 
mp_obj_t
 
	$��am_io�l
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
�gs
) {

503 
mp_buf�r_�fo_t
 
buf�fo
;

504 
u���_t
 
v�
 = 0;

505 i�(
n_�gs
 > 2) {

506 i�(
	`mp_g�_buf�r
(
�gs
[2], &
buf�fo
, 
MP_BUFFER_WRITE
)) {

507 
v�
 = (
u���_t
)
buf�fo
.
buf
;

509 
v�
 = 
	`mp_obj_g�_�t_�un��d
(
�gs
[2]);

513 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`mp_g�_��am
(
�gs
[0]);

514 
�r�
;

515 
mp_u�t_t
 
�s
 = 
��am_p
->
	`io�l
(
�gs
[0], 
	`mp_obj_g�_�t
�rgs[1]), 
v�
, &
�r�
);

516 i�(
�s
 =�
MP_STREAM_ERROR
) {

517 
	`mp_�i�_OSE��
(
�r�
);

520  
	`mp_obj_�w_�t
(
�s
);

521 
	}
}

522 
MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_io�l_obj
, 2, 3, 
��am_io�l
);

524 #i�
MICROPY_STREAMS_POSIX_API


533 
	~<��o.h
>

535 
ssize_t
 
	$mp_��am_posix_wr�e
(*
��am
, cڡ *
buf
, 
size_t
 
�n
) {

536 
mp_obj_ba�_t
 *
o
 = 
��am
;

537 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
o
->
ty�
, 
��oc�
);

538 
mp_u�t_t
 
out_sz
 = 
��am_p
->
	`wr�e
(
	`MP_OBJ_FROM_PTR
(
��am
), 
buf
, 
�n
, &
��o
);

539 i�(
out_sz
 =�
MP_STREAM_ERROR
) {

542  
out_sz
;

544 
	}
}

546 
ssize_t
 
	$mp_��am_posix_�ad
(*
��am
, *
buf
, 
size_t
 
�n
) {

547 
mp_obj_ba�_t
 *
o
 = 
��am
;

548 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
o
->
ty�
, 
��oc�
);

549 
mp_u�t_t
 
out_sz
 = 
��am_p
->
	`�ad
(
	`MP_OBJ_FROM_PTR
(
��am
), 
buf
, 
�n
, &
��o
);

550 i�(
out_sz
 =�
MP_STREAM_ERROR
) {

553  
out_sz
;

555 
	}
}

557 
off_t
 
	$mp_��am_posix_l�ek
(*
��am
, 
off_t
 
off�t
, 
wh��
) {

558 
mp_off_t
 
�s
 = 
	`mp_��am_�ek
(
	`MP_OBJ_FROM_PTR
(
��am
), 
off�t
, 
wh��
, &
��o
);

559 i�(
�s
 =�(
mp_off_t
)-1) {

562  
�s
;

563 
	}
}

565 
	$mp_��am_posix_fsync
(*
��am
) {

566 
mp_obj_ba�_t
 *
o
 = 
��am
;

567 cڡ 
mp_��am_p_t
 *
��am_p
 = 
	`MP_OBJ_TYPE_GET_SLOT
(
o
->
ty�
, 
��oc�
);

568 
mp_u�t_t
 
�s
 = 
��am_p
->
	`io�l
(
	`MP_OBJ_FROM_PTR
(
��am
), 
MP_STREAM_FLUSH
, 0, &
��o
);

569 i�(
�s
 =�
MP_STREAM_ERROR
) {

572  
�s
;

573 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stream.h

27 #i�de�
MICROPY_INCLUDED_PY_STREAM_H


28 
	#MICROPY_INCLUDED_PY_STREAM_H


	)

30 
	~"py/obj.h
"

31 
	~"py/m��no.h
"

33 
	#MP_STREAM_ERROR
 ((
mp_u�t_t
)-1)

	)

36 
	#MP_STREAM_FLUSH
 (1)

	)

37 
	#MP_STREAM_SEEK
 (2)

	)

38 
	#MP_STREAM_POLL
 (3)

	)

39 
	#MP_STREAM_CLOSE
 (4)

	)

40 
	#MP_STREAM_TIMEOUT
 (5)

41 
	#MP_STREAM_GET_OPTS
 (6)

42 
	#MP_STREAM_SET_OPTS
 (7)

43 
	#MP_STREAM_GET_DATA_OPTS
 (8)

44 
	#MP_STREAM_SET_DATA_OPTS
 (9)

45 
	#MP_STREAM_GET_FILENO
 (10)

46 
	#MP_STREAM_GET_BUFFER_SIZE
 (11)

47 

	)

49 
	#MP_STREAM_POLL_RD
 (0x0001)

	)

50 
	#MP_STREAM_POLL_WR
 (0x0004)

	)

51 
	#MP_STREAM_POLL_ERR
 (0x0008)

	)

52 
	#MP_STREAM_POLL_HUP
 (0x0010)

	)

53 
	#MP_STREAM_POLL_NVAL
 (0x0020)

	)

56 
	smp_��am_�ek_t
 {

60 
mp_off_t
 
	moff�t
;

61 
	mwh��
;

65 
	#MP_SEEK_SET
 (0)

	)

66 
	#MP_SEEK_CUR
 (1)

	)

67 
	#MP_SEEK_END
 (2)

	)

70 
	s_mp_��am_p_t
 {

73 
mp_u�t_t
 (*
�ad
)(
mp_obj_t
 
	mobj
, *
	mbuf
, mp_u�t_�
	msize
, *
	m�rcode
);

74 
mp_u�t_t
 (*
wr�e
)(
mp_obj_t
 
	mobj
, cڡ *
	mbuf
, mp_u�t_�
	msize
, *
	m�rcode
);

75 
mp_u�t_t
 (*
io�l
)(
mp_obj_t
 
	mobj
, mp_u�t_�
	m�que�
, 
u���_t
 
	m�g
, *
	m�rcode
);

76 
mp_u�t_t
 
	mis_�xt
 : 1;

77 } 
	tmp_��am_p_t
;

79 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad_obj
);

80 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad1_obj
);

81 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ad�to_obj
);

82 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_unbuf�d_�adl�e_obj
);

83 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_��am_unbuf�d_�adl�es_obj
);

84 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_wr�e_obj
);

85 
MP_DECLARE_CONST_FUN_OBJ_2
(
mp_��am_wr�e1_obj
);

86 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_��am_�o�_obj
);

87 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am___ex�___obj
);

88 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_�ek_obj
);

89 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_��am_��_obj
);

90 
MP_DECLARE_CONST_FUN_OBJ_1
(
mp_��am_�ush_obj
);

91 
MP_DECLARE_CONST_FUN_OBJ_VAR_BETWEEN
(
mp_��am_io�l_obj
);

94 
	#MP_STREAM_OP_READ
 (1)

	)

95 
	#MP_STREAM_OP_WRITE
 (2)

	)

96 
	#MP_STREAM_OP_IOCTL
 (4)

	)

99 
�l�e
 cڡ 
mp_��am_p_t
 *
	$mp_g�_��am
(
mp_cڡ_obj_t
 
�lf
) {

100  (cڡ 
mp_��am_p_t
 *)
	`MP_OBJ_TYPE_GET_SLOT
(((cڡ 
mp_obj_ba�_t
 *)
	`MP_OBJ_TO_PTR
(
�lf
))->
ty�
, 
��oc�
);

101 
	}
}

103 cڡ 
mp_��am_p_t
 *
mp_g�_��am_�i�
(
mp_obj_t
 
�lf_�
, 
�ags
);

104 
mp_obj_t
 
mp_��am_�o�
(mp_obj_�
��am
);

107 
mp_obj_t
 
mp_��am_unbuf�d_��
(mp_obj_�
�lf
);

109 
mp_obj_t
 
mp_��am_wr�e
(mp_obj_�
�lf_�
, cڡ *
buf
, 
size_t
 
�n
, 
by�
 
�ags
);

112 
	#MP_STREAM_RW_READ
 0

	)

113 
	#MP_STREAM_RW_WRITE
 2

	)

114 
	#MP_STREAM_RW_ONCE
 1

	)

115 
mp_u�t_t
 
mp_��am_rw
(
mp_obj_t
 
��am
, *
buf
, mp_u�t_�
size
, *
�rcode
, 
by�
 
�ags
);

116 
	#mp_��am_wr�e_exa�ly
(
��am
, 
buf
, 
size
, 
�r
�
	`mp_��am_rw
(��am, (
by�
 *)buf, size,��, 
MP_STREAM_RW_WRITE
)

	)

117 
	#mp_��am_�ad_exa�ly
(
��am
, 
buf
, 
size
, 
�r
�
	`mp_��am_rw
(��am, buf, size,��, 
MP_STREAM_RW_READ
)

	)

118 
mp_off_t
 
mp_��am_�ek
(
mp_obj_t
 
��am
, mp_off_�
off�t
, 
wh��
, *
�rcode
);

120 
mp_��am_wr�e_ad�t�
(*
�lf
, cڡ *
buf
, 
size_t
 
�n
);

122 #i�
MICROPY_STREAMS_POSIX_API


123 
	~<sys/ty�s.h
>

126 
ssize_t
 
mp_��am_posix_wr�e
(*
��am
, cڡ *
buf
, 
size_t
 
�n
);

127 
ssize_t
 
mp_��am_posix_�ad
(*
��am
, *
buf
, 
size_t
 
�n
);

128 
off_t
 
mp_��am_posix_l�ek
(*
��am
, off_�
off�t
, 
wh��
);

129 
mp_��am_posix_fsync
(*
��am
);

132 #i�
MICROPY_STREAMS_NON_BLOCK


133 
	#mp_is_n�block�g_�r�
(
��o
�(Ӽno�=�
MP_EAGAIN
 || (��o�=�
MP_EWOULDBLOCK
)

	)

135 
	#mp_is_n�block�g_�r�
(
��o
�(0)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\unicode.c

27 
	~<�d�t.h
>

29 
	~"py/unicode.h
"

32 
	#FL_PRINT
 (0x01)

	)

33 
	#FL_SPACE
 (0x02)

	)

34 
	#FL_DIGIT
 (0x04)

	)

35 
	#FL_ALPHA
 (0x08)

	)

36 
	#FL_UPPER
 (0x10)

	)

37 
	#FL_LOWER
 (0x20)

	)

38 
	#FL_XDIGIT
 (0x40)

	)

41 
	#AT_PR
 (
FL_PRINT
)

	)

42 
	#AT_SP
 (
FL_SPACE
 | 
FL_PRINT
)

	)

43 
	#AT_DI
 (
FL_DIGIT
 | 
FL_PRINT
 | 
FL_XDIGIT
)

	)

44 
	#AT_AL
 (
FL_ALPHA
 | 
FL_PRINT
)

	)

45 
	#AT_UP
 (
FL_UPPER
 | 
FL_ALPHA
 | 
FL_PRINT
)

	)

46 
	#AT_LO
 (
FL_LOWER
 | 
FL_ALPHA
 | 
FL_PRINT
)

	)

47 
	#AT_UX
 (
FL_UPPER
 | 
FL_ALPHA
 | 
FL_PRINT
 | 
FL_XDIGIT
)

	)

48 
	#AT_LX
 (
FL_LOWER
 | 
FL_ALPHA
 | 
FL_PRINT
 | 
FL_XDIGIT
)

	)

51 cڡ 
u�t8_t
 
	g��
[] = {

53 0, 
AT_SP
, AT_SP, AT_SP, AT_SP, AT_SP, 0, 0,

56 
AT_SP
, 
AT_PR
, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR,

57 
AT_PR
, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR,

58 
AT_DI
, AT_DI, AT_DI, AT_DI, AT_DI, AT_DI, AT_DI, AT_DI,

59 
AT_DI
, AT_DI, 
AT_PR
, AT_PR, AT_PR, AT_PR, AT_PR, AT_PR,

60 
AT_PR
, 
AT_UX
, AT_UX, AT_UX, AT_UX, AT_UX, AT_UX, 
AT_UP
,

61 
AT_UP
, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP,

62 
AT_UP
, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP, AT_UP,

63 
AT_UP
, AT_UP, AT_UP, 
AT_PR
, AT_PR, AT_PR, AT_PR, AT_PR,

64 
AT_PR
, 
AT_LX
, AT_LX, AT_LX, AT_LX, AT_LX, AT_LX, 
AT_LO
,

65 
AT_LO
, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO,

66 
AT_LO
, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO, AT_LO,

67 
AT_LO
, AT_LO, AT_LO, 
AT_PR
, AT_PR, AT_PR, AT_PR, 0

70 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


72 
unich�
 
	$utf8_g�_ch�
(cڡ 
by�
 *
s
) {

73 
unich�
 
�d
 = *
s
++;

74 i�(!
	`UTF8_IS_NONASCII
(
�d
)) {

75  
�d
;

77 
�d
 &= 0x7F;

78 
unich�
 
mask
 = 0x40; 
�d
 & mask; mask >>= 1) {

79 
�d
 &�~
mask
;

81 
	`UTF8_IS_CONT
(*
s
)) {

82 
�d
 = (�d << 6�| (*
s
++ & 0x3F);

84  
�d
;

85 
	}
}

87 cڡ 
by�
 *
	$utf8_�xt_ch�
(cڡ 
by�
 *
s
) {

88 ++
s
;

89 
	`UTF8_IS_CONT
(*
s
)) {

90 ++
s
;

92  
s
;

93 
	}
}

95 
mp_u�t_t
 
	$utf8_�r_to_�dex
(cڡ 
by�
 *
s
, cڡ by� *
�r
) {

96 
mp_u�t_t
 
i
 = 0;

97 
�r
 > 
s
) {

98 i�(!
	`UTF8_IS_CONT
(*--
�r
)) {

99 
i
++;

103  
i
;

104 
	}
}

106 
size_t
 
	$utf8_ch��n
(cڡ 
by�
 *
�r
, 
size_t
 
�n
) {

107 
size_t
 
ch��n
 = 0;

108 cڡ 
by�
 *
t�
 = 
�r
 + 
�n
; str <�op; ++str) {

109 i�(!
	`UTF8_IS_CONT
(*
�r
)) {

110 ++
ch��n
;

113  
ch��n
;

114 
	}
}

119 
bo�
 
	$unich�_is�a�
(
unich�
 
c
) {

120  
c
 < 128 && (
��
[c] & 
FL_SPACE
) != 0;

121 
	}
}

123 
bo�
 
	$unich�_i��ha
(
unich�
 
c
) {

124  
c
 < 128 && (
��
[c] & 
FL_ALPHA
) != 0;

125 
	}
}

133 
bo�
 
	$unich�_isdig�
(
unich�
 
c
) {

134  
c
 < 128 && (
��
[c] & 
FL_DIGIT
) != 0;

135 
	}
}

137 
bo�
 
	$unich�_isxdig�
(
unich�
 
c
) {

138  
c
 < 128 && (
��
[c] & 
FL_XDIGIT
) != 0;

139 
	}
}

141 
bo�
 
	$unich�_isid�t
(
unich�
 
c
) {

142  
c
 < 128 && ((
��
[c] & (
FL_ALPHA
 | 
FL_DIGIT
)) != 0 || c == '_');

143 
	}
}

145 
bo�
 
	$unich�_i��um
(
unich�
 
c
) {

146  
c
 < 128 && ((
��
[c] & (
FL_ALPHA
 | 
FL_DIGIT
)) != 0);

147 
	}
}

149 
bo�
 
	$unich�_isu��
(
unich�
 
c
) {

150  
c
 < 128 && (
��
[c] & 
FL_UPPER
) != 0;

151 
	}
}

153 
bo�
 
	$unich�_i�ow�
(
unich�
 
c
) {

154  
c
 < 128 && (
��
[c] & 
FL_LOWER
) != 0;

155 
	}
}

157 
unich�
 
	$unich�_t�ow�
(
unich�
 
c
) {

158 i�(
	`unich�_isu��
(
c
)) {

159  
c
 + 0x20;

161  
c
;

162 
	}
}

164 
unich�
 
	$unich�_tou��
(
unich�
 
c
) {

165 i�(
	`unich�_i�ow�
(
c
)) {

166  
c
 - 0x20;

168  
c
;

169 
	}
}

171 
mp_u�t_t
 
	$unich�_xdig�_v�ue
(
unich�
 
c
) {

173 
mp_u�t_t
 
n
 = 
c
 - '0';

174 i�(
n
 > 9) {

175 
n
 &= ~('a' - 'A');

176 
n
 -= ('A' - ('9' + 1));

178  
n
;

179 
	}
}

181 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


183 
bo�
 
	$utf8_check
(cڡ 
by�
 *
p
, 
size_t
 
�n
) {

184 
u�t8_t
 
�ed
 = 0;

185 cڡ 
by�
 *
�d
 = 
p
 + 
�n
;

186 ; 
p
 < 
�d
;�++) {

187 
by�
 
c
 = *
p
;

188 i�(
�ed
) {

189 i�(
	`UTF8_IS_CONT
(
c
)) {

190 
�ed
--;

196 i�(
c
 >= 0xc0) {

197 i�(
c
 >= 0xf8) {

201 
�ed
 = (0xe5 >> ((
c
 >> 3) & 0x6)) & 3;

202 } i�(
c
 >= 0x80) {

208  
�ed
 == 0;

209 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\unicode.h

26 #i�de�
MICROPY_INCLUDED_PY_UNICODE_H


27 
	#MICROPY_INCLUDED_PY_UNICODE_H


	)

29 
	~"py/mpc�fig.h
"

30 
	~"py/misc.h
"

32 
mp_u�t_t
 
utf8_�r_to_�dex
(cڡ 
by�
 *
s
, cڡ by� *
�r
);

33 
bo�
 
utf8_check
(cڡ 
by�
 *
p
, 
size_t
 
�n
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vm.c

28 
	~<�dio.h
>

29 
	~<�r�g.h
>

30 
	~<as��.h
>

32 
	~"py/em�glue.h
"

33 
	~"py/objty�.h
"

34 
	~"py/objfun.h
"

35 
	~"py/ru�ime.h
"

36 
	~"py/bc0.h
"

37 
	~"py/�of�e.h
"

42 #i�
MICROPY_PY_THREAD


43 
	#TRACE_PREFIX
 
	`mp_��tf
(&
mp_��_��t
, "ts=%��=%d ", 
	`mp_th�ad_g�_��e
(), ()(
�
 - &
code_��e
->
��e
[0] + 1))

	)

45 
	#TRACE_PREFIX
 
	`mp_��tf
(&
mp_��_��t
, "�=%d ", ()(
�
 - &
code_��e
->
��e
[0] + 1))

	)

47 
	#TRACE
(
�
�
TRACE_PREFIX
; 
	`mp_by�code_��t2
(&
mp_��_��t
, ip, 1, 
code_��e
->
fun_bc
->
ch�d_�b�
, &code_��e->fun_bc->
cڋxt
->
cڡ�ts
);

	)

49 
	#TRACE
(
�
)

	)

59 
	#DECODE_UINT
 \

60 
mp_u�t_t
 
unum
 = 0; \

62 
unum
 = (unum << 7�+ (*
�
 & 0x7f); \

63 } (*
�
++ & 0x80�!�0)

	)

65 
	#DECODE_ULABEL
 \

66 
size_t
 
u�b
; \

68 i�(
�
[0] & 0x80) { \

69 
u�b
 = ((
�
[0] & 0x7f) | (ip[1] << 7)); \

70 
�
 += 2; \

72 
u�b
 = 
�
[0]; \

73 
�
 += 1; \

75 } 0)

	)

77 
	#DECODE_SLABEL
 \

78 
size_t
 
�ab
; \

80 i�(
�
[0] & 0x80) { \

81 
�ab
 = ((
�
[0] & 0x7f) | (ip[1] << 7)) - 0x4000; \

82 
�
 += 2; \

84 
�ab
 = 
�
[0] - 0x40; \

85 
�
 += 1; \

87 } 0)

	)

89 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


91 
	#DECODE_QSTR
 \

92 
DECODE_UINT
; \

93 
q�r
 
q�
 = 
q�r_�b�
[
unum
]

	)

97 
	#DECODE_QSTR
 \

98 
DECODE_UINT
; \

99 
q�r
 
q�
 = 
unum
;

	)

103 
	#DECODE_PTR
 \

104 
DECODE_UINT
; \

105 *
�r
 = (*)(
u���_t
)
code_��e
->
fun_bc
->
ch�d_�b�
[
unum
]

	)

107 
	#DECODE_OBJ
 \

108 
DECODE_UINT
; \

109 
mp_obj_t
 
obj
 = (mp_obj_t)
code_��e
->
fun_bc
->
cڋxt
->
cڡ�ts
.
obj_�b�
[
unum
]

	)

111 
	#PUSH
(
v�
�*++
�
 = (v�)

	)

112 
	#POP
(�(*
�
--)

	)

113 
	#TOP
(�(*
�
)

	)

114 
	#SET_TOP
(
v�
�*
�
 = (v�)

	)

116 #i�
MICROPY_PY_SYS_EXC_INFO


117 
	#CLEAR_SYS_EXC_INFO
(�
	`MP_STATE_VM
(
cur_ex��i�
��
NULL
;

	)

119 
	#CLEAR_SYS_EXC_INFO
()

	)

122 
	#PUSH_EXC_BLOCK
(
w�h_�_f��ly
) do { \

123 
DECODE_ULABEL
; \

124 ++
exc_�
; \

125 
exc_�
->
h�d�r
 = 
�
 + 
u�b
; \

126 
exc_�
->
v�_�
 = 
	`MP_TAGPTR_MAKE
(
�
, ((
w�h_�_f��ly
) << 1)); \

127 
exc_�
->
�ev_exc
 = 
NULL
; \

128 } 0)

	)

130 
	#POP_EXC_BLOCK
() \

131 
exc_�
--; \

132 
	`CLEAR_SYS_EXC_INFO
(�

	)

134 
	#CANCEL_ACTIVE_FINALLY
(
�
) do { \

135 i�(
	`mp_obj_is_sm�l_�t
(
�
[-1])) { \

138 
�
[-2] = sp[0]; \

139 
�
 -= 2; \

141 
	`as��
(
�
[-1] =�
mp_cڡ_n�e
 || 
	`mp_obj_is_ex��i�_����
(sp[-1])); \

144 
�
[-1] = sp[0]; \

145 --
�
; \

147 } 0)

	)

149 #i�
MICROPY_PY_SYS_SETTRACE


151 
	#FRAME_SETUP
() do { \

152 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

153 
	`MP_STATE_THREAD
(
cu��t_code_��e
��
code_��e
; \

154 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

155 } 0)

	)

157 
	#FRAME_ENTER
() do { \

158 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

159 
code_��e
->
�ev_��e
 = 
	`MP_STATE_THREAD
(
cu��t_code_��e
); \

160 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

161 i�(!
mp_�of_is_execut�g
) { \

162 
	`mp_�of_�ame_��r
(
code_��e
); \

164 } 0)

	)

166 
	#FRAME_LEAVE
() do { \

167 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

168 
	`MP_STATE_THREAD
(
cu��t_code_��e
��
code_��e
->
�ev_��e
; \

169 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

170 } 0)

	)

172 
	#FRAME_UPDATE
() do { \

173 
	`as��
(
	`MP_STATE_THREAD
(
cu��t_code_��e
�=�
code_��e
); \

174 i�(!
mp_�of_is_execut�g
) { \

175 
code_��e
->
�ame
 = 
	`MP_OBJ_TO_PTR
(
	`mp_�of_�ame_upd�e
(code_state)); \

177 } 0)

	)

179 
	#TRACE_TICK
(
cu��t_�
, 
cu��t_�
, 
is_ex��i�
) do { \

180 
	`as��
(
code_��e
 !�code_��e->
�ev_��e
); \

181 
	`as��
(
	`MP_STATE_THREAD
(
cu��t_code_��e
�=�
code_��e
); \

182 i�(!
mp_�of_is_execut�g
 && 
code_��e
->
�ame
 && 
	`MP_STATE_THREAD
(
�of_�a�_��back
)) { \

183 
	`MP_PROF_INSTR_DEBUG_PRINT
(
code_��e
->
�
); \

185 i�(!
mp_�of_is_execut�g
 && 
code_��e
->
�ame
 && code_��e->�ame->
��back
) { \

186 
	`mp_�of_��r_tick
(
code_��e
, 
is_ex��i�
); \

188 } 0)

	)

191 
	#FRAME_SETUP
()

	)

192 
	#FRAME_ENTER
()

	)

193 
	#FRAME_LEAVE
()

	)

194 
	#FRAME_UPDATE
()

	)

195 
	#TRACE_TICK
(
cu��t_�
, 
cu��t_�
, 
is_ex��i�
)

	)

204 
mp_vm_�tu�_k�d_t
 
	$MICROPY_WRAP_MP_EXECUTE_BYTECODE
(
mp_execu�_by�code
)(
mp_code_��e_t
 *
code_��e
, vީ��
mp_obj_t
 
�je�_exc
) {

206 
	#SELECTIVE_EXC_IP
 (0)

	)

216 #i�
SELECTIVE_EXC_IP


219 
	#MARK_EXC_IP_SELECTIVE
(�{ 
code_��e
->
�
 = ip; }

	)

221 
	#MARK_EXC_IP_GLOBAL
()

	)

223 
	#MARK_EXC_IP_SELECTIVE
()

	)

226 
	#MARK_EXC_IP_GLOBAL
(�{ 
code_��e
->
�
 = ip; }

	)

229 #i�
MICROPY_OPT_COMPUTED_GOTO


230 
	~"py/vm��y�b�.h
"

231 
	#DISPATCH
() do { \

232 
	`TRACE
(
�
); \

233 
	`MARK_EXC_IP_GLOBAL
(); \

234 
	`TRACE_TICK
(
�
, 
�
, 
�l�
); \

235 *
��y_�b�
[*
�
++]; \

236 } 0)

	)

237 
	#DISPATCH_WITH_PEND_EXC_CHECK
(�
�nd�g_ex��i�_check


	)

238 
	#ENTRY
(
�
�
��y_
##
	)
op

239 
	#ENTRY_DEFAULT
 
��y_de�u�


	)

241 
	#DISPATCH
(�
di��ch_lo�


	)

242 
	#DISPATCH_WITH_PEND_EXC_CHECK
(�
�nd�g_ex��i�_check


	)

243 
	#ENTRY
(
�
�
	)
op

244 
	#ENTRY_DEFAULT
 

	)

251 
	#RAISE
(
o
�d�{ 
	`�r_p�
(); 
�r
.
�t_v�
 = 
	`MP_OBJ_TO_PTR
(o); 
ex��i�_h�d�r
; } 0)

	)

253 #i�
MICROPY_STACKLESS


254 
run_code_��e
: ;

256 
	`FRAME_ENTER
();

258 #i�
MICROPY_STACKLESS


259 
run_code_��e_�om_�tu�
: ;

261 
	`FRAME_SETUP
();

264 
mp_obj_t
 * 
�n
;

265 
mp_exc_�ack_t
 * 
exc_�ack
;

267 
size_t
 
n_��e
 = 
code_��e
->n_state;

268 
�n
 = &
code_��e
->
��e
[
n_��e
 - 1];

269 
exc_�ack
 = (
mp_exc_�ack_t
*)(
code_��e
->
��e
 + 
n_��e
);

273 
mp_exc_�ack_t
 *vީ��
exc_�
 = 
	`MP_CODE_STATE_EXC_SP_IDX_TO_PTR
(
exc_�ack
, 
code_��e
->
exc_�_idx
);

275 #i�
MICROPY_PY_THREAD_GIL
 && 
MICROPY_PY_THREAD_GIL_VM_DIVISOR


278 vީ��
g�_divis�
 = 
MICROPY_PY_THREAD_GIL_VM_DIVISOR
;

283 
�r_buf_t
 
�r
;

284 
ou�r_di��ch_lo�
:

285 i�(
	`�r_push
(&
�r
) == 0) {

287 cڡ 
by�
 *
�
 = 
code_��e
->ip;

288 
mp_obj_t
 *
�
 = 
code_��e
->sp;

289 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


290 cڡ 
q�r_sh�t_t
 *
q�r_�b�
 = 
code_��e
->
fun_bc
->
cڋxt
->
cڡ�ts
.qstr_table;

292 
mp_obj_t
 
obj_sh�ed
;

293 
MICROPY_VM_HOOK_INIT


300 i�(
�je�_exc
 !�
MP_OBJ_NULL
 && *
�
 !�
MP_BC_YIELD_FROM
) {

301 
mp_obj_t
 
exc
 = 
�je�_exc
;

302 
�je�_exc
 = 
MP_OBJ_NULL
;

303 
exc
 = 
	`mp_make_�i�_obj
(exc);

304 
	`RAISE
(
exc
);

309 
di��ch_lo�
:

314 #ifde�
ORB_ENABLE_INTERRUPT


315 if(
	`MP_STATE_VM
(
�b_���u�
)){

316 
mp_obj_ex��i�_t
 
sy�em_ex�
;

317 
sy�em_ex�
.
ba�
.
ty�
 = &
mp_ty�_Sy�emEx�
;

319 
sy�em_ex�
.
�a�back_�loc
 = 0;

320 
sy�em_ex�
.
�a�back_d�a
 = 
NULL
;

323 
sy�em_ex�
.
�gs
 = (
mp_obj_tu�e_t
*�
	`mp_obj_�w_tu�e
(1, 
NULL
);

324 
mp_obj_t
 
mp_�r
 = 
	`mp_obj_�w_�r
("User Interrupt", 14);

325 
sy�em_ex�
.
�gs
->
�ems
[0] = 
mp_�r
;

328 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
��&
sy�em_ex�
;

329 
	`MP_STATE_VM
(
�b_���u�_�je�ed
��
�ue
;

333 #i�
MICROPY_OPT_COMPUTED_GOTO


334 
	`DISPATCH
();

336 
	`TRACE
(
�
);

337 
	`MARK_EXC_IP_GLOBAL
();

338 
	`TRACE_TICK
(
�
, 
�
, 
�l�
);

339 *
�
++) {

342 
	`ENTRY
(
MP_BC_LOAD_CONST_FALSE
):

343 
	`PUSH
(
mp_cڡ_�l�
);

344 
	`DISPATCH
();

346 
	`ENTRY
(
MP_BC_LOAD_CONST_NONE
):

347 
	`PUSH
(
mp_cڡ_n�e
);

348 
	`DISPATCH
();

350 
	`ENTRY
(
MP_BC_LOAD_CONST_TRUE
):

351 
	`PUSH
(
mp_cڡ_�ue
);

352 
	`DISPATCH
();

354 
	`ENTRY
(
MP_BC_LOAD_CONST_SMALL_INT
): {

355 
mp_u�t_t
 
num
 = 0;

356 i�((
�
[0] & 0x40) != 0) {

358 
num
--;

361 
num
 = (num << 7�| (*
�
 & 0x7f);

362 } (*
�
++ & 0x80) != 0);

363 
	`PUSH
(
	`MP_OBJ_NEW_SMALL_INT
(
num
));

364 
	`DISPATCH
();

367 
	`ENTRY
(
MP_BC_LOAD_CONST_STRING
): {

368 
DECODE_QSTR
;

369 
	`PUSH
(
	`MP_OBJ_NEW_QSTR
(
q�
));

370 
	`DISPATCH
();

373 
	`ENTRY
(
MP_BC_LOAD_CONST_OBJ
): {

374 
DECODE_OBJ
;

375 
	`PUSH
(
obj
);

376 
	`DISPATCH
();

379 
	`ENTRY
(
MP_BC_LOAD_NULL
):

380 
	`PUSH
(
MP_OBJ_NULL
);

381 
	`DISPATCH
();

383 
	`ENTRY
(
MP_BC_LOAD_FAST_N
): {

384 
DECODE_UINT
;

385 
obj_sh�ed
 = 
�n
[-
unum
];

386 
l�d_check
:

387 i�(
obj_sh�ed
 =�
MP_OBJ_NULL
) {

388 
lo�l_�me_�r�
: {

389 
	`MARK_EXC_IP_SELECTIVE
();

390 
mp_obj_t
 
obj
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_NameE��
, 
	`MP_ERROR_TEXT
("local variable�eferenced before�ssignment"));

391 
	`RAISE
(
obj
);

394 
	`PUSH
(
obj_sh�ed
);

395 
	`DISPATCH
();

398 
	`ENTRY
(
MP_BC_LOAD_DEREF
): {

399 
DECODE_UINT
;

400 
obj_sh�ed
 = 
	`mp_obj_��_g�
(
�n
[-
unum
]);

401 
l�d_check
;

404 
	`ENTRY
(
MP_BC_LOAD_NAME
): {

405 
	`MARK_EXC_IP_SELECTIVE
();

406 
DECODE_QSTR
;

407 
	`PUSH
(
	`mp_l�d_�me
(
q�
));

408 
	`DISPATCH
();

411 
	`ENTRY
(
MP_BC_LOAD_GLOBAL
): {

412 
	`MARK_EXC_IP_SELECTIVE
();

413 
DECODE_QSTR
;

414 
	`PUSH
(
	`mp_l�d_glob�
(
q�
));

415 
	`DISPATCH
();

418 
	`ENTRY
(
MP_BC_LOAD_ATTR
): {

419 
	`FRAME_UPDATE
();

420 
	`MARK_EXC_IP_SELECTIVE
();

421 
DECODE_QSTR
;

422 
mp_obj_t
 
t�
 = 
	`TOP
();

423 
mp_obj_t
 
obj
;

424 #i�
MICROPY_OPT_LOAD_ATTR_FAST_PATH


429 
mp_m�_�em_t
 *
�em
 = 
NULL
;

430 i�(
	`mp_obj_is_����_ty�
(
	`mp_obj_g�_ty�
(
t�
))) {

431 
mp_obj_����_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
t�
);

432 
�em
 = 
	`mp_m�_lookup
(&
�lf
->
memb�s
, 
	`MP_OBJ_NEW_QSTR
(
q�
), 
MP_MAP_LOOKUP
);

434 i�(
�em
) {

435 
obj
 = 
�em
->
v�ue
;

439 
obj
 = 
	`mp_l�d_��
(
t�
, 
q�
);

441 
	`SET_TOP
(
obj
);

442 
	`DISPATCH
();

445 
	`ENTRY
(
MP_BC_LOAD_METHOD
): {

446 
	`MARK_EXC_IP_SELECTIVE
();

447 
DECODE_QSTR
;

448 
	`mp_l�d_m�hod
(*
�
, 
q�
, sp);

449 
�
 += 1;

450 
	`DISPATCH
();

453 
	`ENTRY
(
MP_BC_LOAD_SUPER_METHOD
): {

454 
	`MARK_EXC_IP_SELECTIVE
();

455 
DECODE_QSTR
;

456 
�
 -= 1;

457 
	`mp_l�d_su�r_m�hod
(
q�
, 
�
 - 1);

458 
	`DISPATCH
();

461 
	`ENTRY
(
MP_BC_LOAD_BUILD_CLASS
):

462 
	`MARK_EXC_IP_SELECTIVE
();

463 
	`PUSH
(
	`mp_l�d_bu�d_�ass
());

464 
	`DISPATCH
();

466 
	`ENTRY
(
MP_BC_LOAD_SUBSCR
): {

467 
	`MARK_EXC_IP_SELECTIVE
();

468 
mp_obj_t
 
�dex
 = 
	`POP
();

469 
	`SET_TOP
(
	`mp_obj_subs�
(
	`TOP
(), 
�dex
, 
MP_OBJ_SENTINEL
));

470 
	`DISPATCH
();

473 
	`ENTRY
(
MP_BC_STORE_FAST_N
): {

474 
DECODE_UINT
;

475 
�n
[-
unum
] = 
	`POP
();

476 
	`DISPATCH
();

479 
	`ENTRY
(
MP_BC_STORE_DEREF
): {

480 
DECODE_UINT
;

481 
	`mp_obj_��_�t
(
�n
[-
unum
], 
	`POP
());

482 
	`DISPATCH
();

485 
	`ENTRY
(
MP_BC_STORE_NAME
): {

486 
	`MARK_EXC_IP_SELECTIVE
();

487 
DECODE_QSTR
;

488 
	`mp_��e_�me
(
q�
, 
	`POP
());

489 
	`DISPATCH
();

492 
	`ENTRY
(
MP_BC_STORE_GLOBAL
): {

493 
	`MARK_EXC_IP_SELECTIVE
();

494 
DECODE_QSTR
;

495 
	`mp_��e_glob�
(
q�
, 
	`POP
());

496 
	`DISPATCH
();

499 
	`ENTRY
(
MP_BC_STORE_ATTR
): {

500 
	`FRAME_UPDATE
();

501 
	`MARK_EXC_IP_SELECTIVE
();

502 
DECODE_QSTR
;

503 
	`mp_��e_��
(
�
[0], 
q�
, sp[-1]);

504 
�
 -= 2;

505 
	`DISPATCH
();

508 
	`ENTRY
(
MP_BC_STORE_SUBSCR
):

509 
	`MARK_EXC_IP_SELECTIVE
();

510 
	`mp_obj_subs�
(
�
[-1], sp[0], sp[-2]);

511 
�
 -= 3;

512 
	`DISPATCH
();

514 
	`ENTRY
(
MP_BC_DELETE_FAST
): {

515 
	`MARK_EXC_IP_SELECTIVE
();

516 
DECODE_UINT
;

517 i�(
�n
[-
unum
] =�
MP_OBJ_NULL
) {

518 
lo�l_�me_�r�
;

520 
�n
[-
unum
] = 
MP_OBJ_NULL
;

521 
	`DISPATCH
();

524 
	`ENTRY
(
MP_BC_DELETE_DEREF
): {

525 
	`MARK_EXC_IP_SELECTIVE
();

526 
DECODE_UINT
;

527 i�(
	`mp_obj_��_g�
(
�n
[-
unum
]�=�
MP_OBJ_NULL
) {

528 
lo�l_�me_�r�
;

530 
	`mp_obj_��_�t
(
�n
[-
unum
], 
MP_OBJ_NULL
);

531 
	`DISPATCH
();

534 
	`ENTRY
(
MP_BC_DELETE_NAME
): {

535 
	`MARK_EXC_IP_SELECTIVE
();

536 
DECODE_QSTR
;

537 
	`mp_d��e_�me
(
q�
);

538 
	`DISPATCH
();

541 
	`ENTRY
(
MP_BC_DELETE_GLOBAL
): {

542 
	`MARK_EXC_IP_SELECTIVE
();

543 
DECODE_QSTR
;

544 
	`mp_d��e_glob�
(
q�
);

545 
	`DISPATCH
();

548 
	`ENTRY
(
MP_BC_DUP_TOP
): {

549 
mp_obj_t
 
t�
 = 
	`TOP
();

550 
	`PUSH
(
t�
);

551 
	`DISPATCH
();

554 
	`ENTRY
(
MP_BC_DUP_TOP_TWO
):

555 
�
 += 2;

556 
�
[0] = sp[-2];

557 
�
[-1] = sp[-3];

558 
	`DISPATCH
();

560 
	`ENTRY
(
MP_BC_POP_TOP
):

561 
�
 -= 1;

562 
	`DISPATCH
();

564 
	`ENTRY
(
MP_BC_ROT_TWO
): {

565 
mp_obj_t
 
t�
 = 
�
[0];

566 
�
[0] = sp[-1];

567 
�
[-1] = 
t�
;

568 
	`DISPATCH
();

571 
	`ENTRY
(
MP_BC_ROT_THREE
): {

572 
mp_obj_t
 
t�
 = 
�
[0];

573 
�
[0] = sp[-1];

574 
�
[-1] = sp[-2];

575 
�
[-2] = 
t�
;

576 
	`DISPATCH
();

579 
	`ENTRY
(
MP_BC_JUMP
): {

580 
DECODE_SLABEL
;

581 
�
 +�
�ab
;

582 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

585 
	`ENTRY
(
MP_BC_POP_JUMP_IF_TRUE
): {

586 
DECODE_SLABEL
;

587 i�(
	`mp_obj_is_�ue
(
	`POP
())) {

588 
�
 +�
�ab
;

590 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

593 
	`ENTRY
(
MP_BC_POP_JUMP_IF_FALSE
): {

594 
DECODE_SLABEL
;

595 i�(!
	`mp_obj_is_�ue
(
	`POP
())) {

596 
�
 +�
�ab
;

598 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

601 
	`ENTRY
(
MP_BC_JUMP_IF_TRUE_OR_POP
): {

602 
DECODE_ULABEL
;

603 i�(
	`mp_obj_is_�ue
(
	`TOP
())) {

604 
�
 +�
u�b
;

606 
�
--;

608 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

611 
	`ENTRY
(
MP_BC_JUMP_IF_FALSE_OR_POP
): {

612 
DECODE_ULABEL
;

613 i�(
	`mp_obj_is_�ue
(
	`TOP
())) {

614 
�
--;

616 
�
 +�
u�b
;

618 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

621 
	`ENTRY
(
MP_BC_SETUP_WITH
): {

622 
	`MARK_EXC_IP_SELECTIVE
();

624 
mp_obj_t
 
obj
 = 
	`TOP
();

625 
	`mp_l�d_m�hod
(
obj
, 
MP_QSTR___ex�__
, 
�
);

626 
	`mp_l�d_m�hod
(
obj
, 
MP_QSTR___��r__
, 
�
 + 2);

627 
mp_obj_t
 
�t
 = 
	`mp_��_m�hod_n_kw
(0, 0, 
�
 + 2);

628 
�
 += 1;

629 
	`PUSH_EXC_BLOCK
(1);

630 
	`PUSH
(
�t
);

632 
	`DISPATCH
();

635 
	`ENTRY
(
MP_BC_WITH_CLEANUP
): {

636 
	`MARK_EXC_IP_SELECTIVE
();

643 i�(
	`TOP
(�=�
mp_cڡ_n�e
) {

645 
�
[1] = 
mp_cڡ_n�e
;

646 
�
[2] = 
mp_cڡ_n�e
;

647 
�
 -= 2;

648 
	`mp_��_m�hod_n_kw
(3, 0, 
�
);

649 
	`SET_TOP
(
mp_cڡ_n�e
);

650 } i�(
	`mp_obj_is_sm�l_�t
(
	`TOP
())) {

655 
mp_obj_t
 
d�a
 = 
�
[-1];

656 
mp_obj_t
 
�u�
 = 
�
[0];

657 
�
[-1] = 
mp_cڡ_n�e
;

658 
�
[0] = 
mp_cڡ_n�e
;

659 
�
[1] = 
mp_cڡ_n�e
;

660 
	`mp_��_m�hod_n_kw
(3, 0, 
�
 - 3);

661 
�
[-3] = 
d�a
;

662 
�
[-2] = 
�u�
;

663 
�
 -= 2;

665 
	`as��
(
	`mp_obj_is_ex��i�_����
(
	`TOP
()));

668 
�
[1] = sp[0];

669 
�
[0] = 
	`MP_OBJ_FROM_PTR
(
	`mp_obj_g�_ty�
(sp[0]));

670 
�
[2] = 
mp_cڡ_n�e
;

671 
�
 -= 2;

672 
mp_obj_t
 
�t_v�ue
 = 
	`mp_��_m�hod_n_kw
(3, 0, 
�
);

673 i�(
	`mp_obj_is_�ue
(
�t_v�ue
)) {

678 
	`SET_TOP
(
mp_cڡ_n�e
);

682 
�
[0] = sp[3];

685 
	`DISPATCH
();

688 
	`ENTRY
(
MP_BC_UNWIND_JUMP
): {

689 
	`MARK_EXC_IP_SELECTIVE
();

690 
DECODE_SLABEL
;

691 
	`PUSH
((
mp_obj_t
)(
mp_u�t_t
)(
u���_t
)(
�
 + 
�ab
));

692 
	`PUSH
((
mp_obj_t
)(
mp_u�t_t
)(*
�
));

693 
unw�d_jump
:;

694 
mp_u�t_t
 
unum
 = (mp_u�t_t)
	`POP
();

695 (
unum
 & 0x7f) > 0) {

696 
unum
 -= 1;

697 
	`as��
(
exc_�
 >�
exc_�ack
);

699 i�(
	`MP_TAGPTR_TAG1
(
exc_�
->
v�_�
)) {

700 i�(
exc_�
->
h�d�r
 >�
�
) {

706 
	`as��
(&
�
[-1] =�
	`MP_TAGPTR_PTR
(
exc_�
->
v�_�
));

713 
	`PUSH
(
	`MP_OBJ_NEW_SMALL_INT
(
unum
));

714 
�
 = 
exc_�
->
h�d�r
;

715 
di��ch_lo�
;

718 
	`CANCEL_ACTIVE_FINALLY
(
�
);

721 
	`POP_EXC_BLOCK
();

723 
�
 = (cڡ 
by�
*)
	`MP_OBJ_TO_PTR
(
	`POP
());

724 i�(
unum
 != 0) {

726 
�
 -�
MP_OBJ_ITER_BUF_NSLOTS
;

728 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

731 
	`ENTRY
(
MP_BC_SETUP_EXCEPT
):

732 
	`ENTRY
(
MP_BC_SETUP_FINALLY
): {

733 
	`MARK_EXC_IP_SELECTIVE
();

734 #i�
SELECTIVE_EXC_IP


735 
	`PUSH_EXC_BLOCK
((
code_��e
->
�
[-1] =�
MP_BC_SETUP_FINALLY
) ? 1 : 0);

737 
	`PUSH_EXC_BLOCK
((
code_��e
->
�
[0] =�
MP_BC_SETUP_FINALLY
) ? 1 : 0);

739 
	`DISPATCH
();

742 
	`ENTRY
(
MP_BC_END_FINALLY
):

743 
	`MARK_EXC_IP_SELECTIVE
();

747 
	`as��
(
exc_�
 >�
exc_�ack
);

748 
	`POP_EXC_BLOCK
();

749 i�(
	`TOP
(�=�
mp_cڡ_n�e
) {

750 
�
--;

751 } i�(
	`mp_obj_is_sm�l_�t
(
	`TOP
())) {

754 
mp_�t_t
 
�u�
 = 
	`MP_OBJ_SMALL_INT_VALUE
(
	`POP
());

755 i�(
�u�
 < 0) {

757 
unw�d_�tu�
;

761 
	`PUSH
((
mp_obj_t
)
�u�
);

762 
unw�d_jump
;

765 
	`as��
(
	`mp_obj_is_ex��i�_����
(
	`TOP
()));

766 
	`RAISE
(
	`TOP
());

768 
	`DISPATCH
();

770 
	`ENTRY
(
MP_BC_GET_ITER
):

771 
	`MARK_EXC_IP_SELECTIVE
();

772 
	`SET_TOP
(
	`mp_g���
(
	`TOP
(), 
NULL
));

773 
	`DISPATCH
();

779 
	`ENTRY
(
MP_BC_GET_ITER_STACK
): {

780 
	`MARK_EXC_IP_SELECTIVE
();

781 
mp_obj_t
 
obj
 = 
	`TOP
();

782 
mp_obj_��_buf_t
 *
��_buf
 = (mp_obj_��_buf_t*)
�
;

783 
�
 +�
MP_OBJ_ITER_BUF_NSLOTS
 - 1;

784 
obj
 = 
	`mp_g���
(obj, 
��_buf
);

785 i�(
obj
 !�
	`MP_OBJ_FROM_PTR
(
��_buf
)) {

787 *(
�
 - 
MP_OBJ_ITER_BUF_NSLOTS
 + 1��
MP_OBJ_NULL
;

788 *(
�
 - 
MP_OBJ_ITER_BUF_NSLOTS
 + 2��
obj
;

790 
	`DISPATCH
();

793 
	`ENTRY
(
MP_BC_FOR_ITER
): {

794 
	`FRAME_UPDATE
();

795 
	`MARK_EXC_IP_SELECTIVE
();

796 
DECODE_ULABEL
;

797 
code_��e
->
�
 = sp;

798 
mp_obj_t
 
obj
;

799 i�(*(
�
 - 
MP_OBJ_ITER_BUF_NSLOTS
 + 1�=�
MP_OBJ_NULL
) {

800 
obj
 = *(
�
 - 
MP_OBJ_ITER_BUF_NSLOTS
 + 2);

802 
obj
 = 
	`MP_OBJ_FROM_PTR
(&
�
[-
MP_OBJ_ITER_BUF_NSLOTS
 + 1]);

804 
mp_obj_t
 
v�ue
 = 
	`mp_���xt_�low_�i�
(
obj
);

805 i�(
v�ue
 =�
MP_OBJ_STOP_ITERATION
) {

806 
�
 -�
MP_OBJ_ITER_BUF_NSLOTS
;

807 
�
 +�
u�b
;

809 
	`PUSH
(
v�ue
);

810 #i�
MICROPY_PY_SYS_SETTRACE


812 i�(
code_��e
->
�ame
) {

813 
code_��e
->
�ame
->
l��o
 = 0;

817 
	`DISPATCH
();

820 
	`ENTRY
(
MP_BC_POP_EXCEPT_JUMP
): {

821 
	`as��
(
exc_�
 >�
exc_�ack
);

822 
	`POP_EXC_BLOCK
();

823 
DECODE_ULABEL
;

824 
�
 +�
u�b
;

825 
	`DISPATCH_WITH_PEND_EXC_CHECK
();

828 
	`ENTRY
(
MP_BC_BUILD_TUPLE
): {

829 
	`MARK_EXC_IP_SELECTIVE
();

830 
DECODE_UINT
;

831 
�
 -�
unum
 - 1;

832 
	`SET_TOP
(
	`mp_obj_�w_tu�e
(
unum
, 
�
));

833 
	`DISPATCH
();

836 
	`ENTRY
(
MP_BC_BUILD_LIST
): {

837 
	`MARK_EXC_IP_SELECTIVE
();

838 
DECODE_UINT
;

839 
�
 -�
unum
 - 1;

840 
	`SET_TOP
(
	`mp_obj_�w_li�
(
unum
, 
�
));

841 
	`DISPATCH
();

844 
	`ENTRY
(
MP_BC_BUILD_MAP
): {

845 
	`MARK_EXC_IP_SELECTIVE
();

846 
DECODE_UINT
;

847 
	`PUSH
(
	`mp_obj_�w_di�
(
unum
));

848 
	`DISPATCH
();

851 
	`ENTRY
(
MP_BC_STORE_MAP
):

852 
	`MARK_EXC_IP_SELECTIVE
();

853 
�
 -= 2;

854 
	`mp_obj_di�_��e
(
�
[0], sp[2], sp[1]);

855 
	`DISPATCH
();

857 #i�
MICROPY_PY_BUILTINS_SET


858 
	`ENTRY
(
MP_BC_BUILD_SET
): {

859 
	`MARK_EXC_IP_SELECTIVE
();

860 
DECODE_UINT
;

861 
�
 -�
unum
 - 1;

862 
	`SET_TOP
(
	`mp_obj_�w_�t
(
unum
, 
�
));

863 
	`DISPATCH
();

867 #i�
MICROPY_PY_BUILTINS_SLICE


868 
	`ENTRY
(
MP_BC_BUILD_SLICE
): {

869 
	`MARK_EXC_IP_SELECTIVE
();

870 
mp_obj_t
 
��
 = 
mp_cڡ_n�e
;

871 i�(*
�
++ == 3) {

873 
��
 = 
	`POP
();

875 
mp_obj_t
 
��
 = 
	`POP
();

876 
mp_obj_t
 
��t
 = 
	`TOP
();

877 
	`SET_TOP
(
	`mp_obj_�w_�i�
(
��t
, 
��
, 
��
));

878 
	`DISPATCH
();

882 
	`ENTRY
(
MP_BC_STORE_COMP
): {

883 
	`MARK_EXC_IP_SELECTIVE
();

884 
DECODE_UINT
;

885 
mp_obj_t
 
obj
 = 
�
[-(
unum
 >> 2)];

886 i�((
unum
 & 3) == 0) {

887 
	`mp_obj_li�_��nd
(
obj
, 
�
[0]);

888 
�
--;

889 } i�(!
MICROPY_PY_BUILTINS_SET
 || (
unum
 & 3) == 1) {

890 
	`mp_obj_di�_��e
(
obj
, 
�
[0], sp[-1]);

891 
�
 -= 2;

892 #i�
MICROPY_PY_BUILTINS_SET


894 
	`mp_obj_�t_��e
(
obj
, 
�
[0]);

895 
�
--;

898 
	`DISPATCH
();

901 
	`ENTRY
(
MP_BC_UNPACK_SEQUENCE
): {

902 
	`MARK_EXC_IP_SELECTIVE
();

903 
DECODE_UINT
;

904 
	`mp_u�ack_�qu��
(
�
[0], 
unum
, sp);

905 
�
 +�
unum
 - 1;

906 
	`DISPATCH
();

909 
	`ENTRY
(
MP_BC_UNPACK_EX
): {

910 
	`MARK_EXC_IP_SELECTIVE
();

911 
DECODE_UINT
;

912 
	`mp_u�ack_ex
(
�
[0], 
unum
, sp);

913 
�
 +�(
unum
 & 0xff) + ((unum >> 8) & 0xff);

914 
	`DISPATCH
();

917 
	`ENTRY
(
MP_BC_MAKE_FUNCTION
): {

918 
DECODE_PTR
;

919 
	`PUSH
(
	`mp_make_fun�i�_�om_��o_fun
(
�r
, 
code_��e
->
fun_bc
->
cڋxt
, 
NULL
));

920 
	`DISPATCH
();

923 
	`ENTRY
(
MP_BC_MAKE_FUNCTION_DEFARGS
): {

924 
DECODE_PTR
;

926 
�
 -= 1;

927 
	`SET_TOP
(
	`mp_make_fun�i�_�om_��o_fun
(
�r
, 
code_��e
->
fun_bc
->
cڋxt
, 
�
));

928 
	`DISPATCH
();

931 
	`ENTRY
(
MP_BC_MAKE_CLOSURE
): {

932 
DECODE_PTR
;

933 
size_t
 
n_�o�d_ov�
 = *
�
++;

935 
�
 -�
n_�o�d_ov�
 - 1;

936 
	`SET_TOP
(
	`mp_make_�osu�_�om_��o_fun
(
�r
, 
code_��e
->
fun_bc
->
cڋxt
, 
n_�o�d_ov�
, 
�
));

937 
	`DISPATCH
();

940 
	`ENTRY
(
MP_BC_MAKE_CLOSURE_DEFARGS
): {

941 
DECODE_PTR
;

942 
size_t
 
n_�o�d_ov�
 = *
�
++;

944 
�
 -�2 + 
n_�o�d_ov�
 - 1;

945 
	`SET_TOP
(
	`mp_make_�osu�_�om_��o_fun
(
�r
, 
code_��e
->
fun_bc
->
cڋxt
, 0x100 | 
n_�o�d_ov�
, 
�
));

946 
	`DISPATCH
();

949 
	`ENTRY
(
MP_BC_CALL_FUNCTION
): {

950 
	`FRAME_UPDATE
();

951 
	`MARK_EXC_IP_SELECTIVE
();

952 
DECODE_UINT
;

955 
�
 -�(
unum
 & 0xff) + ((unum >> 7) & 0x1fe);

956 #i�
MICROPY_STACKLESS


957 i�(
	`mp_obj_g�_ty�
(*
�
�=�&
mp_ty�_fun_bc
) {

958 
code_��e
->
�
 = ip;

959 
code_��e
->
�
 = sp;

960 
code_��e
->
exc_�_idx
 = 
	`MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
);

961 
mp_code_��e_t
 *
�w_��e
 = 
	`mp_obj_fun_bc_���e_code��e
(*
�
, 
unum
 & 0xff, (unum >> 8) & 0xff, sp + 1);

962 #i�!
MICROPY_ENABLE_PYSTACK


963 i�(
�w_��e
 =�
NULL
) {

966 #i�
MICROPY_STACKLESS_STRICT


967 
d�p_�cursi�_�r�
:

968 
	`mp_�i�_�cursi�_d�th
();

973 
�w_��e
->
�ev
 = 
code_��e
;

974 
code_��e
 = 
�w_��e
;

975 
	`�r_p�
();

976 
run_code_��e
;

980 
	`SET_TOP
(
	`mp_��_fun�i�_n_kw
(*
�
, 
unum
 & 0xff, (unum >> 8) & 0xff, sp + 1));

981 
	`DISPATCH
();

984 
	`ENTRY
(
MP_BC_CALL_FUNCTION_VAR_KW
): {

985 
	`FRAME_UPDATE
();

986 
	`MARK_EXC_IP_SELECTIVE
();

987 
DECODE_UINT
;

992 
�
 -�(
unum
 & 0xff) + ((unum >> 7) & 0x1fe) + 1;

993 #i�
MICROPY_STACKLESS


994 i�(
	`mp_obj_g�_ty�
(*
�
�=�&
mp_ty�_fun_bc
) {

995 
code_��e
->
�
 = ip;

996 
code_��e
->
�
 = sp;

997 
code_��e
->
exc_�_idx
 = 
	`MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
);

999 
mp_��_�gs_t
 
out_�gs
;

1000 
	`mp_��_���e_�gs_n_kw_v�
(
�l�
, 
unum
, 
�
, &
out_�gs
);

1002 
mp_code_��e_t
 *
�w_��e
 = 
	`mp_obj_fun_bc_���e_code��e
(
out_�gs
.
fun
,

1003 
out_�gs
.
n_�gs
, out_�gs.
n_kw
, out_�gs.
�gs
);

1004 #i�!
MICROPY_ENABLE_PYSTACK


1007 
	`mp_n�lo�l_�
(
out_�gs
.
�gs
, out_�gs.
n_�loc
 * (
mp_obj_t
));

1009 #i�!
MICROPY_ENABLE_PYSTACK


1010 i�(
�w_��e
 =�
NULL
) {

1013 #i�
MICROPY_STACKLESS_STRICT


1014 
d�p_�cursi�_�r�
;

1019 
�w_��e
->
�ev
 = 
code_��e
;

1020 
code_��e
 = 
�w_��e
;

1021 
	`�r_p�
();

1022 
run_code_��e
;

1026 
	`SET_TOP
(
	`mp_��_m�hod_n_kw_v�
(
�l�
, 
unum
, 
�
));

1027 
	`DISPATCH
();

1030 
	`ENTRY
(
MP_BC_CALL_METHOD
): {

1031 
	`FRAME_UPDATE
();

1032 
	`MARK_EXC_IP_SELECTIVE
();

1033 
DECODE_UINT
;

1036 
�
 -�(
unum
 & 0xff) + ((unum >> 7) & 0x1fe) + 1;

1037 #i�
MICROPY_STACKLESS


1038 i�(
	`mp_obj_g�_ty�
(*
�
�=�&
mp_ty�_fun_bc
) {

1039 
code_��e
->
�
 = ip;

1040 
code_��e
->
�
 = sp;

1041 
code_��e
->
exc_�_idx
 = 
	`MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
);

1043 
size_t
 
n_�gs
 = 
unum
 & 0xff;

1044 
size_t
 
n_kw
 = (
unum
 >> 8) & 0xff;

1045 
adju�
 = (
�
[1] =�
MP_OBJ_NULL
) ? 0 : 1;

1047 
mp_code_��e_t
 *
�w_��e
 = 
	`mp_obj_fun_bc_���e_code��e
(*
�
, 
n_�gs
 + 
adju�
, 
n_kw
, sp + 2 -�djust);

1048 #i�!
MICROPY_ENABLE_PYSTACK


1049 i�(
�w_��e
 =�
NULL
) {

1052 #i�
MICROPY_STACKLESS_STRICT


1053 
d�p_�cursi�_�r�
;

1058 
�w_��e
->
�ev
 = 
code_��e
;

1059 
code_��e
 = 
�w_��e
;

1060 
	`�r_p�
();

1061 
run_code_��e
;

1065 
	`SET_TOP
(
	`mp_��_m�hod_n_kw
(
unum
 & 0xff, (unum >> 8�& 0xff, 
�
));

1066 
	`DISPATCH
();

1069 
	`ENTRY
(
MP_BC_CALL_METHOD_VAR_KW
): {

1070 
	`FRAME_UPDATE
();

1071 
	`MARK_EXC_IP_SELECTIVE
();

1072 
DECODE_UINT
;

1077 
�
 -�(
unum
 & 0xff) + ((unum >> 7) & 0x1fe) + 2;

1078 #i�
MICROPY_STACKLESS


1079 i�(
	`mp_obj_g�_ty�
(*
�
�=�&
mp_ty�_fun_bc
) {

1080 
code_��e
->
�
 = ip;

1081 
code_��e
->
�
 = sp;

1082 
code_��e
->
exc_�_idx
 = 
	`MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
);

1084 
mp_��_�gs_t
 
out_�gs
;

1085 
	`mp_��_���e_�gs_n_kw_v�
(
�ue
, 
unum
, 
�
, &
out_�gs
);

1087 
mp_code_��e_t
 *
�w_��e
 = 
	`mp_obj_fun_bc_���e_code��e
(
out_�gs
.
fun
,

1088 
out_�gs
.
n_�gs
, out_�gs.
n_kw
, out_�gs.
�gs
);

1089 #i�!
MICROPY_ENABLE_PYSTACK


1092 
	`mp_n�lo�l_�
(
out_�gs
.
�gs
, out_�gs.
n_�loc
 * (
mp_obj_t
));

1094 #i�!
MICROPY_ENABLE_PYSTACK


1095 i�(
�w_��e
 =�
NULL
) {

1098 #i�
MICROPY_STACKLESS_STRICT


1099 
d�p_�cursi�_�r�
;

1104 
�w_��e
->
�ev
 = 
code_��e
;

1105 
code_��e
 = 
�w_��e
;

1106 
	`�r_p�
();

1107 
run_code_��e
;

1111 
	`SET_TOP
(
	`mp_��_m�hod_n_kw_v�
(
�ue
, 
unum
, 
�
));

1112 
	`DISPATCH
();

1115 
	`ENTRY
(
MP_BC_RETURN_VALUE
):

1116 
	`MARK_EXC_IP_SELECTIVE
();

1117 
unw�d_�tu�
:

1119 
exc_�
 >�
exc_�ack
) {

1120 i�(
	`MP_TAGPTR_TAG1
(
exc_�
->
v�_�
)) {

1121 i�(
exc_�
->
h�d�r
 >�
�
) {

1132 
mp_obj_t
 *
f��ly_�
 = 
	`MP_TAGPTR_PTR
(
exc_�
->
v�_�
);

1133 
f��ly_�
[1] = 
�
[0];

1134 
�
 = &
f��ly_�
[1];

1139 
	`PUSH
(
	`MP_OBJ_NEW_SMALL_INT
(-1));

1140 
�
 = 
exc_�
->
h�d�r
;

1141 
di��ch_lo�
;

1144 
	`CANCEL_ACTIVE_FINALLY
(
�
);

1147 
	`POP_EXC_BLOCK
();

1149 
	`�r_p�
();

1150 
code_��e
->
�
 = sp;

1151 
	`as��
(
exc_�
 =�
exc_�ack
 - 1);

1152 
MICROPY_VM_HOOK_RETURN


1153 #i�
MICROPY_STACKLESS


1154 i�(
code_��e
->
�ev
 !�
NULL
) {

1155 
mp_obj_t
 
�s
 = *
�
;

1156 
	`mp_glob�s_�t
(
code_��e
->
�d_glob�s
);

1157 
mp_code_��e_t
 *
�w_code_��e
 = 
code_��e
->
�ev
;

1158 #i�
MICROPY_ENABLE_PYSTACK


1163 
	`mp_n�lo�l_�
(
code_��e
, (
mp_code_��e_t
));

1165 
code_��e
 = 
�w_code_��e
;

1166 *
code_��e
->
�
 = 
�s
;

1167 
run_code_��e_�om_�tu�
;

1170 
	`FRAME_LEAVE
();

1171  
MP_VM_RETURN_NORMAL
;

1173 
	`ENTRY
(
MP_BC_RAISE_LAST
): {

1174 
	`MARK_EXC_IP_SELECTIVE
();

1176 
mp_obj_t
 
obj
 = 
MP_OBJ_NULL
;

1177 
mp_exc_�ack_t
 *
e
 = 
exc_�
;� >�
exc_�ack
; --e) {

1178 i�(
e
->
�ev_exc
 !�
NULL
) {

1179 
obj
 = 
	`MP_OBJ_FROM_PTR
(
e
->
�ev_exc
);

1183 i�(
obj
 =�
MP_OBJ_NULL
) {

1184 
obj
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_Ru�imeE��
, 
	`MP_ERROR_TEXT
("no�ctive�xception�o�eraise"));

1186 
	`RAISE
(
obj
);

1189 
	`ENTRY
(
MP_BC_RAISE_OBJ
): {

1190 
	`MARK_EXC_IP_SELECTIVE
();

1191 
mp_obj_t
 
obj
 = 
	`mp_make_�i�_obj
(
	`TOP
());

1192 
	`RAISE
(
obj
);

1195 
	`ENTRY
(
MP_BC_RAISE_FROM
): {

1196 
	`MARK_EXC_IP_SELECTIVE
();

1197 
mp_obj_t
 
�om_v�ue
 = 
	`POP
();

1198 i�(
�om_v�ue
 !�
mp_cڡ_n�e
) {

1199 
	`mp_w�n�g
(
NULL
, "exception chaining�ot supported");

1201 
mp_obj_t
 
obj
 = 
	`mp_make_�i�_obj
(
	`TOP
());

1202 
	`RAISE
(
obj
);

1205 
	`ENTRY
(
MP_BC_YIELD_VALUE
):

1206 
y�ld
:

1207 
	`�r_p�
();

1208 
code_��e
->
�
 = ip;

1209 
code_��e
->
�
 = sp;

1210 
code_��e
->
exc_�_idx
 = 
	`MP_CODE_STATE_EXC_SP_IDX_FROM_PTR
(
exc_�ack
, 
exc_�
);

1211 
	`FRAME_LEAVE
();

1212  
MP_VM_RETURN_YIELD
;

1214 
	`ENTRY
(
MP_BC_YIELD_FROM
): {

1215 
	`MARK_EXC_IP_SELECTIVE
();

1216 
mp_vm_�tu�_k�d_t
 
�t_k�d
;

1217 
mp_obj_t
 
�nd_v�ue
 = 
	`POP
();

1218 
mp_obj_t
 
t_exc
 = 
MP_OBJ_NULL
;

1219 
mp_obj_t
 
�t_v�ue
;

1220 
code_��e
->
�
 = sp;

1221 i�(
�je�_exc
 !�
MP_OBJ_NULL
) {

1222 
t_exc
 = 
�je�_exc
;

1223 
�je�_exc
 = 
MP_OBJ_NULL
;

1224 
�t_k�d
 = 
	`mp_�sume
(
	`TOP
(), 
MP_OBJ_NULL
, 
t_exc
, &
�t_v�ue
);

1226 
�t_k�d
 = 
	`mp_�sume
(
	`TOP
(), 
�nd_v�ue
, 
MP_OBJ_NULL
, &
�t_v�ue
);

1229 i�(
�t_k�d
 =�
MP_VM_RETURN_YIELD
) {

1230 
�
--;

1231 
	`PUSH
(
�t_v�ue
);

1232 
y�ld
;

1233 } i�(
�t_k�d
 =�
MP_VM_RETURN_NORMAL
) {

1236 
	`SET_TOP
(
�t_v�ue
);

1239 i�(
t_exc
 !�
MP_OBJ_NULL
 && 
	`mp_obj_ex��i�_m�ch
�_exc, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_G����Ex�
))) {

1240 
mp_obj_t
 
�i�_t
 = 
	`mp_make_�i�_obj
(
t_exc
);

1241 
	`RAISE
(
�i�_t
);

1243 
	`DISPATCH
();

1245 
	`as��
(
�t_k�d
 =�
MP_VM_RETURN_EXCEPTION
);

1246 
	`as��
(!
	`mp_obj_ex��i�_m�ch
(
�t_v�ue
, 
	`MP_OBJ_FROM_PTR
(&
mp_ty�_St�I��ti�
)));

1248 
�
--;

1249 
	`RAISE
(
�t_v�ue
);

1253 
	`ENTRY
(
MP_BC_IMPORT_NAME
): {

1254 
	`FRAME_UPDATE
();

1255 
	`MARK_EXC_IP_SELECTIVE
();

1256 
DECODE_QSTR
;

1257 
mp_obj_t
 
obj
 = 
	`POP
();

1258 
	`SET_TOP
(
	`mp_imp�t_�me
(
q�
, 
obj
, 
	`TOP
()));

1259 
	`DISPATCH
();

1262 
	`ENTRY
(
MP_BC_IMPORT_FROM
): {

1263 
	`FRAME_UPDATE
();

1264 
	`MARK_EXC_IP_SELECTIVE
();

1265 
DECODE_QSTR
;

1266 
mp_obj_t
 
obj
 = 
	`mp_imp�t_�om
(
	`TOP
(), 
q�
);

1267 
	`PUSH
(
obj
);

1268 
	`DISPATCH
();

1271 
	`ENTRY
(
MP_BC_IMPORT_STAR
):

1272 
	`MARK_EXC_IP_SELECTIVE
();

1273 
	`mp_imp�t_�l
(
	`POP
());

1274 
	`DISPATCH
();

1276 #i�
MICROPY_OPT_COMPUTED_GOTO


1277 
	`ENTRY
(
MP_BC_LOAD_CONST_SMALL_INT_MULTI
):

1278 
	`PUSH
(
	`MP_OBJ_NEW_SMALL_INT
((
mp_�t_t
)
�
[-1] - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
));

1279 
	`DISPATCH
();

1281 
	`ENTRY
(
MP_BC_LOAD_FAST_MULTI
):

1282 
obj_sh�ed
 = 
�n
[
MP_BC_LOAD_FAST_MULTI
 - (
mp_�t_t
)
�
[-1]];

1283 
l�d_check
;

1285 
	`ENTRY
(
MP_BC_STORE_FAST_MULTI
):

1286 
�n
[
MP_BC_STORE_FAST_MULTI
 - (
mp_�t_t
)
�
[-1]] = 
	`POP
();

1287 
	`DISPATCH
();

1289 
	`ENTRY
(
MP_BC_UNARY_OP_MULTI
):

1290 
	`MARK_EXC_IP_SELECTIVE
();

1291 
	`SET_TOP
(
	`mp_u�ry_�
(
�
[-1] - 
MP_BC_UNARY_OP_MULTI
, 
	`TOP
()));

1292 
	`DISPATCH
();

1294 
	`ENTRY
(
MP_BC_BINARY_OP_MULTI
): {

1295 
	`MARK_EXC_IP_SELECTIVE
();

1296 
mp_obj_t
 
rhs
 = 
	`POP
();

1297 
mp_obj_t
 
lhs
 = 
	`TOP
();

1298 
	`SET_TOP
(
	`mp_b��y_�
(
�
[-1] - 
MP_BC_BINARY_OP_MULTI
, 
lhs
, 
rhs
));

1299 
	`DISPATCH
();

1302 
ENTRY_DEFAULT
:

1303 
	`MARK_EXC_IP_SELECTIVE
();

1305 
ENTRY_DEFAULT
:

1306 i�(
�
[-1] < 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 + 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM
) {

1307 
	`PUSH
(
	`MP_OBJ_NEW_SMALL_INT
((
mp_�t_t
)
�
[-1] - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 - 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS
));

1308 
	`DISPATCH
();

1309 } i�(
�
[-1] < 
MP_BC_LOAD_FAST_MULTI
 + 
MP_BC_LOAD_FAST_MULTI_NUM
) {

1310 
obj_sh�ed
 = 
�n
[
MP_BC_LOAD_FAST_MULTI
 - (
mp_�t_t
)
�
[-1]];

1311 
l�d_check
;

1312 } i�(
�
[-1] < 
MP_BC_STORE_FAST_MULTI
 + 
MP_BC_STORE_FAST_MULTI_NUM
) {

1313 
�n
[
MP_BC_STORE_FAST_MULTI
 - (
mp_�t_t
)
�
[-1]] = 
	`POP
();

1314 
	`DISPATCH
();

1315 } i�(
�
[-1] < 
MP_BC_UNARY_OP_MULTI
 + 
MP_BC_UNARY_OP_MULTI_NUM
) {

1316 
	`SET_TOP
(
	`mp_u�ry_�
(
�
[-1] - 
MP_BC_UNARY_OP_MULTI
, 
	`TOP
()));

1317 
	`DISPATCH
();

1318 } i�(
�
[-1] < 
MP_BC_BINARY_OP_MULTI
 + 
MP_BC_BINARY_OP_MULTI_NUM
) {

1319 
mp_obj_t
 
rhs
 = 
	`POP
();

1320 
mp_obj_t
 
lhs
 = 
	`TOP
();

1321 
	`SET_TOP
(
	`mp_b��y_�
(
�
[-1] - 
MP_BC_BINARY_OP_MULTI
, 
lhs
, 
rhs
));

1322 
	`DISPATCH
();

1326 
mp_obj_t
 
obj
 = 
	`mp_obj_�w_ex��i�_msg
(&
mp_ty�_N�Im�em��dE��
, 
	`MP_ERROR_TEXT
("opcode"));

1327 
	`�r_p�
();

1328 
code_��e
->
��e
[0] = 
obj
;

1329 
	`FRAME_LEAVE
();

1330  
MP_VM_RETURN_EXCEPTION
;

1333 #i�!
MICROPY_OPT_COMPUTED_GOTO


1337 
�nd�g_ex��i�_check
:

1342 
MICROPY_VM_HOOK_LOOP


1349 #i�
MICROPY_ENABLE_SCHEDULER


1350 #i�
MICROPY_PY_THREAD


1352 
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_PENDING
 || 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
�!�
MP_OBJ_NULL


1355 
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_PENDING


1359 
	`MP_STATE_THREAD
(
mp_�nd�g_ex��i�
�!�
MP_OBJ_NULL


1361 #i�
MICROPY_ENABLE_VM_ABORT


1363 || 
	`MP_STATE_VM
(
vm_ab�t
)

1366 
	`MARK_EXC_IP_SELECTIVE
();

1367 
	`mp_h�d�_�nd�g
(
�ue
);

1370 #i�
MICROPY_PY_THREAD_GIL


1371 #i�
MICROPY_PY_THREAD_GIL_VM_DIVISOR


1373 i�(--
g�_divis�
 == 0)

1376 #i�
MICROPY_PY_THREAD_GIL_VM_DIVISOR


1377 
g�_divis�
 = 
MICROPY_PY_THREAD_GIL_VM_DIVISOR
;

1379 #i�
MICROPY_ENABLE_SCHEDULER


1381 i�(
	`MP_STATE_VM
(
sched_��e
�=�
MP_SCHED_IDLE
)

1384 
	`MP_THREAD_GIL_EXIT
();

1385 
	`MP_THREAD_GIL_ENTER
();

1393 
ex��i�_h�d�r
:

1396 #i�
MICROPY_PY_SYS_EXC_INFO


1397 
	`MP_STATE_VM
(
cur_ex��i�
��
�r
.
�t_v�
;

1400 #i�
SELECTIVE_EXC_IP


1402 
code_��e
->
�
 -= 1;

1405 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(((
mp_obj_ba�_t
*)
�r
.
�t_v�
)->
ty�
), MP_OBJ_FROM_PTR(&
mp_ty�_St�I��ti�
))) {

1407 i�(*
code_��e
->
�
 =�
MP_BC_FOR_ITER
) {

1408 cڡ 
by�
 *
�
 = 
code_��e
->ip + 1;

1409 
DECODE_ULABEL
;

1410 
code_��e
->
�
 = i�+ 
u�b
;

1411 
code_��e
->
�
 -�
MP_OBJ_ITER_BUF_NSLOTS
;

1412 
ou�r_di��ch_lo�
;

1413 } i�(*
code_��e
->
�
 =�
MP_BC_YIELD_FROM
) {

1417 *
code_��e
->
�
 = 
	`mp_obj_ex��i�_g�_v�ue
(
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
));

1418 
code_��e
->
�
++;

1419 
ou�r_di��ch_lo�
;

1423 #i�
MICROPY_PY_SYS_SETTRACE


1425 i�(
	`mp_obj_is_sub�ass_�
(
	`MP_OBJ_FROM_PTR
(((
mp_obj_ba�_t
*)
�r
.
�t_v�
)->
ty�
), MP_OBJ_FROM_PTR(&
mp_ty�_Ex��i�
))) {

1426 
	`TRACE_TICK
(
code_��e
->
�
, code_��e->
�
, 
�ue
 );

1430 #i�
MICROPY_STACKLESS


1431 
unw�d_lo�
:

1437 i�(
�r
.
�t_v�
 !�&
mp_cڡ_G����Ex�_obj


1438 && *
code_��e
->
�
 !�
MP_BC_END_FINALLY


1439 && *
code_��e
->
�
 !�
MP_BC_RAISE_LAST
) {

1440 cڡ 
by�
 *
�
 = 
code_��e
->
fun_bc
->
by�code
;

1441 
	`MP_BC_PRELUDE_SIG_DECODE
(
�
);

1442 
	`MP_BC_PRELUDE_SIZE_DECODE
(
�
);

1443 cڡ 
by�
 *
l�e_�fo_t�
 = 
�
 + 
n_�fo
;

1444 cڡ 
by�
 *
by�code_��t
 = 
�
 + 
n_�fo
 + 
n_��
;

1445 
size_t
 
bc
 = 
code_��e
->
�
 - 
by�code_��t
;

1446 
q�r
 
block_�me
 = 
	`mp_decode_u�t_v�ue
(
�
);

1447 
size_t
 
i
 = 0; i < 1 + 
n_pos_�gs
 + 
n_kw�ly_�gs
; ++i) {

1448 
�
 = 
	`mp_decode_u�t_sk�
(ip);

1450 #i�
MICROPY_EMIT_BYTECODE_USES_QSTR_TABLE


1451 
block_�me
 = 
code_��e
->
fun_bc
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[block_name];

1452 
q�r
 
sour�_f�e
 = 
code_��e
->
fun_bc
->
cڋxt
->
cڡ�ts
.
q�r_�b�
[0];

1454 
q�r
 
sour�_f�e
 = 
code_��e
->
fun_bc
->
cڋxt
->
cڡ�ts
.source_file;

1456 
size_t
 
sour�_l�e
 = 
	`mp_by�code_g�_sour�_l�e
(
�
, 
l�e_�fo_t�
, 
bc
);

1457 
	`mp_obj_ex��i�_add_�a�back
(
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
), 
sour�_f�e
, 
sour�_l�e
, 
block_�me
);

1460 
exc_�
 >�
exc_�ack
 &&�xc_�->
h�d�r
 <�
code_��e
->
�
) {

1464 
	`as��
(
exc_�
 >�
exc_�ack
);

1470 
	`POP_EXC_BLOCK
();

1474 i�(
exc_�
 >�
exc_�ack


1475 #ifde�
ORB_ENABLE_INTERRUPT


1476 && !
	`MP_STATE_VM
(
�b_���u�_�je�ed
)

1480 
code_��e
->
�
 = 
exc_�
->
h�d�r
;

1481 
mp_obj_t
 *
�
 = 
	`MP_TAGPTR_PTR
(
exc_�
->
v�_�
);

1483 
exc_�
->
�ev_exc
 = 
�r
.
�t_v�
;

1485 
	`PUSH
(
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
));

1486 
code_��e
->
�
 = sp;

1488 #i�
MICROPY_STACKLESS


1489 } i�(
code_��e
->
�ev
 !�
NULL
) {

1490 
	`mp_glob�s_�t
(
code_��e
->
�d_glob�s
);

1491 
mp_code_��e_t
 *
�w_code_��e
 = 
code_��e
->
�ev
;

1492 #i�
MICROPY_ENABLE_PYSTACK


1497 
	`mp_n�lo�l_�
(
code_��e
, (
mp_code_��e_t
));

1499 
code_��e
 = 
�w_code_��e
;

1500 
size_t
 
n_��e
 = 
code_��e
->n_state;

1501 
�n
 = &
code_��e
->
��e
[
n_��e
 - 1];

1502 
exc_�ack
 = (
mp_exc_�ack_t
*)(
code_��e
->
��e
 + 
n_��e
);

1504 
exc_�
 = 
	`MP_CODE_STATE_EXC_SP_IDX_TO_PTR
(
exc_�ack
, 
code_��e
->
exc_�_idx
);

1505 
unw�d_lo�
;

1508 
code_��e
->
��e
[0] = 
	`MP_OBJ_FROM_PTR
(
�r
.
�t_v�
);

1509 
	`FRAME_LEAVE
();

1510  
MP_VM_RETURN_EXCEPTION
;

1514 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vmentrytable.h

29 #i�
__��g__


30 #�agm�
��g
 
d�gno�ic
 
push


31 #�agm�
��g
 
d�gno�ic
 
ign�ed
 "-Winitializer-overrides"

33 #i�
__GNUC__
 >= 5

34 #�agm�
GCC
 
d�gno�ic
 
push


35 #�agm�
GCC
 
d�gno�ic
 
ign�ed
 "-Woverride-init"

38 cڡ *cڡ 
	g��y_�b�
[256] = {

39 [0 ... 255] = &&
��y_de�u�
,

40 [
MP_BC_LOAD_CONST_FALSE
] = &&
��y_MP_BC_LOAD_CONST_FALSE
,

41 [
MP_BC_LOAD_CONST_NONE
] = &&
��y_MP_BC_LOAD_CONST_NONE
,

42 [
MP_BC_LOAD_CONST_TRUE
] = &&
��y_MP_BC_LOAD_CONST_TRUE
,

43 [
MP_BC_LOAD_CONST_SMALL_INT
] = &&
��y_MP_BC_LOAD_CONST_SMALL_INT
,

44 [
MP_BC_LOAD_CONST_STRING
] = &&
��y_MP_BC_LOAD_CONST_STRING
,

45 [
MP_BC_LOAD_CONST_OBJ
] = &&
��y_MP_BC_LOAD_CONST_OBJ
,

46 [
MP_BC_LOAD_NULL
] = &&
��y_MP_BC_LOAD_NULL
,

47 [
MP_BC_LOAD_FAST_N
] = &&
��y_MP_BC_LOAD_FAST_N
,

48 [
MP_BC_LOAD_DEREF
] = &&
��y_MP_BC_LOAD_DEREF
,

49 [
MP_BC_LOAD_NAME
] = &&
��y_MP_BC_LOAD_NAME
,

50 [
MP_BC_LOAD_GLOBAL
] = &&
��y_MP_BC_LOAD_GLOBAL
,

51 [
MP_BC_LOAD_ATTR
] = &&
��y_MP_BC_LOAD_ATTR
,

52 [
MP_BC_LOAD_METHOD
] = &&
��y_MP_BC_LOAD_METHOD
,

53 [
MP_BC_LOAD_SUPER_METHOD
] = &&
��y_MP_BC_LOAD_SUPER_METHOD
,

54 [
MP_BC_LOAD_BUILD_CLASS
] = &&
��y_MP_BC_LOAD_BUILD_CLASS
,

55 [
MP_BC_LOAD_SUBSCR
] = &&
��y_MP_BC_LOAD_SUBSCR
,

56 [
MP_BC_STORE_FAST_N
] = &&
��y_MP_BC_STORE_FAST_N
,

57 [
MP_BC_STORE_DEREF
] = &&
��y_MP_BC_STORE_DEREF
,

58 [
MP_BC_STORE_NAME
] = &&
��y_MP_BC_STORE_NAME
,

59 [
MP_BC_STORE_GLOBAL
] = &&
��y_MP_BC_STORE_GLOBAL
,

60 [
MP_BC_STORE_ATTR
] = &&
��y_MP_BC_STORE_ATTR
,

61 [
MP_BC_STORE_SUBSCR
] = &&
��y_MP_BC_STORE_SUBSCR
,

62 [
MP_BC_DELETE_FAST
] = &&
��y_MP_BC_DELETE_FAST
,

63 [
MP_BC_DELETE_DEREF
] = &&
��y_MP_BC_DELETE_DEREF
,

64 [
MP_BC_DELETE_NAME
] = &&
��y_MP_BC_DELETE_NAME
,

65 [
MP_BC_DELETE_GLOBAL
] = &&
��y_MP_BC_DELETE_GLOBAL
,

66 [
MP_BC_DUP_TOP
] = &&
��y_MP_BC_DUP_TOP
,

67 [
MP_BC_DUP_TOP_TWO
] = &&
��y_MP_BC_DUP_TOP_TWO
,

68 [
MP_BC_POP_TOP
] = &&
��y_MP_BC_POP_TOP
,

69 [
MP_BC_ROT_TWO
] = &&
��y_MP_BC_ROT_TWO
,

70 [
MP_BC_ROT_THREE
] = &&
��y_MP_BC_ROT_THREE
,

71 [
MP_BC_JUMP
] = &&
��y_MP_BC_JUMP
,

72 [
MP_BC_POP_JUMP_IF_TRUE
] = &&
��y_MP_BC_POP_JUMP_IF_TRUE
,

73 [
MP_BC_POP_JUMP_IF_FALSE
] = &&
��y_MP_BC_POP_JUMP_IF_FALSE
,

74 [
MP_BC_JUMP_IF_TRUE_OR_POP
] = &&
��y_MP_BC_JUMP_IF_TRUE_OR_POP
,

75 [
MP_BC_JUMP_IF_FALSE_OR_POP
] = &&
��y_MP_BC_JUMP_IF_FALSE_OR_POP
,

76 [
MP_BC_SETUP_WITH
] = &&
��y_MP_BC_SETUP_WITH
,

77 [
MP_BC_WITH_CLEANUP
] = &&
��y_MP_BC_WITH_CLEANUP
,

78 [
MP_BC_UNWIND_JUMP
] = &&
��y_MP_BC_UNWIND_JUMP
,

79 [
MP_BC_SETUP_EXCEPT
] = &&
��y_MP_BC_SETUP_EXCEPT
,

80 [
MP_BC_SETUP_FINALLY
] = &&
��y_MP_BC_SETUP_FINALLY
,

81 [
MP_BC_END_FINALLY
] = &&
��y_MP_BC_END_FINALLY
,

82 [
MP_BC_GET_ITER
] = &&
��y_MP_BC_GET_ITER
,

83 [
MP_BC_GET_ITER_STACK
] = &&
��y_MP_BC_GET_ITER_STACK
,

84 [
MP_BC_FOR_ITER
] = &&
��y_MP_BC_FOR_ITER
,

85 [
MP_BC_POP_EXCEPT_JUMP
] = &&
��y_MP_BC_POP_EXCEPT_JUMP
,

86 [
MP_BC_BUILD_TUPLE
] = &&
��y_MP_BC_BUILD_TUPLE
,

87 [
MP_BC_BUILD_LIST
] = &&
��y_MP_BC_BUILD_LIST
,

88 [
MP_BC_BUILD_MAP
] = &&
��y_MP_BC_BUILD_MAP
,

89 [
MP_BC_STORE_MAP
] = &&
��y_MP_BC_STORE_MAP
,

90 #i�
MICROPY_PY_BUILTINS_SET


91 [
MP_BC_BUILD_SET
] = &&
��y_MP_BC_BUILD_SET
,

93 #i�
MICROPY_PY_BUILTINS_SLICE


94 [
MP_BC_BUILD_SLICE
] = &&
��y_MP_BC_BUILD_SLICE
,

96 [
MP_BC_STORE_COMP
] = &&
��y_MP_BC_STORE_COMP
,

97 [
MP_BC_UNPACK_SEQUENCE
] = &&
��y_MP_BC_UNPACK_SEQUENCE
,

98 [
MP_BC_UNPACK_EX
] = &&
��y_MP_BC_UNPACK_EX
,

99 [
MP_BC_MAKE_FUNCTION
] = &&
��y_MP_BC_MAKE_FUNCTION
,

100 [
MP_BC_MAKE_FUNCTION_DEFARGS
] = &&
��y_MP_BC_MAKE_FUNCTION_DEFARGS
,

101 [
MP_BC_MAKE_CLOSURE
] = &&
��y_MP_BC_MAKE_CLOSURE
,

102 [
MP_BC_MAKE_CLOSURE_DEFARGS
] = &&
��y_MP_BC_MAKE_CLOSURE_DEFARGS
,

103 [
MP_BC_CALL_FUNCTION
] = &&
��y_MP_BC_CALL_FUNCTION
,

104 [
MP_BC_CALL_FUNCTION_VAR_KW
] = &&
��y_MP_BC_CALL_FUNCTION_VAR_KW
,

105 [
MP_BC_CALL_METHOD
] = &&
��y_MP_BC_CALL_METHOD
,

106 [
MP_BC_CALL_METHOD_VAR_KW
] = &&
��y_MP_BC_CALL_METHOD_VAR_KW
,

107 [
MP_BC_RETURN_VALUE
] = &&
��y_MP_BC_RETURN_VALUE
,

108 [
MP_BC_RAISE_LAST
] = &&
��y_MP_BC_RAISE_LAST
,

109 [
MP_BC_RAISE_OBJ
] = &&
��y_MP_BC_RAISE_OBJ
,

110 [
MP_BC_RAISE_FROM
] = &&
��y_MP_BC_RAISE_FROM
,

111 [
MP_BC_YIELD_VALUE
] = &&
��y_MP_BC_YIELD_VALUE
,

112 [
MP_BC_YIELD_FROM
] = &&
��y_MP_BC_YIELD_FROM
,

113 [
MP_BC_IMPORT_NAME
] = &&
��y_MP_BC_IMPORT_NAME
,

114 [
MP_BC_IMPORT_FROM
] = &&
��y_MP_BC_IMPORT_FROM
,

115 [
MP_BC_IMPORT_STAR
] = &&
��y_MP_BC_IMPORT_STAR
,

116 [
MP_BC_LOAD_CONST_SMALL_INT_MULTI
 ... MP_BC_LOAD_CONST_SMALL_INT_MULTI + 
MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM
 - 1] = &&
��y_MP_BC_LOAD_CONST_SMALL_INT_MULTI
,

117 [
MP_BC_LOAD_FAST_MULTI
 ... MP_BC_LOAD_FAST_MULTI + 
MP_BC_LOAD_FAST_MULTI_NUM
 - 1] = &&
��y_MP_BC_LOAD_FAST_MULTI
,

118 [
MP_BC_STORE_FAST_MULTI
 ... MP_BC_STORE_FAST_MULTI + 
MP_BC_STORE_FAST_MULTI_NUM
 - 1] = &&
��y_MP_BC_STORE_FAST_MULTI
,

119 [
MP_BC_UNARY_OP_MULTI
 ... MP_BC_UNARY_OP_MULTI + 
MP_BC_UNARY_OP_MULTI_NUM
 - 1] = &&
��y_MP_BC_UNARY_OP_MULTI
,

120 [
MP_BC_BINARY_OP_MULTI
 ... MP_BC_BINARY_OP_MULTI + 
MP_BC_BINARY_OP_MULTI_NUM
 - 1] = &&
��y_MP_BC_BINARY_OP_MULTI
,

123 #i�
__��g__


124 #�agm�
��g
 
d�gno�ic
 
p�


126 #i�
__GNUC__
 >= 5

127 #�agm�
GCC
 
d�gno�ic
 
p�


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vstr.c

28 
	~<�dio.h
>

29 
	~<�d�g.h
>

30 
	~<�r�g.h
>

31 
	~<as��.h
>

33 
	~"py/mpc�fig.h
"

34 
	~"py/ru�ime.h
"

35 
	~"py/m�r�t.h
"

38 
	#ROUND_ALLOC
(
a
�((��& ((~0U�- 7)�+ 8)

	)

41 
	$v�r_��
(
v�r_t
 *
v�r
, 
size_t
 
�loc
) {

42 i�(
�loc
 < 1) {

43 
�loc
 = 1;

45 
v�r
->
�loc
 =�lloc;

46 
v�r
->
�n
 = 0;

47 
v�r
->
buf
 = 
	`m_�w
(, v�r->
�loc
);

48 
v�r
->
fixed_buf
 = 
�l�
;

49 
	}
}

53 
	$v�r_��_�n
(
v�r_t
 *
v�r
, 
size_t
 
�n
) {

54 
	`v�r_��
(
v�r
, 
�n
 + 1);

55 
v�r
->
�n
 =�en;

56 
	}
}

58 
	$v�r_��_fixed_buf
(
v�r_t
 *
v�r
, 
size_t
 
�loc
, *
buf
) {

59 
v�r
->
�loc
 =�lloc;

60 
v�r
->
�n
 = 0;

61 
v�r
->
buf
 = buf;

62 
v�r
->
fixed_buf
 = 
�ue
;

63 
	}
}

65 
	$v�r_��_��t
(
v�r_t
 *
v�r
, 
size_t
 
�loc
, 
mp_��t_t
 *
��t
) {

66 
	`v�r_��
(
v�r
, 
�loc
);

67 
��t
->
d�a
 = 
v�r
;

68 
��t
->
��t_��
 = (
mp_��t_��_t
)
v�r_add_��
;

69 
	}
}

71 
	$v�r_��r
(
v�r_t
 *
v�r
) {

72 i�(!
v�r
->
fixed_buf
) {

73 
	`m_d�
(, 
v�r
->
buf
, v�r->
�loc
);

75 
v�r
->
buf
 = 
NULL
;

76 
	}
}

78 
v�r_t
 *
	$v�r_�w
(
size_t
 
�loc
) {

79 
v�r_t
 *
v�r
 = 
	`m_�w_obj
(vstr_t);

80 
	`v�r_��
(
v�r
, 
�loc
);

81  
v�r
;

82 
	}
}

84 
	$v�r_�
(
v�r_t
 *
v�r
) {

85 i�(
v�r
 !�
NULL
) {

86 i�(!
v�r
->
fixed_buf
) {

87 
	`m_d�
(, 
v�r
->
buf
, v�r->
�loc
);

89 
	`m_d�_obj
(
v�r_t
, 
v�r
);

91 
	}
}

94 *
	$v�r_ex�nd
(
v�r_t
 *
v�r
, 
size_t
 
size
) {

95 i�(
v�r
->
fixed_buf
) {

98 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
NULL
);

100 *
�w_buf
 = 
	`m_��w
(, 
v�r
->
buf
, v�r->
�loc
, v�r->�lo�+ 
size
);

101 *
p
 = 
�w_buf
 + 
v�r
->
�loc
;

102 
v�r
->
�loc
 +�
size
;

103 
v�r
->
buf
 = 
�w_buf
;

104  
p
;

105 
	}
}

107 
	$v�r_�su�_ex�a
(
v�r_t
 *
v�r
, 
size_t
 
size
) {

108 i�(
v�r
->
�n
 + 
size
 > v�r->
�loc
) {

109 i�(
v�r
->
fixed_buf
) {

112 
	`mp_�i�_msg
(&
mp_ty�_Ru�imeE��
, 
NULL
);

114 
size_t
 
�w_�loc
 = 
	`ROUND_ALLOC
((
v�r
->
�n
 + 
size
) + 16);

115 *
�w_buf
 = 
	`m_��w
(, 
v�r
->
buf
, v�r->
�loc
, 
�w_�loc
);

116 
v�r
->
�loc
 = 
�w_�loc
;

117 
v�r
->
buf
 = 
�w_buf
;

119 
	}
}

121 
	$v�r_h�t_size
(
v�r_t
 *
v�r
, 
size_t
 
size
) {

122 
	`v�r_�su�_ex�a
(
v�r
, 
size
);

123 
	}
}

125 *
	$v�r_add_�n
(
v�r_t
 *
v�r
, 
size_t
 
�n
) {

126 
	`v�r_�su�_ex�a
(
v�r
, 
�n
);

127 *
buf
 = 
v�r
->bu�+ v�r->
�n
;

128 
v�r
->
�n
 +=�en;

129  
buf
;

130 
	}
}

133 *
	$v�r_nu�_�rm��ed_�r
(
v�r_t
 *
v�r
) {

135 i�(
v�r
->
�loc
 =�v�r->
�n
) {

136 
	`v�r_ex�nd
(
v�r
, 1);

138 
v�r
->
buf
[v�r->
�n
] = '\0';

139  
v�r
->
buf
;

140 
	}
}

142 
	$v�r_add_by�
(
v�r_t
 *
v�r
, 
by�
 
b
) {

143 
by�
 *
buf
 = (by� *)
	`v�r_add_�n
(
v�r
, 1);

144 
buf
[0] = 
b
;

145 
	}
}

147 
	$v�r_add_ch�
(
v�r_t
 *
v�r
, 
unich�
 
c
) {

148 #i�
MICROPY_PY_BUILTINS_STR_UNICODE


151 i�(
c
 < 0x80) {

152 
by�
 *
buf
 = (by� *)
	`v�r_add_�n
(
v�r
, 1);

153 *
buf
 = (
by�
)
c
;

154 } i�(
c
 < 0x800) {

155 
by�
 *
buf
 = (by� *)
	`v�r_add_�n
(
v�r
, 2);

156 
buf
[0] = (
c
 >> 6) | 0xC0;

157 
buf
[1] = (
c
 & 0x3F) | 0x80;

158 } i�(
c
 < 0x10000) {

159 
by�
 *
buf
 = (by� *)
	`v�r_add_�n
(
v�r
, 3);

160 
buf
[0] = (
c
 >> 12) | 0xE0;

161 
buf
[1] = ((
c
 >> 6) & 0x3F) | 0x80;

162 
buf
[2] = (
c
 & 0x3F) | 0x80;

164 
	`as��
(
c
 < 0x110000);

165 
by�
 *
buf
 = (by� *)
	`v�r_add_�n
(
v�r
, 4);

166 
buf
[0] = (
c
 >> 18) | 0xF0;

167 
buf
[1] = ((
c
 >> 12) & 0x3F) | 0x80;

168 
buf
[2] = ((
c
 >> 6) & 0x3F) | 0x80;

169 
buf
[3] = (
c
 & 0x3F) | 0x80;

172 
	`v�r_add_by�
(
v�r
, 
c
);

174 
	}
}

176 
	$v�r_add_�r
(
v�r_t
 *
v�r
, cڡ *
�r
) {

177 
	`v�r_add_��
(
v�r
, 
�r
, 
	`���
(str));

178 
	}
}

180 
	$v�r_add_��
(
v�r_t
 *
v�r
, cڡ *
�r
, 
size_t
 
�n
) {

181 
	`v�r_�su�_ex�a
(
v�r
, 
�n
);

182 
	`memmove
(
v�r
->
buf
 + v�r->
�n
, 
�r
,�en);

183 
v�r
->
�n
 +=�en;

184 
	}
}

186 *
	$v�r_�s_b�nk_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�_pos
, size_�
by�_�n
) {

187 
size_t
 
l
 = 
v�r
->
�n
;

188 i�(
by�_pos
 > 
l
) {

189 
by�_pos
 = 
l
;

191 i�(
by�_�n
 > 0) {

193 
	`v�r_�su�_ex�a
(
v�r
, 
by�_�n
);

195 
	`memmove
(
v�r
->
buf
 + 
by�_pos
 + 
by�_�n
, v�r->bu�+ by�_pos, 
l
 - byte_pos);

197 
v�r
->
�n
 +�
by�_�n
;

199  
v�r
->
buf
 + 
by�_pos
;

200 
	}
}

202 
	$v�r_�s_by�
(
v�r_t
 *
v�r
, 
size_t
 
by�_pos
, 
by�
 
b
) {

203 *
s
 = 
	`v�r_�s_b�nk_by�s
(
v�r
, 
by�_pos
, 1);

204 *
s
 = 
b
;

205 
	}
}

207 
	$v�r_�s_ch�
(
v�r_t
 *
v�r
, 
size_t
 
ch�_pos
, 
unich�
 
chr
) {

209 *
s
 = 
	`v�r_�s_b�nk_by�s
(
v�r
, 
ch�_pos
, 1);

210 *
s
 = 
chr
;

211 
	}
}

213 
	$v�r_cut_h�d_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�s_to_cut
) {

214 
	`v�r_cut_out_by�s
(
v�r
, 0, 
by�s_to_cut
);

215 
	}
}

217 
	$v�r_cut_��_by�s
(
v�r_t
 *
v�r
, 
size_t
 
�n
) {

218 i�(
�n
 > 
v�r
->len) {

219 
v�r
->
�n
 = 0;

221 
v�r
->
�n
 -=�en;

223 
	}
}

225 
	$v�r_cut_out_by�s
(
v�r_t
 *
v�r
, 
size_t
 
by�_pos
, size_�
by�s_to_cut
) {

226 i�(
by�_pos
 >�
v�r
->
�n
) {

228 } i�(
by�_pos
 + 
by�s_to_cut
 >�
v�r
->
�n
) {

229 
v�r
->
�n
 = 
by�_pos
;

231 
	`memmove
(
v�r
->
buf
 + 
by�_pos
, v�r->bu�+ by�_po�+ 
by�s_to_cut
, v�r->
�n
 - byte_pos - bytes_to_cut);

232 
v�r
->
�n
 -�
by�s_to_cut
;

234 
	}
}

236 
	$v�r_��tf
(
v�r_t
 *
v�r
, cڡ *
fmt
, ...) {

237 
va_li�
 
�
;

238 
	`va_��t
(
�
, 
fmt
);

239 
	`v�r_v��tf
(
v�r
, 
fmt
, 
�
);

240 
	`va_�d
(
�
);

241 
	}
}

243 
	$v�r_v��tf
(
v�r_t
 *
v�r
, cڡ *
fmt
, 
va_li�
 
�
) {

244 
mp_��t_t
 
��t
 = {
v�r
, (
mp_��t_��_t
)
v�r_add_��
};

245 
	`mp_v��tf
(&
��t
, 
fmt
, 
�
);

246 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\warning.c

28 
	~<�d�g.h
>

29 
	~<�dio.h
>

31 
	~"py/em�.h
"

32 
	~"py/ru�ime.h
"

34 #i�
MICROPY_WARNINGS


36 
	$mp_w�n�g
(cڡ *
��g�y
, cڡ *
msg
, ...) {

37 i�(
��g�y
 =�
NULL
) {

38 
��g�y
 = "Warning";

40 
	`mp_��t_�r
(
MICROPY_ERROR_PRINTER
, 
��g�y
);

41 
	`mp_��t_�r
(
MICROPY_ERROR_PRINTER
, ": ");

43 
va_li�
 
�gs
;

44 
	`va_��t
(
�gs
, 
msg
);

45 
	`mp_v��tf
(
MICROPY_ERROR_PRINTER
, 
msg
, 
�gs
);

46 
	`mp_��t_�r
(
MICROPY_ERROR_PRINTER
, "\n");

47 
	`va_�d
(
�gs
);

48 
	}
}

50 
	$mp_em��r_w�n�g
(
�ss_k�d_t
 
�ss
, cڡ *
msg
) {

51 i�(
�ss
 =�
MP_PASS_CODE_SIZE
) {

52 
	`mp_w�n�g
(
NULL
, 
msg
);

54 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\shared\runtime\gchelper.h

26 #i�de�
MICROPY_INCLUDED_LIB_UTILS_GCHELPER_H


27 
	#MICROPY_INCLUDED_LIB_UTILS_GCHELPER_H


	)

29 
	~<�d�t.h
>

31 #i�
MICROPY_GCREGS_SETJMP


32 
	~<�tjmp.h
>

33 
jmp_buf
 
	tgc_h��r_�gs_t
;

36 #i�
def�ed
(
__x86_64__
)

37 
u���_t
 
	tgc_h��r_�gs_t
[6];

38 #�i�
def�ed
(
__i386__
)

39 
u���_t
 
	tgc_h��r_�gs_t
[4];

40 #�i�
def�ed
(
__thumb2__
�|| def�ed(
__thumb__
�|| def�ed(
__�m__
)

41 
u���_t
 
	tgc_h��r_�gs_t
[10];

42 #�i�
def�ed
(
__�rch64__
)

43 
u���_t
 
	tgc_h��r_�gs_t
[11];

44 #�i�
def�ed
(
__riscv
�&& (
__riscv_x�n
 <= 64)

45 
u���_t
 
	tgc_h��r_�gs_t
[12];

50 
gc_h��r_c���_�gs_�d_�ack
();

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\shared\runtime\gchelper_generic.c

27 
	~<�dio.h
>

29 
	~"py/mp��e.h
"

30 
	~"py/gc.h
"

31 
	~"sh�ed/ru�ime/gch��r.h
"

33 #i�
MICROPY_ENABLE_GC


37 #i�!
MICROPY_GCREGS_SETJMP


43 #i�
def�ed
(
__x86_64__
)

45 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

46 
rbx
 
	`asm
 ("rbx");

47 
rbp
 
	`asm
 ("rbp");

48 
r12
 
	`asm
 ("r12");

49 
r13
 
	`asm
 ("r13");

50 
r14
 
	`asm
 ("r14");

51 
r15
 
	`asm
 ("r15");

52 #ifde�
__��g__


59 
	`asm
 ("" : "�" (
rbx
));

60 
	`asm
 ("" : "�" (
rbp
));

61 
	`asm
 ("" : "�" (
r12
));

62 
	`asm
 ("" : "�" (
r13
));

63 
	`asm
 ("" : "�" (
r14
));

64 
	`asm
 ("" : "�" (
r15
));

66 
�r
[0] = 
rbx
;

67 
�r
[1] = 
rbp
;

68 
�r
[2] = 
r12
;

69 
�r
[3] = 
r13
;

70 
�r
[4] = 
r14
;

71 
�r
[5] = 
r15
;

72 
	}
}

74 #�i�
def�ed
(
__i386__
)

76 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

77 
ebx
 
	`asm
 ("ebx");

78 
esi
 
	`asm
 ("esi");

79 
edi
 
	`asm
 ("edi");

80 
ebp
 
	`asm
 ("ebp");

81 #ifde�
__��g__


88 
	`asm
 ("" : "�" (
ebx
));

89 
	`asm
 ("" : "�" (
esi
));

90 
	`asm
 ("" : "�" (
edi
));

91 
	`asm
 ("" : "�" (
ebp
));

93 
�r
[0] = 
ebx
;

94 
�r
[1] = 
esi
;

95 
�r
[2] = 
edi
;

96 
�r
[3] = 
ebp
;

97 
	}
}

99 #�i�
def�ed
(
__thumb2__
�|| def�ed(
__thumb__
�|| def�ed(
__�m__
)

103 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

104 
r4
 
	`asm
 ("r4");

105 
r5
 
	`asm
 ("r5");

106 
r6
 
	`asm
 ("r6");

107 
r7
 
	`asm
 ("r7");

108 
r8
 
	`asm
 ("r8");

109 
r9
 
	`asm
 ("r9");

110 
r10
 
	`asm
 ("r10");

111 
r11
 
	`asm
 ("r11");

112 
r12
 
	`asm
 ("r12");

113 
r13
 
	`asm
 ("r13");

114 
�r
[0] = 
r4
;

115 
�r
[1] = 
r5
;

116 
�r
[2] = 
r6
;

117 
�r
[3] = 
r7
;

118 
�r
[4] = 
r8
;

119 
�r
[5] = 
r9
;

120 
�r
[6] = 
r10
;

121 
�r
[7] = 
r11
;

122 
�r
[8] = 
r12
;

123 
�r
[9] = 
r13
;

124 
	}
}

126 #�i�
def�ed
(
__�rch64__
)

128 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

129 cڡ 
x19
 
	`asm
 ("x19");

130 cڡ 
x20
 
	`asm
 ("x20");

131 cڡ 
x21
 
	`asm
 ("x21");

132 cڡ 
x22
 
	`asm
 ("x22");

133 cڡ 
x23
 
	`asm
 ("x23");

134 cڡ 
x24
 
	`asm
 ("x24");

135 cڡ 
x25
 
	`asm
 ("x25");

136 cڡ 
x26
 
	`asm
 ("x26");

137 cڡ 
x27
 
	`asm
 ("x27");

138 cڡ 
x28
 
	`asm
 ("x28");

139 cڡ 
x29
 
	`asm
 ("x29");

140 
�r
[0] = 
x19
;

141 
�r
[1] = 
x20
;

142 
�r
[2] = 
x21
;

143 
�r
[3] = 
x22
;

144 
�r
[4] = 
x23
;

145 
�r
[5] = 
x24
;

146 
�r
[6] = 
x25
;

147 
�r
[7] = 
x26
;

148 
�r
[8] = 
x27
;

149 
�r
[9] = 
x28
;

150 
�r
[10] = 
x29
;

151 
	}
}

153 #�i�
def�ed
(
__riscv
�&& (
__riscv_x�n
 <= 64)

158 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

159 
u���_t
 
s0
 
	`asm
 ("x8");

160 
u���_t
 
s1
 
	`asm
 ("x9");

161 
u���_t
 
s2
 
	`asm
 ("x18");

162 
u���_t
 
s3
 
	`asm
 ("x19");

163 
u���_t
 
s4
 
	`asm
 ("x20");

164 
u���_t
 
s5
 
	`asm
 ("x21");

165 
u���_t
 
s6
 
	`asm
 ("x22");

166 
u���_t
 
s7
 
	`asm
 ("x23");

167 
u���_t
 
s8
 
	`asm
 ("x24");

168 
u���_t
 
s9
 
	`asm
 ("x25");

169 
u���_t
 
s10
 
	`asm
 ("x26");

170 
u���_t
 
s11
 
	`asm
 ("x27");

171 
�r
[0] = 
s0
;

172 
�r
[1] = 
s1
;

173 
�r
[2] = 
s2
;

174 
�r
[3] = 
s3
;

175 
�r
[4] = 
s4
;

176 
�r
[5] = 
s5
;

177 
�r
[6] = 
s6
;

178 
�r
[7] = 
s7
;

179 
�r
[8] = 
s8
;

180 
�r
[9] = 
s9
;

181 
�r
[10] = 
s10
;

182 
�r
[11] = 
s11
;

183 
	}
}

196 
	$gc_h��r_g�_�gs
(
gc_h��r_�gs_t
 
�r
) {

197 
	`�tjmp
(
�r
);

198 
	}
}

207 
MP_NOINLINE
 
	$gc_h��r_c���_�gs_�d_�ack
() {

208 
gc_h��r_�gs_t
 
�gs
;

209 
	`gc_h��r_g�_�gs
(
�gs
);

211 **
�gs_�r
 = (**)(*)&
�gs
;

212 
	`gc_c���_ro�
(
�gs_�r
, ((
u���_t
)
	`MP_STATE_THREAD
(
�ack_t�
�- (u���_t)&
�gs
) / (uintptr_t));

213 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\mpconfigport.h

7 
	~<p�t/mpc�figp�t_comm�.h
>

9 
	#HEAP_SIZE_KB
 (32)

	)

12 
	#MICROPY_CONFIG_ROM_LEVEL
 (
MICROPY_CONFIG_ROM_LEVEL_MINIMUM
)

	)

14 
	#MICROPY_PERSISTENT_CODE_LOAD
 (1)

	)

15 
	#MICROPY_ENABLE_COMPILER
 (1)

	)

17 
	#MICROPY_ENABLE_GC
 (1)

	)

18 
	#MICROPY_PY_GC
 (1)

	)

19 
	#ORB_ENABLE_INTERRUPT
 (1)

	)

20 
	#ORB_ENABLE_MONITOR_STD_OUT
 (1)

	)

21 
	#MICROPY_FLOAT_IMPL
 (
MICROPY_FLOAT_IMPL_FLOAT
)

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Memory_C_Interface.cpp

1 
	~<�dio.h
>

2 
	~"A�Task.h
"

6 
��rMem�y
(){

7 
A�Task
::
��rMem�y
(
nuαr
);

10 
�tMem�y
(
u�t32_t
 
addr
, 
u�t8_t
 *
d�a
, u�t32_�
d�a_size
){

11 
A�Task
::
�tMem�y
(
nuαr
, 
addr
, 
d�a
, 
d�a_size
);

12 
�
(
d�a
);

15 
u�t8_t
* 
g�Mem�y
(
u�t32_t
 
addr
, u�t32_�
d�a_size
){

17 
u�t8_t
* 
mem�y
 = (u�t8_t*)
m�loc
(
d�a_size
);

19 
A�Task
::
g�Mem�y
(
nuαr
, 
addr
, 
mem�y
, 
d�a_size
);

21  
mem�y
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Memory_C_Interface.h

1 #i�de�
MEMORY_MOCKUP_H


2 
	#MEMORY_MOCKUP_H


	)

3 
	~<�dio.h
>

4 
	~"�d�t.h
"

5 
	~"�ddef.h
"

7 #ifde�
__�lu�lus


11 
��rMem�y
();

13 
�tMem�y
(
u�t32_t
 
addr
, 
u�t8_t
 *
d�a
, u�t32_�
d�a_size
);

15 
u�t8_t
* 
g�Mem�y
(
u�t32_t
 
addr
, u�t32_�
d�a_size
);

17 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Monitor_C_Interface.cpp

1 
	~"Mڙ�_C_I����.h
"

2 
	~"A�Task.h
"

3 
	~"Pyth�Task.h
"

4 
	~"Rem�e.h
"

8 
upd�eI�ut
(){

9 
Rem�e
* 
r
 = (Rem�e*�
g�Rem�eUsb
();

10 
r
->
upd�e
();

13 
u�t8_t
 
g�Mڙ�Key
(){

14 
upd�eI�ut
();

15  
A�Task
::
g�Mڙ�Key
(
nuαr
);

18 
��t
(
BYTE
 
l�e
, cڡ *
f�m�
, ...) {

19 
va_li�
 
�gs
;

20 
va_��t
(
�gs
, 
f�m�
);

21 
A�Task
::
�tMڙ�Text
(
nuαr
, 
l�e
, 
f�m�
, 
�gs
);

23 
va_�d
(
�gs
);

26 
�tMڙ�Text
(cڡ *
�r
, 
size_t
 
�n
){

28 
��t
(1, "%.*s", 
�n
, 
�r
);

29 
upd�eI�ut
();

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Monitor_C_Interface.h

1 #i�de�
MONITOR_MOCKUP_H


2 
	#MONITOR_MOCKUP_H


	)

3 
	~"�d�t.h
"

4 
	~"�ddef.h
"

6 #ifde�
__�lu�lus


11 
	eTa�e_�um


13 
Ke�e_Ta�e
 = 0,

15 
Ta�e_A1
 = 1,

16 
Ta�e_A2
 = 2,

17 
Ta�e_A3
 = 3,

18 
Ta�e_A4
 = 4,

19 
Ta�e_A5
 = 5,

20 
Ta�e_A6
 = 6,

21 
Ta�e_A7
 = 7,

22 
Ta�e_A8
 = 8,

24 
Ta�e_B1
 = 9,

25 
Ta�e_B2
 = 10,

26 
Ta�e_B3
 = 11,

28 
Ta�e_B4
 = 12,

29 
Ta�e_B5
 = 13,

30 
Ta�e_B6
 = 14,

32 
Ta�e_B7
 = 15,

33 
Ta�e_B8
 = 16,

34 
Ta�e_B9
 = 17,

36 
Ta�e_B10
 = 18,

37 
Ta�e_B11
 = 19,

38 
Ta�e_B12
 = 20,

40 
Ta�e_C1
 = 21,

44 
u�t8_t
 
g�Mڙ�Key
();

46 
�tMڙ�Text
(cڡ *
�r
, 
size_t
 
�n
);

48 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Motor_C_Interface.cpp

1 
	~"�d�t.h
"

2 
	~"A�Task.h
"

3 
	~"lib.h
"

7 
m��S�t�gs
(
u�t8_t
 
p�t
, 
u�t32_t
 
ticsP�R٩i�
,u�t8_�
acc
,u�t8_�
kp
,u�t8_�
ki
 ){

8 
A�Task
::
c�figM��
(
nuαr
 ,
p�t
, 
ticsP�R٩i�
, 
acc
, 
kp
, 
ki
);

11 
�tM��
�
u�t8_t
 
p�t
, u�t8_�
mode
, 
�t16_t
 
��d
, 
pos
 ){

12 
A�Task
::
�tM��
(
nuαr
, 
p�t
 , 
mode
 , 
��d
, 
pos
);

15 
	s_m��_�tu�_v�ues
{

16 
pwr
;

17 
��d
;

18 
pos
;

19 }
	tm��_�tu�_v�ues
;

21 
m��_�tu�_v�ues
* 
g�M��
(
u�t8_t
 
p�t
) {

22 
ORB
::
M��
 
m
 = 
A�Task
::
g�M��
(
nuαr
, 
p�t
);

24 
m��_�tu�_v�ues
* 
v�ues
 = (m��_�tu�_v�ues*)
m�loc
((motor_return_values));

25 i�(
v�ues
 =�
NULL
) {

26  
NULL
;

30 
v�ues
->
pwr
 = 
m
.pwr;

31 
v�ues
->
��d
 = 
m
.speed;

32 
v�ues
->
pos
 = 
m
.pos;

34  
v�ues
;

39 
�tM��Pow�
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
pow�
){

40 
��tf
("motor�ower\n");

43 
�tM��S�ed
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
��d
){

44 
��tf
("motor speed\n");

47 
�tM��Pos�i�
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
��d
, 
pos�i�
){

48 
��tf
("motor�osition\n");

51 
b�keM��
(
u�t8_t
 
p�t
){

52 
��tf
("brake motor\n");

55 
g�M��Pow�
(
u�t8_t
 
p�t
){

59 
g�M��S�ed
(
u�t8_t
 
p�t
){

63 
g�M��Pos�i�
(
u�t8_t
 
p�t
){

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Motor_C_Interface.h

1 #i�de�
MOTOR_MOCKUP_H


2 
	#MOTOR_MOCKUP_H


	)

3 
	~"�d�t.h
"

4 
	~"�ddef.h
"

6 #ifde�
__�lu�lus


11 
	eP�t


13 
M1
 = 0x00,

14 
M2
,

15 
M3
,

16 
M4


19 
	eD�e�i�


21 
FORWARD
 = +1,

22 
REVERSE
 = -1,

25 
	eM��Mode


27 
POWER_MODE
 = 0,

28 
BRAKE_MODE
 = 1,

29 
SPEED_MODE
 = 2,

30 
MOVETO_MODE
 = 3,

33 
m��S�t�gs
(
u�t8_t
 
p�t
, 
u�t32_t
 
ticsP�R٩i�
,u�t8_�
acc
,u�t8_�
kp
,u�t8_�
ki
 );

35 
�tM��
�
u�t8_t
 
p�t
, u�t8_�
mode
, 
�t16_t
 
��d
, 
pos
 );

37 
	s_m��_�tu�_v�ues
{

38 
pwr
;

39 
��d
;

40 
pos
;

41 }
	tm��_�tu�_v�ues
;

43 
m��_�tu�_v�ues
* 
g�M��
(
u�t8_t
 
p�t
);

47 
�tM��Pow�
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
pow�
);

49 
�tM��S�ed
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
��d
);

51 
�tM��Pos�i�
(
u�t8_t
 
p�t
, 
�t8_t
 
d�e�i�
, 
��d
, 
pos�i�
);

53 
b�keM��
(
u�t8_t
 
p�t
);

55 
g�M��Pow�
(
u�t8_t
 
p�t
);

57 
g�M��S�ed
(
u�t8_t
 
p�t
);

59 
g�M��Pos�i�
(
u�t8_t
 
p�t
);

63 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Sensor_C_Interface.cpp

1 
	~"S�s�_C_I����.h
"

2 
	~<�dio.h
>

3 
	~"A�Task.h
"

4 
	~"lib.h
"

8 
c�figS�s�
 (
u�t8_t
 
id
,u�t8_�
t
,u�t8_�
m
,
u�t32_t
 
o
) {

9 
A�Task
::
c�figS�s�
(
nuαr
, 
id
 ,
t
 ,
m
 ,
o
);

12 
�ns�_�tu�_v�ues
 
v�ues
 = {.
v�ue
={99,89},.
ty�
=1,.
�ti�
=2,.
�nExp
=3};

14 
�ns�_�tu�_v�ues
* 
g�S�s�
(
u�t8_t
 
id
){

15 
ORB
::
S�s�
 
s
 = 
A�Task
::
g�S�s�
(
nuαr
, 
id
);

16 
v�ues
.
v�ue
[0] = 
s
.value[0];

17 
v�ues
.
v�ue
[1] = 
s
.value[1];

18 
v�ues
.
�nExp
 = 
s
.lenExp;

19 
v�ues
.
�ti�
 = 
s
.option;

20  &
v�ues
;

23 
u�t32_t
 
g�S�s�V�ueExt
(
u�t8_t
 
id
, u�t8_�
ch
 ) {

24  
A�Task
::
g�S�s�V�ueExt
(
nuαr
, 
id
 , 
ch
);

27 
u�t8_t
 
g�S�s�Dig��
 (u�t8_�
id
) {

28  
A�Task
::
g�S�s�Dig��
(
nuαr
, 
id
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Sensor_C_Interface.h

1 #i�de�
SENSOR_MOCKUP_H


2 
	#SENSOR_MOCKUP_H


	)

3 
	~"�d�t.h
"

4 
	~"�ddef.h
"

6 #ifde�
__�lu�lus


12 
S1
 = 0,

13 
S2
,

14 
S3
,

15 
S4


16 } 
	tS�s�P�t
;

20 
ANALOG
 = 0,

21 
UART
 = 1,

22 
I2C
 = 2,

23 
TOF
 = 3,

24 
TOUCH
 = 4

25 } 
	tS�s�Ty�
;

27 
c�figS�s�
 (
u�t8_t
 
id
,u�t8_�
t
,u�t8_�
m
,
u�t32_t
 
o
);

29 
	s_�ns�_�tu�_v�ues
{

30 
u�t32_t
 
v�ue
[2];

31 
u�t8_t
 
ty�
;

32 
u�t8_t
 
�ti�
;

33 
u�t8_t
 
�nExp
;

34 }
	t�ns�_�tu�_v�ues
;

36 
�ns�_�tu�_v�ues
* 
g�S�s�
(
u�t8_t
 
id
);

38 
u�t32_t
 
g�S�s�V�ueExt
(
u�t8_t
 
id
, u�t8_�
ch
 );

40 
u�t8_t
 
g�S�s�Dig��
 (u�t8_�
id
);

42 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Servo_C_Interface.cpp

1 
	~"�d�t.h
"

2 
	~"A�Task.h
"

6 
�tMod�S�vo
(
u�t16_t
 
p�t
, u�t16_�
��d
, u�t16_�
�g�
){

7 
A�Task
::
�tMod�S�vo
(
nuαr
, 
p�t
, 
��d
, 
�g�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Servo_C_Interface.h

1 #i�de�
SERVO_MOCKUP_H


2 
	#SERVO_MOCKUP_H


	)

3 
	~"�d�t.h
"

4 
	~"�ddef.h
"

6 #ifde�
__�lu�lus


10 
	eS�voP�t_ty�
{

11 
S1
 = 0,

12 
S2
 = 1,

15 
�tMod�S�vo
(
u�t16_t
 
p�t
, u�t16_�
��d
, u�t16_�
�g�
);

17 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Time_C_Interface.cpp

1 
	~"Time_C_I����.h
"

2 
	~"�d�t.h
"

3 
	~"A�Task.h
"

6 
u�t32_t
 
g�Time
(){

7  
A�Task
::
g�Time
(
nuαr
);

10 
wa�
(
u�t32_t
 
time
){

11 
A�Task
::
wa�
(
nuαr
, 
time
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Time_C_Interface.h

1 #i�de�
TIME_MOCKUP_H


2 
	#TIME_MOCKUP_H


	)

3 
	~"�d�t.h
"

4 
	~"�ddef.h
"

6 #ifde�
__�lu�lus


10 
u�t32_t
 
g�Time
();

12 
wa�
(
u�t32_t
 
time
);

14 #ifde�
__�lu�lus


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Button\ButtonType.c

1 
	~"py/obj.h
"

2 
	~"py/mph�.h
"

3 
	~"py/ru�ime.h
"

4 
	~"py/obj�r.h
"

5 
	~"py/�ack��.h
"

6 
	~"bu��Ty�.h
"

7 
	~"h��r.h
"

9 cڡ 
mp_obj_ty�_t
 
	gbu��_ty�
;

11 
	s_bu��_obj_t
 {

12 
mp_obj_ba�_t
 
	mba�
;

13 
u�t8_t
 
	mid
;

14 } 
	tbu��_obj_t
;

16 
bu��_obj_t
 
	gbu��_obj_li�
[2] = {

17 { .
ba�
 = { .
ty�
 = &
bu��_ty�
 }, .
	gid
 = 0 },

18 { .
	gba�
 = { .
ty�
 = &
bu��_ty�
 }, .
	gid
 = 1 },

21 
	$mp_bu��_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

22 cڡ 
bu��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

23 
	`mp_��tf
(
��t
, "Bu��(%d)", 
�lf
->
id
);

24 
	}
}

26 
mp_obj_t
 
	$mp_bu��_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�l_�gs
) {

27 �um { 
ARG_id
};

28 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

29 { 
MP_QSTR_id
, 
MP_ARG_REQUIRED
 | 
MP_ARG_INT
, {.
u_�t
 = -1 } },

31 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

32 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�l_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

34 
id
 = 
�gs
[
ARG_id
].
u_�t
;

36 
	`CHECK_VALID_ID
(
id
, 
bu��_obj_li�
);

38 
bu��_obj_t
 *
�lf
 = &
bu��_obj_li�
[
id
];

40  
	`MP_OBJ_FROM_PTR
(
�lf
);

41 
	}
}

43 
mp_obj_t
 
	$g�_bu��
(
mp_obj_t
 
�lf_id
) {

44 
bu��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_id
);

45 
bo�
 
�t
 = 
	`g�S�s�Dig��
(
�lf
->
id
);

46  
	`mp_obj_�w_bo�
(
�t
);

47 
	}
}

48 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_bu��_obj
, 
g�_bu��
);

50 cڡ 
mp_rom_m�_�em_t
 
	gbu��_lo�l_di�_�b�
[] = {

51 { 
MP_ROM_QSTR
(
MP_QSTR_g�
), 
MP_ROM_PTR
(&
g�_bu��_obj
) },

53 
MP_DEFINE_CONST_DICT
(
bu��_lo�l
, 
bu��_lo�l_di�_�b�
);

55 
MP_DEFINE_CONST_OBJ_TYPE
(

56 
bu��_ty�
,

57 
MP_QSTR_bu��
,

58 
MP_TYPE_FLAG_NONE
,

59 
make_�w
, 
mp_bu��_make_�w
,

60 
��t
, 
mp_bu��_��t
,

61 
lo�ls_di�
, &
bu��_lo�l


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Button\ButtonType.h

1 
	~"py/obj.h
"

2 
	~"py/ru�ime.h
"

3 
	~"py/mph�.h
"

5 
cڡ 
mp_obj_ty�_t
 
bu��_ty�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\DevicesModule.c

2 
	~"py/ru�ime.h
"

3 
	~"Devi�s/M��/M��Modu�.h
"

4 
	~"Devi�s/S�vo/S�voModu�.h
"

5 
	~"Devi�s/S�s�/S�s�Modu�.h
"

6 
	~"Devi�s/Bu��/Bu��Ty�.h
"

8 
mp_obj_t
 
	$devi�s___��__
() {

9 i�(!
	`MP_STATE_VM
(
devi�s_���li�d
)) {

10 
	`MP_STATE_VM
(
devi�s_���li�d
��
�ue
;

12  
mp_cڡ_n�e
;

13 
	}
}

14 
MP_DEFINE_CONST_FUN_OBJ_0
(
devi�s___��___obj
, 
devi�s___��__
);

15 
MP_REGISTER_ROOT_POINTER
(
devi�s_���li�d
);

17 cڡ 
mp_rom_m�_�em_t
 
	gdevi�s_glob�s_�b�
[] = {

18 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_devi�s
) },

19 { 
MP_ROM_QSTR
(
MP_QSTR___��__
), 
MP_ROM_PTR
(&
devi�s___��___obj
) },

21 { 
MP_ROM_QSTR
(
MP_QSTR_m��
), 
MP_ROM_PTR
(&
m��_ty�
) },

22 { 
MP_ROM_QSTR
(
MP_QSTR_�rvo
), 
MP_ROM_PTR
(&
�rvo_ty�
) },

23 { 
MP_ROM_QSTR
(
MP_QSTR_�ns�
), 
MP_ROM_PTR
(&
�ns�_ty�
) },

24 { 
MP_ROM_QSTR
(
MP_QSTR_bu��
), 
MP_ROM_PTR
(&
bu��_ty�
) },

26 
MP_DEFINE_CONST_DICT
(
devi�s_glob�s
, 
devi�s_glob�s_�b�
);

28 cڡ 
mp_obj_modu�_t
 
	gdevi�s_modu�
 = {

29 .
ba�
 = { &
mp_ty�_modu�
 },

30 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
devi�s_glob�s
,

33 
MP_REGISTER_MODULE
(
MP_QSTR_devi�s
, 
devi�s_modu�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Motor\MotorModule.c

1 
	~"py/obj.h
"

2 
	~"py/mph�.h
"

3 
	~"py/ru�ime.h
"

4 
	~"M��Modu�.h
"

5 
	~"M��_C_I����.h
"

6 
	~"h��r.h
"

7 
	~<�dio.h
>

10 cڡ 
mp_obj_ty�_t
 
	gm��_ty�
;

12 
	s_m��_obj_t
 {

13 
mp_obj_ba�_t
 
	mba�
;

14 
u�t8_t
 
	mp�t
;

15 
�t8_t
 
	md�e�i�
;

16 
u�t16_t
 
	mticks
;

17 
u�t8_t
 
	macc
;

18 
u�t8_t
 
	mkp
;

19 
u�t8_t
 
	mki
;

20 
u�t8_t
 
	mmode
;

21 
u�t8_t
 
	m��d
;

22 
u�t8_t
 
	mpos�i�
;

23 } 
	tm��_obj_t
;

25 
m��_obj_t
 
	gm��_obj_li�
[4] = {

26 { .
ba�
 = { .
ty�
 = &
m��_ty�
 }, .
	gp�t
 = 0, .
	gd�e�i�
 = 0, .
	gticks
 = 0, .
	gacc
 = 0, .
	gkp
 = 0, .
	gki
 = 0, .
	gmode
 = 0, .
	g��d
 = 0, .
	gpos�i�
 = 0 },

27 { .
	gba�
 = { .
ty�
 = &
m��_ty�
 }, .
	gp�t
 = 1, .
	gd�e�i�
 = 0, .
	gticks
 = 0, .
	gacc
 = 0, .
	gkp
 = 0, .
	gki
 = 0, .
	gmode
 = 0, .
	g��d
 = 0, .
	gpos�i�
 = 0 },

28 { .
	gba�
 = { .
ty�
 = &
m��_ty�
 }, .
	gp�t
 = 2, .
	gd�e�i�
 = 0, .
	gticks
 = 0, .
	gacc
 = 0, .
	gkp
 = 0, .
	gki
 = 0, .
	gmode
 = 0, .
	g��d
 = 0, .
	gpos�i�
 = 0 },

29 { .
	gba�
 = { .
ty�
 = &
m��_ty�
 }, .
	gp�t
 = 3, .
	gd�e�i�
 = 0, .
	gticks
 = 0, .
	gacc
 = 0, .
	gkp
 = 0, .
	gki
 = 0, .
	gmode
 = 0, .
	g��d
 = 0, .
	gpos�i�
 = 0 }

32 
	$mp_m��_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

33 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

34 
	`mp_��tf
(
��t
, "M��(%d)", 
�lf
->
p�t
);

35 
	}
}

37 
mp_obj_t
 
	$mp_m��_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�l_�gs
) {

38 �um { 
ARG_p�t
, 
ARG_d�e�i�
, 
ARG_ticks
, 
ARG_acc
, 
ARG_kp
, 
ARG_ki
};

39 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

40 { 
MP_QSTR_p�t
, 
MP_ARG_REQUIRED
 | 
MP_ARG_INT
, {.
u_�t
 = -1 } },

41 { 
MP_QSTR_d�e�i�
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

42 { 
MP_QSTR_ticks
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_INT
, {.
u_�t
 = 72 } },

43 { 
MP_QSTR_acc
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_INT
, {.
u_�t
 = 25 } },

44 { 
MP_QSTR_kp
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_INT
, {.
u_�t
 = 50 } },

45 { 
MP_QSTR_ki
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_INT
, {.
u_�t
 = 30 } },

47 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

48 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�l_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

50 
p�t
 = 
�gs
[
ARG_p�t
].
u_�t
;

51 
d�e�i�
 = (
�gs
[
ARG_d�e�i�
].
u_obj
 !�
MP_OBJ_NULL
)?
	`mp_obj_g�_��t
(args[ARG_direction].u_obj):1;

53 
	`CHECK_VALID_PORT
(
p�t
, 
m��_obj_li�
)

55 
m��_obj_t
 *
�lf
 = &
m��_obj_li�
[
p�t
];

57 
�lf
->
d�e�i�
 = (d�e�i�>=0)?
FORWARD
:
REVERSE
;

58 
�lf
->
ticks
 = 
�gs
[
ARG_ticks
].
u_�t
;

59 
�lf
->
acc
 = 
�gs
[
ARG_acc
].
u_�t
;

60 
�lf
->
kp
 = 
�gs
[
ARG_kp
].
u_�t
;

61 
�lf
->
ki
 = 
�gs
[
ARG_ki
].
u_�t
;

63 
	`m��S�t�gs
(
�lf
->
p�t
, s�f->
ticks
, s�f->
acc
, s�f->
kp
, s�f->
ki
 );

65  
	`MP_OBJ_FROM_PTR
(
�lf
);

66 
	}
}

68 
mp_obj_t
 
	$c�fig
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
){

69 �um { 
ARG_d�e�i�
, 
ARG_ticks
, 
ARG_acc
, 
ARG_kp
, 
ARG_ki
};

72 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

73 { 
MP_QSTR_d�e�i�
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

74 { 
MP_QSTR_ticks
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

75 { 
MP_QSTR_acc
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

76 { 
MP_QSTR_kp
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

77 { 
MP_QSTR_ki
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

80 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

81 
	`mp_�g_�r�_�l
(
n_�gs
 - 1 , 
pos_�gs
 + 1 , 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

83 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
pos_�gs
[0]);

85 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_d�e�i�
, 
�lf
->
d�e�i�
, 
mp_obj_g�_��t
);

86 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_ticks
, 
�lf
->
ticks
, 
mp_obj_g�_�t
);

87 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_acc
, 
�lf
->
acc
 , 
mp_obj_g�_�t
);

88 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_kp
, 
�lf
->
kp
 , 
mp_obj_g�_�t
);

89 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_ki
, 
�lf
->
ki
 , 
mp_obj_g�_�t
);

91 
p�t
 = 
�lf
->port;

92 
	`m��S�t�gs
(
p�t
,
�lf
->
ticks
,�lf->
acc
,�lf->
kp
,�lf->
ki
);

94  
	`MP_OBJ_FROM_PTR
(
�lf
);

95 
	}
}

96 
MP_DEFINE_CONST_FUN_OBJ_KW
(
c�fig_obj
, 0, 
c�fig
);

98 
mp_obj_t
 
	$�t
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
){

99 �um { 
ARG_mode
, 
ARG_��d
, 
ARG_pos�i�
};

102 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

103 { 
MP_QSTR_mode
, 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

104 { 
MP_QSTR_��d
, 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

105 { 
MP_QSTR_pos�i�
, 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

109 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

111 
	`mp_�g_�r�_�l
(
n_�gs
 - 1 , 
pos_�gs
 + 1 , 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

113 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
pos_�gs
[0]);

115 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_mode
, 
�lf
->
mode
, 
mp_obj_g�_�t
);

116 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_��d
, 
�lf
->
��d
, 
mp_obj_g�_�t
);

117 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_pos�i�
, 
�lf
->
pos�i�
 , 
mp_obj_g�_�t
);

119 
	`�tM��
(
�lf
->
p�t
, s�f->
mode
, s�f->
��d
 * s�f->
d�e�i�
 , s�f->
pos�i�
 * self->direction);

121  
	`MP_OBJ_FROM_PTR
(
�lf
);

122 
	}
}

123 
MP_DEFINE_CONST_FUN_OBJ_KW
(
�t_obj
, 1, 
�t
);

125 
mp_obj_t
 
	$g�
(
mp_obj_t
 
�lf_�
){

126 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

127 
m��_�tu�_v�ues
 *
�t
 = 
	`g�M��
(
�lf
->
p�t
);

129 
mp_obj_t
 
di�
 = 
	`mp_obj_�w_di�
(3);

131 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("��d", 5), 
	`mp_obj_�w_�t
(
�t
->
��d
));

132 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("pos�i�", 8), 
	`mp_obj_�w_�t
(
�t
->
pos
));

133 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("pow�", 5), 
	`mp_obj_�w_�t
(
�t
->
pwr
));

135  
di�
;

136 
	}
}

137 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_obj
 , 
g�
);

140 
mp_obj_t
 
	$m��_b�ke
(
mp_obj_t
 
�lf_�
) {

141 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

143 
	`b�keM��
(
�lf
->
p�t
);

145  
	`MP_OBJ_FROM_PTR
(
�lf
);

146 
	}
}

147 
MP_DEFINE_CONST_FUN_OBJ_1
(
m��_b�ke_obj
, 
m��_b�ke
);

149 
mp_obj_t
 
	$g�_m��_��d
(
mp_obj_t
 
�lf_�
) {

150 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

151  
	`mp_obj_�w_�t
(
	`g�M��S�ed
(
�lf
->
p�t
));

152 
	}
}

153 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_m��_��d_obj
, 
g�_m��_��d
);

155 
mp_obj_t
 
	$g�_m��_pow�
(
mp_obj_t
 
�lf_�
) {

156 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

157  
	`mp_obj_�w_�t
(
	`g�M��Pow�
(
�lf
->
p�t
));

158 
	}
}

159 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_m��_pow�_obj
, 
g�_m��_pow�
);

161 
mp_obj_t
 
	$g�_m��_pos�i�
(
mp_obj_t
 
�lf_�
) {

162 
m��_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

163  
	`mp_obj_�w_�t
(
	`g�M��Pos�i�
(
�lf
->
p�t
));

164 
	}
}

165 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_m��_pos�i�_obj
, 
g�_m��_pos�i�
);

169 cڡ 
mp_rom_m�_�em_t
 
	gm��_lo�l_di�_�b�
[] = {

170 { 
MP_ROM_QSTR
(
MP_QSTR_M1
), 
MP_ROM_INT
(
M1
) },

171 { 
MP_ROM_QSTR
(
MP_QSTR_M2
), 
MP_ROM_INT
(
M2
) },

172 { 
MP_ROM_QSTR
(
MP_QSTR_M3
), 
MP_ROM_INT
(
M3
) },

173 { 
MP_ROM_QSTR
(
MP_QSTR_M4
), 
MP_ROM_INT
(
M4
) },

174 { 
MP_ROM_QSTR
(
MP_QSTR_FORWARD
), 
MP_ROM_INT
(
FORWARD
) },

175 { 
MP_ROM_QSTR
(
MP_QSTR_REVERSE
), 
MP_ROM_INT
(
REVERSE
) },

177 { 
MP_ROM_QSTR
(
MP_QSTR_POWER_MODE
), 
MP_ROM_INT
(
POWER_MODE
) },

178 { 
MP_ROM_QSTR
(
MP_QSTR_BRAKE_MODE
), 
MP_ROM_INT
(
BRAKE_MODE
) },

179 { 
MP_ROM_QSTR
(
MP_QSTR_SPEED_MODE
), 
MP_ROM_INT
(
SPEED_MODE
) },

180 { 
MP_ROM_QSTR
(
MP_QSTR_MOVETO_MODE
), 
MP_ROM_INT
(
MOVETO_MODE
) },

182 { 
MP_ROM_QSTR
(
MP_QSTR_c�fig
), 
MP_ROM_PTR
(&
c�fig_obj
) },

183 { 
MP_ROM_QSTR
(
MP_QSTR_�t
), 
MP_ROM_PTR
(&
�t_obj
) },

184 { 
MP_ROM_QSTR
(
MP_QSTR_g�
), 
MP_ROM_PTR
(&
g�_obj
) },

186 { 
MP_ROM_QSTR
(
MP_QSTR_b�ke
), 
MP_ROM_PTR
(&
m��_b�ke_obj
) },

187 { 
MP_ROM_QSTR
(
MP_QSTR_g�S�ed
), 
MP_ROM_PTR
(&
g�_m��_��d_obj
) },

188 { 
MP_ROM_QSTR
(
MP_QSTR_g�Pow�
), 
MP_ROM_PTR
(&
g�_m��_pow�_obj
) },

189 { 
MP_ROM_QSTR
(
MP_QSTR_g�Pos�i�
), 
MP_ROM_PTR
(&
g�_m��_pos�i�_obj
) },

191 
MP_DEFINE_CONST_DICT
(
m��_lo�l
, 
m��_lo�l_di�_�b�
);

193 
MP_DEFINE_CONST_OBJ_TYPE
(

194 
m��_ty�
,

195 
MP_QSTR_m��
,

196 
MP_TYPE_FLAG_NONE
,

197 
make_�w
, 
mp_m��_make_�w
,

198 
��t
, 
mp_m��_��t
,

199 
lo�ls_di�
, &
m��_lo�l


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Motor\MotorModule.h

1 
	~"py/obj.h
"

2 
	~"py/ru�ime.h
"

3 
	~"py/mph�.h
"

4 
	~"py/ru�ime.h
"

5 
	~"py/obj�r.h
"

6 
	~"py/�ack��.h
"

8 
cڡ 
mp_obj_ty�_t
 
m��_ty�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Sensor\SensorModule.c

1 
	~"S�s�Modu�.h
"

2 
	~"S�s�_C_I����.h
"

3 
	~"h��r.h
"

5 cڡ 
mp_obj_ty�_t
 
	g�ns�_ty�
;

7 
�ns�_obj_t
 
	g�ns�_obj_li�
[4] = {

8 { .
ba�
 = { .
ty�
 = &
�ns�_ty�
 }, .
	gp�t
 = 0, .
	gty�
 = 0, .
	gmode
 = 0, .
	gmem_off�t
 = 0 },

9 { .
	gba�
 = { .
ty�
 = &
�ns�_ty�
 }, .
	gp�t
 = 1, .
	gty�
 = 0, .
	gmode
 = 0, .
	gmem_off�t
 = 0 },

10 { .
	gba�
 = { .
ty�
 = &
�ns�_ty�
 }, .
	gp�t
 = 2, .
	gty�
 = 0, .
	gmode
 = 0, .
	gmem_off�t
 = 0 },

11 { .
	gba�
 = { .
ty�
 = &
�ns�_ty�
 }, .
	gp�t
 = 3, .
	gty�
 = 0, .
	gmode
 = 0, .
	gmem_off�t
 = 0 }

14 
	$mp_�ns�_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

15 
�ns�_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

16 
	`mp_��tf
(
��t
, "S�s�(%d)", 
�lf
->
p�t
);

17 
	}
}

19 
mp_obj_t
 
	$mp_�ns�_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�l_�gs
){

20 �um { 
ARG_p�t
, 
ARG_ty�
, 
ARG_mode
, 
ARG_mem_off�t
};

21 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

22 { 
MP_QSTR_p�t
, 
MP_ARG_REQUIRED
 | 
MP_ARG_INT
, {.
u_�t
 = -1 } },

23 { 
MP_QSTR_ty�
, 
MP_ARG_INT
, {.
u_�t
 = 0 } },

24 { 
MP_QSTR_mode
, 
MP_ARG_INT
, {.
u_�t
 = 0 } },

25 { 
MP_QSTR_mem_off�t
, 
MP_ARG_INT
, {.
u_�t
 = 0 } },

27 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

28 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�l_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

30 
p�t
 = 
�gs
[
ARG_p�t
].
u_�t
;

32 
	`CHECK_VALID_PORT
(
p�t
, 
�ns�_obj_li�
);

34 
�ns�_obj_t
 *
�lf
 = &
�ns�_obj_li�
[
p�t
];

36 
�lf
->
ty�
 = 
�gs
[
ARG_ty�
].
u_�t
;

37 
�lf
->
mode
 = 
�gs
[
ARG_mode
].
u_�t
;

38 
�lf
->
mem_off�t
�
�gs
[
ARG_mem_off�t
].
u_�t
;

40 
	`c�figS�s�
(
�lf
->
p�t
, s�f->
ty�
, s�f->
mode
, s�f->
mem_off�t
);

41  
	`MP_OBJ_FROM_PTR
(
�lf
);

42 
	}
}

44 
mp_obj_t
 
	$g�
(
mp_obj_t
 
�lf_�
) {

45 
�ns�_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

46 
�ns�_�tu�_v�ues
 *
�t
 = 
	`g�S�s�
(
�lf
->
p�t
);

48 
mp_obj_t
 
di�
 = 
	`mp_obj_�w_di�
(4);

50 
mp_obj_t
 
v�ues
 = 
	`mp_obj_�w_li�
(0, 
NULL
);

51 
	`mp_obj_li�_��nd
(
v�ues
, 
	`mp_obj_�w_�t
(
�t
->
v�ue
[0]));

52 
	`mp_obj_li�_��nd
(
v�ues
, 
	`mp_obj_�w_�t
(
�t
->
v�ue
[1]));

54 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("v�ues", 6), 
v�ues
);

55 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("ty�", 4), 
	`mp_obj_�w_�t
(
�t
->
ty�
));

56 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("�ti�", 6), 
	`mp_obj_�w_�t
(
�t
->
�ti�
));

57 
	`mp_obj_di�_��e
(
di�
, 
	`mp_obj_�w_�r
("�nExp", 6), 
	`mp_obj_�w_�t
(
�t
->
�nExp
));

59  
di�
;

60 
	}
}

61 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_obj
, 
g�
);

63 
mp_obj_t
 
	$g�_dig��
(
mp_obj_t
 
�lf_�
) {

64 
�ns�_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

65  
	`mp_obj_�w_�t
(
	`g�S�s�Dig��
(
�lf
->
p�t
));

66 
	}
}

67 
MP_DEFINE_CONST_FUN_OBJ_1
(
g�_dig��_obj
, 
g�_dig��
);

69 
mp_obj_t
 
	$g�_v�ue_ext
(
mp_obj_t
 
�lf_�
, mp_obj_�
ch
) {

70 
�ns�_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

71  
	`mp_obj_�w_�t
(
	`g�S�s�V�ueExt
(
�lf
->
p�t
, (
ch
)));

72 
	}
}

73 
MP_DEFINE_CONST_FUN_OBJ_2
(
g�_v�ue_ext_obj
, 
g�_v�ue_ext
);

75 
mp_obj_t
 
	$c�fig
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
){

76 �um { 
ARG_ty�
, 
ARG_mode
, 
ARG_mem_off�t
};

78 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

79 { 
MP_QSTR_ty�
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

80 { 
MP_QSTR_mode
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

81 { 
MP_QSTR_mem_off�t
, 
MP_ARG_KW_ONLY
 | 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

84 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

85 
	`mp_�g_�r�_�l
(
n_�gs
 - 1 , 
pos_�gs
 + 1 , 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

87 
�ns�_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
pos_�gs
[0]);

89 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_ty�
, 
�lf
->
ty�
, 
mp_obj_g�_�t
);

90 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_mode
, 
�lf
->
mode
, 
mp_obj_g�_�t
);

91 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_mem_off�t
, 
�lf
->
mem_off�t
 , 
mp_obj_g�_�t
);

93 
	`c�figS�s�
(
�lf
->
p�t
,�lf->
ty�
,�lf->
mode
,�lf->
mem_off�t
);

95  
	`MP_OBJ_FROM_PTR
(
�lf
);

96 
	}
}

97 
MP_DEFINE_CONST_FUN_OBJ_KW
(
c�fig_obj
, 0, 
c�fig
);

100 cڡ 
mp_rom_m�_�em_t
 
	g�ns�_lo�l_di�_�b�
[] = {

101 { 
MP_ROM_QSTR
(
MP_QSTR_g�
), 
MP_ROM_PTR
(&
g�_obj
) },

102 { 
MP_ROM_QSTR
(
MP_QSTR_g�Dig��
), 
MP_ROM_PTR
(&
g�_dig��_obj
) },

103 { 
MP_ROM_QSTR
(
MP_QSTR_g�V�ueExt
), 
MP_ROM_PTR
(&
g�_v�ue_ext_obj
) },

104 { 
MP_ROM_QSTR
(
MP_QSTR_c�fig
), 
MP_ROM_PTR
(&
c�fig_obj
) },

106 { 
MP_ROM_QSTR
(
MP_QSTR_S1
�, 
MP_ROM_INT
(
S1
)},

107 { 
MP_ROM_QSTR
(
MP_QSTR_S2
�, 
MP_ROM_INT
(
S2
)},

108 { 
MP_ROM_QSTR
(
MP_QSTR_S3
�, 
MP_ROM_INT
(
S3
)},

109 { 
MP_ROM_QSTR
(
MP_QSTR_S4
�, 
MP_ROM_INT
(
S4
)},

111 { 
MP_ROM_QSTR
(
MP_QSTR_A�log
�, 
MP_ROM_INT
(
ANALOG
)},

112 { 
MP_ROM_QSTR
(
MP_QSTR_I2C
�, 
MP_ROM_INT
(
I2C
)},

113 { 
MP_ROM_QSTR
(
MP_QSTR_TOF
�, 
MP_ROM_INT
(
TOF
)},

114 { 
MP_ROM_QSTR
(
MP_QSTR_Touch
�, 
MP_ROM_INT
(
TOUCH
)},

115 { 
MP_ROM_QSTR
(
MP_QSTR_UART
�, 
MP_ROM_INT
(
UART
)},

117 
MP_DEFINE_CONST_DICT
(
�ns�_lo�l
, 
�ns�_lo�l_di�_�b�
);

119 
MP_DEFINE_CONST_OBJ_TYPE
(

120 
�ns�_ty�
,

121 
MP_QSTR_�ns�
,

122 
MP_TYPE_FLAG_NONE
,

123 
make_�w
, 
mp_�ns�_make_�w
,

124 
��t
, 
mp_�ns�_��t
,

125 
lo�ls_di�
, &
�ns�_lo�l


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Sensor\SensorModule.h

1 #i�de�
SENSOR_MODULE_H


2 
	#SENSOR_MODULE_H


	)

4 
	~"py/obj.h
"

5 
	~"py/ru�ime.h
"

6 
	~"py/mph�.h
"

8 
cڡ 
mp_obj_ty�_t
 
�ns�_ty�
;

10 
	s_�ns�_obj_t
 {

11 
mp_obj_ba�_t
 
	mba�
;

12 
u�t8_t
 
	mp�t
;

13 
u�t8_t
 
	mty�
;

14 
u�t8_t
 
	mmode
;

15 
u�t32_t
 
	mmem_off�t
;

16 } 
	t�ns�_obj_t
;

18 
�ns�_obj_t
 
	g�ns�_obj_li�
[4];

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Servo\ServoModule.c

1 
	~"py/obj.h
"

2 
	~"py/mph�.h
"

3 
	~"py/ru�ime.h
"

4 
	~"py/obj�r.h
"

5 
	~"py/�ack��.h
"

6 
	~"�rvoModu�.h
"

7 
	~"S�vo_C_I����.h
"

8 
	~"h��r.h
"

10 cڡ 
mp_obj_ty�_t
 
	g�rvo_ty�
;

12 
	s_�rvo_obj_t
 {

13 
mp_obj_ba�_t
 
	mba�
;

14 
u�t8_t
 
	mp�t
;

15 
u�t8_t
 
	m��d
;

16 
u�t8_t
 
	m�g�
;

17 } 
	t�rvo_obj_t
;

19 
�rvo_obj_t
 
	g�rvo_obj_li�
[2] = {

20 { .
ba�
 = { .
ty�
 = &
�rvo_ty�
 }, .
	gp�t
 = 0, .
	g��d
 = 0, .
	g�g�
 = 0 },

21 { .
	gba�
 = { .
ty�
 = &
�rvo_ty�
 }, .
	gp�t
 = 1, .
	g��d
 = 0, .
	g�g�
 = 0 },

24 
	$mp_�rvo_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) {

25 cڡ 
�rvo_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
);

26 
	`mp_��tf
(
��t
, "�rvo(%u)", 
�lf
->
p�t
);

27 
	}
}

29 
mp_obj_t
 
	$mp_�rvo_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ 
mp_obj_t
 *
�l_�gs
) {

30 �um { 
ARG_p�t
};

31 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

32 { 
MP_QSTR_p�t
, 
MP_ARG_REQUIRED
 | 
MP_ARG_INT
, {.
u_�t
 = -1 } },

34 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

35 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�l_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

37 
p�t
 = 
�gs
[
ARG_p�t
].
u_�t
;

39 
	`CHECK_VALID_PORT
(
p�t
, 
�rvo_obj_li�
);

41 
�rvo_obj_t
 *
�lf
 = &
�rvo_obj_li�
;

43  
	`MP_OBJ_FROM_PTR
(
�lf
);

44 
	}
}

46 
mp_obj_t
 
	$�t
(
size_t
 
n_�gs
, cڡ 
mp_obj_t
 *
pos_�gs
, 
mp_m�_t
 *
kw_�gs
){

47 �um { 
ARG_��d
, 
ARG_�g�
};

48 cڡ 
mp_�g_t
 
�lowed_�gs
[] = {

49 { 
MP_QSTR_��d
, 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

50 { 
MP_QSTR_�g�
, 
MP_ARG_OBJ
, {.
u_obj
 = 
MP_OBJ_NULL
 } },

52 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)];

53 
	`mp_�g_�r�_�l
(
n_�gs
 - 1 , 
pos_�gs
 + 1 , 
kw_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
);

55 
�rvo_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
pos_�gs
[0]);

57 if(
kw_�gs
->
u�d
 > 0){

58 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_��d
, 
�lf
->
��d
, 
mp_obj_g�_�t
);

59 
	`ACCEPT_VALUE_KW_GIVEN
(
ARG_�g�
, 
�lf
->
�g�
, 
mp_obj_g�_�t
);

61 
	`ACCEPT_VALUES_NO_KW_2
(
n_�gs
 - 1 , 
ARG_��d
, 
�lf
->
��d
, 
mp_obj_g�_�t
, 
ARG_�g�
, s�f->
�g�
, mp_obj_get_int);

64 
	`�tMod�S�vo
(
�lf
->
p�t
,�lf->
��d
,�lf->
�g�
);

66  
	`MP_OBJ_FROM_PTR
(
�lf
);

67 
	}
}

68 
MP_DEFINE_CONST_FUN_OBJ_KW
(
�t_obj
, 0, 
�t
);

70 cڡ 
mp_rom_m�_�em_t
 
	g�rvo_lo�l_di�_�b�
[] = {

71 { 
MP_ROM_QSTR
(
MP_QSTR_S1
), 
MP_ROM_INT
(
S1
) },

72 { 
MP_ROM_QSTR
(
MP_QSTR_S2
), 
MP_ROM_INT
(
S2
) },

73 { 
MP_ROM_QSTR
(
MP_QSTR_�t
), 
MP_ROM_PTR
(&
�t_obj
) },

75 
MP_DEFINE_CONST_DICT
(
�rvo_lo�l
, 
�rvo_lo�l_di�_�b�
);

77 
MP_DEFINE_CONST_OBJ_TYPE
(

78 
�rvo_ty�
,

79 
MP_QSTR_�rvo
,

80 
MP_TYPE_FLAG_NONE
,

81 
make_�w
, 
mp_�rvo_make_�w
,

82 
��t
, 
mp_�rvo_��t
,

83 
lo�ls_di�
, &
�rvo_lo�l


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Servo\ServoModule.h

1 
	~"py/obj.h
"

2 
	~"py/ru�ime.h
"

3 
	~"py/mph�.h
"

5 
cڡ 
mp_obj_ty�_t
 
�rvo_ty�
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Memory\MemoryModule.c

2 
	~"py/ru�ime.h
"

3 
	~"Mem�y_C_I����.h
"

5 
mp_obj_t
 
	$mem�y___��__
() {

6 i�(!
	`MP_STATE_VM
(
mem�y_���li�d
)) {

7 
	`MP_STATE_VM
(
mem�y_���li�d
��
�ue
;

9  
mp_cڡ_n�e
;

10 
	}
}

11 
MP_DEFINE_CONST_FUN_OBJ_0
(
mem�y___��___obj
, 
mem�y___��__
);

12 
MP_REGISTER_ROOT_POINTER
(
mem�y_���li�d
);

14 
mp_obj_t
 
	$mp_��r_mem�y
() {

15 
	`��rMem�y
();

16  
mp_cڡ_n�e
;

17 
	}
}

18 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_��r_mem�y_obj
, 
mp_��r_mem�y
);

20 
mp_obj_t
 
	$mp_g�_mem�y
(
mp_obj_t
 
addr_obj
, mp_obj_�
�ngth_obj
) {

21 
u�t32_t
 
addr
 = 
	`mp_obj_g�_�t
(
addr_obj
);

22 
u�t32_t
 
�ngth
 = 
	`mp_obj_g�_�t
(
�ngth_obj
);

24 
u�t8_t
* 
mem�y_po��r
 = 
	`g�Mem�y
(
addr
, 
�ngth
);

25 
mp_obj_t
 
by�s_obj
 = 
	`mp_obj_�w_by�s
(
mem�y_po��r
, 
�ngth
);

26 
	`�
(
mem�y_po��r
);

28  
by�s_obj
;

29 
	}
}

30 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_g�_mem�y_obj
, 
mp_g�_mem�y
);

32 
mp_obj_t
 
	$mp_�t_mem�y
(
mp_obj_t
 
addr_obj
, mp_obj_�
d�a_obj
) {

33 i�(!
	`mp_obj_is_ty�
(
d�a_obj
, &
mp_ty�_li�
)) {

34 
	`mp_�i�_Ty�E��
("Data should be�assed�s�ist");

37 
u�t32_t
 
addr
 = 
	`mp_obj_g�_�t
(
addr_obj
);

38 
mp_obj_li�_t
 *
li�
 = 
	`MP_OBJ_TO_PTR
(
d�a_obj
);

39 
u�t32_t
 
�ngth
 = 
li�
->
�n
;

40 
u�t8_t
 *
��y
 = (u�t8_�*)
	`m�loc
(
�ngth
 * (uint8_t));

42 
i
 =0; i < 
�ngth
;i++){

43 
��y
[
i
] = 
	`mp_obj_g�_�t
(
li�
->
�ems
[i]);

46 
	`�tMem�y
(
addr
, 
��y
, 
�ngth
);

47  
mp_cڡ_n�e
;

48 
	}
}

49 
MP_DEFINE_CONST_FUN_OBJ_2
(
mp_�t_mem�y_obj
, 
mp_�t_mem�y
);

51 cڡ 
mp_rom_m�_�em_t
 
	gmem�y_glob�s_�b�
[] = {

52 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_mem�y
) },

53 { 
MP_ROM_QSTR
(
MP_QSTR___��__
), 
MP_ROM_PTR
(&
mem�y___��___obj
) },

55 { 
MP_ROM_QSTR
(
MP_QSTR_��rMem�y
), 
MP_ROM_PTR
(&
mp_��r_mem�y_obj
) },

56 { 
MP_ROM_QSTR
(
MP_QSTR_�tMem�y
), 
MP_ROM_PTR
(&
mp_�t_mem�y_obj
) },

57 { 
MP_ROM_QSTR
(
MP_QSTR_g�Mem�y
), 
MP_ROM_PTR
(&
mp_g�_mem�y_obj
) },

59 
MP_DEFINE_CONST_DICT
(
mem�y_glob�s
, 
mem�y_glob�s_�b�
);

61 cڡ 
mp_obj_modu�_t
 
	gmem�y_modu�
 = {

62 .
ba�
 = { &
mp_ty�_modu�
 },

63 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
mem�y_glob�s
,

66 
MP_REGISTER_MODULE
(
MP_QSTR_mem�y
, 
mem�y_modu�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\KeyConstants.c

1 
	~"py/ru�ime.h
"

2 
	~"KeyCڡ�ts.h
"

3 
	~"Mڙ�_C_I����.h
"

5 cڡ 
mp_rom_m�_�em_t
 
	gmڙ�_keys_modu�_lo�ls_�b�
[] = {

6 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_mڙ�_keys
) },

7 { 
MP_ROM_QSTR
(
MP_QSTR_NO_KEY
), 
MP_ROM_INT
(
Ke�e_Ta�e
) },

9 { 
MP_ROM_QSTR
(
MP_QSTR_A1
), 
MP_ROM_INT
(
Ta�e_A1
) },

10 { 
MP_ROM_QSTR
(
MP_QSTR_A2
), 
MP_ROM_INT
(
Ta�e_A2
) },

11 { 
MP_ROM_QSTR
(
MP_QSTR_A3
), 
MP_ROM_INT
(
Ta�e_A3
) },

12 { 
MP_ROM_QSTR
(
MP_QSTR_A4
), 
MP_ROM_INT
(
Ta�e_A4
) },

13 { 
MP_ROM_QSTR
(
MP_QSTR_A5
), 
MP_ROM_INT
(
Ta�e_A5
) },

14 { 
MP_ROM_QSTR
(
MP_QSTR_A6
), 
MP_ROM_INT
(
Ta�e_A6
) },

15 { 
MP_ROM_QSTR
(
MP_QSTR_A7
), 
MP_ROM_INT
(
Ta�e_A7
) },

16 { 
MP_ROM_QSTR
(
MP_QSTR_A8
), 
MP_ROM_INT
(
Ta�e_A8
) },

18 { 
MP_ROM_QSTR
(
MP_QSTR_B1
), 
MP_ROM_INT
(
Ta�e_B1
) },

19 { 
MP_ROM_QSTR
(
MP_QSTR_B2
), 
MP_ROM_INT
(
Ta�e_B2
) },

20 { 
MP_ROM_QSTR
(
MP_QSTR_B3
), 
MP_ROM_INT
(
Ta�e_B3
) },

22 { 
MP_ROM_QSTR
(
MP_QSTR_B4
), 
MP_ROM_INT
(
Ta�e_B4
) },

23 { 
MP_ROM_QSTR
(
MP_QSTR_B5
), 
MP_ROM_INT
(
Ta�e_B5
) },

24 { 
MP_ROM_QSTR
(
MP_QSTR_B6
), 
MP_ROM_INT
(
Ta�e_B6
) },

26 { 
MP_ROM_QSTR
(
MP_QSTR_B7
), 
MP_ROM_INT
(
Ta�e_B7
) },

27 { 
MP_ROM_QSTR
(
MP_QSTR_B8
), 
MP_ROM_INT
(
Ta�e_B8
) },

28 { 
MP_ROM_QSTR
(
MP_QSTR_B9
), 
MP_ROM_INT
(
Ta�e_B9
) },

30 { 
MP_ROM_QSTR
(
MP_QSTR_B10
), 
MP_ROM_INT
(
Ta�e_B10
) },

31 { 
MP_ROM_QSTR
(
MP_QSTR_B11
), 
MP_ROM_INT
(
Ta�e_B11
) },

32 { 
MP_ROM_QSTR
(
MP_QSTR_B12
), 
MP_ROM_INT
(
Ta�e_B12
) },

34 { 
MP_ROM_QSTR
(
MP_QSTR_C1
), 
MP_ROM_INT
(
Ta�e_C1
) },

36 
MP_DEFINE_CONST_DICT
(
mڙ�_keys_modu�_lo�ls
, 
mڙ�_keys_modu�_lo�ls_�b�
);

38 
MP_DEFINE_CONST_OBJ_TYPE
(

39 
key_cڡ�ts
,

40 
MP_QSTR_Key_Cڡ�ts
,

41 
MP_TYPE_FLAG_NONE
,

42 
lo�ls_di�
, &
mڙ�_keys_modu�_lo�ls


	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\KeyConstants.h

1 
	~"py/ru�ime.h
"

2 #i�de�
KEY_CONSTANTS_H


3 
	#KEY_CONSTANTS_H


	)

5 cڡ 
mp_obj_ty�_t
 
	gkey_cڡ�ts
;

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\MonitorModule.c

1 
	~"py/ru�ime.h
"

2 
	~"KeyCڡ�ts.h
"

4 
mp_obj_t
 
	$mp_g�_key
() {

5  
	`mp_obj_�w_�t
(
	`g�Mڙ�Key
());

6 
	}
}

7 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_g�_key_obj
, 
mp_g�_key
);

9 
mp_obj_t
 
	$mp_�t_�xt
(
mp_obj_t
 
�g
) {

10 
size_t
 
�n
;

11 cڡ *
�r
 = 
	`mp_obj_�r_g�_d�a
(
�g
, &
�n
);

12 
	`�tMڙ�Text
(
�r
, 
�n
);

13  
mp_cڡ_n�e
;

14 
	}
}

15 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_�t_�xt_obj
, 
mp_�t_�xt
);

17 cڡ 
mp_rom_m�_�em_t
 
	gmڙ�_modu�_glob�s_�b�
[] = {

18 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_mڙ�
) },

20 { 
MP_ROM_QSTR
(
MP_QSTR_g�Key
), 
MP_ROM_PTR
(&
mp_g�_key_obj
) },

21 { 
MP_ROM_QSTR
(
MP_QSTR_�tText
), 
MP_ROM_PTR
(&
mp_�t_�xt_obj
) },

22 { 
MP_ROM_QSTR
(
MP_QSTR_keys
), 
MP_ROM_PTR
(&
key_cڡ�ts
) },

24 
MP_DEFINE_CONST_DICT
(
mڙ�_modu�_glob�s
, 
mڙ�_modu�_glob�s_�b�
);

26 cڡ 
mp_obj_modu�_t
 
	gmڙ�_modu�
 = {

27 .
ba�
 = { &
mp_ty�_modu�
 },

28 .
	gglob�s
 = (
mp_obj_di�_t
*)&
mڙ�_modu�_glob�s
,

31 
MP_REGISTER_MODULE
(
MP_QSTR_mڙ�
, 
mڙ�_modu�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Time\TimeModule.c

2 
	~"py/ru�ime.h
"

3 
	~"Time_C_I����.h
"

5 
mp_obj_t
 
	$time___��__
() {

6 i�(!
	`MP_STATE_VM
(
time_���li�d
)) {

7 
	`MP_STATE_VM
(
time_���li�d
��
�ue
;

9  
mp_cڡ_n�e
;

10 
	}
}

11 
MP_DEFINE_CONST_FUN_OBJ_0
(
time___��___obj
, 
time___��__
);

12 
MP_REGISTER_ROOT_POINTER
(
time_���li�d
);

15 
mp_obj_t
 
	$mp_g�_time
() {

16  
	`mp_obj_�w_�t
(
	`g�Time
());

17 
	}
}

18 
MP_DEFINE_CONST_FUN_OBJ_0
(
mp_g�_time_obj
, 
mp_g�_time
);

20 
mp_obj_t
 
	$mp_wa�
(
mp_obj_t
 
�g
) {

21 
	`wa�
(
	`mp_obj_g�_�t
(
�g
));

22  
mp_cڡ_n�e
;

23 
	}
}

24 
MP_DEFINE_CONST_FUN_OBJ_1
(
mp_wa�_obj
, 
mp_wa�
);

26 cڡ 
mp_rom_m�_�em_t
 
	gtime_glob�s_�b�
[] = {

27 { 
MP_ROM_QSTR
(
MP_QSTR___�me__
), MP_ROM_QSTR(
MP_QSTR_time
) },

28 { 
MP_ROM_QSTR
(
MP_QSTR___��__
), 
MP_ROM_PTR
(&
time___��___obj
) },

30 { 
MP_ROM_QSTR
(
MP_QSTR_g�Time
), 
MP_ROM_PTR
(&
mp_g�_time_obj
) },

31 { 
MP_ROM_QSTR
(
MP_QSTR_wa�
), 
MP_ROM_PTR
(&
mp_wa�_obj
) },

34 
MP_DEFINE_CONST_DICT
(
time_glob�s
, 
time_glob�s_�b�
);

36 cڡ 
mp_obj_modu�_t
 
	gtime_modu�
 = {

37 .
ba�
 = { &
mp_ty�_modu�
 },

38 .
	gglob�s
 = (
mp_obj_di�_t
 *)&
time_glob�s
,

41 
MP_REGISTER_MODULE
(
MP_QSTR_time
, 
time_modu�
);

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\qstr.h

1 
Q
(
sim�e_�ns�
)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\helper.h

1 #i�de�
MP_HELPER


2 
	#MP_HELPER


	)

4 
	#ACCEPT_VALUE_KW_GIVEN
(
Keyw�d
, 
�rg�
, 
mp_ty�_g��r
) \

5 i�(
�gs
[
Keyw�d
].
u_obj
 !�
MP_OBJ_NULL
) { \

6 
�rg�
 = 
	`mp_ty�_g��r
(
�gs
[
Keyw�d
].
u_obj
); \

7 }

	)

9 
	#ACCEPT_VALUES_NO_KW_2
(
n_�gs
, 
Keyw�d1
, 
T�g�1
, 
ty�_g��r1
, 
Keyw�d2
, 
T�g�2
, 
ty�_g��r2
) \

10 
n_�gs
) { \

12 
T�g�1
 = (
ty�_g��r1
)(
�gs
[
Keyw�d1
].
u_obj
); \

15 
T�g�1
 = (
ty�_g��r1
)(
�gs
[
Keyw�d1
].
u_obj
); \

16 
T�g�2
 = (
ty�_g��r2
)(
�gs
[
Keyw�d2
].
u_obj
); \

20 }

	)

23 
	#CHECK_VALID_PORT
(
p�t
, 
obj_li�
){\

24 
	`__CHECK_VALID
(
p�t
, 
obj_li�
, "Invalid Port")\

26 

	)

27 
	#CHECK_VALID_ID
(
p�t
, 
obj_li�
){\

28 
	`__CHECK_VALID
(
p�t
, 
obj_li�
, "Invalid ID")\

30 

	)

31 
	#__CHECK_VALID
(
p�t
, 
obj_li�
, 
�xt
) \

32 
p�t_max
 = (
obj_li�
) / (obj_list[0]);\

33 i�((
p�t
�>�(
p�t_max
) || (port) < 0) { \

34 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
(
�xt
)); \

35 }

	)

38 
	#GENERATE_SIMPLE_SENSOR
(
�me
, 
_g�_func
, 
_c�f_func
) \

40 
_
##
	t�me
##
	t_obj_t
 { \

41 
mp_obj_ba�_t
 
ba�
; \

42 
u�t8_t
 
p�t
; \

43 } 
	t�me
##
	t_obj_t
; \

45 
mp_
##
�me
##
	`_��t
(cڡ 
mp_��t_t
 *
��t
, 
mp_obj_t
 
�lf_�
, 
mp_��t_k�d_t
 
k�d
) { \

46 cڡ 
�me
##
_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
); \

47 
	`mp_��tf
(
��t
, #�m�"(%d)", 
�lf
->
p�t
); \

50 
mp_obj_t
 
mp_
##
�me
##
	`_make_�w
(cڡ 
mp_obj_ty�_t
 *
ty�
, 
size_t
 
n_�gs
, size_�
n_kw
, cڡ mp_obj_�*
�l_�gs
) { \

51 �um { 
ARG_p�t
 }; \

52 cڡ 
mp_�g_t
 
�lowed_�gs
[] = { \

53 { 
MP_QSTR_p�t
, 
MP_ARG_REQUIRED
 | 
MP_ARG_INT
, {.
u_�t
 = -1} }, \

55 
mp_�g_v�_t
 
�gs
[
	`MP_ARRAY_SIZE
(
�lowed_�gs
)]; \

56 
	`mp_�g_�r�_�l_kw_��y
(
n_�gs
, 
n_kw
, 
�l_�gs
, 
	`MP_ARRAY_SIZE
(
�lowed_�gs
),��owed_�gs, 
�gs
); \

58 
p�t
 = 
�gs
[
ARG_p�t
].
u_�t
; \

59 i�((
p�t
) >= (4) || (port) < 0) { \

60 
	`mp_�i�_V�ueE��
(
	`MP_ERROR_TEXT
("Invalid Port")); \

62 
�me
##
_obj_t
 *
�lf
 = 
	`m_�w_obj
(name##_obj_t); \

63 
	`_c�f_func
(
p�t
);\

64 
�lf
->
ba�
.
ty�
 =�ype; \

65 
�lf
->
p�t
 =�ort; \

67  
	`MP_OBJ_FROM_PTR
(
�lf
); \

70 
mp_obj_t
 
	`g�_func
(mp_obj_�
�lf_�
) { \

71 
�me
##
_obj_t
 *
�lf
 = 
	`MP_OBJ_TO_PTR
(
�lf_�
); \

72 
�ns�_�tu�_v�ues
 *
�t
 = 
	`g�S�s�
(
�lf
->
p�t
); \

73  
	`_g�_func
(
�t
); \

75 
	`MP_DEFINE_CONST_FUN_OBJ_1
(
g�_func
##
_obj
, get_func); \

77 cڡ 
mp_rom_m�_�em_t
 
�me
##
_lo�l_di�_�b�
[] = { \

78 { 
	`MP_ROM_QSTR
(
MP_QSTR_g�
), 
	`MP_ROM_PTR
(&
g�_func
##
_obj
) }, \

80 
	`MP_DEFINE_CONST_DICT
(
�me
##
_lo�l
,�ame##
_lo�l_di�_�b�
); \

82 
	`MP_DEFINE_CONST_OBJ_TYPE
( \

83 
�me
##
_ty�
, \

84 
MP_QSTR_
##
�me
, \

85 
MP_TYPE_FLAG_NONE
, \

86 
make_�w
, 
mp_
##
�me
##
_make_�w
, \

87 
��t
, 
mp_
##
�me
##
_��t
, \

88 
lo�ls_di�
, &
�me
##
_lo�l
 \

89 );

	)

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\python-vm.cpp

1 
	~"pyth�-vm.h
"

2 
	~<c�dlib
>

5 
	~"pyth�-vm.h
"

6 
	~"py/obj.h
"

7 
	~"py/mph�.h
"

8 
	~"py/ru�ime.h
"

9 
	~"p�t/mi��yth�_embed.h
"

10 
	~"mpc�figp�t.h
"

13 
bo�
 
Pyth�VM
::
rug
 = 
�l�
;

15 
	gPyth�VM
::
	$Pyth�VM
(�{
	}
}

17 
Pyth�VM
::~
	$Pyth�VM
(�{
	}
}

19 
Pyth�VM
::
	$��VM
() {

20 
�ack_t�
 = 0;

21 
h�p
[
HEAP_SIZE_KB
 * 1024] = {0};

23 
	`MP_STATE_VM
(
�b_���u�
��
�l�
;

24 
	`MP_STATE_VM
(
�b_���u�_�je�ed
��
�l�
;

25 
	`mp_embed_��
(&
h�p
[0], (h�p), &
�ack_t�
);

26 
	}
}

28 
	gPyth�VM
::
	$��tProg�m
(
L�dL�gthFun�i�
 
l�dL�gth
, 
L�dProg�mFun�i�
 
l�dProg�m
) {

29 
�ngth
 = 
	`l�dL�gth
();

30 
u�t8_t
* 
by�A�ay
 = 
	`l�dProg�m
(
�ngth
);

31 
	`mp_embed_exec_mpy
(
by�A�ay
, 
�ngth
);

32 
	`�
(
by�A�ay
);

33 
	}
}

35 
	gPyth�VM
::
	$de��VM
() {

36 
	`mp_embed_de��
();

37 
	}
}

39 
	gPyth�VM
::
	$run
(
L�dL�gthFun�i�
 
l�dL�gth
, 
L�dProg�mFun�i�
 
l�dProg�m
) {

40 
rug
 = 
�ue
;

41 
	`��VM
();

42 
	`��tProg�m
(
l�dL�gth
, 
l�dProg�m
);

43 
	`de��VM
();

44 
rug
 = 
�l�
;

45 
	}
}

47 
bo�
 
	gPyth�VM
::
	$isRug
() const {

48  
rug
;

49 
	}
}

51 
	gPyth�VM
::
	$��Prog�m
() {

52 
	`MP_STATE_VM
(
�b_���u�
��
�ue
;

53 
	}
}

	@C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\python-vm.h

1 #i�de�
PYTHON_VM_H


2 
	#PYTHON_VM_H


	)

4 
	~<c�d�t
>

7 
u�t8_t
* 
	tL�dProg�mFun�i�
(
	t�ngth
);

8 
u�t32_t
 
	tL�dL�gthFun�i�
();

11 �as�
	cPyth�VM
 {

12 
	mpublic
:

13 
Pyth�VM
();

14 ~
Pyth�VM
();

16 
run
(
L�dL�gthFun�i�
 
l�dL�gth
, 
L�dProg�mFun�i�
 
l�dProg�m
);

17 
bo�
 
	$isRug
() const;

18 
	`��Prog�m
();

20 
�iv�e
:

21 
	`��VM
();

22 
	`��tProg�m
(
L�dL�gthFun�i�
 
l�dL�gth
, 
L�dProg�mFun�i�
 
l�dProg�m
);

23 
	`de��VM
();

25 
bo�
 
rug
;

	@
1
.
0
287
27222
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\AppTask.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\AppTask.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\BT_RN41.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\BT_RN4678.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Bluetooth\Bluetooth.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Control.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Control.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Monitor.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Monitor.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Motor.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Motor.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MotorTask.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MotorTask.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\MovingAverage.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\PythonTask.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\PythonTask.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Remote.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Remote.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\SensorTask.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\SensorTask.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorAnalog.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorAnalog.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorDebug.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorDebug.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C\SensorI2C_NXTultraschall.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C\SensorI2C_NXTultraschall.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorI2C_Strategy.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTOF.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTOF.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTouch.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorTouch.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorUART.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Sensor\SensorUART.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\ServoTask.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\ServoTask.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Settings.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\Settings.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UART_Ext.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UserInterface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\UserInterface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\config.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\lib.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\lib.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\main.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Firmware\Src\startup.S
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\moduledefs.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\mpversion.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.collected.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.generated.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\qstrdefs.preprocessed.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\build-embed\genhdr\root_pointers.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\extmod\modplatform.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\moduledefs.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\mpversion.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\qstrdefs.generated.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\genhdr\root_pointers.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\embed_util.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\micropython_embed.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mpconfigport_common.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mphalport.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\port\mphalport.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\argcheck.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmarm.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmarm.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmbase.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmbase.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmrv32.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmrv32.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmthumb.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmthumb.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx64.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx64.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx86.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmx86.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmxtensa.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\asmxtensa.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\bc0.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\binary.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\binary.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtin.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinevex.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinhelp.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\builtinimport.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\compile.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\compile.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\cstack.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\cstack.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\dynruntime.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emit.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitbc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitcommon.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitglue.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitglue.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitinlinethumb.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitinlinextensa.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnarm.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnative.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitndebug.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnrv32.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnthumb.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnx64.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnx86.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnxtensa.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\emitnxtensawin.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\formatfloat.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\formatfloat.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\frozenmod.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\frozenmod.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\gc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\gc.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\grammar.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\lexer.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\lexer.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\malloc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\map.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\misc.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modarray.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modbuiltins.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modcmath.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modcollections.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\moderrno.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modgc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modio.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modmath.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modmicropython.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modstruct.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modsys.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\modthread.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpconfig.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mperrno.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mphal.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpprint.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpprint.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpstate.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpstate.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpthread.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpz.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\mpz.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nativeglue.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nativeglue.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlr.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlr.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlraarch64.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrmips.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrpowerpc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrrv32.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrsetjmp.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrthumb.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrx64.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrx86.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\nlrxtensa.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\obj.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\obj.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objarray.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objarray.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objattrtuple.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objbool.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objboundmeth.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objcell.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objclosure.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objcomplex.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objdeque.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objdict.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objenumerate.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objexcept.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objexcept.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfilter.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfloat.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfun.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objfun.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgenerator.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgenerator.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objgetitemiter.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint_longlong.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objint_mpz.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objlist.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objlist.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmap.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmodule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objmodule.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnamedtuple.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnamedtuple.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objnone.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objobject.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objpolyiter.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objproperty.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objrange.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objreversed.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objset.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objsingleton.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objslice.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstr.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstr.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstringio.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstringio.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objstrunicode.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtuple.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtuple.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtype.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objtype.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\objzip.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\opmethods.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pairheap.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pairheap.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parse.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parse.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenum.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenum.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenumbase.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\parsenumbase.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\persistentcode.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\persistentcode.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\profile.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\profile.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pystack.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\pystack.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstr.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstr.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\qstrdefs.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\reader.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\reader.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\repl.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\repl.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\ringbuf.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\ringbuf.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime0.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\runtime_utils.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scheduler.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scope.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\scope.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\sequence.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\showbc.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\smallint.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\smallint.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stackctrl.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stackctrl.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stream.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\stream.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\unicode.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\unicode.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vm.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vmentrytable.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\vstr.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\py\warning.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\shared\runtime\gchelper.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\micropython_embed\shared\runtime\gchelper_generic.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\libs\mp_embed\mpconfigport.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Memory_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Memory_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Monitor_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Monitor_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Motor_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Motor_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Sensor_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Sensor_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Servo_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Servo_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Time_C_Interface.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\c_interface\implementation\Time_C_Interface.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Button\ButtonType.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Button\ButtonType.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\DevicesModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Motor\MotorModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Motor\MotorModule.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Sensor\SensorModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Sensor\SensorModule.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Servo\ServoModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Devices\Servo\ServoModule.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Memory\MemoryModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\KeyConstants.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\KeyConstants.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Monitor\MonitorModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\Time\TimeModule.c
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\modules\qstr.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\helper.h
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\python-vm.cpp
C:\Users\nils9\Desktop\Bachelorarbeit\ORB\ORB-Python\src\python-vm\python-vm.h
